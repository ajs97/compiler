Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    FLOAT

Grammar

Rule 0     S' -> compilation-unit
Rule 1     compilation-unit -> class-declarations-opt
Rule 2     semi-opt -> DELIM
Rule 3     semi-opt -> empty
Rule 4     class-declarations-opt -> class-declarations
Rule 5     class-declarations-opt -> empty
Rule 6     class-declarations -> class-declaration
Rule 7     class-declarations -> class-declarations class-declaration
Rule 8     class-declaration -> class-header class-body semi-opt
Rule 9     class-header -> CLASS IDENTIFIER COLON class-type
Rule 10    class-header -> CLASS IDENTIFIER
Rule 11    class-type -> IDENTIFIER
Rule 12    class-body -> BLOCK_BEGIN class-member-declarations-opt BLOCK_END
Rule 13    class-member-declarations-opt -> class-member-declarations
Rule 14    class-member-declarations-opt -> empty
Rule 15    class-member-declarations -> class-member-declaration
Rule 16    class-member-declarations -> class-member-declarations class-member-declaration
Rule 17    class-member-declaration -> constant-declaration
Rule 18    class-member-declaration -> field-declaration
Rule 19    class-member-declaration -> method-declaration
Rule 20    class-member-declaration -> constructor-declaration
Rule 21    constant-declaration -> CONST simple-type constant-declarators DELIM
Rule 22    constant-declaration -> modifier CONST simple-type constant-declarators DELIM
Rule 23    type -> simple-type
Rule 24    type -> class-type
Rule 25    type -> array-type
Rule 26    simple-type -> BOOL
Rule 27    simple-type -> INT
Rule 28    simple-type -> UINT
Rule 29    simple-type -> CHAR
Rule 30    simple-type -> DOUBLE
Rule 31    simple-type -> STRING
Rule 32    array-type -> simple-type OPEN_BRACKET ICONST CLOSE_BRACKET
Rule 33    constant-declarators -> constant-declarator
Rule 34    constant-declarators -> constant-declarators COMMA constant-declarator
Rule 35    constant-declarator -> IDENTIFIER ASSIGN expression
Rule 36    expression -> conditional-expression
Rule 37    expression -> assignment
Rule 38    conditional-expression -> conditional-or-expression
Rule 39    conditional-expression -> conditional-or-expression CONDOP expression COLON expression
Rule 40    conditional-or-expression -> conditional-and-expression
Rule 41    conditional-or-expression -> conditional-or-expression M_or LOGOR conditional-and-expression
Rule 42    M_or -> empty
Rule 43    M_and -> empty
Rule 44    conditional-and-expression -> inclusive-or-expression
Rule 45    conditional-and-expression -> conditional-and-expression M_and LOGAND inclusive-or-expression
Rule 46    inclusive-or-expression -> exclusive-or-expression
Rule 47    inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression
Rule 48    exclusive-or-expression -> and-expression
Rule 49    exclusive-or-expression -> exclusive-or-expression BITXOR and-expression
Rule 50    and-expression -> equality-expression
Rule 51    and-expression -> and-expression BITAND equality-expression
Rule 52    equality-expression -> relational-expression
Rule 53    equality-expression -> equality-expression EQ relational-expression
Rule 54    equality-expression -> equality-expression NE relational-expression
Rule 55    relational-expression -> shift-expression
Rule 56    relational-expression -> relational-expression LT shift-expression
Rule 57    relational-expression -> relational-expression GT shift-expression
Rule 58    relational-expression -> relational-expression LE shift-expression
Rule 59    relational-expression -> relational-expression GE shift-expression
Rule 60    shift-expression -> additive-expression
Rule 61    shift-expression -> shift-expression LSHIFT additive-expression
Rule 62    shift-expression -> shift-expression RSHIFT additive-expression
Rule 63    additive-expression -> multiplicative-expression
Rule 64    additive-expression -> additive-expression PLUS multiplicative-expression
Rule 65    additive-expression -> additive-expression MINUS multiplicative-expression
Rule 66    multiplicative-expression -> unary-expression
Rule 67    multiplicative-expression -> multiplicative-expression TIMES unary-expression
Rule 68    multiplicative-expression -> multiplicative-expression DIV unary-expression
Rule 69    multiplicative-expression -> multiplicative-expression MOD unary-expression
Rule 70    unary-expression -> primary-expression
Rule 71    unary-expression -> PLUS unary-expression
Rule 72    unary-expression -> MINUS unary-expression
Rule 73    unary-expression -> BITNOT unary-expression
Rule 74    unary-expression -> BITCOMP unary-expression
Rule 75    primary-expression -> primary-no-array-creation-expression
Rule 76    expression-list -> expression
Rule 77    expression-list -> expression-list COMMA expression
Rule 78    array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END
Rule 79    variable-initializer-list-opt -> expression-list
Rule 80    variable-initializer-list-opt -> empty
Rule 81    variable-initializer -> expression
Rule 82    variable-initializer -> array-initializer
Rule 83    primary-no-array-creation-expression -> literal
Rule 84    primary-no-array-creation-expression -> IDENTIFIER
Rule 85    primary-no-array-creation-expression -> element-access
Rule 86    primary-no-array-creation-expression -> parenthesized-expression
Rule 87    primary-no-array-creation-expression -> member-access
Rule 88    primary-no-array-creation-expression -> invocation-expression
Rule 89    primary-no-array-creation-expression -> object-creation-expression
Rule 90    object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN
Rule 91    parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN
Rule 92    member-access -> IDENTIFIER DOT IDENTIFIER
Rule 93    invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
Rule 94    invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
Rule 95    argument-list-opt -> expression-list
Rule 96    argument-list-opt -> empty
Rule 97    element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
Rule 98    element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET
Rule 99    assignment -> IDENTIFIER assignment-operator expression
Rule 100   assignment -> member-access assignment-operator expression
Rule 101   assignment -> element-access assignment-operator expression
Rule 102   assignment-operator -> ASSIGN
Rule 103   assignment-operator -> PLUSEQUAL
Rule 104   assignment-operator -> MINUSEQUAL
Rule 105   assignment-operator -> TIMESEQUAL
Rule 106   assignment-operator -> DIVEQUAL
Rule 107   assignment-operator -> MODEQUAL
Rule 108   assignment-operator -> BITANDEQUAL
Rule 109   assignment-operator -> BITOREQUAL
Rule 110   assignment-operator -> BITXOREQUAL
Rule 111   assignment-operator -> LSHIFTEQUAL
Rule 112   assignment-operator -> RSHIFTEQUAL
Rule 113   field-declaration -> modifier type variable-declarators DELIM
Rule 114   field-declaration -> type variable-declarators DELIM
Rule 115   modifier -> PUBLIC
Rule 116   modifier -> PRIVATE
Rule 117   variable-declarators -> variable-declarator
Rule 118   variable-declarators -> variable-declarators COMMA variable-declarator
Rule 119   variable-declarator -> IDENTIFIER
Rule 120   variable-declarator -> IDENTIFIER ASSIGN variable-initializer
Rule 121   method-declaration -> method-header method-body
Rule 122   method-header -> type IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
Rule 123   method-header -> VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
Rule 124   formal-parameter-list-opt -> formal-parameter-list
Rule 125   formal-parameter-list-opt -> empty
Rule 126   formal-parameter-list -> fixed-parameters
Rule 127   fixed-parameters -> fixed-parameter
Rule 128   fixed-parameters -> fixed-parameters COMMA fixed-parameter
Rule 129   fixed-parameter -> type IDENTIFIER
Rule 130   method-body -> method-block
Rule 131   method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END
Rule 132   block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END
Rule 133   M_bstart -> empty
Rule 134   statement-list-opt -> statement-list
Rule 135   statement-list-opt -> empty
Rule 136   statement-list -> statement
Rule 137   statement-list -> statement-list statement
Rule 138   statement -> labeled-statement
Rule 139   statement -> declaration-statement
Rule 140   statement -> block
Rule 141   statement -> empty-statement
Rule 142   statement -> expression-statement
Rule 143   statement -> selection-statement
Rule 144   statement -> iteration-statement
Rule 145   statement -> jump-statement
Rule 146   statement -> write-statement
Rule 147   statement -> read-statement
Rule 148   statement -> method-declaration
Rule 149   write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM
Rule 150   print-list -> expression
Rule 151   print-list -> expression COMMA print-list
Rule 152   read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM
Rule 153   labeled-statement -> IDENTIFIER COLON statement
Rule 154   declaration-statement -> local-variable-declaration DELIM
Rule 155   declaration-statement -> local-constant-declaration DELIM
Rule 156   local-variable-declaration -> type variable-declarators
Rule 157   local-constant-declaration -> CONST simple-type constant-declarators
Rule 158   empty-statement -> DELIM
Rule 159   expression-statement -> statement-expression DELIM
Rule 160   statement-expression -> invocation-expression
Rule 161   statement-expression -> assignment
Rule 162   selection-statement -> if-statement
Rule 163   selection-statement -> switch-statement
Rule 164   if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block
Rule 165   if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block
Rule 166   if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad
Rule 167   M_if -> empty
Rule 168   M_else -> empty
Rule 169   M_quad -> empty
Rule 170   switch-statement -> SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block
Rule 171   M_switch -> empty
Rule 172   switch-block -> BLOCK_BEGIN M_bstart switch-sections BLOCK_END
Rule 173   switch-sections -> switch-section
Rule 174   switch-sections -> switch-sections switch-section
Rule 175   switch-section -> switch-label M_quad statement-list
Rule 176   switch-label -> CASE literal COLON
Rule 177   switch-label -> DEFAULT COLON
Rule 178   iteration-statement -> while-statement M_quad
Rule 179   iteration-statement -> for-statement M_quad
Rule 180   iteration-statement -> do-statement M_quad
Rule 181   while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block
Rule 182   M_while -> empty
Rule 183   do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM
Rule 184   for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block
Rule 185   for-initializer-opt -> for-initializer
Rule 186   for-initializer-opt -> empty
Rule 187   for-initializer -> statement-expression-list
Rule 188   for-condition -> expression
Rule 189   for-condition -> empty
Rule 190   for-iterator-opt -> for-iterator
Rule 191   for-iterator-opt -> empty
Rule 192   for-iterator -> statement-expression-list
Rule 193   statement-expression-list -> statement-expression
Rule 194   statement-expression-list -> statement-expression-list COMMA statement-expression
Rule 195   jump-statement -> break-statement
Rule 196   jump-statement -> continue-statement
Rule 197   jump-statement -> goto-statement
Rule 198   jump-statement -> return-statement
Rule 199   break-statement -> BREAK DELIM
Rule 200   continue-statement -> CONTINUE DELIM
Rule 201   goto-statement -> GOTO IDENTIFIER DELIM
Rule 202   return-statement -> RETURN expression DELIM
Rule 203   return-statement -> RETURN DELIM
Rule 204   constructor-declaration -> constructor-declarator constructor-body
Rule 205   constructor-declarator -> IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
Rule 206   constructor-body -> block
Rule 207   constructor-body -> DELIM
Rule 208   literal -> ICONST
Rule 209   literal -> DCONST
Rule 210   literal -> TRUE
Rule 211   literal -> FALSE
Rule 212   literal -> CCONST
Rule 213   literal -> SCONST
Rule 214   empty -> <empty>

Terminals, with rules where they appear

ASSIGN               : 35 102 120
BITAND               : 51
BITANDEQUAL          : 108
BITCOMP              : 74
BITNOT               : 73
BITOR                : 47
BITOREQUAL           : 109
BITXOR               : 49
BITXOREQUAL          : 110
BLOCK_BEGIN          : 12 78 131 132 172
BLOCK_END            : 12 78 131 132 172
BOOL                 : 26
BREAK                : 199
CASE                 : 176
CCONST               : 212
CHAR                 : 29
CLASS                : 9 10
CLOSE_BRACKET        : 32 97 98
CLOSE_PAREN          : 90 91 93 94 122 123 149 152 164 165 166 170 181 183 184 205
COLON                : 9 39 153 176 177
COMMA                : 34 77 118 128 151 194
CONDOP               : 39
CONSOLE              : 149 152
CONST                : 21 22 157
CONTINUE             : 200
DCONST               : 209
DEFAULT              : 177
DELIM                : 2 21 22 113 114 149 152 154 155 158 159 183 184 184 199 200 201 202 203 207
DIV                  : 68
DIVEQUAL             : 106
DO                   : 183
DOT                  : 92 94 149 152
DOUBLE               : 30
ELSE                 : 165 166
EQ                   : 53
FALSE                : 211
FLOAT                : 
FOR                  : 184
GE                   : 59
GOTO                 : 201
GT                   : 57
ICONST               : 32 208
IDENTIFIER           : 9 10 11 35 84 92 92 93 94 94 97 99 119 120 122 123 129 152 153 201 205
IF                   : 164 165 166
INT                  : 27
LE                   : 58
LOGAND               : 45
LOGOR                : 41
LSHIFT               : 61
LSHIFTEQUAL          : 111
LT                   : 56
MINUS                : 65 72
MINUSEQUAL           : 104
MOD                  : 69
MODEQUAL             : 107
NE                   : 54
NEW                  : 90
OPEN_BRACKET         : 32 97 98
OPEN_PAREN           : 90 91 93 94 122 123 149 152 164 165 166 170 181 183 184 205
PLUS                 : 64 71
PLUSEQUAL            : 103
PRIVATE              : 116
PUBLIC               : 115
READLINE             : 152
RETURN               : 202 203
RSHIFT               : 62
RSHIFTEQUAL          : 112
SCONST               : 213
STRING               : 31
SWITCH               : 170
TIMES                : 67
TIMESEQUAL           : 105
TRUE                 : 210
UINT                 : 28
VOID                 : 123
WHILE                : 181 183
WRITELINE            : 149
error                : 

Nonterminals, with rules where they appear

M_and                : 45
M_bstart             : 132 172
M_else               : 165 166
M_if                 : 164 165 166
M_or                 : 41
M_quad               : 166 170 175 178 179 180 181 183 183 184 184 184
M_switch             : 170
M_while              : 181
additive-expression  : 60 61 62 64 65
and-expression       : 48 49 51
argument-list-opt    : 90 93 94
array-initializer    : 82
array-type           : 25
assignment           : 37 161
assignment-operator  : 99 100 101
block                : 140 164 165 165 166 181 183 184 206
break-statement      : 195
class-body           : 8
class-declaration    : 6 7
class-declarations   : 4 7
class-declarations-opt : 1
class-header         : 8
class-member-declaration : 15 16
class-member-declarations : 13 16
class-member-declarations-opt : 12
class-type           : 9 24 90
compilation-unit     : 0
conditional-and-expression : 40 41 45
conditional-expression : 36
conditional-or-expression : 38 39 41
constant-declaration : 17
constant-declarator  : 33 34
constant-declarators : 21 22 34 157
constructor-body     : 204
constructor-declaration : 20
constructor-declarator : 204
continue-statement   : 196
declaration-statement : 139
do-statement         : 180
element-access       : 85 101
empty                : 3 5 14 42 43 80 96 125 133 135 167 168 169 171 182 186 189 191
empty-statement      : 141
equality-expression  : 50 51 53 54
exclusive-or-expression : 46 47 49
expression           : 35 39 39 76 77 81 91 97 98 99 100 101 150 151 164 165 166 170 181 183 188 202
expression-list      : 77 79 95
expression-statement : 142
field-declaration    : 18
fixed-parameter      : 127 128
fixed-parameters     : 126 128
for-condition        : 184
for-initializer      : 185
for-initializer-opt  : 184
for-iterator         : 190
for-iterator-opt     : 184
for-statement        : 179
formal-parameter-list : 124
formal-parameter-list-opt : 122 123 205
goto-statement       : 197
if-statement         : 162 166
inclusive-or-expression : 44 45 47
invocation-expression : 88 160
iteration-statement  : 144
jump-statement       : 145
labeled-statement    : 138
literal              : 83 176
local-constant-declaration : 155
local-variable-declaration : 154
member-access        : 87 98 100
method-block         : 130
method-body          : 121
method-declaration   : 19 148
method-header        : 121
modifier             : 22 113
multiplicative-expression : 63 64 65 67 68 69
object-creation-expression : 89
parenthesized-expression : 86
primary-expression   : 70
primary-no-array-creation-expression : 75
print-list           : 149 151
read-statement       : 147
relational-expression : 52 53 54 56 57 58 59
return-statement     : 198
selection-statement  : 143
semi-opt             : 8
shift-expression     : 55 56 57 58 59 61 62
simple-type          : 21 22 23 32 157
statement            : 136 137 153
statement-expression : 159 193 194
statement-expression-list : 187 192 194
statement-list       : 134 137 175
statement-list-opt   : 131 132
switch-block         : 170
switch-label         : 175
switch-section       : 173 174
switch-sections      : 172 174
switch-statement     : 163
type                 : 113 114 122 129 156
unary-expression     : 66 67 68 69 71 72 73 74
variable-declarator  : 117 118
variable-declarators : 113 114 118 156
variable-initializer : 120
variable-initializer-list-opt : 78
while-statement      : 178
write-statement      : 146

Parsing method: LALR

state 0

    (0) S' -> . compilation-unit
    (1) compilation-unit -> . class-declarations-opt
    (4) class-declarations-opt -> . class-declarations
    (5) class-declarations-opt -> . empty
    (6) class-declarations -> . class-declaration
    (7) class-declarations -> . class-declarations class-declaration
    (214) empty -> .
    (8) class-declaration -> . class-header class-body semi-opt
    (9) class-header -> . CLASS IDENTIFIER COLON class-type
    (10) class-header -> . CLASS IDENTIFIER

    $end            reduce using rule 214 (empty -> .)
    CLASS           shift and go to state 6

    class-declarations-opt         shift and go to state 1
    class-declarations             shift and go to state 2
    class-declaration              shift and go to state 3
    compilation-unit               shift and go to state 4
    empty                          shift and go to state 5
    class-header                   shift and go to state 7

state 1

    (1) compilation-unit -> class-declarations-opt .

    $end            reduce using rule 1 (compilation-unit -> class-declarations-opt .)


state 2

    (4) class-declarations-opt -> class-declarations .
    (7) class-declarations -> class-declarations . class-declaration
    (8) class-declaration -> . class-header class-body semi-opt
    (9) class-header -> . CLASS IDENTIFIER COLON class-type
    (10) class-header -> . CLASS IDENTIFIER

    $end            reduce using rule 4 (class-declarations-opt -> class-declarations .)
    CLASS           shift and go to state 6

    class-declaration              shift and go to state 8
    class-header                   shift and go to state 7

state 3

    (6) class-declarations -> class-declaration .

    CLASS           reduce using rule 6 (class-declarations -> class-declaration .)
    $end            reduce using rule 6 (class-declarations -> class-declaration .)


state 4

    (0) S' -> compilation-unit .



state 5

    (5) class-declarations-opt -> empty .

    $end            reduce using rule 5 (class-declarations-opt -> empty .)


state 6

    (9) class-header -> CLASS . IDENTIFIER COLON class-type
    (10) class-header -> CLASS . IDENTIFIER

    IDENTIFIER      shift and go to state 9


state 7

    (8) class-declaration -> class-header . class-body semi-opt
    (12) class-body -> . BLOCK_BEGIN class-member-declarations-opt BLOCK_END

    BLOCK_BEGIN     shift and go to state 11

    class-body                     shift and go to state 10

state 8

    (7) class-declarations -> class-declarations class-declaration .

    CLASS           reduce using rule 7 (class-declarations -> class-declarations class-declaration .)
    $end            reduce using rule 7 (class-declarations -> class-declarations class-declaration .)


state 9

    (9) class-header -> CLASS IDENTIFIER . COLON class-type
    (10) class-header -> CLASS IDENTIFIER .

    COLON           shift and go to state 12
    BLOCK_BEGIN     reduce using rule 10 (class-header -> CLASS IDENTIFIER .)


state 10

    (8) class-declaration -> class-header class-body . semi-opt
    (2) semi-opt -> . DELIM
    (3) semi-opt -> . empty
    (214) empty -> .

    DELIM           shift and go to state 14
    CLASS           reduce using rule 214 (empty -> .)
    $end            reduce using rule 214 (empty -> .)

    semi-opt                       shift and go to state 13
    empty                          shift and go to state 15

state 11

    (12) class-body -> BLOCK_BEGIN . class-member-declarations-opt BLOCK_END
    (13) class-member-declarations-opt -> . class-member-declarations
    (14) class-member-declarations-opt -> . empty
    (15) class-member-declarations -> . class-member-declaration
    (16) class-member-declarations -> . class-member-declarations class-member-declaration
    (214) empty -> .
    (17) class-member-declaration -> . constant-declaration
    (18) class-member-declaration -> . field-declaration
    (19) class-member-declaration -> . method-declaration
    (20) class-member-declaration -> . constructor-declaration
    (21) constant-declaration -> . CONST simple-type constant-declarators DELIM
    (22) constant-declaration -> . modifier CONST simple-type constant-declarators DELIM
    (113) field-declaration -> . modifier type variable-declarators DELIM
    (114) field-declaration -> . type variable-declarators DELIM
    (121) method-declaration -> . method-header method-body
    (204) constructor-declaration -> . constructor-declarator constructor-body
    (115) modifier -> . PUBLIC
    (116) modifier -> . PRIVATE
    (23) type -> . simple-type
    (24) type -> . class-type
    (25) type -> . array-type
    (122) method-header -> . type IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (123) method-header -> . VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (205) constructor-declarator -> . IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (26) simple-type -> . BOOL
    (27) simple-type -> . INT
    (28) simple-type -> . UINT
    (29) simple-type -> . CHAR
    (30) simple-type -> . DOUBLE
    (31) simple-type -> . STRING
    (11) class-type -> . IDENTIFIER
    (32) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET

    BLOCK_END       reduce using rule 214 (empty -> .)
    CONST           shift and go to state 20
    PUBLIC          shift and go to state 41
    PRIVATE         shift and go to state 22
    VOID            shift and go to state 17
    IDENTIFIER      shift and go to state 33
    BOOL            shift and go to state 37
    INT             shift and go to state 34
    UINT            shift and go to state 32
    CHAR            shift and go to state 18
    DOUBLE          shift and go to state 35
    STRING          shift and go to state 21

    modifier                       shift and go to state 40
    class-member-declarations-opt  shift and go to state 29
    method-header                  shift and go to state 16
    constructor-declaration        shift and go to state 30
    constructor-declarator         shift and go to state 36
    array-type                     shift and go to state 28
    class-member-declarations      shift and go to state 31
    method-declaration             shift and go to state 23
    class-member-declaration       shift and go to state 39
    field-declaration              shift and go to state 24
    class-type                     shift and go to state 38
    simple-type                    shift and go to state 19
    constant-declaration           shift and go to state 25
    type                           shift and go to state 26
    empty                          shift and go to state 27

state 12

    (9) class-header -> CLASS IDENTIFIER COLON . class-type
    (11) class-type -> . IDENTIFIER

    IDENTIFIER      shift and go to state 42

    class-type                     shift and go to state 43

state 13

    (8) class-declaration -> class-header class-body semi-opt .

    CLASS           reduce using rule 8 (class-declaration -> class-header class-body semi-opt .)
    $end            reduce using rule 8 (class-declaration -> class-header class-body semi-opt .)


state 14

    (2) semi-opt -> DELIM .

    CLASS           reduce using rule 2 (semi-opt -> DELIM .)
    $end            reduce using rule 2 (semi-opt -> DELIM .)


state 15

    (3) semi-opt -> empty .

    CLASS           reduce using rule 3 (semi-opt -> empty .)
    $end            reduce using rule 3 (semi-opt -> empty .)


state 16

    (121) method-declaration -> method-header . method-body
    (130) method-body -> . method-block
    (131) method-block -> . BLOCK_BEGIN statement-list-opt BLOCK_END

    BLOCK_BEGIN     shift and go to state 45

    method-body                    shift and go to state 46
    method-block                   shift and go to state 44

state 17

    (123) method-header -> VOID . IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 47


state 18

    (29) simple-type -> CHAR .

    OPEN_BRACKET    reduce using rule 29 (simple-type -> CHAR .)
    IDENTIFIER      reduce using rule 29 (simple-type -> CHAR .)


state 19

    (23) type -> simple-type .
    (32) array-type -> simple-type . OPEN_BRACKET ICONST CLOSE_BRACKET

    IDENTIFIER      reduce using rule 23 (type -> simple-type .)
    OPEN_BRACKET    shift and go to state 48


state 20

    (21) constant-declaration -> CONST . simple-type constant-declarators DELIM
    (26) simple-type -> . BOOL
    (27) simple-type -> . INT
    (28) simple-type -> . UINT
    (29) simple-type -> . CHAR
    (30) simple-type -> . DOUBLE
    (31) simple-type -> . STRING

    BOOL            shift and go to state 37
    INT             shift and go to state 34
    UINT            shift and go to state 32
    CHAR            shift and go to state 18
    DOUBLE          shift and go to state 35
    STRING          shift and go to state 21

    simple-type                    shift and go to state 49

state 21

    (31) simple-type -> STRING .

    OPEN_BRACKET    reduce using rule 31 (simple-type -> STRING .)
    IDENTIFIER      reduce using rule 31 (simple-type -> STRING .)


state 22

    (116) modifier -> PRIVATE .

    CONST           reduce using rule 116 (modifier -> PRIVATE .)
    BOOL            reduce using rule 116 (modifier -> PRIVATE .)
    INT             reduce using rule 116 (modifier -> PRIVATE .)
    UINT            reduce using rule 116 (modifier -> PRIVATE .)
    CHAR            reduce using rule 116 (modifier -> PRIVATE .)
    DOUBLE          reduce using rule 116 (modifier -> PRIVATE .)
    STRING          reduce using rule 116 (modifier -> PRIVATE .)
    IDENTIFIER      reduce using rule 116 (modifier -> PRIVATE .)


state 23

    (19) class-member-declaration -> method-declaration .

    CONST           reduce using rule 19 (class-member-declaration -> method-declaration .)
    PUBLIC          reduce using rule 19 (class-member-declaration -> method-declaration .)
    PRIVATE         reduce using rule 19 (class-member-declaration -> method-declaration .)
    VOID            reduce using rule 19 (class-member-declaration -> method-declaration .)
    IDENTIFIER      reduce using rule 19 (class-member-declaration -> method-declaration .)
    BOOL            reduce using rule 19 (class-member-declaration -> method-declaration .)
    INT             reduce using rule 19 (class-member-declaration -> method-declaration .)
    UINT            reduce using rule 19 (class-member-declaration -> method-declaration .)
    CHAR            reduce using rule 19 (class-member-declaration -> method-declaration .)
    DOUBLE          reduce using rule 19 (class-member-declaration -> method-declaration .)
    STRING          reduce using rule 19 (class-member-declaration -> method-declaration .)
    BLOCK_END       reduce using rule 19 (class-member-declaration -> method-declaration .)


state 24

    (18) class-member-declaration -> field-declaration .

    CONST           reduce using rule 18 (class-member-declaration -> field-declaration .)
    PUBLIC          reduce using rule 18 (class-member-declaration -> field-declaration .)
    PRIVATE         reduce using rule 18 (class-member-declaration -> field-declaration .)
    VOID            reduce using rule 18 (class-member-declaration -> field-declaration .)
    IDENTIFIER      reduce using rule 18 (class-member-declaration -> field-declaration .)
    BOOL            reduce using rule 18 (class-member-declaration -> field-declaration .)
    INT             reduce using rule 18 (class-member-declaration -> field-declaration .)
    UINT            reduce using rule 18 (class-member-declaration -> field-declaration .)
    CHAR            reduce using rule 18 (class-member-declaration -> field-declaration .)
    DOUBLE          reduce using rule 18 (class-member-declaration -> field-declaration .)
    STRING          reduce using rule 18 (class-member-declaration -> field-declaration .)
    BLOCK_END       reduce using rule 18 (class-member-declaration -> field-declaration .)


state 25

    (17) class-member-declaration -> constant-declaration .

    CONST           reduce using rule 17 (class-member-declaration -> constant-declaration .)
    PUBLIC          reduce using rule 17 (class-member-declaration -> constant-declaration .)
    PRIVATE         reduce using rule 17 (class-member-declaration -> constant-declaration .)
    VOID            reduce using rule 17 (class-member-declaration -> constant-declaration .)
    IDENTIFIER      reduce using rule 17 (class-member-declaration -> constant-declaration .)
    BOOL            reduce using rule 17 (class-member-declaration -> constant-declaration .)
    INT             reduce using rule 17 (class-member-declaration -> constant-declaration .)
    UINT            reduce using rule 17 (class-member-declaration -> constant-declaration .)
    CHAR            reduce using rule 17 (class-member-declaration -> constant-declaration .)
    DOUBLE          reduce using rule 17 (class-member-declaration -> constant-declaration .)
    STRING          reduce using rule 17 (class-member-declaration -> constant-declaration .)
    BLOCK_END       reduce using rule 17 (class-member-declaration -> constant-declaration .)


state 26

    (114) field-declaration -> type . variable-declarators DELIM
    (122) method-header -> type . IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (117) variable-declarators -> . variable-declarator
    (118) variable-declarators -> . variable-declarators COMMA variable-declarator
    (119) variable-declarator -> . IDENTIFIER
    (120) variable-declarator -> . IDENTIFIER ASSIGN variable-initializer

    IDENTIFIER      shift and go to state 52

    variable-declarator            shift and go to state 50
    variable-declarators           shift and go to state 51

state 27

    (14) class-member-declarations-opt -> empty .

    BLOCK_END       reduce using rule 14 (class-member-declarations-opt -> empty .)


state 28

    (25) type -> array-type .

    IDENTIFIER      reduce using rule 25 (type -> array-type .)


state 29

    (12) class-body -> BLOCK_BEGIN class-member-declarations-opt . BLOCK_END

    BLOCK_END       shift and go to state 53


state 30

    (20) class-member-declaration -> constructor-declaration .

    CONST           reduce using rule 20 (class-member-declaration -> constructor-declaration .)
    PUBLIC          reduce using rule 20 (class-member-declaration -> constructor-declaration .)
    PRIVATE         reduce using rule 20 (class-member-declaration -> constructor-declaration .)
    VOID            reduce using rule 20 (class-member-declaration -> constructor-declaration .)
    IDENTIFIER      reduce using rule 20 (class-member-declaration -> constructor-declaration .)
    BOOL            reduce using rule 20 (class-member-declaration -> constructor-declaration .)
    INT             reduce using rule 20 (class-member-declaration -> constructor-declaration .)
    UINT            reduce using rule 20 (class-member-declaration -> constructor-declaration .)
    CHAR            reduce using rule 20 (class-member-declaration -> constructor-declaration .)
    DOUBLE          reduce using rule 20 (class-member-declaration -> constructor-declaration .)
    STRING          reduce using rule 20 (class-member-declaration -> constructor-declaration .)
    BLOCK_END       reduce using rule 20 (class-member-declaration -> constructor-declaration .)


state 31

    (13) class-member-declarations-opt -> class-member-declarations .
    (16) class-member-declarations -> class-member-declarations . class-member-declaration
    (17) class-member-declaration -> . constant-declaration
    (18) class-member-declaration -> . field-declaration
    (19) class-member-declaration -> . method-declaration
    (20) class-member-declaration -> . constructor-declaration
    (21) constant-declaration -> . CONST simple-type constant-declarators DELIM
    (22) constant-declaration -> . modifier CONST simple-type constant-declarators DELIM
    (113) field-declaration -> . modifier type variable-declarators DELIM
    (114) field-declaration -> . type variable-declarators DELIM
    (121) method-declaration -> . method-header method-body
    (204) constructor-declaration -> . constructor-declarator constructor-body
    (115) modifier -> . PUBLIC
    (116) modifier -> . PRIVATE
    (23) type -> . simple-type
    (24) type -> . class-type
    (25) type -> . array-type
    (122) method-header -> . type IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (123) method-header -> . VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (205) constructor-declarator -> . IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (26) simple-type -> . BOOL
    (27) simple-type -> . INT
    (28) simple-type -> . UINT
    (29) simple-type -> . CHAR
    (30) simple-type -> . DOUBLE
    (31) simple-type -> . STRING
    (11) class-type -> . IDENTIFIER
    (32) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET

    BLOCK_END       reduce using rule 13 (class-member-declarations-opt -> class-member-declarations .)
    CONST           shift and go to state 20
    PUBLIC          shift and go to state 41
    PRIVATE         shift and go to state 22
    VOID            shift and go to state 17
    IDENTIFIER      shift and go to state 33
    BOOL            shift and go to state 37
    INT             shift and go to state 34
    UINT            shift and go to state 32
    CHAR            shift and go to state 18
    DOUBLE          shift and go to state 35
    STRING          shift and go to state 21

    modifier                       shift and go to state 40
    method-header                  shift and go to state 16
    constructor-declaration        shift and go to state 30
    constructor-declarator         shift and go to state 36
    array-type                     shift and go to state 28
    method-declaration             shift and go to state 23
    class-member-declaration       shift and go to state 54
    field-declaration              shift and go to state 24
    class-type                     shift and go to state 38
    simple-type                    shift and go to state 19
    constant-declaration           shift and go to state 25
    type                           shift and go to state 26

state 32

    (28) simple-type -> UINT .

    OPEN_BRACKET    reduce using rule 28 (simple-type -> UINT .)
    IDENTIFIER      reduce using rule 28 (simple-type -> UINT .)


state 33

    (205) constructor-declarator -> IDENTIFIER . OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (11) class-type -> IDENTIFIER .

    OPEN_PAREN      shift and go to state 55
    IDENTIFIER      reduce using rule 11 (class-type -> IDENTIFIER .)


state 34

    (27) simple-type -> INT .

    OPEN_BRACKET    reduce using rule 27 (simple-type -> INT .)
    IDENTIFIER      reduce using rule 27 (simple-type -> INT .)


state 35

    (30) simple-type -> DOUBLE .

    OPEN_BRACKET    reduce using rule 30 (simple-type -> DOUBLE .)
    IDENTIFIER      reduce using rule 30 (simple-type -> DOUBLE .)


state 36

    (204) constructor-declaration -> constructor-declarator . constructor-body
    (206) constructor-body -> . block
    (207) constructor-body -> . DELIM
    (132) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END

    DELIM           shift and go to state 57
    BLOCK_BEGIN     shift and go to state 58

    constructor-body               shift and go to state 56
    block                          shift and go to state 59

state 37

    (26) simple-type -> BOOL .

    OPEN_BRACKET    reduce using rule 26 (simple-type -> BOOL .)
    IDENTIFIER      reduce using rule 26 (simple-type -> BOOL .)


state 38

    (24) type -> class-type .

    IDENTIFIER      reduce using rule 24 (type -> class-type .)


state 39

    (15) class-member-declarations -> class-member-declaration .

    CONST           reduce using rule 15 (class-member-declarations -> class-member-declaration .)
    PUBLIC          reduce using rule 15 (class-member-declarations -> class-member-declaration .)
    PRIVATE         reduce using rule 15 (class-member-declarations -> class-member-declaration .)
    VOID            reduce using rule 15 (class-member-declarations -> class-member-declaration .)
    IDENTIFIER      reduce using rule 15 (class-member-declarations -> class-member-declaration .)
    BOOL            reduce using rule 15 (class-member-declarations -> class-member-declaration .)
    INT             reduce using rule 15 (class-member-declarations -> class-member-declaration .)
    UINT            reduce using rule 15 (class-member-declarations -> class-member-declaration .)
    CHAR            reduce using rule 15 (class-member-declarations -> class-member-declaration .)
    DOUBLE          reduce using rule 15 (class-member-declarations -> class-member-declaration .)
    STRING          reduce using rule 15 (class-member-declarations -> class-member-declaration .)
    BLOCK_END       reduce using rule 15 (class-member-declarations -> class-member-declaration .)


state 40

    (22) constant-declaration -> modifier . CONST simple-type constant-declarators DELIM
    (113) field-declaration -> modifier . type variable-declarators DELIM
    (23) type -> . simple-type
    (24) type -> . class-type
    (25) type -> . array-type
    (26) simple-type -> . BOOL
    (27) simple-type -> . INT
    (28) simple-type -> . UINT
    (29) simple-type -> . CHAR
    (30) simple-type -> . DOUBLE
    (31) simple-type -> . STRING
    (11) class-type -> . IDENTIFIER
    (32) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET

    CONST           shift and go to state 60
    BOOL            shift and go to state 37
    INT             shift and go to state 34
    UINT            shift and go to state 32
    CHAR            shift and go to state 18
    DOUBLE          shift and go to state 35
    STRING          shift and go to state 21
    IDENTIFIER      shift and go to state 42

    array-type                     shift and go to state 28
    simple-type                    shift and go to state 19
    class-type                     shift and go to state 38
    type                           shift and go to state 61

state 41

    (115) modifier -> PUBLIC .

    CONST           reduce using rule 115 (modifier -> PUBLIC .)
    BOOL            reduce using rule 115 (modifier -> PUBLIC .)
    INT             reduce using rule 115 (modifier -> PUBLIC .)
    UINT            reduce using rule 115 (modifier -> PUBLIC .)
    CHAR            reduce using rule 115 (modifier -> PUBLIC .)
    DOUBLE          reduce using rule 115 (modifier -> PUBLIC .)
    STRING          reduce using rule 115 (modifier -> PUBLIC .)
    IDENTIFIER      reduce using rule 115 (modifier -> PUBLIC .)


state 42

    (11) class-type -> IDENTIFIER .

    IDENTIFIER      reduce using rule 11 (class-type -> IDENTIFIER .)
    BLOCK_BEGIN     reduce using rule 11 (class-type -> IDENTIFIER .)
    OPEN_PAREN      reduce using rule 11 (class-type -> IDENTIFIER .)


state 43

    (9) class-header -> CLASS IDENTIFIER COLON class-type .

    BLOCK_BEGIN     reduce using rule 9 (class-header -> CLASS IDENTIFIER COLON class-type .)


state 44

    (130) method-body -> method-block .

    CONST           reduce using rule 130 (method-body -> method-block .)
    PUBLIC          reduce using rule 130 (method-body -> method-block .)
    PRIVATE         reduce using rule 130 (method-body -> method-block .)
    VOID            reduce using rule 130 (method-body -> method-block .)
    IDENTIFIER      reduce using rule 130 (method-body -> method-block .)
    BOOL            reduce using rule 130 (method-body -> method-block .)
    INT             reduce using rule 130 (method-body -> method-block .)
    UINT            reduce using rule 130 (method-body -> method-block .)
    CHAR            reduce using rule 130 (method-body -> method-block .)
    DOUBLE          reduce using rule 130 (method-body -> method-block .)
    STRING          reduce using rule 130 (method-body -> method-block .)
    BLOCK_END       reduce using rule 130 (method-body -> method-block .)
    BLOCK_BEGIN     reduce using rule 130 (method-body -> method-block .)
    DELIM           reduce using rule 130 (method-body -> method-block .)
    CONSOLE         reduce using rule 130 (method-body -> method-block .)
    IF              reduce using rule 130 (method-body -> method-block .)
    SWITCH          reduce using rule 130 (method-body -> method-block .)
    WHILE           reduce using rule 130 (method-body -> method-block .)
    FOR             reduce using rule 130 (method-body -> method-block .)
    DO              reduce using rule 130 (method-body -> method-block .)
    BREAK           reduce using rule 130 (method-body -> method-block .)
    CONTINUE        reduce using rule 130 (method-body -> method-block .)
    GOTO            reduce using rule 130 (method-body -> method-block .)
    RETURN          reduce using rule 130 (method-body -> method-block .)
    CASE            reduce using rule 130 (method-body -> method-block .)
    DEFAULT         reduce using rule 130 (method-body -> method-block .)


state 45

    (131) method-block -> BLOCK_BEGIN . statement-list-opt BLOCK_END
    (134) statement-list-opt -> . statement-list
    (135) statement-list-opt -> . empty
    (136) statement-list -> . statement
    (137) statement-list -> . statement-list statement
    (214) empty -> .
    (138) statement -> . labeled-statement
    (139) statement -> . declaration-statement
    (140) statement -> . block
    (141) statement -> . empty-statement
    (142) statement -> . expression-statement
    (143) statement -> . selection-statement
    (144) statement -> . iteration-statement
    (145) statement -> . jump-statement
    (146) statement -> . write-statement
    (147) statement -> . read-statement
    (148) statement -> . method-declaration
    (153) labeled-statement -> . IDENTIFIER COLON statement
    (154) declaration-statement -> . local-variable-declaration DELIM
    (155) declaration-statement -> . local-constant-declaration DELIM
    (132) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END
    (158) empty-statement -> . DELIM
    (159) expression-statement -> . statement-expression DELIM
    (162) selection-statement -> . if-statement
    (163) selection-statement -> . switch-statement
    (178) iteration-statement -> . while-statement M_quad
    (179) iteration-statement -> . for-statement M_quad
    (180) iteration-statement -> . do-statement M_quad
    (195) jump-statement -> . break-statement
    (196) jump-statement -> . continue-statement
    (197) jump-statement -> . goto-statement
    (198) jump-statement -> . return-statement
    (149) write-statement -> . CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM
    (152) read-statement -> . CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM
    (121) method-declaration -> . method-header method-body
    (156) local-variable-declaration -> . type variable-declarators
    (157) local-constant-declaration -> . CONST simple-type constant-declarators
    (160) statement-expression -> . invocation-expression
    (161) statement-expression -> . assignment
    (164) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block
    (165) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block
    (166) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad
    (170) switch-statement -> . SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block
    (181) while-statement -> . WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block
    (184) for-statement -> . FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block
    (183) do-statement -> . DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM
    (199) break-statement -> . BREAK DELIM
    (200) continue-statement -> . CONTINUE DELIM
    (201) goto-statement -> . GOTO IDENTIFIER DELIM
    (202) return-statement -> . RETURN expression DELIM
    (203) return-statement -> . RETURN DELIM
    (122) method-header -> . type IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (123) method-header -> . VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (23) type -> . simple-type
    (24) type -> . class-type
    (25) type -> . array-type
    (93) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (99) assignment -> . IDENTIFIER assignment-operator expression
    (100) assignment -> . member-access assignment-operator expression
    (101) assignment -> . element-access assignment-operator expression
    (26) simple-type -> . BOOL
    (27) simple-type -> . INT
    (28) simple-type -> . UINT
    (29) simple-type -> . CHAR
    (30) simple-type -> . DOUBLE
    (31) simple-type -> . STRING
    (11) class-type -> . IDENTIFIER
    (32) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET
    (92) member-access -> . IDENTIFIER DOT IDENTIFIER
    (97) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (98) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    BLOCK_END       reduce using rule 214 (empty -> .)
    IDENTIFIER      shift and go to state 90
    BLOCK_BEGIN     shift and go to state 58
    DELIM           shift and go to state 65
    CONSOLE         shift and go to state 103
    CONST           shift and go to state 100
    IF              shift and go to state 105
    SWITCH          shift and go to state 98
    WHILE           shift and go to state 85
    FOR             shift and go to state 77
    DO              shift and go to state 99
    BREAK           shift and go to state 95
    CONTINUE        shift and go to state 82
    GOTO            shift and go to state 68
    RETURN          shift and go to state 72
    VOID            shift and go to state 17
    BOOL            shift and go to state 37
    INT             shift and go to state 34
    UINT            shift and go to state 32
    CHAR            shift and go to state 18
    DOUBLE          shift and go to state 35
    STRING          shift and go to state 21

    return-statement               shift and go to state 73
    method-header                  shift and go to state 16
    write-statement                shift and go to state 62
    member-access                  shift and go to state 63
    selection-statement            shift and go to state 84
    empty-statement                shift and go to state 86
    statement-list-opt             shift and go to state 101
    method-declaration             shift and go to state 88
    expression-statement           shift and go to state 64
    break-statement                shift and go to state 87
    element-access                 shift and go to state 74
    statement-expression           shift and go to state 66
    local-constant-declaration     shift and go to state 75
    statement                      shift and go to state 89
    assignment                     shift and go to state 104
    for-statement                  shift and go to state 67
    type                           shift and go to state 91
    read-statement                 shift and go to state 102
    do-statement                   shift and go to state 76
    array-type                     shift and go to state 28
    continue-statement             shift and go to state 78
    invocation-expression          shift and go to state 71
    labeled-statement              shift and go to state 106
    declaration-statement          shift and go to state 93
    switch-statement               shift and go to state 69
    iteration-statement            shift and go to state 94
    jump-statement                 shift and go to state 70
    local-variable-declaration     shift and go to state 79
    goto-statement                 shift and go to state 80
    if-statement                   shift and go to state 81
    empty                          shift and go to state 92
    statement-list                 shift and go to state 96
    class-type                     shift and go to state 38
    while-statement                shift and go to state 97
    simple-type                    shift and go to state 19
    block                          shift and go to state 83

state 46

    (121) method-declaration -> method-header method-body .

    CONST           reduce using rule 121 (method-declaration -> method-header method-body .)
    PUBLIC          reduce using rule 121 (method-declaration -> method-header method-body .)
    PRIVATE         reduce using rule 121 (method-declaration -> method-header method-body .)
    VOID            reduce using rule 121 (method-declaration -> method-header method-body .)
    IDENTIFIER      reduce using rule 121 (method-declaration -> method-header method-body .)
    BOOL            reduce using rule 121 (method-declaration -> method-header method-body .)
    INT             reduce using rule 121 (method-declaration -> method-header method-body .)
    UINT            reduce using rule 121 (method-declaration -> method-header method-body .)
    CHAR            reduce using rule 121 (method-declaration -> method-header method-body .)
    DOUBLE          reduce using rule 121 (method-declaration -> method-header method-body .)
    STRING          reduce using rule 121 (method-declaration -> method-header method-body .)
    BLOCK_END       reduce using rule 121 (method-declaration -> method-header method-body .)
    BLOCK_BEGIN     reduce using rule 121 (method-declaration -> method-header method-body .)
    DELIM           reduce using rule 121 (method-declaration -> method-header method-body .)
    CONSOLE         reduce using rule 121 (method-declaration -> method-header method-body .)
    IF              reduce using rule 121 (method-declaration -> method-header method-body .)
    SWITCH          reduce using rule 121 (method-declaration -> method-header method-body .)
    WHILE           reduce using rule 121 (method-declaration -> method-header method-body .)
    FOR             reduce using rule 121 (method-declaration -> method-header method-body .)
    DO              reduce using rule 121 (method-declaration -> method-header method-body .)
    BREAK           reduce using rule 121 (method-declaration -> method-header method-body .)
    CONTINUE        reduce using rule 121 (method-declaration -> method-header method-body .)
    GOTO            reduce using rule 121 (method-declaration -> method-header method-body .)
    RETURN          reduce using rule 121 (method-declaration -> method-header method-body .)
    CASE            reduce using rule 121 (method-declaration -> method-header method-body .)
    DEFAULT         reduce using rule 121 (method-declaration -> method-header method-body .)


state 47

    (123) method-header -> VOID IDENTIFIER . OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN

    OPEN_PAREN      shift and go to state 107


state 48

    (32) array-type -> simple-type OPEN_BRACKET . ICONST CLOSE_BRACKET

    ICONST          shift and go to state 108


state 49

    (21) constant-declaration -> CONST simple-type . constant-declarators DELIM
    (33) constant-declarators -> . constant-declarator
    (34) constant-declarators -> . constant-declarators COMMA constant-declarator
    (35) constant-declarator -> . IDENTIFIER ASSIGN expression

    IDENTIFIER      shift and go to state 110

    constant-declarators           shift and go to state 109
    constant-declarator            shift and go to state 111

state 50

    (117) variable-declarators -> variable-declarator .

    DELIM           reduce using rule 117 (variable-declarators -> variable-declarator .)
    COMMA           reduce using rule 117 (variable-declarators -> variable-declarator .)


state 51

    (114) field-declaration -> type variable-declarators . DELIM
    (118) variable-declarators -> variable-declarators . COMMA variable-declarator

    DELIM           shift and go to state 112
    COMMA           shift and go to state 113


state 52

    (122) method-header -> type IDENTIFIER . OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (119) variable-declarator -> IDENTIFIER .
    (120) variable-declarator -> IDENTIFIER . ASSIGN variable-initializer

    OPEN_PAREN      shift and go to state 114
    DELIM           reduce using rule 119 (variable-declarator -> IDENTIFIER .)
    COMMA           reduce using rule 119 (variable-declarator -> IDENTIFIER .)
    ASSIGN          shift and go to state 115


state 53

    (12) class-body -> BLOCK_BEGIN class-member-declarations-opt BLOCK_END .

    DELIM           reduce using rule 12 (class-body -> BLOCK_BEGIN class-member-declarations-opt BLOCK_END .)
    CLASS           reduce using rule 12 (class-body -> BLOCK_BEGIN class-member-declarations-opt BLOCK_END .)
    $end            reduce using rule 12 (class-body -> BLOCK_BEGIN class-member-declarations-opt BLOCK_END .)


state 54

    (16) class-member-declarations -> class-member-declarations class-member-declaration .

    CONST           reduce using rule 16 (class-member-declarations -> class-member-declarations class-member-declaration .)
    PUBLIC          reduce using rule 16 (class-member-declarations -> class-member-declarations class-member-declaration .)
    PRIVATE         reduce using rule 16 (class-member-declarations -> class-member-declarations class-member-declaration .)
    VOID            reduce using rule 16 (class-member-declarations -> class-member-declarations class-member-declaration .)
    IDENTIFIER      reduce using rule 16 (class-member-declarations -> class-member-declarations class-member-declaration .)
    BOOL            reduce using rule 16 (class-member-declarations -> class-member-declarations class-member-declaration .)
    INT             reduce using rule 16 (class-member-declarations -> class-member-declarations class-member-declaration .)
    UINT            reduce using rule 16 (class-member-declarations -> class-member-declarations class-member-declaration .)
    CHAR            reduce using rule 16 (class-member-declarations -> class-member-declarations class-member-declaration .)
    DOUBLE          reduce using rule 16 (class-member-declarations -> class-member-declarations class-member-declaration .)
    STRING          reduce using rule 16 (class-member-declarations -> class-member-declarations class-member-declaration .)
    BLOCK_END       reduce using rule 16 (class-member-declarations -> class-member-declarations class-member-declaration .)


state 55

    (205) constructor-declarator -> IDENTIFIER OPEN_PAREN . formal-parameter-list-opt CLOSE_PAREN
    (124) formal-parameter-list-opt -> . formal-parameter-list
    (125) formal-parameter-list-opt -> . empty
    (126) formal-parameter-list -> . fixed-parameters
    (214) empty -> .
    (127) fixed-parameters -> . fixed-parameter
    (128) fixed-parameters -> . fixed-parameters COMMA fixed-parameter
    (129) fixed-parameter -> . type IDENTIFIER
    (23) type -> . simple-type
    (24) type -> . class-type
    (25) type -> . array-type
    (26) simple-type -> . BOOL
    (27) simple-type -> . INT
    (28) simple-type -> . UINT
    (29) simple-type -> . CHAR
    (30) simple-type -> . DOUBLE
    (31) simple-type -> . STRING
    (11) class-type -> . IDENTIFIER
    (32) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET

    CLOSE_PAREN     reduce using rule 214 (empty -> .)
    BOOL            shift and go to state 37
    INT             shift and go to state 34
    UINT            shift and go to state 32
    CHAR            shift and go to state 18
    DOUBLE          shift and go to state 35
    STRING          shift and go to state 21
    IDENTIFIER      shift and go to state 42

    array-type                     shift and go to state 28
    fixed-parameters               shift and go to state 117
    simple-type                    shift and go to state 19
    formal-parameter-list-opt      shift and go to state 116
    class-type                     shift and go to state 38
    formal-parameter-list          shift and go to state 118
    type                           shift and go to state 119
    empty                          shift and go to state 120
    fixed-parameter                shift and go to state 121

state 56

    (204) constructor-declaration -> constructor-declarator constructor-body .

    CONST           reduce using rule 204 (constructor-declaration -> constructor-declarator constructor-body .)
    PUBLIC          reduce using rule 204 (constructor-declaration -> constructor-declarator constructor-body .)
    PRIVATE         reduce using rule 204 (constructor-declaration -> constructor-declarator constructor-body .)
    VOID            reduce using rule 204 (constructor-declaration -> constructor-declarator constructor-body .)
    IDENTIFIER      reduce using rule 204 (constructor-declaration -> constructor-declarator constructor-body .)
    BOOL            reduce using rule 204 (constructor-declaration -> constructor-declarator constructor-body .)
    INT             reduce using rule 204 (constructor-declaration -> constructor-declarator constructor-body .)
    UINT            reduce using rule 204 (constructor-declaration -> constructor-declarator constructor-body .)
    CHAR            reduce using rule 204 (constructor-declaration -> constructor-declarator constructor-body .)
    DOUBLE          reduce using rule 204 (constructor-declaration -> constructor-declarator constructor-body .)
    STRING          reduce using rule 204 (constructor-declaration -> constructor-declarator constructor-body .)
    BLOCK_END       reduce using rule 204 (constructor-declaration -> constructor-declarator constructor-body .)


state 57

    (207) constructor-body -> DELIM .

    CONST           reduce using rule 207 (constructor-body -> DELIM .)
    PUBLIC          reduce using rule 207 (constructor-body -> DELIM .)
    PRIVATE         reduce using rule 207 (constructor-body -> DELIM .)
    VOID            reduce using rule 207 (constructor-body -> DELIM .)
    IDENTIFIER      reduce using rule 207 (constructor-body -> DELIM .)
    BOOL            reduce using rule 207 (constructor-body -> DELIM .)
    INT             reduce using rule 207 (constructor-body -> DELIM .)
    UINT            reduce using rule 207 (constructor-body -> DELIM .)
    CHAR            reduce using rule 207 (constructor-body -> DELIM .)
    DOUBLE          reduce using rule 207 (constructor-body -> DELIM .)
    STRING          reduce using rule 207 (constructor-body -> DELIM .)
    BLOCK_END       reduce using rule 207 (constructor-body -> DELIM .)


state 58

    (132) block -> BLOCK_BEGIN . M_bstart statement-list-opt BLOCK_END
    (133) M_bstart -> . empty
    (214) empty -> .

    IDENTIFIER      reduce using rule 214 (empty -> .)
    BLOCK_BEGIN     reduce using rule 214 (empty -> .)
    DELIM           reduce using rule 214 (empty -> .)
    CONSOLE         reduce using rule 214 (empty -> .)
    CONST           reduce using rule 214 (empty -> .)
    IF              reduce using rule 214 (empty -> .)
    SWITCH          reduce using rule 214 (empty -> .)
    WHILE           reduce using rule 214 (empty -> .)
    FOR             reduce using rule 214 (empty -> .)
    DO              reduce using rule 214 (empty -> .)
    BREAK           reduce using rule 214 (empty -> .)
    CONTINUE        reduce using rule 214 (empty -> .)
    GOTO            reduce using rule 214 (empty -> .)
    RETURN          reduce using rule 214 (empty -> .)
    VOID            reduce using rule 214 (empty -> .)
    BOOL            reduce using rule 214 (empty -> .)
    INT             reduce using rule 214 (empty -> .)
    UINT            reduce using rule 214 (empty -> .)
    CHAR            reduce using rule 214 (empty -> .)
    DOUBLE          reduce using rule 214 (empty -> .)
    STRING          reduce using rule 214 (empty -> .)
    BLOCK_END       reduce using rule 214 (empty -> .)

    M_bstart                       shift and go to state 122
    empty                          shift and go to state 123

state 59

    (206) constructor-body -> block .

    CONST           reduce using rule 206 (constructor-body -> block .)
    PUBLIC          reduce using rule 206 (constructor-body -> block .)
    PRIVATE         reduce using rule 206 (constructor-body -> block .)
    VOID            reduce using rule 206 (constructor-body -> block .)
    IDENTIFIER      reduce using rule 206 (constructor-body -> block .)
    BOOL            reduce using rule 206 (constructor-body -> block .)
    INT             reduce using rule 206 (constructor-body -> block .)
    UINT            reduce using rule 206 (constructor-body -> block .)
    CHAR            reduce using rule 206 (constructor-body -> block .)
    DOUBLE          reduce using rule 206 (constructor-body -> block .)
    STRING          reduce using rule 206 (constructor-body -> block .)
    BLOCK_END       reduce using rule 206 (constructor-body -> block .)


state 60

    (22) constant-declaration -> modifier CONST . simple-type constant-declarators DELIM
    (26) simple-type -> . BOOL
    (27) simple-type -> . INT
    (28) simple-type -> . UINT
    (29) simple-type -> . CHAR
    (30) simple-type -> . DOUBLE
    (31) simple-type -> . STRING

    BOOL            shift and go to state 37
    INT             shift and go to state 34
    UINT            shift and go to state 32
    CHAR            shift and go to state 18
    DOUBLE          shift and go to state 35
    STRING          shift and go to state 21

    simple-type                    shift and go to state 124

state 61

    (113) field-declaration -> modifier type . variable-declarators DELIM
    (117) variable-declarators -> . variable-declarator
    (118) variable-declarators -> . variable-declarators COMMA variable-declarator
    (119) variable-declarator -> . IDENTIFIER
    (120) variable-declarator -> . IDENTIFIER ASSIGN variable-initializer

    IDENTIFIER      shift and go to state 125

    variable-declarator            shift and go to state 50
    variable-declarators           shift and go to state 126

state 62

    (146) statement -> write-statement .

    IDENTIFIER      reduce using rule 146 (statement -> write-statement .)
    BLOCK_BEGIN     reduce using rule 146 (statement -> write-statement .)
    DELIM           reduce using rule 146 (statement -> write-statement .)
    CONSOLE         reduce using rule 146 (statement -> write-statement .)
    CONST           reduce using rule 146 (statement -> write-statement .)
    IF              reduce using rule 146 (statement -> write-statement .)
    SWITCH          reduce using rule 146 (statement -> write-statement .)
    WHILE           reduce using rule 146 (statement -> write-statement .)
    FOR             reduce using rule 146 (statement -> write-statement .)
    DO              reduce using rule 146 (statement -> write-statement .)
    BREAK           reduce using rule 146 (statement -> write-statement .)
    CONTINUE        reduce using rule 146 (statement -> write-statement .)
    GOTO            reduce using rule 146 (statement -> write-statement .)
    RETURN          reduce using rule 146 (statement -> write-statement .)
    VOID            reduce using rule 146 (statement -> write-statement .)
    BOOL            reduce using rule 146 (statement -> write-statement .)
    INT             reduce using rule 146 (statement -> write-statement .)
    UINT            reduce using rule 146 (statement -> write-statement .)
    CHAR            reduce using rule 146 (statement -> write-statement .)
    DOUBLE          reduce using rule 146 (statement -> write-statement .)
    STRING          reduce using rule 146 (statement -> write-statement .)
    BLOCK_END       reduce using rule 146 (statement -> write-statement .)
    CASE            reduce using rule 146 (statement -> write-statement .)
    DEFAULT         reduce using rule 146 (statement -> write-statement .)


state 63

    (100) assignment -> member-access . assignment-operator expression
    (98) element-access -> member-access . OPEN_BRACKET expression CLOSE_BRACKET
    (102) assignment-operator -> . ASSIGN
    (103) assignment-operator -> . PLUSEQUAL
    (104) assignment-operator -> . MINUSEQUAL
    (105) assignment-operator -> . TIMESEQUAL
    (106) assignment-operator -> . DIVEQUAL
    (107) assignment-operator -> . MODEQUAL
    (108) assignment-operator -> . BITANDEQUAL
    (109) assignment-operator -> . BITOREQUAL
    (110) assignment-operator -> . BITXOREQUAL
    (111) assignment-operator -> . LSHIFTEQUAL
    (112) assignment-operator -> . RSHIFTEQUAL

    OPEN_BRACKET    shift and go to state 132
    ASSIGN          shift and go to state 138
    PLUSEQUAL       shift and go to state 134
    MINUSEQUAL      shift and go to state 131
    TIMESEQUAL      shift and go to state 130
    DIVEQUAL        shift and go to state 127
    MODEQUAL        shift and go to state 139
    BITANDEQUAL     shift and go to state 136
    BITOREQUAL      shift and go to state 133
    BITXOREQUAL     shift and go to state 135
    LSHIFTEQUAL     shift and go to state 137
    RSHIFTEQUAL     shift and go to state 128

    assignment-operator            shift and go to state 129

state 64

    (142) statement -> expression-statement .

    IDENTIFIER      reduce using rule 142 (statement -> expression-statement .)
    BLOCK_BEGIN     reduce using rule 142 (statement -> expression-statement .)
    DELIM           reduce using rule 142 (statement -> expression-statement .)
    CONSOLE         reduce using rule 142 (statement -> expression-statement .)
    CONST           reduce using rule 142 (statement -> expression-statement .)
    IF              reduce using rule 142 (statement -> expression-statement .)
    SWITCH          reduce using rule 142 (statement -> expression-statement .)
    WHILE           reduce using rule 142 (statement -> expression-statement .)
    FOR             reduce using rule 142 (statement -> expression-statement .)
    DO              reduce using rule 142 (statement -> expression-statement .)
    BREAK           reduce using rule 142 (statement -> expression-statement .)
    CONTINUE        reduce using rule 142 (statement -> expression-statement .)
    GOTO            reduce using rule 142 (statement -> expression-statement .)
    RETURN          reduce using rule 142 (statement -> expression-statement .)
    VOID            reduce using rule 142 (statement -> expression-statement .)
    BOOL            reduce using rule 142 (statement -> expression-statement .)
    INT             reduce using rule 142 (statement -> expression-statement .)
    UINT            reduce using rule 142 (statement -> expression-statement .)
    CHAR            reduce using rule 142 (statement -> expression-statement .)
    DOUBLE          reduce using rule 142 (statement -> expression-statement .)
    STRING          reduce using rule 142 (statement -> expression-statement .)
    BLOCK_END       reduce using rule 142 (statement -> expression-statement .)
    CASE            reduce using rule 142 (statement -> expression-statement .)
    DEFAULT         reduce using rule 142 (statement -> expression-statement .)


state 65

    (158) empty-statement -> DELIM .

    IDENTIFIER      reduce using rule 158 (empty-statement -> DELIM .)
    BLOCK_BEGIN     reduce using rule 158 (empty-statement -> DELIM .)
    DELIM           reduce using rule 158 (empty-statement -> DELIM .)
    CONSOLE         reduce using rule 158 (empty-statement -> DELIM .)
    CONST           reduce using rule 158 (empty-statement -> DELIM .)
    IF              reduce using rule 158 (empty-statement -> DELIM .)
    SWITCH          reduce using rule 158 (empty-statement -> DELIM .)
    WHILE           reduce using rule 158 (empty-statement -> DELIM .)
    FOR             reduce using rule 158 (empty-statement -> DELIM .)
    DO              reduce using rule 158 (empty-statement -> DELIM .)
    BREAK           reduce using rule 158 (empty-statement -> DELIM .)
    CONTINUE        reduce using rule 158 (empty-statement -> DELIM .)
    GOTO            reduce using rule 158 (empty-statement -> DELIM .)
    RETURN          reduce using rule 158 (empty-statement -> DELIM .)
    VOID            reduce using rule 158 (empty-statement -> DELIM .)
    BOOL            reduce using rule 158 (empty-statement -> DELIM .)
    INT             reduce using rule 158 (empty-statement -> DELIM .)
    UINT            reduce using rule 158 (empty-statement -> DELIM .)
    CHAR            reduce using rule 158 (empty-statement -> DELIM .)
    DOUBLE          reduce using rule 158 (empty-statement -> DELIM .)
    STRING          reduce using rule 158 (empty-statement -> DELIM .)
    BLOCK_END       reduce using rule 158 (empty-statement -> DELIM .)
    CASE            reduce using rule 158 (empty-statement -> DELIM .)
    DEFAULT         reduce using rule 158 (empty-statement -> DELIM .)


state 66

    (159) expression-statement -> statement-expression . DELIM

    DELIM           shift and go to state 140


state 67

    (179) iteration-statement -> for-statement . M_quad
    (169) M_quad -> . empty
    (214) empty -> .

    IDENTIFIER      reduce using rule 214 (empty -> .)
    BLOCK_BEGIN     reduce using rule 214 (empty -> .)
    DELIM           reduce using rule 214 (empty -> .)
    CONSOLE         reduce using rule 214 (empty -> .)
    CONST           reduce using rule 214 (empty -> .)
    IF              reduce using rule 214 (empty -> .)
    SWITCH          reduce using rule 214 (empty -> .)
    WHILE           reduce using rule 214 (empty -> .)
    FOR             reduce using rule 214 (empty -> .)
    DO              reduce using rule 214 (empty -> .)
    BREAK           reduce using rule 214 (empty -> .)
    CONTINUE        reduce using rule 214 (empty -> .)
    GOTO            reduce using rule 214 (empty -> .)
    RETURN          reduce using rule 214 (empty -> .)
    VOID            reduce using rule 214 (empty -> .)
    BOOL            reduce using rule 214 (empty -> .)
    INT             reduce using rule 214 (empty -> .)
    UINT            reduce using rule 214 (empty -> .)
    CHAR            reduce using rule 214 (empty -> .)
    DOUBLE          reduce using rule 214 (empty -> .)
    STRING          reduce using rule 214 (empty -> .)
    BLOCK_END       reduce using rule 214 (empty -> .)
    CASE            reduce using rule 214 (empty -> .)
    DEFAULT         reduce using rule 214 (empty -> .)

    M_quad                         shift and go to state 141
    empty                          shift and go to state 142

state 68

    (201) goto-statement -> GOTO . IDENTIFIER DELIM

    IDENTIFIER      shift and go to state 143


state 69

    (163) selection-statement -> switch-statement .

    IDENTIFIER      reduce using rule 163 (selection-statement -> switch-statement .)
    BLOCK_BEGIN     reduce using rule 163 (selection-statement -> switch-statement .)
    DELIM           reduce using rule 163 (selection-statement -> switch-statement .)
    CONSOLE         reduce using rule 163 (selection-statement -> switch-statement .)
    CONST           reduce using rule 163 (selection-statement -> switch-statement .)
    IF              reduce using rule 163 (selection-statement -> switch-statement .)
    SWITCH          reduce using rule 163 (selection-statement -> switch-statement .)
    WHILE           reduce using rule 163 (selection-statement -> switch-statement .)
    FOR             reduce using rule 163 (selection-statement -> switch-statement .)
    DO              reduce using rule 163 (selection-statement -> switch-statement .)
    BREAK           reduce using rule 163 (selection-statement -> switch-statement .)
    CONTINUE        reduce using rule 163 (selection-statement -> switch-statement .)
    GOTO            reduce using rule 163 (selection-statement -> switch-statement .)
    RETURN          reduce using rule 163 (selection-statement -> switch-statement .)
    VOID            reduce using rule 163 (selection-statement -> switch-statement .)
    BOOL            reduce using rule 163 (selection-statement -> switch-statement .)
    INT             reduce using rule 163 (selection-statement -> switch-statement .)
    UINT            reduce using rule 163 (selection-statement -> switch-statement .)
    CHAR            reduce using rule 163 (selection-statement -> switch-statement .)
    DOUBLE          reduce using rule 163 (selection-statement -> switch-statement .)
    STRING          reduce using rule 163 (selection-statement -> switch-statement .)
    BLOCK_END       reduce using rule 163 (selection-statement -> switch-statement .)
    CASE            reduce using rule 163 (selection-statement -> switch-statement .)
    DEFAULT         reduce using rule 163 (selection-statement -> switch-statement .)


state 70

    (145) statement -> jump-statement .

    IDENTIFIER      reduce using rule 145 (statement -> jump-statement .)
    BLOCK_BEGIN     reduce using rule 145 (statement -> jump-statement .)
    DELIM           reduce using rule 145 (statement -> jump-statement .)
    CONSOLE         reduce using rule 145 (statement -> jump-statement .)
    CONST           reduce using rule 145 (statement -> jump-statement .)
    IF              reduce using rule 145 (statement -> jump-statement .)
    SWITCH          reduce using rule 145 (statement -> jump-statement .)
    WHILE           reduce using rule 145 (statement -> jump-statement .)
    FOR             reduce using rule 145 (statement -> jump-statement .)
    DO              reduce using rule 145 (statement -> jump-statement .)
    BREAK           reduce using rule 145 (statement -> jump-statement .)
    CONTINUE        reduce using rule 145 (statement -> jump-statement .)
    GOTO            reduce using rule 145 (statement -> jump-statement .)
    RETURN          reduce using rule 145 (statement -> jump-statement .)
    VOID            reduce using rule 145 (statement -> jump-statement .)
    BOOL            reduce using rule 145 (statement -> jump-statement .)
    INT             reduce using rule 145 (statement -> jump-statement .)
    UINT            reduce using rule 145 (statement -> jump-statement .)
    CHAR            reduce using rule 145 (statement -> jump-statement .)
    DOUBLE          reduce using rule 145 (statement -> jump-statement .)
    STRING          reduce using rule 145 (statement -> jump-statement .)
    BLOCK_END       reduce using rule 145 (statement -> jump-statement .)
    CASE            reduce using rule 145 (statement -> jump-statement .)
    DEFAULT         reduce using rule 145 (statement -> jump-statement .)


state 71

    (160) statement-expression -> invocation-expression .

    DELIM           reduce using rule 160 (statement-expression -> invocation-expression .)
    COMMA           reduce using rule 160 (statement-expression -> invocation-expression .)
    CLOSE_PAREN     reduce using rule 160 (statement-expression -> invocation-expression .)


state 72

    (202) return-statement -> RETURN . expression DELIM
    (203) return-statement -> RETURN . DELIM
    (36) expression -> . conditional-expression
    (37) expression -> . assignment
    (38) conditional-expression -> . conditional-or-expression
    (39) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (99) assignment -> . IDENTIFIER assignment-operator expression
    (100) assignment -> . member-access assignment-operator expression
    (101) assignment -> . element-access assignment-operator expression
    (40) conditional-or-expression -> . conditional-and-expression
    (41) conditional-or-expression -> . conditional-or-expression M_or LOGOR conditional-and-expression
    (92) member-access -> . IDENTIFIER DOT IDENTIFIER
    (97) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (98) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression M_and LOGAND inclusive-or-expression
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . primary-no-array-creation-expression
    (83) primary-no-array-creation-expression -> . literal
    (84) primary-no-array-creation-expression -> . IDENTIFIER
    (85) primary-no-array-creation-expression -> . element-access
    (86) primary-no-array-creation-expression -> . parenthesized-expression
    (87) primary-no-array-creation-expression -> . member-access
    (88) primary-no-array-creation-expression -> . invocation-expression
    (89) primary-no-array-creation-expression -> . object-creation-expression
    (208) literal -> . ICONST
    (209) literal -> . DCONST
    (210) literal -> . TRUE
    (211) literal -> . FALSE
    (212) literal -> . CCONST
    (213) literal -> . SCONST
    (91) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (93) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (90) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    DELIM           shift and go to state 153
    IDENTIFIER      shift and go to state 161
    PLUS            shift and go to state 160
    MINUS           shift and go to state 151
    BITNOT          shift and go to state 174
    BITCOMP         shift and go to state 155
    ICONST          shift and go to state 164
    DCONST          shift and go to state 148
    TRUE            shift and go to state 168
    FALSE           shift and go to state 166
    CCONST          shift and go to state 175
    SCONST          shift and go to state 154
    OPEN_PAREN      shift and go to state 157
    NEW             shift and go to state 149

    exclusive-or-expression        shift and go to state 145
    member-access                  shift and go to state 146
    relational-expression          shift and go to state 147
    additive-expression            shift and go to state 150
    inclusive-or-expression        shift and go to state 152
    unary-expression               shift and go to state 144
    element-access                 shift and go to state 156
    literal                        shift and go to state 163
    conditional-expression         shift and go to state 158
    conditional-and-expression     shift and go to state 162
    assignment                     shift and go to state 159
    primary-no-array-creation-expression shift and go to state 171
    object-creation-expression     shift and go to state 165
    equality-expression            shift and go to state 167
    shift-expression               shift and go to state 169
    and-expression                 shift and go to state 170
    multiplicative-expression      shift and go to state 172
    conditional-or-expression      shift and go to state 173
    primary-expression             shift and go to state 176
    invocation-expression          shift and go to state 177
    expression                     shift and go to state 178
    parenthesized-expression       shift and go to state 179

state 73

    (198) jump-statement -> return-statement .

    IDENTIFIER      reduce using rule 198 (jump-statement -> return-statement .)
    BLOCK_BEGIN     reduce using rule 198 (jump-statement -> return-statement .)
    DELIM           reduce using rule 198 (jump-statement -> return-statement .)
    CONSOLE         reduce using rule 198 (jump-statement -> return-statement .)
    CONST           reduce using rule 198 (jump-statement -> return-statement .)
    IF              reduce using rule 198 (jump-statement -> return-statement .)
    SWITCH          reduce using rule 198 (jump-statement -> return-statement .)
    WHILE           reduce using rule 198 (jump-statement -> return-statement .)
    FOR             reduce using rule 198 (jump-statement -> return-statement .)
    DO              reduce using rule 198 (jump-statement -> return-statement .)
    BREAK           reduce using rule 198 (jump-statement -> return-statement .)
    CONTINUE        reduce using rule 198 (jump-statement -> return-statement .)
    GOTO            reduce using rule 198 (jump-statement -> return-statement .)
    RETURN          reduce using rule 198 (jump-statement -> return-statement .)
    VOID            reduce using rule 198 (jump-statement -> return-statement .)
    BOOL            reduce using rule 198 (jump-statement -> return-statement .)
    INT             reduce using rule 198 (jump-statement -> return-statement .)
    UINT            reduce using rule 198 (jump-statement -> return-statement .)
    CHAR            reduce using rule 198 (jump-statement -> return-statement .)
    DOUBLE          reduce using rule 198 (jump-statement -> return-statement .)
    STRING          reduce using rule 198 (jump-statement -> return-statement .)
    BLOCK_END       reduce using rule 198 (jump-statement -> return-statement .)
    CASE            reduce using rule 198 (jump-statement -> return-statement .)
    DEFAULT         reduce using rule 198 (jump-statement -> return-statement .)


state 74

    (101) assignment -> element-access . assignment-operator expression
    (102) assignment-operator -> . ASSIGN
    (103) assignment-operator -> . PLUSEQUAL
    (104) assignment-operator -> . MINUSEQUAL
    (105) assignment-operator -> . TIMESEQUAL
    (106) assignment-operator -> . DIVEQUAL
    (107) assignment-operator -> . MODEQUAL
    (108) assignment-operator -> . BITANDEQUAL
    (109) assignment-operator -> . BITOREQUAL
    (110) assignment-operator -> . BITXOREQUAL
    (111) assignment-operator -> . LSHIFTEQUAL
    (112) assignment-operator -> . RSHIFTEQUAL

    ASSIGN          shift and go to state 138
    PLUSEQUAL       shift and go to state 134
    MINUSEQUAL      shift and go to state 131
    TIMESEQUAL      shift and go to state 130
    DIVEQUAL        shift and go to state 127
    MODEQUAL        shift and go to state 139
    BITANDEQUAL     shift and go to state 136
    BITOREQUAL      shift and go to state 133
    BITXOREQUAL     shift and go to state 135
    LSHIFTEQUAL     shift and go to state 137
    RSHIFTEQUAL     shift and go to state 128

    assignment-operator            shift and go to state 180

state 75

    (155) declaration-statement -> local-constant-declaration . DELIM

    DELIM           shift and go to state 181


state 76

    (180) iteration-statement -> do-statement . M_quad
    (169) M_quad -> . empty
    (214) empty -> .

    IDENTIFIER      reduce using rule 214 (empty -> .)
    BLOCK_BEGIN     reduce using rule 214 (empty -> .)
    DELIM           reduce using rule 214 (empty -> .)
    CONSOLE         reduce using rule 214 (empty -> .)
    CONST           reduce using rule 214 (empty -> .)
    IF              reduce using rule 214 (empty -> .)
    SWITCH          reduce using rule 214 (empty -> .)
    WHILE           reduce using rule 214 (empty -> .)
    FOR             reduce using rule 214 (empty -> .)
    DO              reduce using rule 214 (empty -> .)
    BREAK           reduce using rule 214 (empty -> .)
    CONTINUE        reduce using rule 214 (empty -> .)
    GOTO            reduce using rule 214 (empty -> .)
    RETURN          reduce using rule 214 (empty -> .)
    VOID            reduce using rule 214 (empty -> .)
    BOOL            reduce using rule 214 (empty -> .)
    INT             reduce using rule 214 (empty -> .)
    UINT            reduce using rule 214 (empty -> .)
    CHAR            reduce using rule 214 (empty -> .)
    DOUBLE          reduce using rule 214 (empty -> .)
    STRING          reduce using rule 214 (empty -> .)
    BLOCK_END       reduce using rule 214 (empty -> .)
    CASE            reduce using rule 214 (empty -> .)
    DEFAULT         reduce using rule 214 (empty -> .)

    M_quad                         shift and go to state 182
    empty                          shift and go to state 142

state 77

    (184) for-statement -> FOR . OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block

    OPEN_PAREN      shift and go to state 183


state 78

    (196) jump-statement -> continue-statement .

    IDENTIFIER      reduce using rule 196 (jump-statement -> continue-statement .)
    BLOCK_BEGIN     reduce using rule 196 (jump-statement -> continue-statement .)
    DELIM           reduce using rule 196 (jump-statement -> continue-statement .)
    CONSOLE         reduce using rule 196 (jump-statement -> continue-statement .)
    CONST           reduce using rule 196 (jump-statement -> continue-statement .)
    IF              reduce using rule 196 (jump-statement -> continue-statement .)
    SWITCH          reduce using rule 196 (jump-statement -> continue-statement .)
    WHILE           reduce using rule 196 (jump-statement -> continue-statement .)
    FOR             reduce using rule 196 (jump-statement -> continue-statement .)
    DO              reduce using rule 196 (jump-statement -> continue-statement .)
    BREAK           reduce using rule 196 (jump-statement -> continue-statement .)
    CONTINUE        reduce using rule 196 (jump-statement -> continue-statement .)
    GOTO            reduce using rule 196 (jump-statement -> continue-statement .)
    RETURN          reduce using rule 196 (jump-statement -> continue-statement .)
    VOID            reduce using rule 196 (jump-statement -> continue-statement .)
    BOOL            reduce using rule 196 (jump-statement -> continue-statement .)
    INT             reduce using rule 196 (jump-statement -> continue-statement .)
    UINT            reduce using rule 196 (jump-statement -> continue-statement .)
    CHAR            reduce using rule 196 (jump-statement -> continue-statement .)
    DOUBLE          reduce using rule 196 (jump-statement -> continue-statement .)
    STRING          reduce using rule 196 (jump-statement -> continue-statement .)
    BLOCK_END       reduce using rule 196 (jump-statement -> continue-statement .)
    CASE            reduce using rule 196 (jump-statement -> continue-statement .)
    DEFAULT         reduce using rule 196 (jump-statement -> continue-statement .)


state 79

    (154) declaration-statement -> local-variable-declaration . DELIM

    DELIM           shift and go to state 184


state 80

    (197) jump-statement -> goto-statement .

    IDENTIFIER      reduce using rule 197 (jump-statement -> goto-statement .)
    BLOCK_BEGIN     reduce using rule 197 (jump-statement -> goto-statement .)
    DELIM           reduce using rule 197 (jump-statement -> goto-statement .)
    CONSOLE         reduce using rule 197 (jump-statement -> goto-statement .)
    CONST           reduce using rule 197 (jump-statement -> goto-statement .)
    IF              reduce using rule 197 (jump-statement -> goto-statement .)
    SWITCH          reduce using rule 197 (jump-statement -> goto-statement .)
    WHILE           reduce using rule 197 (jump-statement -> goto-statement .)
    FOR             reduce using rule 197 (jump-statement -> goto-statement .)
    DO              reduce using rule 197 (jump-statement -> goto-statement .)
    BREAK           reduce using rule 197 (jump-statement -> goto-statement .)
    CONTINUE        reduce using rule 197 (jump-statement -> goto-statement .)
    GOTO            reduce using rule 197 (jump-statement -> goto-statement .)
    RETURN          reduce using rule 197 (jump-statement -> goto-statement .)
    VOID            reduce using rule 197 (jump-statement -> goto-statement .)
    BOOL            reduce using rule 197 (jump-statement -> goto-statement .)
    INT             reduce using rule 197 (jump-statement -> goto-statement .)
    UINT            reduce using rule 197 (jump-statement -> goto-statement .)
    CHAR            reduce using rule 197 (jump-statement -> goto-statement .)
    DOUBLE          reduce using rule 197 (jump-statement -> goto-statement .)
    STRING          reduce using rule 197 (jump-statement -> goto-statement .)
    BLOCK_END       reduce using rule 197 (jump-statement -> goto-statement .)
    CASE            reduce using rule 197 (jump-statement -> goto-statement .)
    DEFAULT         reduce using rule 197 (jump-statement -> goto-statement .)


state 81

    (162) selection-statement -> if-statement .

    IDENTIFIER      reduce using rule 162 (selection-statement -> if-statement .)
    BLOCK_BEGIN     reduce using rule 162 (selection-statement -> if-statement .)
    DELIM           reduce using rule 162 (selection-statement -> if-statement .)
    CONSOLE         reduce using rule 162 (selection-statement -> if-statement .)
    CONST           reduce using rule 162 (selection-statement -> if-statement .)
    IF              reduce using rule 162 (selection-statement -> if-statement .)
    SWITCH          reduce using rule 162 (selection-statement -> if-statement .)
    WHILE           reduce using rule 162 (selection-statement -> if-statement .)
    FOR             reduce using rule 162 (selection-statement -> if-statement .)
    DO              reduce using rule 162 (selection-statement -> if-statement .)
    BREAK           reduce using rule 162 (selection-statement -> if-statement .)
    CONTINUE        reduce using rule 162 (selection-statement -> if-statement .)
    GOTO            reduce using rule 162 (selection-statement -> if-statement .)
    RETURN          reduce using rule 162 (selection-statement -> if-statement .)
    VOID            reduce using rule 162 (selection-statement -> if-statement .)
    BOOL            reduce using rule 162 (selection-statement -> if-statement .)
    INT             reduce using rule 162 (selection-statement -> if-statement .)
    UINT            reduce using rule 162 (selection-statement -> if-statement .)
    CHAR            reduce using rule 162 (selection-statement -> if-statement .)
    DOUBLE          reduce using rule 162 (selection-statement -> if-statement .)
    STRING          reduce using rule 162 (selection-statement -> if-statement .)
    BLOCK_END       reduce using rule 162 (selection-statement -> if-statement .)
    CASE            reduce using rule 162 (selection-statement -> if-statement .)
    DEFAULT         reduce using rule 162 (selection-statement -> if-statement .)


state 82

    (200) continue-statement -> CONTINUE . DELIM

    DELIM           shift and go to state 185


state 83

    (140) statement -> block .

    IDENTIFIER      reduce using rule 140 (statement -> block .)
    BLOCK_BEGIN     reduce using rule 140 (statement -> block .)
    DELIM           reduce using rule 140 (statement -> block .)
    CONSOLE         reduce using rule 140 (statement -> block .)
    CONST           reduce using rule 140 (statement -> block .)
    IF              reduce using rule 140 (statement -> block .)
    SWITCH          reduce using rule 140 (statement -> block .)
    WHILE           reduce using rule 140 (statement -> block .)
    FOR             reduce using rule 140 (statement -> block .)
    DO              reduce using rule 140 (statement -> block .)
    BREAK           reduce using rule 140 (statement -> block .)
    CONTINUE        reduce using rule 140 (statement -> block .)
    GOTO            reduce using rule 140 (statement -> block .)
    RETURN          reduce using rule 140 (statement -> block .)
    VOID            reduce using rule 140 (statement -> block .)
    BOOL            reduce using rule 140 (statement -> block .)
    INT             reduce using rule 140 (statement -> block .)
    UINT            reduce using rule 140 (statement -> block .)
    CHAR            reduce using rule 140 (statement -> block .)
    DOUBLE          reduce using rule 140 (statement -> block .)
    STRING          reduce using rule 140 (statement -> block .)
    BLOCK_END       reduce using rule 140 (statement -> block .)
    CASE            reduce using rule 140 (statement -> block .)
    DEFAULT         reduce using rule 140 (statement -> block .)


state 84

    (143) statement -> selection-statement .

    IDENTIFIER      reduce using rule 143 (statement -> selection-statement .)
    BLOCK_BEGIN     reduce using rule 143 (statement -> selection-statement .)
    DELIM           reduce using rule 143 (statement -> selection-statement .)
    CONSOLE         reduce using rule 143 (statement -> selection-statement .)
    CONST           reduce using rule 143 (statement -> selection-statement .)
    IF              reduce using rule 143 (statement -> selection-statement .)
    SWITCH          reduce using rule 143 (statement -> selection-statement .)
    WHILE           reduce using rule 143 (statement -> selection-statement .)
    FOR             reduce using rule 143 (statement -> selection-statement .)
    DO              reduce using rule 143 (statement -> selection-statement .)
    BREAK           reduce using rule 143 (statement -> selection-statement .)
    CONTINUE        reduce using rule 143 (statement -> selection-statement .)
    GOTO            reduce using rule 143 (statement -> selection-statement .)
    RETURN          reduce using rule 143 (statement -> selection-statement .)
    VOID            reduce using rule 143 (statement -> selection-statement .)
    BOOL            reduce using rule 143 (statement -> selection-statement .)
    INT             reduce using rule 143 (statement -> selection-statement .)
    UINT            reduce using rule 143 (statement -> selection-statement .)
    CHAR            reduce using rule 143 (statement -> selection-statement .)
    DOUBLE          reduce using rule 143 (statement -> selection-statement .)
    STRING          reduce using rule 143 (statement -> selection-statement .)
    BLOCK_END       reduce using rule 143 (statement -> selection-statement .)
    CASE            reduce using rule 143 (statement -> selection-statement .)
    DEFAULT         reduce using rule 143 (statement -> selection-statement .)


state 85

    (181) while-statement -> WHILE . M_quad OPEN_PAREN expression CLOSE_PAREN M_while block
    (169) M_quad -> . empty
    (214) empty -> .

    OPEN_PAREN      reduce using rule 214 (empty -> .)

    M_quad                         shift and go to state 186
    empty                          shift and go to state 142

state 86

    (141) statement -> empty-statement .

    IDENTIFIER      reduce using rule 141 (statement -> empty-statement .)
    BLOCK_BEGIN     reduce using rule 141 (statement -> empty-statement .)
    DELIM           reduce using rule 141 (statement -> empty-statement .)
    CONSOLE         reduce using rule 141 (statement -> empty-statement .)
    CONST           reduce using rule 141 (statement -> empty-statement .)
    IF              reduce using rule 141 (statement -> empty-statement .)
    SWITCH          reduce using rule 141 (statement -> empty-statement .)
    WHILE           reduce using rule 141 (statement -> empty-statement .)
    FOR             reduce using rule 141 (statement -> empty-statement .)
    DO              reduce using rule 141 (statement -> empty-statement .)
    BREAK           reduce using rule 141 (statement -> empty-statement .)
    CONTINUE        reduce using rule 141 (statement -> empty-statement .)
    GOTO            reduce using rule 141 (statement -> empty-statement .)
    RETURN          reduce using rule 141 (statement -> empty-statement .)
    VOID            reduce using rule 141 (statement -> empty-statement .)
    BOOL            reduce using rule 141 (statement -> empty-statement .)
    INT             reduce using rule 141 (statement -> empty-statement .)
    UINT            reduce using rule 141 (statement -> empty-statement .)
    CHAR            reduce using rule 141 (statement -> empty-statement .)
    DOUBLE          reduce using rule 141 (statement -> empty-statement .)
    STRING          reduce using rule 141 (statement -> empty-statement .)
    BLOCK_END       reduce using rule 141 (statement -> empty-statement .)
    CASE            reduce using rule 141 (statement -> empty-statement .)
    DEFAULT         reduce using rule 141 (statement -> empty-statement .)


state 87

    (195) jump-statement -> break-statement .

    IDENTIFIER      reduce using rule 195 (jump-statement -> break-statement .)
    BLOCK_BEGIN     reduce using rule 195 (jump-statement -> break-statement .)
    DELIM           reduce using rule 195 (jump-statement -> break-statement .)
    CONSOLE         reduce using rule 195 (jump-statement -> break-statement .)
    CONST           reduce using rule 195 (jump-statement -> break-statement .)
    IF              reduce using rule 195 (jump-statement -> break-statement .)
    SWITCH          reduce using rule 195 (jump-statement -> break-statement .)
    WHILE           reduce using rule 195 (jump-statement -> break-statement .)
    FOR             reduce using rule 195 (jump-statement -> break-statement .)
    DO              reduce using rule 195 (jump-statement -> break-statement .)
    BREAK           reduce using rule 195 (jump-statement -> break-statement .)
    CONTINUE        reduce using rule 195 (jump-statement -> break-statement .)
    GOTO            reduce using rule 195 (jump-statement -> break-statement .)
    RETURN          reduce using rule 195 (jump-statement -> break-statement .)
    VOID            reduce using rule 195 (jump-statement -> break-statement .)
    BOOL            reduce using rule 195 (jump-statement -> break-statement .)
    INT             reduce using rule 195 (jump-statement -> break-statement .)
    UINT            reduce using rule 195 (jump-statement -> break-statement .)
    CHAR            reduce using rule 195 (jump-statement -> break-statement .)
    DOUBLE          reduce using rule 195 (jump-statement -> break-statement .)
    STRING          reduce using rule 195 (jump-statement -> break-statement .)
    BLOCK_END       reduce using rule 195 (jump-statement -> break-statement .)
    CASE            reduce using rule 195 (jump-statement -> break-statement .)
    DEFAULT         reduce using rule 195 (jump-statement -> break-statement .)


state 88

    (148) statement -> method-declaration .

    IDENTIFIER      reduce using rule 148 (statement -> method-declaration .)
    BLOCK_BEGIN     reduce using rule 148 (statement -> method-declaration .)
    DELIM           reduce using rule 148 (statement -> method-declaration .)
    CONSOLE         reduce using rule 148 (statement -> method-declaration .)
    CONST           reduce using rule 148 (statement -> method-declaration .)
    IF              reduce using rule 148 (statement -> method-declaration .)
    SWITCH          reduce using rule 148 (statement -> method-declaration .)
    WHILE           reduce using rule 148 (statement -> method-declaration .)
    FOR             reduce using rule 148 (statement -> method-declaration .)
    DO              reduce using rule 148 (statement -> method-declaration .)
    BREAK           reduce using rule 148 (statement -> method-declaration .)
    CONTINUE        reduce using rule 148 (statement -> method-declaration .)
    GOTO            reduce using rule 148 (statement -> method-declaration .)
    RETURN          reduce using rule 148 (statement -> method-declaration .)
    VOID            reduce using rule 148 (statement -> method-declaration .)
    BOOL            reduce using rule 148 (statement -> method-declaration .)
    INT             reduce using rule 148 (statement -> method-declaration .)
    UINT            reduce using rule 148 (statement -> method-declaration .)
    CHAR            reduce using rule 148 (statement -> method-declaration .)
    DOUBLE          reduce using rule 148 (statement -> method-declaration .)
    STRING          reduce using rule 148 (statement -> method-declaration .)
    BLOCK_END       reduce using rule 148 (statement -> method-declaration .)
    CASE            reduce using rule 148 (statement -> method-declaration .)
    DEFAULT         reduce using rule 148 (statement -> method-declaration .)


state 89

    (136) statement-list -> statement .

    IDENTIFIER      reduce using rule 136 (statement-list -> statement .)
    BLOCK_BEGIN     reduce using rule 136 (statement-list -> statement .)
    DELIM           reduce using rule 136 (statement-list -> statement .)
    CONSOLE         reduce using rule 136 (statement-list -> statement .)
    CONST           reduce using rule 136 (statement-list -> statement .)
    IF              reduce using rule 136 (statement-list -> statement .)
    SWITCH          reduce using rule 136 (statement-list -> statement .)
    WHILE           reduce using rule 136 (statement-list -> statement .)
    FOR             reduce using rule 136 (statement-list -> statement .)
    DO              reduce using rule 136 (statement-list -> statement .)
    BREAK           reduce using rule 136 (statement-list -> statement .)
    CONTINUE        reduce using rule 136 (statement-list -> statement .)
    GOTO            reduce using rule 136 (statement-list -> statement .)
    RETURN          reduce using rule 136 (statement-list -> statement .)
    VOID            reduce using rule 136 (statement-list -> statement .)
    BOOL            reduce using rule 136 (statement-list -> statement .)
    INT             reduce using rule 136 (statement-list -> statement .)
    UINT            reduce using rule 136 (statement-list -> statement .)
    CHAR            reduce using rule 136 (statement-list -> statement .)
    DOUBLE          reduce using rule 136 (statement-list -> statement .)
    STRING          reduce using rule 136 (statement-list -> statement .)
    BLOCK_END       reduce using rule 136 (statement-list -> statement .)
    CASE            reduce using rule 136 (statement-list -> statement .)
    DEFAULT         reduce using rule 136 (statement-list -> statement .)


state 90

    (153) labeled-statement -> IDENTIFIER . COLON statement
    (93) invocation-expression -> IDENTIFIER . OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> IDENTIFIER . DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (99) assignment -> IDENTIFIER . assignment-operator expression
    (11) class-type -> IDENTIFIER .
    (92) member-access -> IDENTIFIER . DOT IDENTIFIER
    (97) element-access -> IDENTIFIER . OPEN_BRACKET expression CLOSE_BRACKET
    (102) assignment-operator -> . ASSIGN
    (103) assignment-operator -> . PLUSEQUAL
    (104) assignment-operator -> . MINUSEQUAL
    (105) assignment-operator -> . TIMESEQUAL
    (106) assignment-operator -> . DIVEQUAL
    (107) assignment-operator -> . MODEQUAL
    (108) assignment-operator -> . BITANDEQUAL
    (109) assignment-operator -> . BITOREQUAL
    (110) assignment-operator -> . BITXOREQUAL
    (111) assignment-operator -> . LSHIFTEQUAL
    (112) assignment-operator -> . RSHIFTEQUAL

    COLON           shift and go to state 190
    OPEN_PAREN      shift and go to state 189
    DOT             shift and go to state 187
    IDENTIFIER      reduce using rule 11 (class-type -> IDENTIFIER .)
    OPEN_BRACKET    shift and go to state 188
    ASSIGN          shift and go to state 138
    PLUSEQUAL       shift and go to state 134
    MINUSEQUAL      shift and go to state 131
    TIMESEQUAL      shift and go to state 130
    DIVEQUAL        shift and go to state 127
    MODEQUAL        shift and go to state 139
    BITANDEQUAL     shift and go to state 136
    BITOREQUAL      shift and go to state 133
    BITXOREQUAL     shift and go to state 135
    LSHIFTEQUAL     shift and go to state 137
    RSHIFTEQUAL     shift and go to state 128

    assignment-operator            shift and go to state 191

state 91

    (156) local-variable-declaration -> type . variable-declarators
    (122) method-header -> type . IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (117) variable-declarators -> . variable-declarator
    (118) variable-declarators -> . variable-declarators COMMA variable-declarator
    (119) variable-declarator -> . IDENTIFIER
    (120) variable-declarator -> . IDENTIFIER ASSIGN variable-initializer

    IDENTIFIER      shift and go to state 52

    variable-declarator            shift and go to state 50
    variable-declarators           shift and go to state 192

state 92

    (135) statement-list-opt -> empty .

    BLOCK_END       reduce using rule 135 (statement-list-opt -> empty .)


state 93

    (139) statement -> declaration-statement .

    IDENTIFIER      reduce using rule 139 (statement -> declaration-statement .)
    BLOCK_BEGIN     reduce using rule 139 (statement -> declaration-statement .)
    DELIM           reduce using rule 139 (statement -> declaration-statement .)
    CONSOLE         reduce using rule 139 (statement -> declaration-statement .)
    CONST           reduce using rule 139 (statement -> declaration-statement .)
    IF              reduce using rule 139 (statement -> declaration-statement .)
    SWITCH          reduce using rule 139 (statement -> declaration-statement .)
    WHILE           reduce using rule 139 (statement -> declaration-statement .)
    FOR             reduce using rule 139 (statement -> declaration-statement .)
    DO              reduce using rule 139 (statement -> declaration-statement .)
    BREAK           reduce using rule 139 (statement -> declaration-statement .)
    CONTINUE        reduce using rule 139 (statement -> declaration-statement .)
    GOTO            reduce using rule 139 (statement -> declaration-statement .)
    RETURN          reduce using rule 139 (statement -> declaration-statement .)
    VOID            reduce using rule 139 (statement -> declaration-statement .)
    BOOL            reduce using rule 139 (statement -> declaration-statement .)
    INT             reduce using rule 139 (statement -> declaration-statement .)
    UINT            reduce using rule 139 (statement -> declaration-statement .)
    CHAR            reduce using rule 139 (statement -> declaration-statement .)
    DOUBLE          reduce using rule 139 (statement -> declaration-statement .)
    STRING          reduce using rule 139 (statement -> declaration-statement .)
    BLOCK_END       reduce using rule 139 (statement -> declaration-statement .)
    CASE            reduce using rule 139 (statement -> declaration-statement .)
    DEFAULT         reduce using rule 139 (statement -> declaration-statement .)


state 94

    (144) statement -> iteration-statement .

    IDENTIFIER      reduce using rule 144 (statement -> iteration-statement .)
    BLOCK_BEGIN     reduce using rule 144 (statement -> iteration-statement .)
    DELIM           reduce using rule 144 (statement -> iteration-statement .)
    CONSOLE         reduce using rule 144 (statement -> iteration-statement .)
    CONST           reduce using rule 144 (statement -> iteration-statement .)
    IF              reduce using rule 144 (statement -> iteration-statement .)
    SWITCH          reduce using rule 144 (statement -> iteration-statement .)
    WHILE           reduce using rule 144 (statement -> iteration-statement .)
    FOR             reduce using rule 144 (statement -> iteration-statement .)
    DO              reduce using rule 144 (statement -> iteration-statement .)
    BREAK           reduce using rule 144 (statement -> iteration-statement .)
    CONTINUE        reduce using rule 144 (statement -> iteration-statement .)
    GOTO            reduce using rule 144 (statement -> iteration-statement .)
    RETURN          reduce using rule 144 (statement -> iteration-statement .)
    VOID            reduce using rule 144 (statement -> iteration-statement .)
    BOOL            reduce using rule 144 (statement -> iteration-statement .)
    INT             reduce using rule 144 (statement -> iteration-statement .)
    UINT            reduce using rule 144 (statement -> iteration-statement .)
    CHAR            reduce using rule 144 (statement -> iteration-statement .)
    DOUBLE          reduce using rule 144 (statement -> iteration-statement .)
    STRING          reduce using rule 144 (statement -> iteration-statement .)
    BLOCK_END       reduce using rule 144 (statement -> iteration-statement .)
    CASE            reduce using rule 144 (statement -> iteration-statement .)
    DEFAULT         reduce using rule 144 (statement -> iteration-statement .)


state 95

    (199) break-statement -> BREAK . DELIM

    DELIM           shift and go to state 193


state 96

    (134) statement-list-opt -> statement-list .
    (137) statement-list -> statement-list . statement
    (138) statement -> . labeled-statement
    (139) statement -> . declaration-statement
    (140) statement -> . block
    (141) statement -> . empty-statement
    (142) statement -> . expression-statement
    (143) statement -> . selection-statement
    (144) statement -> . iteration-statement
    (145) statement -> . jump-statement
    (146) statement -> . write-statement
    (147) statement -> . read-statement
    (148) statement -> . method-declaration
    (153) labeled-statement -> . IDENTIFIER COLON statement
    (154) declaration-statement -> . local-variable-declaration DELIM
    (155) declaration-statement -> . local-constant-declaration DELIM
    (132) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END
    (158) empty-statement -> . DELIM
    (159) expression-statement -> . statement-expression DELIM
    (162) selection-statement -> . if-statement
    (163) selection-statement -> . switch-statement
    (178) iteration-statement -> . while-statement M_quad
    (179) iteration-statement -> . for-statement M_quad
    (180) iteration-statement -> . do-statement M_quad
    (195) jump-statement -> . break-statement
    (196) jump-statement -> . continue-statement
    (197) jump-statement -> . goto-statement
    (198) jump-statement -> . return-statement
    (149) write-statement -> . CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM
    (152) read-statement -> . CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM
    (121) method-declaration -> . method-header method-body
    (156) local-variable-declaration -> . type variable-declarators
    (157) local-constant-declaration -> . CONST simple-type constant-declarators
    (160) statement-expression -> . invocation-expression
    (161) statement-expression -> . assignment
    (164) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block
    (165) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block
    (166) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad
    (170) switch-statement -> . SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block
    (181) while-statement -> . WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block
    (184) for-statement -> . FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block
    (183) do-statement -> . DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM
    (199) break-statement -> . BREAK DELIM
    (200) continue-statement -> . CONTINUE DELIM
    (201) goto-statement -> . GOTO IDENTIFIER DELIM
    (202) return-statement -> . RETURN expression DELIM
    (203) return-statement -> . RETURN DELIM
    (122) method-header -> . type IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (123) method-header -> . VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (23) type -> . simple-type
    (24) type -> . class-type
    (25) type -> . array-type
    (93) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (99) assignment -> . IDENTIFIER assignment-operator expression
    (100) assignment -> . member-access assignment-operator expression
    (101) assignment -> . element-access assignment-operator expression
    (26) simple-type -> . BOOL
    (27) simple-type -> . INT
    (28) simple-type -> . UINT
    (29) simple-type -> . CHAR
    (30) simple-type -> . DOUBLE
    (31) simple-type -> . STRING
    (11) class-type -> . IDENTIFIER
    (32) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET
    (92) member-access -> . IDENTIFIER DOT IDENTIFIER
    (97) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (98) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    BLOCK_END       reduce using rule 134 (statement-list-opt -> statement-list .)
    IDENTIFIER      shift and go to state 90
    BLOCK_BEGIN     shift and go to state 58
    DELIM           shift and go to state 65
    CONSOLE         shift and go to state 103
    CONST           shift and go to state 100
    IF              shift and go to state 105
    SWITCH          shift and go to state 98
    WHILE           shift and go to state 85
    FOR             shift and go to state 77
    DO              shift and go to state 99
    BREAK           shift and go to state 95
    CONTINUE        shift and go to state 82
    GOTO            shift and go to state 68
    RETURN          shift and go to state 72
    VOID            shift and go to state 17
    BOOL            shift and go to state 37
    INT             shift and go to state 34
    UINT            shift and go to state 32
    CHAR            shift and go to state 18
    DOUBLE          shift and go to state 35
    STRING          shift and go to state 21

    return-statement               shift and go to state 73
    method-header                  shift and go to state 16
    write-statement                shift and go to state 62
    member-access                  shift and go to state 63
    selection-statement            shift and go to state 84
    empty-statement                shift and go to state 86
    expression-statement           shift and go to state 64
    break-statement                shift and go to state 87
    method-declaration             shift and go to state 88
    element-access                 shift and go to state 74
    statement-expression           shift and go to state 66
    local-constant-declaration     shift and go to state 75
    statement                      shift and go to state 194
    assignment                     shift and go to state 104
    for-statement                  shift and go to state 67
    type                           shift and go to state 91
    read-statement                 shift and go to state 102
    do-statement                   shift and go to state 76
    array-type                     shift and go to state 28
    continue-statement             shift and go to state 78
    invocation-expression          shift and go to state 71
    labeled-statement              shift and go to state 106
    declaration-statement          shift and go to state 93
    switch-statement               shift and go to state 69
    jump-statement                 shift and go to state 70
    iteration-statement            shift and go to state 94
    local-variable-declaration     shift and go to state 79
    goto-statement                 shift and go to state 80
    if-statement                   shift and go to state 81
    class-type                     shift and go to state 38
    while-statement                shift and go to state 97
    simple-type                    shift and go to state 19
    block                          shift and go to state 83

state 97

    (178) iteration-statement -> while-statement . M_quad
    (169) M_quad -> . empty
    (214) empty -> .

    IDENTIFIER      reduce using rule 214 (empty -> .)
    BLOCK_BEGIN     reduce using rule 214 (empty -> .)
    DELIM           reduce using rule 214 (empty -> .)
    CONSOLE         reduce using rule 214 (empty -> .)
    CONST           reduce using rule 214 (empty -> .)
    IF              reduce using rule 214 (empty -> .)
    SWITCH          reduce using rule 214 (empty -> .)
    WHILE           reduce using rule 214 (empty -> .)
    FOR             reduce using rule 214 (empty -> .)
    DO              reduce using rule 214 (empty -> .)
    BREAK           reduce using rule 214 (empty -> .)
    CONTINUE        reduce using rule 214 (empty -> .)
    GOTO            reduce using rule 214 (empty -> .)
    RETURN          reduce using rule 214 (empty -> .)
    VOID            reduce using rule 214 (empty -> .)
    BOOL            reduce using rule 214 (empty -> .)
    INT             reduce using rule 214 (empty -> .)
    UINT            reduce using rule 214 (empty -> .)
    CHAR            reduce using rule 214 (empty -> .)
    DOUBLE          reduce using rule 214 (empty -> .)
    STRING          reduce using rule 214 (empty -> .)
    BLOCK_END       reduce using rule 214 (empty -> .)
    CASE            reduce using rule 214 (empty -> .)
    DEFAULT         reduce using rule 214 (empty -> .)

    M_quad                         shift and go to state 195
    empty                          shift and go to state 142

state 98

    (170) switch-statement -> SWITCH . OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block

    OPEN_PAREN      shift and go to state 196


state 99

    (183) do-statement -> DO . M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM
    (169) M_quad -> . empty
    (214) empty -> .

    BLOCK_BEGIN     reduce using rule 214 (empty -> .)

    M_quad                         shift and go to state 197
    empty                          shift and go to state 142

state 100

    (157) local-constant-declaration -> CONST . simple-type constant-declarators
    (26) simple-type -> . BOOL
    (27) simple-type -> . INT
    (28) simple-type -> . UINT
    (29) simple-type -> . CHAR
    (30) simple-type -> . DOUBLE
    (31) simple-type -> . STRING

    BOOL            shift and go to state 37
    INT             shift and go to state 34
    UINT            shift and go to state 32
    CHAR            shift and go to state 18
    DOUBLE          shift and go to state 35
    STRING          shift and go to state 21

    simple-type                    shift and go to state 198

state 101

    (131) method-block -> BLOCK_BEGIN statement-list-opt . BLOCK_END

    BLOCK_END       shift and go to state 199


state 102

    (147) statement -> read-statement .

    IDENTIFIER      reduce using rule 147 (statement -> read-statement .)
    BLOCK_BEGIN     reduce using rule 147 (statement -> read-statement .)
    DELIM           reduce using rule 147 (statement -> read-statement .)
    CONSOLE         reduce using rule 147 (statement -> read-statement .)
    CONST           reduce using rule 147 (statement -> read-statement .)
    IF              reduce using rule 147 (statement -> read-statement .)
    SWITCH          reduce using rule 147 (statement -> read-statement .)
    WHILE           reduce using rule 147 (statement -> read-statement .)
    FOR             reduce using rule 147 (statement -> read-statement .)
    DO              reduce using rule 147 (statement -> read-statement .)
    BREAK           reduce using rule 147 (statement -> read-statement .)
    CONTINUE        reduce using rule 147 (statement -> read-statement .)
    GOTO            reduce using rule 147 (statement -> read-statement .)
    RETURN          reduce using rule 147 (statement -> read-statement .)
    VOID            reduce using rule 147 (statement -> read-statement .)
    BOOL            reduce using rule 147 (statement -> read-statement .)
    INT             reduce using rule 147 (statement -> read-statement .)
    UINT            reduce using rule 147 (statement -> read-statement .)
    CHAR            reduce using rule 147 (statement -> read-statement .)
    DOUBLE          reduce using rule 147 (statement -> read-statement .)
    STRING          reduce using rule 147 (statement -> read-statement .)
    BLOCK_END       reduce using rule 147 (statement -> read-statement .)
    CASE            reduce using rule 147 (statement -> read-statement .)
    DEFAULT         reduce using rule 147 (statement -> read-statement .)


state 103

    (149) write-statement -> CONSOLE . DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM
    (152) read-statement -> CONSOLE . DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM

    DOT             shift and go to state 200


state 104

    (161) statement-expression -> assignment .

    DELIM           reduce using rule 161 (statement-expression -> assignment .)
    COMMA           reduce using rule 161 (statement-expression -> assignment .)
    CLOSE_PAREN     reduce using rule 161 (statement-expression -> assignment .)


state 105

    (164) if-statement -> IF . OPEN_PAREN expression CLOSE_PAREN M_if block
    (165) if-statement -> IF . OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block
    (166) if-statement -> IF . OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad

    OPEN_PAREN      shift and go to state 201


state 106

    (138) statement -> labeled-statement .

    IDENTIFIER      reduce using rule 138 (statement -> labeled-statement .)
    BLOCK_BEGIN     reduce using rule 138 (statement -> labeled-statement .)
    DELIM           reduce using rule 138 (statement -> labeled-statement .)
    CONSOLE         reduce using rule 138 (statement -> labeled-statement .)
    CONST           reduce using rule 138 (statement -> labeled-statement .)
    IF              reduce using rule 138 (statement -> labeled-statement .)
    SWITCH          reduce using rule 138 (statement -> labeled-statement .)
    WHILE           reduce using rule 138 (statement -> labeled-statement .)
    FOR             reduce using rule 138 (statement -> labeled-statement .)
    DO              reduce using rule 138 (statement -> labeled-statement .)
    BREAK           reduce using rule 138 (statement -> labeled-statement .)
    CONTINUE        reduce using rule 138 (statement -> labeled-statement .)
    GOTO            reduce using rule 138 (statement -> labeled-statement .)
    RETURN          reduce using rule 138 (statement -> labeled-statement .)
    VOID            reduce using rule 138 (statement -> labeled-statement .)
    BOOL            reduce using rule 138 (statement -> labeled-statement .)
    INT             reduce using rule 138 (statement -> labeled-statement .)
    UINT            reduce using rule 138 (statement -> labeled-statement .)
    CHAR            reduce using rule 138 (statement -> labeled-statement .)
    DOUBLE          reduce using rule 138 (statement -> labeled-statement .)
    STRING          reduce using rule 138 (statement -> labeled-statement .)
    BLOCK_END       reduce using rule 138 (statement -> labeled-statement .)
    CASE            reduce using rule 138 (statement -> labeled-statement .)
    DEFAULT         reduce using rule 138 (statement -> labeled-statement .)


state 107

    (123) method-header -> VOID IDENTIFIER OPEN_PAREN . formal-parameter-list-opt CLOSE_PAREN
    (124) formal-parameter-list-opt -> . formal-parameter-list
    (125) formal-parameter-list-opt -> . empty
    (126) formal-parameter-list -> . fixed-parameters
    (214) empty -> .
    (127) fixed-parameters -> . fixed-parameter
    (128) fixed-parameters -> . fixed-parameters COMMA fixed-parameter
    (129) fixed-parameter -> . type IDENTIFIER
    (23) type -> . simple-type
    (24) type -> . class-type
    (25) type -> . array-type
    (26) simple-type -> . BOOL
    (27) simple-type -> . INT
    (28) simple-type -> . UINT
    (29) simple-type -> . CHAR
    (30) simple-type -> . DOUBLE
    (31) simple-type -> . STRING
    (11) class-type -> . IDENTIFIER
    (32) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET

    CLOSE_PAREN     reduce using rule 214 (empty -> .)
    BOOL            shift and go to state 37
    INT             shift and go to state 34
    UINT            shift and go to state 32
    CHAR            shift and go to state 18
    DOUBLE          shift and go to state 35
    STRING          shift and go to state 21
    IDENTIFIER      shift and go to state 42

    array-type                     shift and go to state 28
    fixed-parameters               shift and go to state 117
    simple-type                    shift and go to state 19
    formal-parameter-list-opt      shift and go to state 202
    class-type                     shift and go to state 38
    formal-parameter-list          shift and go to state 118
    type                           shift and go to state 119
    empty                          shift and go to state 120
    fixed-parameter                shift and go to state 121

state 108

    (32) array-type -> simple-type OPEN_BRACKET ICONST . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 203


state 109

    (21) constant-declaration -> CONST simple-type constant-declarators . DELIM
    (34) constant-declarators -> constant-declarators . COMMA constant-declarator

    DELIM           shift and go to state 204
    COMMA           shift and go to state 205


state 110

    (35) constant-declarator -> IDENTIFIER . ASSIGN expression

    ASSIGN          shift and go to state 206


state 111

    (33) constant-declarators -> constant-declarator .

    DELIM           reduce using rule 33 (constant-declarators -> constant-declarator .)
    COMMA           reduce using rule 33 (constant-declarators -> constant-declarator .)


state 112

    (114) field-declaration -> type variable-declarators DELIM .

    CONST           reduce using rule 114 (field-declaration -> type variable-declarators DELIM .)
    PUBLIC          reduce using rule 114 (field-declaration -> type variable-declarators DELIM .)
    PRIVATE         reduce using rule 114 (field-declaration -> type variable-declarators DELIM .)
    VOID            reduce using rule 114 (field-declaration -> type variable-declarators DELIM .)
    IDENTIFIER      reduce using rule 114 (field-declaration -> type variable-declarators DELIM .)
    BOOL            reduce using rule 114 (field-declaration -> type variable-declarators DELIM .)
    INT             reduce using rule 114 (field-declaration -> type variable-declarators DELIM .)
    UINT            reduce using rule 114 (field-declaration -> type variable-declarators DELIM .)
    CHAR            reduce using rule 114 (field-declaration -> type variable-declarators DELIM .)
    DOUBLE          reduce using rule 114 (field-declaration -> type variable-declarators DELIM .)
    STRING          reduce using rule 114 (field-declaration -> type variable-declarators DELIM .)
    BLOCK_END       reduce using rule 114 (field-declaration -> type variable-declarators DELIM .)


state 113

    (118) variable-declarators -> variable-declarators COMMA . variable-declarator
    (119) variable-declarator -> . IDENTIFIER
    (120) variable-declarator -> . IDENTIFIER ASSIGN variable-initializer

    IDENTIFIER      shift and go to state 125

    variable-declarator            shift and go to state 207

state 114

    (122) method-header -> type IDENTIFIER OPEN_PAREN . formal-parameter-list-opt CLOSE_PAREN
    (124) formal-parameter-list-opt -> . formal-parameter-list
    (125) formal-parameter-list-opt -> . empty
    (126) formal-parameter-list -> . fixed-parameters
    (214) empty -> .
    (127) fixed-parameters -> . fixed-parameter
    (128) fixed-parameters -> . fixed-parameters COMMA fixed-parameter
    (129) fixed-parameter -> . type IDENTIFIER
    (23) type -> . simple-type
    (24) type -> . class-type
    (25) type -> . array-type
    (26) simple-type -> . BOOL
    (27) simple-type -> . INT
    (28) simple-type -> . UINT
    (29) simple-type -> . CHAR
    (30) simple-type -> . DOUBLE
    (31) simple-type -> . STRING
    (11) class-type -> . IDENTIFIER
    (32) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET

    CLOSE_PAREN     reduce using rule 214 (empty -> .)
    BOOL            shift and go to state 37
    INT             shift and go to state 34
    UINT            shift and go to state 32
    CHAR            shift and go to state 18
    DOUBLE          shift and go to state 35
    STRING          shift and go to state 21
    IDENTIFIER      shift and go to state 42

    array-type                     shift and go to state 28
    fixed-parameters               shift and go to state 117
    simple-type                    shift and go to state 19
    formal-parameter-list-opt      shift and go to state 208
    class-type                     shift and go to state 38
    formal-parameter-list          shift and go to state 118
    type                           shift and go to state 119
    empty                          shift and go to state 120
    fixed-parameter                shift and go to state 121

state 115

    (120) variable-declarator -> IDENTIFIER ASSIGN . variable-initializer
    (81) variable-initializer -> . expression
    (82) variable-initializer -> . array-initializer
    (36) expression -> . conditional-expression
    (37) expression -> . assignment
    (78) array-initializer -> . BLOCK_BEGIN variable-initializer-list-opt BLOCK_END
    (38) conditional-expression -> . conditional-or-expression
    (39) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (99) assignment -> . IDENTIFIER assignment-operator expression
    (100) assignment -> . member-access assignment-operator expression
    (101) assignment -> . element-access assignment-operator expression
    (40) conditional-or-expression -> . conditional-and-expression
    (41) conditional-or-expression -> . conditional-or-expression M_or LOGOR conditional-and-expression
    (92) member-access -> . IDENTIFIER DOT IDENTIFIER
    (97) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (98) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression M_and LOGAND inclusive-or-expression
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . primary-no-array-creation-expression
    (83) primary-no-array-creation-expression -> . literal
    (84) primary-no-array-creation-expression -> . IDENTIFIER
    (85) primary-no-array-creation-expression -> . element-access
    (86) primary-no-array-creation-expression -> . parenthesized-expression
    (87) primary-no-array-creation-expression -> . member-access
    (88) primary-no-array-creation-expression -> . invocation-expression
    (89) primary-no-array-creation-expression -> . object-creation-expression
    (208) literal -> . ICONST
    (209) literal -> . DCONST
    (210) literal -> . TRUE
    (211) literal -> . FALSE
    (212) literal -> . CCONST
    (213) literal -> . SCONST
    (91) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (93) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (90) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    BLOCK_BEGIN     shift and go to state 209
    IDENTIFIER      shift and go to state 161
    PLUS            shift and go to state 160
    MINUS           shift and go to state 151
    BITNOT          shift and go to state 174
    BITCOMP         shift and go to state 155
    ICONST          shift and go to state 164
    DCONST          shift and go to state 148
    TRUE            shift and go to state 168
    FALSE           shift and go to state 166
    CCONST          shift and go to state 175
    SCONST          shift and go to state 154
    OPEN_PAREN      shift and go to state 157
    NEW             shift and go to state 149

    exclusive-or-expression        shift and go to state 145
    member-access                  shift and go to state 146
    relational-expression          shift and go to state 147
    additive-expression            shift and go to state 150
    array-initializer              shift and go to state 210
    inclusive-or-expression        shift and go to state 152
    unary-expression               shift and go to state 144
    element-access                 shift and go to state 156
    literal                        shift and go to state 163
    conditional-expression         shift and go to state 158
    conditional-and-expression     shift and go to state 162
    assignment                     shift and go to state 159
    variable-initializer           shift and go to state 211
    primary-no-array-creation-expression shift and go to state 171
    object-creation-expression     shift and go to state 165
    equality-expression            shift and go to state 167
    shift-expression               shift and go to state 169
    and-expression                 shift and go to state 170
    multiplicative-expression      shift and go to state 172
    expression                     shift and go to state 212
    primary-expression             shift and go to state 176
    invocation-expression          shift and go to state 177
    conditional-or-expression      shift and go to state 173
    parenthesized-expression       shift and go to state 179

state 116

    (205) constructor-declarator -> IDENTIFIER OPEN_PAREN formal-parameter-list-opt . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 213


state 117

    (126) formal-parameter-list -> fixed-parameters .
    (128) fixed-parameters -> fixed-parameters . COMMA fixed-parameter

    CLOSE_PAREN     reduce using rule 126 (formal-parameter-list -> fixed-parameters .)
    COMMA           shift and go to state 214


state 118

    (124) formal-parameter-list-opt -> formal-parameter-list .

    CLOSE_PAREN     reduce using rule 124 (formal-parameter-list-opt -> formal-parameter-list .)


state 119

    (129) fixed-parameter -> type . IDENTIFIER

    IDENTIFIER      shift and go to state 215


state 120

    (125) formal-parameter-list-opt -> empty .

    CLOSE_PAREN     reduce using rule 125 (formal-parameter-list-opt -> empty .)


state 121

    (127) fixed-parameters -> fixed-parameter .

    COMMA           reduce using rule 127 (fixed-parameters -> fixed-parameter .)
    CLOSE_PAREN     reduce using rule 127 (fixed-parameters -> fixed-parameter .)


state 122

    (132) block -> BLOCK_BEGIN M_bstart . statement-list-opt BLOCK_END
    (134) statement-list-opt -> . statement-list
    (135) statement-list-opt -> . empty
    (136) statement-list -> . statement
    (137) statement-list -> . statement-list statement
    (214) empty -> .
    (138) statement -> . labeled-statement
    (139) statement -> . declaration-statement
    (140) statement -> . block
    (141) statement -> . empty-statement
    (142) statement -> . expression-statement
    (143) statement -> . selection-statement
    (144) statement -> . iteration-statement
    (145) statement -> . jump-statement
    (146) statement -> . write-statement
    (147) statement -> . read-statement
    (148) statement -> . method-declaration
    (153) labeled-statement -> . IDENTIFIER COLON statement
    (154) declaration-statement -> . local-variable-declaration DELIM
    (155) declaration-statement -> . local-constant-declaration DELIM
    (132) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END
    (158) empty-statement -> . DELIM
    (159) expression-statement -> . statement-expression DELIM
    (162) selection-statement -> . if-statement
    (163) selection-statement -> . switch-statement
    (178) iteration-statement -> . while-statement M_quad
    (179) iteration-statement -> . for-statement M_quad
    (180) iteration-statement -> . do-statement M_quad
    (195) jump-statement -> . break-statement
    (196) jump-statement -> . continue-statement
    (197) jump-statement -> . goto-statement
    (198) jump-statement -> . return-statement
    (149) write-statement -> . CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM
    (152) read-statement -> . CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM
    (121) method-declaration -> . method-header method-body
    (156) local-variable-declaration -> . type variable-declarators
    (157) local-constant-declaration -> . CONST simple-type constant-declarators
    (160) statement-expression -> . invocation-expression
    (161) statement-expression -> . assignment
    (164) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block
    (165) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block
    (166) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad
    (170) switch-statement -> . SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block
    (181) while-statement -> . WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block
    (184) for-statement -> . FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block
    (183) do-statement -> . DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM
    (199) break-statement -> . BREAK DELIM
    (200) continue-statement -> . CONTINUE DELIM
    (201) goto-statement -> . GOTO IDENTIFIER DELIM
    (202) return-statement -> . RETURN expression DELIM
    (203) return-statement -> . RETURN DELIM
    (122) method-header -> . type IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (123) method-header -> . VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (23) type -> . simple-type
    (24) type -> . class-type
    (25) type -> . array-type
    (93) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (99) assignment -> . IDENTIFIER assignment-operator expression
    (100) assignment -> . member-access assignment-operator expression
    (101) assignment -> . element-access assignment-operator expression
    (26) simple-type -> . BOOL
    (27) simple-type -> . INT
    (28) simple-type -> . UINT
    (29) simple-type -> . CHAR
    (30) simple-type -> . DOUBLE
    (31) simple-type -> . STRING
    (11) class-type -> . IDENTIFIER
    (32) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET
    (92) member-access -> . IDENTIFIER DOT IDENTIFIER
    (97) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (98) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    BLOCK_END       reduce using rule 214 (empty -> .)
    IDENTIFIER      shift and go to state 90
    BLOCK_BEGIN     shift and go to state 58
    DELIM           shift and go to state 65
    CONSOLE         shift and go to state 103
    CONST           shift and go to state 100
    IF              shift and go to state 105
    SWITCH          shift and go to state 98
    WHILE           shift and go to state 85
    FOR             shift and go to state 77
    DO              shift and go to state 99
    BREAK           shift and go to state 95
    CONTINUE        shift and go to state 82
    GOTO            shift and go to state 68
    RETURN          shift and go to state 72
    VOID            shift and go to state 17
    BOOL            shift and go to state 37
    INT             shift and go to state 34
    UINT            shift and go to state 32
    CHAR            shift and go to state 18
    DOUBLE          shift and go to state 35
    STRING          shift and go to state 21

    return-statement               shift and go to state 73
    method-header                  shift and go to state 16
    write-statement                shift and go to state 62
    member-access                  shift and go to state 63
    selection-statement            shift and go to state 84
    empty-statement                shift and go to state 86
    statement-list-opt             shift and go to state 216
    expression-statement           shift and go to state 64
    break-statement                shift and go to state 87
    statement-expression           shift and go to state 66
    element-access                 shift and go to state 74
    method-declaration             shift and go to state 88
    local-constant-declaration     shift and go to state 75
    statement                      shift and go to state 89
    assignment                     shift and go to state 104
    for-statement                  shift and go to state 67
    type                           shift and go to state 91
    read-statement                 shift and go to state 102
    do-statement                   shift and go to state 76
    array-type                     shift and go to state 28
    continue-statement             shift and go to state 78
    invocation-expression          shift and go to state 71
    labeled-statement              shift and go to state 106
    declaration-statement          shift and go to state 93
    switch-statement               shift and go to state 69
    iteration-statement            shift and go to state 94
    jump-statement                 shift and go to state 70
    local-variable-declaration     shift and go to state 79
    goto-statement                 shift and go to state 80
    if-statement                   shift and go to state 81
    empty                          shift and go to state 92
    statement-list                 shift and go to state 96
    class-type                     shift and go to state 38
    while-statement                shift and go to state 97
    simple-type                    shift and go to state 19
    block                          shift and go to state 83

state 123

    (133) M_bstart -> empty .

    IDENTIFIER      reduce using rule 133 (M_bstart -> empty .)
    BLOCK_BEGIN     reduce using rule 133 (M_bstart -> empty .)
    DELIM           reduce using rule 133 (M_bstart -> empty .)
    CONSOLE         reduce using rule 133 (M_bstart -> empty .)
    CONST           reduce using rule 133 (M_bstart -> empty .)
    IF              reduce using rule 133 (M_bstart -> empty .)
    SWITCH          reduce using rule 133 (M_bstart -> empty .)
    WHILE           reduce using rule 133 (M_bstart -> empty .)
    FOR             reduce using rule 133 (M_bstart -> empty .)
    DO              reduce using rule 133 (M_bstart -> empty .)
    BREAK           reduce using rule 133 (M_bstart -> empty .)
    CONTINUE        reduce using rule 133 (M_bstart -> empty .)
    GOTO            reduce using rule 133 (M_bstart -> empty .)
    RETURN          reduce using rule 133 (M_bstart -> empty .)
    VOID            reduce using rule 133 (M_bstart -> empty .)
    BOOL            reduce using rule 133 (M_bstart -> empty .)
    INT             reduce using rule 133 (M_bstart -> empty .)
    UINT            reduce using rule 133 (M_bstart -> empty .)
    CHAR            reduce using rule 133 (M_bstart -> empty .)
    DOUBLE          reduce using rule 133 (M_bstart -> empty .)
    STRING          reduce using rule 133 (M_bstart -> empty .)
    BLOCK_END       reduce using rule 133 (M_bstart -> empty .)
    CASE            reduce using rule 133 (M_bstart -> empty .)
    DEFAULT         reduce using rule 133 (M_bstart -> empty .)


state 124

    (22) constant-declaration -> modifier CONST simple-type . constant-declarators DELIM
    (33) constant-declarators -> . constant-declarator
    (34) constant-declarators -> . constant-declarators COMMA constant-declarator
    (35) constant-declarator -> . IDENTIFIER ASSIGN expression

    IDENTIFIER      shift and go to state 110

    constant-declarators           shift and go to state 217
    constant-declarator            shift and go to state 111

state 125

    (119) variable-declarator -> IDENTIFIER .
    (120) variable-declarator -> IDENTIFIER . ASSIGN variable-initializer

    DELIM           reduce using rule 119 (variable-declarator -> IDENTIFIER .)
    COMMA           reduce using rule 119 (variable-declarator -> IDENTIFIER .)
    ASSIGN          shift and go to state 115


state 126

    (113) field-declaration -> modifier type variable-declarators . DELIM
    (118) variable-declarators -> variable-declarators . COMMA variable-declarator

    DELIM           shift and go to state 218
    COMMA           shift and go to state 113


state 127

    (106) assignment-operator -> DIVEQUAL .

    IDENTIFIER      reduce using rule 106 (assignment-operator -> DIVEQUAL .)
    PLUS            reduce using rule 106 (assignment-operator -> DIVEQUAL .)
    MINUS           reduce using rule 106 (assignment-operator -> DIVEQUAL .)
    BITNOT          reduce using rule 106 (assignment-operator -> DIVEQUAL .)
    BITCOMP         reduce using rule 106 (assignment-operator -> DIVEQUAL .)
    ICONST          reduce using rule 106 (assignment-operator -> DIVEQUAL .)
    DCONST          reduce using rule 106 (assignment-operator -> DIVEQUAL .)
    TRUE            reduce using rule 106 (assignment-operator -> DIVEQUAL .)
    FALSE           reduce using rule 106 (assignment-operator -> DIVEQUAL .)
    CCONST          reduce using rule 106 (assignment-operator -> DIVEQUAL .)
    SCONST          reduce using rule 106 (assignment-operator -> DIVEQUAL .)
    OPEN_PAREN      reduce using rule 106 (assignment-operator -> DIVEQUAL .)
    NEW             reduce using rule 106 (assignment-operator -> DIVEQUAL .)


state 128

    (112) assignment-operator -> RSHIFTEQUAL .

    IDENTIFIER      reduce using rule 112 (assignment-operator -> RSHIFTEQUAL .)
    PLUS            reduce using rule 112 (assignment-operator -> RSHIFTEQUAL .)
    MINUS           reduce using rule 112 (assignment-operator -> RSHIFTEQUAL .)
    BITNOT          reduce using rule 112 (assignment-operator -> RSHIFTEQUAL .)
    BITCOMP         reduce using rule 112 (assignment-operator -> RSHIFTEQUAL .)
    ICONST          reduce using rule 112 (assignment-operator -> RSHIFTEQUAL .)
    DCONST          reduce using rule 112 (assignment-operator -> RSHIFTEQUAL .)
    TRUE            reduce using rule 112 (assignment-operator -> RSHIFTEQUAL .)
    FALSE           reduce using rule 112 (assignment-operator -> RSHIFTEQUAL .)
    CCONST          reduce using rule 112 (assignment-operator -> RSHIFTEQUAL .)
    SCONST          reduce using rule 112 (assignment-operator -> RSHIFTEQUAL .)
    OPEN_PAREN      reduce using rule 112 (assignment-operator -> RSHIFTEQUAL .)
    NEW             reduce using rule 112 (assignment-operator -> RSHIFTEQUAL .)


state 129

    (100) assignment -> member-access assignment-operator . expression
    (36) expression -> . conditional-expression
    (37) expression -> . assignment
    (38) conditional-expression -> . conditional-or-expression
    (39) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (99) assignment -> . IDENTIFIER assignment-operator expression
    (100) assignment -> . member-access assignment-operator expression
    (101) assignment -> . element-access assignment-operator expression
    (40) conditional-or-expression -> . conditional-and-expression
    (41) conditional-or-expression -> . conditional-or-expression M_or LOGOR conditional-and-expression
    (92) member-access -> . IDENTIFIER DOT IDENTIFIER
    (97) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (98) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression M_and LOGAND inclusive-or-expression
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . primary-no-array-creation-expression
    (83) primary-no-array-creation-expression -> . literal
    (84) primary-no-array-creation-expression -> . IDENTIFIER
    (85) primary-no-array-creation-expression -> . element-access
    (86) primary-no-array-creation-expression -> . parenthesized-expression
    (87) primary-no-array-creation-expression -> . member-access
    (88) primary-no-array-creation-expression -> . invocation-expression
    (89) primary-no-array-creation-expression -> . object-creation-expression
    (208) literal -> . ICONST
    (209) literal -> . DCONST
    (210) literal -> . TRUE
    (211) literal -> . FALSE
    (212) literal -> . CCONST
    (213) literal -> . SCONST
    (91) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (93) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (90) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 161
    PLUS            shift and go to state 160
    MINUS           shift and go to state 151
    BITNOT          shift and go to state 174
    BITCOMP         shift and go to state 155
    ICONST          shift and go to state 164
    DCONST          shift and go to state 148
    TRUE            shift and go to state 168
    FALSE           shift and go to state 166
    CCONST          shift and go to state 175
    SCONST          shift and go to state 154
    OPEN_PAREN      shift and go to state 157
    NEW             shift and go to state 149

    exclusive-or-expression        shift and go to state 145
    member-access                  shift and go to state 146
    relational-expression          shift and go to state 147
    additive-expression            shift and go to state 150
    inclusive-or-expression        shift and go to state 152
    unary-expression               shift and go to state 144
    element-access                 shift and go to state 156
    literal                        shift and go to state 163
    conditional-expression         shift and go to state 158
    conditional-and-expression     shift and go to state 162
    assignment                     shift and go to state 159
    primary-no-array-creation-expression shift and go to state 171
    object-creation-expression     shift and go to state 165
    equality-expression            shift and go to state 167
    shift-expression               shift and go to state 169
    and-expression                 shift and go to state 170
    multiplicative-expression      shift and go to state 172
    conditional-or-expression      shift and go to state 173
    primary-expression             shift and go to state 176
    invocation-expression          shift and go to state 177
    expression                     shift and go to state 219
    parenthesized-expression       shift and go to state 179

state 130

    (105) assignment-operator -> TIMESEQUAL .

    IDENTIFIER      reduce using rule 105 (assignment-operator -> TIMESEQUAL .)
    PLUS            reduce using rule 105 (assignment-operator -> TIMESEQUAL .)
    MINUS           reduce using rule 105 (assignment-operator -> TIMESEQUAL .)
    BITNOT          reduce using rule 105 (assignment-operator -> TIMESEQUAL .)
    BITCOMP         reduce using rule 105 (assignment-operator -> TIMESEQUAL .)
    ICONST          reduce using rule 105 (assignment-operator -> TIMESEQUAL .)
    DCONST          reduce using rule 105 (assignment-operator -> TIMESEQUAL .)
    TRUE            reduce using rule 105 (assignment-operator -> TIMESEQUAL .)
    FALSE           reduce using rule 105 (assignment-operator -> TIMESEQUAL .)
    CCONST          reduce using rule 105 (assignment-operator -> TIMESEQUAL .)
    SCONST          reduce using rule 105 (assignment-operator -> TIMESEQUAL .)
    OPEN_PAREN      reduce using rule 105 (assignment-operator -> TIMESEQUAL .)
    NEW             reduce using rule 105 (assignment-operator -> TIMESEQUAL .)


state 131

    (104) assignment-operator -> MINUSEQUAL .

    IDENTIFIER      reduce using rule 104 (assignment-operator -> MINUSEQUAL .)
    PLUS            reduce using rule 104 (assignment-operator -> MINUSEQUAL .)
    MINUS           reduce using rule 104 (assignment-operator -> MINUSEQUAL .)
    BITNOT          reduce using rule 104 (assignment-operator -> MINUSEQUAL .)
    BITCOMP         reduce using rule 104 (assignment-operator -> MINUSEQUAL .)
    ICONST          reduce using rule 104 (assignment-operator -> MINUSEQUAL .)
    DCONST          reduce using rule 104 (assignment-operator -> MINUSEQUAL .)
    TRUE            reduce using rule 104 (assignment-operator -> MINUSEQUAL .)
    FALSE           reduce using rule 104 (assignment-operator -> MINUSEQUAL .)
    CCONST          reduce using rule 104 (assignment-operator -> MINUSEQUAL .)
    SCONST          reduce using rule 104 (assignment-operator -> MINUSEQUAL .)
    OPEN_PAREN      reduce using rule 104 (assignment-operator -> MINUSEQUAL .)
    NEW             reduce using rule 104 (assignment-operator -> MINUSEQUAL .)


state 132

    (98) element-access -> member-access OPEN_BRACKET . expression CLOSE_BRACKET
    (36) expression -> . conditional-expression
    (37) expression -> . assignment
    (38) conditional-expression -> . conditional-or-expression
    (39) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (99) assignment -> . IDENTIFIER assignment-operator expression
    (100) assignment -> . member-access assignment-operator expression
    (101) assignment -> . element-access assignment-operator expression
    (40) conditional-or-expression -> . conditional-and-expression
    (41) conditional-or-expression -> . conditional-or-expression M_or LOGOR conditional-and-expression
    (92) member-access -> . IDENTIFIER DOT IDENTIFIER
    (97) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (98) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression M_and LOGAND inclusive-or-expression
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . primary-no-array-creation-expression
    (83) primary-no-array-creation-expression -> . literal
    (84) primary-no-array-creation-expression -> . IDENTIFIER
    (85) primary-no-array-creation-expression -> . element-access
    (86) primary-no-array-creation-expression -> . parenthesized-expression
    (87) primary-no-array-creation-expression -> . member-access
    (88) primary-no-array-creation-expression -> . invocation-expression
    (89) primary-no-array-creation-expression -> . object-creation-expression
    (208) literal -> . ICONST
    (209) literal -> . DCONST
    (210) literal -> . TRUE
    (211) literal -> . FALSE
    (212) literal -> . CCONST
    (213) literal -> . SCONST
    (91) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (93) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (90) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 161
    PLUS            shift and go to state 160
    MINUS           shift and go to state 151
    BITNOT          shift and go to state 174
    BITCOMP         shift and go to state 155
    ICONST          shift and go to state 164
    DCONST          shift and go to state 148
    TRUE            shift and go to state 168
    FALSE           shift and go to state 166
    CCONST          shift and go to state 175
    SCONST          shift and go to state 154
    OPEN_PAREN      shift and go to state 157
    NEW             shift and go to state 149

    exclusive-or-expression        shift and go to state 145
    member-access                  shift and go to state 146
    relational-expression          shift and go to state 147
    additive-expression            shift and go to state 150
    inclusive-or-expression        shift and go to state 152
    unary-expression               shift and go to state 144
    element-access                 shift and go to state 156
    literal                        shift and go to state 163
    conditional-expression         shift and go to state 158
    conditional-and-expression     shift and go to state 162
    assignment                     shift and go to state 159
    primary-no-array-creation-expression shift and go to state 171
    object-creation-expression     shift and go to state 165
    equality-expression            shift and go to state 167
    shift-expression               shift and go to state 169
    and-expression                 shift and go to state 170
    multiplicative-expression      shift and go to state 172
    expression                     shift and go to state 220
    primary-expression             shift and go to state 176
    invocation-expression          shift and go to state 177
    conditional-or-expression      shift and go to state 173
    parenthesized-expression       shift and go to state 179

state 133

    (109) assignment-operator -> BITOREQUAL .

    IDENTIFIER      reduce using rule 109 (assignment-operator -> BITOREQUAL .)
    PLUS            reduce using rule 109 (assignment-operator -> BITOREQUAL .)
    MINUS           reduce using rule 109 (assignment-operator -> BITOREQUAL .)
    BITNOT          reduce using rule 109 (assignment-operator -> BITOREQUAL .)
    BITCOMP         reduce using rule 109 (assignment-operator -> BITOREQUAL .)
    ICONST          reduce using rule 109 (assignment-operator -> BITOREQUAL .)
    DCONST          reduce using rule 109 (assignment-operator -> BITOREQUAL .)
    TRUE            reduce using rule 109 (assignment-operator -> BITOREQUAL .)
    FALSE           reduce using rule 109 (assignment-operator -> BITOREQUAL .)
    CCONST          reduce using rule 109 (assignment-operator -> BITOREQUAL .)
    SCONST          reduce using rule 109 (assignment-operator -> BITOREQUAL .)
    OPEN_PAREN      reduce using rule 109 (assignment-operator -> BITOREQUAL .)
    NEW             reduce using rule 109 (assignment-operator -> BITOREQUAL .)


state 134

    (103) assignment-operator -> PLUSEQUAL .

    IDENTIFIER      reduce using rule 103 (assignment-operator -> PLUSEQUAL .)
    PLUS            reduce using rule 103 (assignment-operator -> PLUSEQUAL .)
    MINUS           reduce using rule 103 (assignment-operator -> PLUSEQUAL .)
    BITNOT          reduce using rule 103 (assignment-operator -> PLUSEQUAL .)
    BITCOMP         reduce using rule 103 (assignment-operator -> PLUSEQUAL .)
    ICONST          reduce using rule 103 (assignment-operator -> PLUSEQUAL .)
    DCONST          reduce using rule 103 (assignment-operator -> PLUSEQUAL .)
    TRUE            reduce using rule 103 (assignment-operator -> PLUSEQUAL .)
    FALSE           reduce using rule 103 (assignment-operator -> PLUSEQUAL .)
    CCONST          reduce using rule 103 (assignment-operator -> PLUSEQUAL .)
    SCONST          reduce using rule 103 (assignment-operator -> PLUSEQUAL .)
    OPEN_PAREN      reduce using rule 103 (assignment-operator -> PLUSEQUAL .)
    NEW             reduce using rule 103 (assignment-operator -> PLUSEQUAL .)


state 135

    (110) assignment-operator -> BITXOREQUAL .

    IDENTIFIER      reduce using rule 110 (assignment-operator -> BITXOREQUAL .)
    PLUS            reduce using rule 110 (assignment-operator -> BITXOREQUAL .)
    MINUS           reduce using rule 110 (assignment-operator -> BITXOREQUAL .)
    BITNOT          reduce using rule 110 (assignment-operator -> BITXOREQUAL .)
    BITCOMP         reduce using rule 110 (assignment-operator -> BITXOREQUAL .)
    ICONST          reduce using rule 110 (assignment-operator -> BITXOREQUAL .)
    DCONST          reduce using rule 110 (assignment-operator -> BITXOREQUAL .)
    TRUE            reduce using rule 110 (assignment-operator -> BITXOREQUAL .)
    FALSE           reduce using rule 110 (assignment-operator -> BITXOREQUAL .)
    CCONST          reduce using rule 110 (assignment-operator -> BITXOREQUAL .)
    SCONST          reduce using rule 110 (assignment-operator -> BITXOREQUAL .)
    OPEN_PAREN      reduce using rule 110 (assignment-operator -> BITXOREQUAL .)
    NEW             reduce using rule 110 (assignment-operator -> BITXOREQUAL .)


state 136

    (108) assignment-operator -> BITANDEQUAL .

    IDENTIFIER      reduce using rule 108 (assignment-operator -> BITANDEQUAL .)
    PLUS            reduce using rule 108 (assignment-operator -> BITANDEQUAL .)
    MINUS           reduce using rule 108 (assignment-operator -> BITANDEQUAL .)
    BITNOT          reduce using rule 108 (assignment-operator -> BITANDEQUAL .)
    BITCOMP         reduce using rule 108 (assignment-operator -> BITANDEQUAL .)
    ICONST          reduce using rule 108 (assignment-operator -> BITANDEQUAL .)
    DCONST          reduce using rule 108 (assignment-operator -> BITANDEQUAL .)
    TRUE            reduce using rule 108 (assignment-operator -> BITANDEQUAL .)
    FALSE           reduce using rule 108 (assignment-operator -> BITANDEQUAL .)
    CCONST          reduce using rule 108 (assignment-operator -> BITANDEQUAL .)
    SCONST          reduce using rule 108 (assignment-operator -> BITANDEQUAL .)
    OPEN_PAREN      reduce using rule 108 (assignment-operator -> BITANDEQUAL .)
    NEW             reduce using rule 108 (assignment-operator -> BITANDEQUAL .)


state 137

    (111) assignment-operator -> LSHIFTEQUAL .

    IDENTIFIER      reduce using rule 111 (assignment-operator -> LSHIFTEQUAL .)
    PLUS            reduce using rule 111 (assignment-operator -> LSHIFTEQUAL .)
    MINUS           reduce using rule 111 (assignment-operator -> LSHIFTEQUAL .)
    BITNOT          reduce using rule 111 (assignment-operator -> LSHIFTEQUAL .)
    BITCOMP         reduce using rule 111 (assignment-operator -> LSHIFTEQUAL .)
    ICONST          reduce using rule 111 (assignment-operator -> LSHIFTEQUAL .)
    DCONST          reduce using rule 111 (assignment-operator -> LSHIFTEQUAL .)
    TRUE            reduce using rule 111 (assignment-operator -> LSHIFTEQUAL .)
    FALSE           reduce using rule 111 (assignment-operator -> LSHIFTEQUAL .)
    CCONST          reduce using rule 111 (assignment-operator -> LSHIFTEQUAL .)
    SCONST          reduce using rule 111 (assignment-operator -> LSHIFTEQUAL .)
    OPEN_PAREN      reduce using rule 111 (assignment-operator -> LSHIFTEQUAL .)
    NEW             reduce using rule 111 (assignment-operator -> LSHIFTEQUAL .)


state 138

    (102) assignment-operator -> ASSIGN .

    IDENTIFIER      reduce using rule 102 (assignment-operator -> ASSIGN .)
    PLUS            reduce using rule 102 (assignment-operator -> ASSIGN .)
    MINUS           reduce using rule 102 (assignment-operator -> ASSIGN .)
    BITNOT          reduce using rule 102 (assignment-operator -> ASSIGN .)
    BITCOMP         reduce using rule 102 (assignment-operator -> ASSIGN .)
    ICONST          reduce using rule 102 (assignment-operator -> ASSIGN .)
    DCONST          reduce using rule 102 (assignment-operator -> ASSIGN .)
    TRUE            reduce using rule 102 (assignment-operator -> ASSIGN .)
    FALSE           reduce using rule 102 (assignment-operator -> ASSIGN .)
    CCONST          reduce using rule 102 (assignment-operator -> ASSIGN .)
    SCONST          reduce using rule 102 (assignment-operator -> ASSIGN .)
    OPEN_PAREN      reduce using rule 102 (assignment-operator -> ASSIGN .)
    NEW             reduce using rule 102 (assignment-operator -> ASSIGN .)


state 139

    (107) assignment-operator -> MODEQUAL .

    IDENTIFIER      reduce using rule 107 (assignment-operator -> MODEQUAL .)
    PLUS            reduce using rule 107 (assignment-operator -> MODEQUAL .)
    MINUS           reduce using rule 107 (assignment-operator -> MODEQUAL .)
    BITNOT          reduce using rule 107 (assignment-operator -> MODEQUAL .)
    BITCOMP         reduce using rule 107 (assignment-operator -> MODEQUAL .)
    ICONST          reduce using rule 107 (assignment-operator -> MODEQUAL .)
    DCONST          reduce using rule 107 (assignment-operator -> MODEQUAL .)
    TRUE            reduce using rule 107 (assignment-operator -> MODEQUAL .)
    FALSE           reduce using rule 107 (assignment-operator -> MODEQUAL .)
    CCONST          reduce using rule 107 (assignment-operator -> MODEQUAL .)
    SCONST          reduce using rule 107 (assignment-operator -> MODEQUAL .)
    OPEN_PAREN      reduce using rule 107 (assignment-operator -> MODEQUAL .)
    NEW             reduce using rule 107 (assignment-operator -> MODEQUAL .)


state 140

    (159) expression-statement -> statement-expression DELIM .

    IDENTIFIER      reduce using rule 159 (expression-statement -> statement-expression DELIM .)
    BLOCK_BEGIN     reduce using rule 159 (expression-statement -> statement-expression DELIM .)
    DELIM           reduce using rule 159 (expression-statement -> statement-expression DELIM .)
    CONSOLE         reduce using rule 159 (expression-statement -> statement-expression DELIM .)
    CONST           reduce using rule 159 (expression-statement -> statement-expression DELIM .)
    IF              reduce using rule 159 (expression-statement -> statement-expression DELIM .)
    SWITCH          reduce using rule 159 (expression-statement -> statement-expression DELIM .)
    WHILE           reduce using rule 159 (expression-statement -> statement-expression DELIM .)
    FOR             reduce using rule 159 (expression-statement -> statement-expression DELIM .)
    DO              reduce using rule 159 (expression-statement -> statement-expression DELIM .)
    BREAK           reduce using rule 159 (expression-statement -> statement-expression DELIM .)
    CONTINUE        reduce using rule 159 (expression-statement -> statement-expression DELIM .)
    GOTO            reduce using rule 159 (expression-statement -> statement-expression DELIM .)
    RETURN          reduce using rule 159 (expression-statement -> statement-expression DELIM .)
    VOID            reduce using rule 159 (expression-statement -> statement-expression DELIM .)
    BOOL            reduce using rule 159 (expression-statement -> statement-expression DELIM .)
    INT             reduce using rule 159 (expression-statement -> statement-expression DELIM .)
    UINT            reduce using rule 159 (expression-statement -> statement-expression DELIM .)
    CHAR            reduce using rule 159 (expression-statement -> statement-expression DELIM .)
    DOUBLE          reduce using rule 159 (expression-statement -> statement-expression DELIM .)
    STRING          reduce using rule 159 (expression-statement -> statement-expression DELIM .)
    BLOCK_END       reduce using rule 159 (expression-statement -> statement-expression DELIM .)
    CASE            reduce using rule 159 (expression-statement -> statement-expression DELIM .)
    DEFAULT         reduce using rule 159 (expression-statement -> statement-expression DELIM .)


state 141

    (179) iteration-statement -> for-statement M_quad .

    IDENTIFIER      reduce using rule 179 (iteration-statement -> for-statement M_quad .)
    BLOCK_BEGIN     reduce using rule 179 (iteration-statement -> for-statement M_quad .)
    DELIM           reduce using rule 179 (iteration-statement -> for-statement M_quad .)
    CONSOLE         reduce using rule 179 (iteration-statement -> for-statement M_quad .)
    CONST           reduce using rule 179 (iteration-statement -> for-statement M_quad .)
    IF              reduce using rule 179 (iteration-statement -> for-statement M_quad .)
    SWITCH          reduce using rule 179 (iteration-statement -> for-statement M_quad .)
    WHILE           reduce using rule 179 (iteration-statement -> for-statement M_quad .)
    FOR             reduce using rule 179 (iteration-statement -> for-statement M_quad .)
    DO              reduce using rule 179 (iteration-statement -> for-statement M_quad .)
    BREAK           reduce using rule 179 (iteration-statement -> for-statement M_quad .)
    CONTINUE        reduce using rule 179 (iteration-statement -> for-statement M_quad .)
    GOTO            reduce using rule 179 (iteration-statement -> for-statement M_quad .)
    RETURN          reduce using rule 179 (iteration-statement -> for-statement M_quad .)
    VOID            reduce using rule 179 (iteration-statement -> for-statement M_quad .)
    BOOL            reduce using rule 179 (iteration-statement -> for-statement M_quad .)
    INT             reduce using rule 179 (iteration-statement -> for-statement M_quad .)
    UINT            reduce using rule 179 (iteration-statement -> for-statement M_quad .)
    CHAR            reduce using rule 179 (iteration-statement -> for-statement M_quad .)
    DOUBLE          reduce using rule 179 (iteration-statement -> for-statement M_quad .)
    STRING          reduce using rule 179 (iteration-statement -> for-statement M_quad .)
    BLOCK_END       reduce using rule 179 (iteration-statement -> for-statement M_quad .)
    CASE            reduce using rule 179 (iteration-statement -> for-statement M_quad .)
    DEFAULT         reduce using rule 179 (iteration-statement -> for-statement M_quad .)


state 142

    (169) M_quad -> empty .

    IDENTIFIER      reduce using rule 169 (M_quad -> empty .)
    BLOCK_BEGIN     reduce using rule 169 (M_quad -> empty .)
    DELIM           reduce using rule 169 (M_quad -> empty .)
    CONSOLE         reduce using rule 169 (M_quad -> empty .)
    CONST           reduce using rule 169 (M_quad -> empty .)
    IF              reduce using rule 169 (M_quad -> empty .)
    SWITCH          reduce using rule 169 (M_quad -> empty .)
    WHILE           reduce using rule 169 (M_quad -> empty .)
    FOR             reduce using rule 169 (M_quad -> empty .)
    DO              reduce using rule 169 (M_quad -> empty .)
    BREAK           reduce using rule 169 (M_quad -> empty .)
    CONTINUE        reduce using rule 169 (M_quad -> empty .)
    GOTO            reduce using rule 169 (M_quad -> empty .)
    RETURN          reduce using rule 169 (M_quad -> empty .)
    VOID            reduce using rule 169 (M_quad -> empty .)
    BOOL            reduce using rule 169 (M_quad -> empty .)
    INT             reduce using rule 169 (M_quad -> empty .)
    UINT            reduce using rule 169 (M_quad -> empty .)
    CHAR            reduce using rule 169 (M_quad -> empty .)
    DOUBLE          reduce using rule 169 (M_quad -> empty .)
    STRING          reduce using rule 169 (M_quad -> empty .)
    BLOCK_END       reduce using rule 169 (M_quad -> empty .)
    CASE            reduce using rule 169 (M_quad -> empty .)
    DEFAULT         reduce using rule 169 (M_quad -> empty .)
    PLUS            reduce using rule 169 (M_quad -> empty .)
    MINUS           reduce using rule 169 (M_quad -> empty .)
    BITNOT          reduce using rule 169 (M_quad -> empty .)
    BITCOMP         reduce using rule 169 (M_quad -> empty .)
    ICONST          reduce using rule 169 (M_quad -> empty .)
    DCONST          reduce using rule 169 (M_quad -> empty .)
    TRUE            reduce using rule 169 (M_quad -> empty .)
    FALSE           reduce using rule 169 (M_quad -> empty .)
    CCONST          reduce using rule 169 (M_quad -> empty .)
    SCONST          reduce using rule 169 (M_quad -> empty .)
    OPEN_PAREN      reduce using rule 169 (M_quad -> empty .)
    NEW             reduce using rule 169 (M_quad -> empty .)
    CLOSE_PAREN     reduce using rule 169 (M_quad -> empty .)


state 143

    (201) goto-statement -> GOTO IDENTIFIER . DELIM

    DELIM           shift and go to state 221


state 144

    (66) multiplicative-expression -> unary-expression .

    TIMES           reduce using rule 66 (multiplicative-expression -> unary-expression .)
    DIV             reduce using rule 66 (multiplicative-expression -> unary-expression .)
    MOD             reduce using rule 66 (multiplicative-expression -> unary-expression .)
    PLUS            reduce using rule 66 (multiplicative-expression -> unary-expression .)
    MINUS           reduce using rule 66 (multiplicative-expression -> unary-expression .)
    LSHIFT          reduce using rule 66 (multiplicative-expression -> unary-expression .)
    RSHIFT          reduce using rule 66 (multiplicative-expression -> unary-expression .)
    LT              reduce using rule 66 (multiplicative-expression -> unary-expression .)
    GT              reduce using rule 66 (multiplicative-expression -> unary-expression .)
    LE              reduce using rule 66 (multiplicative-expression -> unary-expression .)
    GE              reduce using rule 66 (multiplicative-expression -> unary-expression .)
    EQ              reduce using rule 66 (multiplicative-expression -> unary-expression .)
    NE              reduce using rule 66 (multiplicative-expression -> unary-expression .)
    BITAND          reduce using rule 66 (multiplicative-expression -> unary-expression .)
    BITXOR          reduce using rule 66 (multiplicative-expression -> unary-expression .)
    BITOR           reduce using rule 66 (multiplicative-expression -> unary-expression .)
    LOGAND          reduce using rule 66 (multiplicative-expression -> unary-expression .)
    CONDOP          reduce using rule 66 (multiplicative-expression -> unary-expression .)
    LOGOR           reduce using rule 66 (multiplicative-expression -> unary-expression .)
    COMMA           reduce using rule 66 (multiplicative-expression -> unary-expression .)
    CLOSE_PAREN     reduce using rule 66 (multiplicative-expression -> unary-expression .)
    DELIM           reduce using rule 66 (multiplicative-expression -> unary-expression .)
    CLOSE_BRACKET   reduce using rule 66 (multiplicative-expression -> unary-expression .)
    BLOCK_END       reduce using rule 66 (multiplicative-expression -> unary-expression .)
    COLON           reduce using rule 66 (multiplicative-expression -> unary-expression .)


state 145

    (46) inclusive-or-expression -> exclusive-or-expression .
    (49) exclusive-or-expression -> exclusive-or-expression . BITXOR and-expression

    BITOR           reduce using rule 46 (inclusive-or-expression -> exclusive-or-expression .)
    LOGAND          reduce using rule 46 (inclusive-or-expression -> exclusive-or-expression .)
    CONDOP          reduce using rule 46 (inclusive-or-expression -> exclusive-or-expression .)
    LOGOR           reduce using rule 46 (inclusive-or-expression -> exclusive-or-expression .)
    DELIM           reduce using rule 46 (inclusive-or-expression -> exclusive-or-expression .)
    COMMA           reduce using rule 46 (inclusive-or-expression -> exclusive-or-expression .)
    CLOSE_BRACKET   reduce using rule 46 (inclusive-or-expression -> exclusive-or-expression .)
    CLOSE_PAREN     reduce using rule 46 (inclusive-or-expression -> exclusive-or-expression .)
    BLOCK_END       reduce using rule 46 (inclusive-or-expression -> exclusive-or-expression .)
    COLON           reduce using rule 46 (inclusive-or-expression -> exclusive-or-expression .)
    BITXOR          shift and go to state 222


state 146

    (100) assignment -> member-access . assignment-operator expression
    (98) element-access -> member-access . OPEN_BRACKET expression CLOSE_BRACKET
    (87) primary-no-array-creation-expression -> member-access .
    (102) assignment-operator -> . ASSIGN
    (103) assignment-operator -> . PLUSEQUAL
    (104) assignment-operator -> . MINUSEQUAL
    (105) assignment-operator -> . TIMESEQUAL
    (106) assignment-operator -> . DIVEQUAL
    (107) assignment-operator -> . MODEQUAL
    (108) assignment-operator -> . BITANDEQUAL
    (109) assignment-operator -> . BITOREQUAL
    (110) assignment-operator -> . BITXOREQUAL
    (111) assignment-operator -> . LSHIFTEQUAL
    (112) assignment-operator -> . RSHIFTEQUAL

    OPEN_BRACKET    shift and go to state 132
    TIMES           reduce using rule 87 (primary-no-array-creation-expression -> member-access .)
    DIV             reduce using rule 87 (primary-no-array-creation-expression -> member-access .)
    MOD             reduce using rule 87 (primary-no-array-creation-expression -> member-access .)
    PLUS            reduce using rule 87 (primary-no-array-creation-expression -> member-access .)
    MINUS           reduce using rule 87 (primary-no-array-creation-expression -> member-access .)
    LSHIFT          reduce using rule 87 (primary-no-array-creation-expression -> member-access .)
    RSHIFT          reduce using rule 87 (primary-no-array-creation-expression -> member-access .)
    LT              reduce using rule 87 (primary-no-array-creation-expression -> member-access .)
    GT              reduce using rule 87 (primary-no-array-creation-expression -> member-access .)
    LE              reduce using rule 87 (primary-no-array-creation-expression -> member-access .)
    GE              reduce using rule 87 (primary-no-array-creation-expression -> member-access .)
    EQ              reduce using rule 87 (primary-no-array-creation-expression -> member-access .)
    NE              reduce using rule 87 (primary-no-array-creation-expression -> member-access .)
    BITAND          reduce using rule 87 (primary-no-array-creation-expression -> member-access .)
    BITXOR          reduce using rule 87 (primary-no-array-creation-expression -> member-access .)
    BITOR           reduce using rule 87 (primary-no-array-creation-expression -> member-access .)
    LOGAND          reduce using rule 87 (primary-no-array-creation-expression -> member-access .)
    CONDOP          reduce using rule 87 (primary-no-array-creation-expression -> member-access .)
    LOGOR           reduce using rule 87 (primary-no-array-creation-expression -> member-access .)
    DELIM           reduce using rule 87 (primary-no-array-creation-expression -> member-access .)
    COMMA           reduce using rule 87 (primary-no-array-creation-expression -> member-access .)
    CLOSE_BRACKET   reduce using rule 87 (primary-no-array-creation-expression -> member-access .)
    CLOSE_PAREN     reduce using rule 87 (primary-no-array-creation-expression -> member-access .)
    BLOCK_END       reduce using rule 87 (primary-no-array-creation-expression -> member-access .)
    COLON           reduce using rule 87 (primary-no-array-creation-expression -> member-access .)
    ASSIGN          shift and go to state 138
    PLUSEQUAL       shift and go to state 134
    MINUSEQUAL      shift and go to state 131
    TIMESEQUAL      shift and go to state 130
    DIVEQUAL        shift and go to state 127
    MODEQUAL        shift and go to state 139
    BITANDEQUAL     shift and go to state 136
    BITOREQUAL      shift and go to state 133
    BITXOREQUAL     shift and go to state 135
    LSHIFTEQUAL     shift and go to state 137
    RSHIFTEQUAL     shift and go to state 128

    assignment-operator            shift and go to state 129

state 147

    (52) equality-expression -> relational-expression .
    (56) relational-expression -> relational-expression . LT shift-expression
    (57) relational-expression -> relational-expression . GT shift-expression
    (58) relational-expression -> relational-expression . LE shift-expression
    (59) relational-expression -> relational-expression . GE shift-expression

    EQ              reduce using rule 52 (equality-expression -> relational-expression .)
    NE              reduce using rule 52 (equality-expression -> relational-expression .)
    BITAND          reduce using rule 52 (equality-expression -> relational-expression .)
    BITXOR          reduce using rule 52 (equality-expression -> relational-expression .)
    BITOR           reduce using rule 52 (equality-expression -> relational-expression .)
    LOGAND          reduce using rule 52 (equality-expression -> relational-expression .)
    CONDOP          reduce using rule 52 (equality-expression -> relational-expression .)
    LOGOR           reduce using rule 52 (equality-expression -> relational-expression .)
    COLON           reduce using rule 52 (equality-expression -> relational-expression .)
    CLOSE_PAREN     reduce using rule 52 (equality-expression -> relational-expression .)
    COMMA           reduce using rule 52 (equality-expression -> relational-expression .)
    DELIM           reduce using rule 52 (equality-expression -> relational-expression .)
    CLOSE_BRACKET   reduce using rule 52 (equality-expression -> relational-expression .)
    BLOCK_END       reduce using rule 52 (equality-expression -> relational-expression .)
    LT              shift and go to state 225
    GT              shift and go to state 226
    LE              shift and go to state 223
    GE              shift and go to state 224


state 148

    (209) literal -> DCONST .

    TIMES           reduce using rule 209 (literal -> DCONST .)
    DIV             reduce using rule 209 (literal -> DCONST .)
    MOD             reduce using rule 209 (literal -> DCONST .)
    PLUS            reduce using rule 209 (literal -> DCONST .)
    MINUS           reduce using rule 209 (literal -> DCONST .)
    LSHIFT          reduce using rule 209 (literal -> DCONST .)
    RSHIFT          reduce using rule 209 (literal -> DCONST .)
    LT              reduce using rule 209 (literal -> DCONST .)
    GT              reduce using rule 209 (literal -> DCONST .)
    LE              reduce using rule 209 (literal -> DCONST .)
    GE              reduce using rule 209 (literal -> DCONST .)
    EQ              reduce using rule 209 (literal -> DCONST .)
    NE              reduce using rule 209 (literal -> DCONST .)
    BITAND          reduce using rule 209 (literal -> DCONST .)
    BITXOR          reduce using rule 209 (literal -> DCONST .)
    BITOR           reduce using rule 209 (literal -> DCONST .)
    LOGAND          reduce using rule 209 (literal -> DCONST .)
    CONDOP          reduce using rule 209 (literal -> DCONST .)
    LOGOR           reduce using rule 209 (literal -> DCONST .)
    DELIM           reduce using rule 209 (literal -> DCONST .)
    COMMA           reduce using rule 209 (literal -> DCONST .)
    CLOSE_BRACKET   reduce using rule 209 (literal -> DCONST .)
    CLOSE_PAREN     reduce using rule 209 (literal -> DCONST .)
    BLOCK_END       reduce using rule 209 (literal -> DCONST .)
    COLON           reduce using rule 209 (literal -> DCONST .)


state 149

    (90) object-creation-expression -> NEW . class-type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (11) class-type -> . IDENTIFIER

    IDENTIFIER      shift and go to state 42

    class-type                     shift and go to state 227

state 150

    (60) shift-expression -> additive-expression .
    (64) additive-expression -> additive-expression . PLUS multiplicative-expression
    (65) additive-expression -> additive-expression . MINUS multiplicative-expression

    LSHIFT          reduce using rule 60 (shift-expression -> additive-expression .)
    RSHIFT          reduce using rule 60 (shift-expression -> additive-expression .)
    LT              reduce using rule 60 (shift-expression -> additive-expression .)
    GT              reduce using rule 60 (shift-expression -> additive-expression .)
    LE              reduce using rule 60 (shift-expression -> additive-expression .)
    GE              reduce using rule 60 (shift-expression -> additive-expression .)
    EQ              reduce using rule 60 (shift-expression -> additive-expression .)
    NE              reduce using rule 60 (shift-expression -> additive-expression .)
    BITAND          reduce using rule 60 (shift-expression -> additive-expression .)
    BITXOR          reduce using rule 60 (shift-expression -> additive-expression .)
    BITOR           reduce using rule 60 (shift-expression -> additive-expression .)
    LOGAND          reduce using rule 60 (shift-expression -> additive-expression .)
    CONDOP          reduce using rule 60 (shift-expression -> additive-expression .)
    LOGOR           reduce using rule 60 (shift-expression -> additive-expression .)
    DELIM           reduce using rule 60 (shift-expression -> additive-expression .)
    COMMA           reduce using rule 60 (shift-expression -> additive-expression .)
    CLOSE_PAREN     reduce using rule 60 (shift-expression -> additive-expression .)
    CLOSE_BRACKET   reduce using rule 60 (shift-expression -> additive-expression .)
    BLOCK_END       reduce using rule 60 (shift-expression -> additive-expression .)
    COLON           reduce using rule 60 (shift-expression -> additive-expression .)
    PLUS            shift and go to state 228
    MINUS           shift and go to state 229


state 151

    (72) unary-expression -> MINUS . unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . primary-no-array-creation-expression
    (83) primary-no-array-creation-expression -> . literal
    (84) primary-no-array-creation-expression -> . IDENTIFIER
    (85) primary-no-array-creation-expression -> . element-access
    (86) primary-no-array-creation-expression -> . parenthesized-expression
    (87) primary-no-array-creation-expression -> . member-access
    (88) primary-no-array-creation-expression -> . invocation-expression
    (89) primary-no-array-creation-expression -> . object-creation-expression
    (208) literal -> . ICONST
    (209) literal -> . DCONST
    (210) literal -> . TRUE
    (211) literal -> . FALSE
    (212) literal -> . CCONST
    (213) literal -> . SCONST
    (97) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (98) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (91) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (92) member-access -> . IDENTIFIER DOT IDENTIFIER
    (93) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (90) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 160
    MINUS           shift and go to state 151
    BITNOT          shift and go to state 174
    BITCOMP         shift and go to state 155
    IDENTIFIER      shift and go to state 233
    ICONST          shift and go to state 164
    DCONST          shift and go to state 148
    TRUE            shift and go to state 168
    FALSE           shift and go to state 166
    CCONST          shift and go to state 175
    SCONST          shift and go to state 154
    OPEN_PAREN      shift and go to state 157
    NEW             shift and go to state 149

    primary-no-array-creation-expression shift and go to state 171
    member-access                  shift and go to state 230
    unary-expression               shift and go to state 231
    element-access                 shift and go to state 232
    literal                        shift and go to state 163
    object-creation-expression     shift and go to state 165
    primary-expression             shift and go to state 176
    invocation-expression          shift and go to state 177
    parenthesized-expression       shift and go to state 179

state 152

    (44) conditional-and-expression -> inclusive-or-expression .
    (47) inclusive-or-expression -> inclusive-or-expression . BITOR exclusive-or-expression

    LOGAND          reduce using rule 44 (conditional-and-expression -> inclusive-or-expression .)
    CONDOP          reduce using rule 44 (conditional-and-expression -> inclusive-or-expression .)
    LOGOR           reduce using rule 44 (conditional-and-expression -> inclusive-or-expression .)
    CLOSE_PAREN     reduce using rule 44 (conditional-and-expression -> inclusive-or-expression .)
    CLOSE_BRACKET   reduce using rule 44 (conditional-and-expression -> inclusive-or-expression .)
    COMMA           reduce using rule 44 (conditional-and-expression -> inclusive-or-expression .)
    DELIM           reduce using rule 44 (conditional-and-expression -> inclusive-or-expression .)
    BLOCK_END       reduce using rule 44 (conditional-and-expression -> inclusive-or-expression .)
    COLON           reduce using rule 44 (conditional-and-expression -> inclusive-or-expression .)
    BITOR           shift and go to state 234


state 153

    (203) return-statement -> RETURN DELIM .

    IDENTIFIER      reduce using rule 203 (return-statement -> RETURN DELIM .)
    BLOCK_BEGIN     reduce using rule 203 (return-statement -> RETURN DELIM .)
    DELIM           reduce using rule 203 (return-statement -> RETURN DELIM .)
    CONSOLE         reduce using rule 203 (return-statement -> RETURN DELIM .)
    CONST           reduce using rule 203 (return-statement -> RETURN DELIM .)
    IF              reduce using rule 203 (return-statement -> RETURN DELIM .)
    SWITCH          reduce using rule 203 (return-statement -> RETURN DELIM .)
    WHILE           reduce using rule 203 (return-statement -> RETURN DELIM .)
    FOR             reduce using rule 203 (return-statement -> RETURN DELIM .)
    DO              reduce using rule 203 (return-statement -> RETURN DELIM .)
    BREAK           reduce using rule 203 (return-statement -> RETURN DELIM .)
    CONTINUE        reduce using rule 203 (return-statement -> RETURN DELIM .)
    GOTO            reduce using rule 203 (return-statement -> RETURN DELIM .)
    RETURN          reduce using rule 203 (return-statement -> RETURN DELIM .)
    VOID            reduce using rule 203 (return-statement -> RETURN DELIM .)
    BOOL            reduce using rule 203 (return-statement -> RETURN DELIM .)
    INT             reduce using rule 203 (return-statement -> RETURN DELIM .)
    UINT            reduce using rule 203 (return-statement -> RETURN DELIM .)
    CHAR            reduce using rule 203 (return-statement -> RETURN DELIM .)
    DOUBLE          reduce using rule 203 (return-statement -> RETURN DELIM .)
    STRING          reduce using rule 203 (return-statement -> RETURN DELIM .)
    BLOCK_END       reduce using rule 203 (return-statement -> RETURN DELIM .)
    CASE            reduce using rule 203 (return-statement -> RETURN DELIM .)
    DEFAULT         reduce using rule 203 (return-statement -> RETURN DELIM .)


state 154

    (213) literal -> SCONST .

    TIMES           reduce using rule 213 (literal -> SCONST .)
    DIV             reduce using rule 213 (literal -> SCONST .)
    MOD             reduce using rule 213 (literal -> SCONST .)
    PLUS            reduce using rule 213 (literal -> SCONST .)
    MINUS           reduce using rule 213 (literal -> SCONST .)
    LSHIFT          reduce using rule 213 (literal -> SCONST .)
    RSHIFT          reduce using rule 213 (literal -> SCONST .)
    LT              reduce using rule 213 (literal -> SCONST .)
    GT              reduce using rule 213 (literal -> SCONST .)
    LE              reduce using rule 213 (literal -> SCONST .)
    GE              reduce using rule 213 (literal -> SCONST .)
    EQ              reduce using rule 213 (literal -> SCONST .)
    NE              reduce using rule 213 (literal -> SCONST .)
    BITAND          reduce using rule 213 (literal -> SCONST .)
    BITXOR          reduce using rule 213 (literal -> SCONST .)
    BITOR           reduce using rule 213 (literal -> SCONST .)
    LOGAND          reduce using rule 213 (literal -> SCONST .)
    CONDOP          reduce using rule 213 (literal -> SCONST .)
    LOGOR           reduce using rule 213 (literal -> SCONST .)
    DELIM           reduce using rule 213 (literal -> SCONST .)
    COMMA           reduce using rule 213 (literal -> SCONST .)
    CLOSE_BRACKET   reduce using rule 213 (literal -> SCONST .)
    CLOSE_PAREN     reduce using rule 213 (literal -> SCONST .)
    BLOCK_END       reduce using rule 213 (literal -> SCONST .)
    COLON           reduce using rule 213 (literal -> SCONST .)


state 155

    (74) unary-expression -> BITCOMP . unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . primary-no-array-creation-expression
    (83) primary-no-array-creation-expression -> . literal
    (84) primary-no-array-creation-expression -> . IDENTIFIER
    (85) primary-no-array-creation-expression -> . element-access
    (86) primary-no-array-creation-expression -> . parenthesized-expression
    (87) primary-no-array-creation-expression -> . member-access
    (88) primary-no-array-creation-expression -> . invocation-expression
    (89) primary-no-array-creation-expression -> . object-creation-expression
    (208) literal -> . ICONST
    (209) literal -> . DCONST
    (210) literal -> . TRUE
    (211) literal -> . FALSE
    (212) literal -> . CCONST
    (213) literal -> . SCONST
    (97) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (98) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (91) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (92) member-access -> . IDENTIFIER DOT IDENTIFIER
    (93) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (90) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 160
    MINUS           shift and go to state 151
    BITNOT          shift and go to state 174
    BITCOMP         shift and go to state 155
    IDENTIFIER      shift and go to state 233
    ICONST          shift and go to state 164
    DCONST          shift and go to state 148
    TRUE            shift and go to state 168
    FALSE           shift and go to state 166
    CCONST          shift and go to state 175
    SCONST          shift and go to state 154
    OPEN_PAREN      shift and go to state 157
    NEW             shift and go to state 149

    primary-no-array-creation-expression shift and go to state 171
    member-access                  shift and go to state 230
    unary-expression               shift and go to state 235
    element-access                 shift and go to state 232
    literal                        shift and go to state 163
    object-creation-expression     shift and go to state 165
    primary-expression             shift and go to state 176
    invocation-expression          shift and go to state 177
    parenthesized-expression       shift and go to state 179

state 156

    (101) assignment -> element-access . assignment-operator expression
    (85) primary-no-array-creation-expression -> element-access .
    (102) assignment-operator -> . ASSIGN
    (103) assignment-operator -> . PLUSEQUAL
    (104) assignment-operator -> . MINUSEQUAL
    (105) assignment-operator -> . TIMESEQUAL
    (106) assignment-operator -> . DIVEQUAL
    (107) assignment-operator -> . MODEQUAL
    (108) assignment-operator -> . BITANDEQUAL
    (109) assignment-operator -> . BITOREQUAL
    (110) assignment-operator -> . BITXOREQUAL
    (111) assignment-operator -> . LSHIFTEQUAL
    (112) assignment-operator -> . RSHIFTEQUAL

    TIMES           reduce using rule 85 (primary-no-array-creation-expression -> element-access .)
    DIV             reduce using rule 85 (primary-no-array-creation-expression -> element-access .)
    MOD             reduce using rule 85 (primary-no-array-creation-expression -> element-access .)
    PLUS            reduce using rule 85 (primary-no-array-creation-expression -> element-access .)
    MINUS           reduce using rule 85 (primary-no-array-creation-expression -> element-access .)
    LSHIFT          reduce using rule 85 (primary-no-array-creation-expression -> element-access .)
    RSHIFT          reduce using rule 85 (primary-no-array-creation-expression -> element-access .)
    LT              reduce using rule 85 (primary-no-array-creation-expression -> element-access .)
    GT              reduce using rule 85 (primary-no-array-creation-expression -> element-access .)
    LE              reduce using rule 85 (primary-no-array-creation-expression -> element-access .)
    GE              reduce using rule 85 (primary-no-array-creation-expression -> element-access .)
    EQ              reduce using rule 85 (primary-no-array-creation-expression -> element-access .)
    NE              reduce using rule 85 (primary-no-array-creation-expression -> element-access .)
    BITAND          reduce using rule 85 (primary-no-array-creation-expression -> element-access .)
    BITXOR          reduce using rule 85 (primary-no-array-creation-expression -> element-access .)
    BITOR           reduce using rule 85 (primary-no-array-creation-expression -> element-access .)
    LOGAND          reduce using rule 85 (primary-no-array-creation-expression -> element-access .)
    CONDOP          reduce using rule 85 (primary-no-array-creation-expression -> element-access .)
    LOGOR           reduce using rule 85 (primary-no-array-creation-expression -> element-access .)
    DELIM           reduce using rule 85 (primary-no-array-creation-expression -> element-access .)
    COMMA           reduce using rule 85 (primary-no-array-creation-expression -> element-access .)
    CLOSE_BRACKET   reduce using rule 85 (primary-no-array-creation-expression -> element-access .)
    CLOSE_PAREN     reduce using rule 85 (primary-no-array-creation-expression -> element-access .)
    BLOCK_END       reduce using rule 85 (primary-no-array-creation-expression -> element-access .)
    COLON           reduce using rule 85 (primary-no-array-creation-expression -> element-access .)
    ASSIGN          shift and go to state 138
    PLUSEQUAL       shift and go to state 134
    MINUSEQUAL      shift and go to state 131
    TIMESEQUAL      shift and go to state 130
    DIVEQUAL        shift and go to state 127
    MODEQUAL        shift and go to state 139
    BITANDEQUAL     shift and go to state 136
    BITOREQUAL      shift and go to state 133
    BITXOREQUAL     shift and go to state 135
    LSHIFTEQUAL     shift and go to state 137
    RSHIFTEQUAL     shift and go to state 128

    assignment-operator            shift and go to state 180

state 157

    (91) parenthesized-expression -> OPEN_PAREN . expression CLOSE_PAREN
    (36) expression -> . conditional-expression
    (37) expression -> . assignment
    (38) conditional-expression -> . conditional-or-expression
    (39) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (99) assignment -> . IDENTIFIER assignment-operator expression
    (100) assignment -> . member-access assignment-operator expression
    (101) assignment -> . element-access assignment-operator expression
    (40) conditional-or-expression -> . conditional-and-expression
    (41) conditional-or-expression -> . conditional-or-expression M_or LOGOR conditional-and-expression
    (92) member-access -> . IDENTIFIER DOT IDENTIFIER
    (97) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (98) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression M_and LOGAND inclusive-or-expression
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . primary-no-array-creation-expression
    (83) primary-no-array-creation-expression -> . literal
    (84) primary-no-array-creation-expression -> . IDENTIFIER
    (85) primary-no-array-creation-expression -> . element-access
    (86) primary-no-array-creation-expression -> . parenthesized-expression
    (87) primary-no-array-creation-expression -> . member-access
    (88) primary-no-array-creation-expression -> . invocation-expression
    (89) primary-no-array-creation-expression -> . object-creation-expression
    (208) literal -> . ICONST
    (209) literal -> . DCONST
    (210) literal -> . TRUE
    (211) literal -> . FALSE
    (212) literal -> . CCONST
    (213) literal -> . SCONST
    (91) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (93) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (90) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 161
    PLUS            shift and go to state 160
    MINUS           shift and go to state 151
    BITNOT          shift and go to state 174
    BITCOMP         shift and go to state 155
    ICONST          shift and go to state 164
    DCONST          shift and go to state 148
    TRUE            shift and go to state 168
    FALSE           shift and go to state 166
    CCONST          shift and go to state 175
    SCONST          shift and go to state 154
    OPEN_PAREN      shift and go to state 157
    NEW             shift and go to state 149

    exclusive-or-expression        shift and go to state 145
    member-access                  shift and go to state 146
    relational-expression          shift and go to state 147
    additive-expression            shift and go to state 150
    inclusive-or-expression        shift and go to state 152
    unary-expression               shift and go to state 144
    element-access                 shift and go to state 156
    literal                        shift and go to state 163
    conditional-expression         shift and go to state 158
    conditional-and-expression     shift and go to state 162
    assignment                     shift and go to state 159
    primary-no-array-creation-expression shift and go to state 171
    object-creation-expression     shift and go to state 165
    equality-expression            shift and go to state 167
    shift-expression               shift and go to state 169
    and-expression                 shift and go to state 170
    multiplicative-expression      shift and go to state 172
    conditional-or-expression      shift and go to state 173
    primary-expression             shift and go to state 176
    invocation-expression          shift and go to state 177
    expression                     shift and go to state 236
    parenthesized-expression       shift and go to state 179

state 158

    (36) expression -> conditional-expression .

    DELIM           reduce using rule 36 (expression -> conditional-expression .)
    COMMA           reduce using rule 36 (expression -> conditional-expression .)
    CLOSE_PAREN     reduce using rule 36 (expression -> conditional-expression .)
    BLOCK_END       reduce using rule 36 (expression -> conditional-expression .)
    CLOSE_BRACKET   reduce using rule 36 (expression -> conditional-expression .)
    COLON           reduce using rule 36 (expression -> conditional-expression .)


state 159

    (37) expression -> assignment .

    DELIM           reduce using rule 37 (expression -> assignment .)
    COMMA           reduce using rule 37 (expression -> assignment .)
    CLOSE_PAREN     reduce using rule 37 (expression -> assignment .)
    BLOCK_END       reduce using rule 37 (expression -> assignment .)
    CLOSE_BRACKET   reduce using rule 37 (expression -> assignment .)
    COLON           reduce using rule 37 (expression -> assignment .)


state 160

    (71) unary-expression -> PLUS . unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . primary-no-array-creation-expression
    (83) primary-no-array-creation-expression -> . literal
    (84) primary-no-array-creation-expression -> . IDENTIFIER
    (85) primary-no-array-creation-expression -> . element-access
    (86) primary-no-array-creation-expression -> . parenthesized-expression
    (87) primary-no-array-creation-expression -> . member-access
    (88) primary-no-array-creation-expression -> . invocation-expression
    (89) primary-no-array-creation-expression -> . object-creation-expression
    (208) literal -> . ICONST
    (209) literal -> . DCONST
    (210) literal -> . TRUE
    (211) literal -> . FALSE
    (212) literal -> . CCONST
    (213) literal -> . SCONST
    (97) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (98) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (91) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (92) member-access -> . IDENTIFIER DOT IDENTIFIER
    (93) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (90) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 160
    MINUS           shift and go to state 151
    BITNOT          shift and go to state 174
    BITCOMP         shift and go to state 155
    IDENTIFIER      shift and go to state 233
    ICONST          shift and go to state 164
    DCONST          shift and go to state 148
    TRUE            shift and go to state 168
    FALSE           shift and go to state 166
    CCONST          shift and go to state 175
    SCONST          shift and go to state 154
    OPEN_PAREN      shift and go to state 157
    NEW             shift and go to state 149

    primary-no-array-creation-expression shift and go to state 171
    member-access                  shift and go to state 230
    unary-expression               shift and go to state 237
    element-access                 shift and go to state 232
    literal                        shift and go to state 163
    object-creation-expression     shift and go to state 165
    primary-expression             shift and go to state 176
    invocation-expression          shift and go to state 177
    parenthesized-expression       shift and go to state 179

state 161

    (99) assignment -> IDENTIFIER . assignment-operator expression
    (92) member-access -> IDENTIFIER . DOT IDENTIFIER
    (97) element-access -> IDENTIFIER . OPEN_BRACKET expression CLOSE_BRACKET
    (84) primary-no-array-creation-expression -> IDENTIFIER .
    (93) invocation-expression -> IDENTIFIER . OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> IDENTIFIER . DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (102) assignment-operator -> . ASSIGN
    (103) assignment-operator -> . PLUSEQUAL
    (104) assignment-operator -> . MINUSEQUAL
    (105) assignment-operator -> . TIMESEQUAL
    (106) assignment-operator -> . DIVEQUAL
    (107) assignment-operator -> . MODEQUAL
    (108) assignment-operator -> . BITANDEQUAL
    (109) assignment-operator -> . BITOREQUAL
    (110) assignment-operator -> . BITXOREQUAL
    (111) assignment-operator -> . LSHIFTEQUAL
    (112) assignment-operator -> . RSHIFTEQUAL

    DOT             shift and go to state 238
    OPEN_BRACKET    shift and go to state 188
    TIMES           reduce using rule 84 (primary-no-array-creation-expression -> IDENTIFIER .)
    DIV             reduce using rule 84 (primary-no-array-creation-expression -> IDENTIFIER .)
    MOD             reduce using rule 84 (primary-no-array-creation-expression -> IDENTIFIER .)
    PLUS            reduce using rule 84 (primary-no-array-creation-expression -> IDENTIFIER .)
    MINUS           reduce using rule 84 (primary-no-array-creation-expression -> IDENTIFIER .)
    LSHIFT          reduce using rule 84 (primary-no-array-creation-expression -> IDENTIFIER .)
    RSHIFT          reduce using rule 84 (primary-no-array-creation-expression -> IDENTIFIER .)
    LT              reduce using rule 84 (primary-no-array-creation-expression -> IDENTIFIER .)
    GT              reduce using rule 84 (primary-no-array-creation-expression -> IDENTIFIER .)
    LE              reduce using rule 84 (primary-no-array-creation-expression -> IDENTIFIER .)
    GE              reduce using rule 84 (primary-no-array-creation-expression -> IDENTIFIER .)
    EQ              reduce using rule 84 (primary-no-array-creation-expression -> IDENTIFIER .)
    NE              reduce using rule 84 (primary-no-array-creation-expression -> IDENTIFIER .)
    BITAND          reduce using rule 84 (primary-no-array-creation-expression -> IDENTIFIER .)
    BITXOR          reduce using rule 84 (primary-no-array-creation-expression -> IDENTIFIER .)
    BITOR           reduce using rule 84 (primary-no-array-creation-expression -> IDENTIFIER .)
    LOGAND          reduce using rule 84 (primary-no-array-creation-expression -> IDENTIFIER .)
    CONDOP          reduce using rule 84 (primary-no-array-creation-expression -> IDENTIFIER .)
    LOGOR           reduce using rule 84 (primary-no-array-creation-expression -> IDENTIFIER .)
    DELIM           reduce using rule 84 (primary-no-array-creation-expression -> IDENTIFIER .)
    COMMA           reduce using rule 84 (primary-no-array-creation-expression -> IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 84 (primary-no-array-creation-expression -> IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 84 (primary-no-array-creation-expression -> IDENTIFIER .)
    BLOCK_END       reduce using rule 84 (primary-no-array-creation-expression -> IDENTIFIER .)
    COLON           reduce using rule 84 (primary-no-array-creation-expression -> IDENTIFIER .)
    OPEN_PAREN      shift and go to state 189
    ASSIGN          shift and go to state 138
    PLUSEQUAL       shift and go to state 134
    MINUSEQUAL      shift and go to state 131
    TIMESEQUAL      shift and go to state 130
    DIVEQUAL        shift and go to state 127
    MODEQUAL        shift and go to state 139
    BITANDEQUAL     shift and go to state 136
    BITOREQUAL      shift and go to state 133
    BITXOREQUAL     shift and go to state 135
    LSHIFTEQUAL     shift and go to state 137
    RSHIFTEQUAL     shift and go to state 128

    assignment-operator            shift and go to state 191

state 162

    (40) conditional-or-expression -> conditional-and-expression .
    (45) conditional-and-expression -> conditional-and-expression . M_and LOGAND inclusive-or-expression
    (43) M_and -> . empty
    (214) empty -> .

    CONDOP          reduce using rule 40 (conditional-or-expression -> conditional-and-expression .)
    LOGOR           reduce using rule 40 (conditional-or-expression -> conditional-and-expression .)
    COMMA           reduce using rule 40 (conditional-or-expression -> conditional-and-expression .)
    CLOSE_PAREN     reduce using rule 40 (conditional-or-expression -> conditional-and-expression .)
    CLOSE_BRACKET   reduce using rule 40 (conditional-or-expression -> conditional-and-expression .)
    BLOCK_END       reduce using rule 40 (conditional-or-expression -> conditional-and-expression .)
    DELIM           reduce using rule 40 (conditional-or-expression -> conditional-and-expression .)
    COLON           reduce using rule 40 (conditional-or-expression -> conditional-and-expression .)
    LOGAND          reduce using rule 214 (empty -> .)

    empty                          shift and go to state 239
    M_and                          shift and go to state 240

state 163

    (83) primary-no-array-creation-expression -> literal .

    TIMES           reduce using rule 83 (primary-no-array-creation-expression -> literal .)
    DIV             reduce using rule 83 (primary-no-array-creation-expression -> literal .)
    MOD             reduce using rule 83 (primary-no-array-creation-expression -> literal .)
    PLUS            reduce using rule 83 (primary-no-array-creation-expression -> literal .)
    MINUS           reduce using rule 83 (primary-no-array-creation-expression -> literal .)
    LSHIFT          reduce using rule 83 (primary-no-array-creation-expression -> literal .)
    RSHIFT          reduce using rule 83 (primary-no-array-creation-expression -> literal .)
    LT              reduce using rule 83 (primary-no-array-creation-expression -> literal .)
    GT              reduce using rule 83 (primary-no-array-creation-expression -> literal .)
    LE              reduce using rule 83 (primary-no-array-creation-expression -> literal .)
    GE              reduce using rule 83 (primary-no-array-creation-expression -> literal .)
    EQ              reduce using rule 83 (primary-no-array-creation-expression -> literal .)
    NE              reduce using rule 83 (primary-no-array-creation-expression -> literal .)
    BITAND          reduce using rule 83 (primary-no-array-creation-expression -> literal .)
    BITXOR          reduce using rule 83 (primary-no-array-creation-expression -> literal .)
    BITOR           reduce using rule 83 (primary-no-array-creation-expression -> literal .)
    LOGAND          reduce using rule 83 (primary-no-array-creation-expression -> literal .)
    CONDOP          reduce using rule 83 (primary-no-array-creation-expression -> literal .)
    LOGOR           reduce using rule 83 (primary-no-array-creation-expression -> literal .)
    DELIM           reduce using rule 83 (primary-no-array-creation-expression -> literal .)
    COMMA           reduce using rule 83 (primary-no-array-creation-expression -> literal .)
    CLOSE_BRACKET   reduce using rule 83 (primary-no-array-creation-expression -> literal .)
    CLOSE_PAREN     reduce using rule 83 (primary-no-array-creation-expression -> literal .)
    BLOCK_END       reduce using rule 83 (primary-no-array-creation-expression -> literal .)
    COLON           reduce using rule 83 (primary-no-array-creation-expression -> literal .)


state 164

    (208) literal -> ICONST .

    TIMES           reduce using rule 208 (literal -> ICONST .)
    DIV             reduce using rule 208 (literal -> ICONST .)
    MOD             reduce using rule 208 (literal -> ICONST .)
    PLUS            reduce using rule 208 (literal -> ICONST .)
    MINUS           reduce using rule 208 (literal -> ICONST .)
    LSHIFT          reduce using rule 208 (literal -> ICONST .)
    RSHIFT          reduce using rule 208 (literal -> ICONST .)
    LT              reduce using rule 208 (literal -> ICONST .)
    GT              reduce using rule 208 (literal -> ICONST .)
    LE              reduce using rule 208 (literal -> ICONST .)
    GE              reduce using rule 208 (literal -> ICONST .)
    EQ              reduce using rule 208 (literal -> ICONST .)
    NE              reduce using rule 208 (literal -> ICONST .)
    BITAND          reduce using rule 208 (literal -> ICONST .)
    BITXOR          reduce using rule 208 (literal -> ICONST .)
    BITOR           reduce using rule 208 (literal -> ICONST .)
    LOGAND          reduce using rule 208 (literal -> ICONST .)
    CONDOP          reduce using rule 208 (literal -> ICONST .)
    LOGOR           reduce using rule 208 (literal -> ICONST .)
    DELIM           reduce using rule 208 (literal -> ICONST .)
    COMMA           reduce using rule 208 (literal -> ICONST .)
    CLOSE_BRACKET   reduce using rule 208 (literal -> ICONST .)
    CLOSE_PAREN     reduce using rule 208 (literal -> ICONST .)
    BLOCK_END       reduce using rule 208 (literal -> ICONST .)
    COLON           reduce using rule 208 (literal -> ICONST .)


state 165

    (89) primary-no-array-creation-expression -> object-creation-expression .

    TIMES           reduce using rule 89 (primary-no-array-creation-expression -> object-creation-expression .)
    DIV             reduce using rule 89 (primary-no-array-creation-expression -> object-creation-expression .)
    MOD             reduce using rule 89 (primary-no-array-creation-expression -> object-creation-expression .)
    PLUS            reduce using rule 89 (primary-no-array-creation-expression -> object-creation-expression .)
    MINUS           reduce using rule 89 (primary-no-array-creation-expression -> object-creation-expression .)
    LSHIFT          reduce using rule 89 (primary-no-array-creation-expression -> object-creation-expression .)
    RSHIFT          reduce using rule 89 (primary-no-array-creation-expression -> object-creation-expression .)
    LT              reduce using rule 89 (primary-no-array-creation-expression -> object-creation-expression .)
    GT              reduce using rule 89 (primary-no-array-creation-expression -> object-creation-expression .)
    LE              reduce using rule 89 (primary-no-array-creation-expression -> object-creation-expression .)
    GE              reduce using rule 89 (primary-no-array-creation-expression -> object-creation-expression .)
    EQ              reduce using rule 89 (primary-no-array-creation-expression -> object-creation-expression .)
    NE              reduce using rule 89 (primary-no-array-creation-expression -> object-creation-expression .)
    BITAND          reduce using rule 89 (primary-no-array-creation-expression -> object-creation-expression .)
    BITXOR          reduce using rule 89 (primary-no-array-creation-expression -> object-creation-expression .)
    BITOR           reduce using rule 89 (primary-no-array-creation-expression -> object-creation-expression .)
    LOGAND          reduce using rule 89 (primary-no-array-creation-expression -> object-creation-expression .)
    CONDOP          reduce using rule 89 (primary-no-array-creation-expression -> object-creation-expression .)
    LOGOR           reduce using rule 89 (primary-no-array-creation-expression -> object-creation-expression .)
    DELIM           reduce using rule 89 (primary-no-array-creation-expression -> object-creation-expression .)
    COMMA           reduce using rule 89 (primary-no-array-creation-expression -> object-creation-expression .)
    CLOSE_BRACKET   reduce using rule 89 (primary-no-array-creation-expression -> object-creation-expression .)
    CLOSE_PAREN     reduce using rule 89 (primary-no-array-creation-expression -> object-creation-expression .)
    BLOCK_END       reduce using rule 89 (primary-no-array-creation-expression -> object-creation-expression .)
    COLON           reduce using rule 89 (primary-no-array-creation-expression -> object-creation-expression .)


state 166

    (211) literal -> FALSE .

    TIMES           reduce using rule 211 (literal -> FALSE .)
    DIV             reduce using rule 211 (literal -> FALSE .)
    MOD             reduce using rule 211 (literal -> FALSE .)
    PLUS            reduce using rule 211 (literal -> FALSE .)
    MINUS           reduce using rule 211 (literal -> FALSE .)
    LSHIFT          reduce using rule 211 (literal -> FALSE .)
    RSHIFT          reduce using rule 211 (literal -> FALSE .)
    LT              reduce using rule 211 (literal -> FALSE .)
    GT              reduce using rule 211 (literal -> FALSE .)
    LE              reduce using rule 211 (literal -> FALSE .)
    GE              reduce using rule 211 (literal -> FALSE .)
    EQ              reduce using rule 211 (literal -> FALSE .)
    NE              reduce using rule 211 (literal -> FALSE .)
    BITAND          reduce using rule 211 (literal -> FALSE .)
    BITXOR          reduce using rule 211 (literal -> FALSE .)
    BITOR           reduce using rule 211 (literal -> FALSE .)
    LOGAND          reduce using rule 211 (literal -> FALSE .)
    CONDOP          reduce using rule 211 (literal -> FALSE .)
    LOGOR           reduce using rule 211 (literal -> FALSE .)
    DELIM           reduce using rule 211 (literal -> FALSE .)
    COMMA           reduce using rule 211 (literal -> FALSE .)
    CLOSE_BRACKET   reduce using rule 211 (literal -> FALSE .)
    CLOSE_PAREN     reduce using rule 211 (literal -> FALSE .)
    BLOCK_END       reduce using rule 211 (literal -> FALSE .)
    COLON           reduce using rule 211 (literal -> FALSE .)


state 167

    (50) and-expression -> equality-expression .
    (53) equality-expression -> equality-expression . EQ relational-expression
    (54) equality-expression -> equality-expression . NE relational-expression

    BITAND          reduce using rule 50 (and-expression -> equality-expression .)
    BITXOR          reduce using rule 50 (and-expression -> equality-expression .)
    BITOR           reduce using rule 50 (and-expression -> equality-expression .)
    LOGAND          reduce using rule 50 (and-expression -> equality-expression .)
    CONDOP          reduce using rule 50 (and-expression -> equality-expression .)
    LOGOR           reduce using rule 50 (and-expression -> equality-expression .)
    COLON           reduce using rule 50 (and-expression -> equality-expression .)
    COMMA           reduce using rule 50 (and-expression -> equality-expression .)
    CLOSE_PAREN     reduce using rule 50 (and-expression -> equality-expression .)
    DELIM           reduce using rule 50 (and-expression -> equality-expression .)
    CLOSE_BRACKET   reduce using rule 50 (and-expression -> equality-expression .)
    BLOCK_END       reduce using rule 50 (and-expression -> equality-expression .)
    EQ              shift and go to state 241
    NE              shift and go to state 242


state 168

    (210) literal -> TRUE .

    TIMES           reduce using rule 210 (literal -> TRUE .)
    DIV             reduce using rule 210 (literal -> TRUE .)
    MOD             reduce using rule 210 (literal -> TRUE .)
    PLUS            reduce using rule 210 (literal -> TRUE .)
    MINUS           reduce using rule 210 (literal -> TRUE .)
    LSHIFT          reduce using rule 210 (literal -> TRUE .)
    RSHIFT          reduce using rule 210 (literal -> TRUE .)
    LT              reduce using rule 210 (literal -> TRUE .)
    GT              reduce using rule 210 (literal -> TRUE .)
    LE              reduce using rule 210 (literal -> TRUE .)
    GE              reduce using rule 210 (literal -> TRUE .)
    EQ              reduce using rule 210 (literal -> TRUE .)
    NE              reduce using rule 210 (literal -> TRUE .)
    BITAND          reduce using rule 210 (literal -> TRUE .)
    BITXOR          reduce using rule 210 (literal -> TRUE .)
    BITOR           reduce using rule 210 (literal -> TRUE .)
    LOGAND          reduce using rule 210 (literal -> TRUE .)
    CONDOP          reduce using rule 210 (literal -> TRUE .)
    LOGOR           reduce using rule 210 (literal -> TRUE .)
    DELIM           reduce using rule 210 (literal -> TRUE .)
    COMMA           reduce using rule 210 (literal -> TRUE .)
    CLOSE_BRACKET   reduce using rule 210 (literal -> TRUE .)
    CLOSE_PAREN     reduce using rule 210 (literal -> TRUE .)
    BLOCK_END       reduce using rule 210 (literal -> TRUE .)
    COLON           reduce using rule 210 (literal -> TRUE .)


state 169

    (55) relational-expression -> shift-expression .
    (61) shift-expression -> shift-expression . LSHIFT additive-expression
    (62) shift-expression -> shift-expression . RSHIFT additive-expression

    LT              reduce using rule 55 (relational-expression -> shift-expression .)
    GT              reduce using rule 55 (relational-expression -> shift-expression .)
    LE              reduce using rule 55 (relational-expression -> shift-expression .)
    GE              reduce using rule 55 (relational-expression -> shift-expression .)
    EQ              reduce using rule 55 (relational-expression -> shift-expression .)
    NE              reduce using rule 55 (relational-expression -> shift-expression .)
    BITAND          reduce using rule 55 (relational-expression -> shift-expression .)
    BITXOR          reduce using rule 55 (relational-expression -> shift-expression .)
    BITOR           reduce using rule 55 (relational-expression -> shift-expression .)
    LOGAND          reduce using rule 55 (relational-expression -> shift-expression .)
    CONDOP          reduce using rule 55 (relational-expression -> shift-expression .)
    LOGOR           reduce using rule 55 (relational-expression -> shift-expression .)
    DELIM           reduce using rule 55 (relational-expression -> shift-expression .)
    COMMA           reduce using rule 55 (relational-expression -> shift-expression .)
    CLOSE_BRACKET   reduce using rule 55 (relational-expression -> shift-expression .)
    CLOSE_PAREN     reduce using rule 55 (relational-expression -> shift-expression .)
    BLOCK_END       reduce using rule 55 (relational-expression -> shift-expression .)
    COLON           reduce using rule 55 (relational-expression -> shift-expression .)
    LSHIFT          shift and go to state 244
    RSHIFT          shift and go to state 243


state 170

    (48) exclusive-or-expression -> and-expression .
    (51) and-expression -> and-expression . BITAND equality-expression

    BITXOR          reduce using rule 48 (exclusive-or-expression -> and-expression .)
    BITOR           reduce using rule 48 (exclusive-or-expression -> and-expression .)
    LOGAND          reduce using rule 48 (exclusive-or-expression -> and-expression .)
    CONDOP          reduce using rule 48 (exclusive-or-expression -> and-expression .)
    LOGOR           reduce using rule 48 (exclusive-or-expression -> and-expression .)
    CLOSE_BRACKET   reduce using rule 48 (exclusive-or-expression -> and-expression .)
    CLOSE_PAREN     reduce using rule 48 (exclusive-or-expression -> and-expression .)
    DELIM           reduce using rule 48 (exclusive-or-expression -> and-expression .)
    COMMA           reduce using rule 48 (exclusive-or-expression -> and-expression .)
    BLOCK_END       reduce using rule 48 (exclusive-or-expression -> and-expression .)
    COLON           reduce using rule 48 (exclusive-or-expression -> and-expression .)
    BITAND          shift and go to state 245


state 171

    (75) primary-expression -> primary-no-array-creation-expression .

    TIMES           reduce using rule 75 (primary-expression -> primary-no-array-creation-expression .)
    DIV             reduce using rule 75 (primary-expression -> primary-no-array-creation-expression .)
    MOD             reduce using rule 75 (primary-expression -> primary-no-array-creation-expression .)
    PLUS            reduce using rule 75 (primary-expression -> primary-no-array-creation-expression .)
    MINUS           reduce using rule 75 (primary-expression -> primary-no-array-creation-expression .)
    LSHIFT          reduce using rule 75 (primary-expression -> primary-no-array-creation-expression .)
    RSHIFT          reduce using rule 75 (primary-expression -> primary-no-array-creation-expression .)
    LT              reduce using rule 75 (primary-expression -> primary-no-array-creation-expression .)
    GT              reduce using rule 75 (primary-expression -> primary-no-array-creation-expression .)
    LE              reduce using rule 75 (primary-expression -> primary-no-array-creation-expression .)
    GE              reduce using rule 75 (primary-expression -> primary-no-array-creation-expression .)
    EQ              reduce using rule 75 (primary-expression -> primary-no-array-creation-expression .)
    NE              reduce using rule 75 (primary-expression -> primary-no-array-creation-expression .)
    BITAND          reduce using rule 75 (primary-expression -> primary-no-array-creation-expression .)
    BITXOR          reduce using rule 75 (primary-expression -> primary-no-array-creation-expression .)
    BITOR           reduce using rule 75 (primary-expression -> primary-no-array-creation-expression .)
    LOGAND          reduce using rule 75 (primary-expression -> primary-no-array-creation-expression .)
    CONDOP          reduce using rule 75 (primary-expression -> primary-no-array-creation-expression .)
    LOGOR           reduce using rule 75 (primary-expression -> primary-no-array-creation-expression .)
    DELIM           reduce using rule 75 (primary-expression -> primary-no-array-creation-expression .)
    COMMA           reduce using rule 75 (primary-expression -> primary-no-array-creation-expression .)
    CLOSE_BRACKET   reduce using rule 75 (primary-expression -> primary-no-array-creation-expression .)
    CLOSE_PAREN     reduce using rule 75 (primary-expression -> primary-no-array-creation-expression .)
    BLOCK_END       reduce using rule 75 (primary-expression -> primary-no-array-creation-expression .)
    COLON           reduce using rule 75 (primary-expression -> primary-no-array-creation-expression .)


state 172

    (63) additive-expression -> multiplicative-expression .
    (67) multiplicative-expression -> multiplicative-expression . TIMES unary-expression
    (68) multiplicative-expression -> multiplicative-expression . DIV unary-expression
    (69) multiplicative-expression -> multiplicative-expression . MOD unary-expression

    PLUS            reduce using rule 63 (additive-expression -> multiplicative-expression .)
    MINUS           reduce using rule 63 (additive-expression -> multiplicative-expression .)
    LSHIFT          reduce using rule 63 (additive-expression -> multiplicative-expression .)
    RSHIFT          reduce using rule 63 (additive-expression -> multiplicative-expression .)
    LT              reduce using rule 63 (additive-expression -> multiplicative-expression .)
    GT              reduce using rule 63 (additive-expression -> multiplicative-expression .)
    LE              reduce using rule 63 (additive-expression -> multiplicative-expression .)
    GE              reduce using rule 63 (additive-expression -> multiplicative-expression .)
    EQ              reduce using rule 63 (additive-expression -> multiplicative-expression .)
    NE              reduce using rule 63 (additive-expression -> multiplicative-expression .)
    BITAND          reduce using rule 63 (additive-expression -> multiplicative-expression .)
    BITXOR          reduce using rule 63 (additive-expression -> multiplicative-expression .)
    BITOR           reduce using rule 63 (additive-expression -> multiplicative-expression .)
    LOGAND          reduce using rule 63 (additive-expression -> multiplicative-expression .)
    CONDOP          reduce using rule 63 (additive-expression -> multiplicative-expression .)
    LOGOR           reduce using rule 63 (additive-expression -> multiplicative-expression .)
    DELIM           reduce using rule 63 (additive-expression -> multiplicative-expression .)
    COMMA           reduce using rule 63 (additive-expression -> multiplicative-expression .)
    CLOSE_BRACKET   reduce using rule 63 (additive-expression -> multiplicative-expression .)
    CLOSE_PAREN     reduce using rule 63 (additive-expression -> multiplicative-expression .)
    BLOCK_END       reduce using rule 63 (additive-expression -> multiplicative-expression .)
    COLON           reduce using rule 63 (additive-expression -> multiplicative-expression .)
    TIMES           shift and go to state 248
    DIV             shift and go to state 246
    MOD             shift and go to state 247


state 173

    (38) conditional-expression -> conditional-or-expression .
    (39) conditional-expression -> conditional-or-expression . CONDOP expression COLON expression
    (41) conditional-or-expression -> conditional-or-expression . M_or LOGOR conditional-and-expression
    (42) M_or -> . empty
    (214) empty -> .

    DELIM           reduce using rule 38 (conditional-expression -> conditional-or-expression .)
    CLOSE_PAREN     reduce using rule 38 (conditional-expression -> conditional-or-expression .)
    COMMA           reduce using rule 38 (conditional-expression -> conditional-or-expression .)
    CLOSE_BRACKET   reduce using rule 38 (conditional-expression -> conditional-or-expression .)
    BLOCK_END       reduce using rule 38 (conditional-expression -> conditional-or-expression .)
    COLON           reduce using rule 38 (conditional-expression -> conditional-or-expression .)
    CONDOP          shift and go to state 250
    LOGOR           reduce using rule 214 (empty -> .)

    M_or                           shift and go to state 249
    empty                          shift and go to state 251

state 174

    (73) unary-expression -> BITNOT . unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . primary-no-array-creation-expression
    (83) primary-no-array-creation-expression -> . literal
    (84) primary-no-array-creation-expression -> . IDENTIFIER
    (85) primary-no-array-creation-expression -> . element-access
    (86) primary-no-array-creation-expression -> . parenthesized-expression
    (87) primary-no-array-creation-expression -> . member-access
    (88) primary-no-array-creation-expression -> . invocation-expression
    (89) primary-no-array-creation-expression -> . object-creation-expression
    (208) literal -> . ICONST
    (209) literal -> . DCONST
    (210) literal -> . TRUE
    (211) literal -> . FALSE
    (212) literal -> . CCONST
    (213) literal -> . SCONST
    (97) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (98) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (91) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (92) member-access -> . IDENTIFIER DOT IDENTIFIER
    (93) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (90) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 160
    MINUS           shift and go to state 151
    BITNOT          shift and go to state 174
    BITCOMP         shift and go to state 155
    IDENTIFIER      shift and go to state 233
    ICONST          shift and go to state 164
    DCONST          shift and go to state 148
    TRUE            shift and go to state 168
    FALSE           shift and go to state 166
    CCONST          shift and go to state 175
    SCONST          shift and go to state 154
    OPEN_PAREN      shift and go to state 157
    NEW             shift and go to state 149

    primary-no-array-creation-expression shift and go to state 171
    member-access                  shift and go to state 230
    unary-expression               shift and go to state 252
    element-access                 shift and go to state 232
    literal                        shift and go to state 163
    object-creation-expression     shift and go to state 165
    primary-expression             shift and go to state 176
    invocation-expression          shift and go to state 177
    parenthesized-expression       shift and go to state 179

state 175

    (212) literal -> CCONST .

    TIMES           reduce using rule 212 (literal -> CCONST .)
    DIV             reduce using rule 212 (literal -> CCONST .)
    MOD             reduce using rule 212 (literal -> CCONST .)
    PLUS            reduce using rule 212 (literal -> CCONST .)
    MINUS           reduce using rule 212 (literal -> CCONST .)
    LSHIFT          reduce using rule 212 (literal -> CCONST .)
    RSHIFT          reduce using rule 212 (literal -> CCONST .)
    LT              reduce using rule 212 (literal -> CCONST .)
    GT              reduce using rule 212 (literal -> CCONST .)
    LE              reduce using rule 212 (literal -> CCONST .)
    GE              reduce using rule 212 (literal -> CCONST .)
    EQ              reduce using rule 212 (literal -> CCONST .)
    NE              reduce using rule 212 (literal -> CCONST .)
    BITAND          reduce using rule 212 (literal -> CCONST .)
    BITXOR          reduce using rule 212 (literal -> CCONST .)
    BITOR           reduce using rule 212 (literal -> CCONST .)
    LOGAND          reduce using rule 212 (literal -> CCONST .)
    CONDOP          reduce using rule 212 (literal -> CCONST .)
    LOGOR           reduce using rule 212 (literal -> CCONST .)
    DELIM           reduce using rule 212 (literal -> CCONST .)
    COMMA           reduce using rule 212 (literal -> CCONST .)
    CLOSE_BRACKET   reduce using rule 212 (literal -> CCONST .)
    CLOSE_PAREN     reduce using rule 212 (literal -> CCONST .)
    BLOCK_END       reduce using rule 212 (literal -> CCONST .)
    COLON           reduce using rule 212 (literal -> CCONST .)


state 176

    (70) unary-expression -> primary-expression .

    TIMES           reduce using rule 70 (unary-expression -> primary-expression .)
    DIV             reduce using rule 70 (unary-expression -> primary-expression .)
    MOD             reduce using rule 70 (unary-expression -> primary-expression .)
    PLUS            reduce using rule 70 (unary-expression -> primary-expression .)
    MINUS           reduce using rule 70 (unary-expression -> primary-expression .)
    LSHIFT          reduce using rule 70 (unary-expression -> primary-expression .)
    RSHIFT          reduce using rule 70 (unary-expression -> primary-expression .)
    LT              reduce using rule 70 (unary-expression -> primary-expression .)
    GT              reduce using rule 70 (unary-expression -> primary-expression .)
    LE              reduce using rule 70 (unary-expression -> primary-expression .)
    GE              reduce using rule 70 (unary-expression -> primary-expression .)
    EQ              reduce using rule 70 (unary-expression -> primary-expression .)
    NE              reduce using rule 70 (unary-expression -> primary-expression .)
    BITAND          reduce using rule 70 (unary-expression -> primary-expression .)
    BITXOR          reduce using rule 70 (unary-expression -> primary-expression .)
    BITOR           reduce using rule 70 (unary-expression -> primary-expression .)
    LOGAND          reduce using rule 70 (unary-expression -> primary-expression .)
    CONDOP          reduce using rule 70 (unary-expression -> primary-expression .)
    LOGOR           reduce using rule 70 (unary-expression -> primary-expression .)
    DELIM           reduce using rule 70 (unary-expression -> primary-expression .)
    COMMA           reduce using rule 70 (unary-expression -> primary-expression .)
    CLOSE_BRACKET   reduce using rule 70 (unary-expression -> primary-expression .)
    CLOSE_PAREN     reduce using rule 70 (unary-expression -> primary-expression .)
    BLOCK_END       reduce using rule 70 (unary-expression -> primary-expression .)
    COLON           reduce using rule 70 (unary-expression -> primary-expression .)


state 177

    (88) primary-no-array-creation-expression -> invocation-expression .

    TIMES           reduce using rule 88 (primary-no-array-creation-expression -> invocation-expression .)
    DIV             reduce using rule 88 (primary-no-array-creation-expression -> invocation-expression .)
    MOD             reduce using rule 88 (primary-no-array-creation-expression -> invocation-expression .)
    PLUS            reduce using rule 88 (primary-no-array-creation-expression -> invocation-expression .)
    MINUS           reduce using rule 88 (primary-no-array-creation-expression -> invocation-expression .)
    LSHIFT          reduce using rule 88 (primary-no-array-creation-expression -> invocation-expression .)
    RSHIFT          reduce using rule 88 (primary-no-array-creation-expression -> invocation-expression .)
    LT              reduce using rule 88 (primary-no-array-creation-expression -> invocation-expression .)
    GT              reduce using rule 88 (primary-no-array-creation-expression -> invocation-expression .)
    LE              reduce using rule 88 (primary-no-array-creation-expression -> invocation-expression .)
    GE              reduce using rule 88 (primary-no-array-creation-expression -> invocation-expression .)
    EQ              reduce using rule 88 (primary-no-array-creation-expression -> invocation-expression .)
    NE              reduce using rule 88 (primary-no-array-creation-expression -> invocation-expression .)
    BITAND          reduce using rule 88 (primary-no-array-creation-expression -> invocation-expression .)
    BITXOR          reduce using rule 88 (primary-no-array-creation-expression -> invocation-expression .)
    BITOR           reduce using rule 88 (primary-no-array-creation-expression -> invocation-expression .)
    LOGAND          reduce using rule 88 (primary-no-array-creation-expression -> invocation-expression .)
    CONDOP          reduce using rule 88 (primary-no-array-creation-expression -> invocation-expression .)
    LOGOR           reduce using rule 88 (primary-no-array-creation-expression -> invocation-expression .)
    DELIM           reduce using rule 88 (primary-no-array-creation-expression -> invocation-expression .)
    COMMA           reduce using rule 88 (primary-no-array-creation-expression -> invocation-expression .)
    CLOSE_BRACKET   reduce using rule 88 (primary-no-array-creation-expression -> invocation-expression .)
    CLOSE_PAREN     reduce using rule 88 (primary-no-array-creation-expression -> invocation-expression .)
    BLOCK_END       reduce using rule 88 (primary-no-array-creation-expression -> invocation-expression .)
    COLON           reduce using rule 88 (primary-no-array-creation-expression -> invocation-expression .)


state 178

    (202) return-statement -> RETURN expression . DELIM

    DELIM           shift and go to state 253


state 179

    (86) primary-no-array-creation-expression -> parenthesized-expression .

    TIMES           reduce using rule 86 (primary-no-array-creation-expression -> parenthesized-expression .)
    DIV             reduce using rule 86 (primary-no-array-creation-expression -> parenthesized-expression .)
    MOD             reduce using rule 86 (primary-no-array-creation-expression -> parenthesized-expression .)
    PLUS            reduce using rule 86 (primary-no-array-creation-expression -> parenthesized-expression .)
    MINUS           reduce using rule 86 (primary-no-array-creation-expression -> parenthesized-expression .)
    LSHIFT          reduce using rule 86 (primary-no-array-creation-expression -> parenthesized-expression .)
    RSHIFT          reduce using rule 86 (primary-no-array-creation-expression -> parenthesized-expression .)
    LT              reduce using rule 86 (primary-no-array-creation-expression -> parenthesized-expression .)
    GT              reduce using rule 86 (primary-no-array-creation-expression -> parenthesized-expression .)
    LE              reduce using rule 86 (primary-no-array-creation-expression -> parenthesized-expression .)
    GE              reduce using rule 86 (primary-no-array-creation-expression -> parenthesized-expression .)
    EQ              reduce using rule 86 (primary-no-array-creation-expression -> parenthesized-expression .)
    NE              reduce using rule 86 (primary-no-array-creation-expression -> parenthesized-expression .)
    BITAND          reduce using rule 86 (primary-no-array-creation-expression -> parenthesized-expression .)
    BITXOR          reduce using rule 86 (primary-no-array-creation-expression -> parenthesized-expression .)
    BITOR           reduce using rule 86 (primary-no-array-creation-expression -> parenthesized-expression .)
    LOGAND          reduce using rule 86 (primary-no-array-creation-expression -> parenthesized-expression .)
    CONDOP          reduce using rule 86 (primary-no-array-creation-expression -> parenthesized-expression .)
    LOGOR           reduce using rule 86 (primary-no-array-creation-expression -> parenthesized-expression .)
    DELIM           reduce using rule 86 (primary-no-array-creation-expression -> parenthesized-expression .)
    COMMA           reduce using rule 86 (primary-no-array-creation-expression -> parenthesized-expression .)
    CLOSE_BRACKET   reduce using rule 86 (primary-no-array-creation-expression -> parenthesized-expression .)
    CLOSE_PAREN     reduce using rule 86 (primary-no-array-creation-expression -> parenthesized-expression .)
    BLOCK_END       reduce using rule 86 (primary-no-array-creation-expression -> parenthesized-expression .)
    COLON           reduce using rule 86 (primary-no-array-creation-expression -> parenthesized-expression .)


state 180

    (101) assignment -> element-access assignment-operator . expression
    (36) expression -> . conditional-expression
    (37) expression -> . assignment
    (38) conditional-expression -> . conditional-or-expression
    (39) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (99) assignment -> . IDENTIFIER assignment-operator expression
    (100) assignment -> . member-access assignment-operator expression
    (101) assignment -> . element-access assignment-operator expression
    (40) conditional-or-expression -> . conditional-and-expression
    (41) conditional-or-expression -> . conditional-or-expression M_or LOGOR conditional-and-expression
    (92) member-access -> . IDENTIFIER DOT IDENTIFIER
    (97) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (98) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression M_and LOGAND inclusive-or-expression
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . primary-no-array-creation-expression
    (83) primary-no-array-creation-expression -> . literal
    (84) primary-no-array-creation-expression -> . IDENTIFIER
    (85) primary-no-array-creation-expression -> . element-access
    (86) primary-no-array-creation-expression -> . parenthesized-expression
    (87) primary-no-array-creation-expression -> . member-access
    (88) primary-no-array-creation-expression -> . invocation-expression
    (89) primary-no-array-creation-expression -> . object-creation-expression
    (208) literal -> . ICONST
    (209) literal -> . DCONST
    (210) literal -> . TRUE
    (211) literal -> . FALSE
    (212) literal -> . CCONST
    (213) literal -> . SCONST
    (91) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (93) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (90) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 161
    PLUS            shift and go to state 160
    MINUS           shift and go to state 151
    BITNOT          shift and go to state 174
    BITCOMP         shift and go to state 155
    ICONST          shift and go to state 164
    DCONST          shift and go to state 148
    TRUE            shift and go to state 168
    FALSE           shift and go to state 166
    CCONST          shift and go to state 175
    SCONST          shift and go to state 154
    OPEN_PAREN      shift and go to state 157
    NEW             shift and go to state 149

    exclusive-or-expression        shift and go to state 145
    member-access                  shift and go to state 146
    relational-expression          shift and go to state 147
    additive-expression            shift and go to state 150
    inclusive-or-expression        shift and go to state 152
    unary-expression               shift and go to state 144
    element-access                 shift and go to state 156
    literal                        shift and go to state 163
    conditional-expression         shift and go to state 158
    conditional-and-expression     shift and go to state 162
    assignment                     shift and go to state 159
    primary-no-array-creation-expression shift and go to state 171
    object-creation-expression     shift and go to state 165
    equality-expression            shift and go to state 167
    shift-expression               shift and go to state 169
    and-expression                 shift and go to state 170
    multiplicative-expression      shift and go to state 172
    conditional-or-expression      shift and go to state 173
    primary-expression             shift and go to state 176
    invocation-expression          shift and go to state 177
    expression                     shift and go to state 254
    parenthesized-expression       shift and go to state 179

state 181

    (155) declaration-statement -> local-constant-declaration DELIM .

    IDENTIFIER      reduce using rule 155 (declaration-statement -> local-constant-declaration DELIM .)
    BLOCK_BEGIN     reduce using rule 155 (declaration-statement -> local-constant-declaration DELIM .)
    DELIM           reduce using rule 155 (declaration-statement -> local-constant-declaration DELIM .)
    CONSOLE         reduce using rule 155 (declaration-statement -> local-constant-declaration DELIM .)
    CONST           reduce using rule 155 (declaration-statement -> local-constant-declaration DELIM .)
    IF              reduce using rule 155 (declaration-statement -> local-constant-declaration DELIM .)
    SWITCH          reduce using rule 155 (declaration-statement -> local-constant-declaration DELIM .)
    WHILE           reduce using rule 155 (declaration-statement -> local-constant-declaration DELIM .)
    FOR             reduce using rule 155 (declaration-statement -> local-constant-declaration DELIM .)
    DO              reduce using rule 155 (declaration-statement -> local-constant-declaration DELIM .)
    BREAK           reduce using rule 155 (declaration-statement -> local-constant-declaration DELIM .)
    CONTINUE        reduce using rule 155 (declaration-statement -> local-constant-declaration DELIM .)
    GOTO            reduce using rule 155 (declaration-statement -> local-constant-declaration DELIM .)
    RETURN          reduce using rule 155 (declaration-statement -> local-constant-declaration DELIM .)
    VOID            reduce using rule 155 (declaration-statement -> local-constant-declaration DELIM .)
    BOOL            reduce using rule 155 (declaration-statement -> local-constant-declaration DELIM .)
    INT             reduce using rule 155 (declaration-statement -> local-constant-declaration DELIM .)
    UINT            reduce using rule 155 (declaration-statement -> local-constant-declaration DELIM .)
    CHAR            reduce using rule 155 (declaration-statement -> local-constant-declaration DELIM .)
    DOUBLE          reduce using rule 155 (declaration-statement -> local-constant-declaration DELIM .)
    STRING          reduce using rule 155 (declaration-statement -> local-constant-declaration DELIM .)
    BLOCK_END       reduce using rule 155 (declaration-statement -> local-constant-declaration DELIM .)
    CASE            reduce using rule 155 (declaration-statement -> local-constant-declaration DELIM .)
    DEFAULT         reduce using rule 155 (declaration-statement -> local-constant-declaration DELIM .)


state 182

    (180) iteration-statement -> do-statement M_quad .

    IDENTIFIER      reduce using rule 180 (iteration-statement -> do-statement M_quad .)
    BLOCK_BEGIN     reduce using rule 180 (iteration-statement -> do-statement M_quad .)
    DELIM           reduce using rule 180 (iteration-statement -> do-statement M_quad .)
    CONSOLE         reduce using rule 180 (iteration-statement -> do-statement M_quad .)
    CONST           reduce using rule 180 (iteration-statement -> do-statement M_quad .)
    IF              reduce using rule 180 (iteration-statement -> do-statement M_quad .)
    SWITCH          reduce using rule 180 (iteration-statement -> do-statement M_quad .)
    WHILE           reduce using rule 180 (iteration-statement -> do-statement M_quad .)
    FOR             reduce using rule 180 (iteration-statement -> do-statement M_quad .)
    DO              reduce using rule 180 (iteration-statement -> do-statement M_quad .)
    BREAK           reduce using rule 180 (iteration-statement -> do-statement M_quad .)
    CONTINUE        reduce using rule 180 (iteration-statement -> do-statement M_quad .)
    GOTO            reduce using rule 180 (iteration-statement -> do-statement M_quad .)
    RETURN          reduce using rule 180 (iteration-statement -> do-statement M_quad .)
    VOID            reduce using rule 180 (iteration-statement -> do-statement M_quad .)
    BOOL            reduce using rule 180 (iteration-statement -> do-statement M_quad .)
    INT             reduce using rule 180 (iteration-statement -> do-statement M_quad .)
    UINT            reduce using rule 180 (iteration-statement -> do-statement M_quad .)
    CHAR            reduce using rule 180 (iteration-statement -> do-statement M_quad .)
    DOUBLE          reduce using rule 180 (iteration-statement -> do-statement M_quad .)
    STRING          reduce using rule 180 (iteration-statement -> do-statement M_quad .)
    BLOCK_END       reduce using rule 180 (iteration-statement -> do-statement M_quad .)
    CASE            reduce using rule 180 (iteration-statement -> do-statement M_quad .)
    DEFAULT         reduce using rule 180 (iteration-statement -> do-statement M_quad .)


state 183

    (184) for-statement -> FOR OPEN_PAREN . for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block
    (185) for-initializer-opt -> . for-initializer
    (186) for-initializer-opt -> . empty
    (187) for-initializer -> . statement-expression-list
    (214) empty -> .
    (193) statement-expression-list -> . statement-expression
    (194) statement-expression-list -> . statement-expression-list COMMA statement-expression
    (160) statement-expression -> . invocation-expression
    (161) statement-expression -> . assignment
    (93) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (99) assignment -> . IDENTIFIER assignment-operator expression
    (100) assignment -> . member-access assignment-operator expression
    (101) assignment -> . element-access assignment-operator expression
    (92) member-access -> . IDENTIFIER DOT IDENTIFIER
    (97) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (98) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    DELIM           reduce using rule 214 (empty -> .)
    IDENTIFIER      shift and go to state 258

    for-initializer                shift and go to state 255
    assignment                     shift and go to state 104
    member-access                  shift and go to state 63
    element-access                 shift and go to state 74
    statement-expression           shift and go to state 256
    empty                          shift and go to state 259
    invocation-expression          shift and go to state 71
    statement-expression-list      shift and go to state 257
    for-initializer-opt            shift and go to state 260

state 184

    (154) declaration-statement -> local-variable-declaration DELIM .

    IDENTIFIER      reduce using rule 154 (declaration-statement -> local-variable-declaration DELIM .)
    BLOCK_BEGIN     reduce using rule 154 (declaration-statement -> local-variable-declaration DELIM .)
    DELIM           reduce using rule 154 (declaration-statement -> local-variable-declaration DELIM .)
    CONSOLE         reduce using rule 154 (declaration-statement -> local-variable-declaration DELIM .)
    CONST           reduce using rule 154 (declaration-statement -> local-variable-declaration DELIM .)
    IF              reduce using rule 154 (declaration-statement -> local-variable-declaration DELIM .)
    SWITCH          reduce using rule 154 (declaration-statement -> local-variable-declaration DELIM .)
    WHILE           reduce using rule 154 (declaration-statement -> local-variable-declaration DELIM .)
    FOR             reduce using rule 154 (declaration-statement -> local-variable-declaration DELIM .)
    DO              reduce using rule 154 (declaration-statement -> local-variable-declaration DELIM .)
    BREAK           reduce using rule 154 (declaration-statement -> local-variable-declaration DELIM .)
    CONTINUE        reduce using rule 154 (declaration-statement -> local-variable-declaration DELIM .)
    GOTO            reduce using rule 154 (declaration-statement -> local-variable-declaration DELIM .)
    RETURN          reduce using rule 154 (declaration-statement -> local-variable-declaration DELIM .)
    VOID            reduce using rule 154 (declaration-statement -> local-variable-declaration DELIM .)
    BOOL            reduce using rule 154 (declaration-statement -> local-variable-declaration DELIM .)
    INT             reduce using rule 154 (declaration-statement -> local-variable-declaration DELIM .)
    UINT            reduce using rule 154 (declaration-statement -> local-variable-declaration DELIM .)
    CHAR            reduce using rule 154 (declaration-statement -> local-variable-declaration DELIM .)
    DOUBLE          reduce using rule 154 (declaration-statement -> local-variable-declaration DELIM .)
    STRING          reduce using rule 154 (declaration-statement -> local-variable-declaration DELIM .)
    BLOCK_END       reduce using rule 154 (declaration-statement -> local-variable-declaration DELIM .)
    CASE            reduce using rule 154 (declaration-statement -> local-variable-declaration DELIM .)
    DEFAULT         reduce using rule 154 (declaration-statement -> local-variable-declaration DELIM .)


state 185

    (200) continue-statement -> CONTINUE DELIM .

    IDENTIFIER      reduce using rule 200 (continue-statement -> CONTINUE DELIM .)
    BLOCK_BEGIN     reduce using rule 200 (continue-statement -> CONTINUE DELIM .)
    DELIM           reduce using rule 200 (continue-statement -> CONTINUE DELIM .)
    CONSOLE         reduce using rule 200 (continue-statement -> CONTINUE DELIM .)
    CONST           reduce using rule 200 (continue-statement -> CONTINUE DELIM .)
    IF              reduce using rule 200 (continue-statement -> CONTINUE DELIM .)
    SWITCH          reduce using rule 200 (continue-statement -> CONTINUE DELIM .)
    WHILE           reduce using rule 200 (continue-statement -> CONTINUE DELIM .)
    FOR             reduce using rule 200 (continue-statement -> CONTINUE DELIM .)
    DO              reduce using rule 200 (continue-statement -> CONTINUE DELIM .)
    BREAK           reduce using rule 200 (continue-statement -> CONTINUE DELIM .)
    CONTINUE        reduce using rule 200 (continue-statement -> CONTINUE DELIM .)
    GOTO            reduce using rule 200 (continue-statement -> CONTINUE DELIM .)
    RETURN          reduce using rule 200 (continue-statement -> CONTINUE DELIM .)
    VOID            reduce using rule 200 (continue-statement -> CONTINUE DELIM .)
    BOOL            reduce using rule 200 (continue-statement -> CONTINUE DELIM .)
    INT             reduce using rule 200 (continue-statement -> CONTINUE DELIM .)
    UINT            reduce using rule 200 (continue-statement -> CONTINUE DELIM .)
    CHAR            reduce using rule 200 (continue-statement -> CONTINUE DELIM .)
    DOUBLE          reduce using rule 200 (continue-statement -> CONTINUE DELIM .)
    STRING          reduce using rule 200 (continue-statement -> CONTINUE DELIM .)
    BLOCK_END       reduce using rule 200 (continue-statement -> CONTINUE DELIM .)
    CASE            reduce using rule 200 (continue-statement -> CONTINUE DELIM .)
    DEFAULT         reduce using rule 200 (continue-statement -> CONTINUE DELIM .)


state 186

    (181) while-statement -> WHILE M_quad . OPEN_PAREN expression CLOSE_PAREN M_while block

    OPEN_PAREN      shift and go to state 261


state 187

    (94) invocation-expression -> IDENTIFIER DOT . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (92) member-access -> IDENTIFIER DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 262


state 188

    (97) element-access -> IDENTIFIER OPEN_BRACKET . expression CLOSE_BRACKET
    (36) expression -> . conditional-expression
    (37) expression -> . assignment
    (38) conditional-expression -> . conditional-or-expression
    (39) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (99) assignment -> . IDENTIFIER assignment-operator expression
    (100) assignment -> . member-access assignment-operator expression
    (101) assignment -> . element-access assignment-operator expression
    (40) conditional-or-expression -> . conditional-and-expression
    (41) conditional-or-expression -> . conditional-or-expression M_or LOGOR conditional-and-expression
    (92) member-access -> . IDENTIFIER DOT IDENTIFIER
    (97) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (98) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression M_and LOGAND inclusive-or-expression
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . primary-no-array-creation-expression
    (83) primary-no-array-creation-expression -> . literal
    (84) primary-no-array-creation-expression -> . IDENTIFIER
    (85) primary-no-array-creation-expression -> . element-access
    (86) primary-no-array-creation-expression -> . parenthesized-expression
    (87) primary-no-array-creation-expression -> . member-access
    (88) primary-no-array-creation-expression -> . invocation-expression
    (89) primary-no-array-creation-expression -> . object-creation-expression
    (208) literal -> . ICONST
    (209) literal -> . DCONST
    (210) literal -> . TRUE
    (211) literal -> . FALSE
    (212) literal -> . CCONST
    (213) literal -> . SCONST
    (91) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (93) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (90) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 161
    PLUS            shift and go to state 160
    MINUS           shift and go to state 151
    BITNOT          shift and go to state 174
    BITCOMP         shift and go to state 155
    ICONST          shift and go to state 164
    DCONST          shift and go to state 148
    TRUE            shift and go to state 168
    FALSE           shift and go to state 166
    CCONST          shift and go to state 175
    SCONST          shift and go to state 154
    OPEN_PAREN      shift and go to state 157
    NEW             shift and go to state 149

    exclusive-or-expression        shift and go to state 145
    member-access                  shift and go to state 146
    relational-expression          shift and go to state 147
    additive-expression            shift and go to state 150
    inclusive-or-expression        shift and go to state 152
    unary-expression               shift and go to state 144
    element-access                 shift and go to state 156
    literal                        shift and go to state 163
    conditional-expression         shift and go to state 158
    conditional-and-expression     shift and go to state 162
    assignment                     shift and go to state 159
    primary-no-array-creation-expression shift and go to state 171
    object-creation-expression     shift and go to state 165
    equality-expression            shift and go to state 167
    shift-expression               shift and go to state 169
    and-expression                 shift and go to state 170
    multiplicative-expression      shift and go to state 172
    conditional-or-expression      shift and go to state 173
    primary-expression             shift and go to state 176
    invocation-expression          shift and go to state 177
    expression                     shift and go to state 263
    parenthesized-expression       shift and go to state 179

state 189

    (93) invocation-expression -> IDENTIFIER OPEN_PAREN . argument-list-opt CLOSE_PAREN
    (95) argument-list-opt -> . expression-list
    (96) argument-list-opt -> . empty
    (76) expression-list -> . expression
    (77) expression-list -> . expression-list COMMA expression
    (214) empty -> .
    (36) expression -> . conditional-expression
    (37) expression -> . assignment
    (38) conditional-expression -> . conditional-or-expression
    (39) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (99) assignment -> . IDENTIFIER assignment-operator expression
    (100) assignment -> . member-access assignment-operator expression
    (101) assignment -> . element-access assignment-operator expression
    (40) conditional-or-expression -> . conditional-and-expression
    (41) conditional-or-expression -> . conditional-or-expression M_or LOGOR conditional-and-expression
    (92) member-access -> . IDENTIFIER DOT IDENTIFIER
    (97) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (98) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression M_and LOGAND inclusive-or-expression
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . primary-no-array-creation-expression
    (83) primary-no-array-creation-expression -> . literal
    (84) primary-no-array-creation-expression -> . IDENTIFIER
    (85) primary-no-array-creation-expression -> . element-access
    (86) primary-no-array-creation-expression -> . parenthesized-expression
    (87) primary-no-array-creation-expression -> . member-access
    (88) primary-no-array-creation-expression -> . invocation-expression
    (89) primary-no-array-creation-expression -> . object-creation-expression
    (208) literal -> . ICONST
    (209) literal -> . DCONST
    (210) literal -> . TRUE
    (211) literal -> . FALSE
    (212) literal -> . CCONST
    (213) literal -> . SCONST
    (91) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (93) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (90) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    CLOSE_PAREN     reduce using rule 214 (empty -> .)
    IDENTIFIER      shift and go to state 161
    PLUS            shift and go to state 160
    MINUS           shift and go to state 151
    BITNOT          shift and go to state 174
    BITCOMP         shift and go to state 155
    ICONST          shift and go to state 164
    DCONST          shift and go to state 148
    TRUE            shift and go to state 168
    FALSE           shift and go to state 166
    CCONST          shift and go to state 175
    SCONST          shift and go to state 154
    OPEN_PAREN      shift and go to state 157
    NEW             shift and go to state 149

    argument-list-opt              shift and go to state 264
    exclusive-or-expression        shift and go to state 145
    member-access                  shift and go to state 146
    relational-expression          shift and go to state 147
    additive-expression            shift and go to state 150
    inclusive-or-expression        shift and go to state 152
    equality-expression            shift and go to state 167
    unary-expression               shift and go to state 144
    element-access                 shift and go to state 156
    literal                        shift and go to state 163
    conditional-expression         shift and go to state 158
    conditional-and-expression     shift and go to state 162
    assignment                     shift and go to state 159
    primary-no-array-creation-expression shift and go to state 171
    object-creation-expression     shift and go to state 165
    expression-list                shift and go to state 266
    shift-expression               shift and go to state 169
    and-expression                 shift and go to state 170
    multiplicative-expression      shift and go to state 172
    expression                     shift and go to state 267
    empty                          shift and go to state 265
    primary-expression             shift and go to state 176
    invocation-expression          shift and go to state 177
    conditional-or-expression      shift and go to state 173
    parenthesized-expression       shift and go to state 179

state 190

    (153) labeled-statement -> IDENTIFIER COLON . statement
    (138) statement -> . labeled-statement
    (139) statement -> . declaration-statement
    (140) statement -> . block
    (141) statement -> . empty-statement
    (142) statement -> . expression-statement
    (143) statement -> . selection-statement
    (144) statement -> . iteration-statement
    (145) statement -> . jump-statement
    (146) statement -> . write-statement
    (147) statement -> . read-statement
    (148) statement -> . method-declaration
    (153) labeled-statement -> . IDENTIFIER COLON statement
    (154) declaration-statement -> . local-variable-declaration DELIM
    (155) declaration-statement -> . local-constant-declaration DELIM
    (132) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END
    (158) empty-statement -> . DELIM
    (159) expression-statement -> . statement-expression DELIM
    (162) selection-statement -> . if-statement
    (163) selection-statement -> . switch-statement
    (178) iteration-statement -> . while-statement M_quad
    (179) iteration-statement -> . for-statement M_quad
    (180) iteration-statement -> . do-statement M_quad
    (195) jump-statement -> . break-statement
    (196) jump-statement -> . continue-statement
    (197) jump-statement -> . goto-statement
    (198) jump-statement -> . return-statement
    (149) write-statement -> . CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM
    (152) read-statement -> . CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM
    (121) method-declaration -> . method-header method-body
    (156) local-variable-declaration -> . type variable-declarators
    (157) local-constant-declaration -> . CONST simple-type constant-declarators
    (160) statement-expression -> . invocation-expression
    (161) statement-expression -> . assignment
    (164) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block
    (165) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block
    (166) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad
    (170) switch-statement -> . SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block
    (181) while-statement -> . WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block
    (184) for-statement -> . FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block
    (183) do-statement -> . DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM
    (199) break-statement -> . BREAK DELIM
    (200) continue-statement -> . CONTINUE DELIM
    (201) goto-statement -> . GOTO IDENTIFIER DELIM
    (202) return-statement -> . RETURN expression DELIM
    (203) return-statement -> . RETURN DELIM
    (122) method-header -> . type IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (123) method-header -> . VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (23) type -> . simple-type
    (24) type -> . class-type
    (25) type -> . array-type
    (93) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (99) assignment -> . IDENTIFIER assignment-operator expression
    (100) assignment -> . member-access assignment-operator expression
    (101) assignment -> . element-access assignment-operator expression
    (26) simple-type -> . BOOL
    (27) simple-type -> . INT
    (28) simple-type -> . UINT
    (29) simple-type -> . CHAR
    (30) simple-type -> . DOUBLE
    (31) simple-type -> . STRING
    (11) class-type -> . IDENTIFIER
    (32) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET
    (92) member-access -> . IDENTIFIER DOT IDENTIFIER
    (97) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (98) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    IDENTIFIER      shift and go to state 90
    BLOCK_BEGIN     shift and go to state 58
    DELIM           shift and go to state 65
    CONSOLE         shift and go to state 103
    CONST           shift and go to state 100
    IF              shift and go to state 105
    SWITCH          shift and go to state 98
    WHILE           shift and go to state 85
    FOR             shift and go to state 77
    DO              shift and go to state 99
    BREAK           shift and go to state 95
    CONTINUE        shift and go to state 82
    GOTO            shift and go to state 68
    RETURN          shift and go to state 72
    VOID            shift and go to state 17
    BOOL            shift and go to state 37
    INT             shift and go to state 34
    UINT            shift and go to state 32
    CHAR            shift and go to state 18
    DOUBLE          shift and go to state 35
    STRING          shift and go to state 21

    return-statement               shift and go to state 73
    method-header                  shift and go to state 16
    write-statement                shift and go to state 62
    member-access                  shift and go to state 63
    selection-statement            shift and go to state 84
    empty-statement                shift and go to state 86
    expression-statement           shift and go to state 64
    break-statement                shift and go to state 87
    method-declaration             shift and go to state 88
    element-access                 shift and go to state 74
    statement-expression           shift and go to state 66
    local-constant-declaration     shift and go to state 75
    statement                      shift and go to state 268
    assignment                     shift and go to state 104
    for-statement                  shift and go to state 67
    type                           shift and go to state 91
    read-statement                 shift and go to state 102
    do-statement                   shift and go to state 76
    array-type                     shift and go to state 28
    continue-statement             shift and go to state 78
    invocation-expression          shift and go to state 71
    labeled-statement              shift and go to state 106
    declaration-statement          shift and go to state 93
    switch-statement               shift and go to state 69
    iteration-statement            shift and go to state 94
    jump-statement                 shift and go to state 70
    local-variable-declaration     shift and go to state 79
    goto-statement                 shift and go to state 80
    if-statement                   shift and go to state 81
    class-type                     shift and go to state 38
    while-statement                shift and go to state 97
    simple-type                    shift and go to state 19
    block                          shift and go to state 83

state 191

    (99) assignment -> IDENTIFIER assignment-operator . expression
    (36) expression -> . conditional-expression
    (37) expression -> . assignment
    (38) conditional-expression -> . conditional-or-expression
    (39) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (99) assignment -> . IDENTIFIER assignment-operator expression
    (100) assignment -> . member-access assignment-operator expression
    (101) assignment -> . element-access assignment-operator expression
    (40) conditional-or-expression -> . conditional-and-expression
    (41) conditional-or-expression -> . conditional-or-expression M_or LOGOR conditional-and-expression
    (92) member-access -> . IDENTIFIER DOT IDENTIFIER
    (97) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (98) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression M_and LOGAND inclusive-or-expression
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . primary-no-array-creation-expression
    (83) primary-no-array-creation-expression -> . literal
    (84) primary-no-array-creation-expression -> . IDENTIFIER
    (85) primary-no-array-creation-expression -> . element-access
    (86) primary-no-array-creation-expression -> . parenthesized-expression
    (87) primary-no-array-creation-expression -> . member-access
    (88) primary-no-array-creation-expression -> . invocation-expression
    (89) primary-no-array-creation-expression -> . object-creation-expression
    (208) literal -> . ICONST
    (209) literal -> . DCONST
    (210) literal -> . TRUE
    (211) literal -> . FALSE
    (212) literal -> . CCONST
    (213) literal -> . SCONST
    (91) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (93) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (90) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 161
    PLUS            shift and go to state 160
    MINUS           shift and go to state 151
    BITNOT          shift and go to state 174
    BITCOMP         shift and go to state 155
    ICONST          shift and go to state 164
    DCONST          shift and go to state 148
    TRUE            shift and go to state 168
    FALSE           shift and go to state 166
    CCONST          shift and go to state 175
    SCONST          shift and go to state 154
    OPEN_PAREN      shift and go to state 157
    NEW             shift and go to state 149

    exclusive-or-expression        shift and go to state 145
    member-access                  shift and go to state 146
    relational-expression          shift and go to state 147
    additive-expression            shift and go to state 150
    inclusive-or-expression        shift and go to state 152
    unary-expression               shift and go to state 144
    element-access                 shift and go to state 156
    literal                        shift and go to state 163
    conditional-expression         shift and go to state 158
    conditional-and-expression     shift and go to state 162
    assignment                     shift and go to state 159
    primary-no-array-creation-expression shift and go to state 171
    object-creation-expression     shift and go to state 165
    equality-expression            shift and go to state 167
    shift-expression               shift and go to state 169
    and-expression                 shift and go to state 170
    multiplicative-expression      shift and go to state 172
    conditional-or-expression      shift and go to state 173
    primary-expression             shift and go to state 176
    invocation-expression          shift and go to state 177
    expression                     shift and go to state 269
    parenthesized-expression       shift and go to state 179

state 192

    (156) local-variable-declaration -> type variable-declarators .
    (118) variable-declarators -> variable-declarators . COMMA variable-declarator

    DELIM           reduce using rule 156 (local-variable-declaration -> type variable-declarators .)
    COMMA           shift and go to state 113


state 193

    (199) break-statement -> BREAK DELIM .

    IDENTIFIER      reduce using rule 199 (break-statement -> BREAK DELIM .)
    BLOCK_BEGIN     reduce using rule 199 (break-statement -> BREAK DELIM .)
    DELIM           reduce using rule 199 (break-statement -> BREAK DELIM .)
    CONSOLE         reduce using rule 199 (break-statement -> BREAK DELIM .)
    CONST           reduce using rule 199 (break-statement -> BREAK DELIM .)
    IF              reduce using rule 199 (break-statement -> BREAK DELIM .)
    SWITCH          reduce using rule 199 (break-statement -> BREAK DELIM .)
    WHILE           reduce using rule 199 (break-statement -> BREAK DELIM .)
    FOR             reduce using rule 199 (break-statement -> BREAK DELIM .)
    DO              reduce using rule 199 (break-statement -> BREAK DELIM .)
    BREAK           reduce using rule 199 (break-statement -> BREAK DELIM .)
    CONTINUE        reduce using rule 199 (break-statement -> BREAK DELIM .)
    GOTO            reduce using rule 199 (break-statement -> BREAK DELIM .)
    RETURN          reduce using rule 199 (break-statement -> BREAK DELIM .)
    VOID            reduce using rule 199 (break-statement -> BREAK DELIM .)
    BOOL            reduce using rule 199 (break-statement -> BREAK DELIM .)
    INT             reduce using rule 199 (break-statement -> BREAK DELIM .)
    UINT            reduce using rule 199 (break-statement -> BREAK DELIM .)
    CHAR            reduce using rule 199 (break-statement -> BREAK DELIM .)
    DOUBLE          reduce using rule 199 (break-statement -> BREAK DELIM .)
    STRING          reduce using rule 199 (break-statement -> BREAK DELIM .)
    BLOCK_END       reduce using rule 199 (break-statement -> BREAK DELIM .)
    CASE            reduce using rule 199 (break-statement -> BREAK DELIM .)
    DEFAULT         reduce using rule 199 (break-statement -> BREAK DELIM .)


state 194

    (137) statement-list -> statement-list statement .

    IDENTIFIER      reduce using rule 137 (statement-list -> statement-list statement .)
    BLOCK_BEGIN     reduce using rule 137 (statement-list -> statement-list statement .)
    DELIM           reduce using rule 137 (statement-list -> statement-list statement .)
    CONSOLE         reduce using rule 137 (statement-list -> statement-list statement .)
    CONST           reduce using rule 137 (statement-list -> statement-list statement .)
    IF              reduce using rule 137 (statement-list -> statement-list statement .)
    SWITCH          reduce using rule 137 (statement-list -> statement-list statement .)
    WHILE           reduce using rule 137 (statement-list -> statement-list statement .)
    FOR             reduce using rule 137 (statement-list -> statement-list statement .)
    DO              reduce using rule 137 (statement-list -> statement-list statement .)
    BREAK           reduce using rule 137 (statement-list -> statement-list statement .)
    CONTINUE        reduce using rule 137 (statement-list -> statement-list statement .)
    GOTO            reduce using rule 137 (statement-list -> statement-list statement .)
    RETURN          reduce using rule 137 (statement-list -> statement-list statement .)
    VOID            reduce using rule 137 (statement-list -> statement-list statement .)
    BOOL            reduce using rule 137 (statement-list -> statement-list statement .)
    INT             reduce using rule 137 (statement-list -> statement-list statement .)
    UINT            reduce using rule 137 (statement-list -> statement-list statement .)
    CHAR            reduce using rule 137 (statement-list -> statement-list statement .)
    DOUBLE          reduce using rule 137 (statement-list -> statement-list statement .)
    STRING          reduce using rule 137 (statement-list -> statement-list statement .)
    BLOCK_END       reduce using rule 137 (statement-list -> statement-list statement .)
    CASE            reduce using rule 137 (statement-list -> statement-list statement .)
    DEFAULT         reduce using rule 137 (statement-list -> statement-list statement .)


state 195

    (178) iteration-statement -> while-statement M_quad .

    IDENTIFIER      reduce using rule 178 (iteration-statement -> while-statement M_quad .)
    BLOCK_BEGIN     reduce using rule 178 (iteration-statement -> while-statement M_quad .)
    DELIM           reduce using rule 178 (iteration-statement -> while-statement M_quad .)
    CONSOLE         reduce using rule 178 (iteration-statement -> while-statement M_quad .)
    CONST           reduce using rule 178 (iteration-statement -> while-statement M_quad .)
    IF              reduce using rule 178 (iteration-statement -> while-statement M_quad .)
    SWITCH          reduce using rule 178 (iteration-statement -> while-statement M_quad .)
    WHILE           reduce using rule 178 (iteration-statement -> while-statement M_quad .)
    FOR             reduce using rule 178 (iteration-statement -> while-statement M_quad .)
    DO              reduce using rule 178 (iteration-statement -> while-statement M_quad .)
    BREAK           reduce using rule 178 (iteration-statement -> while-statement M_quad .)
    CONTINUE        reduce using rule 178 (iteration-statement -> while-statement M_quad .)
    GOTO            reduce using rule 178 (iteration-statement -> while-statement M_quad .)
    RETURN          reduce using rule 178 (iteration-statement -> while-statement M_quad .)
    VOID            reduce using rule 178 (iteration-statement -> while-statement M_quad .)
    BOOL            reduce using rule 178 (iteration-statement -> while-statement M_quad .)
    INT             reduce using rule 178 (iteration-statement -> while-statement M_quad .)
    UINT            reduce using rule 178 (iteration-statement -> while-statement M_quad .)
    CHAR            reduce using rule 178 (iteration-statement -> while-statement M_quad .)
    DOUBLE          reduce using rule 178 (iteration-statement -> while-statement M_quad .)
    STRING          reduce using rule 178 (iteration-statement -> while-statement M_quad .)
    BLOCK_END       reduce using rule 178 (iteration-statement -> while-statement M_quad .)
    CASE            reduce using rule 178 (iteration-statement -> while-statement M_quad .)
    DEFAULT         reduce using rule 178 (iteration-statement -> while-statement M_quad .)


state 196

    (170) switch-statement -> SWITCH OPEN_PAREN . expression M_switch CLOSE_PAREN M_quad switch-block
    (36) expression -> . conditional-expression
    (37) expression -> . assignment
    (38) conditional-expression -> . conditional-or-expression
    (39) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (99) assignment -> . IDENTIFIER assignment-operator expression
    (100) assignment -> . member-access assignment-operator expression
    (101) assignment -> . element-access assignment-operator expression
    (40) conditional-or-expression -> . conditional-and-expression
    (41) conditional-or-expression -> . conditional-or-expression M_or LOGOR conditional-and-expression
    (92) member-access -> . IDENTIFIER DOT IDENTIFIER
    (97) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (98) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression M_and LOGAND inclusive-or-expression
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . primary-no-array-creation-expression
    (83) primary-no-array-creation-expression -> . literal
    (84) primary-no-array-creation-expression -> . IDENTIFIER
    (85) primary-no-array-creation-expression -> . element-access
    (86) primary-no-array-creation-expression -> . parenthesized-expression
    (87) primary-no-array-creation-expression -> . member-access
    (88) primary-no-array-creation-expression -> . invocation-expression
    (89) primary-no-array-creation-expression -> . object-creation-expression
    (208) literal -> . ICONST
    (209) literal -> . DCONST
    (210) literal -> . TRUE
    (211) literal -> . FALSE
    (212) literal -> . CCONST
    (213) literal -> . SCONST
    (91) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (93) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (90) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 161
    PLUS            shift and go to state 160
    MINUS           shift and go to state 151
    BITNOT          shift and go to state 174
    BITCOMP         shift and go to state 155
    ICONST          shift and go to state 164
    DCONST          shift and go to state 148
    TRUE            shift and go to state 168
    FALSE           shift and go to state 166
    CCONST          shift and go to state 175
    SCONST          shift and go to state 154
    OPEN_PAREN      shift and go to state 157
    NEW             shift and go to state 149

    exclusive-or-expression        shift and go to state 145
    member-access                  shift and go to state 146
    relational-expression          shift and go to state 147
    additive-expression            shift and go to state 150
    inclusive-or-expression        shift and go to state 152
    unary-expression               shift and go to state 144
    element-access                 shift and go to state 156
    literal                        shift and go to state 163
    conditional-expression         shift and go to state 158
    conditional-and-expression     shift and go to state 162
    assignment                     shift and go to state 159
    primary-no-array-creation-expression shift and go to state 171
    object-creation-expression     shift and go to state 165
    equality-expression            shift and go to state 167
    shift-expression               shift and go to state 169
    and-expression                 shift and go to state 170
    multiplicative-expression      shift and go to state 172
    expression                     shift and go to state 270
    primary-expression             shift and go to state 176
    invocation-expression          shift and go to state 177
    conditional-or-expression      shift and go to state 173
    parenthesized-expression       shift and go to state 179

state 197

    (183) do-statement -> DO M_quad . block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM
    (132) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END

    BLOCK_BEGIN     shift and go to state 58

    block                          shift and go to state 271

state 198

    (157) local-constant-declaration -> CONST simple-type . constant-declarators
    (33) constant-declarators -> . constant-declarator
    (34) constant-declarators -> . constant-declarators COMMA constant-declarator
    (35) constant-declarator -> . IDENTIFIER ASSIGN expression

    IDENTIFIER      shift and go to state 110

    constant-declarators           shift and go to state 272
    constant-declarator            shift and go to state 111

state 199

    (131) method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .

    CONST           reduce using rule 131 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    PUBLIC          reduce using rule 131 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    PRIVATE         reduce using rule 131 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    VOID            reduce using rule 131 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    IDENTIFIER      reduce using rule 131 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    BOOL            reduce using rule 131 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    INT             reduce using rule 131 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    UINT            reduce using rule 131 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    CHAR            reduce using rule 131 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    DOUBLE          reduce using rule 131 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    STRING          reduce using rule 131 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    BLOCK_END       reduce using rule 131 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    BLOCK_BEGIN     reduce using rule 131 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    DELIM           reduce using rule 131 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    CONSOLE         reduce using rule 131 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    IF              reduce using rule 131 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    SWITCH          reduce using rule 131 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    WHILE           reduce using rule 131 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    FOR             reduce using rule 131 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    DO              reduce using rule 131 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    BREAK           reduce using rule 131 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    CONTINUE        reduce using rule 131 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    GOTO            reduce using rule 131 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    RETURN          reduce using rule 131 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    CASE            reduce using rule 131 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    DEFAULT         reduce using rule 131 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)


state 200

    (149) write-statement -> CONSOLE DOT . WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM
    (152) read-statement -> CONSOLE DOT . READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM

    WRITELINE       shift and go to state 273
    READLINE        shift and go to state 274


state 201

    (164) if-statement -> IF OPEN_PAREN . expression CLOSE_PAREN M_if block
    (165) if-statement -> IF OPEN_PAREN . expression CLOSE_PAREN M_if block ELSE M_else block
    (166) if-statement -> IF OPEN_PAREN . expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad
    (36) expression -> . conditional-expression
    (37) expression -> . assignment
    (38) conditional-expression -> . conditional-or-expression
    (39) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (99) assignment -> . IDENTIFIER assignment-operator expression
    (100) assignment -> . member-access assignment-operator expression
    (101) assignment -> . element-access assignment-operator expression
    (40) conditional-or-expression -> . conditional-and-expression
    (41) conditional-or-expression -> . conditional-or-expression M_or LOGOR conditional-and-expression
    (92) member-access -> . IDENTIFIER DOT IDENTIFIER
    (97) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (98) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression M_and LOGAND inclusive-or-expression
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . primary-no-array-creation-expression
    (83) primary-no-array-creation-expression -> . literal
    (84) primary-no-array-creation-expression -> . IDENTIFIER
    (85) primary-no-array-creation-expression -> . element-access
    (86) primary-no-array-creation-expression -> . parenthesized-expression
    (87) primary-no-array-creation-expression -> . member-access
    (88) primary-no-array-creation-expression -> . invocation-expression
    (89) primary-no-array-creation-expression -> . object-creation-expression
    (208) literal -> . ICONST
    (209) literal -> . DCONST
    (210) literal -> . TRUE
    (211) literal -> . FALSE
    (212) literal -> . CCONST
    (213) literal -> . SCONST
    (91) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (93) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (90) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 161
    PLUS            shift and go to state 160
    MINUS           shift and go to state 151
    BITNOT          shift and go to state 174
    BITCOMP         shift and go to state 155
    ICONST          shift and go to state 164
    DCONST          shift and go to state 148
    TRUE            shift and go to state 168
    FALSE           shift and go to state 166
    CCONST          shift and go to state 175
    SCONST          shift and go to state 154
    OPEN_PAREN      shift and go to state 157
    NEW             shift and go to state 149

    exclusive-or-expression        shift and go to state 145
    member-access                  shift and go to state 146
    relational-expression          shift and go to state 147
    additive-expression            shift and go to state 150
    inclusive-or-expression        shift and go to state 152
    unary-expression               shift and go to state 144
    element-access                 shift and go to state 156
    literal                        shift and go to state 163
    conditional-expression         shift and go to state 158
    conditional-and-expression     shift and go to state 162
    assignment                     shift and go to state 159
    primary-no-array-creation-expression shift and go to state 171
    object-creation-expression     shift and go to state 165
    equality-expression            shift and go to state 167
    shift-expression               shift and go to state 169
    and-expression                 shift and go to state 170
    multiplicative-expression      shift and go to state 172
    expression                     shift and go to state 275
    primary-expression             shift and go to state 176
    invocation-expression          shift and go to state 177
    conditional-or-expression      shift and go to state 173
    parenthesized-expression       shift and go to state 179

state 202

    (123) method-header -> VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 276


state 203

    (32) array-type -> simple-type OPEN_BRACKET ICONST CLOSE_BRACKET .

    IDENTIFIER      reduce using rule 32 (array-type -> simple-type OPEN_BRACKET ICONST CLOSE_BRACKET .)


state 204

    (21) constant-declaration -> CONST simple-type constant-declarators DELIM .

    CONST           reduce using rule 21 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    PUBLIC          reduce using rule 21 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    PRIVATE         reduce using rule 21 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    VOID            reduce using rule 21 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    IDENTIFIER      reduce using rule 21 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    BOOL            reduce using rule 21 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    INT             reduce using rule 21 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    UINT            reduce using rule 21 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    CHAR            reduce using rule 21 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    DOUBLE          reduce using rule 21 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    STRING          reduce using rule 21 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    BLOCK_END       reduce using rule 21 (constant-declaration -> CONST simple-type constant-declarators DELIM .)


state 205

    (34) constant-declarators -> constant-declarators COMMA . constant-declarator
    (35) constant-declarator -> . IDENTIFIER ASSIGN expression

    IDENTIFIER      shift and go to state 110

    constant-declarator            shift and go to state 277

state 206

    (35) constant-declarator -> IDENTIFIER ASSIGN . expression
    (36) expression -> . conditional-expression
    (37) expression -> . assignment
    (38) conditional-expression -> . conditional-or-expression
    (39) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (99) assignment -> . IDENTIFIER assignment-operator expression
    (100) assignment -> . member-access assignment-operator expression
    (101) assignment -> . element-access assignment-operator expression
    (40) conditional-or-expression -> . conditional-and-expression
    (41) conditional-or-expression -> . conditional-or-expression M_or LOGOR conditional-and-expression
    (92) member-access -> . IDENTIFIER DOT IDENTIFIER
    (97) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (98) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression M_and LOGAND inclusive-or-expression
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . primary-no-array-creation-expression
    (83) primary-no-array-creation-expression -> . literal
    (84) primary-no-array-creation-expression -> . IDENTIFIER
    (85) primary-no-array-creation-expression -> . element-access
    (86) primary-no-array-creation-expression -> . parenthesized-expression
    (87) primary-no-array-creation-expression -> . member-access
    (88) primary-no-array-creation-expression -> . invocation-expression
    (89) primary-no-array-creation-expression -> . object-creation-expression
    (208) literal -> . ICONST
    (209) literal -> . DCONST
    (210) literal -> . TRUE
    (211) literal -> . FALSE
    (212) literal -> . CCONST
    (213) literal -> . SCONST
    (91) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (93) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (90) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 161
    PLUS            shift and go to state 160
    MINUS           shift and go to state 151
    BITNOT          shift and go to state 174
    BITCOMP         shift and go to state 155
    ICONST          shift and go to state 164
    DCONST          shift and go to state 148
    TRUE            shift and go to state 168
    FALSE           shift and go to state 166
    CCONST          shift and go to state 175
    SCONST          shift and go to state 154
    OPEN_PAREN      shift and go to state 157
    NEW             shift and go to state 149

    exclusive-or-expression        shift and go to state 145
    member-access                  shift and go to state 146
    relational-expression          shift and go to state 147
    additive-expression            shift and go to state 150
    inclusive-or-expression        shift and go to state 152
    unary-expression               shift and go to state 144
    element-access                 shift and go to state 156
    literal                        shift and go to state 163
    conditional-expression         shift and go to state 158
    conditional-and-expression     shift and go to state 162
    assignment                     shift and go to state 159
    primary-no-array-creation-expression shift and go to state 171
    object-creation-expression     shift and go to state 165
    equality-expression            shift and go to state 167
    shift-expression               shift and go to state 169
    and-expression                 shift and go to state 170
    multiplicative-expression      shift and go to state 172
    conditional-or-expression      shift and go to state 173
    primary-expression             shift and go to state 176
    invocation-expression          shift and go to state 177
    expression                     shift and go to state 278
    parenthesized-expression       shift and go to state 179

state 207

    (118) variable-declarators -> variable-declarators COMMA variable-declarator .

    DELIM           reduce using rule 118 (variable-declarators -> variable-declarators COMMA variable-declarator .)
    COMMA           reduce using rule 118 (variable-declarators -> variable-declarators COMMA variable-declarator .)


state 208

    (122) method-header -> type IDENTIFIER OPEN_PAREN formal-parameter-list-opt . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 279


state 209

    (78) array-initializer -> BLOCK_BEGIN . variable-initializer-list-opt BLOCK_END
    (79) variable-initializer-list-opt -> . expression-list
    (80) variable-initializer-list-opt -> . empty
    (76) expression-list -> . expression
    (77) expression-list -> . expression-list COMMA expression
    (214) empty -> .
    (36) expression -> . conditional-expression
    (37) expression -> . assignment
    (38) conditional-expression -> . conditional-or-expression
    (39) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (99) assignment -> . IDENTIFIER assignment-operator expression
    (100) assignment -> . member-access assignment-operator expression
    (101) assignment -> . element-access assignment-operator expression
    (40) conditional-or-expression -> . conditional-and-expression
    (41) conditional-or-expression -> . conditional-or-expression M_or LOGOR conditional-and-expression
    (92) member-access -> . IDENTIFIER DOT IDENTIFIER
    (97) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (98) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression M_and LOGAND inclusive-or-expression
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . primary-no-array-creation-expression
    (83) primary-no-array-creation-expression -> . literal
    (84) primary-no-array-creation-expression -> . IDENTIFIER
    (85) primary-no-array-creation-expression -> . element-access
    (86) primary-no-array-creation-expression -> . parenthesized-expression
    (87) primary-no-array-creation-expression -> . member-access
    (88) primary-no-array-creation-expression -> . invocation-expression
    (89) primary-no-array-creation-expression -> . object-creation-expression
    (208) literal -> . ICONST
    (209) literal -> . DCONST
    (210) literal -> . TRUE
    (211) literal -> . FALSE
    (212) literal -> . CCONST
    (213) literal -> . SCONST
    (91) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (93) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (90) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    BLOCK_END       reduce using rule 214 (empty -> .)
    IDENTIFIER      shift and go to state 161
    PLUS            shift and go to state 160
    MINUS           shift and go to state 151
    BITNOT          shift and go to state 174
    BITCOMP         shift and go to state 155
    ICONST          shift and go to state 164
    DCONST          shift and go to state 148
    TRUE            shift and go to state 168
    FALSE           shift and go to state 166
    CCONST          shift and go to state 175
    SCONST          shift and go to state 154
    OPEN_PAREN      shift and go to state 157
    NEW             shift and go to state 149

    exclusive-or-expression        shift and go to state 145
    member-access                  shift and go to state 146
    relational-expression          shift and go to state 147
    additive-expression            shift and go to state 150
    inclusive-or-expression        shift and go to state 152
    expression-list                shift and go to state 282
    unary-expression               shift and go to state 144
    element-access                 shift and go to state 156
    literal                        shift and go to state 163
    conditional-expression         shift and go to state 158
    conditional-and-expression     shift and go to state 162
    variable-initializer-list-opt  shift and go to state 281
    assignment                     shift and go to state 159
    primary-no-array-creation-expression shift and go to state 171
    object-creation-expression     shift and go to state 165
    equality-expression            shift and go to state 167
    shift-expression               shift and go to state 169
    and-expression                 shift and go to state 170
    multiplicative-expression      shift and go to state 172
    expression                     shift and go to state 267
    empty                          shift and go to state 280
    primary-expression             shift and go to state 176
    invocation-expression          shift and go to state 177
    conditional-or-expression      shift and go to state 173
    parenthesized-expression       shift and go to state 179

state 210

    (82) variable-initializer -> array-initializer .

    DELIM           reduce using rule 82 (variable-initializer -> array-initializer .)
    COMMA           reduce using rule 82 (variable-initializer -> array-initializer .)


state 211

    (120) variable-declarator -> IDENTIFIER ASSIGN variable-initializer .

    DELIM           reduce using rule 120 (variable-declarator -> IDENTIFIER ASSIGN variable-initializer .)
    COMMA           reduce using rule 120 (variable-declarator -> IDENTIFIER ASSIGN variable-initializer .)


state 212

    (81) variable-initializer -> expression .

    DELIM           reduce using rule 81 (variable-initializer -> expression .)
    COMMA           reduce using rule 81 (variable-initializer -> expression .)


state 213

    (205) constructor-declarator -> IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .

    DELIM           reduce using rule 205 (constructor-declarator -> IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)
    BLOCK_BEGIN     reduce using rule 205 (constructor-declarator -> IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)


state 214

    (128) fixed-parameters -> fixed-parameters COMMA . fixed-parameter
    (129) fixed-parameter -> . type IDENTIFIER
    (23) type -> . simple-type
    (24) type -> . class-type
    (25) type -> . array-type
    (26) simple-type -> . BOOL
    (27) simple-type -> . INT
    (28) simple-type -> . UINT
    (29) simple-type -> . CHAR
    (30) simple-type -> . DOUBLE
    (31) simple-type -> . STRING
    (11) class-type -> . IDENTIFIER
    (32) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET

    BOOL            shift and go to state 37
    INT             shift and go to state 34
    UINT            shift and go to state 32
    CHAR            shift and go to state 18
    DOUBLE          shift and go to state 35
    STRING          shift and go to state 21
    IDENTIFIER      shift and go to state 42

    array-type                     shift and go to state 28
    simple-type                    shift and go to state 19
    class-type                     shift and go to state 38
    type                           shift and go to state 119
    fixed-parameter                shift and go to state 283

state 215

    (129) fixed-parameter -> type IDENTIFIER .

    COMMA           reduce using rule 129 (fixed-parameter -> type IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 129 (fixed-parameter -> type IDENTIFIER .)


state 216

    (132) block -> BLOCK_BEGIN M_bstart statement-list-opt . BLOCK_END

    BLOCK_END       shift and go to state 284


state 217

    (22) constant-declaration -> modifier CONST simple-type constant-declarators . DELIM
    (34) constant-declarators -> constant-declarators . COMMA constant-declarator

    DELIM           shift and go to state 285
    COMMA           shift and go to state 205


state 218

    (113) field-declaration -> modifier type variable-declarators DELIM .

    CONST           reduce using rule 113 (field-declaration -> modifier type variable-declarators DELIM .)
    PUBLIC          reduce using rule 113 (field-declaration -> modifier type variable-declarators DELIM .)
    PRIVATE         reduce using rule 113 (field-declaration -> modifier type variable-declarators DELIM .)
    VOID            reduce using rule 113 (field-declaration -> modifier type variable-declarators DELIM .)
    IDENTIFIER      reduce using rule 113 (field-declaration -> modifier type variable-declarators DELIM .)
    BOOL            reduce using rule 113 (field-declaration -> modifier type variable-declarators DELIM .)
    INT             reduce using rule 113 (field-declaration -> modifier type variable-declarators DELIM .)
    UINT            reduce using rule 113 (field-declaration -> modifier type variable-declarators DELIM .)
    CHAR            reduce using rule 113 (field-declaration -> modifier type variable-declarators DELIM .)
    DOUBLE          reduce using rule 113 (field-declaration -> modifier type variable-declarators DELIM .)
    STRING          reduce using rule 113 (field-declaration -> modifier type variable-declarators DELIM .)
    BLOCK_END       reduce using rule 113 (field-declaration -> modifier type variable-declarators DELIM .)


state 219

    (100) assignment -> member-access assignment-operator expression .

    CLOSE_PAREN     reduce using rule 100 (assignment -> member-access assignment-operator expression .)
    COMMA           reduce using rule 100 (assignment -> member-access assignment-operator expression .)
    DELIM           reduce using rule 100 (assignment -> member-access assignment-operator expression .)
    CLOSE_BRACKET   reduce using rule 100 (assignment -> member-access assignment-operator expression .)
    BLOCK_END       reduce using rule 100 (assignment -> member-access assignment-operator expression .)
    COLON           reduce using rule 100 (assignment -> member-access assignment-operator expression .)


state 220

    (98) element-access -> member-access OPEN_BRACKET expression . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 286


state 221

    (201) goto-statement -> GOTO IDENTIFIER DELIM .

    IDENTIFIER      reduce using rule 201 (goto-statement -> GOTO IDENTIFIER DELIM .)
    BLOCK_BEGIN     reduce using rule 201 (goto-statement -> GOTO IDENTIFIER DELIM .)
    DELIM           reduce using rule 201 (goto-statement -> GOTO IDENTIFIER DELIM .)
    CONSOLE         reduce using rule 201 (goto-statement -> GOTO IDENTIFIER DELIM .)
    CONST           reduce using rule 201 (goto-statement -> GOTO IDENTIFIER DELIM .)
    IF              reduce using rule 201 (goto-statement -> GOTO IDENTIFIER DELIM .)
    SWITCH          reduce using rule 201 (goto-statement -> GOTO IDENTIFIER DELIM .)
    WHILE           reduce using rule 201 (goto-statement -> GOTO IDENTIFIER DELIM .)
    FOR             reduce using rule 201 (goto-statement -> GOTO IDENTIFIER DELIM .)
    DO              reduce using rule 201 (goto-statement -> GOTO IDENTIFIER DELIM .)
    BREAK           reduce using rule 201 (goto-statement -> GOTO IDENTIFIER DELIM .)
    CONTINUE        reduce using rule 201 (goto-statement -> GOTO IDENTIFIER DELIM .)
    GOTO            reduce using rule 201 (goto-statement -> GOTO IDENTIFIER DELIM .)
    RETURN          reduce using rule 201 (goto-statement -> GOTO IDENTIFIER DELIM .)
    VOID            reduce using rule 201 (goto-statement -> GOTO IDENTIFIER DELIM .)
    BOOL            reduce using rule 201 (goto-statement -> GOTO IDENTIFIER DELIM .)
    INT             reduce using rule 201 (goto-statement -> GOTO IDENTIFIER DELIM .)
    UINT            reduce using rule 201 (goto-statement -> GOTO IDENTIFIER DELIM .)
    CHAR            reduce using rule 201 (goto-statement -> GOTO IDENTIFIER DELIM .)
    DOUBLE          reduce using rule 201 (goto-statement -> GOTO IDENTIFIER DELIM .)
    STRING          reduce using rule 201 (goto-statement -> GOTO IDENTIFIER DELIM .)
    BLOCK_END       reduce using rule 201 (goto-statement -> GOTO IDENTIFIER DELIM .)
    CASE            reduce using rule 201 (goto-statement -> GOTO IDENTIFIER DELIM .)
    DEFAULT         reduce using rule 201 (goto-statement -> GOTO IDENTIFIER DELIM .)


state 222

    (49) exclusive-or-expression -> exclusive-or-expression BITXOR . and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . primary-no-array-creation-expression
    (83) primary-no-array-creation-expression -> . literal
    (84) primary-no-array-creation-expression -> . IDENTIFIER
    (85) primary-no-array-creation-expression -> . element-access
    (86) primary-no-array-creation-expression -> . parenthesized-expression
    (87) primary-no-array-creation-expression -> . member-access
    (88) primary-no-array-creation-expression -> . invocation-expression
    (89) primary-no-array-creation-expression -> . object-creation-expression
    (208) literal -> . ICONST
    (209) literal -> . DCONST
    (210) literal -> . TRUE
    (211) literal -> . FALSE
    (212) literal -> . CCONST
    (213) literal -> . SCONST
    (97) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (98) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (91) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (92) member-access -> . IDENTIFIER DOT IDENTIFIER
    (93) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (90) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 160
    MINUS           shift and go to state 151
    BITNOT          shift and go to state 174
    BITCOMP         shift and go to state 155
    IDENTIFIER      shift and go to state 233
    ICONST          shift and go to state 164
    DCONST          shift and go to state 148
    TRUE            shift and go to state 168
    FALSE           shift and go to state 166
    CCONST          shift and go to state 175
    SCONST          shift and go to state 154
    OPEN_PAREN      shift and go to state 157
    NEW             shift and go to state 149

    primary-no-array-creation-expression shift and go to state 171
    and-expression                 shift and go to state 287
    multiplicative-expression      shift and go to state 172
    equality-expression            shift and go to state 167
    unary-expression               shift and go to state 144
    relational-expression          shift and go to state 147
    element-access                 shift and go to state 232
    literal                        shift and go to state 163
    object-creation-expression     shift and go to state 165
    primary-expression             shift and go to state 176
    invocation-expression          shift and go to state 177
    additive-expression            shift and go to state 150
    parenthesized-expression       shift and go to state 179
    member-access                  shift and go to state 230
    shift-expression               shift and go to state 169

state 223

    (58) relational-expression -> relational-expression LE . shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . primary-no-array-creation-expression
    (83) primary-no-array-creation-expression -> . literal
    (84) primary-no-array-creation-expression -> . IDENTIFIER
    (85) primary-no-array-creation-expression -> . element-access
    (86) primary-no-array-creation-expression -> . parenthesized-expression
    (87) primary-no-array-creation-expression -> . member-access
    (88) primary-no-array-creation-expression -> . invocation-expression
    (89) primary-no-array-creation-expression -> . object-creation-expression
    (208) literal -> . ICONST
    (209) literal -> . DCONST
    (210) literal -> . TRUE
    (211) literal -> . FALSE
    (212) literal -> . CCONST
    (213) literal -> . SCONST
    (97) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (98) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (91) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (92) member-access -> . IDENTIFIER DOT IDENTIFIER
    (93) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (90) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 160
    MINUS           shift and go to state 151
    BITNOT          shift and go to state 174
    BITCOMP         shift and go to state 155
    IDENTIFIER      shift and go to state 233
    ICONST          shift and go to state 164
    DCONST          shift and go to state 148
    TRUE            shift and go to state 168
    FALSE           shift and go to state 166
    CCONST          shift and go to state 175
    SCONST          shift and go to state 154
    OPEN_PAREN      shift and go to state 157
    NEW             shift and go to state 149

    primary-no-array-creation-expression shift and go to state 171
    multiplicative-expression      shift and go to state 172
    member-access                  shift and go to state 230
    unary-expression               shift and go to state 144
    element-access                 shift and go to state 232
    literal                        shift and go to state 163
    object-creation-expression     shift and go to state 165
    primary-expression             shift and go to state 176
    invocation-expression          shift and go to state 177
    additive-expression            shift and go to state 150
    parenthesized-expression       shift and go to state 179
    shift-expression               shift and go to state 288

state 224

    (59) relational-expression -> relational-expression GE . shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . primary-no-array-creation-expression
    (83) primary-no-array-creation-expression -> . literal
    (84) primary-no-array-creation-expression -> . IDENTIFIER
    (85) primary-no-array-creation-expression -> . element-access
    (86) primary-no-array-creation-expression -> . parenthesized-expression
    (87) primary-no-array-creation-expression -> . member-access
    (88) primary-no-array-creation-expression -> . invocation-expression
    (89) primary-no-array-creation-expression -> . object-creation-expression
    (208) literal -> . ICONST
    (209) literal -> . DCONST
    (210) literal -> . TRUE
    (211) literal -> . FALSE
    (212) literal -> . CCONST
    (213) literal -> . SCONST
    (97) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (98) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (91) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (92) member-access -> . IDENTIFIER DOT IDENTIFIER
    (93) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (90) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 160
    MINUS           shift and go to state 151
    BITNOT          shift and go to state 174
    BITCOMP         shift and go to state 155
    IDENTIFIER      shift and go to state 233
    ICONST          shift and go to state 164
    DCONST          shift and go to state 148
    TRUE            shift and go to state 168
    FALSE           shift and go to state 166
    CCONST          shift and go to state 175
    SCONST          shift and go to state 154
    OPEN_PAREN      shift and go to state 157
    NEW             shift and go to state 149

    primary-no-array-creation-expression shift and go to state 171
    multiplicative-expression      shift and go to state 172
    member-access                  shift and go to state 230
    unary-expression               shift and go to state 144
    element-access                 shift and go to state 232
    literal                        shift and go to state 163
    object-creation-expression     shift and go to state 165
    primary-expression             shift and go to state 176
    invocation-expression          shift and go to state 177
    additive-expression            shift and go to state 150
    parenthesized-expression       shift and go to state 179
    shift-expression               shift and go to state 289

state 225

    (56) relational-expression -> relational-expression LT . shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . primary-no-array-creation-expression
    (83) primary-no-array-creation-expression -> . literal
    (84) primary-no-array-creation-expression -> . IDENTIFIER
    (85) primary-no-array-creation-expression -> . element-access
    (86) primary-no-array-creation-expression -> . parenthesized-expression
    (87) primary-no-array-creation-expression -> . member-access
    (88) primary-no-array-creation-expression -> . invocation-expression
    (89) primary-no-array-creation-expression -> . object-creation-expression
    (208) literal -> . ICONST
    (209) literal -> . DCONST
    (210) literal -> . TRUE
    (211) literal -> . FALSE
    (212) literal -> . CCONST
    (213) literal -> . SCONST
    (97) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (98) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (91) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (92) member-access -> . IDENTIFIER DOT IDENTIFIER
    (93) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (90) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 160
    MINUS           shift and go to state 151
    BITNOT          shift and go to state 174
    BITCOMP         shift and go to state 155
    IDENTIFIER      shift and go to state 233
    ICONST          shift and go to state 164
    DCONST          shift and go to state 148
    TRUE            shift and go to state 168
    FALSE           shift and go to state 166
    CCONST          shift and go to state 175
    SCONST          shift and go to state 154
    OPEN_PAREN      shift and go to state 157
    NEW             shift and go to state 149

    primary-no-array-creation-expression shift and go to state 171
    multiplicative-expression      shift and go to state 172
    member-access                  shift and go to state 230
    unary-expression               shift and go to state 144
    element-access                 shift and go to state 232
    literal                        shift and go to state 163
    object-creation-expression     shift and go to state 165
    primary-expression             shift and go to state 176
    invocation-expression          shift and go to state 177
    additive-expression            shift and go to state 150
    parenthesized-expression       shift and go to state 179
    shift-expression               shift and go to state 290

state 226

    (57) relational-expression -> relational-expression GT . shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . primary-no-array-creation-expression
    (83) primary-no-array-creation-expression -> . literal
    (84) primary-no-array-creation-expression -> . IDENTIFIER
    (85) primary-no-array-creation-expression -> . element-access
    (86) primary-no-array-creation-expression -> . parenthesized-expression
    (87) primary-no-array-creation-expression -> . member-access
    (88) primary-no-array-creation-expression -> . invocation-expression
    (89) primary-no-array-creation-expression -> . object-creation-expression
    (208) literal -> . ICONST
    (209) literal -> . DCONST
    (210) literal -> . TRUE
    (211) literal -> . FALSE
    (212) literal -> . CCONST
    (213) literal -> . SCONST
    (97) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (98) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (91) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (92) member-access -> . IDENTIFIER DOT IDENTIFIER
    (93) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (90) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 160
    MINUS           shift and go to state 151
    BITNOT          shift and go to state 174
    BITCOMP         shift and go to state 155
    IDENTIFIER      shift and go to state 233
    ICONST          shift and go to state 164
    DCONST          shift and go to state 148
    TRUE            shift and go to state 168
    FALSE           shift and go to state 166
    CCONST          shift and go to state 175
    SCONST          shift and go to state 154
    OPEN_PAREN      shift and go to state 157
    NEW             shift and go to state 149

    primary-no-array-creation-expression shift and go to state 171
    multiplicative-expression      shift and go to state 172
    member-access                  shift and go to state 230
    unary-expression               shift and go to state 144
    element-access                 shift and go to state 232
    literal                        shift and go to state 163
    object-creation-expression     shift and go to state 165
    primary-expression             shift and go to state 176
    invocation-expression          shift and go to state 177
    additive-expression            shift and go to state 150
    parenthesized-expression       shift and go to state 179
    shift-expression               shift and go to state 291

state 227

    (90) object-creation-expression -> NEW class-type . OPEN_PAREN argument-list-opt CLOSE_PAREN

    OPEN_PAREN      shift and go to state 292


state 228

    (64) additive-expression -> additive-expression PLUS . multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . primary-no-array-creation-expression
    (83) primary-no-array-creation-expression -> . literal
    (84) primary-no-array-creation-expression -> . IDENTIFIER
    (85) primary-no-array-creation-expression -> . element-access
    (86) primary-no-array-creation-expression -> . parenthesized-expression
    (87) primary-no-array-creation-expression -> . member-access
    (88) primary-no-array-creation-expression -> . invocation-expression
    (89) primary-no-array-creation-expression -> . object-creation-expression
    (208) literal -> . ICONST
    (209) literal -> . DCONST
    (210) literal -> . TRUE
    (211) literal -> . FALSE
    (212) literal -> . CCONST
    (213) literal -> . SCONST
    (97) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (98) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (91) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (92) member-access -> . IDENTIFIER DOT IDENTIFIER
    (93) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (90) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 160
    MINUS           shift and go to state 151
    BITNOT          shift and go to state 174
    BITCOMP         shift and go to state 155
    IDENTIFIER      shift and go to state 233
    ICONST          shift and go to state 164
    DCONST          shift and go to state 148
    TRUE            shift and go to state 168
    FALSE           shift and go to state 166
    CCONST          shift and go to state 175
    SCONST          shift and go to state 154
    OPEN_PAREN      shift and go to state 157
    NEW             shift and go to state 149

    primary-no-array-creation-expression shift and go to state 171
    multiplicative-expression      shift and go to state 293
    member-access                  shift and go to state 230
    unary-expression               shift and go to state 144
    element-access                 shift and go to state 232
    literal                        shift and go to state 163
    object-creation-expression     shift and go to state 165
    primary-expression             shift and go to state 176
    invocation-expression          shift and go to state 177
    parenthesized-expression       shift and go to state 179

state 229

    (65) additive-expression -> additive-expression MINUS . multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . primary-no-array-creation-expression
    (83) primary-no-array-creation-expression -> . literal
    (84) primary-no-array-creation-expression -> . IDENTIFIER
    (85) primary-no-array-creation-expression -> . element-access
    (86) primary-no-array-creation-expression -> . parenthesized-expression
    (87) primary-no-array-creation-expression -> . member-access
    (88) primary-no-array-creation-expression -> . invocation-expression
    (89) primary-no-array-creation-expression -> . object-creation-expression
    (208) literal -> . ICONST
    (209) literal -> . DCONST
    (210) literal -> . TRUE
    (211) literal -> . FALSE
    (212) literal -> . CCONST
    (213) literal -> . SCONST
    (97) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (98) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (91) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (92) member-access -> . IDENTIFIER DOT IDENTIFIER
    (93) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (90) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 160
    MINUS           shift and go to state 151
    BITNOT          shift and go to state 174
    BITCOMP         shift and go to state 155
    IDENTIFIER      shift and go to state 233
    ICONST          shift and go to state 164
    DCONST          shift and go to state 148
    TRUE            shift and go to state 168
    FALSE           shift and go to state 166
    CCONST          shift and go to state 175
    SCONST          shift and go to state 154
    OPEN_PAREN      shift and go to state 157
    NEW             shift and go to state 149

    primary-no-array-creation-expression shift and go to state 171
    multiplicative-expression      shift and go to state 294
    member-access                  shift and go to state 230
    unary-expression               shift and go to state 144
    element-access                 shift and go to state 232
    literal                        shift and go to state 163
    object-creation-expression     shift and go to state 165
    primary-expression             shift and go to state 176
    invocation-expression          shift and go to state 177
    parenthesized-expression       shift and go to state 179

state 230

    (87) primary-no-array-creation-expression -> member-access .
    (98) element-access -> member-access . OPEN_BRACKET expression CLOSE_BRACKET

    TIMES           reduce using rule 87 (primary-no-array-creation-expression -> member-access .)
    DIV             reduce using rule 87 (primary-no-array-creation-expression -> member-access .)
    MOD             reduce using rule 87 (primary-no-array-creation-expression -> member-access .)
    PLUS            reduce using rule 87 (primary-no-array-creation-expression -> member-access .)
    MINUS           reduce using rule 87 (primary-no-array-creation-expression -> member-access .)
    LSHIFT          reduce using rule 87 (primary-no-array-creation-expression -> member-access .)
    RSHIFT          reduce using rule 87 (primary-no-array-creation-expression -> member-access .)
    LT              reduce using rule 87 (primary-no-array-creation-expression -> member-access .)
    GT              reduce using rule 87 (primary-no-array-creation-expression -> member-access .)
    LE              reduce using rule 87 (primary-no-array-creation-expression -> member-access .)
    GE              reduce using rule 87 (primary-no-array-creation-expression -> member-access .)
    EQ              reduce using rule 87 (primary-no-array-creation-expression -> member-access .)
    NE              reduce using rule 87 (primary-no-array-creation-expression -> member-access .)
    BITAND          reduce using rule 87 (primary-no-array-creation-expression -> member-access .)
    BITXOR          reduce using rule 87 (primary-no-array-creation-expression -> member-access .)
    BITOR           reduce using rule 87 (primary-no-array-creation-expression -> member-access .)
    LOGAND          reduce using rule 87 (primary-no-array-creation-expression -> member-access .)
    CONDOP          reduce using rule 87 (primary-no-array-creation-expression -> member-access .)
    LOGOR           reduce using rule 87 (primary-no-array-creation-expression -> member-access .)
    DELIM           reduce using rule 87 (primary-no-array-creation-expression -> member-access .)
    COMMA           reduce using rule 87 (primary-no-array-creation-expression -> member-access .)
    CLOSE_BRACKET   reduce using rule 87 (primary-no-array-creation-expression -> member-access .)
    CLOSE_PAREN     reduce using rule 87 (primary-no-array-creation-expression -> member-access .)
    BLOCK_END       reduce using rule 87 (primary-no-array-creation-expression -> member-access .)
    COLON           reduce using rule 87 (primary-no-array-creation-expression -> member-access .)
    OPEN_BRACKET    shift and go to state 132


state 231

    (72) unary-expression -> MINUS unary-expression .

    TIMES           reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    DIV             reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    MOD             reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    PLUS            reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    MINUS           reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    LSHIFT          reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    RSHIFT          reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    LT              reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    GT              reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    LE              reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    GE              reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    EQ              reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    NE              reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    BITAND          reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    BITXOR          reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    BITOR           reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    LOGAND          reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    CONDOP          reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    LOGOR           reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    DELIM           reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    COMMA           reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    CLOSE_BRACKET   reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    CLOSE_PAREN     reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    BLOCK_END       reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    COLON           reduce using rule 72 (unary-expression -> MINUS unary-expression .)


state 232

    (85) primary-no-array-creation-expression -> element-access .

    TIMES           reduce using rule 85 (primary-no-array-creation-expression -> element-access .)
    DIV             reduce using rule 85 (primary-no-array-creation-expression -> element-access .)
    MOD             reduce using rule 85 (primary-no-array-creation-expression -> element-access .)
    PLUS            reduce using rule 85 (primary-no-array-creation-expression -> element-access .)
    MINUS           reduce using rule 85 (primary-no-array-creation-expression -> element-access .)
    LSHIFT          reduce using rule 85 (primary-no-array-creation-expression -> element-access .)
    RSHIFT          reduce using rule 85 (primary-no-array-creation-expression -> element-access .)
    LT              reduce using rule 85 (primary-no-array-creation-expression -> element-access .)
    GT              reduce using rule 85 (primary-no-array-creation-expression -> element-access .)
    LE              reduce using rule 85 (primary-no-array-creation-expression -> element-access .)
    GE              reduce using rule 85 (primary-no-array-creation-expression -> element-access .)
    EQ              reduce using rule 85 (primary-no-array-creation-expression -> element-access .)
    NE              reduce using rule 85 (primary-no-array-creation-expression -> element-access .)
    BITAND          reduce using rule 85 (primary-no-array-creation-expression -> element-access .)
    BITXOR          reduce using rule 85 (primary-no-array-creation-expression -> element-access .)
    BITOR           reduce using rule 85 (primary-no-array-creation-expression -> element-access .)
    LOGAND          reduce using rule 85 (primary-no-array-creation-expression -> element-access .)
    CONDOP          reduce using rule 85 (primary-no-array-creation-expression -> element-access .)
    LOGOR           reduce using rule 85 (primary-no-array-creation-expression -> element-access .)
    DELIM           reduce using rule 85 (primary-no-array-creation-expression -> element-access .)
    COMMA           reduce using rule 85 (primary-no-array-creation-expression -> element-access .)
    CLOSE_BRACKET   reduce using rule 85 (primary-no-array-creation-expression -> element-access .)
    CLOSE_PAREN     reduce using rule 85 (primary-no-array-creation-expression -> element-access .)
    BLOCK_END       reduce using rule 85 (primary-no-array-creation-expression -> element-access .)
    COLON           reduce using rule 85 (primary-no-array-creation-expression -> element-access .)


state 233

    (84) primary-no-array-creation-expression -> IDENTIFIER .
    (97) element-access -> IDENTIFIER . OPEN_BRACKET expression CLOSE_BRACKET
    (92) member-access -> IDENTIFIER . DOT IDENTIFIER
    (93) invocation-expression -> IDENTIFIER . OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> IDENTIFIER . DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN

    TIMES           reduce using rule 84 (primary-no-array-creation-expression -> IDENTIFIER .)
    DIV             reduce using rule 84 (primary-no-array-creation-expression -> IDENTIFIER .)
    MOD             reduce using rule 84 (primary-no-array-creation-expression -> IDENTIFIER .)
    PLUS            reduce using rule 84 (primary-no-array-creation-expression -> IDENTIFIER .)
    MINUS           reduce using rule 84 (primary-no-array-creation-expression -> IDENTIFIER .)
    LSHIFT          reduce using rule 84 (primary-no-array-creation-expression -> IDENTIFIER .)
    RSHIFT          reduce using rule 84 (primary-no-array-creation-expression -> IDENTIFIER .)
    LT              reduce using rule 84 (primary-no-array-creation-expression -> IDENTIFIER .)
    GT              reduce using rule 84 (primary-no-array-creation-expression -> IDENTIFIER .)
    LE              reduce using rule 84 (primary-no-array-creation-expression -> IDENTIFIER .)
    GE              reduce using rule 84 (primary-no-array-creation-expression -> IDENTIFIER .)
    EQ              reduce using rule 84 (primary-no-array-creation-expression -> IDENTIFIER .)
    NE              reduce using rule 84 (primary-no-array-creation-expression -> IDENTIFIER .)
    BITAND          reduce using rule 84 (primary-no-array-creation-expression -> IDENTIFIER .)
    BITXOR          reduce using rule 84 (primary-no-array-creation-expression -> IDENTIFIER .)
    BITOR           reduce using rule 84 (primary-no-array-creation-expression -> IDENTIFIER .)
    LOGAND          reduce using rule 84 (primary-no-array-creation-expression -> IDENTIFIER .)
    CONDOP          reduce using rule 84 (primary-no-array-creation-expression -> IDENTIFIER .)
    LOGOR           reduce using rule 84 (primary-no-array-creation-expression -> IDENTIFIER .)
    DELIM           reduce using rule 84 (primary-no-array-creation-expression -> IDENTIFIER .)
    COMMA           reduce using rule 84 (primary-no-array-creation-expression -> IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 84 (primary-no-array-creation-expression -> IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 84 (primary-no-array-creation-expression -> IDENTIFIER .)
    BLOCK_END       reduce using rule 84 (primary-no-array-creation-expression -> IDENTIFIER .)
    COLON           reduce using rule 84 (primary-no-array-creation-expression -> IDENTIFIER .)
    OPEN_BRACKET    shift and go to state 188
    DOT             shift and go to state 238
    OPEN_PAREN      shift and go to state 189


state 234

    (47) inclusive-or-expression -> inclusive-or-expression BITOR . exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . primary-no-array-creation-expression
    (83) primary-no-array-creation-expression -> . literal
    (84) primary-no-array-creation-expression -> . IDENTIFIER
    (85) primary-no-array-creation-expression -> . element-access
    (86) primary-no-array-creation-expression -> . parenthesized-expression
    (87) primary-no-array-creation-expression -> . member-access
    (88) primary-no-array-creation-expression -> . invocation-expression
    (89) primary-no-array-creation-expression -> . object-creation-expression
    (208) literal -> . ICONST
    (209) literal -> . DCONST
    (210) literal -> . TRUE
    (211) literal -> . FALSE
    (212) literal -> . CCONST
    (213) literal -> . SCONST
    (97) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (98) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (91) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (92) member-access -> . IDENTIFIER DOT IDENTIFIER
    (93) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (90) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 160
    MINUS           shift and go to state 151
    BITNOT          shift and go to state 174
    BITCOMP         shift and go to state 155
    IDENTIFIER      shift and go to state 233
    ICONST          shift and go to state 164
    DCONST          shift and go to state 148
    TRUE            shift and go to state 168
    FALSE           shift and go to state 166
    CCONST          shift and go to state 175
    SCONST          shift and go to state 154
    OPEN_PAREN      shift and go to state 157
    NEW             shift and go to state 149

    primary-no-array-creation-expression shift and go to state 171
    and-expression                 shift and go to state 170
    element-access                 shift and go to state 232
    additive-expression            shift and go to state 150
    exclusive-or-expression        shift and go to state 295
    unary-expression               shift and go to state 144
    relational-expression          shift and go to state 147
    multiplicative-expression      shift and go to state 172
    literal                        shift and go to state 163
    object-creation-expression     shift and go to state 165
    primary-expression             shift and go to state 176
    invocation-expression          shift and go to state 177
    equality-expression            shift and go to state 167
    parenthesized-expression       shift and go to state 179
    member-access                  shift and go to state 230
    shift-expression               shift and go to state 169

state 235

    (74) unary-expression -> BITCOMP unary-expression .

    TIMES           reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    DIV             reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    MOD             reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    PLUS            reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    MINUS           reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    LSHIFT          reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    RSHIFT          reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    LT              reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    GT              reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    LE              reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    GE              reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    EQ              reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    NE              reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    BITAND          reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    BITXOR          reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    BITOR           reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    LOGAND          reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    CONDOP          reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    LOGOR           reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    DELIM           reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    COMMA           reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    CLOSE_BRACKET   reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    CLOSE_PAREN     reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    BLOCK_END       reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    COLON           reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)


state 236

    (91) parenthesized-expression -> OPEN_PAREN expression . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 296


state 237

    (71) unary-expression -> PLUS unary-expression .

    TIMES           reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    DIV             reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    MOD             reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    PLUS            reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    MINUS           reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    LSHIFT          reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    RSHIFT          reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    LT              reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    GT              reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    LE              reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    GE              reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    EQ              reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    NE              reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    BITAND          reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    BITXOR          reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    BITOR           reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    LOGAND          reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    CONDOP          reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    LOGOR           reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    DELIM           reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    COMMA           reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    CLOSE_BRACKET   reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    CLOSE_PAREN     reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    BLOCK_END       reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    COLON           reduce using rule 71 (unary-expression -> PLUS unary-expression .)


state 238

    (92) member-access -> IDENTIFIER DOT . IDENTIFIER
    (94) invocation-expression -> IDENTIFIER DOT . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 297


state 239

    (43) M_and -> empty .

    LOGAND          reduce using rule 43 (M_and -> empty .)


state 240

    (45) conditional-and-expression -> conditional-and-expression M_and . LOGAND inclusive-or-expression

    LOGAND          shift and go to state 298


state 241

    (53) equality-expression -> equality-expression EQ . relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . primary-no-array-creation-expression
    (83) primary-no-array-creation-expression -> . literal
    (84) primary-no-array-creation-expression -> . IDENTIFIER
    (85) primary-no-array-creation-expression -> . element-access
    (86) primary-no-array-creation-expression -> . parenthesized-expression
    (87) primary-no-array-creation-expression -> . member-access
    (88) primary-no-array-creation-expression -> . invocation-expression
    (89) primary-no-array-creation-expression -> . object-creation-expression
    (208) literal -> . ICONST
    (209) literal -> . DCONST
    (210) literal -> . TRUE
    (211) literal -> . FALSE
    (212) literal -> . CCONST
    (213) literal -> . SCONST
    (97) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (98) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (91) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (92) member-access -> . IDENTIFIER DOT IDENTIFIER
    (93) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (90) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 160
    MINUS           shift and go to state 151
    BITNOT          shift and go to state 174
    BITCOMP         shift and go to state 155
    IDENTIFIER      shift and go to state 233
    ICONST          shift and go to state 164
    DCONST          shift and go to state 148
    TRUE            shift and go to state 168
    FALSE           shift and go to state 166
    CCONST          shift and go to state 175
    SCONST          shift and go to state 154
    OPEN_PAREN      shift and go to state 157
    NEW             shift and go to state 149

    primary-no-array-creation-expression shift and go to state 171
    multiplicative-expression      shift and go to state 172
    unary-expression               shift and go to state 144
    relational-expression          shift and go to state 299
    element-access                 shift and go to state 232
    literal                        shift and go to state 163
    object-creation-expression     shift and go to state 165
    primary-expression             shift and go to state 176
    invocation-expression          shift and go to state 177
    additive-expression            shift and go to state 150
    parenthesized-expression       shift and go to state 179
    member-access                  shift and go to state 230
    shift-expression               shift and go to state 169

state 242

    (54) equality-expression -> equality-expression NE . relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . primary-no-array-creation-expression
    (83) primary-no-array-creation-expression -> . literal
    (84) primary-no-array-creation-expression -> . IDENTIFIER
    (85) primary-no-array-creation-expression -> . element-access
    (86) primary-no-array-creation-expression -> . parenthesized-expression
    (87) primary-no-array-creation-expression -> . member-access
    (88) primary-no-array-creation-expression -> . invocation-expression
    (89) primary-no-array-creation-expression -> . object-creation-expression
    (208) literal -> . ICONST
    (209) literal -> . DCONST
    (210) literal -> . TRUE
    (211) literal -> . FALSE
    (212) literal -> . CCONST
    (213) literal -> . SCONST
    (97) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (98) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (91) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (92) member-access -> . IDENTIFIER DOT IDENTIFIER
    (93) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (90) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 160
    MINUS           shift and go to state 151
    BITNOT          shift and go to state 174
    BITCOMP         shift and go to state 155
    IDENTIFIER      shift and go to state 233
    ICONST          shift and go to state 164
    DCONST          shift and go to state 148
    TRUE            shift and go to state 168
    FALSE           shift and go to state 166
    CCONST          shift and go to state 175
    SCONST          shift and go to state 154
    OPEN_PAREN      shift and go to state 157
    NEW             shift and go to state 149

    primary-no-array-creation-expression shift and go to state 171
    multiplicative-expression      shift and go to state 172
    unary-expression               shift and go to state 144
    relational-expression          shift and go to state 300
    element-access                 shift and go to state 232
    literal                        shift and go to state 163
    object-creation-expression     shift and go to state 165
    primary-expression             shift and go to state 176
    invocation-expression          shift and go to state 177
    additive-expression            shift and go to state 150
    parenthesized-expression       shift and go to state 179
    member-access                  shift and go to state 230
    shift-expression               shift and go to state 169

state 243

    (62) shift-expression -> shift-expression RSHIFT . additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . primary-no-array-creation-expression
    (83) primary-no-array-creation-expression -> . literal
    (84) primary-no-array-creation-expression -> . IDENTIFIER
    (85) primary-no-array-creation-expression -> . element-access
    (86) primary-no-array-creation-expression -> . parenthesized-expression
    (87) primary-no-array-creation-expression -> . member-access
    (88) primary-no-array-creation-expression -> . invocation-expression
    (89) primary-no-array-creation-expression -> . object-creation-expression
    (208) literal -> . ICONST
    (209) literal -> . DCONST
    (210) literal -> . TRUE
    (211) literal -> . FALSE
    (212) literal -> . CCONST
    (213) literal -> . SCONST
    (97) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (98) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (91) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (92) member-access -> . IDENTIFIER DOT IDENTIFIER
    (93) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (90) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 160
    MINUS           shift and go to state 151
    BITNOT          shift and go to state 174
    BITCOMP         shift and go to state 155
    IDENTIFIER      shift and go to state 233
    ICONST          shift and go to state 164
    DCONST          shift and go to state 148
    TRUE            shift and go to state 168
    FALSE           shift and go to state 166
    CCONST          shift and go to state 175
    SCONST          shift and go to state 154
    OPEN_PAREN      shift and go to state 157
    NEW             shift and go to state 149

    primary-no-array-creation-expression shift and go to state 171
    multiplicative-expression      shift and go to state 172
    member-access                  shift and go to state 230
    unary-expression               shift and go to state 144
    element-access                 shift and go to state 232
    literal                        shift and go to state 163
    object-creation-expression     shift and go to state 165
    primary-expression             shift and go to state 176
    invocation-expression          shift and go to state 177
    additive-expression            shift and go to state 301
    parenthesized-expression       shift and go to state 179

state 244

    (61) shift-expression -> shift-expression LSHIFT . additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . primary-no-array-creation-expression
    (83) primary-no-array-creation-expression -> . literal
    (84) primary-no-array-creation-expression -> . IDENTIFIER
    (85) primary-no-array-creation-expression -> . element-access
    (86) primary-no-array-creation-expression -> . parenthesized-expression
    (87) primary-no-array-creation-expression -> . member-access
    (88) primary-no-array-creation-expression -> . invocation-expression
    (89) primary-no-array-creation-expression -> . object-creation-expression
    (208) literal -> . ICONST
    (209) literal -> . DCONST
    (210) literal -> . TRUE
    (211) literal -> . FALSE
    (212) literal -> . CCONST
    (213) literal -> . SCONST
    (97) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (98) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (91) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (92) member-access -> . IDENTIFIER DOT IDENTIFIER
    (93) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (90) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 160
    MINUS           shift and go to state 151
    BITNOT          shift and go to state 174
    BITCOMP         shift and go to state 155
    IDENTIFIER      shift and go to state 233
    ICONST          shift and go to state 164
    DCONST          shift and go to state 148
    TRUE            shift and go to state 168
    FALSE           shift and go to state 166
    CCONST          shift and go to state 175
    SCONST          shift and go to state 154
    OPEN_PAREN      shift and go to state 157
    NEW             shift and go to state 149

    primary-no-array-creation-expression shift and go to state 171
    multiplicative-expression      shift and go to state 172
    member-access                  shift and go to state 230
    unary-expression               shift and go to state 144
    element-access                 shift and go to state 232
    literal                        shift and go to state 163
    object-creation-expression     shift and go to state 165
    primary-expression             shift and go to state 176
    invocation-expression          shift and go to state 177
    additive-expression            shift and go to state 302
    parenthesized-expression       shift and go to state 179

state 245

    (51) and-expression -> and-expression BITAND . equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . primary-no-array-creation-expression
    (83) primary-no-array-creation-expression -> . literal
    (84) primary-no-array-creation-expression -> . IDENTIFIER
    (85) primary-no-array-creation-expression -> . element-access
    (86) primary-no-array-creation-expression -> . parenthesized-expression
    (87) primary-no-array-creation-expression -> . member-access
    (88) primary-no-array-creation-expression -> . invocation-expression
    (89) primary-no-array-creation-expression -> . object-creation-expression
    (208) literal -> . ICONST
    (209) literal -> . DCONST
    (210) literal -> . TRUE
    (211) literal -> . FALSE
    (212) literal -> . CCONST
    (213) literal -> . SCONST
    (97) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (98) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (91) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (92) member-access -> . IDENTIFIER DOT IDENTIFIER
    (93) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (90) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 160
    MINUS           shift and go to state 151
    BITNOT          shift and go to state 174
    BITCOMP         shift and go to state 155
    IDENTIFIER      shift and go to state 233
    ICONST          shift and go to state 164
    DCONST          shift and go to state 148
    TRUE            shift and go to state 168
    FALSE           shift and go to state 166
    CCONST          shift and go to state 175
    SCONST          shift and go to state 154
    OPEN_PAREN      shift and go to state 157
    NEW             shift and go to state 149

    primary-no-array-creation-expression shift and go to state 171
    multiplicative-expression      shift and go to state 172
    additive-expression            shift and go to state 150
    unary-expression               shift and go to state 144
    relational-expression          shift and go to state 147
    element-access                 shift and go to state 232
    literal                        shift and go to state 163
    object-creation-expression     shift and go to state 165
    primary-expression             shift and go to state 176
    invocation-expression          shift and go to state 177
    equality-expression            shift and go to state 303
    parenthesized-expression       shift and go to state 179
    member-access                  shift and go to state 230
    shift-expression               shift and go to state 169

state 246

    (68) multiplicative-expression -> multiplicative-expression DIV . unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . primary-no-array-creation-expression
    (83) primary-no-array-creation-expression -> . literal
    (84) primary-no-array-creation-expression -> . IDENTIFIER
    (85) primary-no-array-creation-expression -> . element-access
    (86) primary-no-array-creation-expression -> . parenthesized-expression
    (87) primary-no-array-creation-expression -> . member-access
    (88) primary-no-array-creation-expression -> . invocation-expression
    (89) primary-no-array-creation-expression -> . object-creation-expression
    (208) literal -> . ICONST
    (209) literal -> . DCONST
    (210) literal -> . TRUE
    (211) literal -> . FALSE
    (212) literal -> . CCONST
    (213) literal -> . SCONST
    (97) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (98) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (91) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (92) member-access -> . IDENTIFIER DOT IDENTIFIER
    (93) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (90) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 160
    MINUS           shift and go to state 151
    BITNOT          shift and go to state 174
    BITCOMP         shift and go to state 155
    IDENTIFIER      shift and go to state 233
    ICONST          shift and go to state 164
    DCONST          shift and go to state 148
    TRUE            shift and go to state 168
    FALSE           shift and go to state 166
    CCONST          shift and go to state 175
    SCONST          shift and go to state 154
    OPEN_PAREN      shift and go to state 157
    NEW             shift and go to state 149

    primary-no-array-creation-expression shift and go to state 171
    member-access                  shift and go to state 230
    unary-expression               shift and go to state 304
    element-access                 shift and go to state 232
    literal                        shift and go to state 163
    object-creation-expression     shift and go to state 165
    primary-expression             shift and go to state 176
    invocation-expression          shift and go to state 177
    parenthesized-expression       shift and go to state 179

state 247

    (69) multiplicative-expression -> multiplicative-expression MOD . unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . primary-no-array-creation-expression
    (83) primary-no-array-creation-expression -> . literal
    (84) primary-no-array-creation-expression -> . IDENTIFIER
    (85) primary-no-array-creation-expression -> . element-access
    (86) primary-no-array-creation-expression -> . parenthesized-expression
    (87) primary-no-array-creation-expression -> . member-access
    (88) primary-no-array-creation-expression -> . invocation-expression
    (89) primary-no-array-creation-expression -> . object-creation-expression
    (208) literal -> . ICONST
    (209) literal -> . DCONST
    (210) literal -> . TRUE
    (211) literal -> . FALSE
    (212) literal -> . CCONST
    (213) literal -> . SCONST
    (97) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (98) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (91) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (92) member-access -> . IDENTIFIER DOT IDENTIFIER
    (93) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (90) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 160
    MINUS           shift and go to state 151
    BITNOT          shift and go to state 174
    BITCOMP         shift and go to state 155
    IDENTIFIER      shift and go to state 233
    ICONST          shift and go to state 164
    DCONST          shift and go to state 148
    TRUE            shift and go to state 168
    FALSE           shift and go to state 166
    CCONST          shift and go to state 175
    SCONST          shift and go to state 154
    OPEN_PAREN      shift and go to state 157
    NEW             shift and go to state 149

    primary-no-array-creation-expression shift and go to state 171
    member-access                  shift and go to state 230
    unary-expression               shift and go to state 305
    element-access                 shift and go to state 232
    literal                        shift and go to state 163
    object-creation-expression     shift and go to state 165
    primary-expression             shift and go to state 176
    invocation-expression          shift and go to state 177
    parenthesized-expression       shift and go to state 179

state 248

    (67) multiplicative-expression -> multiplicative-expression TIMES . unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . primary-no-array-creation-expression
    (83) primary-no-array-creation-expression -> . literal
    (84) primary-no-array-creation-expression -> . IDENTIFIER
    (85) primary-no-array-creation-expression -> . element-access
    (86) primary-no-array-creation-expression -> . parenthesized-expression
    (87) primary-no-array-creation-expression -> . member-access
    (88) primary-no-array-creation-expression -> . invocation-expression
    (89) primary-no-array-creation-expression -> . object-creation-expression
    (208) literal -> . ICONST
    (209) literal -> . DCONST
    (210) literal -> . TRUE
    (211) literal -> . FALSE
    (212) literal -> . CCONST
    (213) literal -> . SCONST
    (97) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (98) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (91) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (92) member-access -> . IDENTIFIER DOT IDENTIFIER
    (93) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (90) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 160
    MINUS           shift and go to state 151
    BITNOT          shift and go to state 174
    BITCOMP         shift and go to state 155
    IDENTIFIER      shift and go to state 233
    ICONST          shift and go to state 164
    DCONST          shift and go to state 148
    TRUE            shift and go to state 168
    FALSE           shift and go to state 166
    CCONST          shift and go to state 175
    SCONST          shift and go to state 154
    OPEN_PAREN      shift and go to state 157
    NEW             shift and go to state 149

    primary-no-array-creation-expression shift and go to state 171
    member-access                  shift and go to state 230
    unary-expression               shift and go to state 306
    element-access                 shift and go to state 232
    literal                        shift and go to state 163
    object-creation-expression     shift and go to state 165
    primary-expression             shift and go to state 176
    invocation-expression          shift and go to state 177
    parenthesized-expression       shift and go to state 179

state 249

    (41) conditional-or-expression -> conditional-or-expression M_or . LOGOR conditional-and-expression

    LOGOR           shift and go to state 307


state 250

    (39) conditional-expression -> conditional-or-expression CONDOP . expression COLON expression
    (36) expression -> . conditional-expression
    (37) expression -> . assignment
    (38) conditional-expression -> . conditional-or-expression
    (39) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (99) assignment -> . IDENTIFIER assignment-operator expression
    (100) assignment -> . member-access assignment-operator expression
    (101) assignment -> . element-access assignment-operator expression
    (40) conditional-or-expression -> . conditional-and-expression
    (41) conditional-or-expression -> . conditional-or-expression M_or LOGOR conditional-and-expression
    (92) member-access -> . IDENTIFIER DOT IDENTIFIER
    (97) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (98) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression M_and LOGAND inclusive-or-expression
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . primary-no-array-creation-expression
    (83) primary-no-array-creation-expression -> . literal
    (84) primary-no-array-creation-expression -> . IDENTIFIER
    (85) primary-no-array-creation-expression -> . element-access
    (86) primary-no-array-creation-expression -> . parenthesized-expression
    (87) primary-no-array-creation-expression -> . member-access
    (88) primary-no-array-creation-expression -> . invocation-expression
    (89) primary-no-array-creation-expression -> . object-creation-expression
    (208) literal -> . ICONST
    (209) literal -> . DCONST
    (210) literal -> . TRUE
    (211) literal -> . FALSE
    (212) literal -> . CCONST
    (213) literal -> . SCONST
    (91) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (93) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (90) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 161
    PLUS            shift and go to state 160
    MINUS           shift and go to state 151
    BITNOT          shift and go to state 174
    BITCOMP         shift and go to state 155
    ICONST          shift and go to state 164
    DCONST          shift and go to state 148
    TRUE            shift and go to state 168
    FALSE           shift and go to state 166
    CCONST          shift and go to state 175
    SCONST          shift and go to state 154
    OPEN_PAREN      shift and go to state 157
    NEW             shift and go to state 149

    exclusive-or-expression        shift and go to state 145
    member-access                  shift and go to state 146
    relational-expression          shift and go to state 147
    additive-expression            shift and go to state 150
    inclusive-or-expression        shift and go to state 152
    unary-expression               shift and go to state 144
    element-access                 shift and go to state 156
    literal                        shift and go to state 163
    conditional-expression         shift and go to state 158
    conditional-and-expression     shift and go to state 162
    assignment                     shift and go to state 159
    primary-no-array-creation-expression shift and go to state 171
    object-creation-expression     shift and go to state 165
    equality-expression            shift and go to state 167
    shift-expression               shift and go to state 169
    and-expression                 shift and go to state 170
    multiplicative-expression      shift and go to state 172
    expression                     shift and go to state 308
    primary-expression             shift and go to state 176
    invocation-expression          shift and go to state 177
    conditional-or-expression      shift and go to state 173
    parenthesized-expression       shift and go to state 179

state 251

    (42) M_or -> empty .

    LOGOR           reduce using rule 42 (M_or -> empty .)


state 252

    (73) unary-expression -> BITNOT unary-expression .

    TIMES           reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    DIV             reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    MOD             reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    PLUS            reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    MINUS           reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    LSHIFT          reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    RSHIFT          reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    LT              reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    GT              reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    LE              reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    GE              reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    EQ              reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    NE              reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    BITAND          reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    BITXOR          reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    BITOR           reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    LOGAND          reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    CONDOP          reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    LOGOR           reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    DELIM           reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    COMMA           reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    CLOSE_BRACKET   reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    CLOSE_PAREN     reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    BLOCK_END       reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    COLON           reduce using rule 73 (unary-expression -> BITNOT unary-expression .)


state 253

    (202) return-statement -> RETURN expression DELIM .

    IDENTIFIER      reduce using rule 202 (return-statement -> RETURN expression DELIM .)
    BLOCK_BEGIN     reduce using rule 202 (return-statement -> RETURN expression DELIM .)
    DELIM           reduce using rule 202 (return-statement -> RETURN expression DELIM .)
    CONSOLE         reduce using rule 202 (return-statement -> RETURN expression DELIM .)
    CONST           reduce using rule 202 (return-statement -> RETURN expression DELIM .)
    IF              reduce using rule 202 (return-statement -> RETURN expression DELIM .)
    SWITCH          reduce using rule 202 (return-statement -> RETURN expression DELIM .)
    WHILE           reduce using rule 202 (return-statement -> RETURN expression DELIM .)
    FOR             reduce using rule 202 (return-statement -> RETURN expression DELIM .)
    DO              reduce using rule 202 (return-statement -> RETURN expression DELIM .)
    BREAK           reduce using rule 202 (return-statement -> RETURN expression DELIM .)
    CONTINUE        reduce using rule 202 (return-statement -> RETURN expression DELIM .)
    GOTO            reduce using rule 202 (return-statement -> RETURN expression DELIM .)
    RETURN          reduce using rule 202 (return-statement -> RETURN expression DELIM .)
    VOID            reduce using rule 202 (return-statement -> RETURN expression DELIM .)
    BOOL            reduce using rule 202 (return-statement -> RETURN expression DELIM .)
    INT             reduce using rule 202 (return-statement -> RETURN expression DELIM .)
    UINT            reduce using rule 202 (return-statement -> RETURN expression DELIM .)
    CHAR            reduce using rule 202 (return-statement -> RETURN expression DELIM .)
    DOUBLE          reduce using rule 202 (return-statement -> RETURN expression DELIM .)
    STRING          reduce using rule 202 (return-statement -> RETURN expression DELIM .)
    BLOCK_END       reduce using rule 202 (return-statement -> RETURN expression DELIM .)
    CASE            reduce using rule 202 (return-statement -> RETURN expression DELIM .)
    DEFAULT         reduce using rule 202 (return-statement -> RETURN expression DELIM .)


state 254

    (101) assignment -> element-access assignment-operator expression .

    CLOSE_PAREN     reduce using rule 101 (assignment -> element-access assignment-operator expression .)
    COMMA           reduce using rule 101 (assignment -> element-access assignment-operator expression .)
    DELIM           reduce using rule 101 (assignment -> element-access assignment-operator expression .)
    CLOSE_BRACKET   reduce using rule 101 (assignment -> element-access assignment-operator expression .)
    BLOCK_END       reduce using rule 101 (assignment -> element-access assignment-operator expression .)
    COLON           reduce using rule 101 (assignment -> element-access assignment-operator expression .)


state 255

    (185) for-initializer-opt -> for-initializer .

    DELIM           reduce using rule 185 (for-initializer-opt -> for-initializer .)


state 256

    (193) statement-expression-list -> statement-expression .

    COMMA           reduce using rule 193 (statement-expression-list -> statement-expression .)
    CLOSE_PAREN     reduce using rule 193 (statement-expression-list -> statement-expression .)
    DELIM           reduce using rule 193 (statement-expression-list -> statement-expression .)


state 257

    (187) for-initializer -> statement-expression-list .
    (194) statement-expression-list -> statement-expression-list . COMMA statement-expression

    DELIM           reduce using rule 187 (for-initializer -> statement-expression-list .)
    COMMA           shift and go to state 309


state 258

    (93) invocation-expression -> IDENTIFIER . OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> IDENTIFIER . DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (99) assignment -> IDENTIFIER . assignment-operator expression
    (92) member-access -> IDENTIFIER . DOT IDENTIFIER
    (97) element-access -> IDENTIFIER . OPEN_BRACKET expression CLOSE_BRACKET
    (102) assignment-operator -> . ASSIGN
    (103) assignment-operator -> . PLUSEQUAL
    (104) assignment-operator -> . MINUSEQUAL
    (105) assignment-operator -> . TIMESEQUAL
    (106) assignment-operator -> . DIVEQUAL
    (107) assignment-operator -> . MODEQUAL
    (108) assignment-operator -> . BITANDEQUAL
    (109) assignment-operator -> . BITOREQUAL
    (110) assignment-operator -> . BITXOREQUAL
    (111) assignment-operator -> . LSHIFTEQUAL
    (112) assignment-operator -> . RSHIFTEQUAL

    OPEN_PAREN      shift and go to state 189
    DOT             shift and go to state 187
    OPEN_BRACKET    shift and go to state 188
    ASSIGN          shift and go to state 138
    PLUSEQUAL       shift and go to state 134
    MINUSEQUAL      shift and go to state 131
    TIMESEQUAL      shift and go to state 130
    DIVEQUAL        shift and go to state 127
    MODEQUAL        shift and go to state 139
    BITANDEQUAL     shift and go to state 136
    BITOREQUAL      shift and go to state 133
    BITXOREQUAL     shift and go to state 135
    LSHIFTEQUAL     shift and go to state 137
    RSHIFTEQUAL     shift and go to state 128

    assignment-operator            shift and go to state 191

state 259

    (186) for-initializer-opt -> empty .

    DELIM           reduce using rule 186 (for-initializer-opt -> empty .)


state 260

    (184) for-statement -> FOR OPEN_PAREN for-initializer-opt . DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block

    DELIM           shift and go to state 310


state 261

    (181) while-statement -> WHILE M_quad OPEN_PAREN . expression CLOSE_PAREN M_while block
    (36) expression -> . conditional-expression
    (37) expression -> . assignment
    (38) conditional-expression -> . conditional-or-expression
    (39) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (99) assignment -> . IDENTIFIER assignment-operator expression
    (100) assignment -> . member-access assignment-operator expression
    (101) assignment -> . element-access assignment-operator expression
    (40) conditional-or-expression -> . conditional-and-expression
    (41) conditional-or-expression -> . conditional-or-expression M_or LOGOR conditional-and-expression
    (92) member-access -> . IDENTIFIER DOT IDENTIFIER
    (97) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (98) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression M_and LOGAND inclusive-or-expression
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . primary-no-array-creation-expression
    (83) primary-no-array-creation-expression -> . literal
    (84) primary-no-array-creation-expression -> . IDENTIFIER
    (85) primary-no-array-creation-expression -> . element-access
    (86) primary-no-array-creation-expression -> . parenthesized-expression
    (87) primary-no-array-creation-expression -> . member-access
    (88) primary-no-array-creation-expression -> . invocation-expression
    (89) primary-no-array-creation-expression -> . object-creation-expression
    (208) literal -> . ICONST
    (209) literal -> . DCONST
    (210) literal -> . TRUE
    (211) literal -> . FALSE
    (212) literal -> . CCONST
    (213) literal -> . SCONST
    (91) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (93) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (90) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 161
    PLUS            shift and go to state 160
    MINUS           shift and go to state 151
    BITNOT          shift and go to state 174
    BITCOMP         shift and go to state 155
    ICONST          shift and go to state 164
    DCONST          shift and go to state 148
    TRUE            shift and go to state 168
    FALSE           shift and go to state 166
    CCONST          shift and go to state 175
    SCONST          shift and go to state 154
    OPEN_PAREN      shift and go to state 157
    NEW             shift and go to state 149

    exclusive-or-expression        shift and go to state 145
    member-access                  shift and go to state 146
    relational-expression          shift and go to state 147
    additive-expression            shift and go to state 150
    inclusive-or-expression        shift and go to state 152
    unary-expression               shift and go to state 144
    element-access                 shift and go to state 156
    literal                        shift and go to state 163
    conditional-expression         shift and go to state 158
    conditional-and-expression     shift and go to state 162
    assignment                     shift and go to state 159
    primary-no-array-creation-expression shift and go to state 171
    object-creation-expression     shift and go to state 165
    equality-expression            shift and go to state 167
    shift-expression               shift and go to state 169
    and-expression                 shift and go to state 170
    multiplicative-expression      shift and go to state 172
    expression                     shift and go to state 311
    primary-expression             shift and go to state 176
    invocation-expression          shift and go to state 177
    conditional-or-expression      shift and go to state 173
    parenthesized-expression       shift and go to state 179

state 262

    (94) invocation-expression -> IDENTIFIER DOT IDENTIFIER . OPEN_PAREN argument-list-opt CLOSE_PAREN
    (92) member-access -> IDENTIFIER DOT IDENTIFIER .

    OPEN_PAREN      shift and go to state 312
    OPEN_BRACKET    reduce using rule 92 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    ASSIGN          reduce using rule 92 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    PLUSEQUAL       reduce using rule 92 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    MINUSEQUAL      reduce using rule 92 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    TIMESEQUAL      reduce using rule 92 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    DIVEQUAL        reduce using rule 92 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    MODEQUAL        reduce using rule 92 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    BITANDEQUAL     reduce using rule 92 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    BITOREQUAL      reduce using rule 92 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    BITXOREQUAL     reduce using rule 92 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    LSHIFTEQUAL     reduce using rule 92 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    RSHIFTEQUAL     reduce using rule 92 (member-access -> IDENTIFIER DOT IDENTIFIER .)


state 263

    (97) element-access -> IDENTIFIER OPEN_BRACKET expression . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 313


state 264

    (93) invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 314


state 265

    (96) argument-list-opt -> empty .

    CLOSE_PAREN     reduce using rule 96 (argument-list-opt -> empty .)


state 266

    (95) argument-list-opt -> expression-list .
    (77) expression-list -> expression-list . COMMA expression

    CLOSE_PAREN     reduce using rule 95 (argument-list-opt -> expression-list .)
    COMMA           shift and go to state 315


state 267

    (76) expression-list -> expression .

    COMMA           reduce using rule 76 (expression-list -> expression .)
    CLOSE_PAREN     reduce using rule 76 (expression-list -> expression .)
    BLOCK_END       reduce using rule 76 (expression-list -> expression .)


state 268

    (153) labeled-statement -> IDENTIFIER COLON statement .

    IDENTIFIER      reduce using rule 153 (labeled-statement -> IDENTIFIER COLON statement .)
    BLOCK_BEGIN     reduce using rule 153 (labeled-statement -> IDENTIFIER COLON statement .)
    DELIM           reduce using rule 153 (labeled-statement -> IDENTIFIER COLON statement .)
    CONSOLE         reduce using rule 153 (labeled-statement -> IDENTIFIER COLON statement .)
    CONST           reduce using rule 153 (labeled-statement -> IDENTIFIER COLON statement .)
    IF              reduce using rule 153 (labeled-statement -> IDENTIFIER COLON statement .)
    SWITCH          reduce using rule 153 (labeled-statement -> IDENTIFIER COLON statement .)
    WHILE           reduce using rule 153 (labeled-statement -> IDENTIFIER COLON statement .)
    FOR             reduce using rule 153 (labeled-statement -> IDENTIFIER COLON statement .)
    DO              reduce using rule 153 (labeled-statement -> IDENTIFIER COLON statement .)
    BREAK           reduce using rule 153 (labeled-statement -> IDENTIFIER COLON statement .)
    CONTINUE        reduce using rule 153 (labeled-statement -> IDENTIFIER COLON statement .)
    GOTO            reduce using rule 153 (labeled-statement -> IDENTIFIER COLON statement .)
    RETURN          reduce using rule 153 (labeled-statement -> IDENTIFIER COLON statement .)
    VOID            reduce using rule 153 (labeled-statement -> IDENTIFIER COLON statement .)
    BOOL            reduce using rule 153 (labeled-statement -> IDENTIFIER COLON statement .)
    INT             reduce using rule 153 (labeled-statement -> IDENTIFIER COLON statement .)
    UINT            reduce using rule 153 (labeled-statement -> IDENTIFIER COLON statement .)
    CHAR            reduce using rule 153 (labeled-statement -> IDENTIFIER COLON statement .)
    DOUBLE          reduce using rule 153 (labeled-statement -> IDENTIFIER COLON statement .)
    STRING          reduce using rule 153 (labeled-statement -> IDENTIFIER COLON statement .)
    BLOCK_END       reduce using rule 153 (labeled-statement -> IDENTIFIER COLON statement .)
    CASE            reduce using rule 153 (labeled-statement -> IDENTIFIER COLON statement .)
    DEFAULT         reduce using rule 153 (labeled-statement -> IDENTIFIER COLON statement .)


state 269

    (99) assignment -> IDENTIFIER assignment-operator expression .

    CLOSE_PAREN     reduce using rule 99 (assignment -> IDENTIFIER assignment-operator expression .)
    COMMA           reduce using rule 99 (assignment -> IDENTIFIER assignment-operator expression .)
    DELIM           reduce using rule 99 (assignment -> IDENTIFIER assignment-operator expression .)
    CLOSE_BRACKET   reduce using rule 99 (assignment -> IDENTIFIER assignment-operator expression .)
    BLOCK_END       reduce using rule 99 (assignment -> IDENTIFIER assignment-operator expression .)
    COLON           reduce using rule 99 (assignment -> IDENTIFIER assignment-operator expression .)


state 270

    (170) switch-statement -> SWITCH OPEN_PAREN expression . M_switch CLOSE_PAREN M_quad switch-block
    (171) M_switch -> . empty
    (214) empty -> .

    CLOSE_PAREN     reduce using rule 214 (empty -> .)

    M_switch                       shift and go to state 316
    empty                          shift and go to state 317

state 271

    (183) do-statement -> DO M_quad block . WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM

    WHILE           shift and go to state 318


state 272

    (157) local-constant-declaration -> CONST simple-type constant-declarators .
    (34) constant-declarators -> constant-declarators . COMMA constant-declarator

    DELIM           reduce using rule 157 (local-constant-declaration -> CONST simple-type constant-declarators .)
    COMMA           shift and go to state 205


state 273

    (149) write-statement -> CONSOLE DOT WRITELINE . OPEN_PAREN print-list CLOSE_PAREN DELIM

    OPEN_PAREN      shift and go to state 319


state 274

    (152) read-statement -> CONSOLE DOT READLINE . OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM

    OPEN_PAREN      shift and go to state 320


state 275

    (164) if-statement -> IF OPEN_PAREN expression . CLOSE_PAREN M_if block
    (165) if-statement -> IF OPEN_PAREN expression . CLOSE_PAREN M_if block ELSE M_else block
    (166) if-statement -> IF OPEN_PAREN expression . CLOSE_PAREN M_if block ELSE M_else if-statement M_quad

    CLOSE_PAREN     shift and go to state 321


state 276

    (123) method-header -> VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .

    BLOCK_BEGIN     reduce using rule 123 (method-header -> VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)


state 277

    (34) constant-declarators -> constant-declarators COMMA constant-declarator .

    DELIM           reduce using rule 34 (constant-declarators -> constant-declarators COMMA constant-declarator .)
    COMMA           reduce using rule 34 (constant-declarators -> constant-declarators COMMA constant-declarator .)


state 278

    (35) constant-declarator -> IDENTIFIER ASSIGN expression .

    DELIM           reduce using rule 35 (constant-declarator -> IDENTIFIER ASSIGN expression .)
    COMMA           reduce using rule 35 (constant-declarator -> IDENTIFIER ASSIGN expression .)


state 279

    (122) method-header -> type IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .

    BLOCK_BEGIN     reduce using rule 122 (method-header -> type IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)


state 280

    (80) variable-initializer-list-opt -> empty .

    BLOCK_END       reduce using rule 80 (variable-initializer-list-opt -> empty .)


state 281

    (78) array-initializer -> BLOCK_BEGIN variable-initializer-list-opt . BLOCK_END

    BLOCK_END       shift and go to state 322


state 282

    (79) variable-initializer-list-opt -> expression-list .
    (77) expression-list -> expression-list . COMMA expression

    BLOCK_END       reduce using rule 79 (variable-initializer-list-opt -> expression-list .)
    COMMA           shift and go to state 315


state 283

    (128) fixed-parameters -> fixed-parameters COMMA fixed-parameter .

    COMMA           reduce using rule 128 (fixed-parameters -> fixed-parameters COMMA fixed-parameter .)
    CLOSE_PAREN     reduce using rule 128 (fixed-parameters -> fixed-parameters COMMA fixed-parameter .)


state 284

    (132) block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .

    CONST           reduce using rule 132 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    PUBLIC          reduce using rule 132 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    PRIVATE         reduce using rule 132 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    VOID            reduce using rule 132 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    IDENTIFIER      reduce using rule 132 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    BOOL            reduce using rule 132 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    INT             reduce using rule 132 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    UINT            reduce using rule 132 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    CHAR            reduce using rule 132 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    DOUBLE          reduce using rule 132 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    STRING          reduce using rule 132 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    BLOCK_END       reduce using rule 132 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    BLOCK_BEGIN     reduce using rule 132 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    DELIM           reduce using rule 132 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    CONSOLE         reduce using rule 132 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    IF              reduce using rule 132 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    SWITCH          reduce using rule 132 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    WHILE           reduce using rule 132 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    FOR             reduce using rule 132 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    DO              reduce using rule 132 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    BREAK           reduce using rule 132 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    CONTINUE        reduce using rule 132 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    GOTO            reduce using rule 132 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    RETURN          reduce using rule 132 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    CASE            reduce using rule 132 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    DEFAULT         reduce using rule 132 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    ELSE            reduce using rule 132 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)


state 285

    (22) constant-declaration -> modifier CONST simple-type constant-declarators DELIM .

    CONST           reduce using rule 22 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    PUBLIC          reduce using rule 22 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    PRIVATE         reduce using rule 22 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    VOID            reduce using rule 22 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    IDENTIFIER      reduce using rule 22 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    BOOL            reduce using rule 22 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    INT             reduce using rule 22 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    UINT            reduce using rule 22 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    CHAR            reduce using rule 22 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    DOUBLE          reduce using rule 22 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    STRING          reduce using rule 22 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    BLOCK_END       reduce using rule 22 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)


state 286

    (98) element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .

    ASSIGN          reduce using rule 98 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    PLUSEQUAL       reduce using rule 98 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    MINUSEQUAL      reduce using rule 98 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    TIMESEQUAL      reduce using rule 98 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    DIVEQUAL        reduce using rule 98 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    MODEQUAL        reduce using rule 98 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    BITANDEQUAL     reduce using rule 98 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    BITOREQUAL      reduce using rule 98 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    BITXOREQUAL     reduce using rule 98 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    LSHIFTEQUAL     reduce using rule 98 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    RSHIFTEQUAL     reduce using rule 98 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    TIMES           reduce using rule 98 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    DIV             reduce using rule 98 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    MOD             reduce using rule 98 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    PLUS            reduce using rule 98 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    MINUS           reduce using rule 98 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    LSHIFT          reduce using rule 98 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    RSHIFT          reduce using rule 98 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    LT              reduce using rule 98 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    GT              reduce using rule 98 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    LE              reduce using rule 98 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    GE              reduce using rule 98 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    EQ              reduce using rule 98 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    NE              reduce using rule 98 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    BITAND          reduce using rule 98 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    BITXOR          reduce using rule 98 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    BITOR           reduce using rule 98 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    LOGAND          reduce using rule 98 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    CONDOP          reduce using rule 98 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    LOGOR           reduce using rule 98 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    COMMA           reduce using rule 98 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    CLOSE_PAREN     reduce using rule 98 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    DELIM           reduce using rule 98 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 98 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    BLOCK_END       reduce using rule 98 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    COLON           reduce using rule 98 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)


state 287

    (49) exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .
    (51) and-expression -> and-expression . BITAND equality-expression

    BITXOR          reduce using rule 49 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    BITOR           reduce using rule 49 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    LOGAND          reduce using rule 49 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    CONDOP          reduce using rule 49 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    LOGOR           reduce using rule 49 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    CLOSE_BRACKET   reduce using rule 49 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    CLOSE_PAREN     reduce using rule 49 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    DELIM           reduce using rule 49 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    COMMA           reduce using rule 49 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    BLOCK_END       reduce using rule 49 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    COLON           reduce using rule 49 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    BITAND          shift and go to state 245


state 288

    (58) relational-expression -> relational-expression LE shift-expression .
    (61) shift-expression -> shift-expression . LSHIFT additive-expression
    (62) shift-expression -> shift-expression . RSHIFT additive-expression

    LT              reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    GT              reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    LE              reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    GE              reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    EQ              reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    NE              reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    BITAND          reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    BITXOR          reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    BITOR           reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    LOGAND          reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    CONDOP          reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    LOGOR           reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    DELIM           reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    COMMA           reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    CLOSE_BRACKET   reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    CLOSE_PAREN     reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    BLOCK_END       reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    COLON           reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    LSHIFT          shift and go to state 244
    RSHIFT          shift and go to state 243


state 289

    (59) relational-expression -> relational-expression GE shift-expression .
    (61) shift-expression -> shift-expression . LSHIFT additive-expression
    (62) shift-expression -> shift-expression . RSHIFT additive-expression

    LT              reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    GT              reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    LE              reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    GE              reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    EQ              reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    NE              reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    BITAND          reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    BITXOR          reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    BITOR           reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    LOGAND          reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    CONDOP          reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    LOGOR           reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    DELIM           reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    COMMA           reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    CLOSE_BRACKET   reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    CLOSE_PAREN     reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    BLOCK_END       reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    COLON           reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    LSHIFT          shift and go to state 244
    RSHIFT          shift and go to state 243


state 290

    (56) relational-expression -> relational-expression LT shift-expression .
    (61) shift-expression -> shift-expression . LSHIFT additive-expression
    (62) shift-expression -> shift-expression . RSHIFT additive-expression

    LT              reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    GT              reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    LE              reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    GE              reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    EQ              reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    NE              reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    BITAND          reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    BITXOR          reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    BITOR           reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    LOGAND          reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    CONDOP          reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    LOGOR           reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    DELIM           reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    COMMA           reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    CLOSE_BRACKET   reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    CLOSE_PAREN     reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    BLOCK_END       reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    COLON           reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    LSHIFT          shift and go to state 244
    RSHIFT          shift and go to state 243


state 291

    (57) relational-expression -> relational-expression GT shift-expression .
    (61) shift-expression -> shift-expression . LSHIFT additive-expression
    (62) shift-expression -> shift-expression . RSHIFT additive-expression

    LT              reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    GT              reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    LE              reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    GE              reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    EQ              reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    NE              reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    BITAND          reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    BITXOR          reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    BITOR           reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    LOGAND          reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    CONDOP          reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    LOGOR           reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    DELIM           reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    COMMA           reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    CLOSE_BRACKET   reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    CLOSE_PAREN     reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    BLOCK_END       reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    COLON           reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    LSHIFT          shift and go to state 244
    RSHIFT          shift and go to state 243


state 292

    (90) object-creation-expression -> NEW class-type OPEN_PAREN . argument-list-opt CLOSE_PAREN
    (95) argument-list-opt -> . expression-list
    (96) argument-list-opt -> . empty
    (76) expression-list -> . expression
    (77) expression-list -> . expression-list COMMA expression
    (214) empty -> .
    (36) expression -> . conditional-expression
    (37) expression -> . assignment
    (38) conditional-expression -> . conditional-or-expression
    (39) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (99) assignment -> . IDENTIFIER assignment-operator expression
    (100) assignment -> . member-access assignment-operator expression
    (101) assignment -> . element-access assignment-operator expression
    (40) conditional-or-expression -> . conditional-and-expression
    (41) conditional-or-expression -> . conditional-or-expression M_or LOGOR conditional-and-expression
    (92) member-access -> . IDENTIFIER DOT IDENTIFIER
    (97) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (98) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression M_and LOGAND inclusive-or-expression
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . primary-no-array-creation-expression
    (83) primary-no-array-creation-expression -> . literal
    (84) primary-no-array-creation-expression -> . IDENTIFIER
    (85) primary-no-array-creation-expression -> . element-access
    (86) primary-no-array-creation-expression -> . parenthesized-expression
    (87) primary-no-array-creation-expression -> . member-access
    (88) primary-no-array-creation-expression -> . invocation-expression
    (89) primary-no-array-creation-expression -> . object-creation-expression
    (208) literal -> . ICONST
    (209) literal -> . DCONST
    (210) literal -> . TRUE
    (211) literal -> . FALSE
    (212) literal -> . CCONST
    (213) literal -> . SCONST
    (91) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (93) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (90) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    CLOSE_PAREN     reduce using rule 214 (empty -> .)
    IDENTIFIER      shift and go to state 161
    PLUS            shift and go to state 160
    MINUS           shift and go to state 151
    BITNOT          shift and go to state 174
    BITCOMP         shift and go to state 155
    ICONST          shift and go to state 164
    DCONST          shift and go to state 148
    TRUE            shift and go to state 168
    FALSE           shift and go to state 166
    CCONST          shift and go to state 175
    SCONST          shift and go to state 154
    OPEN_PAREN      shift and go to state 157
    NEW             shift and go to state 149

    argument-list-opt              shift and go to state 323
    exclusive-or-expression        shift and go to state 145
    member-access                  shift and go to state 146
    relational-expression          shift and go to state 147
    additive-expression            shift and go to state 150
    inclusive-or-expression        shift and go to state 152
    equality-expression            shift and go to state 167
    unary-expression               shift and go to state 144
    element-access                 shift and go to state 156
    literal                        shift and go to state 163
    conditional-expression         shift and go to state 158
    conditional-and-expression     shift and go to state 162
    assignment                     shift and go to state 159
    primary-expression             shift and go to state 176
    primary-no-array-creation-expression shift and go to state 171
    object-creation-expression     shift and go to state 165
    expression-list                shift and go to state 266
    shift-expression               shift and go to state 169
    and-expression                 shift and go to state 170
    multiplicative-expression      shift and go to state 172
    expression                     shift and go to state 267
    empty                          shift and go to state 265
    invocation-expression          shift and go to state 177
    conditional-or-expression      shift and go to state 173
    parenthesized-expression       shift and go to state 179

state 293

    (64) additive-expression -> additive-expression PLUS multiplicative-expression .
    (67) multiplicative-expression -> multiplicative-expression . TIMES unary-expression
    (68) multiplicative-expression -> multiplicative-expression . DIV unary-expression
    (69) multiplicative-expression -> multiplicative-expression . MOD unary-expression

    PLUS            reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    MINUS           reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    LSHIFT          reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    RSHIFT          reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    LT              reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    GT              reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    LE              reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    GE              reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    EQ              reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    NE              reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    BITAND          reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    BITXOR          reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    BITOR           reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    LOGAND          reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    CONDOP          reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    LOGOR           reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    DELIM           reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    COMMA           reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    CLOSE_BRACKET   reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    CLOSE_PAREN     reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    BLOCK_END       reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    COLON           reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    TIMES           shift and go to state 248
    DIV             shift and go to state 246
    MOD             shift and go to state 247


state 294

    (65) additive-expression -> additive-expression MINUS multiplicative-expression .
    (67) multiplicative-expression -> multiplicative-expression . TIMES unary-expression
    (68) multiplicative-expression -> multiplicative-expression . DIV unary-expression
    (69) multiplicative-expression -> multiplicative-expression . MOD unary-expression

    PLUS            reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    MINUS           reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    LSHIFT          reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    RSHIFT          reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    LT              reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    GT              reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    LE              reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    GE              reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    EQ              reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    NE              reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    BITAND          reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    BITXOR          reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    BITOR           reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    LOGAND          reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    CONDOP          reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    LOGOR           reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    DELIM           reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    COMMA           reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    CLOSE_BRACKET   reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    CLOSE_PAREN     reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    BLOCK_END       reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    COLON           reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    TIMES           shift and go to state 248
    DIV             shift and go to state 246
    MOD             shift and go to state 247


state 295

    (47) inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .
    (49) exclusive-or-expression -> exclusive-or-expression . BITXOR and-expression

    BITOR           reduce using rule 47 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    LOGAND          reduce using rule 47 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    CONDOP          reduce using rule 47 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    LOGOR           reduce using rule 47 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    DELIM           reduce using rule 47 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    COMMA           reduce using rule 47 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    CLOSE_BRACKET   reduce using rule 47 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    CLOSE_PAREN     reduce using rule 47 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    BLOCK_END       reduce using rule 47 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    COLON           reduce using rule 47 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    BITXOR          shift and go to state 222


state 296

    (91) parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .

    TIMES           reduce using rule 91 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    DIV             reduce using rule 91 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    MOD             reduce using rule 91 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    PLUS            reduce using rule 91 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    MINUS           reduce using rule 91 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    LSHIFT          reduce using rule 91 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    RSHIFT          reduce using rule 91 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    LT              reduce using rule 91 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    GT              reduce using rule 91 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    LE              reduce using rule 91 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    GE              reduce using rule 91 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    EQ              reduce using rule 91 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    NE              reduce using rule 91 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    BITAND          reduce using rule 91 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    BITXOR          reduce using rule 91 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    BITOR           reduce using rule 91 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    LOGAND          reduce using rule 91 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    CONDOP          reduce using rule 91 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    LOGOR           reduce using rule 91 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    CLOSE_BRACKET   reduce using rule 91 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    COMMA           reduce using rule 91 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 91 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    DELIM           reduce using rule 91 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    BLOCK_END       reduce using rule 91 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    COLON           reduce using rule 91 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)


state 297

    (92) member-access -> IDENTIFIER DOT IDENTIFIER .
    (94) invocation-expression -> IDENTIFIER DOT IDENTIFIER . OPEN_PAREN argument-list-opt CLOSE_PAREN

    OPEN_BRACKET    reduce using rule 92 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    TIMES           reduce using rule 92 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    DIV             reduce using rule 92 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    MOD             reduce using rule 92 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    PLUS            reduce using rule 92 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    MINUS           reduce using rule 92 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    LSHIFT          reduce using rule 92 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    RSHIFT          reduce using rule 92 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    LT              reduce using rule 92 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    GT              reduce using rule 92 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    LE              reduce using rule 92 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    GE              reduce using rule 92 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    EQ              reduce using rule 92 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    NE              reduce using rule 92 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    BITAND          reduce using rule 92 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    BITXOR          reduce using rule 92 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    BITOR           reduce using rule 92 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    LOGAND          reduce using rule 92 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    CONDOP          reduce using rule 92 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    LOGOR           reduce using rule 92 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    DELIM           reduce using rule 92 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    COMMA           reduce using rule 92 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 92 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 92 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    BLOCK_END       reduce using rule 92 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    COLON           reduce using rule 92 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    ASSIGN          reduce using rule 92 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    PLUSEQUAL       reduce using rule 92 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    MINUSEQUAL      reduce using rule 92 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    TIMESEQUAL      reduce using rule 92 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    DIVEQUAL        reduce using rule 92 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    MODEQUAL        reduce using rule 92 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    BITANDEQUAL     reduce using rule 92 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    BITOREQUAL      reduce using rule 92 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    BITXOREQUAL     reduce using rule 92 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    LSHIFTEQUAL     reduce using rule 92 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    RSHIFTEQUAL     reduce using rule 92 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    OPEN_PAREN      shift and go to state 312


state 298

    (45) conditional-and-expression -> conditional-and-expression M_and LOGAND . inclusive-or-expression
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . primary-no-array-creation-expression
    (83) primary-no-array-creation-expression -> . literal
    (84) primary-no-array-creation-expression -> . IDENTIFIER
    (85) primary-no-array-creation-expression -> . element-access
    (86) primary-no-array-creation-expression -> . parenthesized-expression
    (87) primary-no-array-creation-expression -> . member-access
    (88) primary-no-array-creation-expression -> . invocation-expression
    (89) primary-no-array-creation-expression -> . object-creation-expression
    (208) literal -> . ICONST
    (209) literal -> . DCONST
    (210) literal -> . TRUE
    (211) literal -> . FALSE
    (212) literal -> . CCONST
    (213) literal -> . SCONST
    (97) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (98) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (91) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (92) member-access -> . IDENTIFIER DOT IDENTIFIER
    (93) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (90) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 160
    MINUS           shift and go to state 151
    BITNOT          shift and go to state 174
    BITCOMP         shift and go to state 155
    IDENTIFIER      shift and go to state 233
    ICONST          shift and go to state 164
    DCONST          shift and go to state 148
    TRUE            shift and go to state 168
    FALSE           shift and go to state 166
    CCONST          shift and go to state 175
    SCONST          shift and go to state 154
    OPEN_PAREN      shift and go to state 157
    NEW             shift and go to state 149

    exclusive-or-expression        shift and go to state 145
    member-access                  shift and go to state 230
    relational-expression          shift and go to state 147
    additive-expression            shift and go to state 150
    primary-no-array-creation-expression shift and go to state 171
    inclusive-or-expression        shift and go to state 324
    unary-expression               shift and go to state 144
    element-access                 shift and go to state 232
    literal                        shift and go to state 163
    primary-expression             shift and go to state 176
    object-creation-expression     shift and go to state 165
    equality-expression            shift and go to state 167
    shift-expression               shift and go to state 169
    and-expression                 shift and go to state 170
    multiplicative-expression      shift and go to state 172
    invocation-expression          shift and go to state 177
    parenthesized-expression       shift and go to state 179

state 299

    (53) equality-expression -> equality-expression EQ relational-expression .
    (56) relational-expression -> relational-expression . LT shift-expression
    (57) relational-expression -> relational-expression . GT shift-expression
    (58) relational-expression -> relational-expression . LE shift-expression
    (59) relational-expression -> relational-expression . GE shift-expression

    EQ              reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    NE              reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    BITAND          reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    BITXOR          reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    BITOR           reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    LOGAND          reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    CONDOP          reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    LOGOR           reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    COLON           reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    CLOSE_PAREN     reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    COMMA           reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    DELIM           reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    CLOSE_BRACKET   reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    BLOCK_END       reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    LT              shift and go to state 225
    GT              shift and go to state 226
    LE              shift and go to state 223
    GE              shift and go to state 224


state 300

    (54) equality-expression -> equality-expression NE relational-expression .
    (56) relational-expression -> relational-expression . LT shift-expression
    (57) relational-expression -> relational-expression . GT shift-expression
    (58) relational-expression -> relational-expression . LE shift-expression
    (59) relational-expression -> relational-expression . GE shift-expression

    EQ              reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    NE              reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    BITAND          reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    BITXOR          reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    BITOR           reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    LOGAND          reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    CONDOP          reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    LOGOR           reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    COLON           reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    CLOSE_PAREN     reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    COMMA           reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    DELIM           reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    CLOSE_BRACKET   reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    BLOCK_END       reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    LT              shift and go to state 225
    GT              shift and go to state 226
    LE              shift and go to state 223
    GE              shift and go to state 224


state 301

    (62) shift-expression -> shift-expression RSHIFT additive-expression .
    (64) additive-expression -> additive-expression . PLUS multiplicative-expression
    (65) additive-expression -> additive-expression . MINUS multiplicative-expression

    LSHIFT          reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    RSHIFT          reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    LT              reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    GT              reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    LE              reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    GE              reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    EQ              reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    NE              reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    BITAND          reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    BITXOR          reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    BITOR           reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    LOGAND          reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    CONDOP          reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    LOGOR           reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    DELIM           reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    COMMA           reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    CLOSE_PAREN     reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    CLOSE_BRACKET   reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    BLOCK_END       reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    COLON           reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    PLUS            shift and go to state 228
    MINUS           shift and go to state 229


state 302

    (61) shift-expression -> shift-expression LSHIFT additive-expression .
    (64) additive-expression -> additive-expression . PLUS multiplicative-expression
    (65) additive-expression -> additive-expression . MINUS multiplicative-expression

    LSHIFT          reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    RSHIFT          reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    LT              reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    GT              reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    LE              reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    GE              reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    EQ              reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    NE              reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    BITAND          reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    BITXOR          reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    BITOR           reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    LOGAND          reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    CONDOP          reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    LOGOR           reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    DELIM           reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    COMMA           reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    CLOSE_PAREN     reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    CLOSE_BRACKET   reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    BLOCK_END       reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    COLON           reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    PLUS            shift and go to state 228
    MINUS           shift and go to state 229


state 303

    (51) and-expression -> and-expression BITAND equality-expression .
    (53) equality-expression -> equality-expression . EQ relational-expression
    (54) equality-expression -> equality-expression . NE relational-expression

    BITAND          reduce using rule 51 (and-expression -> and-expression BITAND equality-expression .)
    BITXOR          reduce using rule 51 (and-expression -> and-expression BITAND equality-expression .)
    BITOR           reduce using rule 51 (and-expression -> and-expression BITAND equality-expression .)
    LOGAND          reduce using rule 51 (and-expression -> and-expression BITAND equality-expression .)
    CONDOP          reduce using rule 51 (and-expression -> and-expression BITAND equality-expression .)
    LOGOR           reduce using rule 51 (and-expression -> and-expression BITAND equality-expression .)
    COLON           reduce using rule 51 (and-expression -> and-expression BITAND equality-expression .)
    COMMA           reduce using rule 51 (and-expression -> and-expression BITAND equality-expression .)
    CLOSE_PAREN     reduce using rule 51 (and-expression -> and-expression BITAND equality-expression .)
    DELIM           reduce using rule 51 (and-expression -> and-expression BITAND equality-expression .)
    CLOSE_BRACKET   reduce using rule 51 (and-expression -> and-expression BITAND equality-expression .)
    BLOCK_END       reduce using rule 51 (and-expression -> and-expression BITAND equality-expression .)
    EQ              shift and go to state 241
    NE              shift and go to state 242


state 304

    (68) multiplicative-expression -> multiplicative-expression DIV unary-expression .

    TIMES           reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    DIV             reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    MOD             reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    PLUS            reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    MINUS           reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    LSHIFT          reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    RSHIFT          reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    LT              reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    GT              reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    LE              reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    GE              reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    EQ              reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    NE              reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    BITAND          reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    BITXOR          reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    BITOR           reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    LOGAND          reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    CONDOP          reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    LOGOR           reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    COMMA           reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    CLOSE_PAREN     reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    DELIM           reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    CLOSE_BRACKET   reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    BLOCK_END       reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    COLON           reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)


state 305

    (69) multiplicative-expression -> multiplicative-expression MOD unary-expression .

    TIMES           reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    DIV             reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    MOD             reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    PLUS            reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    MINUS           reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    LSHIFT          reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    RSHIFT          reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    LT              reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    GT              reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    LE              reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    GE              reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    EQ              reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    NE              reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    BITAND          reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    BITXOR          reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    BITOR           reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    LOGAND          reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    CONDOP          reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    LOGOR           reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    COMMA           reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    CLOSE_PAREN     reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    DELIM           reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    CLOSE_BRACKET   reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    BLOCK_END       reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    COLON           reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)


state 306

    (67) multiplicative-expression -> multiplicative-expression TIMES unary-expression .

    TIMES           reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    DIV             reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    MOD             reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    PLUS            reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    MINUS           reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    LSHIFT          reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    RSHIFT          reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    LT              reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    GT              reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    LE              reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    GE              reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    EQ              reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    NE              reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    BITAND          reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    BITXOR          reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    BITOR           reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    LOGAND          reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    CONDOP          reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    LOGOR           reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    COMMA           reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    CLOSE_PAREN     reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    DELIM           reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    CLOSE_BRACKET   reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    BLOCK_END       reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    COLON           reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)


state 307

    (41) conditional-or-expression -> conditional-or-expression M_or LOGOR . conditional-and-expression
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression M_and LOGAND inclusive-or-expression
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . primary-no-array-creation-expression
    (83) primary-no-array-creation-expression -> . literal
    (84) primary-no-array-creation-expression -> . IDENTIFIER
    (85) primary-no-array-creation-expression -> . element-access
    (86) primary-no-array-creation-expression -> . parenthesized-expression
    (87) primary-no-array-creation-expression -> . member-access
    (88) primary-no-array-creation-expression -> . invocation-expression
    (89) primary-no-array-creation-expression -> . object-creation-expression
    (208) literal -> . ICONST
    (209) literal -> . DCONST
    (210) literal -> . TRUE
    (211) literal -> . FALSE
    (212) literal -> . CCONST
    (213) literal -> . SCONST
    (97) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (98) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (91) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (92) member-access -> . IDENTIFIER DOT IDENTIFIER
    (93) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (90) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 160
    MINUS           shift and go to state 151
    BITNOT          shift and go to state 174
    BITCOMP         shift and go to state 155
    IDENTIFIER      shift and go to state 233
    ICONST          shift and go to state 164
    DCONST          shift and go to state 148
    TRUE            shift and go to state 168
    FALSE           shift and go to state 166
    CCONST          shift and go to state 175
    SCONST          shift and go to state 154
    OPEN_PAREN      shift and go to state 157
    NEW             shift and go to state 149

    exclusive-or-expression        shift and go to state 145
    member-access                  shift and go to state 230
    relational-expression          shift and go to state 147
    additive-expression            shift and go to state 150
    inclusive-or-expression        shift and go to state 152
    unary-expression               shift and go to state 144
    element-access                 shift and go to state 232
    literal                        shift and go to state 163
    conditional-and-expression     shift and go to state 325
    primary-no-array-creation-expression shift and go to state 171
    object-creation-expression     shift and go to state 165
    equality-expression            shift and go to state 167
    shift-expression               shift and go to state 169
    and-expression                 shift and go to state 170
    multiplicative-expression      shift and go to state 172
    primary-expression             shift and go to state 176
    invocation-expression          shift and go to state 177
    parenthesized-expression       shift and go to state 179

state 308

    (39) conditional-expression -> conditional-or-expression CONDOP expression . COLON expression

    COLON           shift and go to state 326


state 309

    (194) statement-expression-list -> statement-expression-list COMMA . statement-expression
    (160) statement-expression -> . invocation-expression
    (161) statement-expression -> . assignment
    (93) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (99) assignment -> . IDENTIFIER assignment-operator expression
    (100) assignment -> . member-access assignment-operator expression
    (101) assignment -> . element-access assignment-operator expression
    (92) member-access -> . IDENTIFIER DOT IDENTIFIER
    (97) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (98) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    IDENTIFIER      shift and go to state 258

    assignment                     shift and go to state 104
    member-access                  shift and go to state 63
    element-access                 shift and go to state 74
    statement-expression           shift and go to state 327
    invocation-expression          shift and go to state 71

state 310

    (184) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM . M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block
    (169) M_quad -> . empty
    (214) empty -> .

    IDENTIFIER      reduce using rule 214 (empty -> .)
    PLUS            reduce using rule 214 (empty -> .)
    MINUS           reduce using rule 214 (empty -> .)
    BITNOT          reduce using rule 214 (empty -> .)
    BITCOMP         reduce using rule 214 (empty -> .)
    ICONST          reduce using rule 214 (empty -> .)
    DCONST          reduce using rule 214 (empty -> .)
    TRUE            reduce using rule 214 (empty -> .)
    FALSE           reduce using rule 214 (empty -> .)
    CCONST          reduce using rule 214 (empty -> .)
    SCONST          reduce using rule 214 (empty -> .)
    OPEN_PAREN      reduce using rule 214 (empty -> .)
    NEW             reduce using rule 214 (empty -> .)
    DELIM           reduce using rule 214 (empty -> .)

    M_quad                         shift and go to state 328
    empty                          shift and go to state 142

state 311

    (181) while-statement -> WHILE M_quad OPEN_PAREN expression . CLOSE_PAREN M_while block

    CLOSE_PAREN     shift and go to state 329


state 312

    (94) invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN . argument-list-opt CLOSE_PAREN
    (95) argument-list-opt -> . expression-list
    (96) argument-list-opt -> . empty
    (76) expression-list -> . expression
    (77) expression-list -> . expression-list COMMA expression
    (214) empty -> .
    (36) expression -> . conditional-expression
    (37) expression -> . assignment
    (38) conditional-expression -> . conditional-or-expression
    (39) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (99) assignment -> . IDENTIFIER assignment-operator expression
    (100) assignment -> . member-access assignment-operator expression
    (101) assignment -> . element-access assignment-operator expression
    (40) conditional-or-expression -> . conditional-and-expression
    (41) conditional-or-expression -> . conditional-or-expression M_or LOGOR conditional-and-expression
    (92) member-access -> . IDENTIFIER DOT IDENTIFIER
    (97) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (98) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression M_and LOGAND inclusive-or-expression
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . primary-no-array-creation-expression
    (83) primary-no-array-creation-expression -> . literal
    (84) primary-no-array-creation-expression -> . IDENTIFIER
    (85) primary-no-array-creation-expression -> . element-access
    (86) primary-no-array-creation-expression -> . parenthesized-expression
    (87) primary-no-array-creation-expression -> . member-access
    (88) primary-no-array-creation-expression -> . invocation-expression
    (89) primary-no-array-creation-expression -> . object-creation-expression
    (208) literal -> . ICONST
    (209) literal -> . DCONST
    (210) literal -> . TRUE
    (211) literal -> . FALSE
    (212) literal -> . CCONST
    (213) literal -> . SCONST
    (91) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (93) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (90) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    CLOSE_PAREN     reduce using rule 214 (empty -> .)
    IDENTIFIER      shift and go to state 161
    PLUS            shift and go to state 160
    MINUS           shift and go to state 151
    BITNOT          shift and go to state 174
    BITCOMP         shift and go to state 155
    ICONST          shift and go to state 164
    DCONST          shift and go to state 148
    TRUE            shift and go to state 168
    FALSE           shift and go to state 166
    CCONST          shift and go to state 175
    SCONST          shift and go to state 154
    OPEN_PAREN      shift and go to state 157
    NEW             shift and go to state 149

    argument-list-opt              shift and go to state 330
    exclusive-or-expression        shift and go to state 145
    member-access                  shift and go to state 146
    relational-expression          shift and go to state 147
    additive-expression            shift and go to state 150
    inclusive-or-expression        shift and go to state 152
    equality-expression            shift and go to state 167
    unary-expression               shift and go to state 144
    element-access                 shift and go to state 156
    literal                        shift and go to state 163
    conditional-expression         shift and go to state 158
    conditional-and-expression     shift and go to state 162
    assignment                     shift and go to state 159
    primary-no-array-creation-expression shift and go to state 171
    object-creation-expression     shift and go to state 165
    expression-list                shift and go to state 266
    shift-expression               shift and go to state 169
    and-expression                 shift and go to state 170
    multiplicative-expression      shift and go to state 172
    expression                     shift and go to state 267
    empty                          shift and go to state 265
    primary-expression             shift and go to state 176
    invocation-expression          shift and go to state 177
    conditional-or-expression      shift and go to state 173
    parenthesized-expression       shift and go to state 179

state 313

    (97) element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .

    ASSIGN          reduce using rule 97 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    PLUSEQUAL       reduce using rule 97 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    MINUSEQUAL      reduce using rule 97 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    TIMESEQUAL      reduce using rule 97 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    DIVEQUAL        reduce using rule 97 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    MODEQUAL        reduce using rule 97 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    BITANDEQUAL     reduce using rule 97 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    BITOREQUAL      reduce using rule 97 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    BITXOREQUAL     reduce using rule 97 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    LSHIFTEQUAL     reduce using rule 97 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    RSHIFTEQUAL     reduce using rule 97 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    TIMES           reduce using rule 97 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    DIV             reduce using rule 97 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    MOD             reduce using rule 97 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    PLUS            reduce using rule 97 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    MINUS           reduce using rule 97 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    LSHIFT          reduce using rule 97 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    RSHIFT          reduce using rule 97 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    LT              reduce using rule 97 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    GT              reduce using rule 97 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    LE              reduce using rule 97 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    GE              reduce using rule 97 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    EQ              reduce using rule 97 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    NE              reduce using rule 97 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    BITAND          reduce using rule 97 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    BITXOR          reduce using rule 97 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    BITOR           reduce using rule 97 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    LOGAND          reduce using rule 97 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    CONDOP          reduce using rule 97 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    LOGOR           reduce using rule 97 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    COMMA           reduce using rule 97 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    CLOSE_PAREN     reduce using rule 97 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    DELIM           reduce using rule 97 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 97 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    BLOCK_END       reduce using rule 97 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    COLON           reduce using rule 97 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)


state 314

    (93) invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .

    TIMES           reduce using rule 93 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    DIV             reduce using rule 93 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    MOD             reduce using rule 93 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    PLUS            reduce using rule 93 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    MINUS           reduce using rule 93 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LSHIFT          reduce using rule 93 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    RSHIFT          reduce using rule 93 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LT              reduce using rule 93 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    GT              reduce using rule 93 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LE              reduce using rule 93 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    GE              reduce using rule 93 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    EQ              reduce using rule 93 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    NE              reduce using rule 93 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITAND          reduce using rule 93 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITXOR          reduce using rule 93 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITOR           reduce using rule 93 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LOGAND          reduce using rule 93 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    CONDOP          reduce using rule 93 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LOGOR           reduce using rule 93 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    DELIM           reduce using rule 93 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    COMMA           reduce using rule 93 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    CLOSE_BRACKET   reduce using rule 93 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 93 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BLOCK_END       reduce using rule 93 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    COLON           reduce using rule 93 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)


state 315

    (77) expression-list -> expression-list COMMA . expression
    (36) expression -> . conditional-expression
    (37) expression -> . assignment
    (38) conditional-expression -> . conditional-or-expression
    (39) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (99) assignment -> . IDENTIFIER assignment-operator expression
    (100) assignment -> . member-access assignment-operator expression
    (101) assignment -> . element-access assignment-operator expression
    (40) conditional-or-expression -> . conditional-and-expression
    (41) conditional-or-expression -> . conditional-or-expression M_or LOGOR conditional-and-expression
    (92) member-access -> . IDENTIFIER DOT IDENTIFIER
    (97) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (98) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression M_and LOGAND inclusive-or-expression
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . primary-no-array-creation-expression
    (83) primary-no-array-creation-expression -> . literal
    (84) primary-no-array-creation-expression -> . IDENTIFIER
    (85) primary-no-array-creation-expression -> . element-access
    (86) primary-no-array-creation-expression -> . parenthesized-expression
    (87) primary-no-array-creation-expression -> . member-access
    (88) primary-no-array-creation-expression -> . invocation-expression
    (89) primary-no-array-creation-expression -> . object-creation-expression
    (208) literal -> . ICONST
    (209) literal -> . DCONST
    (210) literal -> . TRUE
    (211) literal -> . FALSE
    (212) literal -> . CCONST
    (213) literal -> . SCONST
    (91) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (93) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (90) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 161
    PLUS            shift and go to state 160
    MINUS           shift and go to state 151
    BITNOT          shift and go to state 174
    BITCOMP         shift and go to state 155
    ICONST          shift and go to state 164
    DCONST          shift and go to state 148
    TRUE            shift and go to state 168
    FALSE           shift and go to state 166
    CCONST          shift and go to state 175
    SCONST          shift and go to state 154
    OPEN_PAREN      shift and go to state 157
    NEW             shift and go to state 149

    exclusive-or-expression        shift and go to state 145
    member-access                  shift and go to state 146
    relational-expression          shift and go to state 147
    additive-expression            shift and go to state 150
    inclusive-or-expression        shift and go to state 152
    equality-expression            shift and go to state 167
    unary-expression               shift and go to state 144
    element-access                 shift and go to state 156
    literal                        shift and go to state 163
    conditional-expression         shift and go to state 158
    conditional-and-expression     shift and go to state 162
    assignment                     shift and go to state 159
    primary-no-array-creation-expression shift and go to state 171
    object-creation-expression     shift and go to state 165
    shift-expression               shift and go to state 169
    and-expression                 shift and go to state 170
    multiplicative-expression      shift and go to state 172
    expression                     shift and go to state 331
    primary-expression             shift and go to state 176
    invocation-expression          shift and go to state 177
    conditional-or-expression      shift and go to state 173
    parenthesized-expression       shift and go to state 179

state 316

    (170) switch-statement -> SWITCH OPEN_PAREN expression M_switch . CLOSE_PAREN M_quad switch-block

    CLOSE_PAREN     shift and go to state 332


state 317

    (171) M_switch -> empty .

    CLOSE_PAREN     reduce using rule 171 (M_switch -> empty .)


state 318

    (183) do-statement -> DO M_quad block WHILE . OPEN_PAREN M_quad expression CLOSE_PAREN DELIM

    OPEN_PAREN      shift and go to state 333


state 319

    (149) write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN . print-list CLOSE_PAREN DELIM
    (150) print-list -> . expression
    (151) print-list -> . expression COMMA print-list
    (36) expression -> . conditional-expression
    (37) expression -> . assignment
    (38) conditional-expression -> . conditional-or-expression
    (39) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (99) assignment -> . IDENTIFIER assignment-operator expression
    (100) assignment -> . member-access assignment-operator expression
    (101) assignment -> . element-access assignment-operator expression
    (40) conditional-or-expression -> . conditional-and-expression
    (41) conditional-or-expression -> . conditional-or-expression M_or LOGOR conditional-and-expression
    (92) member-access -> . IDENTIFIER DOT IDENTIFIER
    (97) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (98) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression M_and LOGAND inclusive-or-expression
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . primary-no-array-creation-expression
    (83) primary-no-array-creation-expression -> . literal
    (84) primary-no-array-creation-expression -> . IDENTIFIER
    (85) primary-no-array-creation-expression -> . element-access
    (86) primary-no-array-creation-expression -> . parenthesized-expression
    (87) primary-no-array-creation-expression -> . member-access
    (88) primary-no-array-creation-expression -> . invocation-expression
    (89) primary-no-array-creation-expression -> . object-creation-expression
    (208) literal -> . ICONST
    (209) literal -> . DCONST
    (210) literal -> . TRUE
    (211) literal -> . FALSE
    (212) literal -> . CCONST
    (213) literal -> . SCONST
    (91) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (93) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (90) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 161
    PLUS            shift and go to state 160
    MINUS           shift and go to state 151
    BITNOT          shift and go to state 174
    BITCOMP         shift and go to state 155
    ICONST          shift and go to state 164
    DCONST          shift and go to state 148
    TRUE            shift and go to state 168
    FALSE           shift and go to state 166
    CCONST          shift and go to state 175
    SCONST          shift and go to state 154
    OPEN_PAREN      shift and go to state 157
    NEW             shift and go to state 149

    exclusive-or-expression        shift and go to state 145
    member-access                  shift and go to state 146
    relational-expression          shift and go to state 147
    additive-expression            shift and go to state 150
    inclusive-or-expression        shift and go to state 152
    unary-expression               shift and go to state 144
    element-access                 shift and go to state 156
    literal                        shift and go to state 163
    conditional-expression         shift and go to state 158
    conditional-and-expression     shift and go to state 162
    assignment                     shift and go to state 159
    primary-no-array-creation-expression shift and go to state 171
    object-creation-expression     shift and go to state 165
    and-expression                 shift and go to state 170
    equality-expression            shift and go to state 167
    shift-expression               shift and go to state 169
    print-list                     shift and go to state 334
    multiplicative-expression      shift and go to state 172
    expression                     shift and go to state 335
    primary-expression             shift and go to state 176
    invocation-expression          shift and go to state 177
    conditional-or-expression      shift and go to state 173
    parenthesized-expression       shift and go to state 179

state 320

    (152) read-statement -> CONSOLE DOT READLINE OPEN_PAREN . IDENTIFIER CLOSE_PAREN DELIM

    IDENTIFIER      shift and go to state 336


state 321

    (164) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN . M_if block
    (165) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN . M_if block ELSE M_else block
    (166) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN . M_if block ELSE M_else if-statement M_quad
    (167) M_if -> . empty
    (214) empty -> .

    BLOCK_BEGIN     reduce using rule 214 (empty -> .)

    M_if                           shift and go to state 337
    empty                          shift and go to state 338

state 322

    (78) array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .

    DELIM           reduce using rule 78 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    COMMA           reduce using rule 78 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)


state 323

    (90) object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 339


state 324

    (45) conditional-and-expression -> conditional-and-expression M_and LOGAND inclusive-or-expression .
    (47) inclusive-or-expression -> inclusive-or-expression . BITOR exclusive-or-expression

    LOGAND          reduce using rule 45 (conditional-and-expression -> conditional-and-expression M_and LOGAND inclusive-or-expression .)
    CONDOP          reduce using rule 45 (conditional-and-expression -> conditional-and-expression M_and LOGAND inclusive-or-expression .)
    LOGOR           reduce using rule 45 (conditional-and-expression -> conditional-and-expression M_and LOGAND inclusive-or-expression .)
    CLOSE_PAREN     reduce using rule 45 (conditional-and-expression -> conditional-and-expression M_and LOGAND inclusive-or-expression .)
    CLOSE_BRACKET   reduce using rule 45 (conditional-and-expression -> conditional-and-expression M_and LOGAND inclusive-or-expression .)
    COMMA           reduce using rule 45 (conditional-and-expression -> conditional-and-expression M_and LOGAND inclusive-or-expression .)
    DELIM           reduce using rule 45 (conditional-and-expression -> conditional-and-expression M_and LOGAND inclusive-or-expression .)
    BLOCK_END       reduce using rule 45 (conditional-and-expression -> conditional-and-expression M_and LOGAND inclusive-or-expression .)
    COLON           reduce using rule 45 (conditional-and-expression -> conditional-and-expression M_and LOGAND inclusive-or-expression .)
    BITOR           shift and go to state 234


state 325

    (41) conditional-or-expression -> conditional-or-expression M_or LOGOR conditional-and-expression .
    (45) conditional-and-expression -> conditional-and-expression . M_and LOGAND inclusive-or-expression
    (43) M_and -> . empty
    (214) empty -> .

    CONDOP          reduce using rule 41 (conditional-or-expression -> conditional-or-expression M_or LOGOR conditional-and-expression .)
    LOGOR           reduce using rule 41 (conditional-or-expression -> conditional-or-expression M_or LOGOR conditional-and-expression .)
    COMMA           reduce using rule 41 (conditional-or-expression -> conditional-or-expression M_or LOGOR conditional-and-expression .)
    CLOSE_PAREN     reduce using rule 41 (conditional-or-expression -> conditional-or-expression M_or LOGOR conditional-and-expression .)
    CLOSE_BRACKET   reduce using rule 41 (conditional-or-expression -> conditional-or-expression M_or LOGOR conditional-and-expression .)
    BLOCK_END       reduce using rule 41 (conditional-or-expression -> conditional-or-expression M_or LOGOR conditional-and-expression .)
    DELIM           reduce using rule 41 (conditional-or-expression -> conditional-or-expression M_or LOGOR conditional-and-expression .)
    COLON           reduce using rule 41 (conditional-or-expression -> conditional-or-expression M_or LOGOR conditional-and-expression .)
    LOGAND          reduce using rule 214 (empty -> .)

    M_and                          shift and go to state 240
    empty                          shift and go to state 239

state 326

    (39) conditional-expression -> conditional-or-expression CONDOP expression COLON . expression
    (36) expression -> . conditional-expression
    (37) expression -> . assignment
    (38) conditional-expression -> . conditional-or-expression
    (39) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (99) assignment -> . IDENTIFIER assignment-operator expression
    (100) assignment -> . member-access assignment-operator expression
    (101) assignment -> . element-access assignment-operator expression
    (40) conditional-or-expression -> . conditional-and-expression
    (41) conditional-or-expression -> . conditional-or-expression M_or LOGOR conditional-and-expression
    (92) member-access -> . IDENTIFIER DOT IDENTIFIER
    (97) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (98) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression M_and LOGAND inclusive-or-expression
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . primary-no-array-creation-expression
    (83) primary-no-array-creation-expression -> . literal
    (84) primary-no-array-creation-expression -> . IDENTIFIER
    (85) primary-no-array-creation-expression -> . element-access
    (86) primary-no-array-creation-expression -> . parenthesized-expression
    (87) primary-no-array-creation-expression -> . member-access
    (88) primary-no-array-creation-expression -> . invocation-expression
    (89) primary-no-array-creation-expression -> . object-creation-expression
    (208) literal -> . ICONST
    (209) literal -> . DCONST
    (210) literal -> . TRUE
    (211) literal -> . FALSE
    (212) literal -> . CCONST
    (213) literal -> . SCONST
    (91) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (93) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (90) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 161
    PLUS            shift and go to state 160
    MINUS           shift and go to state 151
    BITNOT          shift and go to state 174
    BITCOMP         shift and go to state 155
    ICONST          shift and go to state 164
    DCONST          shift and go to state 148
    TRUE            shift and go to state 168
    FALSE           shift and go to state 166
    CCONST          shift and go to state 175
    SCONST          shift and go to state 154
    OPEN_PAREN      shift and go to state 157
    NEW             shift and go to state 149

    exclusive-or-expression        shift and go to state 145
    member-access                  shift and go to state 146
    relational-expression          shift and go to state 147
    additive-expression            shift and go to state 150
    inclusive-or-expression        shift and go to state 152
    unary-expression               shift and go to state 144
    element-access                 shift and go to state 156
    literal                        shift and go to state 163
    conditional-expression         shift and go to state 158
    conditional-and-expression     shift and go to state 162
    assignment                     shift and go to state 159
    primary-no-array-creation-expression shift and go to state 171
    object-creation-expression     shift and go to state 165
    equality-expression            shift and go to state 167
    shift-expression               shift and go to state 169
    and-expression                 shift and go to state 170
    multiplicative-expression      shift and go to state 172
    expression                     shift and go to state 340
    primary-expression             shift and go to state 176
    invocation-expression          shift and go to state 177
    conditional-or-expression      shift and go to state 173
    parenthesized-expression       shift and go to state 179

state 327

    (194) statement-expression-list -> statement-expression-list COMMA statement-expression .

    COMMA           reduce using rule 194 (statement-expression-list -> statement-expression-list COMMA statement-expression .)
    CLOSE_PAREN     reduce using rule 194 (statement-expression-list -> statement-expression-list COMMA statement-expression .)
    DELIM           reduce using rule 194 (statement-expression-list -> statement-expression-list COMMA statement-expression .)


state 328

    (184) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad . for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block
    (188) for-condition -> . expression
    (189) for-condition -> . empty
    (36) expression -> . conditional-expression
    (37) expression -> . assignment
    (214) empty -> .
    (38) conditional-expression -> . conditional-or-expression
    (39) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (99) assignment -> . IDENTIFIER assignment-operator expression
    (100) assignment -> . member-access assignment-operator expression
    (101) assignment -> . element-access assignment-operator expression
    (40) conditional-or-expression -> . conditional-and-expression
    (41) conditional-or-expression -> . conditional-or-expression M_or LOGOR conditional-and-expression
    (92) member-access -> . IDENTIFIER DOT IDENTIFIER
    (97) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (98) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression M_and LOGAND inclusive-or-expression
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . primary-no-array-creation-expression
    (83) primary-no-array-creation-expression -> . literal
    (84) primary-no-array-creation-expression -> . IDENTIFIER
    (85) primary-no-array-creation-expression -> . element-access
    (86) primary-no-array-creation-expression -> . parenthesized-expression
    (87) primary-no-array-creation-expression -> . member-access
    (88) primary-no-array-creation-expression -> . invocation-expression
    (89) primary-no-array-creation-expression -> . object-creation-expression
    (208) literal -> . ICONST
    (209) literal -> . DCONST
    (210) literal -> . TRUE
    (211) literal -> . FALSE
    (212) literal -> . CCONST
    (213) literal -> . SCONST
    (91) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (93) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (90) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    DELIM           reduce using rule 214 (empty -> .)
    IDENTIFIER      shift and go to state 161
    PLUS            shift and go to state 160
    MINUS           shift and go to state 151
    BITNOT          shift and go to state 174
    BITCOMP         shift and go to state 155
    ICONST          shift and go to state 164
    DCONST          shift and go to state 148
    TRUE            shift and go to state 168
    FALSE           shift and go to state 166
    CCONST          shift and go to state 175
    SCONST          shift and go to state 154
    OPEN_PAREN      shift and go to state 157
    NEW             shift and go to state 149

    exclusive-or-expression        shift and go to state 145
    member-access                  shift and go to state 146
    relational-expression          shift and go to state 147
    for-condition                  shift and go to state 341
    additive-expression            shift and go to state 150
    unary-expression               shift and go to state 144
    element-access                 shift and go to state 156
    literal                        shift and go to state 163
    conditional-expression         shift and go to state 158
    assignment                     shift and go to state 159
    empty                          shift and go to state 342
    conditional-and-expression     shift and go to state 162
    primary-no-array-creation-expression shift and go to state 171
    object-creation-expression     shift and go to state 165
    equality-expression            shift and go to state 167
    shift-expression               shift and go to state 169
    and-expression                 shift and go to state 170
    multiplicative-expression      shift and go to state 172
    expression                     shift and go to state 343
    parenthesized-expression       shift and go to state 179
    inclusive-or-expression        shift and go to state 152
    primary-expression             shift and go to state 176
    invocation-expression          shift and go to state 177
    conditional-or-expression      shift and go to state 173

state 329

    (181) while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN . M_while block
    (182) M_while -> . empty
    (214) empty -> .

    BLOCK_BEGIN     reduce using rule 214 (empty -> .)

    M_while                        shift and go to state 344
    empty                          shift and go to state 345

state 330

    (94) invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 346


state 331

    (77) expression-list -> expression-list COMMA expression .

    COMMA           reduce using rule 77 (expression-list -> expression-list COMMA expression .)
    CLOSE_PAREN     reduce using rule 77 (expression-list -> expression-list COMMA expression .)
    BLOCK_END       reduce using rule 77 (expression-list -> expression-list COMMA expression .)


state 332

    (170) switch-statement -> SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN . M_quad switch-block
    (169) M_quad -> . empty
    (214) empty -> .

    BLOCK_BEGIN     reduce using rule 214 (empty -> .)

    M_quad                         shift and go to state 347
    empty                          shift and go to state 142

state 333

    (183) do-statement -> DO M_quad block WHILE OPEN_PAREN . M_quad expression CLOSE_PAREN DELIM
    (169) M_quad -> . empty
    (214) empty -> .

    IDENTIFIER      reduce using rule 214 (empty -> .)
    PLUS            reduce using rule 214 (empty -> .)
    MINUS           reduce using rule 214 (empty -> .)
    BITNOT          reduce using rule 214 (empty -> .)
    BITCOMP         reduce using rule 214 (empty -> .)
    ICONST          reduce using rule 214 (empty -> .)
    DCONST          reduce using rule 214 (empty -> .)
    TRUE            reduce using rule 214 (empty -> .)
    FALSE           reduce using rule 214 (empty -> .)
    CCONST          reduce using rule 214 (empty -> .)
    SCONST          reduce using rule 214 (empty -> .)
    OPEN_PAREN      reduce using rule 214 (empty -> .)
    NEW             reduce using rule 214 (empty -> .)

    M_quad                         shift and go to state 348
    empty                          shift and go to state 142

state 334

    (149) write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list . CLOSE_PAREN DELIM

    CLOSE_PAREN     shift and go to state 349


state 335

    (150) print-list -> expression .
    (151) print-list -> expression . COMMA print-list

    CLOSE_PAREN     reduce using rule 150 (print-list -> expression .)
    COMMA           shift and go to state 350


state 336

    (152) read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER . CLOSE_PAREN DELIM

    CLOSE_PAREN     shift and go to state 351


state 337

    (164) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if . block
    (165) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if . block ELSE M_else block
    (166) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if . block ELSE M_else if-statement M_quad
    (132) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END

    BLOCK_BEGIN     shift and go to state 58

    block                          shift and go to state 352

state 338

    (167) M_if -> empty .

    BLOCK_BEGIN     reduce using rule 167 (M_if -> empty .)


state 339

    (90) object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN .

    TIMES           reduce using rule 90 (object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    DIV             reduce using rule 90 (object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    MOD             reduce using rule 90 (object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    PLUS            reduce using rule 90 (object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    MINUS           reduce using rule 90 (object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LSHIFT          reduce using rule 90 (object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    RSHIFT          reduce using rule 90 (object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LT              reduce using rule 90 (object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    GT              reduce using rule 90 (object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LE              reduce using rule 90 (object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    GE              reduce using rule 90 (object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    EQ              reduce using rule 90 (object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    NE              reduce using rule 90 (object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITAND          reduce using rule 90 (object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITXOR          reduce using rule 90 (object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITOR           reduce using rule 90 (object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LOGAND          reduce using rule 90 (object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    CONDOP          reduce using rule 90 (object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LOGOR           reduce using rule 90 (object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 90 (object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    DELIM           reduce using rule 90 (object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    COMMA           reduce using rule 90 (object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    CLOSE_BRACKET   reduce using rule 90 (object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BLOCK_END       reduce using rule 90 (object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    COLON           reduce using rule 90 (object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN .)


state 340

    (39) conditional-expression -> conditional-or-expression CONDOP expression COLON expression .

    DELIM           reduce using rule 39 (conditional-expression -> conditional-or-expression CONDOP expression COLON expression .)
    CLOSE_PAREN     reduce using rule 39 (conditional-expression -> conditional-or-expression CONDOP expression COLON expression .)
    COMMA           reduce using rule 39 (conditional-expression -> conditional-or-expression CONDOP expression COLON expression .)
    CLOSE_BRACKET   reduce using rule 39 (conditional-expression -> conditional-or-expression CONDOP expression COLON expression .)
    BLOCK_END       reduce using rule 39 (conditional-expression -> conditional-or-expression CONDOP expression COLON expression .)
    COLON           reduce using rule 39 (conditional-expression -> conditional-or-expression CONDOP expression COLON expression .)


state 341

    (184) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition . DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block

    DELIM           shift and go to state 353


state 342

    (189) for-condition -> empty .

    DELIM           reduce using rule 189 (for-condition -> empty .)


state 343

    (188) for-condition -> expression .

    DELIM           reduce using rule 188 (for-condition -> expression .)


state 344

    (181) while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while . block
    (132) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END

    BLOCK_BEGIN     shift and go to state 58

    block                          shift and go to state 354

state 345

    (182) M_while -> empty .

    BLOCK_BEGIN     reduce using rule 182 (M_while -> empty .)


state 346

    (94) invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .

    TIMES           reduce using rule 94 (invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    DIV             reduce using rule 94 (invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    MOD             reduce using rule 94 (invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    PLUS            reduce using rule 94 (invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    MINUS           reduce using rule 94 (invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LSHIFT          reduce using rule 94 (invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    RSHIFT          reduce using rule 94 (invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LT              reduce using rule 94 (invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    GT              reduce using rule 94 (invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LE              reduce using rule 94 (invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    GE              reduce using rule 94 (invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    EQ              reduce using rule 94 (invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    NE              reduce using rule 94 (invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITAND          reduce using rule 94 (invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITXOR          reduce using rule 94 (invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITOR           reduce using rule 94 (invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LOGAND          reduce using rule 94 (invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    CONDOP          reduce using rule 94 (invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LOGOR           reduce using rule 94 (invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    DELIM           reduce using rule 94 (invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    COMMA           reduce using rule 94 (invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    CLOSE_BRACKET   reduce using rule 94 (invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 94 (invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BLOCK_END       reduce using rule 94 (invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    COLON           reduce using rule 94 (invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)


state 347

    (170) switch-statement -> SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad . switch-block
    (172) switch-block -> . BLOCK_BEGIN M_bstart switch-sections BLOCK_END

    BLOCK_BEGIN     shift and go to state 355

    switch-block                   shift and go to state 356

state 348

    (183) do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad . expression CLOSE_PAREN DELIM
    (36) expression -> . conditional-expression
    (37) expression -> . assignment
    (38) conditional-expression -> . conditional-or-expression
    (39) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (99) assignment -> . IDENTIFIER assignment-operator expression
    (100) assignment -> . member-access assignment-operator expression
    (101) assignment -> . element-access assignment-operator expression
    (40) conditional-or-expression -> . conditional-and-expression
    (41) conditional-or-expression -> . conditional-or-expression M_or LOGOR conditional-and-expression
    (92) member-access -> . IDENTIFIER DOT IDENTIFIER
    (97) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (98) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression M_and LOGAND inclusive-or-expression
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . primary-no-array-creation-expression
    (83) primary-no-array-creation-expression -> . literal
    (84) primary-no-array-creation-expression -> . IDENTIFIER
    (85) primary-no-array-creation-expression -> . element-access
    (86) primary-no-array-creation-expression -> . parenthesized-expression
    (87) primary-no-array-creation-expression -> . member-access
    (88) primary-no-array-creation-expression -> . invocation-expression
    (89) primary-no-array-creation-expression -> . object-creation-expression
    (208) literal -> . ICONST
    (209) literal -> . DCONST
    (210) literal -> . TRUE
    (211) literal -> . FALSE
    (212) literal -> . CCONST
    (213) literal -> . SCONST
    (91) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (93) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (90) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 161
    PLUS            shift and go to state 160
    MINUS           shift and go to state 151
    BITNOT          shift and go to state 174
    BITCOMP         shift and go to state 155
    ICONST          shift and go to state 164
    DCONST          shift and go to state 148
    TRUE            shift and go to state 168
    FALSE           shift and go to state 166
    CCONST          shift and go to state 175
    SCONST          shift and go to state 154
    OPEN_PAREN      shift and go to state 157
    NEW             shift and go to state 149

    exclusive-or-expression        shift and go to state 145
    member-access                  shift and go to state 146
    relational-expression          shift and go to state 147
    additive-expression            shift and go to state 150
    inclusive-or-expression        shift and go to state 152
    unary-expression               shift and go to state 144
    element-access                 shift and go to state 156
    literal                        shift and go to state 163
    conditional-expression         shift and go to state 158
    conditional-and-expression     shift and go to state 162
    assignment                     shift and go to state 159
    primary-no-array-creation-expression shift and go to state 171
    object-creation-expression     shift and go to state 165
    equality-expression            shift and go to state 167
    shift-expression               shift and go to state 169
    and-expression                 shift and go to state 170
    multiplicative-expression      shift and go to state 172
    conditional-or-expression      shift and go to state 173
    primary-expression             shift and go to state 176
    invocation-expression          shift and go to state 177
    expression                     shift and go to state 357
    parenthesized-expression       shift and go to state 179

state 349

    (149) write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN . DELIM

    DELIM           shift and go to state 358


state 350

    (151) print-list -> expression COMMA . print-list
    (150) print-list -> . expression
    (151) print-list -> . expression COMMA print-list
    (36) expression -> . conditional-expression
    (37) expression -> . assignment
    (38) conditional-expression -> . conditional-or-expression
    (39) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (99) assignment -> . IDENTIFIER assignment-operator expression
    (100) assignment -> . member-access assignment-operator expression
    (101) assignment -> . element-access assignment-operator expression
    (40) conditional-or-expression -> . conditional-and-expression
    (41) conditional-or-expression -> . conditional-or-expression M_or LOGOR conditional-and-expression
    (92) member-access -> . IDENTIFIER DOT IDENTIFIER
    (97) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (98) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression M_and LOGAND inclusive-or-expression
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . primary-no-array-creation-expression
    (83) primary-no-array-creation-expression -> . literal
    (84) primary-no-array-creation-expression -> . IDENTIFIER
    (85) primary-no-array-creation-expression -> . element-access
    (86) primary-no-array-creation-expression -> . parenthesized-expression
    (87) primary-no-array-creation-expression -> . member-access
    (88) primary-no-array-creation-expression -> . invocation-expression
    (89) primary-no-array-creation-expression -> . object-creation-expression
    (208) literal -> . ICONST
    (209) literal -> . DCONST
    (210) literal -> . TRUE
    (211) literal -> . FALSE
    (212) literal -> . CCONST
    (213) literal -> . SCONST
    (91) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (93) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (90) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 161
    PLUS            shift and go to state 160
    MINUS           shift and go to state 151
    BITNOT          shift and go to state 174
    BITCOMP         shift and go to state 155
    ICONST          shift and go to state 164
    DCONST          shift and go to state 148
    TRUE            shift and go to state 168
    FALSE           shift and go to state 166
    CCONST          shift and go to state 175
    SCONST          shift and go to state 154
    OPEN_PAREN      shift and go to state 157
    NEW             shift and go to state 149

    exclusive-or-expression        shift and go to state 145
    member-access                  shift and go to state 146
    relational-expression          shift and go to state 147
    additive-expression            shift and go to state 150
    inclusive-or-expression        shift and go to state 152
    unary-expression               shift and go to state 144
    element-access                 shift and go to state 156
    literal                        shift and go to state 163
    conditional-expression         shift and go to state 158
    conditional-and-expression     shift and go to state 162
    assignment                     shift and go to state 159
    primary-no-array-creation-expression shift and go to state 171
    object-creation-expression     shift and go to state 165
    and-expression                 shift and go to state 170
    equality-expression            shift and go to state 167
    shift-expression               shift and go to state 169
    print-list                     shift and go to state 359
    multiplicative-expression      shift and go to state 172
    conditional-or-expression      shift and go to state 173
    primary-expression             shift and go to state 176
    invocation-expression          shift and go to state 177
    expression                     shift and go to state 335
    parenthesized-expression       shift and go to state 179

state 351

    (152) read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN . DELIM

    DELIM           shift and go to state 360


state 352

    (164) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .
    (165) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block . ELSE M_else block
    (166) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block . ELSE M_else if-statement M_quad

    IDENTIFIER      reduce using rule 164 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    BLOCK_BEGIN     reduce using rule 164 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    DELIM           reduce using rule 164 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    CONSOLE         reduce using rule 164 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    CONST           reduce using rule 164 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    IF              reduce using rule 164 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    SWITCH          reduce using rule 164 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    WHILE           reduce using rule 164 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    FOR             reduce using rule 164 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    DO              reduce using rule 164 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    BREAK           reduce using rule 164 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    CONTINUE        reduce using rule 164 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    GOTO            reduce using rule 164 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    RETURN          reduce using rule 164 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    VOID            reduce using rule 164 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    BOOL            reduce using rule 164 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    INT             reduce using rule 164 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    UINT            reduce using rule 164 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    CHAR            reduce using rule 164 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    DOUBLE          reduce using rule 164 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    STRING          reduce using rule 164 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    BLOCK_END       reduce using rule 164 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    CASE            reduce using rule 164 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    DEFAULT         reduce using rule 164 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    ELSE            shift and go to state 361


state 353

    (184) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM . M_quad for-iterator-opt CLOSE_PAREN M_quad block
    (169) M_quad -> . empty
    (214) empty -> .

    IDENTIFIER      reduce using rule 214 (empty -> .)
    CLOSE_PAREN     reduce using rule 214 (empty -> .)

    M_quad                         shift and go to state 362
    empty                          shift and go to state 142

state 354

    (181) while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .

    IDENTIFIER      reduce using rule 181 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    BLOCK_BEGIN     reduce using rule 181 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    DELIM           reduce using rule 181 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    CONSOLE         reduce using rule 181 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    CONST           reduce using rule 181 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    IF              reduce using rule 181 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    SWITCH          reduce using rule 181 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    WHILE           reduce using rule 181 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    FOR             reduce using rule 181 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    DO              reduce using rule 181 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    BREAK           reduce using rule 181 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    CONTINUE        reduce using rule 181 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    GOTO            reduce using rule 181 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    RETURN          reduce using rule 181 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    VOID            reduce using rule 181 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    BOOL            reduce using rule 181 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    INT             reduce using rule 181 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    UINT            reduce using rule 181 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    CHAR            reduce using rule 181 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    DOUBLE          reduce using rule 181 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    STRING          reduce using rule 181 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    BLOCK_END       reduce using rule 181 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    CASE            reduce using rule 181 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    DEFAULT         reduce using rule 181 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)


state 355

    (172) switch-block -> BLOCK_BEGIN . M_bstart switch-sections BLOCK_END
    (133) M_bstart -> . empty
    (214) empty -> .

    CASE            reduce using rule 214 (empty -> .)
    DEFAULT         reduce using rule 214 (empty -> .)

    M_bstart                       shift and go to state 363
    empty                          shift and go to state 123

state 356

    (170) switch-statement -> SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block .

    IDENTIFIER      reduce using rule 170 (switch-statement -> SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block .)
    BLOCK_BEGIN     reduce using rule 170 (switch-statement -> SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block .)
    DELIM           reduce using rule 170 (switch-statement -> SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block .)
    CONSOLE         reduce using rule 170 (switch-statement -> SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block .)
    CONST           reduce using rule 170 (switch-statement -> SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block .)
    IF              reduce using rule 170 (switch-statement -> SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block .)
    SWITCH          reduce using rule 170 (switch-statement -> SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block .)
    WHILE           reduce using rule 170 (switch-statement -> SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block .)
    FOR             reduce using rule 170 (switch-statement -> SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block .)
    DO              reduce using rule 170 (switch-statement -> SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block .)
    BREAK           reduce using rule 170 (switch-statement -> SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block .)
    CONTINUE        reduce using rule 170 (switch-statement -> SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block .)
    GOTO            reduce using rule 170 (switch-statement -> SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block .)
    RETURN          reduce using rule 170 (switch-statement -> SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block .)
    VOID            reduce using rule 170 (switch-statement -> SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block .)
    BOOL            reduce using rule 170 (switch-statement -> SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block .)
    INT             reduce using rule 170 (switch-statement -> SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block .)
    UINT            reduce using rule 170 (switch-statement -> SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block .)
    CHAR            reduce using rule 170 (switch-statement -> SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block .)
    DOUBLE          reduce using rule 170 (switch-statement -> SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block .)
    STRING          reduce using rule 170 (switch-statement -> SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block .)
    BLOCK_END       reduce using rule 170 (switch-statement -> SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block .)
    CASE            reduce using rule 170 (switch-statement -> SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block .)
    DEFAULT         reduce using rule 170 (switch-statement -> SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block .)


state 357

    (183) do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression . CLOSE_PAREN DELIM

    CLOSE_PAREN     shift and go to state 364


state 358

    (149) write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .

    IDENTIFIER      reduce using rule 149 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    BLOCK_BEGIN     reduce using rule 149 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    DELIM           reduce using rule 149 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    CONSOLE         reduce using rule 149 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    CONST           reduce using rule 149 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    IF              reduce using rule 149 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    SWITCH          reduce using rule 149 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    WHILE           reduce using rule 149 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    FOR             reduce using rule 149 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    DO              reduce using rule 149 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    BREAK           reduce using rule 149 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    CONTINUE        reduce using rule 149 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    GOTO            reduce using rule 149 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    RETURN          reduce using rule 149 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    VOID            reduce using rule 149 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    BOOL            reduce using rule 149 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    INT             reduce using rule 149 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    UINT            reduce using rule 149 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    CHAR            reduce using rule 149 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    DOUBLE          reduce using rule 149 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    STRING          reduce using rule 149 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    BLOCK_END       reduce using rule 149 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    CASE            reduce using rule 149 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    DEFAULT         reduce using rule 149 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)


state 359

    (151) print-list -> expression COMMA print-list .

    CLOSE_PAREN     reduce using rule 151 (print-list -> expression COMMA print-list .)


state 360

    (152) read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .

    IDENTIFIER      reduce using rule 152 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    BLOCK_BEGIN     reduce using rule 152 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    DELIM           reduce using rule 152 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    CONSOLE         reduce using rule 152 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    CONST           reduce using rule 152 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    IF              reduce using rule 152 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    SWITCH          reduce using rule 152 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    WHILE           reduce using rule 152 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    FOR             reduce using rule 152 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    DO              reduce using rule 152 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    BREAK           reduce using rule 152 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    CONTINUE        reduce using rule 152 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    GOTO            reduce using rule 152 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    RETURN          reduce using rule 152 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    VOID            reduce using rule 152 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    BOOL            reduce using rule 152 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    INT             reduce using rule 152 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    UINT            reduce using rule 152 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    CHAR            reduce using rule 152 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    DOUBLE          reduce using rule 152 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    STRING          reduce using rule 152 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    BLOCK_END       reduce using rule 152 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    CASE            reduce using rule 152 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    DEFAULT         reduce using rule 152 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)


state 361

    (165) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE . M_else block
    (166) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE . M_else if-statement M_quad
    (168) M_else -> . empty
    (214) empty -> .

    BLOCK_BEGIN     reduce using rule 214 (empty -> .)
    IF              reduce using rule 214 (empty -> .)

    empty                          shift and go to state 366
    M_else                         shift and go to state 365

state 362

    (184) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad . for-iterator-opt CLOSE_PAREN M_quad block
    (190) for-iterator-opt -> . for-iterator
    (191) for-iterator-opt -> . empty
    (192) for-iterator -> . statement-expression-list
    (214) empty -> .
    (193) statement-expression-list -> . statement-expression
    (194) statement-expression-list -> . statement-expression-list COMMA statement-expression
    (160) statement-expression -> . invocation-expression
    (161) statement-expression -> . assignment
    (93) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (99) assignment -> . IDENTIFIER assignment-operator expression
    (100) assignment -> . member-access assignment-operator expression
    (101) assignment -> . element-access assignment-operator expression
    (92) member-access -> . IDENTIFIER DOT IDENTIFIER
    (97) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (98) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    CLOSE_PAREN     reduce using rule 214 (empty -> .)
    IDENTIFIER      shift and go to state 258

    for-iterator-opt               shift and go to state 367
    assignment                     shift and go to state 104
    member-access                  shift and go to state 63
    element-access                 shift and go to state 74
    invocation-expression          shift and go to state 71
    statement-expression           shift and go to state 256
    empty                          shift and go to state 370
    for-iterator                   shift and go to state 368
    statement-expression-list      shift and go to state 369

state 363

    (172) switch-block -> BLOCK_BEGIN M_bstart . switch-sections BLOCK_END
    (173) switch-sections -> . switch-section
    (174) switch-sections -> . switch-sections switch-section
    (175) switch-section -> . switch-label M_quad statement-list
    (176) switch-label -> . CASE literal COLON
    (177) switch-label -> . DEFAULT COLON

    CASE            shift and go to state 371
    DEFAULT         shift and go to state 372

    switch-section                 shift and go to state 373
    switch-label                   shift and go to state 374
    switch-sections                shift and go to state 375

state 364

    (183) do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN . DELIM

    DELIM           shift and go to state 376


state 365

    (165) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else . block
    (166) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else . if-statement M_quad
    (132) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END
    (164) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block
    (165) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block
    (166) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad

    BLOCK_BEGIN     shift and go to state 58
    IF              shift and go to state 105

    if-statement                   shift and go to state 377
    block                          shift and go to state 378

state 366

    (168) M_else -> empty .

    BLOCK_BEGIN     reduce using rule 168 (M_else -> empty .)
    IF              reduce using rule 168 (M_else -> empty .)


state 367

    (184) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt . CLOSE_PAREN M_quad block

    CLOSE_PAREN     shift and go to state 379


state 368

    (190) for-iterator-opt -> for-iterator .

    CLOSE_PAREN     reduce using rule 190 (for-iterator-opt -> for-iterator .)


state 369

    (192) for-iterator -> statement-expression-list .
    (194) statement-expression-list -> statement-expression-list . COMMA statement-expression

    CLOSE_PAREN     reduce using rule 192 (for-iterator -> statement-expression-list .)
    COMMA           shift and go to state 309


state 370

    (191) for-iterator-opt -> empty .

    CLOSE_PAREN     reduce using rule 191 (for-iterator-opt -> empty .)


state 371

    (176) switch-label -> CASE . literal COLON
    (208) literal -> . ICONST
    (209) literal -> . DCONST
    (210) literal -> . TRUE
    (211) literal -> . FALSE
    (212) literal -> . CCONST
    (213) literal -> . SCONST

    ICONST          shift and go to state 164
    DCONST          shift and go to state 148
    TRUE            shift and go to state 168
    FALSE           shift and go to state 166
    CCONST          shift and go to state 175
    SCONST          shift and go to state 154

    literal                        shift and go to state 380

state 372

    (177) switch-label -> DEFAULT . COLON

    COLON           shift and go to state 381


state 373

    (173) switch-sections -> switch-section .

    BLOCK_END       reduce using rule 173 (switch-sections -> switch-section .)
    CASE            reduce using rule 173 (switch-sections -> switch-section .)
    DEFAULT         reduce using rule 173 (switch-sections -> switch-section .)


state 374

    (175) switch-section -> switch-label . M_quad statement-list
    (169) M_quad -> . empty
    (214) empty -> .

    IDENTIFIER      reduce using rule 214 (empty -> .)
    BLOCK_BEGIN     reduce using rule 214 (empty -> .)
    DELIM           reduce using rule 214 (empty -> .)
    CONSOLE         reduce using rule 214 (empty -> .)
    CONST           reduce using rule 214 (empty -> .)
    IF              reduce using rule 214 (empty -> .)
    SWITCH          reduce using rule 214 (empty -> .)
    WHILE           reduce using rule 214 (empty -> .)
    FOR             reduce using rule 214 (empty -> .)
    DO              reduce using rule 214 (empty -> .)
    BREAK           reduce using rule 214 (empty -> .)
    CONTINUE        reduce using rule 214 (empty -> .)
    GOTO            reduce using rule 214 (empty -> .)
    RETURN          reduce using rule 214 (empty -> .)
    VOID            reduce using rule 214 (empty -> .)
    BOOL            reduce using rule 214 (empty -> .)
    INT             reduce using rule 214 (empty -> .)
    UINT            reduce using rule 214 (empty -> .)
    CHAR            reduce using rule 214 (empty -> .)
    DOUBLE          reduce using rule 214 (empty -> .)
    STRING          reduce using rule 214 (empty -> .)

    empty                          shift and go to state 142
    M_quad                         shift and go to state 382

state 375

    (172) switch-block -> BLOCK_BEGIN M_bstart switch-sections . BLOCK_END
    (174) switch-sections -> switch-sections . switch-section
    (175) switch-section -> . switch-label M_quad statement-list
    (176) switch-label -> . CASE literal COLON
    (177) switch-label -> . DEFAULT COLON

    BLOCK_END       shift and go to state 383
    CASE            shift and go to state 371
    DEFAULT         shift and go to state 372

    switch-section                 shift and go to state 384
    switch-label                   shift and go to state 374

state 376

    (183) do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .

    IDENTIFIER      reduce using rule 183 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    BLOCK_BEGIN     reduce using rule 183 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    DELIM           reduce using rule 183 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    CONSOLE         reduce using rule 183 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    CONST           reduce using rule 183 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    IF              reduce using rule 183 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    SWITCH          reduce using rule 183 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    WHILE           reduce using rule 183 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    FOR             reduce using rule 183 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    DO              reduce using rule 183 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    BREAK           reduce using rule 183 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    CONTINUE        reduce using rule 183 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    GOTO            reduce using rule 183 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    RETURN          reduce using rule 183 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    VOID            reduce using rule 183 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    BOOL            reduce using rule 183 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    INT             reduce using rule 183 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    UINT            reduce using rule 183 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    CHAR            reduce using rule 183 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    DOUBLE          reduce using rule 183 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    STRING          reduce using rule 183 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    BLOCK_END       reduce using rule 183 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    CASE            reduce using rule 183 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    DEFAULT         reduce using rule 183 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)


state 377

    (166) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement . M_quad
    (169) M_quad -> . empty
    (214) empty -> .

    IDENTIFIER      reduce using rule 214 (empty -> .)
    BLOCK_BEGIN     reduce using rule 214 (empty -> .)
    DELIM           reduce using rule 214 (empty -> .)
    CONSOLE         reduce using rule 214 (empty -> .)
    CONST           reduce using rule 214 (empty -> .)
    IF              reduce using rule 214 (empty -> .)
    SWITCH          reduce using rule 214 (empty -> .)
    WHILE           reduce using rule 214 (empty -> .)
    FOR             reduce using rule 214 (empty -> .)
    DO              reduce using rule 214 (empty -> .)
    BREAK           reduce using rule 214 (empty -> .)
    CONTINUE        reduce using rule 214 (empty -> .)
    GOTO            reduce using rule 214 (empty -> .)
    RETURN          reduce using rule 214 (empty -> .)
    VOID            reduce using rule 214 (empty -> .)
    BOOL            reduce using rule 214 (empty -> .)
    INT             reduce using rule 214 (empty -> .)
    UINT            reduce using rule 214 (empty -> .)
    CHAR            reduce using rule 214 (empty -> .)
    DOUBLE          reduce using rule 214 (empty -> .)
    STRING          reduce using rule 214 (empty -> .)
    BLOCK_END       reduce using rule 214 (empty -> .)
    CASE            reduce using rule 214 (empty -> .)
    DEFAULT         reduce using rule 214 (empty -> .)

    empty                          shift and go to state 142
    M_quad                         shift and go to state 385

state 378

    (165) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .

    IDENTIFIER      reduce using rule 165 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    BLOCK_BEGIN     reduce using rule 165 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    DELIM           reduce using rule 165 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    CONSOLE         reduce using rule 165 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    CONST           reduce using rule 165 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    IF              reduce using rule 165 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    SWITCH          reduce using rule 165 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    WHILE           reduce using rule 165 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    FOR             reduce using rule 165 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    DO              reduce using rule 165 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    BREAK           reduce using rule 165 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    CONTINUE        reduce using rule 165 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    GOTO            reduce using rule 165 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    RETURN          reduce using rule 165 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    VOID            reduce using rule 165 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    BOOL            reduce using rule 165 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    INT             reduce using rule 165 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    UINT            reduce using rule 165 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    CHAR            reduce using rule 165 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    DOUBLE          reduce using rule 165 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    STRING          reduce using rule 165 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    BLOCK_END       reduce using rule 165 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    CASE            reduce using rule 165 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    DEFAULT         reduce using rule 165 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)


state 379

    (184) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN . M_quad block
    (169) M_quad -> . empty
    (214) empty -> .

    BLOCK_BEGIN     reduce using rule 214 (empty -> .)

    M_quad                         shift and go to state 386
    empty                          shift and go to state 142

state 380

    (176) switch-label -> CASE literal . COLON

    COLON           shift and go to state 387


state 381

    (177) switch-label -> DEFAULT COLON .

    IDENTIFIER      reduce using rule 177 (switch-label -> DEFAULT COLON .)
    BLOCK_BEGIN     reduce using rule 177 (switch-label -> DEFAULT COLON .)
    DELIM           reduce using rule 177 (switch-label -> DEFAULT COLON .)
    CONSOLE         reduce using rule 177 (switch-label -> DEFAULT COLON .)
    CONST           reduce using rule 177 (switch-label -> DEFAULT COLON .)
    IF              reduce using rule 177 (switch-label -> DEFAULT COLON .)
    SWITCH          reduce using rule 177 (switch-label -> DEFAULT COLON .)
    WHILE           reduce using rule 177 (switch-label -> DEFAULT COLON .)
    FOR             reduce using rule 177 (switch-label -> DEFAULT COLON .)
    DO              reduce using rule 177 (switch-label -> DEFAULT COLON .)
    BREAK           reduce using rule 177 (switch-label -> DEFAULT COLON .)
    CONTINUE        reduce using rule 177 (switch-label -> DEFAULT COLON .)
    GOTO            reduce using rule 177 (switch-label -> DEFAULT COLON .)
    RETURN          reduce using rule 177 (switch-label -> DEFAULT COLON .)
    VOID            reduce using rule 177 (switch-label -> DEFAULT COLON .)
    BOOL            reduce using rule 177 (switch-label -> DEFAULT COLON .)
    INT             reduce using rule 177 (switch-label -> DEFAULT COLON .)
    UINT            reduce using rule 177 (switch-label -> DEFAULT COLON .)
    CHAR            reduce using rule 177 (switch-label -> DEFAULT COLON .)
    DOUBLE          reduce using rule 177 (switch-label -> DEFAULT COLON .)
    STRING          reduce using rule 177 (switch-label -> DEFAULT COLON .)


state 382

    (175) switch-section -> switch-label M_quad . statement-list
    (136) statement-list -> . statement
    (137) statement-list -> . statement-list statement
    (138) statement -> . labeled-statement
    (139) statement -> . declaration-statement
    (140) statement -> . block
    (141) statement -> . empty-statement
    (142) statement -> . expression-statement
    (143) statement -> . selection-statement
    (144) statement -> . iteration-statement
    (145) statement -> . jump-statement
    (146) statement -> . write-statement
    (147) statement -> . read-statement
    (148) statement -> . method-declaration
    (153) labeled-statement -> . IDENTIFIER COLON statement
    (154) declaration-statement -> . local-variable-declaration DELIM
    (155) declaration-statement -> . local-constant-declaration DELIM
    (132) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END
    (158) empty-statement -> . DELIM
    (159) expression-statement -> . statement-expression DELIM
    (162) selection-statement -> . if-statement
    (163) selection-statement -> . switch-statement
    (178) iteration-statement -> . while-statement M_quad
    (179) iteration-statement -> . for-statement M_quad
    (180) iteration-statement -> . do-statement M_quad
    (195) jump-statement -> . break-statement
    (196) jump-statement -> . continue-statement
    (197) jump-statement -> . goto-statement
    (198) jump-statement -> . return-statement
    (149) write-statement -> . CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM
    (152) read-statement -> . CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM
    (121) method-declaration -> . method-header method-body
    (156) local-variable-declaration -> . type variable-declarators
    (157) local-constant-declaration -> . CONST simple-type constant-declarators
    (160) statement-expression -> . invocation-expression
    (161) statement-expression -> . assignment
    (164) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block
    (165) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block
    (166) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad
    (170) switch-statement -> . SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block
    (181) while-statement -> . WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block
    (184) for-statement -> . FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block
    (183) do-statement -> . DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM
    (199) break-statement -> . BREAK DELIM
    (200) continue-statement -> . CONTINUE DELIM
    (201) goto-statement -> . GOTO IDENTIFIER DELIM
    (202) return-statement -> . RETURN expression DELIM
    (203) return-statement -> . RETURN DELIM
    (122) method-header -> . type IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (123) method-header -> . VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (23) type -> . simple-type
    (24) type -> . class-type
    (25) type -> . array-type
    (93) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (99) assignment -> . IDENTIFIER assignment-operator expression
    (100) assignment -> . member-access assignment-operator expression
    (101) assignment -> . element-access assignment-operator expression
    (26) simple-type -> . BOOL
    (27) simple-type -> . INT
    (28) simple-type -> . UINT
    (29) simple-type -> . CHAR
    (30) simple-type -> . DOUBLE
    (31) simple-type -> . STRING
    (11) class-type -> . IDENTIFIER
    (32) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET
    (92) member-access -> . IDENTIFIER DOT IDENTIFIER
    (97) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (98) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    IDENTIFIER      shift and go to state 90
    BLOCK_BEGIN     shift and go to state 58
    DELIM           shift and go to state 65
    CONSOLE         shift and go to state 103
    CONST           shift and go to state 100
    IF              shift and go to state 105
    SWITCH          shift and go to state 98
    WHILE           shift and go to state 85
    FOR             shift and go to state 77
    DO              shift and go to state 99
    BREAK           shift and go to state 95
    CONTINUE        shift and go to state 82
    GOTO            shift and go to state 68
    RETURN          shift and go to state 72
    VOID            shift and go to state 17
    BOOL            shift and go to state 37
    INT             shift and go to state 34
    UINT            shift and go to state 32
    CHAR            shift and go to state 18
    DOUBLE          shift and go to state 35
    STRING          shift and go to state 21

    return-statement               shift and go to state 73
    method-header                  shift and go to state 16
    write-statement                shift and go to state 62
    member-access                  shift and go to state 63
    selection-statement            shift and go to state 84
    empty-statement                shift and go to state 86
    expression-statement           shift and go to state 64
    break-statement                shift and go to state 87
    method-declaration             shift and go to state 88
    element-access                 shift and go to state 74
    statement-expression           shift and go to state 66
    local-constant-declaration     shift and go to state 75
    statement                      shift and go to state 89
    assignment                     shift and go to state 104
    for-statement                  shift and go to state 67
    type                           shift and go to state 91
    read-statement                 shift and go to state 102
    do-statement                   shift and go to state 76
    array-type                     shift and go to state 28
    continue-statement             shift and go to state 78
    invocation-expression          shift and go to state 71
    labeled-statement              shift and go to state 106
    declaration-statement          shift and go to state 93
    switch-statement               shift and go to state 69
    jump-statement                 shift and go to state 70
    iteration-statement            shift and go to state 94
    local-variable-declaration     shift and go to state 79
    goto-statement                 shift and go to state 80
    if-statement                   shift and go to state 81
    statement-list                 shift and go to state 388
    class-type                     shift and go to state 38
    while-statement                shift and go to state 97
    simple-type                    shift and go to state 19
    block                          shift and go to state 83

state 383

    (172) switch-block -> BLOCK_BEGIN M_bstart switch-sections BLOCK_END .

    IDENTIFIER      reduce using rule 172 (switch-block -> BLOCK_BEGIN M_bstart switch-sections BLOCK_END .)
    BLOCK_BEGIN     reduce using rule 172 (switch-block -> BLOCK_BEGIN M_bstart switch-sections BLOCK_END .)
    DELIM           reduce using rule 172 (switch-block -> BLOCK_BEGIN M_bstart switch-sections BLOCK_END .)
    CONSOLE         reduce using rule 172 (switch-block -> BLOCK_BEGIN M_bstart switch-sections BLOCK_END .)
    CONST           reduce using rule 172 (switch-block -> BLOCK_BEGIN M_bstart switch-sections BLOCK_END .)
    IF              reduce using rule 172 (switch-block -> BLOCK_BEGIN M_bstart switch-sections BLOCK_END .)
    SWITCH          reduce using rule 172 (switch-block -> BLOCK_BEGIN M_bstart switch-sections BLOCK_END .)
    WHILE           reduce using rule 172 (switch-block -> BLOCK_BEGIN M_bstart switch-sections BLOCK_END .)
    FOR             reduce using rule 172 (switch-block -> BLOCK_BEGIN M_bstart switch-sections BLOCK_END .)
    DO              reduce using rule 172 (switch-block -> BLOCK_BEGIN M_bstart switch-sections BLOCK_END .)
    BREAK           reduce using rule 172 (switch-block -> BLOCK_BEGIN M_bstart switch-sections BLOCK_END .)
    CONTINUE        reduce using rule 172 (switch-block -> BLOCK_BEGIN M_bstart switch-sections BLOCK_END .)
    GOTO            reduce using rule 172 (switch-block -> BLOCK_BEGIN M_bstart switch-sections BLOCK_END .)
    RETURN          reduce using rule 172 (switch-block -> BLOCK_BEGIN M_bstart switch-sections BLOCK_END .)
    VOID            reduce using rule 172 (switch-block -> BLOCK_BEGIN M_bstart switch-sections BLOCK_END .)
    BOOL            reduce using rule 172 (switch-block -> BLOCK_BEGIN M_bstart switch-sections BLOCK_END .)
    INT             reduce using rule 172 (switch-block -> BLOCK_BEGIN M_bstart switch-sections BLOCK_END .)
    UINT            reduce using rule 172 (switch-block -> BLOCK_BEGIN M_bstart switch-sections BLOCK_END .)
    CHAR            reduce using rule 172 (switch-block -> BLOCK_BEGIN M_bstart switch-sections BLOCK_END .)
    DOUBLE          reduce using rule 172 (switch-block -> BLOCK_BEGIN M_bstart switch-sections BLOCK_END .)
    STRING          reduce using rule 172 (switch-block -> BLOCK_BEGIN M_bstart switch-sections BLOCK_END .)
    BLOCK_END       reduce using rule 172 (switch-block -> BLOCK_BEGIN M_bstart switch-sections BLOCK_END .)
    CASE            reduce using rule 172 (switch-block -> BLOCK_BEGIN M_bstart switch-sections BLOCK_END .)
    DEFAULT         reduce using rule 172 (switch-block -> BLOCK_BEGIN M_bstart switch-sections BLOCK_END .)


state 384

    (174) switch-sections -> switch-sections switch-section .

    BLOCK_END       reduce using rule 174 (switch-sections -> switch-sections switch-section .)
    CASE            reduce using rule 174 (switch-sections -> switch-sections switch-section .)
    DEFAULT         reduce using rule 174 (switch-sections -> switch-sections switch-section .)


state 385

    (166) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .

    IDENTIFIER      reduce using rule 166 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    BLOCK_BEGIN     reduce using rule 166 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    DELIM           reduce using rule 166 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    CONSOLE         reduce using rule 166 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    CONST           reduce using rule 166 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    IF              reduce using rule 166 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    SWITCH          reduce using rule 166 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    WHILE           reduce using rule 166 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    FOR             reduce using rule 166 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    DO              reduce using rule 166 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    BREAK           reduce using rule 166 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    CONTINUE        reduce using rule 166 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    GOTO            reduce using rule 166 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    RETURN          reduce using rule 166 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    VOID            reduce using rule 166 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    BOOL            reduce using rule 166 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    INT             reduce using rule 166 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    UINT            reduce using rule 166 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    CHAR            reduce using rule 166 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    DOUBLE          reduce using rule 166 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    STRING          reduce using rule 166 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    BLOCK_END       reduce using rule 166 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    CASE            reduce using rule 166 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    DEFAULT         reduce using rule 166 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)


state 386

    (184) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad . block
    (132) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END

    BLOCK_BEGIN     shift and go to state 58

    block                          shift and go to state 389

state 387

    (176) switch-label -> CASE literal COLON .

    IDENTIFIER      reduce using rule 176 (switch-label -> CASE literal COLON .)
    BLOCK_BEGIN     reduce using rule 176 (switch-label -> CASE literal COLON .)
    DELIM           reduce using rule 176 (switch-label -> CASE literal COLON .)
    CONSOLE         reduce using rule 176 (switch-label -> CASE literal COLON .)
    CONST           reduce using rule 176 (switch-label -> CASE literal COLON .)
    IF              reduce using rule 176 (switch-label -> CASE literal COLON .)
    SWITCH          reduce using rule 176 (switch-label -> CASE literal COLON .)
    WHILE           reduce using rule 176 (switch-label -> CASE literal COLON .)
    FOR             reduce using rule 176 (switch-label -> CASE literal COLON .)
    DO              reduce using rule 176 (switch-label -> CASE literal COLON .)
    BREAK           reduce using rule 176 (switch-label -> CASE literal COLON .)
    CONTINUE        reduce using rule 176 (switch-label -> CASE literal COLON .)
    GOTO            reduce using rule 176 (switch-label -> CASE literal COLON .)
    RETURN          reduce using rule 176 (switch-label -> CASE literal COLON .)
    VOID            reduce using rule 176 (switch-label -> CASE literal COLON .)
    BOOL            reduce using rule 176 (switch-label -> CASE literal COLON .)
    INT             reduce using rule 176 (switch-label -> CASE literal COLON .)
    UINT            reduce using rule 176 (switch-label -> CASE literal COLON .)
    CHAR            reduce using rule 176 (switch-label -> CASE literal COLON .)
    DOUBLE          reduce using rule 176 (switch-label -> CASE literal COLON .)
    STRING          reduce using rule 176 (switch-label -> CASE literal COLON .)


state 388

    (175) switch-section -> switch-label M_quad statement-list .
    (137) statement-list -> statement-list . statement
    (138) statement -> . labeled-statement
    (139) statement -> . declaration-statement
    (140) statement -> . block
    (141) statement -> . empty-statement
    (142) statement -> . expression-statement
    (143) statement -> . selection-statement
    (144) statement -> . iteration-statement
    (145) statement -> . jump-statement
    (146) statement -> . write-statement
    (147) statement -> . read-statement
    (148) statement -> . method-declaration
    (153) labeled-statement -> . IDENTIFIER COLON statement
    (154) declaration-statement -> . local-variable-declaration DELIM
    (155) declaration-statement -> . local-constant-declaration DELIM
    (132) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END
    (158) empty-statement -> . DELIM
    (159) expression-statement -> . statement-expression DELIM
    (162) selection-statement -> . if-statement
    (163) selection-statement -> . switch-statement
    (178) iteration-statement -> . while-statement M_quad
    (179) iteration-statement -> . for-statement M_quad
    (180) iteration-statement -> . do-statement M_quad
    (195) jump-statement -> . break-statement
    (196) jump-statement -> . continue-statement
    (197) jump-statement -> . goto-statement
    (198) jump-statement -> . return-statement
    (149) write-statement -> . CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM
    (152) read-statement -> . CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM
    (121) method-declaration -> . method-header method-body
    (156) local-variable-declaration -> . type variable-declarators
    (157) local-constant-declaration -> . CONST simple-type constant-declarators
    (160) statement-expression -> . invocation-expression
    (161) statement-expression -> . assignment
    (164) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block
    (165) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block
    (166) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad
    (170) switch-statement -> . SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block
    (181) while-statement -> . WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block
    (184) for-statement -> . FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block
    (183) do-statement -> . DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM
    (199) break-statement -> . BREAK DELIM
    (200) continue-statement -> . CONTINUE DELIM
    (201) goto-statement -> . GOTO IDENTIFIER DELIM
    (202) return-statement -> . RETURN expression DELIM
    (203) return-statement -> . RETURN DELIM
    (122) method-header -> . type IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (123) method-header -> . VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (23) type -> . simple-type
    (24) type -> . class-type
    (25) type -> . array-type
    (93) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (99) assignment -> . IDENTIFIER assignment-operator expression
    (100) assignment -> . member-access assignment-operator expression
    (101) assignment -> . element-access assignment-operator expression
    (26) simple-type -> . BOOL
    (27) simple-type -> . INT
    (28) simple-type -> . UINT
    (29) simple-type -> . CHAR
    (30) simple-type -> . DOUBLE
    (31) simple-type -> . STRING
    (11) class-type -> . IDENTIFIER
    (32) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET
    (92) member-access -> . IDENTIFIER DOT IDENTIFIER
    (97) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (98) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    BLOCK_END       reduce using rule 175 (switch-section -> switch-label M_quad statement-list .)
    CASE            reduce using rule 175 (switch-section -> switch-label M_quad statement-list .)
    DEFAULT         reduce using rule 175 (switch-section -> switch-label M_quad statement-list .)
    IDENTIFIER      shift and go to state 90
    BLOCK_BEGIN     shift and go to state 58
    DELIM           shift and go to state 65
    CONSOLE         shift and go to state 103
    CONST           shift and go to state 100
    IF              shift and go to state 105
    SWITCH          shift and go to state 98
    WHILE           shift and go to state 85
    FOR             shift and go to state 77
    DO              shift and go to state 99
    BREAK           shift and go to state 95
    CONTINUE        shift and go to state 82
    GOTO            shift and go to state 68
    RETURN          shift and go to state 72
    VOID            shift and go to state 17
    BOOL            shift and go to state 37
    INT             shift and go to state 34
    UINT            shift and go to state 32
    CHAR            shift and go to state 18
    DOUBLE          shift and go to state 35
    STRING          shift and go to state 21

    return-statement               shift and go to state 73
    method-header                  shift and go to state 16
    write-statement                shift and go to state 62
    member-access                  shift and go to state 63
    selection-statement            shift and go to state 84
    empty-statement                shift and go to state 86
    expression-statement           shift and go to state 64
    break-statement                shift and go to state 87
    method-declaration             shift and go to state 88
    element-access                 shift and go to state 74
    statement-expression           shift and go to state 66
    local-constant-declaration     shift and go to state 75
    statement                      shift and go to state 194
    assignment                     shift and go to state 104
    for-statement                  shift and go to state 67
    type                           shift and go to state 91
    read-statement                 shift and go to state 102
    do-statement                   shift and go to state 76
    array-type                     shift and go to state 28
    continue-statement             shift and go to state 78
    invocation-expression          shift and go to state 71
    labeled-statement              shift and go to state 106
    declaration-statement          shift and go to state 93
    switch-statement               shift and go to state 69
    jump-statement                 shift and go to state 70
    iteration-statement            shift and go to state 94
    local-variable-declaration     shift and go to state 79
    goto-statement                 shift and go to state 80
    if-statement                   shift and go to state 81
    class-type                     shift and go to state 38
    while-statement                shift and go to state 97
    simple-type                    shift and go to state 19
    block                          shift and go to state 83

state 389

    (184) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .

    IDENTIFIER      reduce using rule 184 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    BLOCK_BEGIN     reduce using rule 184 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    DELIM           reduce using rule 184 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    CONSOLE         reduce using rule 184 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    CONST           reduce using rule 184 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    IF              reduce using rule 184 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    SWITCH          reduce using rule 184 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    WHILE           reduce using rule 184 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    FOR             reduce using rule 184 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    DO              reduce using rule 184 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    BREAK           reduce using rule 184 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    CONTINUE        reduce using rule 184 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    GOTO            reduce using rule 184 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    RETURN          reduce using rule 184 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    VOID            reduce using rule 184 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    BOOL            reduce using rule 184 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    INT             reduce using rule 184 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    UINT            reduce using rule 184 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    CHAR            reduce using rule 184 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    DOUBLE          reduce using rule 184 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    STRING          reduce using rule 184 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    BLOCK_END       reduce using rule 184 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    CASE            reduce using rule 184 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    DEFAULT         reduce using rule 184 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)

