Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> compilation-unit
Rule 1     compilation-unit -> class-declarations-opt
Rule 2     semi-opt -> DELIM
Rule 3     semi-opt -> empty
Rule 4     class-declarations-opt -> class-declarations
Rule 5     class-declarations-opt -> empty
Rule 6     class-declarations -> class-declaration
Rule 7     class-declarations -> class-declarations class-declaration
Rule 8     class-declaration -> CLASS IDENTIFIER class-base-opt class-body semi-opt
Rule 9     class-base-opt -> class-base
Rule 10    class-base-opt -> empty
Rule 11    class-base -> COLON class-type
Rule 12    class-type -> IDENTIFIER
Rule 13    class-body -> BLOCK_BEGIN class-member-declarations-opt BLOCK_END
Rule 14    class-member-declarations-opt -> class-member-declarations
Rule 15    class-member-declarations-opt -> empty
Rule 16    class-member-declarations -> class-member-declaration
Rule 17    class-member-declarations -> class-member-declarations class-member-declaration
Rule 18    class-member-declaration -> constant-declaration
Rule 19    class-member-declaration -> field-declaration
Rule 20    class-member-declaration -> method-declaration
Rule 21    class-member-declaration -> constructor-declaration
Rule 22    class-member-declaration -> destructor-declaration
Rule 23    class-member-declaration -> class-declaration
Rule 24    constant-declaration -> modifier CONST simple-type constant-declarators DELIM
Rule 25    constant-declaration -> CONST simple-type constant-declarators DELIM
Rule 26    type -> simple-type
Rule 27    type -> class-type
Rule 28    type -> array-type
Rule 29    simple-type -> numeric-type
Rule 30    simple-type -> BOOL
Rule 31    numeric-type -> integral-type
Rule 32    numeric-type -> floating-point-type
Rule 33    integral-type -> INT
Rule 34    integral-type -> UINT
Rule 35    integral-type -> LONG
Rule 36    integral-type -> ULONG
Rule 37    integral-type -> CHAR
Rule 38    floating-point-type -> FLOAT
Rule 39    floating-point-type -> DOUBLE
Rule 40    array-type -> simple-type rank-specifier
Rule 41    rank-specifier -> OPEN_BRACKET dim-separators-opt CLOSE_BRACKET
Rule 42    dim-separators-opt -> dim-separators
Rule 43    dim-separators-opt -> empty
Rule 44    dim-separators -> COMMA
Rule 45    dim-separators -> dim-separators COMMA
Rule 46    constant-declarators -> constant-declarator
Rule 47    constant-declarators -> constant-declarators COMMA constant-declarator
Rule 48    constant-declarator -> IDENTIFIER ASSIGN expression
Rule 49    expression -> conditional-expression
Rule 50    expression -> assignment
Rule 51    conditional-expression -> conditional-or-expression
Rule 52    conditional-expression -> conditional-or-expression CONDOP expression COLON expression
Rule 53    conditional-or-expression -> conditional-and-expression
Rule 54    conditional-or-expression -> conditional-or-expression LOGOR conditional-and-expression
Rule 55    conditional-and-expression -> inclusive-or-expression
Rule 56    conditional-and-expression -> conditional-and-expression LOGAND inclusive-or-expression
Rule 57    inclusive-or-expression -> exclusive-or-expression
Rule 58    inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression
Rule 59    exclusive-or-expression -> and-expression
Rule 60    exclusive-or-expression -> exclusive-or-expression BITXOR and-expression
Rule 61    and-expression -> equality-expression
Rule 62    and-expression -> and-expression BITAND equality-expression
Rule 63    equality-expression -> relational-expression
Rule 64    equality-expression -> equality-expression EQ relational-expression
Rule 65    equality-expression -> equality-expression NE relational-expression
Rule 66    relational-expression -> shift-expression
Rule 67    relational-expression -> relational-expression LT shift-expression
Rule 68    relational-expression -> relational-expression GT shift-expression
Rule 69    relational-expression -> relational-expression LE shift-expression
Rule 70    relational-expression -> relational-expression GE shift-expression
Rule 71    shift-expression -> additive-expression
Rule 72    shift-expression -> shift-expression LSHIFT additive-expression
Rule 73    shift-expression -> shift-expression RSHIFT additive-expression
Rule 74    additive-expression -> multiplicative-expression
Rule 75    additive-expression -> additive-expression PLUS multiplicative-expression
Rule 76    additive-expression -> additive-expression MINUS multiplicative-expression
Rule 77    multiplicative-expression -> unary-expression
Rule 78    multiplicative-expression -> multiplicative-expression TIMES unary-expression
Rule 79    multiplicative-expression -> multiplicative-expression DIV unary-expression
Rule 80    multiplicative-expression -> multiplicative-expression MOD unary-expression
Rule 81    unary-expression -> primary-expression
Rule 82    unary-expression -> PLUS unary-expression
Rule 83    unary-expression -> MINUS unary-expression
Rule 84    unary-expression -> BITNOT unary-expression
Rule 85    unary-expression -> BITCOMP unary-expression
Rule 86    unary-expression -> TIMES unary-expression
Rule 87    unary-expression -> pre-increment-expression
Rule 88    unary-expression -> pre-decrement-expression
Rule 89    primary-expression -> array-creation-expression
Rule 90    primary-expression -> primary-no-array-creation-expression
Rule 91    array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
Rule 92    array-initializer-opt -> array-initializer
Rule 93    array-initializer-opt -> empty
Rule 94    expression-list -> expression
Rule 95    expression-list -> expression-list COMMA expression
Rule 96    array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END
Rule 97    variable-initializer-list-opt -> variable-initializer-list
Rule 98    variable-initializer-list-opt -> empty
Rule 99    variable-initializer-list -> variable-initializer
Rule 100   variable-initializer-list -> variable-initializer-list COMMA variable-initializer
Rule 101   variable-initializer -> expression
Rule 102   variable-initializer -> array-initializer
Rule 103   primary-no-array-creation-expression -> literal
Rule 104   primary-no-array-creation-expression -> IDENTIFIER
Rule 105   primary-no-array-creation-expression -> parenthesized-expression
Rule 106   primary-no-array-creation-expression -> member-access
Rule 107   primary-no-array-creation-expression -> invocation-expression
Rule 108   primary-no-array-creation-expression -> element-access
Rule 109   primary-no-array-creation-expression -> this-access
Rule 110   primary-no-array-creation-expression -> base-access
Rule 111   primary-no-array-creation-expression -> post-increment-expression
Rule 112   primary-no-array-creation-expression -> post-decrement-expression
Rule 113   primary-no-array-creation-expression -> object-creation-expression
Rule 114   parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN
Rule 115   member-access -> primary-expression DOT IDENTIFIER
Rule 116   invocation-expression -> primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
Rule 117   argument-list-opt -> argument-list
Rule 118   argument-list-opt -> empty
Rule 119   argument-list -> argument
Rule 120   argument-list -> argument-list COMMA argument
Rule 121   argument -> expression
Rule 122   argument -> OUT variable-reference
Rule 123   variable-reference -> expression
Rule 124   element-access -> primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
Rule 125   this-access -> THIS
Rule 126   base-access -> BASE DOT IDENTIFIER
Rule 127   base-access -> BASE OPEN_BRACKET expression-list CLOSE_BRACKET
Rule 128   post-increment-expression -> primary-expression INCRE
Rule 129   post-decrement-expression -> primary-expression DECRE
Rule 130   object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
Rule 131   pre-increment-expression -> INCRE unary-expression
Rule 132   pre-decrement-expression -> DECRE unary-expression
Rule 133   assignment -> primary-expression assignment-operator expression
Rule 134   assignment-operator -> ASSIGN
Rule 135   assignment-operator -> PLUSEQUAL
Rule 136   assignment-operator -> MINUSEQUAL
Rule 137   assignment-operator -> TIMESEQUAL
Rule 138   assignment-operator -> DIVEQUAL
Rule 139   assignment-operator -> MODEQUAL
Rule 140   assignment-operator -> BITANDEQUAL
Rule 141   assignment-operator -> BITOREQUAL
Rule 142   assignment-operator -> BITXOREQUAL
Rule 143   assignment-operator -> LSHIFTEQUAL
Rule 144   assignment-operator -> RSHIFTEQUAL
Rule 145   field-declaration -> modifier type variable-declarators DELIM
Rule 146   field-declaration -> type variable-declarators DELIM
Rule 147   modifier -> PUBLIC
Rule 148   modifier -> PRIVATE
Rule 149   variable-declarators -> variable-declarator
Rule 150   variable-declarators -> variable-declarators COMMA variable-declarator
Rule 151   variable-declarator -> IDENTIFIER
Rule 152   variable-declarator -> IDENTIFIER ASSIGN variable-initializer
Rule 153   method-declaration -> method-header method-body
Rule 154   method-header -> modifier type member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
Rule 155   method-header -> modifier VOID member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
Rule 156   method-header -> type member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
Rule 157   method-header -> VOID member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
Rule 158   formal-parameter-list-opt -> formal-parameter-list
Rule 159   formal-parameter-list-opt -> empty
Rule 160   member-name -> IDENTIFIER
Rule 161   formal-parameter-list -> fixed-parameters
Rule 162   fixed-parameters -> fixed-parameter
Rule 163   fixed-parameters -> fixed-parameters COMMA fixed-parameter
Rule 164   fixed-parameter -> parameter-modifier-opt type IDENTIFIER
Rule 165   parameter-modifier-opt -> parameter-modifier
Rule 166   parameter-modifier-opt -> empty
Rule 167   parameter-modifier -> OUT
Rule 168   method-body -> block
Rule 169   method-body -> DELIM
Rule 170   block -> BLOCK_BEGIN statement-list-opt BLOCK_END
Rule 171   statement-list-opt -> statement-list
Rule 172   statement-list-opt -> empty
Rule 173   statement-list -> statement
Rule 174   statement-list -> statement-list statement
Rule 175   statement -> labeled-statement
Rule 176   statement -> declaration-statement
Rule 177   statement -> embedded-statement
Rule 178   labeled-statement -> IDENTIFIER COLON statement
Rule 179   declaration-statement -> local-variable-declaration DELIM
Rule 180   declaration-statement -> local-constant-declaration DELIM
Rule 181   local-variable-declaration -> type local-variable-declarators
Rule 182   local-variable-declarators -> local-variable-declarator
Rule 183   local-variable-declarators -> local-variable-declarators COMMA local-variable-declarator
Rule 184   local-variable-declarator -> IDENTIFIER
Rule 185   local-variable-declarator -> IDENTIFIER ASSIGN local-variable-initializer
Rule 186   local-variable-initializer -> expression
Rule 187   local-variable-initializer -> array-initializer
Rule 188   local-constant-declaration -> CONST type constant-declarators
Rule 189   embedded-statement -> block
Rule 190   embedded-statement -> empty-statement
Rule 191   embedded-statement -> expression-statement
Rule 192   embedded-statement -> selection-statement
Rule 193   embedded-statement -> iteration-statement
Rule 194   embedded-statement -> jump-statement
Rule 195   empty-statement -> DELIM
Rule 196   expression-statement -> statement-expression DELIM
Rule 197   statement-expression -> invocation-expression
Rule 198   statement-expression -> object-creation-expression
Rule 199   statement-expression -> assignment
Rule 200   statement-expression -> post-increment-expression
Rule 201   statement-expression -> post-decrement-expression
Rule 202   statement-expression -> pre-increment-expression
Rule 203   statement-expression -> pre-decrement-expression
Rule 204   selection-statement -> if-statement
Rule 205   selection-statement -> switch-statement
Rule 206   if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement
Rule 207   if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement
Rule 208   boolean-expression -> expression
Rule 209   switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block
Rule 210   switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END
Rule 211   switch-sections-opt -> switch-sections
Rule 212   switch-sections-opt -> empty
Rule 213   switch-sections -> switch-section
Rule 214   switch-sections -> switch-sections switch-section
Rule 215   switch-section -> switch-labels statement-list
Rule 216   switch-labels -> switch-label
Rule 217   switch-labels -> switch-labels switch-label
Rule 218   switch-label -> CASE expression COLON
Rule 219   switch-label -> DEFAULT COLON
Rule 220   iteration-statement -> while-statement
Rule 221   iteration-statement -> for-statement
Rule 222   iteration-statement -> foreach-statement
Rule 223   iteration-statement -> do-statement
Rule 224   while-statement -> WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement
Rule 225   do-statement -> DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM
Rule 226   for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement
Rule 227   for-initializer-opt -> for-initializer
Rule 228   for-initializer-opt -> empty
Rule 229   for-initializer -> local-variable-declaration
Rule 230   for-initializer -> statement-expression-list
Rule 231   for-condition-opt -> for-condition
Rule 232   for-condition-opt -> empty
Rule 233   for-condition -> boolean-expression
Rule 234   for-iterator-opt -> for-iterator
Rule 235   for-iterator-opt -> empty
Rule 236   for-iterator -> statement-expression-list
Rule 237   statement-expression-list -> statement-expression
Rule 238   statement-expression-list -> statement-expression-list COMMA statement-expression
Rule 239   foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement
Rule 240   jump-statement -> break-statement
Rule 241   jump-statement -> continue-statement
Rule 242   jump-statement -> goto-statement
Rule 243   jump-statement -> return-statement
Rule 244   break-statement -> BREAK DELIM
Rule 245   continue-statement -> CONTINUE DELIM
Rule 246   goto-statement -> GOTO IDENTIFIER DELIM
Rule 247   return-statement -> RETURN expression-opt DELIM
Rule 248   expression-opt -> expression
Rule 249   expression-opt -> empty
Rule 250   constructor-declaration -> constructor-declarator constructor-body
Rule 251   constructor-declarator -> IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
Rule 252   constructor-body -> block
Rule 253   constructor-body -> DELIM
Rule 254   destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body
Rule 255   destructor-body -> block
Rule 256   destructor-body -> DELIM
Rule 257   literal -> ICONST
Rule 258   literal -> UICONST
Rule 259   literal -> LICONST
Rule 260   literal -> ULICONST
Rule 261   literal -> FCONST
Rule 262   literal -> DCONST
Rule 263   literal -> MCONST
Rule 264   literal -> CCONST
Rule 265   literal -> SCONST
Rule 266   literal -> VSCONST
Rule 267   literal -> TRUE
Rule 268   literal -> FALSE
Rule 269   empty -> <empty>

Terminals, with rules where they appear

ASSIGN               : 48 134 152 185
BASE                 : 126 127
BITAND               : 62
BITANDEQUAL          : 140
BITCOMP              : 85 254
BITNOT               : 84
BITOR                : 58
BITOREQUAL           : 141
BITXOR               : 60
BITXOREQUAL          : 142
BLOCK_BEGIN          : 13 96 170 210
BLOCK_END            : 13 96 170 210
BOOL                 : 30
BREAK                : 244
CASE                 : 218
CCONST               : 264
CHAR                 : 37
CLASS                : 8
CLOSE_BRACKET        : 41 91 124 127
CLOSE_PAREN          : 114 116 130 154 155 156 157 206 207 209 224 225 226 239 251 254
COLON                : 11 52 178 218 219
COMMA                : 44 45 47 95 100 120 150 163 183 238
CONDOP               : 52
CONST                : 24 25 188
CONTINUE             : 245
DCONST               : 262
DECRE                : 129 132
DEFAULT              : 219
DELIM                : 2 24 25 145 146 169 179 180 195 196 225 226 226 244 245 246 247 253 256
DIV                  : 79
DIVEQUAL             : 138
DO                   : 225
DOT                  : 115 126
DOUBLE               : 39
ELSE                 : 207
EQ                   : 64
FALSE                : 268
FCONST               : 261
FLOAT                : 38
FOR                  : 226
FOREACH              : 239
GE                   : 70
GOTO                 : 246
GT                   : 68
ICONST               : 257
IDENTIFIER           : 8 12 48 104 115 126 151 152 160 164 178 184 185 239 246 251 254
IF                   : 206 207
IN                   : 239
INCRE                : 128 131
INT                  : 33
LE                   : 69
LICONST              : 259
LOGAND               : 56
LOGOR                : 54
LONG                 : 35
LSHIFT               : 72
LSHIFTEQUAL          : 143
LT                   : 67
MCONST               : 263
MINUS                : 76 83
MINUSEQUAL           : 136
MOD                  : 80
MODEQUAL             : 139
NE                   : 65
NEW                  : 91 130
OPEN_BRACKET         : 41 91 124 127
OPEN_PAREN           : 114 116 130 154 155 156 157 206 207 209 224 225 226 239 251 254
OUT                  : 122 167
PLUS                 : 75 82
PLUSEQUAL            : 135
PRIVATE              : 148
PUBLIC               : 147
RETURN               : 247
RSHIFT               : 73
RSHIFTEQUAL          : 144
SCONST               : 265
SWITCH               : 209
THIS                 : 125
TIMES                : 78 86
TIMESEQUAL           : 137
TRUE                 : 267
UICONST              : 258
UINT                 : 34
ULICONST             : 260
ULONG                : 36
VOID                 : 155 157
VSCONST              : 266
WHILE                : 224 225
error                : 

Nonterminals, with rules where they appear

additive-expression  : 71 72 73 75 76
and-expression       : 59 60 62
argument             : 119 120
argument-list        : 117 120
argument-list-opt    : 116 130
array-creation-expression : 89
array-initializer    : 92 102 187
array-initializer-opt : 91
array-type           : 28
assignment           : 50 199
assignment-operator  : 133
base-access          : 110
block                : 168 189 252 255
boolean-expression   : 206 207 224 225 233
break-statement      : 240
class-base           : 9
class-base-opt       : 8
class-body           : 8
class-declaration    : 6 7 23
class-declarations   : 4 7
class-declarations-opt : 1
class-member-declaration : 16 17
class-member-declarations : 14 17
class-member-declarations-opt : 13
class-type           : 11 27
compilation-unit     : 0
conditional-and-expression : 53 54 56
conditional-expression : 49
conditional-or-expression : 51 52 54
constant-declaration : 18
constant-declarator  : 46 47
constant-declarators : 24 25 47 188
constructor-body     : 250
constructor-declaration : 21
constructor-declarator : 250
continue-statement   : 241
declaration-statement : 176
destructor-body      : 254
destructor-declaration : 22
dim-separators       : 42 45
dim-separators-opt   : 41
do-statement         : 223
element-access       : 108
embedded-statement   : 177 206 207 207 224 225 226 239
empty                : 3 5 10 15 43 93 98 118 159 166 172 212 228 232 235 249
empty-statement      : 190
equality-expression  : 61 62 64 65
exclusive-or-expression : 57 58 60
expression           : 48 52 52 94 95 101 114 121 123 133 186 208 209 218 239 248
expression-list      : 91 95 124 127
expression-opt       : 247
expression-statement : 191
field-declaration    : 19
fixed-parameter      : 162 163
fixed-parameters     : 161 163
floating-point-type  : 32
for-condition        : 231
for-condition-opt    : 226
for-initializer      : 227
for-initializer-opt  : 226
for-iterator         : 234
for-iterator-opt     : 226
for-statement        : 221
foreach-statement    : 222
formal-parameter-list : 158
formal-parameter-list-opt : 154 155 156 157 251
goto-statement       : 242
if-statement         : 204
inclusive-or-expression : 55 56 58
integral-type        : 31
invocation-expression : 107 197
iteration-statement  : 193
jump-statement       : 194
labeled-statement    : 175
literal              : 103
local-constant-declaration : 180
local-variable-declaration : 179 229
local-variable-declarator : 182 183
local-variable-declarators : 181 183
local-variable-initializer : 185
member-access        : 106
member-name          : 154 155 156 157
method-body          : 153
method-declaration   : 20
method-header        : 153
modifier             : 24 145 154 155
multiplicative-expression : 74 75 76 78 79 80
numeric-type         : 29
object-creation-expression : 113 198
parameter-modifier   : 165
parameter-modifier-opt : 164
parenthesized-expression : 105
post-decrement-expression : 112 201
post-increment-expression : 111 200
pre-decrement-expression : 88 203
pre-increment-expression : 87 202
primary-expression   : 81 115 116 128 129 133
primary-no-array-creation-expression : 90 124
rank-specifier       : 40
relational-expression : 63 64 65 67 68 69 70
return-statement     : 243
selection-statement  : 192
semi-opt             : 8
shift-expression     : 66 67 68 69 70 72 73
simple-type          : 24 25 26 40 91
statement            : 173 174 178
statement-expression : 196 237 238
statement-expression-list : 230 236 238
statement-list       : 171 174 215
statement-list-opt   : 170
switch-block         : 209
switch-label         : 216 217
switch-labels        : 215 217
switch-section       : 213 214
switch-sections      : 211 214
switch-sections-opt  : 210
switch-statement     : 205
this-access          : 109
type                 : 130 145 146 154 156 164 181 188 239
unary-expression     : 77 78 79 80 82 83 84 85 86 131 132
variable-declarator  : 149 150
variable-declarators : 145 146 150
variable-initializer : 99 100 152
variable-initializer-list : 97 100
variable-initializer-list-opt : 96
variable-reference   : 122
while-statement      : 220

Parsing method: LALR

state 0

    (0) S' -> . compilation-unit
    (1) compilation-unit -> . class-declarations-opt
    (4) class-declarations-opt -> . class-declarations
    (5) class-declarations-opt -> . empty
    (6) class-declarations -> . class-declaration
    (7) class-declarations -> . class-declarations class-declaration
    (269) empty -> .
    (8) class-declaration -> . CLASS IDENTIFIER class-base-opt class-body semi-opt

    $end            reduce using rule 269 (empty -> .)
    CLASS           shift and go to state 5

    class-declarations-opt         shift and go to state 1
    class-declarations             shift and go to state 2
    class-declaration              shift and go to state 3
    compilation-unit               shift and go to state 4
    empty                          shift and go to state 6

state 1

    (1) compilation-unit -> class-declarations-opt .

    $end            reduce using rule 1 (compilation-unit -> class-declarations-opt .)


state 2

    (4) class-declarations-opt -> class-declarations .
    (7) class-declarations -> class-declarations . class-declaration
    (8) class-declaration -> . CLASS IDENTIFIER class-base-opt class-body semi-opt

    $end            reduce using rule 4 (class-declarations-opt -> class-declarations .)
    CLASS           shift and go to state 5

    class-declaration              shift and go to state 7

state 3

    (6) class-declarations -> class-declaration .

    CLASS           reduce using rule 6 (class-declarations -> class-declaration .)
    $end            reduce using rule 6 (class-declarations -> class-declaration .)


state 4

    (0) S' -> compilation-unit .



state 5

    (8) class-declaration -> CLASS . IDENTIFIER class-base-opt class-body semi-opt

    IDENTIFIER      shift and go to state 8


state 6

    (5) class-declarations-opt -> empty .

    $end            reduce using rule 5 (class-declarations-opt -> empty .)


state 7

    (7) class-declarations -> class-declarations class-declaration .

    CLASS           reduce using rule 7 (class-declarations -> class-declarations class-declaration .)
    $end            reduce using rule 7 (class-declarations -> class-declarations class-declaration .)


state 8

    (8) class-declaration -> CLASS IDENTIFIER . class-base-opt class-body semi-opt
    (9) class-base-opt -> . class-base
    (10) class-base-opt -> . empty
    (11) class-base -> . COLON class-type
    (269) empty -> .

    COLON           shift and go to state 11
    BLOCK_BEGIN     reduce using rule 269 (empty -> .)

    class-base-opt                 shift and go to state 9
    class-base                     shift and go to state 10
    empty                          shift and go to state 12

state 9

    (8) class-declaration -> CLASS IDENTIFIER class-base-opt . class-body semi-opt
    (13) class-body -> . BLOCK_BEGIN class-member-declarations-opt BLOCK_END

    BLOCK_BEGIN     shift and go to state 14

    class-body                     shift and go to state 13

state 10

    (9) class-base-opt -> class-base .

    BLOCK_BEGIN     reduce using rule 9 (class-base-opt -> class-base .)


state 11

    (11) class-base -> COLON . class-type
    (12) class-type -> . IDENTIFIER

    IDENTIFIER      shift and go to state 15

    class-type                     shift and go to state 16

state 12

    (10) class-base-opt -> empty .

    BLOCK_BEGIN     reduce using rule 10 (class-base-opt -> empty .)


state 13

    (8) class-declaration -> CLASS IDENTIFIER class-base-opt class-body . semi-opt
    (2) semi-opt -> . DELIM
    (3) semi-opt -> . empty
    (269) empty -> .

    DELIM           shift and go to state 17
    CLASS           reduce using rule 269 (empty -> .)
    $end            reduce using rule 269 (empty -> .)
    CONST           reduce using rule 269 (empty -> .)
    BITCOMP         reduce using rule 269 (empty -> .)
    PUBLIC          reduce using rule 269 (empty -> .)
    PRIVATE         reduce using rule 269 (empty -> .)
    VOID            reduce using rule 269 (empty -> .)
    IDENTIFIER      reduce using rule 269 (empty -> .)
    BOOL            reduce using rule 269 (empty -> .)
    INT             reduce using rule 269 (empty -> .)
    UINT            reduce using rule 269 (empty -> .)
    LONG            reduce using rule 269 (empty -> .)
    ULONG           reduce using rule 269 (empty -> .)
    CHAR            reduce using rule 269 (empty -> .)
    FLOAT           reduce using rule 269 (empty -> .)
    DOUBLE          reduce using rule 269 (empty -> .)
    BLOCK_END       reduce using rule 269 (empty -> .)

    semi-opt                       shift and go to state 18
    empty                          shift and go to state 19

state 14

    (13) class-body -> BLOCK_BEGIN . class-member-declarations-opt BLOCK_END
    (14) class-member-declarations-opt -> . class-member-declarations
    (15) class-member-declarations-opt -> . empty
    (16) class-member-declarations -> . class-member-declaration
    (17) class-member-declarations -> . class-member-declarations class-member-declaration
    (269) empty -> .
    (18) class-member-declaration -> . constant-declaration
    (19) class-member-declaration -> . field-declaration
    (20) class-member-declaration -> . method-declaration
    (21) class-member-declaration -> . constructor-declaration
    (22) class-member-declaration -> . destructor-declaration
    (23) class-member-declaration -> . class-declaration
    (24) constant-declaration -> . modifier CONST simple-type constant-declarators DELIM
    (25) constant-declaration -> . CONST simple-type constant-declarators DELIM
    (145) field-declaration -> . modifier type variable-declarators DELIM
    (146) field-declaration -> . type variable-declarators DELIM
    (153) method-declaration -> . method-header method-body
    (250) constructor-declaration -> . constructor-declarator constructor-body
    (254) destructor-declaration -> . BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body
    (8) class-declaration -> . CLASS IDENTIFIER class-base-opt class-body semi-opt
    (147) modifier -> . PUBLIC
    (148) modifier -> . PRIVATE
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (154) method-header -> . modifier type member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (155) method-header -> . modifier VOID member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (156) method-header -> . type member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (157) method-header -> . VOID member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (251) constructor-declarator -> . IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (29) simple-type -> . numeric-type
    (30) simple-type -> . BOOL
    (12) class-type -> . IDENTIFIER
    (40) array-type -> . simple-type rank-specifier
    (31) numeric-type -> . integral-type
    (32) numeric-type -> . floating-point-type
    (33) integral-type -> . INT
    (34) integral-type -> . UINT
    (35) integral-type -> . LONG
    (36) integral-type -> . ULONG
    (37) integral-type -> . CHAR
    (38) floating-point-type -> . FLOAT
    (39) floating-point-type -> . DOUBLE

    BLOCK_END       reduce using rule 269 (empty -> .)
    CONST           shift and go to state 24
    BITCOMP         shift and go to state 30
    CLASS           shift and go to state 5
    PUBLIC          shift and go to state 53
    PRIVATE         shift and go to state 29
    VOID            shift and go to state 21
    IDENTIFIER      shift and go to state 43
    BOOL            shift and go to state 48
    INT             shift and go to state 25
    UINT            shift and go to state 42
    LONG            shift and go to state 44
    ULONG           shift and go to state 27
    CHAR            shift and go to state 22
    FLOAT           shift and go to state 47
    DOUBLE          shift and go to state 52

    method-header                  shift and go to state 20
    class-member-declaration       shift and go to state 50
    integral-type                  shift and go to state 26
    numeric-type                   shift and go to state 28
    method-declaration             shift and go to state 31
    class-member-declarations-opt  shift and go to state 37
    type                           shift and go to state 34
    empty                          shift and go to state 35
    array-type                     shift and go to state 36
    field-declaration              shift and go to state 32
    constructor-declaration        shift and go to state 38
    floating-point-type            shift and go to state 39
    class-member-declarations      shift and go to state 40
    class-declaration              shift and go to state 41
    constant-declaration           shift and go to state 33
    destructor-declaration         shift and go to state 45
    constructor-declarator         shift and go to state 46
    class-type                     shift and go to state 49
    simple-type                    shift and go to state 23
    modifier                       shift and go to state 51

state 15

    (12) class-type -> IDENTIFIER .

    OPEN_PAREN      reduce using rule 12 (class-type -> IDENTIFIER .)
    BLOCK_BEGIN     reduce using rule 12 (class-type -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 12 (class-type -> IDENTIFIER .)


state 16

    (11) class-base -> COLON class-type .

    BLOCK_BEGIN     reduce using rule 11 (class-base -> COLON class-type .)


state 17

    (2) semi-opt -> DELIM .

    CLASS           reduce using rule 2 (semi-opt -> DELIM .)
    $end            reduce using rule 2 (semi-opt -> DELIM .)
    CONST           reduce using rule 2 (semi-opt -> DELIM .)
    BITCOMP         reduce using rule 2 (semi-opt -> DELIM .)
    PUBLIC          reduce using rule 2 (semi-opt -> DELIM .)
    PRIVATE         reduce using rule 2 (semi-opt -> DELIM .)
    VOID            reduce using rule 2 (semi-opt -> DELIM .)
    IDENTIFIER      reduce using rule 2 (semi-opt -> DELIM .)
    BOOL            reduce using rule 2 (semi-opt -> DELIM .)
    INT             reduce using rule 2 (semi-opt -> DELIM .)
    UINT            reduce using rule 2 (semi-opt -> DELIM .)
    LONG            reduce using rule 2 (semi-opt -> DELIM .)
    ULONG           reduce using rule 2 (semi-opt -> DELIM .)
    CHAR            reduce using rule 2 (semi-opt -> DELIM .)
    FLOAT           reduce using rule 2 (semi-opt -> DELIM .)
    DOUBLE          reduce using rule 2 (semi-opt -> DELIM .)
    BLOCK_END       reduce using rule 2 (semi-opt -> DELIM .)


state 18

    (8) class-declaration -> CLASS IDENTIFIER class-base-opt class-body semi-opt .

    CLASS           reduce using rule 8 (class-declaration -> CLASS IDENTIFIER class-base-opt class-body semi-opt .)
    $end            reduce using rule 8 (class-declaration -> CLASS IDENTIFIER class-base-opt class-body semi-opt .)
    CONST           reduce using rule 8 (class-declaration -> CLASS IDENTIFIER class-base-opt class-body semi-opt .)
    BITCOMP         reduce using rule 8 (class-declaration -> CLASS IDENTIFIER class-base-opt class-body semi-opt .)
    PUBLIC          reduce using rule 8 (class-declaration -> CLASS IDENTIFIER class-base-opt class-body semi-opt .)
    PRIVATE         reduce using rule 8 (class-declaration -> CLASS IDENTIFIER class-base-opt class-body semi-opt .)
    VOID            reduce using rule 8 (class-declaration -> CLASS IDENTIFIER class-base-opt class-body semi-opt .)
    IDENTIFIER      reduce using rule 8 (class-declaration -> CLASS IDENTIFIER class-base-opt class-body semi-opt .)
    BOOL            reduce using rule 8 (class-declaration -> CLASS IDENTIFIER class-base-opt class-body semi-opt .)
    INT             reduce using rule 8 (class-declaration -> CLASS IDENTIFIER class-base-opt class-body semi-opt .)
    UINT            reduce using rule 8 (class-declaration -> CLASS IDENTIFIER class-base-opt class-body semi-opt .)
    LONG            reduce using rule 8 (class-declaration -> CLASS IDENTIFIER class-base-opt class-body semi-opt .)
    ULONG           reduce using rule 8 (class-declaration -> CLASS IDENTIFIER class-base-opt class-body semi-opt .)
    CHAR            reduce using rule 8 (class-declaration -> CLASS IDENTIFIER class-base-opt class-body semi-opt .)
    FLOAT           reduce using rule 8 (class-declaration -> CLASS IDENTIFIER class-base-opt class-body semi-opt .)
    DOUBLE          reduce using rule 8 (class-declaration -> CLASS IDENTIFIER class-base-opt class-body semi-opt .)
    BLOCK_END       reduce using rule 8 (class-declaration -> CLASS IDENTIFIER class-base-opt class-body semi-opt .)


state 19

    (3) semi-opt -> empty .

    CLASS           reduce using rule 3 (semi-opt -> empty .)
    $end            reduce using rule 3 (semi-opt -> empty .)
    CONST           reduce using rule 3 (semi-opt -> empty .)
    BITCOMP         reduce using rule 3 (semi-opt -> empty .)
    PUBLIC          reduce using rule 3 (semi-opt -> empty .)
    PRIVATE         reduce using rule 3 (semi-opt -> empty .)
    VOID            reduce using rule 3 (semi-opt -> empty .)
    IDENTIFIER      reduce using rule 3 (semi-opt -> empty .)
    BOOL            reduce using rule 3 (semi-opt -> empty .)
    INT             reduce using rule 3 (semi-opt -> empty .)
    UINT            reduce using rule 3 (semi-opt -> empty .)
    LONG            reduce using rule 3 (semi-opt -> empty .)
    ULONG           reduce using rule 3 (semi-opt -> empty .)
    CHAR            reduce using rule 3 (semi-opt -> empty .)
    FLOAT           reduce using rule 3 (semi-opt -> empty .)
    DOUBLE          reduce using rule 3 (semi-opt -> empty .)
    BLOCK_END       reduce using rule 3 (semi-opt -> empty .)


state 20

    (153) method-declaration -> method-header . method-body
    (168) method-body -> . block
    (169) method-body -> . DELIM
    (170) block -> . BLOCK_BEGIN statement-list-opt BLOCK_END

    DELIM           shift and go to state 54
    BLOCK_BEGIN     shift and go to state 55

    method-body                    shift and go to state 56
    block                          shift and go to state 57

state 21

    (157) method-header -> VOID . member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (160) member-name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 59

    member-name                    shift and go to state 58

state 22

    (37) integral-type -> CHAR .

    OPEN_BRACKET    reduce using rule 37 (integral-type -> CHAR .)
    IDENTIFIER      reduce using rule 37 (integral-type -> CHAR .)
    OPEN_PAREN      reduce using rule 37 (integral-type -> CHAR .)


state 23

    (26) type -> simple-type .
    (40) array-type -> simple-type . rank-specifier
    (41) rank-specifier -> . OPEN_BRACKET dim-separators-opt CLOSE_BRACKET

    IDENTIFIER      reduce using rule 26 (type -> simple-type .)
    OPEN_BRACKET    shift and go to state 60

    rank-specifier                 shift and go to state 61

state 24

    (25) constant-declaration -> CONST . simple-type constant-declarators DELIM
    (29) simple-type -> . numeric-type
    (30) simple-type -> . BOOL
    (31) numeric-type -> . integral-type
    (32) numeric-type -> . floating-point-type
    (33) integral-type -> . INT
    (34) integral-type -> . UINT
    (35) integral-type -> . LONG
    (36) integral-type -> . ULONG
    (37) integral-type -> . CHAR
    (38) floating-point-type -> . FLOAT
    (39) floating-point-type -> . DOUBLE

    BOOL            shift and go to state 48
    INT             shift and go to state 25
    UINT            shift and go to state 42
    LONG            shift and go to state 44
    ULONG           shift and go to state 27
    CHAR            shift and go to state 22
    FLOAT           shift and go to state 47
    DOUBLE          shift and go to state 52

    floating-point-type            shift and go to state 39
    integral-type                  shift and go to state 26
    numeric-type                   shift and go to state 28
    simple-type                    shift and go to state 62

state 25

    (33) integral-type -> INT .

    OPEN_BRACKET    reduce using rule 33 (integral-type -> INT .)
    IDENTIFIER      reduce using rule 33 (integral-type -> INT .)
    OPEN_PAREN      reduce using rule 33 (integral-type -> INT .)


state 26

    (31) numeric-type -> integral-type .

    OPEN_BRACKET    reduce using rule 31 (numeric-type -> integral-type .)
    OPEN_PAREN      reduce using rule 31 (numeric-type -> integral-type .)
    IDENTIFIER      reduce using rule 31 (numeric-type -> integral-type .)


state 27

    (36) integral-type -> ULONG .

    OPEN_BRACKET    reduce using rule 36 (integral-type -> ULONG .)
    IDENTIFIER      reduce using rule 36 (integral-type -> ULONG .)
    OPEN_PAREN      reduce using rule 36 (integral-type -> ULONG .)


state 28

    (29) simple-type -> numeric-type .

    OPEN_BRACKET    reduce using rule 29 (simple-type -> numeric-type .)
    IDENTIFIER      reduce using rule 29 (simple-type -> numeric-type .)
    OPEN_PAREN      reduce using rule 29 (simple-type -> numeric-type .)


state 29

    (148) modifier -> PRIVATE .

    CONST           reduce using rule 148 (modifier -> PRIVATE .)
    VOID            reduce using rule 148 (modifier -> PRIVATE .)
    BOOL            reduce using rule 148 (modifier -> PRIVATE .)
    IDENTIFIER      reduce using rule 148 (modifier -> PRIVATE .)
    INT             reduce using rule 148 (modifier -> PRIVATE .)
    UINT            reduce using rule 148 (modifier -> PRIVATE .)
    LONG            reduce using rule 148 (modifier -> PRIVATE .)
    ULONG           reduce using rule 148 (modifier -> PRIVATE .)
    CHAR            reduce using rule 148 (modifier -> PRIVATE .)
    FLOAT           reduce using rule 148 (modifier -> PRIVATE .)
    DOUBLE          reduce using rule 148 (modifier -> PRIVATE .)


state 30

    (254) destructor-declaration -> BITCOMP . IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body

    IDENTIFIER      shift and go to state 63


state 31

    (20) class-member-declaration -> method-declaration .

    CONST           reduce using rule 20 (class-member-declaration -> method-declaration .)
    BITCOMP         reduce using rule 20 (class-member-declaration -> method-declaration .)
    CLASS           reduce using rule 20 (class-member-declaration -> method-declaration .)
    PUBLIC          reduce using rule 20 (class-member-declaration -> method-declaration .)
    PRIVATE         reduce using rule 20 (class-member-declaration -> method-declaration .)
    VOID            reduce using rule 20 (class-member-declaration -> method-declaration .)
    IDENTIFIER      reduce using rule 20 (class-member-declaration -> method-declaration .)
    BOOL            reduce using rule 20 (class-member-declaration -> method-declaration .)
    INT             reduce using rule 20 (class-member-declaration -> method-declaration .)
    UINT            reduce using rule 20 (class-member-declaration -> method-declaration .)
    LONG            reduce using rule 20 (class-member-declaration -> method-declaration .)
    ULONG           reduce using rule 20 (class-member-declaration -> method-declaration .)
    CHAR            reduce using rule 20 (class-member-declaration -> method-declaration .)
    FLOAT           reduce using rule 20 (class-member-declaration -> method-declaration .)
    DOUBLE          reduce using rule 20 (class-member-declaration -> method-declaration .)
    BLOCK_END       reduce using rule 20 (class-member-declaration -> method-declaration .)


state 32

    (19) class-member-declaration -> field-declaration .

    CONST           reduce using rule 19 (class-member-declaration -> field-declaration .)
    BITCOMP         reduce using rule 19 (class-member-declaration -> field-declaration .)
    CLASS           reduce using rule 19 (class-member-declaration -> field-declaration .)
    PUBLIC          reduce using rule 19 (class-member-declaration -> field-declaration .)
    PRIVATE         reduce using rule 19 (class-member-declaration -> field-declaration .)
    VOID            reduce using rule 19 (class-member-declaration -> field-declaration .)
    IDENTIFIER      reduce using rule 19 (class-member-declaration -> field-declaration .)
    BOOL            reduce using rule 19 (class-member-declaration -> field-declaration .)
    INT             reduce using rule 19 (class-member-declaration -> field-declaration .)
    UINT            reduce using rule 19 (class-member-declaration -> field-declaration .)
    LONG            reduce using rule 19 (class-member-declaration -> field-declaration .)
    ULONG           reduce using rule 19 (class-member-declaration -> field-declaration .)
    CHAR            reduce using rule 19 (class-member-declaration -> field-declaration .)
    FLOAT           reduce using rule 19 (class-member-declaration -> field-declaration .)
    DOUBLE          reduce using rule 19 (class-member-declaration -> field-declaration .)
    BLOCK_END       reduce using rule 19 (class-member-declaration -> field-declaration .)


state 33

    (18) class-member-declaration -> constant-declaration .

    CONST           reduce using rule 18 (class-member-declaration -> constant-declaration .)
    BITCOMP         reduce using rule 18 (class-member-declaration -> constant-declaration .)
    CLASS           reduce using rule 18 (class-member-declaration -> constant-declaration .)
    PUBLIC          reduce using rule 18 (class-member-declaration -> constant-declaration .)
    PRIVATE         reduce using rule 18 (class-member-declaration -> constant-declaration .)
    VOID            reduce using rule 18 (class-member-declaration -> constant-declaration .)
    IDENTIFIER      reduce using rule 18 (class-member-declaration -> constant-declaration .)
    BOOL            reduce using rule 18 (class-member-declaration -> constant-declaration .)
    INT             reduce using rule 18 (class-member-declaration -> constant-declaration .)
    UINT            reduce using rule 18 (class-member-declaration -> constant-declaration .)
    LONG            reduce using rule 18 (class-member-declaration -> constant-declaration .)
    ULONG           reduce using rule 18 (class-member-declaration -> constant-declaration .)
    CHAR            reduce using rule 18 (class-member-declaration -> constant-declaration .)
    FLOAT           reduce using rule 18 (class-member-declaration -> constant-declaration .)
    DOUBLE          reduce using rule 18 (class-member-declaration -> constant-declaration .)
    BLOCK_END       reduce using rule 18 (class-member-declaration -> constant-declaration .)


state 34

    (146) field-declaration -> type . variable-declarators DELIM
    (156) method-header -> type . member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (149) variable-declarators -> . variable-declarator
    (150) variable-declarators -> . variable-declarators COMMA variable-declarator
    (160) member-name -> . IDENTIFIER
    (151) variable-declarator -> . IDENTIFIER
    (152) variable-declarator -> . IDENTIFIER ASSIGN variable-initializer

    IDENTIFIER      shift and go to state 67

    variable-declarator            shift and go to state 64
    variable-declarators           shift and go to state 65
    member-name                    shift and go to state 66

state 35

    (15) class-member-declarations-opt -> empty .

    BLOCK_END       reduce using rule 15 (class-member-declarations-opt -> empty .)


state 36

    (28) type -> array-type .

    IDENTIFIER      reduce using rule 28 (type -> array-type .)
    OPEN_PAREN      reduce using rule 28 (type -> array-type .)


state 37

    (13) class-body -> BLOCK_BEGIN class-member-declarations-opt . BLOCK_END

    BLOCK_END       shift and go to state 68


state 38

    (21) class-member-declaration -> constructor-declaration .

    CONST           reduce using rule 21 (class-member-declaration -> constructor-declaration .)
    BITCOMP         reduce using rule 21 (class-member-declaration -> constructor-declaration .)
    CLASS           reduce using rule 21 (class-member-declaration -> constructor-declaration .)
    PUBLIC          reduce using rule 21 (class-member-declaration -> constructor-declaration .)
    PRIVATE         reduce using rule 21 (class-member-declaration -> constructor-declaration .)
    VOID            reduce using rule 21 (class-member-declaration -> constructor-declaration .)
    IDENTIFIER      reduce using rule 21 (class-member-declaration -> constructor-declaration .)
    BOOL            reduce using rule 21 (class-member-declaration -> constructor-declaration .)
    INT             reduce using rule 21 (class-member-declaration -> constructor-declaration .)
    UINT            reduce using rule 21 (class-member-declaration -> constructor-declaration .)
    LONG            reduce using rule 21 (class-member-declaration -> constructor-declaration .)
    ULONG           reduce using rule 21 (class-member-declaration -> constructor-declaration .)
    CHAR            reduce using rule 21 (class-member-declaration -> constructor-declaration .)
    FLOAT           reduce using rule 21 (class-member-declaration -> constructor-declaration .)
    DOUBLE          reduce using rule 21 (class-member-declaration -> constructor-declaration .)
    BLOCK_END       reduce using rule 21 (class-member-declaration -> constructor-declaration .)


state 39

    (32) numeric-type -> floating-point-type .

    OPEN_BRACKET    reduce using rule 32 (numeric-type -> floating-point-type .)
    OPEN_PAREN      reduce using rule 32 (numeric-type -> floating-point-type .)
    IDENTIFIER      reduce using rule 32 (numeric-type -> floating-point-type .)


state 40

    (14) class-member-declarations-opt -> class-member-declarations .
    (17) class-member-declarations -> class-member-declarations . class-member-declaration
    (18) class-member-declaration -> . constant-declaration
    (19) class-member-declaration -> . field-declaration
    (20) class-member-declaration -> . method-declaration
    (21) class-member-declaration -> . constructor-declaration
    (22) class-member-declaration -> . destructor-declaration
    (23) class-member-declaration -> . class-declaration
    (24) constant-declaration -> . modifier CONST simple-type constant-declarators DELIM
    (25) constant-declaration -> . CONST simple-type constant-declarators DELIM
    (145) field-declaration -> . modifier type variable-declarators DELIM
    (146) field-declaration -> . type variable-declarators DELIM
    (153) method-declaration -> . method-header method-body
    (250) constructor-declaration -> . constructor-declarator constructor-body
    (254) destructor-declaration -> . BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body
    (8) class-declaration -> . CLASS IDENTIFIER class-base-opt class-body semi-opt
    (147) modifier -> . PUBLIC
    (148) modifier -> . PRIVATE
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (154) method-header -> . modifier type member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (155) method-header -> . modifier VOID member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (156) method-header -> . type member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (157) method-header -> . VOID member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (251) constructor-declarator -> . IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (29) simple-type -> . numeric-type
    (30) simple-type -> . BOOL
    (12) class-type -> . IDENTIFIER
    (40) array-type -> . simple-type rank-specifier
    (31) numeric-type -> . integral-type
    (32) numeric-type -> . floating-point-type
    (33) integral-type -> . INT
    (34) integral-type -> . UINT
    (35) integral-type -> . LONG
    (36) integral-type -> . ULONG
    (37) integral-type -> . CHAR
    (38) floating-point-type -> . FLOAT
    (39) floating-point-type -> . DOUBLE

    BLOCK_END       reduce using rule 14 (class-member-declarations-opt -> class-member-declarations .)
    CONST           shift and go to state 24
    BITCOMP         shift and go to state 30
    CLASS           shift and go to state 5
    PUBLIC          shift and go to state 53
    PRIVATE         shift and go to state 29
    VOID            shift and go to state 21
    IDENTIFIER      shift and go to state 43
    BOOL            shift and go to state 48
    INT             shift and go to state 25
    UINT            shift and go to state 42
    LONG            shift and go to state 44
    ULONG           shift and go to state 27
    CHAR            shift and go to state 22
    FLOAT           shift and go to state 47
    DOUBLE          shift and go to state 52

    method-header                  shift and go to state 20
    class-member-declaration       shift and go to state 69
    integral-type                  shift and go to state 26
    numeric-type                   shift and go to state 28
    method-declaration             shift and go to state 31
    field-declaration              shift and go to state 32
    type                           shift and go to state 34
    array-type                     shift and go to state 36
    constructor-declaration        shift and go to state 38
    floating-point-type            shift and go to state 39
    class-declaration              shift and go to state 41
    constant-declaration           shift and go to state 33
    destructor-declaration         shift and go to state 45
    constructor-declarator         shift and go to state 46
    class-type                     shift and go to state 49
    simple-type                    shift and go to state 23
    modifier                       shift and go to state 51

state 41

    (23) class-member-declaration -> class-declaration .

    CONST           reduce using rule 23 (class-member-declaration -> class-declaration .)
    BITCOMP         reduce using rule 23 (class-member-declaration -> class-declaration .)
    CLASS           reduce using rule 23 (class-member-declaration -> class-declaration .)
    PUBLIC          reduce using rule 23 (class-member-declaration -> class-declaration .)
    PRIVATE         reduce using rule 23 (class-member-declaration -> class-declaration .)
    VOID            reduce using rule 23 (class-member-declaration -> class-declaration .)
    IDENTIFIER      reduce using rule 23 (class-member-declaration -> class-declaration .)
    BOOL            reduce using rule 23 (class-member-declaration -> class-declaration .)
    INT             reduce using rule 23 (class-member-declaration -> class-declaration .)
    UINT            reduce using rule 23 (class-member-declaration -> class-declaration .)
    LONG            reduce using rule 23 (class-member-declaration -> class-declaration .)
    ULONG           reduce using rule 23 (class-member-declaration -> class-declaration .)
    CHAR            reduce using rule 23 (class-member-declaration -> class-declaration .)
    FLOAT           reduce using rule 23 (class-member-declaration -> class-declaration .)
    DOUBLE          reduce using rule 23 (class-member-declaration -> class-declaration .)
    BLOCK_END       reduce using rule 23 (class-member-declaration -> class-declaration .)


state 42

    (34) integral-type -> UINT .

    OPEN_BRACKET    reduce using rule 34 (integral-type -> UINT .)
    IDENTIFIER      reduce using rule 34 (integral-type -> UINT .)
    OPEN_PAREN      reduce using rule 34 (integral-type -> UINT .)


state 43

    (251) constructor-declarator -> IDENTIFIER . OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (12) class-type -> IDENTIFIER .

    OPEN_PAREN      shift and go to state 70
    IDENTIFIER      reduce using rule 12 (class-type -> IDENTIFIER .)


state 44

    (35) integral-type -> LONG .

    OPEN_BRACKET    reduce using rule 35 (integral-type -> LONG .)
    IDENTIFIER      reduce using rule 35 (integral-type -> LONG .)
    OPEN_PAREN      reduce using rule 35 (integral-type -> LONG .)


state 45

    (22) class-member-declaration -> destructor-declaration .

    CONST           reduce using rule 22 (class-member-declaration -> destructor-declaration .)
    BITCOMP         reduce using rule 22 (class-member-declaration -> destructor-declaration .)
    CLASS           reduce using rule 22 (class-member-declaration -> destructor-declaration .)
    PUBLIC          reduce using rule 22 (class-member-declaration -> destructor-declaration .)
    PRIVATE         reduce using rule 22 (class-member-declaration -> destructor-declaration .)
    VOID            reduce using rule 22 (class-member-declaration -> destructor-declaration .)
    IDENTIFIER      reduce using rule 22 (class-member-declaration -> destructor-declaration .)
    BOOL            reduce using rule 22 (class-member-declaration -> destructor-declaration .)
    INT             reduce using rule 22 (class-member-declaration -> destructor-declaration .)
    UINT            reduce using rule 22 (class-member-declaration -> destructor-declaration .)
    LONG            reduce using rule 22 (class-member-declaration -> destructor-declaration .)
    ULONG           reduce using rule 22 (class-member-declaration -> destructor-declaration .)
    CHAR            reduce using rule 22 (class-member-declaration -> destructor-declaration .)
    FLOAT           reduce using rule 22 (class-member-declaration -> destructor-declaration .)
    DOUBLE          reduce using rule 22 (class-member-declaration -> destructor-declaration .)
    BLOCK_END       reduce using rule 22 (class-member-declaration -> destructor-declaration .)


state 46

    (250) constructor-declaration -> constructor-declarator . constructor-body
    (252) constructor-body -> . block
    (253) constructor-body -> . DELIM
    (170) block -> . BLOCK_BEGIN statement-list-opt BLOCK_END

    DELIM           shift and go to state 72
    BLOCK_BEGIN     shift and go to state 55

    constructor-body               shift and go to state 71
    block                          shift and go to state 73

state 47

    (38) floating-point-type -> FLOAT .

    OPEN_BRACKET    reduce using rule 38 (floating-point-type -> FLOAT .)
    IDENTIFIER      reduce using rule 38 (floating-point-type -> FLOAT .)
    OPEN_PAREN      reduce using rule 38 (floating-point-type -> FLOAT .)


state 48

    (30) simple-type -> BOOL .

    OPEN_BRACKET    reduce using rule 30 (simple-type -> BOOL .)
    IDENTIFIER      reduce using rule 30 (simple-type -> BOOL .)
    OPEN_PAREN      reduce using rule 30 (simple-type -> BOOL .)


state 49

    (27) type -> class-type .

    IDENTIFIER      reduce using rule 27 (type -> class-type .)
    OPEN_PAREN      reduce using rule 27 (type -> class-type .)


state 50

    (16) class-member-declarations -> class-member-declaration .

    CONST           reduce using rule 16 (class-member-declarations -> class-member-declaration .)
    BITCOMP         reduce using rule 16 (class-member-declarations -> class-member-declaration .)
    CLASS           reduce using rule 16 (class-member-declarations -> class-member-declaration .)
    PUBLIC          reduce using rule 16 (class-member-declarations -> class-member-declaration .)
    PRIVATE         reduce using rule 16 (class-member-declarations -> class-member-declaration .)
    VOID            reduce using rule 16 (class-member-declarations -> class-member-declaration .)
    IDENTIFIER      reduce using rule 16 (class-member-declarations -> class-member-declaration .)
    BOOL            reduce using rule 16 (class-member-declarations -> class-member-declaration .)
    INT             reduce using rule 16 (class-member-declarations -> class-member-declaration .)
    UINT            reduce using rule 16 (class-member-declarations -> class-member-declaration .)
    LONG            reduce using rule 16 (class-member-declarations -> class-member-declaration .)
    ULONG           reduce using rule 16 (class-member-declarations -> class-member-declaration .)
    CHAR            reduce using rule 16 (class-member-declarations -> class-member-declaration .)
    FLOAT           reduce using rule 16 (class-member-declarations -> class-member-declaration .)
    DOUBLE          reduce using rule 16 (class-member-declarations -> class-member-declaration .)
    BLOCK_END       reduce using rule 16 (class-member-declarations -> class-member-declaration .)


state 51

    (24) constant-declaration -> modifier . CONST simple-type constant-declarators DELIM
    (145) field-declaration -> modifier . type variable-declarators DELIM
    (154) method-header -> modifier . type member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (155) method-header -> modifier . VOID member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (29) simple-type -> . numeric-type
    (30) simple-type -> . BOOL
    (12) class-type -> . IDENTIFIER
    (40) array-type -> . simple-type rank-specifier
    (31) numeric-type -> . integral-type
    (32) numeric-type -> . floating-point-type
    (33) integral-type -> . INT
    (34) integral-type -> . UINT
    (35) integral-type -> . LONG
    (36) integral-type -> . ULONG
    (37) integral-type -> . CHAR
    (38) floating-point-type -> . FLOAT
    (39) floating-point-type -> . DOUBLE

    CONST           shift and go to state 74
    VOID            shift and go to state 75
    BOOL            shift and go to state 48
    IDENTIFIER      shift and go to state 15
    INT             shift and go to state 25
    UINT            shift and go to state 42
    LONG            shift and go to state 44
    ULONG           shift and go to state 27
    CHAR            shift and go to state 22
    FLOAT           shift and go to state 47
    DOUBLE          shift and go to state 52

    array-type                     shift and go to state 36
    integral-type                  shift and go to state 26
    numeric-type                   shift and go to state 28
    floating-point-type            shift and go to state 39
    simple-type                    shift and go to state 23
    class-type                     shift and go to state 49
    type                           shift and go to state 76

state 52

    (39) floating-point-type -> DOUBLE .

    OPEN_BRACKET    reduce using rule 39 (floating-point-type -> DOUBLE .)
    IDENTIFIER      reduce using rule 39 (floating-point-type -> DOUBLE .)
    OPEN_PAREN      reduce using rule 39 (floating-point-type -> DOUBLE .)


state 53

    (147) modifier -> PUBLIC .

    CONST           reduce using rule 147 (modifier -> PUBLIC .)
    VOID            reduce using rule 147 (modifier -> PUBLIC .)
    BOOL            reduce using rule 147 (modifier -> PUBLIC .)
    IDENTIFIER      reduce using rule 147 (modifier -> PUBLIC .)
    INT             reduce using rule 147 (modifier -> PUBLIC .)
    UINT            reduce using rule 147 (modifier -> PUBLIC .)
    LONG            reduce using rule 147 (modifier -> PUBLIC .)
    ULONG           reduce using rule 147 (modifier -> PUBLIC .)
    CHAR            reduce using rule 147 (modifier -> PUBLIC .)
    FLOAT           reduce using rule 147 (modifier -> PUBLIC .)
    DOUBLE          reduce using rule 147 (modifier -> PUBLIC .)


state 54

    (169) method-body -> DELIM .

    CONST           reduce using rule 169 (method-body -> DELIM .)
    BITCOMP         reduce using rule 169 (method-body -> DELIM .)
    CLASS           reduce using rule 169 (method-body -> DELIM .)
    PUBLIC          reduce using rule 169 (method-body -> DELIM .)
    PRIVATE         reduce using rule 169 (method-body -> DELIM .)
    VOID            reduce using rule 169 (method-body -> DELIM .)
    IDENTIFIER      reduce using rule 169 (method-body -> DELIM .)
    BOOL            reduce using rule 169 (method-body -> DELIM .)
    INT             reduce using rule 169 (method-body -> DELIM .)
    UINT            reduce using rule 169 (method-body -> DELIM .)
    LONG            reduce using rule 169 (method-body -> DELIM .)
    ULONG           reduce using rule 169 (method-body -> DELIM .)
    CHAR            reduce using rule 169 (method-body -> DELIM .)
    FLOAT           reduce using rule 169 (method-body -> DELIM .)
    DOUBLE          reduce using rule 169 (method-body -> DELIM .)
    BLOCK_END       reduce using rule 169 (method-body -> DELIM .)


state 55

    (170) block -> BLOCK_BEGIN . statement-list-opt BLOCK_END
    (171) statement-list-opt -> . statement-list
    (172) statement-list-opt -> . empty
    (173) statement-list -> . statement
    (174) statement-list -> . statement-list statement
    (269) empty -> .
    (175) statement -> . labeled-statement
    (176) statement -> . declaration-statement
    (177) statement -> . embedded-statement
    (178) labeled-statement -> . IDENTIFIER COLON statement
    (179) declaration-statement -> . local-variable-declaration DELIM
    (180) declaration-statement -> . local-constant-declaration DELIM
    (189) embedded-statement -> . block
    (190) embedded-statement -> . empty-statement
    (191) embedded-statement -> . expression-statement
    (192) embedded-statement -> . selection-statement
    (193) embedded-statement -> . iteration-statement
    (194) embedded-statement -> . jump-statement
    (181) local-variable-declaration -> . type local-variable-declarators
    (188) local-constant-declaration -> . CONST type constant-declarators
    (170) block -> . BLOCK_BEGIN statement-list-opt BLOCK_END
    (195) empty-statement -> . DELIM
    (196) expression-statement -> . statement-expression DELIM
    (204) selection-statement -> . if-statement
    (205) selection-statement -> . switch-statement
    (220) iteration-statement -> . while-statement
    (221) iteration-statement -> . for-statement
    (222) iteration-statement -> . foreach-statement
    (223) iteration-statement -> . do-statement
    (240) jump-statement -> . break-statement
    (241) jump-statement -> . continue-statement
    (242) jump-statement -> . goto-statement
    (243) jump-statement -> . return-statement
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (197) statement-expression -> . invocation-expression
    (198) statement-expression -> . object-creation-expression
    (199) statement-expression -> . assignment
    (200) statement-expression -> . post-increment-expression
    (201) statement-expression -> . post-decrement-expression
    (202) statement-expression -> . pre-increment-expression
    (203) statement-expression -> . pre-decrement-expression
    (206) if-statement -> . IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement
    (207) if-statement -> . IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement
    (209) switch-statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block
    (224) while-statement -> . WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement
    (226) for-statement -> . FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement
    (239) foreach-statement -> . FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement
    (225) do-statement -> . DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM
    (244) break-statement -> . BREAK DELIM
    (245) continue-statement -> . CONTINUE DELIM
    (246) goto-statement -> . GOTO IDENTIFIER DELIM
    (247) return-statement -> . RETURN expression-opt DELIM
    (29) simple-type -> . numeric-type
    (30) simple-type -> . BOOL
    (12) class-type -> . IDENTIFIER
    (40) array-type -> . simple-type rank-specifier
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (133) assignment -> . primary-expression assignment-operator expression
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression
    (31) numeric-type -> . integral-type
    (32) numeric-type -> . floating-point-type
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (33) integral-type -> . INT
    (34) integral-type -> . UINT
    (35) integral-type -> . LONG
    (36) integral-type -> . ULONG
    (37) integral-type -> . CHAR
    (38) floating-point-type -> . FLOAT
    (39) floating-point-type -> . DOUBLE
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET

    BLOCK_END       reduce using rule 269 (empty -> .)
    IDENTIFIER      shift and go to state 129
    CONST           shift and go to state 140
    BLOCK_BEGIN     shift and go to state 55
    DELIM           shift and go to state 115
    IF              shift and go to state 148
    SWITCH          shift and go to state 124
    WHILE           shift and go to state 118
    FOR             shift and go to state 105
    FOREACH         shift and go to state 90
    DO              shift and go to state 139
    BREAK           shift and go to state 136
    CONTINUE        shift and go to state 113
    GOTO            shift and go to state 87
    RETURN          shift and go to state 97
    BOOL            shift and go to state 48
    NEW             shift and go to state 120
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117
    INT             shift and go to state 25
    UINT            shift and go to state 42
    LONG            shift and go to state 44
    ULONG           shift and go to state 27
    CHAR            shift and go to state 22
    FLOAT           shift and go to state 47
    DOUBLE          shift and go to state 52
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88

    this-access                    shift and go to state 77
    return-statement               shift and go to state 98
    member-access                  shift and go to state 79
    selection-statement            shift and go to state 116
    parenthesized-expression       shift and go to state 96
    array-creation-expression      shift and go to state 144
    empty-statement                shift and go to state 119
    statement-list-opt             shift and go to state 142
    expression-statement           shift and go to state 81
    pre-decrement-expression       shift and go to state 108
    primary-no-array-creation-expression shift and go to state 82
    integral-type                  shift and go to state 26
    foreach-statement              shift and go to state 100
    break-statement                shift and go to state 121
    post-increment-expression      shift and go to state 83
    element-access                 shift and go to state 101
    statement-expression           shift and go to state 84
    local-constant-declaration     shift and go to state 102
    literal                        shift and go to state 128
    statement                      shift and go to state 127
    assignment                     shift and go to state 145
    for-statement                  shift and go to state 86
    type                           shift and go to state 130
    empty                          shift and go to state 131
    do-statement                   shift and go to state 104
    array-type                     shift and go to state 36
    floating-point-type            shift and go to state 39
    continue-statement             shift and go to state 106
    primary-expression             shift and go to state 149
    invocation-expression          shift and go to state 95
    labeled-statement              shift and go to state 89
    declaration-statement          shift and go to state 133
    object-creation-expression     shift and go to state 146
    post-decrement-expression      shift and go to state 132
    switch-statement               shift and go to state 91
    pre-increment-expression       shift and go to state 147
    numeric-type                   shift and go to state 28
    embedded-statement             shift and go to state 92
    base-access                    shift and go to state 126
    iteration-statement            shift and go to state 135
    jump-statement                 shift and go to state 93
    local-variable-declaration     shift and go to state 109
    goto-statement                 shift and go to state 111
    if-statement                   shift and go to state 112
    statement-list                 shift and go to state 137
    class-type                     shift and go to state 49
    while-statement                shift and go to state 138
    simple-type                    shift and go to state 23
    block                          shift and go to state 114

state 56

    (153) method-declaration -> method-header method-body .

    CONST           reduce using rule 153 (method-declaration -> method-header method-body .)
    BITCOMP         reduce using rule 153 (method-declaration -> method-header method-body .)
    CLASS           reduce using rule 153 (method-declaration -> method-header method-body .)
    PUBLIC          reduce using rule 153 (method-declaration -> method-header method-body .)
    PRIVATE         reduce using rule 153 (method-declaration -> method-header method-body .)
    VOID            reduce using rule 153 (method-declaration -> method-header method-body .)
    IDENTIFIER      reduce using rule 153 (method-declaration -> method-header method-body .)
    BOOL            reduce using rule 153 (method-declaration -> method-header method-body .)
    INT             reduce using rule 153 (method-declaration -> method-header method-body .)
    UINT            reduce using rule 153 (method-declaration -> method-header method-body .)
    LONG            reduce using rule 153 (method-declaration -> method-header method-body .)
    ULONG           reduce using rule 153 (method-declaration -> method-header method-body .)
    CHAR            reduce using rule 153 (method-declaration -> method-header method-body .)
    FLOAT           reduce using rule 153 (method-declaration -> method-header method-body .)
    DOUBLE          reduce using rule 153 (method-declaration -> method-header method-body .)
    BLOCK_END       reduce using rule 153 (method-declaration -> method-header method-body .)


state 57

    (168) method-body -> block .

    CONST           reduce using rule 168 (method-body -> block .)
    BITCOMP         reduce using rule 168 (method-body -> block .)
    CLASS           reduce using rule 168 (method-body -> block .)
    PUBLIC          reduce using rule 168 (method-body -> block .)
    PRIVATE         reduce using rule 168 (method-body -> block .)
    VOID            reduce using rule 168 (method-body -> block .)
    IDENTIFIER      reduce using rule 168 (method-body -> block .)
    BOOL            reduce using rule 168 (method-body -> block .)
    INT             reduce using rule 168 (method-body -> block .)
    UINT            reduce using rule 168 (method-body -> block .)
    LONG            reduce using rule 168 (method-body -> block .)
    ULONG           reduce using rule 168 (method-body -> block .)
    CHAR            reduce using rule 168 (method-body -> block .)
    FLOAT           reduce using rule 168 (method-body -> block .)
    DOUBLE          reduce using rule 168 (method-body -> block .)
    BLOCK_END       reduce using rule 168 (method-body -> block .)


state 58

    (157) method-header -> VOID member-name . OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN

    OPEN_PAREN      shift and go to state 151


state 59

    (160) member-name -> IDENTIFIER .

    OPEN_PAREN      reduce using rule 160 (member-name -> IDENTIFIER .)


state 60

    (41) rank-specifier -> OPEN_BRACKET . dim-separators-opt CLOSE_BRACKET
    (42) dim-separators-opt -> . dim-separators
    (43) dim-separators-opt -> . empty
    (44) dim-separators -> . COMMA
    (45) dim-separators -> . dim-separators COMMA
    (269) empty -> .

    COMMA           shift and go to state 153
    CLOSE_BRACKET   reduce using rule 269 (empty -> .)

    dim-separators-opt             shift and go to state 152
    empty                          shift and go to state 155
    dim-separators                 shift and go to state 154

state 61

    (40) array-type -> simple-type rank-specifier .

    IDENTIFIER      reduce using rule 40 (array-type -> simple-type rank-specifier .)
    OPEN_PAREN      reduce using rule 40 (array-type -> simple-type rank-specifier .)


state 62

    (25) constant-declaration -> CONST simple-type . constant-declarators DELIM
    (46) constant-declarators -> . constant-declarator
    (47) constant-declarators -> . constant-declarators COMMA constant-declarator
    (48) constant-declarator -> . IDENTIFIER ASSIGN expression

    IDENTIFIER      shift and go to state 157

    constant-declarators           shift and go to state 156
    constant-declarator            shift and go to state 158

state 63

    (254) destructor-declaration -> BITCOMP IDENTIFIER . OPEN_PAREN CLOSE_PAREN destructor-body

    OPEN_PAREN      shift and go to state 159


state 64

    (149) variable-declarators -> variable-declarator .

    DELIM           reduce using rule 149 (variable-declarators -> variable-declarator .)
    COMMA           reduce using rule 149 (variable-declarators -> variable-declarator .)


state 65

    (146) field-declaration -> type variable-declarators . DELIM
    (150) variable-declarators -> variable-declarators . COMMA variable-declarator

    DELIM           shift and go to state 160
    COMMA           shift and go to state 161


state 66

    (156) method-header -> type member-name . OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN

    OPEN_PAREN      shift and go to state 162


state 67

    (160) member-name -> IDENTIFIER .
    (151) variable-declarator -> IDENTIFIER .
    (152) variable-declarator -> IDENTIFIER . ASSIGN variable-initializer

    OPEN_PAREN      reduce using rule 160 (member-name -> IDENTIFIER .)
    DELIM           reduce using rule 151 (variable-declarator -> IDENTIFIER .)
    COMMA           reduce using rule 151 (variable-declarator -> IDENTIFIER .)
    ASSIGN          shift and go to state 163


state 68

    (13) class-body -> BLOCK_BEGIN class-member-declarations-opt BLOCK_END .

    DELIM           reduce using rule 13 (class-body -> BLOCK_BEGIN class-member-declarations-opt BLOCK_END .)
    CLASS           reduce using rule 13 (class-body -> BLOCK_BEGIN class-member-declarations-opt BLOCK_END .)
    $end            reduce using rule 13 (class-body -> BLOCK_BEGIN class-member-declarations-opt BLOCK_END .)
    CONST           reduce using rule 13 (class-body -> BLOCK_BEGIN class-member-declarations-opt BLOCK_END .)
    BITCOMP         reduce using rule 13 (class-body -> BLOCK_BEGIN class-member-declarations-opt BLOCK_END .)
    PUBLIC          reduce using rule 13 (class-body -> BLOCK_BEGIN class-member-declarations-opt BLOCK_END .)
    PRIVATE         reduce using rule 13 (class-body -> BLOCK_BEGIN class-member-declarations-opt BLOCK_END .)
    VOID            reduce using rule 13 (class-body -> BLOCK_BEGIN class-member-declarations-opt BLOCK_END .)
    IDENTIFIER      reduce using rule 13 (class-body -> BLOCK_BEGIN class-member-declarations-opt BLOCK_END .)
    BOOL            reduce using rule 13 (class-body -> BLOCK_BEGIN class-member-declarations-opt BLOCK_END .)
    INT             reduce using rule 13 (class-body -> BLOCK_BEGIN class-member-declarations-opt BLOCK_END .)
    UINT            reduce using rule 13 (class-body -> BLOCK_BEGIN class-member-declarations-opt BLOCK_END .)
    LONG            reduce using rule 13 (class-body -> BLOCK_BEGIN class-member-declarations-opt BLOCK_END .)
    ULONG           reduce using rule 13 (class-body -> BLOCK_BEGIN class-member-declarations-opt BLOCK_END .)
    CHAR            reduce using rule 13 (class-body -> BLOCK_BEGIN class-member-declarations-opt BLOCK_END .)
    FLOAT           reduce using rule 13 (class-body -> BLOCK_BEGIN class-member-declarations-opt BLOCK_END .)
    DOUBLE          reduce using rule 13 (class-body -> BLOCK_BEGIN class-member-declarations-opt BLOCK_END .)
    BLOCK_END       reduce using rule 13 (class-body -> BLOCK_BEGIN class-member-declarations-opt BLOCK_END .)


state 69

    (17) class-member-declarations -> class-member-declarations class-member-declaration .

    CONST           reduce using rule 17 (class-member-declarations -> class-member-declarations class-member-declaration .)
    BITCOMP         reduce using rule 17 (class-member-declarations -> class-member-declarations class-member-declaration .)
    CLASS           reduce using rule 17 (class-member-declarations -> class-member-declarations class-member-declaration .)
    PUBLIC          reduce using rule 17 (class-member-declarations -> class-member-declarations class-member-declaration .)
    PRIVATE         reduce using rule 17 (class-member-declarations -> class-member-declarations class-member-declaration .)
    VOID            reduce using rule 17 (class-member-declarations -> class-member-declarations class-member-declaration .)
    IDENTIFIER      reduce using rule 17 (class-member-declarations -> class-member-declarations class-member-declaration .)
    BOOL            reduce using rule 17 (class-member-declarations -> class-member-declarations class-member-declaration .)
    INT             reduce using rule 17 (class-member-declarations -> class-member-declarations class-member-declaration .)
    UINT            reduce using rule 17 (class-member-declarations -> class-member-declarations class-member-declaration .)
    LONG            reduce using rule 17 (class-member-declarations -> class-member-declarations class-member-declaration .)
    ULONG           reduce using rule 17 (class-member-declarations -> class-member-declarations class-member-declaration .)
    CHAR            reduce using rule 17 (class-member-declarations -> class-member-declarations class-member-declaration .)
    FLOAT           reduce using rule 17 (class-member-declarations -> class-member-declarations class-member-declaration .)
    DOUBLE          reduce using rule 17 (class-member-declarations -> class-member-declarations class-member-declaration .)
    BLOCK_END       reduce using rule 17 (class-member-declarations -> class-member-declarations class-member-declaration .)


state 70

    (251) constructor-declarator -> IDENTIFIER OPEN_PAREN . formal-parameter-list-opt CLOSE_PAREN
    (158) formal-parameter-list-opt -> . formal-parameter-list
    (159) formal-parameter-list-opt -> . empty
    (161) formal-parameter-list -> . fixed-parameters
    (269) empty -> .
    (162) fixed-parameters -> . fixed-parameter
    (163) fixed-parameters -> . fixed-parameters COMMA fixed-parameter
    (164) fixed-parameter -> . parameter-modifier-opt type IDENTIFIER
    (165) parameter-modifier-opt -> . parameter-modifier
    (166) parameter-modifier-opt -> . empty
    (167) parameter-modifier -> . OUT

    CLOSE_PAREN     reduce using rule 269 (empty -> .)
    BOOL            reduce using rule 269 (empty -> .)
    IDENTIFIER      reduce using rule 269 (empty -> .)
    INT             reduce using rule 269 (empty -> .)
    UINT            reduce using rule 269 (empty -> .)
    LONG            reduce using rule 269 (empty -> .)
    ULONG           reduce using rule 269 (empty -> .)
    CHAR            reduce using rule 269 (empty -> .)
    FLOAT           reduce using rule 269 (empty -> .)
    DOUBLE          reduce using rule 269 (empty -> .)
    OUT             shift and go to state 167

    parameter-modifier             shift and go to state 164
    fixed-parameters               shift and go to state 166
    formal-parameter-list-opt      shift and go to state 168
    parameter-modifier-opt         shift and go to state 165
    formal-parameter-list          shift and go to state 171
    empty                          shift and go to state 170
    fixed-parameter                shift and go to state 169

state 71

    (250) constructor-declaration -> constructor-declarator constructor-body .

    CONST           reduce using rule 250 (constructor-declaration -> constructor-declarator constructor-body .)
    BITCOMP         reduce using rule 250 (constructor-declaration -> constructor-declarator constructor-body .)
    CLASS           reduce using rule 250 (constructor-declaration -> constructor-declarator constructor-body .)
    PUBLIC          reduce using rule 250 (constructor-declaration -> constructor-declarator constructor-body .)
    PRIVATE         reduce using rule 250 (constructor-declaration -> constructor-declarator constructor-body .)
    VOID            reduce using rule 250 (constructor-declaration -> constructor-declarator constructor-body .)
    IDENTIFIER      reduce using rule 250 (constructor-declaration -> constructor-declarator constructor-body .)
    BOOL            reduce using rule 250 (constructor-declaration -> constructor-declarator constructor-body .)
    INT             reduce using rule 250 (constructor-declaration -> constructor-declarator constructor-body .)
    UINT            reduce using rule 250 (constructor-declaration -> constructor-declarator constructor-body .)
    LONG            reduce using rule 250 (constructor-declaration -> constructor-declarator constructor-body .)
    ULONG           reduce using rule 250 (constructor-declaration -> constructor-declarator constructor-body .)
    CHAR            reduce using rule 250 (constructor-declaration -> constructor-declarator constructor-body .)
    FLOAT           reduce using rule 250 (constructor-declaration -> constructor-declarator constructor-body .)
    DOUBLE          reduce using rule 250 (constructor-declaration -> constructor-declarator constructor-body .)
    BLOCK_END       reduce using rule 250 (constructor-declaration -> constructor-declarator constructor-body .)


state 72

    (253) constructor-body -> DELIM .

    CONST           reduce using rule 253 (constructor-body -> DELIM .)
    BITCOMP         reduce using rule 253 (constructor-body -> DELIM .)
    CLASS           reduce using rule 253 (constructor-body -> DELIM .)
    PUBLIC          reduce using rule 253 (constructor-body -> DELIM .)
    PRIVATE         reduce using rule 253 (constructor-body -> DELIM .)
    VOID            reduce using rule 253 (constructor-body -> DELIM .)
    IDENTIFIER      reduce using rule 253 (constructor-body -> DELIM .)
    BOOL            reduce using rule 253 (constructor-body -> DELIM .)
    INT             reduce using rule 253 (constructor-body -> DELIM .)
    UINT            reduce using rule 253 (constructor-body -> DELIM .)
    LONG            reduce using rule 253 (constructor-body -> DELIM .)
    ULONG           reduce using rule 253 (constructor-body -> DELIM .)
    CHAR            reduce using rule 253 (constructor-body -> DELIM .)
    FLOAT           reduce using rule 253 (constructor-body -> DELIM .)
    DOUBLE          reduce using rule 253 (constructor-body -> DELIM .)
    BLOCK_END       reduce using rule 253 (constructor-body -> DELIM .)


state 73

    (252) constructor-body -> block .

    CONST           reduce using rule 252 (constructor-body -> block .)
    BITCOMP         reduce using rule 252 (constructor-body -> block .)
    CLASS           reduce using rule 252 (constructor-body -> block .)
    PUBLIC          reduce using rule 252 (constructor-body -> block .)
    PRIVATE         reduce using rule 252 (constructor-body -> block .)
    VOID            reduce using rule 252 (constructor-body -> block .)
    IDENTIFIER      reduce using rule 252 (constructor-body -> block .)
    BOOL            reduce using rule 252 (constructor-body -> block .)
    INT             reduce using rule 252 (constructor-body -> block .)
    UINT            reduce using rule 252 (constructor-body -> block .)
    LONG            reduce using rule 252 (constructor-body -> block .)
    ULONG           reduce using rule 252 (constructor-body -> block .)
    CHAR            reduce using rule 252 (constructor-body -> block .)
    FLOAT           reduce using rule 252 (constructor-body -> block .)
    DOUBLE          reduce using rule 252 (constructor-body -> block .)
    BLOCK_END       reduce using rule 252 (constructor-body -> block .)


state 74

    (24) constant-declaration -> modifier CONST . simple-type constant-declarators DELIM
    (29) simple-type -> . numeric-type
    (30) simple-type -> . BOOL
    (31) numeric-type -> . integral-type
    (32) numeric-type -> . floating-point-type
    (33) integral-type -> . INT
    (34) integral-type -> . UINT
    (35) integral-type -> . LONG
    (36) integral-type -> . ULONG
    (37) integral-type -> . CHAR
    (38) floating-point-type -> . FLOAT
    (39) floating-point-type -> . DOUBLE

    BOOL            shift and go to state 48
    INT             shift and go to state 25
    UINT            shift and go to state 42
    LONG            shift and go to state 44
    ULONG           shift and go to state 27
    CHAR            shift and go to state 22
    FLOAT           shift and go to state 47
    DOUBLE          shift and go to state 52

    integral-type                  shift and go to state 26
    numeric-type                   shift and go to state 28
    floating-point-type            shift and go to state 39
    simple-type                    shift and go to state 172

state 75

    (155) method-header -> modifier VOID . member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (160) member-name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 59

    member-name                    shift and go to state 173

state 76

    (145) field-declaration -> modifier type . variable-declarators DELIM
    (154) method-header -> modifier type . member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (149) variable-declarators -> . variable-declarator
    (150) variable-declarators -> . variable-declarators COMMA variable-declarator
    (160) member-name -> . IDENTIFIER
    (151) variable-declarator -> . IDENTIFIER
    (152) variable-declarator -> . IDENTIFIER ASSIGN variable-initializer

    IDENTIFIER      shift and go to state 67

    variable-declarator            shift and go to state 64
    variable-declarators           shift and go to state 174
    member-name                    shift and go to state 175

state 77

    (109) primary-no-array-creation-expression -> this-access .

    OPEN_BRACKET    reduce using rule 109 (primary-no-array-creation-expression -> this-access .)
    DOT             reduce using rule 109 (primary-no-array-creation-expression -> this-access .)
    OPEN_PAREN      reduce using rule 109 (primary-no-array-creation-expression -> this-access .)
    INCRE           reduce using rule 109 (primary-no-array-creation-expression -> this-access .)
    DECRE           reduce using rule 109 (primary-no-array-creation-expression -> this-access .)
    TIMES           reduce using rule 109 (primary-no-array-creation-expression -> this-access .)
    DIV             reduce using rule 109 (primary-no-array-creation-expression -> this-access .)
    MOD             reduce using rule 109 (primary-no-array-creation-expression -> this-access .)
    PLUS            reduce using rule 109 (primary-no-array-creation-expression -> this-access .)
    MINUS           reduce using rule 109 (primary-no-array-creation-expression -> this-access .)
    LSHIFT          reduce using rule 109 (primary-no-array-creation-expression -> this-access .)
    RSHIFT          reduce using rule 109 (primary-no-array-creation-expression -> this-access .)
    LT              reduce using rule 109 (primary-no-array-creation-expression -> this-access .)
    GT              reduce using rule 109 (primary-no-array-creation-expression -> this-access .)
    LE              reduce using rule 109 (primary-no-array-creation-expression -> this-access .)
    GE              reduce using rule 109 (primary-no-array-creation-expression -> this-access .)
    EQ              reduce using rule 109 (primary-no-array-creation-expression -> this-access .)
    NE              reduce using rule 109 (primary-no-array-creation-expression -> this-access .)
    BITAND          reduce using rule 109 (primary-no-array-creation-expression -> this-access .)
    BITXOR          reduce using rule 109 (primary-no-array-creation-expression -> this-access .)
    BITOR           reduce using rule 109 (primary-no-array-creation-expression -> this-access .)
    LOGAND          reduce using rule 109 (primary-no-array-creation-expression -> this-access .)
    CONDOP          reduce using rule 109 (primary-no-array-creation-expression -> this-access .)
    LOGOR           reduce using rule 109 (primary-no-array-creation-expression -> this-access .)
    DELIM           reduce using rule 109 (primary-no-array-creation-expression -> this-access .)
    CLOSE_PAREN     reduce using rule 109 (primary-no-array-creation-expression -> this-access .)
    COMMA           reduce using rule 109 (primary-no-array-creation-expression -> this-access .)
    CLOSE_BRACKET   reduce using rule 109 (primary-no-array-creation-expression -> this-access .)
    BLOCK_END       reduce using rule 109 (primary-no-array-creation-expression -> this-access .)
    COLON           reduce using rule 109 (primary-no-array-creation-expression -> this-access .)
    ASSIGN          reduce using rule 109 (primary-no-array-creation-expression -> this-access .)
    PLUSEQUAL       reduce using rule 109 (primary-no-array-creation-expression -> this-access .)
    MINUSEQUAL      reduce using rule 109 (primary-no-array-creation-expression -> this-access .)
    TIMESEQUAL      reduce using rule 109 (primary-no-array-creation-expression -> this-access .)
    DIVEQUAL        reduce using rule 109 (primary-no-array-creation-expression -> this-access .)
    MODEQUAL        reduce using rule 109 (primary-no-array-creation-expression -> this-access .)
    BITANDEQUAL     reduce using rule 109 (primary-no-array-creation-expression -> this-access .)
    BITOREQUAL      reduce using rule 109 (primary-no-array-creation-expression -> this-access .)
    BITXOREQUAL     reduce using rule 109 (primary-no-array-creation-expression -> this-access .)
    LSHIFTEQUAL     reduce using rule 109 (primary-no-array-creation-expression -> this-access .)
    RSHIFTEQUAL     reduce using rule 109 (primary-no-array-creation-expression -> this-access .)


state 78

    (259) literal -> LICONST .

    OPEN_BRACKET    reduce using rule 259 (literal -> LICONST .)
    DOT             reduce using rule 259 (literal -> LICONST .)
    OPEN_PAREN      reduce using rule 259 (literal -> LICONST .)
    INCRE           reduce using rule 259 (literal -> LICONST .)
    DECRE           reduce using rule 259 (literal -> LICONST .)
    ASSIGN          reduce using rule 259 (literal -> LICONST .)
    PLUSEQUAL       reduce using rule 259 (literal -> LICONST .)
    MINUSEQUAL      reduce using rule 259 (literal -> LICONST .)
    TIMESEQUAL      reduce using rule 259 (literal -> LICONST .)
    DIVEQUAL        reduce using rule 259 (literal -> LICONST .)
    MODEQUAL        reduce using rule 259 (literal -> LICONST .)
    BITANDEQUAL     reduce using rule 259 (literal -> LICONST .)
    BITOREQUAL      reduce using rule 259 (literal -> LICONST .)
    BITXOREQUAL     reduce using rule 259 (literal -> LICONST .)
    LSHIFTEQUAL     reduce using rule 259 (literal -> LICONST .)
    RSHIFTEQUAL     reduce using rule 259 (literal -> LICONST .)
    TIMES           reduce using rule 259 (literal -> LICONST .)
    DIV             reduce using rule 259 (literal -> LICONST .)
    MOD             reduce using rule 259 (literal -> LICONST .)
    PLUS            reduce using rule 259 (literal -> LICONST .)
    MINUS           reduce using rule 259 (literal -> LICONST .)
    LSHIFT          reduce using rule 259 (literal -> LICONST .)
    RSHIFT          reduce using rule 259 (literal -> LICONST .)
    LT              reduce using rule 259 (literal -> LICONST .)
    GT              reduce using rule 259 (literal -> LICONST .)
    LE              reduce using rule 259 (literal -> LICONST .)
    GE              reduce using rule 259 (literal -> LICONST .)
    EQ              reduce using rule 259 (literal -> LICONST .)
    NE              reduce using rule 259 (literal -> LICONST .)
    BITAND          reduce using rule 259 (literal -> LICONST .)
    BITXOR          reduce using rule 259 (literal -> LICONST .)
    BITOR           reduce using rule 259 (literal -> LICONST .)
    LOGAND          reduce using rule 259 (literal -> LICONST .)
    CONDOP          reduce using rule 259 (literal -> LICONST .)
    LOGOR           reduce using rule 259 (literal -> LICONST .)
    CLOSE_PAREN     reduce using rule 259 (literal -> LICONST .)
    COMMA           reduce using rule 259 (literal -> LICONST .)
    BLOCK_END       reduce using rule 259 (literal -> LICONST .)
    DELIM           reduce using rule 259 (literal -> LICONST .)
    CLOSE_BRACKET   reduce using rule 259 (literal -> LICONST .)
    COLON           reduce using rule 259 (literal -> LICONST .)


state 79

    (106) primary-no-array-creation-expression -> member-access .

    OPEN_BRACKET    reduce using rule 106 (primary-no-array-creation-expression -> member-access .)
    DOT             reduce using rule 106 (primary-no-array-creation-expression -> member-access .)
    OPEN_PAREN      reduce using rule 106 (primary-no-array-creation-expression -> member-access .)
    INCRE           reduce using rule 106 (primary-no-array-creation-expression -> member-access .)
    DECRE           reduce using rule 106 (primary-no-array-creation-expression -> member-access .)
    TIMES           reduce using rule 106 (primary-no-array-creation-expression -> member-access .)
    DIV             reduce using rule 106 (primary-no-array-creation-expression -> member-access .)
    MOD             reduce using rule 106 (primary-no-array-creation-expression -> member-access .)
    PLUS            reduce using rule 106 (primary-no-array-creation-expression -> member-access .)
    MINUS           reduce using rule 106 (primary-no-array-creation-expression -> member-access .)
    LSHIFT          reduce using rule 106 (primary-no-array-creation-expression -> member-access .)
    RSHIFT          reduce using rule 106 (primary-no-array-creation-expression -> member-access .)
    LT              reduce using rule 106 (primary-no-array-creation-expression -> member-access .)
    GT              reduce using rule 106 (primary-no-array-creation-expression -> member-access .)
    LE              reduce using rule 106 (primary-no-array-creation-expression -> member-access .)
    GE              reduce using rule 106 (primary-no-array-creation-expression -> member-access .)
    EQ              reduce using rule 106 (primary-no-array-creation-expression -> member-access .)
    NE              reduce using rule 106 (primary-no-array-creation-expression -> member-access .)
    BITAND          reduce using rule 106 (primary-no-array-creation-expression -> member-access .)
    BITXOR          reduce using rule 106 (primary-no-array-creation-expression -> member-access .)
    BITOR           reduce using rule 106 (primary-no-array-creation-expression -> member-access .)
    LOGAND          reduce using rule 106 (primary-no-array-creation-expression -> member-access .)
    CONDOP          reduce using rule 106 (primary-no-array-creation-expression -> member-access .)
    LOGOR           reduce using rule 106 (primary-no-array-creation-expression -> member-access .)
    DELIM           reduce using rule 106 (primary-no-array-creation-expression -> member-access .)
    CLOSE_PAREN     reduce using rule 106 (primary-no-array-creation-expression -> member-access .)
    COMMA           reduce using rule 106 (primary-no-array-creation-expression -> member-access .)
    CLOSE_BRACKET   reduce using rule 106 (primary-no-array-creation-expression -> member-access .)
    BLOCK_END       reduce using rule 106 (primary-no-array-creation-expression -> member-access .)
    COLON           reduce using rule 106 (primary-no-array-creation-expression -> member-access .)
    ASSIGN          reduce using rule 106 (primary-no-array-creation-expression -> member-access .)
    PLUSEQUAL       reduce using rule 106 (primary-no-array-creation-expression -> member-access .)
    MINUSEQUAL      reduce using rule 106 (primary-no-array-creation-expression -> member-access .)
    TIMESEQUAL      reduce using rule 106 (primary-no-array-creation-expression -> member-access .)
    DIVEQUAL        reduce using rule 106 (primary-no-array-creation-expression -> member-access .)
    MODEQUAL        reduce using rule 106 (primary-no-array-creation-expression -> member-access .)
    BITANDEQUAL     reduce using rule 106 (primary-no-array-creation-expression -> member-access .)
    BITOREQUAL      reduce using rule 106 (primary-no-array-creation-expression -> member-access .)
    BITXOREQUAL     reduce using rule 106 (primary-no-array-creation-expression -> member-access .)
    LSHIFTEQUAL     reduce using rule 106 (primary-no-array-creation-expression -> member-access .)
    RSHIFTEQUAL     reduce using rule 106 (primary-no-array-creation-expression -> member-access .)


state 80

    (267) literal -> TRUE .

    OPEN_BRACKET    reduce using rule 267 (literal -> TRUE .)
    DOT             reduce using rule 267 (literal -> TRUE .)
    OPEN_PAREN      reduce using rule 267 (literal -> TRUE .)
    INCRE           reduce using rule 267 (literal -> TRUE .)
    DECRE           reduce using rule 267 (literal -> TRUE .)
    ASSIGN          reduce using rule 267 (literal -> TRUE .)
    PLUSEQUAL       reduce using rule 267 (literal -> TRUE .)
    MINUSEQUAL      reduce using rule 267 (literal -> TRUE .)
    TIMESEQUAL      reduce using rule 267 (literal -> TRUE .)
    DIVEQUAL        reduce using rule 267 (literal -> TRUE .)
    MODEQUAL        reduce using rule 267 (literal -> TRUE .)
    BITANDEQUAL     reduce using rule 267 (literal -> TRUE .)
    BITOREQUAL      reduce using rule 267 (literal -> TRUE .)
    BITXOREQUAL     reduce using rule 267 (literal -> TRUE .)
    LSHIFTEQUAL     reduce using rule 267 (literal -> TRUE .)
    RSHIFTEQUAL     reduce using rule 267 (literal -> TRUE .)
    TIMES           reduce using rule 267 (literal -> TRUE .)
    DIV             reduce using rule 267 (literal -> TRUE .)
    MOD             reduce using rule 267 (literal -> TRUE .)
    PLUS            reduce using rule 267 (literal -> TRUE .)
    MINUS           reduce using rule 267 (literal -> TRUE .)
    LSHIFT          reduce using rule 267 (literal -> TRUE .)
    RSHIFT          reduce using rule 267 (literal -> TRUE .)
    LT              reduce using rule 267 (literal -> TRUE .)
    GT              reduce using rule 267 (literal -> TRUE .)
    LE              reduce using rule 267 (literal -> TRUE .)
    GE              reduce using rule 267 (literal -> TRUE .)
    EQ              reduce using rule 267 (literal -> TRUE .)
    NE              reduce using rule 267 (literal -> TRUE .)
    BITAND          reduce using rule 267 (literal -> TRUE .)
    BITXOR          reduce using rule 267 (literal -> TRUE .)
    BITOR           reduce using rule 267 (literal -> TRUE .)
    LOGAND          reduce using rule 267 (literal -> TRUE .)
    CONDOP          reduce using rule 267 (literal -> TRUE .)
    LOGOR           reduce using rule 267 (literal -> TRUE .)
    CLOSE_PAREN     reduce using rule 267 (literal -> TRUE .)
    COMMA           reduce using rule 267 (literal -> TRUE .)
    BLOCK_END       reduce using rule 267 (literal -> TRUE .)
    DELIM           reduce using rule 267 (literal -> TRUE .)
    CLOSE_BRACKET   reduce using rule 267 (literal -> TRUE .)
    COLON           reduce using rule 267 (literal -> TRUE .)


state 81

    (191) embedded-statement -> expression-statement .

    IDENTIFIER      reduce using rule 191 (embedded-statement -> expression-statement .)
    CONST           reduce using rule 191 (embedded-statement -> expression-statement .)
    BLOCK_BEGIN     reduce using rule 191 (embedded-statement -> expression-statement .)
    DELIM           reduce using rule 191 (embedded-statement -> expression-statement .)
    IF              reduce using rule 191 (embedded-statement -> expression-statement .)
    SWITCH          reduce using rule 191 (embedded-statement -> expression-statement .)
    WHILE           reduce using rule 191 (embedded-statement -> expression-statement .)
    FOR             reduce using rule 191 (embedded-statement -> expression-statement .)
    FOREACH         reduce using rule 191 (embedded-statement -> expression-statement .)
    DO              reduce using rule 191 (embedded-statement -> expression-statement .)
    BREAK           reduce using rule 191 (embedded-statement -> expression-statement .)
    CONTINUE        reduce using rule 191 (embedded-statement -> expression-statement .)
    GOTO            reduce using rule 191 (embedded-statement -> expression-statement .)
    RETURN          reduce using rule 191 (embedded-statement -> expression-statement .)
    BOOL            reduce using rule 191 (embedded-statement -> expression-statement .)
    NEW             reduce using rule 191 (embedded-statement -> expression-statement .)
    INCRE           reduce using rule 191 (embedded-statement -> expression-statement .)
    DECRE           reduce using rule 191 (embedded-statement -> expression-statement .)
    INT             reduce using rule 191 (embedded-statement -> expression-statement .)
    UINT            reduce using rule 191 (embedded-statement -> expression-statement .)
    LONG            reduce using rule 191 (embedded-statement -> expression-statement .)
    ULONG           reduce using rule 191 (embedded-statement -> expression-statement .)
    CHAR            reduce using rule 191 (embedded-statement -> expression-statement .)
    FLOAT           reduce using rule 191 (embedded-statement -> expression-statement .)
    DOUBLE          reduce using rule 191 (embedded-statement -> expression-statement .)
    ICONST          reduce using rule 191 (embedded-statement -> expression-statement .)
    UICONST         reduce using rule 191 (embedded-statement -> expression-statement .)
    LICONST         reduce using rule 191 (embedded-statement -> expression-statement .)
    ULICONST        reduce using rule 191 (embedded-statement -> expression-statement .)
    FCONST          reduce using rule 191 (embedded-statement -> expression-statement .)
    DCONST          reduce using rule 191 (embedded-statement -> expression-statement .)
    MCONST          reduce using rule 191 (embedded-statement -> expression-statement .)
    CCONST          reduce using rule 191 (embedded-statement -> expression-statement .)
    SCONST          reduce using rule 191 (embedded-statement -> expression-statement .)
    VSCONST         reduce using rule 191 (embedded-statement -> expression-statement .)
    TRUE            reduce using rule 191 (embedded-statement -> expression-statement .)
    FALSE           reduce using rule 191 (embedded-statement -> expression-statement .)
    OPEN_PAREN      reduce using rule 191 (embedded-statement -> expression-statement .)
    THIS            reduce using rule 191 (embedded-statement -> expression-statement .)
    BASE            reduce using rule 191 (embedded-statement -> expression-statement .)
    CASE            reduce using rule 191 (embedded-statement -> expression-statement .)
    DEFAULT         reduce using rule 191 (embedded-statement -> expression-statement .)
    BLOCK_END       reduce using rule 191 (embedded-statement -> expression-statement .)
    ELSE            reduce using rule 191 (embedded-statement -> expression-statement .)


state 82

    (90) primary-expression -> primary-no-array-creation-expression .
    (124) element-access -> primary-no-array-creation-expression . OPEN_BRACKET expression-list CLOSE_BRACKET

    DOT             reduce using rule 90 (primary-expression -> primary-no-array-creation-expression .)
    OPEN_PAREN      reduce using rule 90 (primary-expression -> primary-no-array-creation-expression .)
    INCRE           reduce using rule 90 (primary-expression -> primary-no-array-creation-expression .)
    DECRE           reduce using rule 90 (primary-expression -> primary-no-array-creation-expression .)
    ASSIGN          reduce using rule 90 (primary-expression -> primary-no-array-creation-expression .)
    PLUSEQUAL       reduce using rule 90 (primary-expression -> primary-no-array-creation-expression .)
    MINUSEQUAL      reduce using rule 90 (primary-expression -> primary-no-array-creation-expression .)
    TIMESEQUAL      reduce using rule 90 (primary-expression -> primary-no-array-creation-expression .)
    DIVEQUAL        reduce using rule 90 (primary-expression -> primary-no-array-creation-expression .)
    MODEQUAL        reduce using rule 90 (primary-expression -> primary-no-array-creation-expression .)
    BITANDEQUAL     reduce using rule 90 (primary-expression -> primary-no-array-creation-expression .)
    BITOREQUAL      reduce using rule 90 (primary-expression -> primary-no-array-creation-expression .)
    BITXOREQUAL     reduce using rule 90 (primary-expression -> primary-no-array-creation-expression .)
    LSHIFTEQUAL     reduce using rule 90 (primary-expression -> primary-no-array-creation-expression .)
    RSHIFTEQUAL     reduce using rule 90 (primary-expression -> primary-no-array-creation-expression .)
    TIMES           reduce using rule 90 (primary-expression -> primary-no-array-creation-expression .)
    DIV             reduce using rule 90 (primary-expression -> primary-no-array-creation-expression .)
    MOD             reduce using rule 90 (primary-expression -> primary-no-array-creation-expression .)
    PLUS            reduce using rule 90 (primary-expression -> primary-no-array-creation-expression .)
    MINUS           reduce using rule 90 (primary-expression -> primary-no-array-creation-expression .)
    LSHIFT          reduce using rule 90 (primary-expression -> primary-no-array-creation-expression .)
    RSHIFT          reduce using rule 90 (primary-expression -> primary-no-array-creation-expression .)
    LT              reduce using rule 90 (primary-expression -> primary-no-array-creation-expression .)
    GT              reduce using rule 90 (primary-expression -> primary-no-array-creation-expression .)
    LE              reduce using rule 90 (primary-expression -> primary-no-array-creation-expression .)
    GE              reduce using rule 90 (primary-expression -> primary-no-array-creation-expression .)
    EQ              reduce using rule 90 (primary-expression -> primary-no-array-creation-expression .)
    NE              reduce using rule 90 (primary-expression -> primary-no-array-creation-expression .)
    BITAND          reduce using rule 90 (primary-expression -> primary-no-array-creation-expression .)
    BITXOR          reduce using rule 90 (primary-expression -> primary-no-array-creation-expression .)
    BITOR           reduce using rule 90 (primary-expression -> primary-no-array-creation-expression .)
    LOGAND          reduce using rule 90 (primary-expression -> primary-no-array-creation-expression .)
    CONDOP          reduce using rule 90 (primary-expression -> primary-no-array-creation-expression .)
    LOGOR           reduce using rule 90 (primary-expression -> primary-no-array-creation-expression .)
    CLOSE_BRACKET   reduce using rule 90 (primary-expression -> primary-no-array-creation-expression .)
    COMMA           reduce using rule 90 (primary-expression -> primary-no-array-creation-expression .)
    DELIM           reduce using rule 90 (primary-expression -> primary-no-array-creation-expression .)
    CLOSE_PAREN     reduce using rule 90 (primary-expression -> primary-no-array-creation-expression .)
    BLOCK_END       reduce using rule 90 (primary-expression -> primary-no-array-creation-expression .)
    COLON           reduce using rule 90 (primary-expression -> primary-no-array-creation-expression .)
    OPEN_BRACKET    shift and go to state 176


state 83

    (200) statement-expression -> post-increment-expression .
    (111) primary-no-array-creation-expression -> post-increment-expression .

    DELIM           reduce using rule 200 (statement-expression -> post-increment-expression .)
    COMMA           reduce using rule 200 (statement-expression -> post-increment-expression .)
    CLOSE_PAREN     reduce using rule 200 (statement-expression -> post-increment-expression .)
    OPEN_BRACKET    reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)
    OPEN_PAREN      reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)
    INCRE           reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)
    DECRE           reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)
    DOT             reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)
    ASSIGN          reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)
    PLUSEQUAL       reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)
    MINUSEQUAL      reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)
    TIMESEQUAL      reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)
    DIVEQUAL        reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)
    MODEQUAL        reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)
    BITANDEQUAL     reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)
    BITOREQUAL      reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)
    BITXOREQUAL     reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)
    LSHIFTEQUAL     reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)
    RSHIFTEQUAL     reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)


state 84

    (196) expression-statement -> statement-expression . DELIM

    DELIM           shift and go to state 177


state 85

    (260) literal -> ULICONST .

    OPEN_BRACKET    reduce using rule 260 (literal -> ULICONST .)
    DOT             reduce using rule 260 (literal -> ULICONST .)
    OPEN_PAREN      reduce using rule 260 (literal -> ULICONST .)
    INCRE           reduce using rule 260 (literal -> ULICONST .)
    DECRE           reduce using rule 260 (literal -> ULICONST .)
    ASSIGN          reduce using rule 260 (literal -> ULICONST .)
    PLUSEQUAL       reduce using rule 260 (literal -> ULICONST .)
    MINUSEQUAL      reduce using rule 260 (literal -> ULICONST .)
    TIMESEQUAL      reduce using rule 260 (literal -> ULICONST .)
    DIVEQUAL        reduce using rule 260 (literal -> ULICONST .)
    MODEQUAL        reduce using rule 260 (literal -> ULICONST .)
    BITANDEQUAL     reduce using rule 260 (literal -> ULICONST .)
    BITOREQUAL      reduce using rule 260 (literal -> ULICONST .)
    BITXOREQUAL     reduce using rule 260 (literal -> ULICONST .)
    LSHIFTEQUAL     reduce using rule 260 (literal -> ULICONST .)
    RSHIFTEQUAL     reduce using rule 260 (literal -> ULICONST .)
    TIMES           reduce using rule 260 (literal -> ULICONST .)
    DIV             reduce using rule 260 (literal -> ULICONST .)
    MOD             reduce using rule 260 (literal -> ULICONST .)
    PLUS            reduce using rule 260 (literal -> ULICONST .)
    MINUS           reduce using rule 260 (literal -> ULICONST .)
    LSHIFT          reduce using rule 260 (literal -> ULICONST .)
    RSHIFT          reduce using rule 260 (literal -> ULICONST .)
    LT              reduce using rule 260 (literal -> ULICONST .)
    GT              reduce using rule 260 (literal -> ULICONST .)
    LE              reduce using rule 260 (literal -> ULICONST .)
    GE              reduce using rule 260 (literal -> ULICONST .)
    EQ              reduce using rule 260 (literal -> ULICONST .)
    NE              reduce using rule 260 (literal -> ULICONST .)
    BITAND          reduce using rule 260 (literal -> ULICONST .)
    BITXOR          reduce using rule 260 (literal -> ULICONST .)
    BITOR           reduce using rule 260 (literal -> ULICONST .)
    LOGAND          reduce using rule 260 (literal -> ULICONST .)
    CONDOP          reduce using rule 260 (literal -> ULICONST .)
    LOGOR           reduce using rule 260 (literal -> ULICONST .)
    CLOSE_PAREN     reduce using rule 260 (literal -> ULICONST .)
    COMMA           reduce using rule 260 (literal -> ULICONST .)
    BLOCK_END       reduce using rule 260 (literal -> ULICONST .)
    DELIM           reduce using rule 260 (literal -> ULICONST .)
    CLOSE_BRACKET   reduce using rule 260 (literal -> ULICONST .)
    COLON           reduce using rule 260 (literal -> ULICONST .)


state 86

    (221) iteration-statement -> for-statement .

    IDENTIFIER      reduce using rule 221 (iteration-statement -> for-statement .)
    CONST           reduce using rule 221 (iteration-statement -> for-statement .)
    BLOCK_BEGIN     reduce using rule 221 (iteration-statement -> for-statement .)
    DELIM           reduce using rule 221 (iteration-statement -> for-statement .)
    IF              reduce using rule 221 (iteration-statement -> for-statement .)
    SWITCH          reduce using rule 221 (iteration-statement -> for-statement .)
    WHILE           reduce using rule 221 (iteration-statement -> for-statement .)
    FOR             reduce using rule 221 (iteration-statement -> for-statement .)
    FOREACH         reduce using rule 221 (iteration-statement -> for-statement .)
    DO              reduce using rule 221 (iteration-statement -> for-statement .)
    BREAK           reduce using rule 221 (iteration-statement -> for-statement .)
    CONTINUE        reduce using rule 221 (iteration-statement -> for-statement .)
    GOTO            reduce using rule 221 (iteration-statement -> for-statement .)
    RETURN          reduce using rule 221 (iteration-statement -> for-statement .)
    BOOL            reduce using rule 221 (iteration-statement -> for-statement .)
    NEW             reduce using rule 221 (iteration-statement -> for-statement .)
    INCRE           reduce using rule 221 (iteration-statement -> for-statement .)
    DECRE           reduce using rule 221 (iteration-statement -> for-statement .)
    INT             reduce using rule 221 (iteration-statement -> for-statement .)
    UINT            reduce using rule 221 (iteration-statement -> for-statement .)
    LONG            reduce using rule 221 (iteration-statement -> for-statement .)
    ULONG           reduce using rule 221 (iteration-statement -> for-statement .)
    CHAR            reduce using rule 221 (iteration-statement -> for-statement .)
    FLOAT           reduce using rule 221 (iteration-statement -> for-statement .)
    DOUBLE          reduce using rule 221 (iteration-statement -> for-statement .)
    ICONST          reduce using rule 221 (iteration-statement -> for-statement .)
    UICONST         reduce using rule 221 (iteration-statement -> for-statement .)
    LICONST         reduce using rule 221 (iteration-statement -> for-statement .)
    ULICONST        reduce using rule 221 (iteration-statement -> for-statement .)
    FCONST          reduce using rule 221 (iteration-statement -> for-statement .)
    DCONST          reduce using rule 221 (iteration-statement -> for-statement .)
    MCONST          reduce using rule 221 (iteration-statement -> for-statement .)
    CCONST          reduce using rule 221 (iteration-statement -> for-statement .)
    SCONST          reduce using rule 221 (iteration-statement -> for-statement .)
    VSCONST         reduce using rule 221 (iteration-statement -> for-statement .)
    TRUE            reduce using rule 221 (iteration-statement -> for-statement .)
    FALSE           reduce using rule 221 (iteration-statement -> for-statement .)
    OPEN_PAREN      reduce using rule 221 (iteration-statement -> for-statement .)
    THIS            reduce using rule 221 (iteration-statement -> for-statement .)
    BASE            reduce using rule 221 (iteration-statement -> for-statement .)
    BLOCK_END       reduce using rule 221 (iteration-statement -> for-statement .)
    CASE            reduce using rule 221 (iteration-statement -> for-statement .)
    DEFAULT         reduce using rule 221 (iteration-statement -> for-statement .)
    ELSE            reduce using rule 221 (iteration-statement -> for-statement .)


state 87

    (246) goto-statement -> GOTO . IDENTIFIER DELIM

    IDENTIFIER      shift and go to state 178


state 88

    (126) base-access -> BASE . DOT IDENTIFIER
    (127) base-access -> BASE . OPEN_BRACKET expression-list CLOSE_BRACKET

    DOT             shift and go to state 180
    OPEN_BRACKET    shift and go to state 179


state 89

    (175) statement -> labeled-statement .

    IDENTIFIER      reduce using rule 175 (statement -> labeled-statement .)
    CONST           reduce using rule 175 (statement -> labeled-statement .)
    BLOCK_BEGIN     reduce using rule 175 (statement -> labeled-statement .)
    DELIM           reduce using rule 175 (statement -> labeled-statement .)
    IF              reduce using rule 175 (statement -> labeled-statement .)
    SWITCH          reduce using rule 175 (statement -> labeled-statement .)
    WHILE           reduce using rule 175 (statement -> labeled-statement .)
    FOR             reduce using rule 175 (statement -> labeled-statement .)
    FOREACH         reduce using rule 175 (statement -> labeled-statement .)
    DO              reduce using rule 175 (statement -> labeled-statement .)
    BREAK           reduce using rule 175 (statement -> labeled-statement .)
    CONTINUE        reduce using rule 175 (statement -> labeled-statement .)
    GOTO            reduce using rule 175 (statement -> labeled-statement .)
    RETURN          reduce using rule 175 (statement -> labeled-statement .)
    BOOL            reduce using rule 175 (statement -> labeled-statement .)
    NEW             reduce using rule 175 (statement -> labeled-statement .)
    INCRE           reduce using rule 175 (statement -> labeled-statement .)
    DECRE           reduce using rule 175 (statement -> labeled-statement .)
    INT             reduce using rule 175 (statement -> labeled-statement .)
    UINT            reduce using rule 175 (statement -> labeled-statement .)
    LONG            reduce using rule 175 (statement -> labeled-statement .)
    ULONG           reduce using rule 175 (statement -> labeled-statement .)
    CHAR            reduce using rule 175 (statement -> labeled-statement .)
    FLOAT           reduce using rule 175 (statement -> labeled-statement .)
    DOUBLE          reduce using rule 175 (statement -> labeled-statement .)
    ICONST          reduce using rule 175 (statement -> labeled-statement .)
    UICONST         reduce using rule 175 (statement -> labeled-statement .)
    LICONST         reduce using rule 175 (statement -> labeled-statement .)
    ULICONST        reduce using rule 175 (statement -> labeled-statement .)
    FCONST          reduce using rule 175 (statement -> labeled-statement .)
    DCONST          reduce using rule 175 (statement -> labeled-statement .)
    MCONST          reduce using rule 175 (statement -> labeled-statement .)
    CCONST          reduce using rule 175 (statement -> labeled-statement .)
    SCONST          reduce using rule 175 (statement -> labeled-statement .)
    VSCONST         reduce using rule 175 (statement -> labeled-statement .)
    TRUE            reduce using rule 175 (statement -> labeled-statement .)
    FALSE           reduce using rule 175 (statement -> labeled-statement .)
    OPEN_PAREN      reduce using rule 175 (statement -> labeled-statement .)
    THIS            reduce using rule 175 (statement -> labeled-statement .)
    BASE            reduce using rule 175 (statement -> labeled-statement .)
    BLOCK_END       reduce using rule 175 (statement -> labeled-statement .)
    CASE            reduce using rule 175 (statement -> labeled-statement .)
    DEFAULT         reduce using rule 175 (statement -> labeled-statement .)


state 90

    (239) foreach-statement -> FOREACH . OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement

    OPEN_PAREN      shift and go to state 181


state 91

    (205) selection-statement -> switch-statement .

    IDENTIFIER      reduce using rule 205 (selection-statement -> switch-statement .)
    CONST           reduce using rule 205 (selection-statement -> switch-statement .)
    BLOCK_BEGIN     reduce using rule 205 (selection-statement -> switch-statement .)
    DELIM           reduce using rule 205 (selection-statement -> switch-statement .)
    IF              reduce using rule 205 (selection-statement -> switch-statement .)
    SWITCH          reduce using rule 205 (selection-statement -> switch-statement .)
    WHILE           reduce using rule 205 (selection-statement -> switch-statement .)
    FOR             reduce using rule 205 (selection-statement -> switch-statement .)
    FOREACH         reduce using rule 205 (selection-statement -> switch-statement .)
    DO              reduce using rule 205 (selection-statement -> switch-statement .)
    BREAK           reduce using rule 205 (selection-statement -> switch-statement .)
    CONTINUE        reduce using rule 205 (selection-statement -> switch-statement .)
    GOTO            reduce using rule 205 (selection-statement -> switch-statement .)
    RETURN          reduce using rule 205 (selection-statement -> switch-statement .)
    BOOL            reduce using rule 205 (selection-statement -> switch-statement .)
    NEW             reduce using rule 205 (selection-statement -> switch-statement .)
    INCRE           reduce using rule 205 (selection-statement -> switch-statement .)
    DECRE           reduce using rule 205 (selection-statement -> switch-statement .)
    INT             reduce using rule 205 (selection-statement -> switch-statement .)
    UINT            reduce using rule 205 (selection-statement -> switch-statement .)
    LONG            reduce using rule 205 (selection-statement -> switch-statement .)
    ULONG           reduce using rule 205 (selection-statement -> switch-statement .)
    CHAR            reduce using rule 205 (selection-statement -> switch-statement .)
    FLOAT           reduce using rule 205 (selection-statement -> switch-statement .)
    DOUBLE          reduce using rule 205 (selection-statement -> switch-statement .)
    ICONST          reduce using rule 205 (selection-statement -> switch-statement .)
    UICONST         reduce using rule 205 (selection-statement -> switch-statement .)
    LICONST         reduce using rule 205 (selection-statement -> switch-statement .)
    ULICONST        reduce using rule 205 (selection-statement -> switch-statement .)
    FCONST          reduce using rule 205 (selection-statement -> switch-statement .)
    DCONST          reduce using rule 205 (selection-statement -> switch-statement .)
    MCONST          reduce using rule 205 (selection-statement -> switch-statement .)
    CCONST          reduce using rule 205 (selection-statement -> switch-statement .)
    SCONST          reduce using rule 205 (selection-statement -> switch-statement .)
    VSCONST         reduce using rule 205 (selection-statement -> switch-statement .)
    TRUE            reduce using rule 205 (selection-statement -> switch-statement .)
    FALSE           reduce using rule 205 (selection-statement -> switch-statement .)
    OPEN_PAREN      reduce using rule 205 (selection-statement -> switch-statement .)
    THIS            reduce using rule 205 (selection-statement -> switch-statement .)
    BASE            reduce using rule 205 (selection-statement -> switch-statement .)
    BLOCK_END       reduce using rule 205 (selection-statement -> switch-statement .)
    CASE            reduce using rule 205 (selection-statement -> switch-statement .)
    DEFAULT         reduce using rule 205 (selection-statement -> switch-statement .)
    ELSE            reduce using rule 205 (selection-statement -> switch-statement .)


state 92

    (177) statement -> embedded-statement .

    IDENTIFIER      reduce using rule 177 (statement -> embedded-statement .)
    CONST           reduce using rule 177 (statement -> embedded-statement .)
    BLOCK_BEGIN     reduce using rule 177 (statement -> embedded-statement .)
    DELIM           reduce using rule 177 (statement -> embedded-statement .)
    IF              reduce using rule 177 (statement -> embedded-statement .)
    SWITCH          reduce using rule 177 (statement -> embedded-statement .)
    WHILE           reduce using rule 177 (statement -> embedded-statement .)
    FOR             reduce using rule 177 (statement -> embedded-statement .)
    FOREACH         reduce using rule 177 (statement -> embedded-statement .)
    DO              reduce using rule 177 (statement -> embedded-statement .)
    BREAK           reduce using rule 177 (statement -> embedded-statement .)
    CONTINUE        reduce using rule 177 (statement -> embedded-statement .)
    GOTO            reduce using rule 177 (statement -> embedded-statement .)
    RETURN          reduce using rule 177 (statement -> embedded-statement .)
    BOOL            reduce using rule 177 (statement -> embedded-statement .)
    NEW             reduce using rule 177 (statement -> embedded-statement .)
    INCRE           reduce using rule 177 (statement -> embedded-statement .)
    DECRE           reduce using rule 177 (statement -> embedded-statement .)
    INT             reduce using rule 177 (statement -> embedded-statement .)
    UINT            reduce using rule 177 (statement -> embedded-statement .)
    LONG            reduce using rule 177 (statement -> embedded-statement .)
    ULONG           reduce using rule 177 (statement -> embedded-statement .)
    CHAR            reduce using rule 177 (statement -> embedded-statement .)
    FLOAT           reduce using rule 177 (statement -> embedded-statement .)
    DOUBLE          reduce using rule 177 (statement -> embedded-statement .)
    ICONST          reduce using rule 177 (statement -> embedded-statement .)
    UICONST         reduce using rule 177 (statement -> embedded-statement .)
    LICONST         reduce using rule 177 (statement -> embedded-statement .)
    ULICONST        reduce using rule 177 (statement -> embedded-statement .)
    FCONST          reduce using rule 177 (statement -> embedded-statement .)
    DCONST          reduce using rule 177 (statement -> embedded-statement .)
    MCONST          reduce using rule 177 (statement -> embedded-statement .)
    CCONST          reduce using rule 177 (statement -> embedded-statement .)
    SCONST          reduce using rule 177 (statement -> embedded-statement .)
    VSCONST         reduce using rule 177 (statement -> embedded-statement .)
    TRUE            reduce using rule 177 (statement -> embedded-statement .)
    FALSE           reduce using rule 177 (statement -> embedded-statement .)
    OPEN_PAREN      reduce using rule 177 (statement -> embedded-statement .)
    THIS            reduce using rule 177 (statement -> embedded-statement .)
    BASE            reduce using rule 177 (statement -> embedded-statement .)
    BLOCK_END       reduce using rule 177 (statement -> embedded-statement .)
    CASE            reduce using rule 177 (statement -> embedded-statement .)
    DEFAULT         reduce using rule 177 (statement -> embedded-statement .)


state 93

    (194) embedded-statement -> jump-statement .

    IDENTIFIER      reduce using rule 194 (embedded-statement -> jump-statement .)
    CONST           reduce using rule 194 (embedded-statement -> jump-statement .)
    BLOCK_BEGIN     reduce using rule 194 (embedded-statement -> jump-statement .)
    DELIM           reduce using rule 194 (embedded-statement -> jump-statement .)
    IF              reduce using rule 194 (embedded-statement -> jump-statement .)
    SWITCH          reduce using rule 194 (embedded-statement -> jump-statement .)
    WHILE           reduce using rule 194 (embedded-statement -> jump-statement .)
    FOR             reduce using rule 194 (embedded-statement -> jump-statement .)
    FOREACH         reduce using rule 194 (embedded-statement -> jump-statement .)
    DO              reduce using rule 194 (embedded-statement -> jump-statement .)
    BREAK           reduce using rule 194 (embedded-statement -> jump-statement .)
    CONTINUE        reduce using rule 194 (embedded-statement -> jump-statement .)
    GOTO            reduce using rule 194 (embedded-statement -> jump-statement .)
    RETURN          reduce using rule 194 (embedded-statement -> jump-statement .)
    BOOL            reduce using rule 194 (embedded-statement -> jump-statement .)
    NEW             reduce using rule 194 (embedded-statement -> jump-statement .)
    INCRE           reduce using rule 194 (embedded-statement -> jump-statement .)
    DECRE           reduce using rule 194 (embedded-statement -> jump-statement .)
    INT             reduce using rule 194 (embedded-statement -> jump-statement .)
    UINT            reduce using rule 194 (embedded-statement -> jump-statement .)
    LONG            reduce using rule 194 (embedded-statement -> jump-statement .)
    ULONG           reduce using rule 194 (embedded-statement -> jump-statement .)
    CHAR            reduce using rule 194 (embedded-statement -> jump-statement .)
    FLOAT           reduce using rule 194 (embedded-statement -> jump-statement .)
    DOUBLE          reduce using rule 194 (embedded-statement -> jump-statement .)
    ICONST          reduce using rule 194 (embedded-statement -> jump-statement .)
    UICONST         reduce using rule 194 (embedded-statement -> jump-statement .)
    LICONST         reduce using rule 194 (embedded-statement -> jump-statement .)
    ULICONST        reduce using rule 194 (embedded-statement -> jump-statement .)
    FCONST          reduce using rule 194 (embedded-statement -> jump-statement .)
    DCONST          reduce using rule 194 (embedded-statement -> jump-statement .)
    MCONST          reduce using rule 194 (embedded-statement -> jump-statement .)
    CCONST          reduce using rule 194 (embedded-statement -> jump-statement .)
    SCONST          reduce using rule 194 (embedded-statement -> jump-statement .)
    VSCONST         reduce using rule 194 (embedded-statement -> jump-statement .)
    TRUE            reduce using rule 194 (embedded-statement -> jump-statement .)
    FALSE           reduce using rule 194 (embedded-statement -> jump-statement .)
    OPEN_PAREN      reduce using rule 194 (embedded-statement -> jump-statement .)
    THIS            reduce using rule 194 (embedded-statement -> jump-statement .)
    BASE            reduce using rule 194 (embedded-statement -> jump-statement .)
    CASE            reduce using rule 194 (embedded-statement -> jump-statement .)
    DEFAULT         reduce using rule 194 (embedded-statement -> jump-statement .)
    BLOCK_END       reduce using rule 194 (embedded-statement -> jump-statement .)
    ELSE            reduce using rule 194 (embedded-statement -> jump-statement .)


state 94

    (125) this-access -> THIS .

    OPEN_BRACKET    reduce using rule 125 (this-access -> THIS .)
    DOT             reduce using rule 125 (this-access -> THIS .)
    OPEN_PAREN      reduce using rule 125 (this-access -> THIS .)
    INCRE           reduce using rule 125 (this-access -> THIS .)
    DECRE           reduce using rule 125 (this-access -> THIS .)
    ASSIGN          reduce using rule 125 (this-access -> THIS .)
    PLUSEQUAL       reduce using rule 125 (this-access -> THIS .)
    MINUSEQUAL      reduce using rule 125 (this-access -> THIS .)
    TIMESEQUAL      reduce using rule 125 (this-access -> THIS .)
    DIVEQUAL        reduce using rule 125 (this-access -> THIS .)
    MODEQUAL        reduce using rule 125 (this-access -> THIS .)
    BITANDEQUAL     reduce using rule 125 (this-access -> THIS .)
    BITOREQUAL      reduce using rule 125 (this-access -> THIS .)
    BITXOREQUAL     reduce using rule 125 (this-access -> THIS .)
    LSHIFTEQUAL     reduce using rule 125 (this-access -> THIS .)
    RSHIFTEQUAL     reduce using rule 125 (this-access -> THIS .)
    TIMES           reduce using rule 125 (this-access -> THIS .)
    DIV             reduce using rule 125 (this-access -> THIS .)
    MOD             reduce using rule 125 (this-access -> THIS .)
    PLUS            reduce using rule 125 (this-access -> THIS .)
    MINUS           reduce using rule 125 (this-access -> THIS .)
    LSHIFT          reduce using rule 125 (this-access -> THIS .)
    RSHIFT          reduce using rule 125 (this-access -> THIS .)
    LT              reduce using rule 125 (this-access -> THIS .)
    GT              reduce using rule 125 (this-access -> THIS .)
    LE              reduce using rule 125 (this-access -> THIS .)
    GE              reduce using rule 125 (this-access -> THIS .)
    EQ              reduce using rule 125 (this-access -> THIS .)
    NE              reduce using rule 125 (this-access -> THIS .)
    BITAND          reduce using rule 125 (this-access -> THIS .)
    BITXOR          reduce using rule 125 (this-access -> THIS .)
    BITOR           reduce using rule 125 (this-access -> THIS .)
    LOGAND          reduce using rule 125 (this-access -> THIS .)
    CONDOP          reduce using rule 125 (this-access -> THIS .)
    LOGOR           reduce using rule 125 (this-access -> THIS .)
    DELIM           reduce using rule 125 (this-access -> THIS .)
    COMMA           reduce using rule 125 (this-access -> THIS .)
    CLOSE_PAREN     reduce using rule 125 (this-access -> THIS .)
    CLOSE_BRACKET   reduce using rule 125 (this-access -> THIS .)
    BLOCK_END       reduce using rule 125 (this-access -> THIS .)
    COLON           reduce using rule 125 (this-access -> THIS .)


state 95

    (197) statement-expression -> invocation-expression .
    (107) primary-no-array-creation-expression -> invocation-expression .

    DELIM           reduce using rule 197 (statement-expression -> invocation-expression .)
    COMMA           reduce using rule 197 (statement-expression -> invocation-expression .)
    CLOSE_PAREN     reduce using rule 197 (statement-expression -> invocation-expression .)
    OPEN_BRACKET    reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)
    OPEN_PAREN      reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)
    INCRE           reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)
    DECRE           reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)
    DOT             reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)
    ASSIGN          reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)
    PLUSEQUAL       reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)
    MINUSEQUAL      reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)
    TIMESEQUAL      reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)
    DIVEQUAL        reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)
    MODEQUAL        reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)
    BITANDEQUAL     reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)
    BITOREQUAL      reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)
    BITXOREQUAL     reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)
    LSHIFTEQUAL     reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)
    RSHIFTEQUAL     reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)


state 96

    (105) primary-no-array-creation-expression -> parenthesized-expression .

    OPEN_BRACKET    reduce using rule 105 (primary-no-array-creation-expression -> parenthesized-expression .)
    DOT             reduce using rule 105 (primary-no-array-creation-expression -> parenthesized-expression .)
    OPEN_PAREN      reduce using rule 105 (primary-no-array-creation-expression -> parenthesized-expression .)
    INCRE           reduce using rule 105 (primary-no-array-creation-expression -> parenthesized-expression .)
    DECRE           reduce using rule 105 (primary-no-array-creation-expression -> parenthesized-expression .)
    TIMES           reduce using rule 105 (primary-no-array-creation-expression -> parenthesized-expression .)
    DIV             reduce using rule 105 (primary-no-array-creation-expression -> parenthesized-expression .)
    MOD             reduce using rule 105 (primary-no-array-creation-expression -> parenthesized-expression .)
    PLUS            reduce using rule 105 (primary-no-array-creation-expression -> parenthesized-expression .)
    MINUS           reduce using rule 105 (primary-no-array-creation-expression -> parenthesized-expression .)
    LSHIFT          reduce using rule 105 (primary-no-array-creation-expression -> parenthesized-expression .)
    RSHIFT          reduce using rule 105 (primary-no-array-creation-expression -> parenthesized-expression .)
    LT              reduce using rule 105 (primary-no-array-creation-expression -> parenthesized-expression .)
    GT              reduce using rule 105 (primary-no-array-creation-expression -> parenthesized-expression .)
    LE              reduce using rule 105 (primary-no-array-creation-expression -> parenthesized-expression .)
    GE              reduce using rule 105 (primary-no-array-creation-expression -> parenthesized-expression .)
    EQ              reduce using rule 105 (primary-no-array-creation-expression -> parenthesized-expression .)
    NE              reduce using rule 105 (primary-no-array-creation-expression -> parenthesized-expression .)
    BITAND          reduce using rule 105 (primary-no-array-creation-expression -> parenthesized-expression .)
    BITXOR          reduce using rule 105 (primary-no-array-creation-expression -> parenthesized-expression .)
    BITOR           reduce using rule 105 (primary-no-array-creation-expression -> parenthesized-expression .)
    LOGAND          reduce using rule 105 (primary-no-array-creation-expression -> parenthesized-expression .)
    CONDOP          reduce using rule 105 (primary-no-array-creation-expression -> parenthesized-expression .)
    LOGOR           reduce using rule 105 (primary-no-array-creation-expression -> parenthesized-expression .)
    DELIM           reduce using rule 105 (primary-no-array-creation-expression -> parenthesized-expression .)
    CLOSE_PAREN     reduce using rule 105 (primary-no-array-creation-expression -> parenthesized-expression .)
    COMMA           reduce using rule 105 (primary-no-array-creation-expression -> parenthesized-expression .)
    CLOSE_BRACKET   reduce using rule 105 (primary-no-array-creation-expression -> parenthesized-expression .)
    BLOCK_END       reduce using rule 105 (primary-no-array-creation-expression -> parenthesized-expression .)
    COLON           reduce using rule 105 (primary-no-array-creation-expression -> parenthesized-expression .)
    ASSIGN          reduce using rule 105 (primary-no-array-creation-expression -> parenthesized-expression .)
    PLUSEQUAL       reduce using rule 105 (primary-no-array-creation-expression -> parenthesized-expression .)
    MINUSEQUAL      reduce using rule 105 (primary-no-array-creation-expression -> parenthesized-expression .)
    TIMESEQUAL      reduce using rule 105 (primary-no-array-creation-expression -> parenthesized-expression .)
    DIVEQUAL        reduce using rule 105 (primary-no-array-creation-expression -> parenthesized-expression .)
    MODEQUAL        reduce using rule 105 (primary-no-array-creation-expression -> parenthesized-expression .)
    BITANDEQUAL     reduce using rule 105 (primary-no-array-creation-expression -> parenthesized-expression .)
    BITOREQUAL      reduce using rule 105 (primary-no-array-creation-expression -> parenthesized-expression .)
    BITXOREQUAL     reduce using rule 105 (primary-no-array-creation-expression -> parenthesized-expression .)
    LSHIFTEQUAL     reduce using rule 105 (primary-no-array-creation-expression -> parenthesized-expression .)
    RSHIFTEQUAL     reduce using rule 105 (primary-no-array-creation-expression -> parenthesized-expression .)


state 97

    (247) return-statement -> RETURN . expression-opt DELIM
    (248) expression-opt -> . expression
    (249) expression-opt -> . empty
    (49) expression -> . conditional-expression
    (50) expression -> . assignment
    (269) empty -> .
    (51) conditional-expression -> . conditional-or-expression
    (52) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (133) assignment -> . primary-expression assignment-operator expression
    (53) conditional-or-expression -> . conditional-and-expression
    (54) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (55) conditional-and-expression -> . inclusive-or-expression
    (56) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (57) inclusive-or-expression -> . exclusive-or-expression
    (58) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (59) exclusive-or-expression -> . and-expression
    (60) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (61) and-expression -> . equality-expression
    (62) and-expression -> . and-expression BITAND equality-expression
    (63) equality-expression -> . relational-expression
    (64) equality-expression -> . equality-expression EQ relational-expression
    (65) equality-expression -> . equality-expression NE relational-expression
    (66) relational-expression -> . shift-expression
    (67) relational-expression -> . relational-expression LT shift-expression
    (68) relational-expression -> . relational-expression GT shift-expression
    (69) relational-expression -> . relational-expression LE shift-expression
    (70) relational-expression -> . relational-expression GE shift-expression
    (71) shift-expression -> . additive-expression
    (72) shift-expression -> . shift-expression LSHIFT additive-expression
    (73) shift-expression -> . shift-expression RSHIFT additive-expression
    (74) additive-expression -> . multiplicative-expression
    (75) additive-expression -> . additive-expression PLUS multiplicative-expression
    (76) additive-expression -> . additive-expression MINUS multiplicative-expression
    (77) multiplicative-expression -> . unary-expression
    (78) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (79) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (80) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (81) unary-expression -> . primary-expression
    (82) unary-expression -> . PLUS unary-expression
    (83) unary-expression -> . MINUS unary-expression
    (84) unary-expression -> . BITNOT unary-expression
    (85) unary-expression -> . BITCOMP unary-expression
    (86) unary-expression -> . TIMES unary-expression
    (87) unary-expression -> . pre-increment-expression
    (88) unary-expression -> . pre-decrement-expression
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression

    DELIM           reduce using rule 269 (empty -> .)
    NEW             shift and go to state 185
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88
    PLUS            shift and go to state 190
    MINUS           shift and go to state 187
    BITNOT          shift and go to state 197
    BITCOMP         shift and go to state 186
    TIMES           shift and go to state 184
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117

    this-access                    shift and go to state 77
    unary-expression               shift and go to state 199
    exclusive-or-expression        shift and go to state 183
    member-access                  shift and go to state 79
    relational-expression          shift and go to state 203
    additive-expression            shift and go to state 208
    primary-no-array-creation-expression shift and go to state 82
    inclusive-or-expression        shift and go to state 188
    equality-expression            shift and go to state 189
    post-increment-expression      shift and go to state 182
    element-access                 shift and go to state 101
    literal                        shift and go to state 128
    base-access                    shift and go to state 126
    conditional-and-expression     shift and go to state 192
    post-decrement-expression      shift and go to state 193
    empty                          shift and go to state 195
    conditional-expression         shift and go to state 191
    array-creation-expression      shift and go to state 144
    assignment                     shift and go to state 196
    object-creation-expression     shift and go to state 198
    expression-opt                 shift and go to state 200
    pre-increment-expression       shift and go to state 202
    shift-expression               shift and go to state 204
    and-expression                 shift and go to state 201
    pre-decrement-expression       shift and go to state 205
    multiplicative-expression      shift and go to state 207
    conditional-or-expression      shift and go to state 211
    primary-expression             shift and go to state 209
    invocation-expression          shift and go to state 210
    expression                     shift and go to state 206
    parenthesized-expression       shift and go to state 96

state 98

    (243) jump-statement -> return-statement .

    IDENTIFIER      reduce using rule 243 (jump-statement -> return-statement .)
    CONST           reduce using rule 243 (jump-statement -> return-statement .)
    BLOCK_BEGIN     reduce using rule 243 (jump-statement -> return-statement .)
    DELIM           reduce using rule 243 (jump-statement -> return-statement .)
    IF              reduce using rule 243 (jump-statement -> return-statement .)
    SWITCH          reduce using rule 243 (jump-statement -> return-statement .)
    WHILE           reduce using rule 243 (jump-statement -> return-statement .)
    FOR             reduce using rule 243 (jump-statement -> return-statement .)
    FOREACH         reduce using rule 243 (jump-statement -> return-statement .)
    DO              reduce using rule 243 (jump-statement -> return-statement .)
    BREAK           reduce using rule 243 (jump-statement -> return-statement .)
    CONTINUE        reduce using rule 243 (jump-statement -> return-statement .)
    GOTO            reduce using rule 243 (jump-statement -> return-statement .)
    RETURN          reduce using rule 243 (jump-statement -> return-statement .)
    BOOL            reduce using rule 243 (jump-statement -> return-statement .)
    NEW             reduce using rule 243 (jump-statement -> return-statement .)
    INCRE           reduce using rule 243 (jump-statement -> return-statement .)
    DECRE           reduce using rule 243 (jump-statement -> return-statement .)
    INT             reduce using rule 243 (jump-statement -> return-statement .)
    UINT            reduce using rule 243 (jump-statement -> return-statement .)
    LONG            reduce using rule 243 (jump-statement -> return-statement .)
    ULONG           reduce using rule 243 (jump-statement -> return-statement .)
    CHAR            reduce using rule 243 (jump-statement -> return-statement .)
    FLOAT           reduce using rule 243 (jump-statement -> return-statement .)
    DOUBLE          reduce using rule 243 (jump-statement -> return-statement .)
    ICONST          reduce using rule 243 (jump-statement -> return-statement .)
    UICONST         reduce using rule 243 (jump-statement -> return-statement .)
    LICONST         reduce using rule 243 (jump-statement -> return-statement .)
    ULICONST        reduce using rule 243 (jump-statement -> return-statement .)
    FCONST          reduce using rule 243 (jump-statement -> return-statement .)
    DCONST          reduce using rule 243 (jump-statement -> return-statement .)
    MCONST          reduce using rule 243 (jump-statement -> return-statement .)
    CCONST          reduce using rule 243 (jump-statement -> return-statement .)
    SCONST          reduce using rule 243 (jump-statement -> return-statement .)
    VSCONST         reduce using rule 243 (jump-statement -> return-statement .)
    TRUE            reduce using rule 243 (jump-statement -> return-statement .)
    FALSE           reduce using rule 243 (jump-statement -> return-statement .)
    OPEN_PAREN      reduce using rule 243 (jump-statement -> return-statement .)
    THIS            reduce using rule 243 (jump-statement -> return-statement .)
    BASE            reduce using rule 243 (jump-statement -> return-statement .)
    BLOCK_END       reduce using rule 243 (jump-statement -> return-statement .)
    CASE            reduce using rule 243 (jump-statement -> return-statement .)
    DEFAULT         reduce using rule 243 (jump-statement -> return-statement .)
    ELSE            reduce using rule 243 (jump-statement -> return-statement .)


state 99

    (261) literal -> FCONST .

    OPEN_BRACKET    reduce using rule 261 (literal -> FCONST .)
    DOT             reduce using rule 261 (literal -> FCONST .)
    OPEN_PAREN      reduce using rule 261 (literal -> FCONST .)
    INCRE           reduce using rule 261 (literal -> FCONST .)
    DECRE           reduce using rule 261 (literal -> FCONST .)
    ASSIGN          reduce using rule 261 (literal -> FCONST .)
    PLUSEQUAL       reduce using rule 261 (literal -> FCONST .)
    MINUSEQUAL      reduce using rule 261 (literal -> FCONST .)
    TIMESEQUAL      reduce using rule 261 (literal -> FCONST .)
    DIVEQUAL        reduce using rule 261 (literal -> FCONST .)
    MODEQUAL        reduce using rule 261 (literal -> FCONST .)
    BITANDEQUAL     reduce using rule 261 (literal -> FCONST .)
    BITOREQUAL      reduce using rule 261 (literal -> FCONST .)
    BITXOREQUAL     reduce using rule 261 (literal -> FCONST .)
    LSHIFTEQUAL     reduce using rule 261 (literal -> FCONST .)
    RSHIFTEQUAL     reduce using rule 261 (literal -> FCONST .)
    TIMES           reduce using rule 261 (literal -> FCONST .)
    DIV             reduce using rule 261 (literal -> FCONST .)
    MOD             reduce using rule 261 (literal -> FCONST .)
    PLUS            reduce using rule 261 (literal -> FCONST .)
    MINUS           reduce using rule 261 (literal -> FCONST .)
    LSHIFT          reduce using rule 261 (literal -> FCONST .)
    RSHIFT          reduce using rule 261 (literal -> FCONST .)
    LT              reduce using rule 261 (literal -> FCONST .)
    GT              reduce using rule 261 (literal -> FCONST .)
    LE              reduce using rule 261 (literal -> FCONST .)
    GE              reduce using rule 261 (literal -> FCONST .)
    EQ              reduce using rule 261 (literal -> FCONST .)
    NE              reduce using rule 261 (literal -> FCONST .)
    BITAND          reduce using rule 261 (literal -> FCONST .)
    BITXOR          reduce using rule 261 (literal -> FCONST .)
    BITOR           reduce using rule 261 (literal -> FCONST .)
    LOGAND          reduce using rule 261 (literal -> FCONST .)
    CONDOP          reduce using rule 261 (literal -> FCONST .)
    LOGOR           reduce using rule 261 (literal -> FCONST .)
    CLOSE_PAREN     reduce using rule 261 (literal -> FCONST .)
    COMMA           reduce using rule 261 (literal -> FCONST .)
    BLOCK_END       reduce using rule 261 (literal -> FCONST .)
    DELIM           reduce using rule 261 (literal -> FCONST .)
    CLOSE_BRACKET   reduce using rule 261 (literal -> FCONST .)
    COLON           reduce using rule 261 (literal -> FCONST .)


state 100

    (222) iteration-statement -> foreach-statement .

    IDENTIFIER      reduce using rule 222 (iteration-statement -> foreach-statement .)
    CONST           reduce using rule 222 (iteration-statement -> foreach-statement .)
    BLOCK_BEGIN     reduce using rule 222 (iteration-statement -> foreach-statement .)
    DELIM           reduce using rule 222 (iteration-statement -> foreach-statement .)
    IF              reduce using rule 222 (iteration-statement -> foreach-statement .)
    SWITCH          reduce using rule 222 (iteration-statement -> foreach-statement .)
    WHILE           reduce using rule 222 (iteration-statement -> foreach-statement .)
    FOR             reduce using rule 222 (iteration-statement -> foreach-statement .)
    FOREACH         reduce using rule 222 (iteration-statement -> foreach-statement .)
    DO              reduce using rule 222 (iteration-statement -> foreach-statement .)
    BREAK           reduce using rule 222 (iteration-statement -> foreach-statement .)
    CONTINUE        reduce using rule 222 (iteration-statement -> foreach-statement .)
    GOTO            reduce using rule 222 (iteration-statement -> foreach-statement .)
    RETURN          reduce using rule 222 (iteration-statement -> foreach-statement .)
    BOOL            reduce using rule 222 (iteration-statement -> foreach-statement .)
    NEW             reduce using rule 222 (iteration-statement -> foreach-statement .)
    INCRE           reduce using rule 222 (iteration-statement -> foreach-statement .)
    DECRE           reduce using rule 222 (iteration-statement -> foreach-statement .)
    INT             reduce using rule 222 (iteration-statement -> foreach-statement .)
    UINT            reduce using rule 222 (iteration-statement -> foreach-statement .)
    LONG            reduce using rule 222 (iteration-statement -> foreach-statement .)
    ULONG           reduce using rule 222 (iteration-statement -> foreach-statement .)
    CHAR            reduce using rule 222 (iteration-statement -> foreach-statement .)
    FLOAT           reduce using rule 222 (iteration-statement -> foreach-statement .)
    DOUBLE          reduce using rule 222 (iteration-statement -> foreach-statement .)
    ICONST          reduce using rule 222 (iteration-statement -> foreach-statement .)
    UICONST         reduce using rule 222 (iteration-statement -> foreach-statement .)
    LICONST         reduce using rule 222 (iteration-statement -> foreach-statement .)
    ULICONST        reduce using rule 222 (iteration-statement -> foreach-statement .)
    FCONST          reduce using rule 222 (iteration-statement -> foreach-statement .)
    DCONST          reduce using rule 222 (iteration-statement -> foreach-statement .)
    MCONST          reduce using rule 222 (iteration-statement -> foreach-statement .)
    CCONST          reduce using rule 222 (iteration-statement -> foreach-statement .)
    SCONST          reduce using rule 222 (iteration-statement -> foreach-statement .)
    VSCONST         reduce using rule 222 (iteration-statement -> foreach-statement .)
    TRUE            reduce using rule 222 (iteration-statement -> foreach-statement .)
    FALSE           reduce using rule 222 (iteration-statement -> foreach-statement .)
    OPEN_PAREN      reduce using rule 222 (iteration-statement -> foreach-statement .)
    THIS            reduce using rule 222 (iteration-statement -> foreach-statement .)
    BASE            reduce using rule 222 (iteration-statement -> foreach-statement .)
    BLOCK_END       reduce using rule 222 (iteration-statement -> foreach-statement .)
    CASE            reduce using rule 222 (iteration-statement -> foreach-statement .)
    DEFAULT         reduce using rule 222 (iteration-statement -> foreach-statement .)
    ELSE            reduce using rule 222 (iteration-statement -> foreach-statement .)


state 101

    (108) primary-no-array-creation-expression -> element-access .

    OPEN_BRACKET    reduce using rule 108 (primary-no-array-creation-expression -> element-access .)
    DOT             reduce using rule 108 (primary-no-array-creation-expression -> element-access .)
    OPEN_PAREN      reduce using rule 108 (primary-no-array-creation-expression -> element-access .)
    INCRE           reduce using rule 108 (primary-no-array-creation-expression -> element-access .)
    DECRE           reduce using rule 108 (primary-no-array-creation-expression -> element-access .)
    TIMES           reduce using rule 108 (primary-no-array-creation-expression -> element-access .)
    DIV             reduce using rule 108 (primary-no-array-creation-expression -> element-access .)
    MOD             reduce using rule 108 (primary-no-array-creation-expression -> element-access .)
    PLUS            reduce using rule 108 (primary-no-array-creation-expression -> element-access .)
    MINUS           reduce using rule 108 (primary-no-array-creation-expression -> element-access .)
    LSHIFT          reduce using rule 108 (primary-no-array-creation-expression -> element-access .)
    RSHIFT          reduce using rule 108 (primary-no-array-creation-expression -> element-access .)
    LT              reduce using rule 108 (primary-no-array-creation-expression -> element-access .)
    GT              reduce using rule 108 (primary-no-array-creation-expression -> element-access .)
    LE              reduce using rule 108 (primary-no-array-creation-expression -> element-access .)
    GE              reduce using rule 108 (primary-no-array-creation-expression -> element-access .)
    EQ              reduce using rule 108 (primary-no-array-creation-expression -> element-access .)
    NE              reduce using rule 108 (primary-no-array-creation-expression -> element-access .)
    BITAND          reduce using rule 108 (primary-no-array-creation-expression -> element-access .)
    BITXOR          reduce using rule 108 (primary-no-array-creation-expression -> element-access .)
    BITOR           reduce using rule 108 (primary-no-array-creation-expression -> element-access .)
    LOGAND          reduce using rule 108 (primary-no-array-creation-expression -> element-access .)
    CONDOP          reduce using rule 108 (primary-no-array-creation-expression -> element-access .)
    LOGOR           reduce using rule 108 (primary-no-array-creation-expression -> element-access .)
    DELIM           reduce using rule 108 (primary-no-array-creation-expression -> element-access .)
    CLOSE_PAREN     reduce using rule 108 (primary-no-array-creation-expression -> element-access .)
    COMMA           reduce using rule 108 (primary-no-array-creation-expression -> element-access .)
    CLOSE_BRACKET   reduce using rule 108 (primary-no-array-creation-expression -> element-access .)
    BLOCK_END       reduce using rule 108 (primary-no-array-creation-expression -> element-access .)
    COLON           reduce using rule 108 (primary-no-array-creation-expression -> element-access .)
    ASSIGN          reduce using rule 108 (primary-no-array-creation-expression -> element-access .)
    PLUSEQUAL       reduce using rule 108 (primary-no-array-creation-expression -> element-access .)
    MINUSEQUAL      reduce using rule 108 (primary-no-array-creation-expression -> element-access .)
    TIMESEQUAL      reduce using rule 108 (primary-no-array-creation-expression -> element-access .)
    DIVEQUAL        reduce using rule 108 (primary-no-array-creation-expression -> element-access .)
    MODEQUAL        reduce using rule 108 (primary-no-array-creation-expression -> element-access .)
    BITANDEQUAL     reduce using rule 108 (primary-no-array-creation-expression -> element-access .)
    BITOREQUAL      reduce using rule 108 (primary-no-array-creation-expression -> element-access .)
    BITXOREQUAL     reduce using rule 108 (primary-no-array-creation-expression -> element-access .)
    LSHIFTEQUAL     reduce using rule 108 (primary-no-array-creation-expression -> element-access .)
    RSHIFTEQUAL     reduce using rule 108 (primary-no-array-creation-expression -> element-access .)


state 102

    (180) declaration-statement -> local-constant-declaration . DELIM

    DELIM           shift and go to state 212


state 103

    (258) literal -> UICONST .

    OPEN_BRACKET    reduce using rule 258 (literal -> UICONST .)
    DOT             reduce using rule 258 (literal -> UICONST .)
    OPEN_PAREN      reduce using rule 258 (literal -> UICONST .)
    INCRE           reduce using rule 258 (literal -> UICONST .)
    DECRE           reduce using rule 258 (literal -> UICONST .)
    ASSIGN          reduce using rule 258 (literal -> UICONST .)
    PLUSEQUAL       reduce using rule 258 (literal -> UICONST .)
    MINUSEQUAL      reduce using rule 258 (literal -> UICONST .)
    TIMESEQUAL      reduce using rule 258 (literal -> UICONST .)
    DIVEQUAL        reduce using rule 258 (literal -> UICONST .)
    MODEQUAL        reduce using rule 258 (literal -> UICONST .)
    BITANDEQUAL     reduce using rule 258 (literal -> UICONST .)
    BITOREQUAL      reduce using rule 258 (literal -> UICONST .)
    BITXOREQUAL     reduce using rule 258 (literal -> UICONST .)
    LSHIFTEQUAL     reduce using rule 258 (literal -> UICONST .)
    RSHIFTEQUAL     reduce using rule 258 (literal -> UICONST .)
    TIMES           reduce using rule 258 (literal -> UICONST .)
    DIV             reduce using rule 258 (literal -> UICONST .)
    MOD             reduce using rule 258 (literal -> UICONST .)
    PLUS            reduce using rule 258 (literal -> UICONST .)
    MINUS           reduce using rule 258 (literal -> UICONST .)
    LSHIFT          reduce using rule 258 (literal -> UICONST .)
    RSHIFT          reduce using rule 258 (literal -> UICONST .)
    LT              reduce using rule 258 (literal -> UICONST .)
    GT              reduce using rule 258 (literal -> UICONST .)
    LE              reduce using rule 258 (literal -> UICONST .)
    GE              reduce using rule 258 (literal -> UICONST .)
    EQ              reduce using rule 258 (literal -> UICONST .)
    NE              reduce using rule 258 (literal -> UICONST .)
    BITAND          reduce using rule 258 (literal -> UICONST .)
    BITXOR          reduce using rule 258 (literal -> UICONST .)
    BITOR           reduce using rule 258 (literal -> UICONST .)
    LOGAND          reduce using rule 258 (literal -> UICONST .)
    CONDOP          reduce using rule 258 (literal -> UICONST .)
    LOGOR           reduce using rule 258 (literal -> UICONST .)
    CLOSE_PAREN     reduce using rule 258 (literal -> UICONST .)
    COMMA           reduce using rule 258 (literal -> UICONST .)
    BLOCK_END       reduce using rule 258 (literal -> UICONST .)
    DELIM           reduce using rule 258 (literal -> UICONST .)
    CLOSE_BRACKET   reduce using rule 258 (literal -> UICONST .)
    COLON           reduce using rule 258 (literal -> UICONST .)


state 104

    (223) iteration-statement -> do-statement .

    IDENTIFIER      reduce using rule 223 (iteration-statement -> do-statement .)
    CONST           reduce using rule 223 (iteration-statement -> do-statement .)
    BLOCK_BEGIN     reduce using rule 223 (iteration-statement -> do-statement .)
    DELIM           reduce using rule 223 (iteration-statement -> do-statement .)
    IF              reduce using rule 223 (iteration-statement -> do-statement .)
    SWITCH          reduce using rule 223 (iteration-statement -> do-statement .)
    WHILE           reduce using rule 223 (iteration-statement -> do-statement .)
    FOR             reduce using rule 223 (iteration-statement -> do-statement .)
    FOREACH         reduce using rule 223 (iteration-statement -> do-statement .)
    DO              reduce using rule 223 (iteration-statement -> do-statement .)
    BREAK           reduce using rule 223 (iteration-statement -> do-statement .)
    CONTINUE        reduce using rule 223 (iteration-statement -> do-statement .)
    GOTO            reduce using rule 223 (iteration-statement -> do-statement .)
    RETURN          reduce using rule 223 (iteration-statement -> do-statement .)
    BOOL            reduce using rule 223 (iteration-statement -> do-statement .)
    NEW             reduce using rule 223 (iteration-statement -> do-statement .)
    INCRE           reduce using rule 223 (iteration-statement -> do-statement .)
    DECRE           reduce using rule 223 (iteration-statement -> do-statement .)
    INT             reduce using rule 223 (iteration-statement -> do-statement .)
    UINT            reduce using rule 223 (iteration-statement -> do-statement .)
    LONG            reduce using rule 223 (iteration-statement -> do-statement .)
    ULONG           reduce using rule 223 (iteration-statement -> do-statement .)
    CHAR            reduce using rule 223 (iteration-statement -> do-statement .)
    FLOAT           reduce using rule 223 (iteration-statement -> do-statement .)
    DOUBLE          reduce using rule 223 (iteration-statement -> do-statement .)
    ICONST          reduce using rule 223 (iteration-statement -> do-statement .)
    UICONST         reduce using rule 223 (iteration-statement -> do-statement .)
    LICONST         reduce using rule 223 (iteration-statement -> do-statement .)
    ULICONST        reduce using rule 223 (iteration-statement -> do-statement .)
    FCONST          reduce using rule 223 (iteration-statement -> do-statement .)
    DCONST          reduce using rule 223 (iteration-statement -> do-statement .)
    MCONST          reduce using rule 223 (iteration-statement -> do-statement .)
    CCONST          reduce using rule 223 (iteration-statement -> do-statement .)
    SCONST          reduce using rule 223 (iteration-statement -> do-statement .)
    VSCONST         reduce using rule 223 (iteration-statement -> do-statement .)
    TRUE            reduce using rule 223 (iteration-statement -> do-statement .)
    FALSE           reduce using rule 223 (iteration-statement -> do-statement .)
    OPEN_PAREN      reduce using rule 223 (iteration-statement -> do-statement .)
    THIS            reduce using rule 223 (iteration-statement -> do-statement .)
    BASE            reduce using rule 223 (iteration-statement -> do-statement .)
    BLOCK_END       reduce using rule 223 (iteration-statement -> do-statement .)
    CASE            reduce using rule 223 (iteration-statement -> do-statement .)
    DEFAULT         reduce using rule 223 (iteration-statement -> do-statement .)
    ELSE            reduce using rule 223 (iteration-statement -> do-statement .)


state 105

    (226) for-statement -> FOR . OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement

    OPEN_PAREN      shift and go to state 213


state 106

    (241) jump-statement -> continue-statement .

    IDENTIFIER      reduce using rule 241 (jump-statement -> continue-statement .)
    CONST           reduce using rule 241 (jump-statement -> continue-statement .)
    BLOCK_BEGIN     reduce using rule 241 (jump-statement -> continue-statement .)
    DELIM           reduce using rule 241 (jump-statement -> continue-statement .)
    IF              reduce using rule 241 (jump-statement -> continue-statement .)
    SWITCH          reduce using rule 241 (jump-statement -> continue-statement .)
    WHILE           reduce using rule 241 (jump-statement -> continue-statement .)
    FOR             reduce using rule 241 (jump-statement -> continue-statement .)
    FOREACH         reduce using rule 241 (jump-statement -> continue-statement .)
    DO              reduce using rule 241 (jump-statement -> continue-statement .)
    BREAK           reduce using rule 241 (jump-statement -> continue-statement .)
    CONTINUE        reduce using rule 241 (jump-statement -> continue-statement .)
    GOTO            reduce using rule 241 (jump-statement -> continue-statement .)
    RETURN          reduce using rule 241 (jump-statement -> continue-statement .)
    BOOL            reduce using rule 241 (jump-statement -> continue-statement .)
    NEW             reduce using rule 241 (jump-statement -> continue-statement .)
    INCRE           reduce using rule 241 (jump-statement -> continue-statement .)
    DECRE           reduce using rule 241 (jump-statement -> continue-statement .)
    INT             reduce using rule 241 (jump-statement -> continue-statement .)
    UINT            reduce using rule 241 (jump-statement -> continue-statement .)
    LONG            reduce using rule 241 (jump-statement -> continue-statement .)
    ULONG           reduce using rule 241 (jump-statement -> continue-statement .)
    CHAR            reduce using rule 241 (jump-statement -> continue-statement .)
    FLOAT           reduce using rule 241 (jump-statement -> continue-statement .)
    DOUBLE          reduce using rule 241 (jump-statement -> continue-statement .)
    ICONST          reduce using rule 241 (jump-statement -> continue-statement .)
    UICONST         reduce using rule 241 (jump-statement -> continue-statement .)
    LICONST         reduce using rule 241 (jump-statement -> continue-statement .)
    ULICONST        reduce using rule 241 (jump-statement -> continue-statement .)
    FCONST          reduce using rule 241 (jump-statement -> continue-statement .)
    DCONST          reduce using rule 241 (jump-statement -> continue-statement .)
    MCONST          reduce using rule 241 (jump-statement -> continue-statement .)
    CCONST          reduce using rule 241 (jump-statement -> continue-statement .)
    SCONST          reduce using rule 241 (jump-statement -> continue-statement .)
    VSCONST         reduce using rule 241 (jump-statement -> continue-statement .)
    TRUE            reduce using rule 241 (jump-statement -> continue-statement .)
    FALSE           reduce using rule 241 (jump-statement -> continue-statement .)
    OPEN_PAREN      reduce using rule 241 (jump-statement -> continue-statement .)
    THIS            reduce using rule 241 (jump-statement -> continue-statement .)
    BASE            reduce using rule 241 (jump-statement -> continue-statement .)
    BLOCK_END       reduce using rule 241 (jump-statement -> continue-statement .)
    CASE            reduce using rule 241 (jump-statement -> continue-statement .)
    DEFAULT         reduce using rule 241 (jump-statement -> continue-statement .)
    ELSE            reduce using rule 241 (jump-statement -> continue-statement .)


state 107

    (263) literal -> MCONST .

    OPEN_BRACKET    reduce using rule 263 (literal -> MCONST .)
    DOT             reduce using rule 263 (literal -> MCONST .)
    OPEN_PAREN      reduce using rule 263 (literal -> MCONST .)
    INCRE           reduce using rule 263 (literal -> MCONST .)
    DECRE           reduce using rule 263 (literal -> MCONST .)
    ASSIGN          reduce using rule 263 (literal -> MCONST .)
    PLUSEQUAL       reduce using rule 263 (literal -> MCONST .)
    MINUSEQUAL      reduce using rule 263 (literal -> MCONST .)
    TIMESEQUAL      reduce using rule 263 (literal -> MCONST .)
    DIVEQUAL        reduce using rule 263 (literal -> MCONST .)
    MODEQUAL        reduce using rule 263 (literal -> MCONST .)
    BITANDEQUAL     reduce using rule 263 (literal -> MCONST .)
    BITOREQUAL      reduce using rule 263 (literal -> MCONST .)
    BITXOREQUAL     reduce using rule 263 (literal -> MCONST .)
    LSHIFTEQUAL     reduce using rule 263 (literal -> MCONST .)
    RSHIFTEQUAL     reduce using rule 263 (literal -> MCONST .)
    TIMES           reduce using rule 263 (literal -> MCONST .)
    DIV             reduce using rule 263 (literal -> MCONST .)
    MOD             reduce using rule 263 (literal -> MCONST .)
    PLUS            reduce using rule 263 (literal -> MCONST .)
    MINUS           reduce using rule 263 (literal -> MCONST .)
    LSHIFT          reduce using rule 263 (literal -> MCONST .)
    RSHIFT          reduce using rule 263 (literal -> MCONST .)
    LT              reduce using rule 263 (literal -> MCONST .)
    GT              reduce using rule 263 (literal -> MCONST .)
    LE              reduce using rule 263 (literal -> MCONST .)
    GE              reduce using rule 263 (literal -> MCONST .)
    EQ              reduce using rule 263 (literal -> MCONST .)
    NE              reduce using rule 263 (literal -> MCONST .)
    BITAND          reduce using rule 263 (literal -> MCONST .)
    BITXOR          reduce using rule 263 (literal -> MCONST .)
    BITOR           reduce using rule 263 (literal -> MCONST .)
    LOGAND          reduce using rule 263 (literal -> MCONST .)
    CONDOP          reduce using rule 263 (literal -> MCONST .)
    LOGOR           reduce using rule 263 (literal -> MCONST .)
    CLOSE_PAREN     reduce using rule 263 (literal -> MCONST .)
    COMMA           reduce using rule 263 (literal -> MCONST .)
    BLOCK_END       reduce using rule 263 (literal -> MCONST .)
    DELIM           reduce using rule 263 (literal -> MCONST .)
    CLOSE_BRACKET   reduce using rule 263 (literal -> MCONST .)
    COLON           reduce using rule 263 (literal -> MCONST .)


state 108

    (203) statement-expression -> pre-decrement-expression .

    DELIM           reduce using rule 203 (statement-expression -> pre-decrement-expression .)
    COMMA           reduce using rule 203 (statement-expression -> pre-decrement-expression .)
    CLOSE_PAREN     reduce using rule 203 (statement-expression -> pre-decrement-expression .)


state 109

    (179) declaration-statement -> local-variable-declaration . DELIM

    DELIM           shift and go to state 214


state 110

    (266) literal -> VSCONST .

    OPEN_BRACKET    reduce using rule 266 (literal -> VSCONST .)
    DOT             reduce using rule 266 (literal -> VSCONST .)
    OPEN_PAREN      reduce using rule 266 (literal -> VSCONST .)
    INCRE           reduce using rule 266 (literal -> VSCONST .)
    DECRE           reduce using rule 266 (literal -> VSCONST .)
    ASSIGN          reduce using rule 266 (literal -> VSCONST .)
    PLUSEQUAL       reduce using rule 266 (literal -> VSCONST .)
    MINUSEQUAL      reduce using rule 266 (literal -> VSCONST .)
    TIMESEQUAL      reduce using rule 266 (literal -> VSCONST .)
    DIVEQUAL        reduce using rule 266 (literal -> VSCONST .)
    MODEQUAL        reduce using rule 266 (literal -> VSCONST .)
    BITANDEQUAL     reduce using rule 266 (literal -> VSCONST .)
    BITOREQUAL      reduce using rule 266 (literal -> VSCONST .)
    BITXOREQUAL     reduce using rule 266 (literal -> VSCONST .)
    LSHIFTEQUAL     reduce using rule 266 (literal -> VSCONST .)
    RSHIFTEQUAL     reduce using rule 266 (literal -> VSCONST .)
    TIMES           reduce using rule 266 (literal -> VSCONST .)
    DIV             reduce using rule 266 (literal -> VSCONST .)
    MOD             reduce using rule 266 (literal -> VSCONST .)
    PLUS            reduce using rule 266 (literal -> VSCONST .)
    MINUS           reduce using rule 266 (literal -> VSCONST .)
    LSHIFT          reduce using rule 266 (literal -> VSCONST .)
    RSHIFT          reduce using rule 266 (literal -> VSCONST .)
    LT              reduce using rule 266 (literal -> VSCONST .)
    GT              reduce using rule 266 (literal -> VSCONST .)
    LE              reduce using rule 266 (literal -> VSCONST .)
    GE              reduce using rule 266 (literal -> VSCONST .)
    EQ              reduce using rule 266 (literal -> VSCONST .)
    NE              reduce using rule 266 (literal -> VSCONST .)
    BITAND          reduce using rule 266 (literal -> VSCONST .)
    BITXOR          reduce using rule 266 (literal -> VSCONST .)
    BITOR           reduce using rule 266 (literal -> VSCONST .)
    LOGAND          reduce using rule 266 (literal -> VSCONST .)
    CONDOP          reduce using rule 266 (literal -> VSCONST .)
    LOGOR           reduce using rule 266 (literal -> VSCONST .)
    CLOSE_PAREN     reduce using rule 266 (literal -> VSCONST .)
    COMMA           reduce using rule 266 (literal -> VSCONST .)
    BLOCK_END       reduce using rule 266 (literal -> VSCONST .)
    DELIM           reduce using rule 266 (literal -> VSCONST .)
    CLOSE_BRACKET   reduce using rule 266 (literal -> VSCONST .)
    COLON           reduce using rule 266 (literal -> VSCONST .)


state 111

    (242) jump-statement -> goto-statement .

    IDENTIFIER      reduce using rule 242 (jump-statement -> goto-statement .)
    CONST           reduce using rule 242 (jump-statement -> goto-statement .)
    BLOCK_BEGIN     reduce using rule 242 (jump-statement -> goto-statement .)
    DELIM           reduce using rule 242 (jump-statement -> goto-statement .)
    IF              reduce using rule 242 (jump-statement -> goto-statement .)
    SWITCH          reduce using rule 242 (jump-statement -> goto-statement .)
    WHILE           reduce using rule 242 (jump-statement -> goto-statement .)
    FOR             reduce using rule 242 (jump-statement -> goto-statement .)
    FOREACH         reduce using rule 242 (jump-statement -> goto-statement .)
    DO              reduce using rule 242 (jump-statement -> goto-statement .)
    BREAK           reduce using rule 242 (jump-statement -> goto-statement .)
    CONTINUE        reduce using rule 242 (jump-statement -> goto-statement .)
    GOTO            reduce using rule 242 (jump-statement -> goto-statement .)
    RETURN          reduce using rule 242 (jump-statement -> goto-statement .)
    BOOL            reduce using rule 242 (jump-statement -> goto-statement .)
    NEW             reduce using rule 242 (jump-statement -> goto-statement .)
    INCRE           reduce using rule 242 (jump-statement -> goto-statement .)
    DECRE           reduce using rule 242 (jump-statement -> goto-statement .)
    INT             reduce using rule 242 (jump-statement -> goto-statement .)
    UINT            reduce using rule 242 (jump-statement -> goto-statement .)
    LONG            reduce using rule 242 (jump-statement -> goto-statement .)
    ULONG           reduce using rule 242 (jump-statement -> goto-statement .)
    CHAR            reduce using rule 242 (jump-statement -> goto-statement .)
    FLOAT           reduce using rule 242 (jump-statement -> goto-statement .)
    DOUBLE          reduce using rule 242 (jump-statement -> goto-statement .)
    ICONST          reduce using rule 242 (jump-statement -> goto-statement .)
    UICONST         reduce using rule 242 (jump-statement -> goto-statement .)
    LICONST         reduce using rule 242 (jump-statement -> goto-statement .)
    ULICONST        reduce using rule 242 (jump-statement -> goto-statement .)
    FCONST          reduce using rule 242 (jump-statement -> goto-statement .)
    DCONST          reduce using rule 242 (jump-statement -> goto-statement .)
    MCONST          reduce using rule 242 (jump-statement -> goto-statement .)
    CCONST          reduce using rule 242 (jump-statement -> goto-statement .)
    SCONST          reduce using rule 242 (jump-statement -> goto-statement .)
    VSCONST         reduce using rule 242 (jump-statement -> goto-statement .)
    TRUE            reduce using rule 242 (jump-statement -> goto-statement .)
    FALSE           reduce using rule 242 (jump-statement -> goto-statement .)
    OPEN_PAREN      reduce using rule 242 (jump-statement -> goto-statement .)
    THIS            reduce using rule 242 (jump-statement -> goto-statement .)
    BASE            reduce using rule 242 (jump-statement -> goto-statement .)
    BLOCK_END       reduce using rule 242 (jump-statement -> goto-statement .)
    CASE            reduce using rule 242 (jump-statement -> goto-statement .)
    DEFAULT         reduce using rule 242 (jump-statement -> goto-statement .)
    ELSE            reduce using rule 242 (jump-statement -> goto-statement .)


state 112

    (204) selection-statement -> if-statement .

    IDENTIFIER      reduce using rule 204 (selection-statement -> if-statement .)
    CONST           reduce using rule 204 (selection-statement -> if-statement .)
    BLOCK_BEGIN     reduce using rule 204 (selection-statement -> if-statement .)
    DELIM           reduce using rule 204 (selection-statement -> if-statement .)
    IF              reduce using rule 204 (selection-statement -> if-statement .)
    SWITCH          reduce using rule 204 (selection-statement -> if-statement .)
    WHILE           reduce using rule 204 (selection-statement -> if-statement .)
    FOR             reduce using rule 204 (selection-statement -> if-statement .)
    FOREACH         reduce using rule 204 (selection-statement -> if-statement .)
    DO              reduce using rule 204 (selection-statement -> if-statement .)
    BREAK           reduce using rule 204 (selection-statement -> if-statement .)
    CONTINUE        reduce using rule 204 (selection-statement -> if-statement .)
    GOTO            reduce using rule 204 (selection-statement -> if-statement .)
    RETURN          reduce using rule 204 (selection-statement -> if-statement .)
    BOOL            reduce using rule 204 (selection-statement -> if-statement .)
    NEW             reduce using rule 204 (selection-statement -> if-statement .)
    INCRE           reduce using rule 204 (selection-statement -> if-statement .)
    DECRE           reduce using rule 204 (selection-statement -> if-statement .)
    INT             reduce using rule 204 (selection-statement -> if-statement .)
    UINT            reduce using rule 204 (selection-statement -> if-statement .)
    LONG            reduce using rule 204 (selection-statement -> if-statement .)
    ULONG           reduce using rule 204 (selection-statement -> if-statement .)
    CHAR            reduce using rule 204 (selection-statement -> if-statement .)
    FLOAT           reduce using rule 204 (selection-statement -> if-statement .)
    DOUBLE          reduce using rule 204 (selection-statement -> if-statement .)
    ICONST          reduce using rule 204 (selection-statement -> if-statement .)
    UICONST         reduce using rule 204 (selection-statement -> if-statement .)
    LICONST         reduce using rule 204 (selection-statement -> if-statement .)
    ULICONST        reduce using rule 204 (selection-statement -> if-statement .)
    FCONST          reduce using rule 204 (selection-statement -> if-statement .)
    DCONST          reduce using rule 204 (selection-statement -> if-statement .)
    MCONST          reduce using rule 204 (selection-statement -> if-statement .)
    CCONST          reduce using rule 204 (selection-statement -> if-statement .)
    SCONST          reduce using rule 204 (selection-statement -> if-statement .)
    VSCONST         reduce using rule 204 (selection-statement -> if-statement .)
    TRUE            reduce using rule 204 (selection-statement -> if-statement .)
    FALSE           reduce using rule 204 (selection-statement -> if-statement .)
    OPEN_PAREN      reduce using rule 204 (selection-statement -> if-statement .)
    THIS            reduce using rule 204 (selection-statement -> if-statement .)
    BASE            reduce using rule 204 (selection-statement -> if-statement .)
    BLOCK_END       reduce using rule 204 (selection-statement -> if-statement .)
    CASE            reduce using rule 204 (selection-statement -> if-statement .)
    DEFAULT         reduce using rule 204 (selection-statement -> if-statement .)
    ELSE            reduce using rule 204 (selection-statement -> if-statement .)


state 113

    (245) continue-statement -> CONTINUE . DELIM

    DELIM           shift and go to state 215


state 114

    (189) embedded-statement -> block .

    IDENTIFIER      reduce using rule 189 (embedded-statement -> block .)
    CONST           reduce using rule 189 (embedded-statement -> block .)
    BLOCK_BEGIN     reduce using rule 189 (embedded-statement -> block .)
    DELIM           reduce using rule 189 (embedded-statement -> block .)
    IF              reduce using rule 189 (embedded-statement -> block .)
    SWITCH          reduce using rule 189 (embedded-statement -> block .)
    WHILE           reduce using rule 189 (embedded-statement -> block .)
    FOR             reduce using rule 189 (embedded-statement -> block .)
    FOREACH         reduce using rule 189 (embedded-statement -> block .)
    DO              reduce using rule 189 (embedded-statement -> block .)
    BREAK           reduce using rule 189 (embedded-statement -> block .)
    CONTINUE        reduce using rule 189 (embedded-statement -> block .)
    GOTO            reduce using rule 189 (embedded-statement -> block .)
    RETURN          reduce using rule 189 (embedded-statement -> block .)
    BOOL            reduce using rule 189 (embedded-statement -> block .)
    NEW             reduce using rule 189 (embedded-statement -> block .)
    INCRE           reduce using rule 189 (embedded-statement -> block .)
    DECRE           reduce using rule 189 (embedded-statement -> block .)
    INT             reduce using rule 189 (embedded-statement -> block .)
    UINT            reduce using rule 189 (embedded-statement -> block .)
    LONG            reduce using rule 189 (embedded-statement -> block .)
    ULONG           reduce using rule 189 (embedded-statement -> block .)
    CHAR            reduce using rule 189 (embedded-statement -> block .)
    FLOAT           reduce using rule 189 (embedded-statement -> block .)
    DOUBLE          reduce using rule 189 (embedded-statement -> block .)
    ICONST          reduce using rule 189 (embedded-statement -> block .)
    UICONST         reduce using rule 189 (embedded-statement -> block .)
    LICONST         reduce using rule 189 (embedded-statement -> block .)
    ULICONST        reduce using rule 189 (embedded-statement -> block .)
    FCONST          reduce using rule 189 (embedded-statement -> block .)
    DCONST          reduce using rule 189 (embedded-statement -> block .)
    MCONST          reduce using rule 189 (embedded-statement -> block .)
    CCONST          reduce using rule 189 (embedded-statement -> block .)
    SCONST          reduce using rule 189 (embedded-statement -> block .)
    VSCONST         reduce using rule 189 (embedded-statement -> block .)
    TRUE            reduce using rule 189 (embedded-statement -> block .)
    FALSE           reduce using rule 189 (embedded-statement -> block .)
    OPEN_PAREN      reduce using rule 189 (embedded-statement -> block .)
    THIS            reduce using rule 189 (embedded-statement -> block .)
    BASE            reduce using rule 189 (embedded-statement -> block .)
    CASE            reduce using rule 189 (embedded-statement -> block .)
    DEFAULT         reduce using rule 189 (embedded-statement -> block .)
    BLOCK_END       reduce using rule 189 (embedded-statement -> block .)
    ELSE            reduce using rule 189 (embedded-statement -> block .)


state 115

    (195) empty-statement -> DELIM .

    IDENTIFIER      reduce using rule 195 (empty-statement -> DELIM .)
    CONST           reduce using rule 195 (empty-statement -> DELIM .)
    BLOCK_BEGIN     reduce using rule 195 (empty-statement -> DELIM .)
    DELIM           reduce using rule 195 (empty-statement -> DELIM .)
    IF              reduce using rule 195 (empty-statement -> DELIM .)
    SWITCH          reduce using rule 195 (empty-statement -> DELIM .)
    WHILE           reduce using rule 195 (empty-statement -> DELIM .)
    FOR             reduce using rule 195 (empty-statement -> DELIM .)
    FOREACH         reduce using rule 195 (empty-statement -> DELIM .)
    DO              reduce using rule 195 (empty-statement -> DELIM .)
    BREAK           reduce using rule 195 (empty-statement -> DELIM .)
    CONTINUE        reduce using rule 195 (empty-statement -> DELIM .)
    GOTO            reduce using rule 195 (empty-statement -> DELIM .)
    RETURN          reduce using rule 195 (empty-statement -> DELIM .)
    BOOL            reduce using rule 195 (empty-statement -> DELIM .)
    NEW             reduce using rule 195 (empty-statement -> DELIM .)
    INCRE           reduce using rule 195 (empty-statement -> DELIM .)
    DECRE           reduce using rule 195 (empty-statement -> DELIM .)
    INT             reduce using rule 195 (empty-statement -> DELIM .)
    UINT            reduce using rule 195 (empty-statement -> DELIM .)
    LONG            reduce using rule 195 (empty-statement -> DELIM .)
    ULONG           reduce using rule 195 (empty-statement -> DELIM .)
    CHAR            reduce using rule 195 (empty-statement -> DELIM .)
    FLOAT           reduce using rule 195 (empty-statement -> DELIM .)
    DOUBLE          reduce using rule 195 (empty-statement -> DELIM .)
    ICONST          reduce using rule 195 (empty-statement -> DELIM .)
    UICONST         reduce using rule 195 (empty-statement -> DELIM .)
    LICONST         reduce using rule 195 (empty-statement -> DELIM .)
    ULICONST        reduce using rule 195 (empty-statement -> DELIM .)
    FCONST          reduce using rule 195 (empty-statement -> DELIM .)
    DCONST          reduce using rule 195 (empty-statement -> DELIM .)
    MCONST          reduce using rule 195 (empty-statement -> DELIM .)
    CCONST          reduce using rule 195 (empty-statement -> DELIM .)
    SCONST          reduce using rule 195 (empty-statement -> DELIM .)
    VSCONST         reduce using rule 195 (empty-statement -> DELIM .)
    TRUE            reduce using rule 195 (empty-statement -> DELIM .)
    FALSE           reduce using rule 195 (empty-statement -> DELIM .)
    OPEN_PAREN      reduce using rule 195 (empty-statement -> DELIM .)
    THIS            reduce using rule 195 (empty-statement -> DELIM .)
    BASE            reduce using rule 195 (empty-statement -> DELIM .)
    BLOCK_END       reduce using rule 195 (empty-statement -> DELIM .)
    CASE            reduce using rule 195 (empty-statement -> DELIM .)
    DEFAULT         reduce using rule 195 (empty-statement -> DELIM .)
    ELSE            reduce using rule 195 (empty-statement -> DELIM .)


state 116

    (192) embedded-statement -> selection-statement .

    IDENTIFIER      reduce using rule 192 (embedded-statement -> selection-statement .)
    CONST           reduce using rule 192 (embedded-statement -> selection-statement .)
    BLOCK_BEGIN     reduce using rule 192 (embedded-statement -> selection-statement .)
    DELIM           reduce using rule 192 (embedded-statement -> selection-statement .)
    IF              reduce using rule 192 (embedded-statement -> selection-statement .)
    SWITCH          reduce using rule 192 (embedded-statement -> selection-statement .)
    WHILE           reduce using rule 192 (embedded-statement -> selection-statement .)
    FOR             reduce using rule 192 (embedded-statement -> selection-statement .)
    FOREACH         reduce using rule 192 (embedded-statement -> selection-statement .)
    DO              reduce using rule 192 (embedded-statement -> selection-statement .)
    BREAK           reduce using rule 192 (embedded-statement -> selection-statement .)
    CONTINUE        reduce using rule 192 (embedded-statement -> selection-statement .)
    GOTO            reduce using rule 192 (embedded-statement -> selection-statement .)
    RETURN          reduce using rule 192 (embedded-statement -> selection-statement .)
    BOOL            reduce using rule 192 (embedded-statement -> selection-statement .)
    NEW             reduce using rule 192 (embedded-statement -> selection-statement .)
    INCRE           reduce using rule 192 (embedded-statement -> selection-statement .)
    DECRE           reduce using rule 192 (embedded-statement -> selection-statement .)
    INT             reduce using rule 192 (embedded-statement -> selection-statement .)
    UINT            reduce using rule 192 (embedded-statement -> selection-statement .)
    LONG            reduce using rule 192 (embedded-statement -> selection-statement .)
    ULONG           reduce using rule 192 (embedded-statement -> selection-statement .)
    CHAR            reduce using rule 192 (embedded-statement -> selection-statement .)
    FLOAT           reduce using rule 192 (embedded-statement -> selection-statement .)
    DOUBLE          reduce using rule 192 (embedded-statement -> selection-statement .)
    ICONST          reduce using rule 192 (embedded-statement -> selection-statement .)
    UICONST         reduce using rule 192 (embedded-statement -> selection-statement .)
    LICONST         reduce using rule 192 (embedded-statement -> selection-statement .)
    ULICONST        reduce using rule 192 (embedded-statement -> selection-statement .)
    FCONST          reduce using rule 192 (embedded-statement -> selection-statement .)
    DCONST          reduce using rule 192 (embedded-statement -> selection-statement .)
    MCONST          reduce using rule 192 (embedded-statement -> selection-statement .)
    CCONST          reduce using rule 192 (embedded-statement -> selection-statement .)
    SCONST          reduce using rule 192 (embedded-statement -> selection-statement .)
    VSCONST         reduce using rule 192 (embedded-statement -> selection-statement .)
    TRUE            reduce using rule 192 (embedded-statement -> selection-statement .)
    FALSE           reduce using rule 192 (embedded-statement -> selection-statement .)
    OPEN_PAREN      reduce using rule 192 (embedded-statement -> selection-statement .)
    THIS            reduce using rule 192 (embedded-statement -> selection-statement .)
    BASE            reduce using rule 192 (embedded-statement -> selection-statement .)
    CASE            reduce using rule 192 (embedded-statement -> selection-statement .)
    DEFAULT         reduce using rule 192 (embedded-statement -> selection-statement .)
    BLOCK_END       reduce using rule 192 (embedded-statement -> selection-statement .)
    ELSE            reduce using rule 192 (embedded-statement -> selection-statement .)


state 117

    (132) pre-decrement-expression -> DECRE . unary-expression
    (81) unary-expression -> . primary-expression
    (82) unary-expression -> . PLUS unary-expression
    (83) unary-expression -> . MINUS unary-expression
    (84) unary-expression -> . BITNOT unary-expression
    (85) unary-expression -> . BITCOMP unary-expression
    (86) unary-expression -> . TIMES unary-expression
    (87) unary-expression -> . pre-increment-expression
    (88) unary-expression -> . pre-decrement-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 190
    MINUS           shift and go to state 187
    BITNOT          shift and go to state 197
    BITCOMP         shift and go to state 186
    TIMES           shift and go to state 184
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117
    NEW             shift and go to state 185
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88

    this-access                    shift and go to state 77
    post-increment-expression      shift and go to state 182
    member-access                  shift and go to state 79
    primary-no-array-creation-expression shift and go to state 82
    unary-expression               shift and go to state 216
    element-access                 shift and go to state 101
    literal                        shift and go to state 128
    base-access                    shift and go to state 126
    post-decrement-expression      shift and go to state 193
    array-creation-expression      shift and go to state 144
    object-creation-expression     shift and go to state 198
    pre-increment-expression       shift and go to state 202
    pre-decrement-expression       shift and go to state 205
    primary-expression             shift and go to state 217
    invocation-expression          shift and go to state 210
    parenthesized-expression       shift and go to state 96

state 118

    (224) while-statement -> WHILE . OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement

    OPEN_PAREN      shift and go to state 218


state 119

    (190) embedded-statement -> empty-statement .

    IDENTIFIER      reduce using rule 190 (embedded-statement -> empty-statement .)
    CONST           reduce using rule 190 (embedded-statement -> empty-statement .)
    BLOCK_BEGIN     reduce using rule 190 (embedded-statement -> empty-statement .)
    DELIM           reduce using rule 190 (embedded-statement -> empty-statement .)
    IF              reduce using rule 190 (embedded-statement -> empty-statement .)
    SWITCH          reduce using rule 190 (embedded-statement -> empty-statement .)
    WHILE           reduce using rule 190 (embedded-statement -> empty-statement .)
    FOR             reduce using rule 190 (embedded-statement -> empty-statement .)
    FOREACH         reduce using rule 190 (embedded-statement -> empty-statement .)
    DO              reduce using rule 190 (embedded-statement -> empty-statement .)
    BREAK           reduce using rule 190 (embedded-statement -> empty-statement .)
    CONTINUE        reduce using rule 190 (embedded-statement -> empty-statement .)
    GOTO            reduce using rule 190 (embedded-statement -> empty-statement .)
    RETURN          reduce using rule 190 (embedded-statement -> empty-statement .)
    BOOL            reduce using rule 190 (embedded-statement -> empty-statement .)
    NEW             reduce using rule 190 (embedded-statement -> empty-statement .)
    INCRE           reduce using rule 190 (embedded-statement -> empty-statement .)
    DECRE           reduce using rule 190 (embedded-statement -> empty-statement .)
    INT             reduce using rule 190 (embedded-statement -> empty-statement .)
    UINT            reduce using rule 190 (embedded-statement -> empty-statement .)
    LONG            reduce using rule 190 (embedded-statement -> empty-statement .)
    ULONG           reduce using rule 190 (embedded-statement -> empty-statement .)
    CHAR            reduce using rule 190 (embedded-statement -> empty-statement .)
    FLOAT           reduce using rule 190 (embedded-statement -> empty-statement .)
    DOUBLE          reduce using rule 190 (embedded-statement -> empty-statement .)
    ICONST          reduce using rule 190 (embedded-statement -> empty-statement .)
    UICONST         reduce using rule 190 (embedded-statement -> empty-statement .)
    LICONST         reduce using rule 190 (embedded-statement -> empty-statement .)
    ULICONST        reduce using rule 190 (embedded-statement -> empty-statement .)
    FCONST          reduce using rule 190 (embedded-statement -> empty-statement .)
    DCONST          reduce using rule 190 (embedded-statement -> empty-statement .)
    MCONST          reduce using rule 190 (embedded-statement -> empty-statement .)
    CCONST          reduce using rule 190 (embedded-statement -> empty-statement .)
    SCONST          reduce using rule 190 (embedded-statement -> empty-statement .)
    VSCONST         reduce using rule 190 (embedded-statement -> empty-statement .)
    TRUE            reduce using rule 190 (embedded-statement -> empty-statement .)
    FALSE           reduce using rule 190 (embedded-statement -> empty-statement .)
    OPEN_PAREN      reduce using rule 190 (embedded-statement -> empty-statement .)
    THIS            reduce using rule 190 (embedded-statement -> empty-statement .)
    BASE            reduce using rule 190 (embedded-statement -> empty-statement .)
    CASE            reduce using rule 190 (embedded-statement -> empty-statement .)
    DEFAULT         reduce using rule 190 (embedded-statement -> empty-statement .)
    BLOCK_END       reduce using rule 190 (embedded-statement -> empty-statement .)
    ELSE            reduce using rule 190 (embedded-statement -> empty-statement .)


state 120

    (130) object-creation-expression -> NEW . type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) array-creation-expression -> NEW . simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (29) simple-type -> . numeric-type
    (30) simple-type -> . BOOL
    (12) class-type -> . IDENTIFIER
    (40) array-type -> . simple-type rank-specifier
    (31) numeric-type -> . integral-type
    (32) numeric-type -> . floating-point-type
    (33) integral-type -> . INT
    (34) integral-type -> . UINT
    (35) integral-type -> . LONG
    (36) integral-type -> . ULONG
    (37) integral-type -> . CHAR
    (38) floating-point-type -> . FLOAT
    (39) floating-point-type -> . DOUBLE

    BOOL            shift and go to state 48
    IDENTIFIER      shift and go to state 15
    INT             shift and go to state 25
    UINT            shift and go to state 42
    LONG            shift and go to state 44
    ULONG           shift and go to state 27
    CHAR            shift and go to state 22
    FLOAT           shift and go to state 47
    DOUBLE          shift and go to state 52

    array-type                     shift and go to state 36
    floating-point-type            shift and go to state 39
    integral-type                  shift and go to state 26
    type                           shift and go to state 220
    numeric-type                   shift and go to state 28
    simple-type                    shift and go to state 219
    class-type                     shift and go to state 49

state 121

    (240) jump-statement -> break-statement .

    IDENTIFIER      reduce using rule 240 (jump-statement -> break-statement .)
    CONST           reduce using rule 240 (jump-statement -> break-statement .)
    BLOCK_BEGIN     reduce using rule 240 (jump-statement -> break-statement .)
    DELIM           reduce using rule 240 (jump-statement -> break-statement .)
    IF              reduce using rule 240 (jump-statement -> break-statement .)
    SWITCH          reduce using rule 240 (jump-statement -> break-statement .)
    WHILE           reduce using rule 240 (jump-statement -> break-statement .)
    FOR             reduce using rule 240 (jump-statement -> break-statement .)
    FOREACH         reduce using rule 240 (jump-statement -> break-statement .)
    DO              reduce using rule 240 (jump-statement -> break-statement .)
    BREAK           reduce using rule 240 (jump-statement -> break-statement .)
    CONTINUE        reduce using rule 240 (jump-statement -> break-statement .)
    GOTO            reduce using rule 240 (jump-statement -> break-statement .)
    RETURN          reduce using rule 240 (jump-statement -> break-statement .)
    BOOL            reduce using rule 240 (jump-statement -> break-statement .)
    NEW             reduce using rule 240 (jump-statement -> break-statement .)
    INCRE           reduce using rule 240 (jump-statement -> break-statement .)
    DECRE           reduce using rule 240 (jump-statement -> break-statement .)
    INT             reduce using rule 240 (jump-statement -> break-statement .)
    UINT            reduce using rule 240 (jump-statement -> break-statement .)
    LONG            reduce using rule 240 (jump-statement -> break-statement .)
    ULONG           reduce using rule 240 (jump-statement -> break-statement .)
    CHAR            reduce using rule 240 (jump-statement -> break-statement .)
    FLOAT           reduce using rule 240 (jump-statement -> break-statement .)
    DOUBLE          reduce using rule 240 (jump-statement -> break-statement .)
    ICONST          reduce using rule 240 (jump-statement -> break-statement .)
    UICONST         reduce using rule 240 (jump-statement -> break-statement .)
    LICONST         reduce using rule 240 (jump-statement -> break-statement .)
    ULICONST        reduce using rule 240 (jump-statement -> break-statement .)
    FCONST          reduce using rule 240 (jump-statement -> break-statement .)
    DCONST          reduce using rule 240 (jump-statement -> break-statement .)
    MCONST          reduce using rule 240 (jump-statement -> break-statement .)
    CCONST          reduce using rule 240 (jump-statement -> break-statement .)
    SCONST          reduce using rule 240 (jump-statement -> break-statement .)
    VSCONST         reduce using rule 240 (jump-statement -> break-statement .)
    TRUE            reduce using rule 240 (jump-statement -> break-statement .)
    FALSE           reduce using rule 240 (jump-statement -> break-statement .)
    OPEN_PAREN      reduce using rule 240 (jump-statement -> break-statement .)
    THIS            reduce using rule 240 (jump-statement -> break-statement .)
    BASE            reduce using rule 240 (jump-statement -> break-statement .)
    BLOCK_END       reduce using rule 240 (jump-statement -> break-statement .)
    CASE            reduce using rule 240 (jump-statement -> break-statement .)
    DEFAULT         reduce using rule 240 (jump-statement -> break-statement .)
    ELSE            reduce using rule 240 (jump-statement -> break-statement .)


state 122

    (131) pre-increment-expression -> INCRE . unary-expression
    (81) unary-expression -> . primary-expression
    (82) unary-expression -> . PLUS unary-expression
    (83) unary-expression -> . MINUS unary-expression
    (84) unary-expression -> . BITNOT unary-expression
    (85) unary-expression -> . BITCOMP unary-expression
    (86) unary-expression -> . TIMES unary-expression
    (87) unary-expression -> . pre-increment-expression
    (88) unary-expression -> . pre-decrement-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 190
    MINUS           shift and go to state 187
    BITNOT          shift and go to state 197
    BITCOMP         shift and go to state 186
    TIMES           shift and go to state 184
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117
    NEW             shift and go to state 185
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88

    this-access                    shift and go to state 77
    post-increment-expression      shift and go to state 182
    member-access                  shift and go to state 79
    primary-no-array-creation-expression shift and go to state 82
    unary-expression               shift and go to state 221
    element-access                 shift and go to state 101
    literal                        shift and go to state 128
    base-access                    shift and go to state 126
    post-decrement-expression      shift and go to state 193
    array-creation-expression      shift and go to state 144
    object-creation-expression     shift and go to state 198
    pre-increment-expression       shift and go to state 202
    pre-decrement-expression       shift and go to state 205
    primary-expression             shift and go to state 217
    invocation-expression          shift and go to state 210
    parenthesized-expression       shift and go to state 96

state 123

    (265) literal -> SCONST .

    OPEN_BRACKET    reduce using rule 265 (literal -> SCONST .)
    DOT             reduce using rule 265 (literal -> SCONST .)
    OPEN_PAREN      reduce using rule 265 (literal -> SCONST .)
    INCRE           reduce using rule 265 (literal -> SCONST .)
    DECRE           reduce using rule 265 (literal -> SCONST .)
    ASSIGN          reduce using rule 265 (literal -> SCONST .)
    PLUSEQUAL       reduce using rule 265 (literal -> SCONST .)
    MINUSEQUAL      reduce using rule 265 (literal -> SCONST .)
    TIMESEQUAL      reduce using rule 265 (literal -> SCONST .)
    DIVEQUAL        reduce using rule 265 (literal -> SCONST .)
    MODEQUAL        reduce using rule 265 (literal -> SCONST .)
    BITANDEQUAL     reduce using rule 265 (literal -> SCONST .)
    BITOREQUAL      reduce using rule 265 (literal -> SCONST .)
    BITXOREQUAL     reduce using rule 265 (literal -> SCONST .)
    LSHIFTEQUAL     reduce using rule 265 (literal -> SCONST .)
    RSHIFTEQUAL     reduce using rule 265 (literal -> SCONST .)
    TIMES           reduce using rule 265 (literal -> SCONST .)
    DIV             reduce using rule 265 (literal -> SCONST .)
    MOD             reduce using rule 265 (literal -> SCONST .)
    PLUS            reduce using rule 265 (literal -> SCONST .)
    MINUS           reduce using rule 265 (literal -> SCONST .)
    LSHIFT          reduce using rule 265 (literal -> SCONST .)
    RSHIFT          reduce using rule 265 (literal -> SCONST .)
    LT              reduce using rule 265 (literal -> SCONST .)
    GT              reduce using rule 265 (literal -> SCONST .)
    LE              reduce using rule 265 (literal -> SCONST .)
    GE              reduce using rule 265 (literal -> SCONST .)
    EQ              reduce using rule 265 (literal -> SCONST .)
    NE              reduce using rule 265 (literal -> SCONST .)
    BITAND          reduce using rule 265 (literal -> SCONST .)
    BITXOR          reduce using rule 265 (literal -> SCONST .)
    BITOR           reduce using rule 265 (literal -> SCONST .)
    LOGAND          reduce using rule 265 (literal -> SCONST .)
    CONDOP          reduce using rule 265 (literal -> SCONST .)
    LOGOR           reduce using rule 265 (literal -> SCONST .)
    CLOSE_PAREN     reduce using rule 265 (literal -> SCONST .)
    COMMA           reduce using rule 265 (literal -> SCONST .)
    BLOCK_END       reduce using rule 265 (literal -> SCONST .)
    DELIM           reduce using rule 265 (literal -> SCONST .)
    CLOSE_BRACKET   reduce using rule 265 (literal -> SCONST .)
    COLON           reduce using rule 265 (literal -> SCONST .)


state 124

    (209) switch-statement -> SWITCH . OPEN_PAREN expression CLOSE_PAREN switch-block

    OPEN_PAREN      shift and go to state 222


state 125

    (114) parenthesized-expression -> OPEN_PAREN . expression CLOSE_PAREN
    (49) expression -> . conditional-expression
    (50) expression -> . assignment
    (51) conditional-expression -> . conditional-or-expression
    (52) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (133) assignment -> . primary-expression assignment-operator expression
    (53) conditional-or-expression -> . conditional-and-expression
    (54) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (55) conditional-and-expression -> . inclusive-or-expression
    (56) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (57) inclusive-or-expression -> . exclusive-or-expression
    (58) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (59) exclusive-or-expression -> . and-expression
    (60) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (61) and-expression -> . equality-expression
    (62) and-expression -> . and-expression BITAND equality-expression
    (63) equality-expression -> . relational-expression
    (64) equality-expression -> . equality-expression EQ relational-expression
    (65) equality-expression -> . equality-expression NE relational-expression
    (66) relational-expression -> . shift-expression
    (67) relational-expression -> . relational-expression LT shift-expression
    (68) relational-expression -> . relational-expression GT shift-expression
    (69) relational-expression -> . relational-expression LE shift-expression
    (70) relational-expression -> . relational-expression GE shift-expression
    (71) shift-expression -> . additive-expression
    (72) shift-expression -> . shift-expression LSHIFT additive-expression
    (73) shift-expression -> . shift-expression RSHIFT additive-expression
    (74) additive-expression -> . multiplicative-expression
    (75) additive-expression -> . additive-expression PLUS multiplicative-expression
    (76) additive-expression -> . additive-expression MINUS multiplicative-expression
    (77) multiplicative-expression -> . unary-expression
    (78) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (79) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (80) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (81) unary-expression -> . primary-expression
    (82) unary-expression -> . PLUS unary-expression
    (83) unary-expression -> . MINUS unary-expression
    (84) unary-expression -> . BITNOT unary-expression
    (85) unary-expression -> . BITCOMP unary-expression
    (86) unary-expression -> . TIMES unary-expression
    (87) unary-expression -> . pre-increment-expression
    (88) unary-expression -> . pre-decrement-expression
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression

    NEW             shift and go to state 185
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88
    PLUS            shift and go to state 190
    MINUS           shift and go to state 187
    BITNOT          shift and go to state 197
    BITCOMP         shift and go to state 186
    TIMES           shift and go to state 184
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117

    this-access                    shift and go to state 77
    unary-expression               shift and go to state 199
    exclusive-or-expression        shift and go to state 183
    member-access                  shift and go to state 79
    relational-expression          shift and go to state 203
    additive-expression            shift and go to state 208
    primary-no-array-creation-expression shift and go to state 82
    inclusive-or-expression        shift and go to state 188
    equality-expression            shift and go to state 189
    post-increment-expression      shift and go to state 182
    element-access                 shift and go to state 101
    literal                        shift and go to state 128
    base-access                    shift and go to state 126
    conditional-and-expression     shift and go to state 192
    post-decrement-expression      shift and go to state 193
    conditional-expression         shift and go to state 191
    array-creation-expression      shift and go to state 144
    assignment                     shift and go to state 196
    object-creation-expression     shift and go to state 198
    pre-increment-expression       shift and go to state 202
    shift-expression               shift and go to state 204
    and-expression                 shift and go to state 201
    pre-decrement-expression       shift and go to state 205
    multiplicative-expression      shift and go to state 207
    conditional-or-expression      shift and go to state 211
    primary-expression             shift and go to state 209
    invocation-expression          shift and go to state 210
    expression                     shift and go to state 223
    parenthesized-expression       shift and go to state 96

state 126

    (110) primary-no-array-creation-expression -> base-access .

    OPEN_BRACKET    reduce using rule 110 (primary-no-array-creation-expression -> base-access .)
    DOT             reduce using rule 110 (primary-no-array-creation-expression -> base-access .)
    OPEN_PAREN      reduce using rule 110 (primary-no-array-creation-expression -> base-access .)
    INCRE           reduce using rule 110 (primary-no-array-creation-expression -> base-access .)
    DECRE           reduce using rule 110 (primary-no-array-creation-expression -> base-access .)
    TIMES           reduce using rule 110 (primary-no-array-creation-expression -> base-access .)
    DIV             reduce using rule 110 (primary-no-array-creation-expression -> base-access .)
    MOD             reduce using rule 110 (primary-no-array-creation-expression -> base-access .)
    PLUS            reduce using rule 110 (primary-no-array-creation-expression -> base-access .)
    MINUS           reduce using rule 110 (primary-no-array-creation-expression -> base-access .)
    LSHIFT          reduce using rule 110 (primary-no-array-creation-expression -> base-access .)
    RSHIFT          reduce using rule 110 (primary-no-array-creation-expression -> base-access .)
    LT              reduce using rule 110 (primary-no-array-creation-expression -> base-access .)
    GT              reduce using rule 110 (primary-no-array-creation-expression -> base-access .)
    LE              reduce using rule 110 (primary-no-array-creation-expression -> base-access .)
    GE              reduce using rule 110 (primary-no-array-creation-expression -> base-access .)
    EQ              reduce using rule 110 (primary-no-array-creation-expression -> base-access .)
    NE              reduce using rule 110 (primary-no-array-creation-expression -> base-access .)
    BITAND          reduce using rule 110 (primary-no-array-creation-expression -> base-access .)
    BITXOR          reduce using rule 110 (primary-no-array-creation-expression -> base-access .)
    BITOR           reduce using rule 110 (primary-no-array-creation-expression -> base-access .)
    LOGAND          reduce using rule 110 (primary-no-array-creation-expression -> base-access .)
    CONDOP          reduce using rule 110 (primary-no-array-creation-expression -> base-access .)
    LOGOR           reduce using rule 110 (primary-no-array-creation-expression -> base-access .)
    DELIM           reduce using rule 110 (primary-no-array-creation-expression -> base-access .)
    CLOSE_PAREN     reduce using rule 110 (primary-no-array-creation-expression -> base-access .)
    COMMA           reduce using rule 110 (primary-no-array-creation-expression -> base-access .)
    CLOSE_BRACKET   reduce using rule 110 (primary-no-array-creation-expression -> base-access .)
    BLOCK_END       reduce using rule 110 (primary-no-array-creation-expression -> base-access .)
    COLON           reduce using rule 110 (primary-no-array-creation-expression -> base-access .)
    ASSIGN          reduce using rule 110 (primary-no-array-creation-expression -> base-access .)
    PLUSEQUAL       reduce using rule 110 (primary-no-array-creation-expression -> base-access .)
    MINUSEQUAL      reduce using rule 110 (primary-no-array-creation-expression -> base-access .)
    TIMESEQUAL      reduce using rule 110 (primary-no-array-creation-expression -> base-access .)
    DIVEQUAL        reduce using rule 110 (primary-no-array-creation-expression -> base-access .)
    MODEQUAL        reduce using rule 110 (primary-no-array-creation-expression -> base-access .)
    BITANDEQUAL     reduce using rule 110 (primary-no-array-creation-expression -> base-access .)
    BITOREQUAL      reduce using rule 110 (primary-no-array-creation-expression -> base-access .)
    BITXOREQUAL     reduce using rule 110 (primary-no-array-creation-expression -> base-access .)
    LSHIFTEQUAL     reduce using rule 110 (primary-no-array-creation-expression -> base-access .)
    RSHIFTEQUAL     reduce using rule 110 (primary-no-array-creation-expression -> base-access .)


state 127

    (173) statement-list -> statement .

    IDENTIFIER      reduce using rule 173 (statement-list -> statement .)
    CONST           reduce using rule 173 (statement-list -> statement .)
    BLOCK_BEGIN     reduce using rule 173 (statement-list -> statement .)
    DELIM           reduce using rule 173 (statement-list -> statement .)
    IF              reduce using rule 173 (statement-list -> statement .)
    SWITCH          reduce using rule 173 (statement-list -> statement .)
    WHILE           reduce using rule 173 (statement-list -> statement .)
    FOR             reduce using rule 173 (statement-list -> statement .)
    FOREACH         reduce using rule 173 (statement-list -> statement .)
    DO              reduce using rule 173 (statement-list -> statement .)
    BREAK           reduce using rule 173 (statement-list -> statement .)
    CONTINUE        reduce using rule 173 (statement-list -> statement .)
    GOTO            reduce using rule 173 (statement-list -> statement .)
    RETURN          reduce using rule 173 (statement-list -> statement .)
    BOOL            reduce using rule 173 (statement-list -> statement .)
    NEW             reduce using rule 173 (statement-list -> statement .)
    INCRE           reduce using rule 173 (statement-list -> statement .)
    DECRE           reduce using rule 173 (statement-list -> statement .)
    INT             reduce using rule 173 (statement-list -> statement .)
    UINT            reduce using rule 173 (statement-list -> statement .)
    LONG            reduce using rule 173 (statement-list -> statement .)
    ULONG           reduce using rule 173 (statement-list -> statement .)
    CHAR            reduce using rule 173 (statement-list -> statement .)
    FLOAT           reduce using rule 173 (statement-list -> statement .)
    DOUBLE          reduce using rule 173 (statement-list -> statement .)
    ICONST          reduce using rule 173 (statement-list -> statement .)
    UICONST         reduce using rule 173 (statement-list -> statement .)
    LICONST         reduce using rule 173 (statement-list -> statement .)
    ULICONST        reduce using rule 173 (statement-list -> statement .)
    FCONST          reduce using rule 173 (statement-list -> statement .)
    DCONST          reduce using rule 173 (statement-list -> statement .)
    MCONST          reduce using rule 173 (statement-list -> statement .)
    CCONST          reduce using rule 173 (statement-list -> statement .)
    SCONST          reduce using rule 173 (statement-list -> statement .)
    VSCONST         reduce using rule 173 (statement-list -> statement .)
    TRUE            reduce using rule 173 (statement-list -> statement .)
    FALSE           reduce using rule 173 (statement-list -> statement .)
    OPEN_PAREN      reduce using rule 173 (statement-list -> statement .)
    THIS            reduce using rule 173 (statement-list -> statement .)
    BASE            reduce using rule 173 (statement-list -> statement .)
    BLOCK_END       reduce using rule 173 (statement-list -> statement .)
    CASE            reduce using rule 173 (statement-list -> statement .)
    DEFAULT         reduce using rule 173 (statement-list -> statement .)


state 128

    (103) primary-no-array-creation-expression -> literal .

    OPEN_BRACKET    reduce using rule 103 (primary-no-array-creation-expression -> literal .)
    DOT             reduce using rule 103 (primary-no-array-creation-expression -> literal .)
    OPEN_PAREN      reduce using rule 103 (primary-no-array-creation-expression -> literal .)
    INCRE           reduce using rule 103 (primary-no-array-creation-expression -> literal .)
    DECRE           reduce using rule 103 (primary-no-array-creation-expression -> literal .)
    TIMES           reduce using rule 103 (primary-no-array-creation-expression -> literal .)
    DIV             reduce using rule 103 (primary-no-array-creation-expression -> literal .)
    MOD             reduce using rule 103 (primary-no-array-creation-expression -> literal .)
    PLUS            reduce using rule 103 (primary-no-array-creation-expression -> literal .)
    MINUS           reduce using rule 103 (primary-no-array-creation-expression -> literal .)
    LSHIFT          reduce using rule 103 (primary-no-array-creation-expression -> literal .)
    RSHIFT          reduce using rule 103 (primary-no-array-creation-expression -> literal .)
    LT              reduce using rule 103 (primary-no-array-creation-expression -> literal .)
    GT              reduce using rule 103 (primary-no-array-creation-expression -> literal .)
    LE              reduce using rule 103 (primary-no-array-creation-expression -> literal .)
    GE              reduce using rule 103 (primary-no-array-creation-expression -> literal .)
    EQ              reduce using rule 103 (primary-no-array-creation-expression -> literal .)
    NE              reduce using rule 103 (primary-no-array-creation-expression -> literal .)
    BITAND          reduce using rule 103 (primary-no-array-creation-expression -> literal .)
    BITXOR          reduce using rule 103 (primary-no-array-creation-expression -> literal .)
    BITOR           reduce using rule 103 (primary-no-array-creation-expression -> literal .)
    LOGAND          reduce using rule 103 (primary-no-array-creation-expression -> literal .)
    CONDOP          reduce using rule 103 (primary-no-array-creation-expression -> literal .)
    LOGOR           reduce using rule 103 (primary-no-array-creation-expression -> literal .)
    DELIM           reduce using rule 103 (primary-no-array-creation-expression -> literal .)
    CLOSE_PAREN     reduce using rule 103 (primary-no-array-creation-expression -> literal .)
    COMMA           reduce using rule 103 (primary-no-array-creation-expression -> literal .)
    CLOSE_BRACKET   reduce using rule 103 (primary-no-array-creation-expression -> literal .)
    BLOCK_END       reduce using rule 103 (primary-no-array-creation-expression -> literal .)
    COLON           reduce using rule 103 (primary-no-array-creation-expression -> literal .)
    ASSIGN          reduce using rule 103 (primary-no-array-creation-expression -> literal .)
    PLUSEQUAL       reduce using rule 103 (primary-no-array-creation-expression -> literal .)
    MINUSEQUAL      reduce using rule 103 (primary-no-array-creation-expression -> literal .)
    TIMESEQUAL      reduce using rule 103 (primary-no-array-creation-expression -> literal .)
    DIVEQUAL        reduce using rule 103 (primary-no-array-creation-expression -> literal .)
    MODEQUAL        reduce using rule 103 (primary-no-array-creation-expression -> literal .)
    BITANDEQUAL     reduce using rule 103 (primary-no-array-creation-expression -> literal .)
    BITOREQUAL      reduce using rule 103 (primary-no-array-creation-expression -> literal .)
    BITXOREQUAL     reduce using rule 103 (primary-no-array-creation-expression -> literal .)
    LSHIFTEQUAL     reduce using rule 103 (primary-no-array-creation-expression -> literal .)
    RSHIFTEQUAL     reduce using rule 103 (primary-no-array-creation-expression -> literal .)


state 129

    (178) labeled-statement -> IDENTIFIER . COLON statement
    (12) class-type -> IDENTIFIER .
    (104) primary-no-array-creation-expression -> IDENTIFIER .

    COLON           shift and go to state 224
    IDENTIFIER      reduce using rule 12 (class-type -> IDENTIFIER .)
    OPEN_BRACKET    reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    OPEN_PAREN      reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    INCRE           reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    DECRE           reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    DOT             reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    ASSIGN          reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    PLUSEQUAL       reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    MINUSEQUAL      reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    TIMESEQUAL      reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    DIVEQUAL        reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    MODEQUAL        reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    BITANDEQUAL     reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    BITOREQUAL      reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    BITXOREQUAL     reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    LSHIFTEQUAL     reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    RSHIFTEQUAL     reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)


state 130

    (181) local-variable-declaration -> type . local-variable-declarators
    (182) local-variable-declarators -> . local-variable-declarator
    (183) local-variable-declarators -> . local-variable-declarators COMMA local-variable-declarator
    (184) local-variable-declarator -> . IDENTIFIER
    (185) local-variable-declarator -> . IDENTIFIER ASSIGN local-variable-initializer

    IDENTIFIER      shift and go to state 227

    local-variable-declarators     shift and go to state 225
    local-variable-declarator      shift and go to state 226

state 131

    (172) statement-list-opt -> empty .

    BLOCK_END       reduce using rule 172 (statement-list-opt -> empty .)


state 132

    (201) statement-expression -> post-decrement-expression .
    (112) primary-no-array-creation-expression -> post-decrement-expression .

    DELIM           reduce using rule 201 (statement-expression -> post-decrement-expression .)
    COMMA           reduce using rule 201 (statement-expression -> post-decrement-expression .)
    CLOSE_PAREN     reduce using rule 201 (statement-expression -> post-decrement-expression .)
    OPEN_BRACKET    reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)
    OPEN_PAREN      reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)
    INCRE           reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)
    DECRE           reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)
    DOT             reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)
    ASSIGN          reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)
    PLUSEQUAL       reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)
    MINUSEQUAL      reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)
    TIMESEQUAL      reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)
    DIVEQUAL        reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)
    MODEQUAL        reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)
    BITANDEQUAL     reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)
    BITOREQUAL      reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)
    BITXOREQUAL     reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)
    LSHIFTEQUAL     reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)
    RSHIFTEQUAL     reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)


state 133

    (176) statement -> declaration-statement .

    IDENTIFIER      reduce using rule 176 (statement -> declaration-statement .)
    CONST           reduce using rule 176 (statement -> declaration-statement .)
    BLOCK_BEGIN     reduce using rule 176 (statement -> declaration-statement .)
    DELIM           reduce using rule 176 (statement -> declaration-statement .)
    IF              reduce using rule 176 (statement -> declaration-statement .)
    SWITCH          reduce using rule 176 (statement -> declaration-statement .)
    WHILE           reduce using rule 176 (statement -> declaration-statement .)
    FOR             reduce using rule 176 (statement -> declaration-statement .)
    FOREACH         reduce using rule 176 (statement -> declaration-statement .)
    DO              reduce using rule 176 (statement -> declaration-statement .)
    BREAK           reduce using rule 176 (statement -> declaration-statement .)
    CONTINUE        reduce using rule 176 (statement -> declaration-statement .)
    GOTO            reduce using rule 176 (statement -> declaration-statement .)
    RETURN          reduce using rule 176 (statement -> declaration-statement .)
    BOOL            reduce using rule 176 (statement -> declaration-statement .)
    NEW             reduce using rule 176 (statement -> declaration-statement .)
    INCRE           reduce using rule 176 (statement -> declaration-statement .)
    DECRE           reduce using rule 176 (statement -> declaration-statement .)
    INT             reduce using rule 176 (statement -> declaration-statement .)
    UINT            reduce using rule 176 (statement -> declaration-statement .)
    LONG            reduce using rule 176 (statement -> declaration-statement .)
    ULONG           reduce using rule 176 (statement -> declaration-statement .)
    CHAR            reduce using rule 176 (statement -> declaration-statement .)
    FLOAT           reduce using rule 176 (statement -> declaration-statement .)
    DOUBLE          reduce using rule 176 (statement -> declaration-statement .)
    ICONST          reduce using rule 176 (statement -> declaration-statement .)
    UICONST         reduce using rule 176 (statement -> declaration-statement .)
    LICONST         reduce using rule 176 (statement -> declaration-statement .)
    ULICONST        reduce using rule 176 (statement -> declaration-statement .)
    FCONST          reduce using rule 176 (statement -> declaration-statement .)
    DCONST          reduce using rule 176 (statement -> declaration-statement .)
    MCONST          reduce using rule 176 (statement -> declaration-statement .)
    CCONST          reduce using rule 176 (statement -> declaration-statement .)
    SCONST          reduce using rule 176 (statement -> declaration-statement .)
    VSCONST         reduce using rule 176 (statement -> declaration-statement .)
    TRUE            reduce using rule 176 (statement -> declaration-statement .)
    FALSE           reduce using rule 176 (statement -> declaration-statement .)
    OPEN_PAREN      reduce using rule 176 (statement -> declaration-statement .)
    THIS            reduce using rule 176 (statement -> declaration-statement .)
    BASE            reduce using rule 176 (statement -> declaration-statement .)
    BLOCK_END       reduce using rule 176 (statement -> declaration-statement .)
    CASE            reduce using rule 176 (statement -> declaration-statement .)
    DEFAULT         reduce using rule 176 (statement -> declaration-statement .)


state 134

    (268) literal -> FALSE .

    OPEN_BRACKET    reduce using rule 268 (literal -> FALSE .)
    DOT             reduce using rule 268 (literal -> FALSE .)
    OPEN_PAREN      reduce using rule 268 (literal -> FALSE .)
    INCRE           reduce using rule 268 (literal -> FALSE .)
    DECRE           reduce using rule 268 (literal -> FALSE .)
    ASSIGN          reduce using rule 268 (literal -> FALSE .)
    PLUSEQUAL       reduce using rule 268 (literal -> FALSE .)
    MINUSEQUAL      reduce using rule 268 (literal -> FALSE .)
    TIMESEQUAL      reduce using rule 268 (literal -> FALSE .)
    DIVEQUAL        reduce using rule 268 (literal -> FALSE .)
    MODEQUAL        reduce using rule 268 (literal -> FALSE .)
    BITANDEQUAL     reduce using rule 268 (literal -> FALSE .)
    BITOREQUAL      reduce using rule 268 (literal -> FALSE .)
    BITXOREQUAL     reduce using rule 268 (literal -> FALSE .)
    LSHIFTEQUAL     reduce using rule 268 (literal -> FALSE .)
    RSHIFTEQUAL     reduce using rule 268 (literal -> FALSE .)
    TIMES           reduce using rule 268 (literal -> FALSE .)
    DIV             reduce using rule 268 (literal -> FALSE .)
    MOD             reduce using rule 268 (literal -> FALSE .)
    PLUS            reduce using rule 268 (literal -> FALSE .)
    MINUS           reduce using rule 268 (literal -> FALSE .)
    LSHIFT          reduce using rule 268 (literal -> FALSE .)
    RSHIFT          reduce using rule 268 (literal -> FALSE .)
    LT              reduce using rule 268 (literal -> FALSE .)
    GT              reduce using rule 268 (literal -> FALSE .)
    LE              reduce using rule 268 (literal -> FALSE .)
    GE              reduce using rule 268 (literal -> FALSE .)
    EQ              reduce using rule 268 (literal -> FALSE .)
    NE              reduce using rule 268 (literal -> FALSE .)
    BITAND          reduce using rule 268 (literal -> FALSE .)
    BITXOR          reduce using rule 268 (literal -> FALSE .)
    BITOR           reduce using rule 268 (literal -> FALSE .)
    LOGAND          reduce using rule 268 (literal -> FALSE .)
    CONDOP          reduce using rule 268 (literal -> FALSE .)
    LOGOR           reduce using rule 268 (literal -> FALSE .)
    CLOSE_PAREN     reduce using rule 268 (literal -> FALSE .)
    COMMA           reduce using rule 268 (literal -> FALSE .)
    BLOCK_END       reduce using rule 268 (literal -> FALSE .)
    DELIM           reduce using rule 268 (literal -> FALSE .)
    CLOSE_BRACKET   reduce using rule 268 (literal -> FALSE .)
    COLON           reduce using rule 268 (literal -> FALSE .)


state 135

    (193) embedded-statement -> iteration-statement .

    IDENTIFIER      reduce using rule 193 (embedded-statement -> iteration-statement .)
    CONST           reduce using rule 193 (embedded-statement -> iteration-statement .)
    BLOCK_BEGIN     reduce using rule 193 (embedded-statement -> iteration-statement .)
    DELIM           reduce using rule 193 (embedded-statement -> iteration-statement .)
    IF              reduce using rule 193 (embedded-statement -> iteration-statement .)
    SWITCH          reduce using rule 193 (embedded-statement -> iteration-statement .)
    WHILE           reduce using rule 193 (embedded-statement -> iteration-statement .)
    FOR             reduce using rule 193 (embedded-statement -> iteration-statement .)
    FOREACH         reduce using rule 193 (embedded-statement -> iteration-statement .)
    DO              reduce using rule 193 (embedded-statement -> iteration-statement .)
    BREAK           reduce using rule 193 (embedded-statement -> iteration-statement .)
    CONTINUE        reduce using rule 193 (embedded-statement -> iteration-statement .)
    GOTO            reduce using rule 193 (embedded-statement -> iteration-statement .)
    RETURN          reduce using rule 193 (embedded-statement -> iteration-statement .)
    BOOL            reduce using rule 193 (embedded-statement -> iteration-statement .)
    NEW             reduce using rule 193 (embedded-statement -> iteration-statement .)
    INCRE           reduce using rule 193 (embedded-statement -> iteration-statement .)
    DECRE           reduce using rule 193 (embedded-statement -> iteration-statement .)
    INT             reduce using rule 193 (embedded-statement -> iteration-statement .)
    UINT            reduce using rule 193 (embedded-statement -> iteration-statement .)
    LONG            reduce using rule 193 (embedded-statement -> iteration-statement .)
    ULONG           reduce using rule 193 (embedded-statement -> iteration-statement .)
    CHAR            reduce using rule 193 (embedded-statement -> iteration-statement .)
    FLOAT           reduce using rule 193 (embedded-statement -> iteration-statement .)
    DOUBLE          reduce using rule 193 (embedded-statement -> iteration-statement .)
    ICONST          reduce using rule 193 (embedded-statement -> iteration-statement .)
    UICONST         reduce using rule 193 (embedded-statement -> iteration-statement .)
    LICONST         reduce using rule 193 (embedded-statement -> iteration-statement .)
    ULICONST        reduce using rule 193 (embedded-statement -> iteration-statement .)
    FCONST          reduce using rule 193 (embedded-statement -> iteration-statement .)
    DCONST          reduce using rule 193 (embedded-statement -> iteration-statement .)
    MCONST          reduce using rule 193 (embedded-statement -> iteration-statement .)
    CCONST          reduce using rule 193 (embedded-statement -> iteration-statement .)
    SCONST          reduce using rule 193 (embedded-statement -> iteration-statement .)
    VSCONST         reduce using rule 193 (embedded-statement -> iteration-statement .)
    TRUE            reduce using rule 193 (embedded-statement -> iteration-statement .)
    FALSE           reduce using rule 193 (embedded-statement -> iteration-statement .)
    OPEN_PAREN      reduce using rule 193 (embedded-statement -> iteration-statement .)
    THIS            reduce using rule 193 (embedded-statement -> iteration-statement .)
    BASE            reduce using rule 193 (embedded-statement -> iteration-statement .)
    CASE            reduce using rule 193 (embedded-statement -> iteration-statement .)
    DEFAULT         reduce using rule 193 (embedded-statement -> iteration-statement .)
    BLOCK_END       reduce using rule 193 (embedded-statement -> iteration-statement .)
    ELSE            reduce using rule 193 (embedded-statement -> iteration-statement .)


state 136

    (244) break-statement -> BREAK . DELIM

    DELIM           shift and go to state 228


state 137

    (171) statement-list-opt -> statement-list .
    (174) statement-list -> statement-list . statement
    (175) statement -> . labeled-statement
    (176) statement -> . declaration-statement
    (177) statement -> . embedded-statement
    (178) labeled-statement -> . IDENTIFIER COLON statement
    (179) declaration-statement -> . local-variable-declaration DELIM
    (180) declaration-statement -> . local-constant-declaration DELIM
    (189) embedded-statement -> . block
    (190) embedded-statement -> . empty-statement
    (191) embedded-statement -> . expression-statement
    (192) embedded-statement -> . selection-statement
    (193) embedded-statement -> . iteration-statement
    (194) embedded-statement -> . jump-statement
    (181) local-variable-declaration -> . type local-variable-declarators
    (188) local-constant-declaration -> . CONST type constant-declarators
    (170) block -> . BLOCK_BEGIN statement-list-opt BLOCK_END
    (195) empty-statement -> . DELIM
    (196) expression-statement -> . statement-expression DELIM
    (204) selection-statement -> . if-statement
    (205) selection-statement -> . switch-statement
    (220) iteration-statement -> . while-statement
    (221) iteration-statement -> . for-statement
    (222) iteration-statement -> . foreach-statement
    (223) iteration-statement -> . do-statement
    (240) jump-statement -> . break-statement
    (241) jump-statement -> . continue-statement
    (242) jump-statement -> . goto-statement
    (243) jump-statement -> . return-statement
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (197) statement-expression -> . invocation-expression
    (198) statement-expression -> . object-creation-expression
    (199) statement-expression -> . assignment
    (200) statement-expression -> . post-increment-expression
    (201) statement-expression -> . post-decrement-expression
    (202) statement-expression -> . pre-increment-expression
    (203) statement-expression -> . pre-decrement-expression
    (206) if-statement -> . IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement
    (207) if-statement -> . IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement
    (209) switch-statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block
    (224) while-statement -> . WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement
    (226) for-statement -> . FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement
    (239) foreach-statement -> . FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement
    (225) do-statement -> . DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM
    (244) break-statement -> . BREAK DELIM
    (245) continue-statement -> . CONTINUE DELIM
    (246) goto-statement -> . GOTO IDENTIFIER DELIM
    (247) return-statement -> . RETURN expression-opt DELIM
    (29) simple-type -> . numeric-type
    (30) simple-type -> . BOOL
    (12) class-type -> . IDENTIFIER
    (40) array-type -> . simple-type rank-specifier
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (133) assignment -> . primary-expression assignment-operator expression
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression
    (31) numeric-type -> . integral-type
    (32) numeric-type -> . floating-point-type
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (33) integral-type -> . INT
    (34) integral-type -> . UINT
    (35) integral-type -> . LONG
    (36) integral-type -> . ULONG
    (37) integral-type -> . CHAR
    (38) floating-point-type -> . FLOAT
    (39) floating-point-type -> . DOUBLE
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET

    BLOCK_END       reduce using rule 171 (statement-list-opt -> statement-list .)
    IDENTIFIER      shift and go to state 129
    CONST           shift and go to state 140
    BLOCK_BEGIN     shift and go to state 55
    DELIM           shift and go to state 115
    IF              shift and go to state 148
    SWITCH          shift and go to state 124
    WHILE           shift and go to state 118
    FOR             shift and go to state 105
    FOREACH         shift and go to state 90
    DO              shift and go to state 139
    BREAK           shift and go to state 136
    CONTINUE        shift and go to state 113
    GOTO            shift and go to state 87
    RETURN          shift and go to state 97
    BOOL            shift and go to state 48
    NEW             shift and go to state 120
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117
    INT             shift and go to state 25
    UINT            shift and go to state 42
    LONG            shift and go to state 44
    ULONG           shift and go to state 27
    CHAR            shift and go to state 22
    FLOAT           shift and go to state 47
    DOUBLE          shift and go to state 52
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88

    this-access                    shift and go to state 77
    return-statement               shift and go to state 98
    member-access                  shift and go to state 79
    selection-statement            shift and go to state 116
    parenthesized-expression       shift and go to state 96
    array-creation-expression      shift and go to state 144
    empty-statement                shift and go to state 119
    expression-statement           shift and go to state 81
    pre-decrement-expression       shift and go to state 108
    primary-no-array-creation-expression shift and go to state 82
    integral-type                  shift and go to state 26
    foreach-statement              shift and go to state 100
    break-statement                shift and go to state 121
    post-increment-expression      shift and go to state 83
    element-access                 shift and go to state 101
    statement-expression           shift and go to state 84
    local-constant-declaration     shift and go to state 102
    literal                        shift and go to state 128
    statement                      shift and go to state 229
    assignment                     shift and go to state 145
    for-statement                  shift and go to state 86
    type                           shift and go to state 130
    do-statement                   shift and go to state 104
    array-type                     shift and go to state 36
    floating-point-type            shift and go to state 39
    continue-statement             shift and go to state 106
    primary-expression             shift and go to state 149
    invocation-expression          shift and go to state 95
    labeled-statement              shift and go to state 89
    declaration-statement          shift and go to state 133
    object-creation-expression     shift and go to state 146
    post-decrement-expression      shift and go to state 132
    switch-statement               shift and go to state 91
    pre-increment-expression       shift and go to state 147
    numeric-type                   shift and go to state 28
    embedded-statement             shift and go to state 92
    base-access                    shift and go to state 126
    jump-statement                 shift and go to state 93
    iteration-statement            shift and go to state 135
    local-variable-declaration     shift and go to state 109
    goto-statement                 shift and go to state 111
    if-statement                   shift and go to state 112
    class-type                     shift and go to state 49
    while-statement                shift and go to state 138
    simple-type                    shift and go to state 23
    block                          shift and go to state 114

state 138

    (220) iteration-statement -> while-statement .

    IDENTIFIER      reduce using rule 220 (iteration-statement -> while-statement .)
    CONST           reduce using rule 220 (iteration-statement -> while-statement .)
    BLOCK_BEGIN     reduce using rule 220 (iteration-statement -> while-statement .)
    DELIM           reduce using rule 220 (iteration-statement -> while-statement .)
    IF              reduce using rule 220 (iteration-statement -> while-statement .)
    SWITCH          reduce using rule 220 (iteration-statement -> while-statement .)
    WHILE           reduce using rule 220 (iteration-statement -> while-statement .)
    FOR             reduce using rule 220 (iteration-statement -> while-statement .)
    FOREACH         reduce using rule 220 (iteration-statement -> while-statement .)
    DO              reduce using rule 220 (iteration-statement -> while-statement .)
    BREAK           reduce using rule 220 (iteration-statement -> while-statement .)
    CONTINUE        reduce using rule 220 (iteration-statement -> while-statement .)
    GOTO            reduce using rule 220 (iteration-statement -> while-statement .)
    RETURN          reduce using rule 220 (iteration-statement -> while-statement .)
    BOOL            reduce using rule 220 (iteration-statement -> while-statement .)
    NEW             reduce using rule 220 (iteration-statement -> while-statement .)
    INCRE           reduce using rule 220 (iteration-statement -> while-statement .)
    DECRE           reduce using rule 220 (iteration-statement -> while-statement .)
    INT             reduce using rule 220 (iteration-statement -> while-statement .)
    UINT            reduce using rule 220 (iteration-statement -> while-statement .)
    LONG            reduce using rule 220 (iteration-statement -> while-statement .)
    ULONG           reduce using rule 220 (iteration-statement -> while-statement .)
    CHAR            reduce using rule 220 (iteration-statement -> while-statement .)
    FLOAT           reduce using rule 220 (iteration-statement -> while-statement .)
    DOUBLE          reduce using rule 220 (iteration-statement -> while-statement .)
    ICONST          reduce using rule 220 (iteration-statement -> while-statement .)
    UICONST         reduce using rule 220 (iteration-statement -> while-statement .)
    LICONST         reduce using rule 220 (iteration-statement -> while-statement .)
    ULICONST        reduce using rule 220 (iteration-statement -> while-statement .)
    FCONST          reduce using rule 220 (iteration-statement -> while-statement .)
    DCONST          reduce using rule 220 (iteration-statement -> while-statement .)
    MCONST          reduce using rule 220 (iteration-statement -> while-statement .)
    CCONST          reduce using rule 220 (iteration-statement -> while-statement .)
    SCONST          reduce using rule 220 (iteration-statement -> while-statement .)
    VSCONST         reduce using rule 220 (iteration-statement -> while-statement .)
    TRUE            reduce using rule 220 (iteration-statement -> while-statement .)
    FALSE           reduce using rule 220 (iteration-statement -> while-statement .)
    OPEN_PAREN      reduce using rule 220 (iteration-statement -> while-statement .)
    THIS            reduce using rule 220 (iteration-statement -> while-statement .)
    BASE            reduce using rule 220 (iteration-statement -> while-statement .)
    BLOCK_END       reduce using rule 220 (iteration-statement -> while-statement .)
    CASE            reduce using rule 220 (iteration-statement -> while-statement .)
    DEFAULT         reduce using rule 220 (iteration-statement -> while-statement .)
    ELSE            reduce using rule 220 (iteration-statement -> while-statement .)


state 139

    (225) do-statement -> DO . embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM
    (189) embedded-statement -> . block
    (190) embedded-statement -> . empty-statement
    (191) embedded-statement -> . expression-statement
    (192) embedded-statement -> . selection-statement
    (193) embedded-statement -> . iteration-statement
    (194) embedded-statement -> . jump-statement
    (170) block -> . BLOCK_BEGIN statement-list-opt BLOCK_END
    (195) empty-statement -> . DELIM
    (196) expression-statement -> . statement-expression DELIM
    (204) selection-statement -> . if-statement
    (205) selection-statement -> . switch-statement
    (220) iteration-statement -> . while-statement
    (221) iteration-statement -> . for-statement
    (222) iteration-statement -> . foreach-statement
    (223) iteration-statement -> . do-statement
    (240) jump-statement -> . break-statement
    (241) jump-statement -> . continue-statement
    (242) jump-statement -> . goto-statement
    (243) jump-statement -> . return-statement
    (197) statement-expression -> . invocation-expression
    (198) statement-expression -> . object-creation-expression
    (199) statement-expression -> . assignment
    (200) statement-expression -> . post-increment-expression
    (201) statement-expression -> . post-decrement-expression
    (202) statement-expression -> . pre-increment-expression
    (203) statement-expression -> . pre-decrement-expression
    (206) if-statement -> . IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement
    (207) if-statement -> . IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement
    (209) switch-statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block
    (224) while-statement -> . WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement
    (226) for-statement -> . FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement
    (239) foreach-statement -> . FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement
    (225) do-statement -> . DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM
    (244) break-statement -> . BREAK DELIM
    (245) continue-statement -> . CONTINUE DELIM
    (246) goto-statement -> . GOTO IDENTIFIER DELIM
    (247) return-statement -> . RETURN expression-opt DELIM
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (133) assignment -> . primary-expression assignment-operator expression
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET

    BLOCK_BEGIN     shift and go to state 55
    DELIM           shift and go to state 115
    IF              shift and go to state 148
    SWITCH          shift and go to state 124
    WHILE           shift and go to state 118
    FOR             shift and go to state 105
    FOREACH         shift and go to state 90
    DO              shift and go to state 139
    BREAK           shift and go to state 136
    CONTINUE        shift and go to state 113
    GOTO            shift and go to state 87
    RETURN          shift and go to state 97
    NEW             shift and go to state 120
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88

    this-access                    shift and go to state 77
    member-access                  shift and go to state 79
    selection-statement            shift and go to state 116
    parenthesized-expression       shift and go to state 96
    empty-statement                shift and go to state 119
    return-statement               shift and go to state 98
    expression-statement           shift and go to state 81
    pre-decrement-expression       shift and go to state 108
    primary-no-array-creation-expression shift and go to state 82
    foreach-statement              shift and go to state 100
    break-statement                shift and go to state 121
    post-increment-expression      shift and go to state 83
    element-access                 shift and go to state 101
    statement-expression           shift and go to state 84
    base-access                    shift and go to state 126
    assignment                     shift and go to state 145
    for-statement                  shift and go to state 86
    do-statement                   shift and go to state 104
    array-creation-expression      shift and go to state 144
    continue-statement             shift and go to state 106
    literal                        shift and go to state 128
    invocation-expression          shift and go to state 95
    object-creation-expression     shift and go to state 146
    post-decrement-expression      shift and go to state 132
    switch-statement               shift and go to state 91
    pre-increment-expression       shift and go to state 147
    embedded-statement             shift and go to state 230
    jump-statement                 shift and go to state 93
    iteration-statement            shift and go to state 135
    goto-statement                 shift and go to state 111
    if-statement                   shift and go to state 112
    primary-expression             shift and go to state 149
    while-statement                shift and go to state 138
    block                          shift and go to state 114

state 140

    (188) local-constant-declaration -> CONST . type constant-declarators
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (29) simple-type -> . numeric-type
    (30) simple-type -> . BOOL
    (12) class-type -> . IDENTIFIER
    (40) array-type -> . simple-type rank-specifier
    (31) numeric-type -> . integral-type
    (32) numeric-type -> . floating-point-type
    (33) integral-type -> . INT
    (34) integral-type -> . UINT
    (35) integral-type -> . LONG
    (36) integral-type -> . ULONG
    (37) integral-type -> . CHAR
    (38) floating-point-type -> . FLOAT
    (39) floating-point-type -> . DOUBLE

    BOOL            shift and go to state 48
    IDENTIFIER      shift and go to state 15
    INT             shift and go to state 25
    UINT            shift and go to state 42
    LONG            shift and go to state 44
    ULONG           shift and go to state 27
    CHAR            shift and go to state 22
    FLOAT           shift and go to state 47
    DOUBLE          shift and go to state 52

    array-type                     shift and go to state 36
    integral-type                  shift and go to state 26
    numeric-type                   shift and go to state 28
    floating-point-type            shift and go to state 39
    simple-type                    shift and go to state 23
    class-type                     shift and go to state 49
    type                           shift and go to state 231

state 141

    (262) literal -> DCONST .

    OPEN_BRACKET    reduce using rule 262 (literal -> DCONST .)
    DOT             reduce using rule 262 (literal -> DCONST .)
    OPEN_PAREN      reduce using rule 262 (literal -> DCONST .)
    INCRE           reduce using rule 262 (literal -> DCONST .)
    DECRE           reduce using rule 262 (literal -> DCONST .)
    ASSIGN          reduce using rule 262 (literal -> DCONST .)
    PLUSEQUAL       reduce using rule 262 (literal -> DCONST .)
    MINUSEQUAL      reduce using rule 262 (literal -> DCONST .)
    TIMESEQUAL      reduce using rule 262 (literal -> DCONST .)
    DIVEQUAL        reduce using rule 262 (literal -> DCONST .)
    MODEQUAL        reduce using rule 262 (literal -> DCONST .)
    BITANDEQUAL     reduce using rule 262 (literal -> DCONST .)
    BITOREQUAL      reduce using rule 262 (literal -> DCONST .)
    BITXOREQUAL     reduce using rule 262 (literal -> DCONST .)
    LSHIFTEQUAL     reduce using rule 262 (literal -> DCONST .)
    RSHIFTEQUAL     reduce using rule 262 (literal -> DCONST .)
    TIMES           reduce using rule 262 (literal -> DCONST .)
    DIV             reduce using rule 262 (literal -> DCONST .)
    MOD             reduce using rule 262 (literal -> DCONST .)
    PLUS            reduce using rule 262 (literal -> DCONST .)
    MINUS           reduce using rule 262 (literal -> DCONST .)
    LSHIFT          reduce using rule 262 (literal -> DCONST .)
    RSHIFT          reduce using rule 262 (literal -> DCONST .)
    LT              reduce using rule 262 (literal -> DCONST .)
    GT              reduce using rule 262 (literal -> DCONST .)
    LE              reduce using rule 262 (literal -> DCONST .)
    GE              reduce using rule 262 (literal -> DCONST .)
    EQ              reduce using rule 262 (literal -> DCONST .)
    NE              reduce using rule 262 (literal -> DCONST .)
    BITAND          reduce using rule 262 (literal -> DCONST .)
    BITXOR          reduce using rule 262 (literal -> DCONST .)
    BITOR           reduce using rule 262 (literal -> DCONST .)
    LOGAND          reduce using rule 262 (literal -> DCONST .)
    CONDOP          reduce using rule 262 (literal -> DCONST .)
    LOGOR           reduce using rule 262 (literal -> DCONST .)
    CLOSE_PAREN     reduce using rule 262 (literal -> DCONST .)
    COMMA           reduce using rule 262 (literal -> DCONST .)
    BLOCK_END       reduce using rule 262 (literal -> DCONST .)
    DELIM           reduce using rule 262 (literal -> DCONST .)
    CLOSE_BRACKET   reduce using rule 262 (literal -> DCONST .)
    COLON           reduce using rule 262 (literal -> DCONST .)


state 142

    (170) block -> BLOCK_BEGIN statement-list-opt . BLOCK_END

    BLOCK_END       shift and go to state 232


state 143

    (264) literal -> CCONST .

    OPEN_BRACKET    reduce using rule 264 (literal -> CCONST .)
    DOT             reduce using rule 264 (literal -> CCONST .)
    OPEN_PAREN      reduce using rule 264 (literal -> CCONST .)
    INCRE           reduce using rule 264 (literal -> CCONST .)
    DECRE           reduce using rule 264 (literal -> CCONST .)
    ASSIGN          reduce using rule 264 (literal -> CCONST .)
    PLUSEQUAL       reduce using rule 264 (literal -> CCONST .)
    MINUSEQUAL      reduce using rule 264 (literal -> CCONST .)
    TIMESEQUAL      reduce using rule 264 (literal -> CCONST .)
    DIVEQUAL        reduce using rule 264 (literal -> CCONST .)
    MODEQUAL        reduce using rule 264 (literal -> CCONST .)
    BITANDEQUAL     reduce using rule 264 (literal -> CCONST .)
    BITOREQUAL      reduce using rule 264 (literal -> CCONST .)
    BITXOREQUAL     reduce using rule 264 (literal -> CCONST .)
    LSHIFTEQUAL     reduce using rule 264 (literal -> CCONST .)
    RSHIFTEQUAL     reduce using rule 264 (literal -> CCONST .)
    TIMES           reduce using rule 264 (literal -> CCONST .)
    DIV             reduce using rule 264 (literal -> CCONST .)
    MOD             reduce using rule 264 (literal -> CCONST .)
    PLUS            reduce using rule 264 (literal -> CCONST .)
    MINUS           reduce using rule 264 (literal -> CCONST .)
    LSHIFT          reduce using rule 264 (literal -> CCONST .)
    RSHIFT          reduce using rule 264 (literal -> CCONST .)
    LT              reduce using rule 264 (literal -> CCONST .)
    GT              reduce using rule 264 (literal -> CCONST .)
    LE              reduce using rule 264 (literal -> CCONST .)
    GE              reduce using rule 264 (literal -> CCONST .)
    EQ              reduce using rule 264 (literal -> CCONST .)
    NE              reduce using rule 264 (literal -> CCONST .)
    BITAND          reduce using rule 264 (literal -> CCONST .)
    BITXOR          reduce using rule 264 (literal -> CCONST .)
    BITOR           reduce using rule 264 (literal -> CCONST .)
    LOGAND          reduce using rule 264 (literal -> CCONST .)
    CONDOP          reduce using rule 264 (literal -> CCONST .)
    LOGOR           reduce using rule 264 (literal -> CCONST .)
    CLOSE_PAREN     reduce using rule 264 (literal -> CCONST .)
    COMMA           reduce using rule 264 (literal -> CCONST .)
    BLOCK_END       reduce using rule 264 (literal -> CCONST .)
    DELIM           reduce using rule 264 (literal -> CCONST .)
    CLOSE_BRACKET   reduce using rule 264 (literal -> CCONST .)
    COLON           reduce using rule 264 (literal -> CCONST .)


state 144

    (89) primary-expression -> array-creation-expression .

    DOT             reduce using rule 89 (primary-expression -> array-creation-expression .)
    OPEN_PAREN      reduce using rule 89 (primary-expression -> array-creation-expression .)
    INCRE           reduce using rule 89 (primary-expression -> array-creation-expression .)
    DECRE           reduce using rule 89 (primary-expression -> array-creation-expression .)
    ASSIGN          reduce using rule 89 (primary-expression -> array-creation-expression .)
    PLUSEQUAL       reduce using rule 89 (primary-expression -> array-creation-expression .)
    MINUSEQUAL      reduce using rule 89 (primary-expression -> array-creation-expression .)
    TIMESEQUAL      reduce using rule 89 (primary-expression -> array-creation-expression .)
    DIVEQUAL        reduce using rule 89 (primary-expression -> array-creation-expression .)
    MODEQUAL        reduce using rule 89 (primary-expression -> array-creation-expression .)
    BITANDEQUAL     reduce using rule 89 (primary-expression -> array-creation-expression .)
    BITOREQUAL      reduce using rule 89 (primary-expression -> array-creation-expression .)
    BITXOREQUAL     reduce using rule 89 (primary-expression -> array-creation-expression .)
    LSHIFTEQUAL     reduce using rule 89 (primary-expression -> array-creation-expression .)
    RSHIFTEQUAL     reduce using rule 89 (primary-expression -> array-creation-expression .)
    TIMES           reduce using rule 89 (primary-expression -> array-creation-expression .)
    DIV             reduce using rule 89 (primary-expression -> array-creation-expression .)
    MOD             reduce using rule 89 (primary-expression -> array-creation-expression .)
    PLUS            reduce using rule 89 (primary-expression -> array-creation-expression .)
    MINUS           reduce using rule 89 (primary-expression -> array-creation-expression .)
    LSHIFT          reduce using rule 89 (primary-expression -> array-creation-expression .)
    RSHIFT          reduce using rule 89 (primary-expression -> array-creation-expression .)
    LT              reduce using rule 89 (primary-expression -> array-creation-expression .)
    GT              reduce using rule 89 (primary-expression -> array-creation-expression .)
    LE              reduce using rule 89 (primary-expression -> array-creation-expression .)
    GE              reduce using rule 89 (primary-expression -> array-creation-expression .)
    EQ              reduce using rule 89 (primary-expression -> array-creation-expression .)
    NE              reduce using rule 89 (primary-expression -> array-creation-expression .)
    BITAND          reduce using rule 89 (primary-expression -> array-creation-expression .)
    BITXOR          reduce using rule 89 (primary-expression -> array-creation-expression .)
    BITOR           reduce using rule 89 (primary-expression -> array-creation-expression .)
    LOGAND          reduce using rule 89 (primary-expression -> array-creation-expression .)
    CONDOP          reduce using rule 89 (primary-expression -> array-creation-expression .)
    LOGOR           reduce using rule 89 (primary-expression -> array-creation-expression .)
    CLOSE_BRACKET   reduce using rule 89 (primary-expression -> array-creation-expression .)
    COMMA           reduce using rule 89 (primary-expression -> array-creation-expression .)
    DELIM           reduce using rule 89 (primary-expression -> array-creation-expression .)
    CLOSE_PAREN     reduce using rule 89 (primary-expression -> array-creation-expression .)
    BLOCK_END       reduce using rule 89 (primary-expression -> array-creation-expression .)
    COLON           reduce using rule 89 (primary-expression -> array-creation-expression .)


state 145

    (199) statement-expression -> assignment .

    DELIM           reduce using rule 199 (statement-expression -> assignment .)
    COMMA           reduce using rule 199 (statement-expression -> assignment .)
    CLOSE_PAREN     reduce using rule 199 (statement-expression -> assignment .)


state 146

    (198) statement-expression -> object-creation-expression .
    (113) primary-no-array-creation-expression -> object-creation-expression .

    DELIM           reduce using rule 198 (statement-expression -> object-creation-expression .)
    COMMA           reduce using rule 198 (statement-expression -> object-creation-expression .)
    CLOSE_PAREN     reduce using rule 198 (statement-expression -> object-creation-expression .)
    OPEN_BRACKET    reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)
    OPEN_PAREN      reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)
    INCRE           reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)
    DECRE           reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)
    DOT             reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)
    ASSIGN          reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)
    PLUSEQUAL       reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)
    MINUSEQUAL      reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)
    TIMESEQUAL      reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)
    DIVEQUAL        reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)
    MODEQUAL        reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)
    BITANDEQUAL     reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)
    BITOREQUAL      reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)
    BITXOREQUAL     reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)
    LSHIFTEQUAL     reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)
    RSHIFTEQUAL     reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)


state 147

    (202) statement-expression -> pre-increment-expression .

    DELIM           reduce using rule 202 (statement-expression -> pre-increment-expression .)
    COMMA           reduce using rule 202 (statement-expression -> pre-increment-expression .)
    CLOSE_PAREN     reduce using rule 202 (statement-expression -> pre-increment-expression .)


state 148

    (206) if-statement -> IF . OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement
    (207) if-statement -> IF . OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement

    OPEN_PAREN      shift and go to state 233


state 149

    (116) invocation-expression -> primary-expression . OPEN_PAREN argument-list-opt CLOSE_PAREN
    (133) assignment -> primary-expression . assignment-operator expression
    (128) post-increment-expression -> primary-expression . INCRE
    (129) post-decrement-expression -> primary-expression . DECRE
    (115) member-access -> primary-expression . DOT IDENTIFIER
    (134) assignment-operator -> . ASSIGN
    (135) assignment-operator -> . PLUSEQUAL
    (136) assignment-operator -> . MINUSEQUAL
    (137) assignment-operator -> . TIMESEQUAL
    (138) assignment-operator -> . DIVEQUAL
    (139) assignment-operator -> . MODEQUAL
    (140) assignment-operator -> . BITANDEQUAL
    (141) assignment-operator -> . BITOREQUAL
    (142) assignment-operator -> . BITXOREQUAL
    (143) assignment-operator -> . LSHIFTEQUAL
    (144) assignment-operator -> . RSHIFTEQUAL

    OPEN_PAREN      shift and go to state 245
    INCRE           shift and go to state 244
    DECRE           shift and go to state 241
    DOT             shift and go to state 246
    ASSIGN          shift and go to state 248
    PLUSEQUAL       shift and go to state 243
    MINUSEQUAL      shift and go to state 238
    TIMESEQUAL      shift and go to state 237
    DIVEQUAL        shift and go to state 234
    MODEQUAL        shift and go to state 240
    BITANDEQUAL     shift and go to state 236
    BITOREQUAL      shift and go to state 242
    BITXOREQUAL     shift and go to state 249
    LSHIFTEQUAL     shift and go to state 247
    RSHIFTEQUAL     shift and go to state 235

    assignment-operator            shift and go to state 239

state 150

    (257) literal -> ICONST .

    OPEN_BRACKET    reduce using rule 257 (literal -> ICONST .)
    DOT             reduce using rule 257 (literal -> ICONST .)
    OPEN_PAREN      reduce using rule 257 (literal -> ICONST .)
    INCRE           reduce using rule 257 (literal -> ICONST .)
    DECRE           reduce using rule 257 (literal -> ICONST .)
    ASSIGN          reduce using rule 257 (literal -> ICONST .)
    PLUSEQUAL       reduce using rule 257 (literal -> ICONST .)
    MINUSEQUAL      reduce using rule 257 (literal -> ICONST .)
    TIMESEQUAL      reduce using rule 257 (literal -> ICONST .)
    DIVEQUAL        reduce using rule 257 (literal -> ICONST .)
    MODEQUAL        reduce using rule 257 (literal -> ICONST .)
    BITANDEQUAL     reduce using rule 257 (literal -> ICONST .)
    BITOREQUAL      reduce using rule 257 (literal -> ICONST .)
    BITXOREQUAL     reduce using rule 257 (literal -> ICONST .)
    LSHIFTEQUAL     reduce using rule 257 (literal -> ICONST .)
    RSHIFTEQUAL     reduce using rule 257 (literal -> ICONST .)
    TIMES           reduce using rule 257 (literal -> ICONST .)
    DIV             reduce using rule 257 (literal -> ICONST .)
    MOD             reduce using rule 257 (literal -> ICONST .)
    PLUS            reduce using rule 257 (literal -> ICONST .)
    MINUS           reduce using rule 257 (literal -> ICONST .)
    LSHIFT          reduce using rule 257 (literal -> ICONST .)
    RSHIFT          reduce using rule 257 (literal -> ICONST .)
    LT              reduce using rule 257 (literal -> ICONST .)
    GT              reduce using rule 257 (literal -> ICONST .)
    LE              reduce using rule 257 (literal -> ICONST .)
    GE              reduce using rule 257 (literal -> ICONST .)
    EQ              reduce using rule 257 (literal -> ICONST .)
    NE              reduce using rule 257 (literal -> ICONST .)
    BITAND          reduce using rule 257 (literal -> ICONST .)
    BITXOR          reduce using rule 257 (literal -> ICONST .)
    BITOR           reduce using rule 257 (literal -> ICONST .)
    LOGAND          reduce using rule 257 (literal -> ICONST .)
    CONDOP          reduce using rule 257 (literal -> ICONST .)
    LOGOR           reduce using rule 257 (literal -> ICONST .)
    CLOSE_PAREN     reduce using rule 257 (literal -> ICONST .)
    COMMA           reduce using rule 257 (literal -> ICONST .)
    BLOCK_END       reduce using rule 257 (literal -> ICONST .)
    DELIM           reduce using rule 257 (literal -> ICONST .)
    CLOSE_BRACKET   reduce using rule 257 (literal -> ICONST .)
    COLON           reduce using rule 257 (literal -> ICONST .)


state 151

    (157) method-header -> VOID member-name OPEN_PAREN . formal-parameter-list-opt CLOSE_PAREN
    (158) formal-parameter-list-opt -> . formal-parameter-list
    (159) formal-parameter-list-opt -> . empty
    (161) formal-parameter-list -> . fixed-parameters
    (269) empty -> .
    (162) fixed-parameters -> . fixed-parameter
    (163) fixed-parameters -> . fixed-parameters COMMA fixed-parameter
    (164) fixed-parameter -> . parameter-modifier-opt type IDENTIFIER
    (165) parameter-modifier-opt -> . parameter-modifier
    (166) parameter-modifier-opt -> . empty
    (167) parameter-modifier -> . OUT

    CLOSE_PAREN     reduce using rule 269 (empty -> .)
    BOOL            reduce using rule 269 (empty -> .)
    IDENTIFIER      reduce using rule 269 (empty -> .)
    INT             reduce using rule 269 (empty -> .)
    UINT            reduce using rule 269 (empty -> .)
    LONG            reduce using rule 269 (empty -> .)
    ULONG           reduce using rule 269 (empty -> .)
    CHAR            reduce using rule 269 (empty -> .)
    FLOAT           reduce using rule 269 (empty -> .)
    DOUBLE          reduce using rule 269 (empty -> .)
    OUT             shift and go to state 167

    parameter-modifier             shift and go to state 164
    fixed-parameters               shift and go to state 166
    formal-parameter-list-opt      shift and go to state 250
    parameter-modifier-opt         shift and go to state 165
    formal-parameter-list          shift and go to state 171
    empty                          shift and go to state 170
    fixed-parameter                shift and go to state 169

state 152

    (41) rank-specifier -> OPEN_BRACKET dim-separators-opt . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 251


state 153

    (44) dim-separators -> COMMA .

    COMMA           reduce using rule 44 (dim-separators -> COMMA .)
    CLOSE_BRACKET   reduce using rule 44 (dim-separators -> COMMA .)


state 154

    (42) dim-separators-opt -> dim-separators .
    (45) dim-separators -> dim-separators . COMMA

    CLOSE_BRACKET   reduce using rule 42 (dim-separators-opt -> dim-separators .)
    COMMA           shift and go to state 252


state 155

    (43) dim-separators-opt -> empty .

    CLOSE_BRACKET   reduce using rule 43 (dim-separators-opt -> empty .)


state 156

    (25) constant-declaration -> CONST simple-type constant-declarators . DELIM
    (47) constant-declarators -> constant-declarators . COMMA constant-declarator

    DELIM           shift and go to state 253
    COMMA           shift and go to state 254


state 157

    (48) constant-declarator -> IDENTIFIER . ASSIGN expression

    ASSIGN          shift and go to state 255


state 158

    (46) constant-declarators -> constant-declarator .

    DELIM           reduce using rule 46 (constant-declarators -> constant-declarator .)
    COMMA           reduce using rule 46 (constant-declarators -> constant-declarator .)


state 159

    (254) destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN . CLOSE_PAREN destructor-body

    CLOSE_PAREN     shift and go to state 256


state 160

    (146) field-declaration -> type variable-declarators DELIM .

    CONST           reduce using rule 146 (field-declaration -> type variable-declarators DELIM .)
    BITCOMP         reduce using rule 146 (field-declaration -> type variable-declarators DELIM .)
    CLASS           reduce using rule 146 (field-declaration -> type variable-declarators DELIM .)
    PUBLIC          reduce using rule 146 (field-declaration -> type variable-declarators DELIM .)
    PRIVATE         reduce using rule 146 (field-declaration -> type variable-declarators DELIM .)
    VOID            reduce using rule 146 (field-declaration -> type variable-declarators DELIM .)
    IDENTIFIER      reduce using rule 146 (field-declaration -> type variable-declarators DELIM .)
    BOOL            reduce using rule 146 (field-declaration -> type variable-declarators DELIM .)
    INT             reduce using rule 146 (field-declaration -> type variable-declarators DELIM .)
    UINT            reduce using rule 146 (field-declaration -> type variable-declarators DELIM .)
    LONG            reduce using rule 146 (field-declaration -> type variable-declarators DELIM .)
    ULONG           reduce using rule 146 (field-declaration -> type variable-declarators DELIM .)
    CHAR            reduce using rule 146 (field-declaration -> type variable-declarators DELIM .)
    FLOAT           reduce using rule 146 (field-declaration -> type variable-declarators DELIM .)
    DOUBLE          reduce using rule 146 (field-declaration -> type variable-declarators DELIM .)
    BLOCK_END       reduce using rule 146 (field-declaration -> type variable-declarators DELIM .)


state 161

    (150) variable-declarators -> variable-declarators COMMA . variable-declarator
    (151) variable-declarator -> . IDENTIFIER
    (152) variable-declarator -> . IDENTIFIER ASSIGN variable-initializer

    IDENTIFIER      shift and go to state 258

    variable-declarator            shift and go to state 257

state 162

    (156) method-header -> type member-name OPEN_PAREN . formal-parameter-list-opt CLOSE_PAREN
    (158) formal-parameter-list-opt -> . formal-parameter-list
    (159) formal-parameter-list-opt -> . empty
    (161) formal-parameter-list -> . fixed-parameters
    (269) empty -> .
    (162) fixed-parameters -> . fixed-parameter
    (163) fixed-parameters -> . fixed-parameters COMMA fixed-parameter
    (164) fixed-parameter -> . parameter-modifier-opt type IDENTIFIER
    (165) parameter-modifier-opt -> . parameter-modifier
    (166) parameter-modifier-opt -> . empty
    (167) parameter-modifier -> . OUT

    CLOSE_PAREN     reduce using rule 269 (empty -> .)
    BOOL            reduce using rule 269 (empty -> .)
    IDENTIFIER      reduce using rule 269 (empty -> .)
    INT             reduce using rule 269 (empty -> .)
    UINT            reduce using rule 269 (empty -> .)
    LONG            reduce using rule 269 (empty -> .)
    ULONG           reduce using rule 269 (empty -> .)
    CHAR            reduce using rule 269 (empty -> .)
    FLOAT           reduce using rule 269 (empty -> .)
    DOUBLE          reduce using rule 269 (empty -> .)
    OUT             shift and go to state 167

    parameter-modifier             shift and go to state 164
    fixed-parameters               shift and go to state 166
    formal-parameter-list-opt      shift and go to state 259
    parameter-modifier-opt         shift and go to state 165
    fixed-parameter                shift and go to state 169
    empty                          shift and go to state 170
    formal-parameter-list          shift and go to state 171

state 163

    (152) variable-declarator -> IDENTIFIER ASSIGN . variable-initializer
    (101) variable-initializer -> . expression
    (102) variable-initializer -> . array-initializer
    (49) expression -> . conditional-expression
    (50) expression -> . assignment
    (96) array-initializer -> . BLOCK_BEGIN variable-initializer-list-opt BLOCK_END
    (51) conditional-expression -> . conditional-or-expression
    (52) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (133) assignment -> . primary-expression assignment-operator expression
    (53) conditional-or-expression -> . conditional-and-expression
    (54) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (55) conditional-and-expression -> . inclusive-or-expression
    (56) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (57) inclusive-or-expression -> . exclusive-or-expression
    (58) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (59) exclusive-or-expression -> . and-expression
    (60) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (61) and-expression -> . equality-expression
    (62) and-expression -> . and-expression BITAND equality-expression
    (63) equality-expression -> . relational-expression
    (64) equality-expression -> . equality-expression EQ relational-expression
    (65) equality-expression -> . equality-expression NE relational-expression
    (66) relational-expression -> . shift-expression
    (67) relational-expression -> . relational-expression LT shift-expression
    (68) relational-expression -> . relational-expression GT shift-expression
    (69) relational-expression -> . relational-expression LE shift-expression
    (70) relational-expression -> . relational-expression GE shift-expression
    (71) shift-expression -> . additive-expression
    (72) shift-expression -> . shift-expression LSHIFT additive-expression
    (73) shift-expression -> . shift-expression RSHIFT additive-expression
    (74) additive-expression -> . multiplicative-expression
    (75) additive-expression -> . additive-expression PLUS multiplicative-expression
    (76) additive-expression -> . additive-expression MINUS multiplicative-expression
    (77) multiplicative-expression -> . unary-expression
    (78) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (79) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (80) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (81) unary-expression -> . primary-expression
    (82) unary-expression -> . PLUS unary-expression
    (83) unary-expression -> . MINUS unary-expression
    (84) unary-expression -> . BITNOT unary-expression
    (85) unary-expression -> . BITCOMP unary-expression
    (86) unary-expression -> . TIMES unary-expression
    (87) unary-expression -> . pre-increment-expression
    (88) unary-expression -> . pre-decrement-expression
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression

    BLOCK_BEGIN     shift and go to state 263
    NEW             shift and go to state 185
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88
    PLUS            shift and go to state 190
    MINUS           shift and go to state 187
    BITNOT          shift and go to state 197
    BITCOMP         shift and go to state 186
    TIMES           shift and go to state 184
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117

    this-access                    shift and go to state 77
    unary-expression               shift and go to state 199
    exclusive-or-expression        shift and go to state 183
    member-access                  shift and go to state 79
    relational-expression          shift and go to state 203
    additive-expression            shift and go to state 208
    primary-no-array-creation-expression shift and go to state 82
    array-initializer              shift and go to state 260
    inclusive-or-expression        shift and go to state 188
    equality-expression            shift and go to state 189
    post-increment-expression      shift and go to state 182
    element-access                 shift and go to state 101
    literal                        shift and go to state 128
    conditional-expression         shift and go to state 191
    conditional-and-expression     shift and go to state 192
    post-decrement-expression      shift and go to state 193
    base-access                    shift and go to state 126
    array-creation-expression      shift and go to state 144
    assignment                     shift and go to state 196
    variable-initializer           shift and go to state 261
    object-creation-expression     shift and go to state 198
    pre-increment-expression       shift and go to state 202
    shift-expression               shift and go to state 204
    and-expression                 shift and go to state 201
    pre-decrement-expression       shift and go to state 205
    multiplicative-expression      shift and go to state 207
    expression                     shift and go to state 262
    primary-expression             shift and go to state 209
    invocation-expression          shift and go to state 210
    conditional-or-expression      shift and go to state 211
    parenthesized-expression       shift and go to state 96

state 164

    (165) parameter-modifier-opt -> parameter-modifier .

    BOOL            reduce using rule 165 (parameter-modifier-opt -> parameter-modifier .)
    IDENTIFIER      reduce using rule 165 (parameter-modifier-opt -> parameter-modifier .)
    INT             reduce using rule 165 (parameter-modifier-opt -> parameter-modifier .)
    UINT            reduce using rule 165 (parameter-modifier-opt -> parameter-modifier .)
    LONG            reduce using rule 165 (parameter-modifier-opt -> parameter-modifier .)
    ULONG           reduce using rule 165 (parameter-modifier-opt -> parameter-modifier .)
    CHAR            reduce using rule 165 (parameter-modifier-opt -> parameter-modifier .)
    FLOAT           reduce using rule 165 (parameter-modifier-opt -> parameter-modifier .)
    DOUBLE          reduce using rule 165 (parameter-modifier-opt -> parameter-modifier .)


state 165

    (164) fixed-parameter -> parameter-modifier-opt . type IDENTIFIER
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (29) simple-type -> . numeric-type
    (30) simple-type -> . BOOL
    (12) class-type -> . IDENTIFIER
    (40) array-type -> . simple-type rank-specifier
    (31) numeric-type -> . integral-type
    (32) numeric-type -> . floating-point-type
    (33) integral-type -> . INT
    (34) integral-type -> . UINT
    (35) integral-type -> . LONG
    (36) integral-type -> . ULONG
    (37) integral-type -> . CHAR
    (38) floating-point-type -> . FLOAT
    (39) floating-point-type -> . DOUBLE

    BOOL            shift and go to state 48
    IDENTIFIER      shift and go to state 15
    INT             shift and go to state 25
    UINT            shift and go to state 42
    LONG            shift and go to state 44
    ULONG           shift and go to state 27
    CHAR            shift and go to state 22
    FLOAT           shift and go to state 47
    DOUBLE          shift and go to state 52

    array-type                     shift and go to state 36
    floating-point-type            shift and go to state 39
    integral-type                  shift and go to state 26
    numeric-type                   shift and go to state 28
    simple-type                    shift and go to state 23
    class-type                     shift and go to state 49
    type                           shift and go to state 264

state 166

    (161) formal-parameter-list -> fixed-parameters .
    (163) fixed-parameters -> fixed-parameters . COMMA fixed-parameter

    CLOSE_PAREN     reduce using rule 161 (formal-parameter-list -> fixed-parameters .)
    COMMA           shift and go to state 265


state 167

    (167) parameter-modifier -> OUT .

    BOOL            reduce using rule 167 (parameter-modifier -> OUT .)
    IDENTIFIER      reduce using rule 167 (parameter-modifier -> OUT .)
    INT             reduce using rule 167 (parameter-modifier -> OUT .)
    UINT            reduce using rule 167 (parameter-modifier -> OUT .)
    LONG            reduce using rule 167 (parameter-modifier -> OUT .)
    ULONG           reduce using rule 167 (parameter-modifier -> OUT .)
    CHAR            reduce using rule 167 (parameter-modifier -> OUT .)
    FLOAT           reduce using rule 167 (parameter-modifier -> OUT .)
    DOUBLE          reduce using rule 167 (parameter-modifier -> OUT .)


state 168

    (251) constructor-declarator -> IDENTIFIER OPEN_PAREN formal-parameter-list-opt . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 266


state 169

    (162) fixed-parameters -> fixed-parameter .

    COMMA           reduce using rule 162 (fixed-parameters -> fixed-parameter .)
    CLOSE_PAREN     reduce using rule 162 (fixed-parameters -> fixed-parameter .)


state 170

    (159) formal-parameter-list-opt -> empty .
    (166) parameter-modifier-opt -> empty .

    CLOSE_PAREN     reduce using rule 159 (formal-parameter-list-opt -> empty .)
    BOOL            reduce using rule 166 (parameter-modifier-opt -> empty .)
    IDENTIFIER      reduce using rule 166 (parameter-modifier-opt -> empty .)
    INT             reduce using rule 166 (parameter-modifier-opt -> empty .)
    UINT            reduce using rule 166 (parameter-modifier-opt -> empty .)
    LONG            reduce using rule 166 (parameter-modifier-opt -> empty .)
    ULONG           reduce using rule 166 (parameter-modifier-opt -> empty .)
    CHAR            reduce using rule 166 (parameter-modifier-opt -> empty .)
    FLOAT           reduce using rule 166 (parameter-modifier-opt -> empty .)
    DOUBLE          reduce using rule 166 (parameter-modifier-opt -> empty .)


state 171

    (158) formal-parameter-list-opt -> formal-parameter-list .

    CLOSE_PAREN     reduce using rule 158 (formal-parameter-list-opt -> formal-parameter-list .)


state 172

    (24) constant-declaration -> modifier CONST simple-type . constant-declarators DELIM
    (46) constant-declarators -> . constant-declarator
    (47) constant-declarators -> . constant-declarators COMMA constant-declarator
    (48) constant-declarator -> . IDENTIFIER ASSIGN expression

    IDENTIFIER      shift and go to state 157

    constant-declarators           shift and go to state 267
    constant-declarator            shift and go to state 158

state 173

    (155) method-header -> modifier VOID member-name . OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN

    OPEN_PAREN      shift and go to state 268


state 174

    (145) field-declaration -> modifier type variable-declarators . DELIM
    (150) variable-declarators -> variable-declarators . COMMA variable-declarator

    DELIM           shift and go to state 269
    COMMA           shift and go to state 161


state 175

    (154) method-header -> modifier type member-name . OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN

    OPEN_PAREN      shift and go to state 270


state 176

    (124) element-access -> primary-no-array-creation-expression OPEN_BRACKET . expression-list CLOSE_BRACKET
    (94) expression-list -> . expression
    (95) expression-list -> . expression-list COMMA expression
    (49) expression -> . conditional-expression
    (50) expression -> . assignment
    (51) conditional-expression -> . conditional-or-expression
    (52) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (133) assignment -> . primary-expression assignment-operator expression
    (53) conditional-or-expression -> . conditional-and-expression
    (54) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (55) conditional-and-expression -> . inclusive-or-expression
    (56) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (57) inclusive-or-expression -> . exclusive-or-expression
    (58) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (59) exclusive-or-expression -> . and-expression
    (60) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (61) and-expression -> . equality-expression
    (62) and-expression -> . and-expression BITAND equality-expression
    (63) equality-expression -> . relational-expression
    (64) equality-expression -> . equality-expression EQ relational-expression
    (65) equality-expression -> . equality-expression NE relational-expression
    (66) relational-expression -> . shift-expression
    (67) relational-expression -> . relational-expression LT shift-expression
    (68) relational-expression -> . relational-expression GT shift-expression
    (69) relational-expression -> . relational-expression LE shift-expression
    (70) relational-expression -> . relational-expression GE shift-expression
    (71) shift-expression -> . additive-expression
    (72) shift-expression -> . shift-expression LSHIFT additive-expression
    (73) shift-expression -> . shift-expression RSHIFT additive-expression
    (74) additive-expression -> . multiplicative-expression
    (75) additive-expression -> . additive-expression PLUS multiplicative-expression
    (76) additive-expression -> . additive-expression MINUS multiplicative-expression
    (77) multiplicative-expression -> . unary-expression
    (78) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (79) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (80) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (81) unary-expression -> . primary-expression
    (82) unary-expression -> . PLUS unary-expression
    (83) unary-expression -> . MINUS unary-expression
    (84) unary-expression -> . BITNOT unary-expression
    (85) unary-expression -> . BITCOMP unary-expression
    (86) unary-expression -> . TIMES unary-expression
    (87) unary-expression -> . pre-increment-expression
    (88) unary-expression -> . pre-decrement-expression
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression

    NEW             shift and go to state 185
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88
    PLUS            shift and go to state 190
    MINUS           shift and go to state 187
    BITNOT          shift and go to state 197
    BITCOMP         shift and go to state 186
    TIMES           shift and go to state 184
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117

    this-access                    shift and go to state 77
    unary-expression               shift and go to state 199
    exclusive-or-expression        shift and go to state 183
    member-access                  shift and go to state 79
    relational-expression          shift and go to state 203
    additive-expression            shift and go to state 208
    primary-no-array-creation-expression shift and go to state 82
    inclusive-or-expression        shift and go to state 188
    equality-expression            shift and go to state 189
    post-increment-expression      shift and go to state 182
    element-access                 shift and go to state 101
    literal                        shift and go to state 128
    conditional-expression         shift and go to state 191
    conditional-and-expression     shift and go to state 192
    post-decrement-expression      shift and go to state 193
    base-access                    shift and go to state 126
    array-creation-expression      shift and go to state 144
    assignment                     shift and go to state 196
    object-creation-expression     shift and go to state 198
    pre-increment-expression       shift and go to state 202
    expression-list                shift and go to state 271
    shift-expression               shift and go to state 204
    and-expression                 shift and go to state 201
    pre-decrement-expression       shift and go to state 205
    multiplicative-expression      shift and go to state 207
    expression                     shift and go to state 272
    primary-expression             shift and go to state 209
    invocation-expression          shift and go to state 210
    conditional-or-expression      shift and go to state 211
    parenthesized-expression       shift and go to state 96

state 177

    (196) expression-statement -> statement-expression DELIM .

    IDENTIFIER      reduce using rule 196 (expression-statement -> statement-expression DELIM .)
    CONST           reduce using rule 196 (expression-statement -> statement-expression DELIM .)
    BLOCK_BEGIN     reduce using rule 196 (expression-statement -> statement-expression DELIM .)
    DELIM           reduce using rule 196 (expression-statement -> statement-expression DELIM .)
    IF              reduce using rule 196 (expression-statement -> statement-expression DELIM .)
    SWITCH          reduce using rule 196 (expression-statement -> statement-expression DELIM .)
    WHILE           reduce using rule 196 (expression-statement -> statement-expression DELIM .)
    FOR             reduce using rule 196 (expression-statement -> statement-expression DELIM .)
    FOREACH         reduce using rule 196 (expression-statement -> statement-expression DELIM .)
    DO              reduce using rule 196 (expression-statement -> statement-expression DELIM .)
    BREAK           reduce using rule 196 (expression-statement -> statement-expression DELIM .)
    CONTINUE        reduce using rule 196 (expression-statement -> statement-expression DELIM .)
    GOTO            reduce using rule 196 (expression-statement -> statement-expression DELIM .)
    RETURN          reduce using rule 196 (expression-statement -> statement-expression DELIM .)
    BOOL            reduce using rule 196 (expression-statement -> statement-expression DELIM .)
    NEW             reduce using rule 196 (expression-statement -> statement-expression DELIM .)
    INCRE           reduce using rule 196 (expression-statement -> statement-expression DELIM .)
    DECRE           reduce using rule 196 (expression-statement -> statement-expression DELIM .)
    INT             reduce using rule 196 (expression-statement -> statement-expression DELIM .)
    UINT            reduce using rule 196 (expression-statement -> statement-expression DELIM .)
    LONG            reduce using rule 196 (expression-statement -> statement-expression DELIM .)
    ULONG           reduce using rule 196 (expression-statement -> statement-expression DELIM .)
    CHAR            reduce using rule 196 (expression-statement -> statement-expression DELIM .)
    FLOAT           reduce using rule 196 (expression-statement -> statement-expression DELIM .)
    DOUBLE          reduce using rule 196 (expression-statement -> statement-expression DELIM .)
    ICONST          reduce using rule 196 (expression-statement -> statement-expression DELIM .)
    UICONST         reduce using rule 196 (expression-statement -> statement-expression DELIM .)
    LICONST         reduce using rule 196 (expression-statement -> statement-expression DELIM .)
    ULICONST        reduce using rule 196 (expression-statement -> statement-expression DELIM .)
    FCONST          reduce using rule 196 (expression-statement -> statement-expression DELIM .)
    DCONST          reduce using rule 196 (expression-statement -> statement-expression DELIM .)
    MCONST          reduce using rule 196 (expression-statement -> statement-expression DELIM .)
    CCONST          reduce using rule 196 (expression-statement -> statement-expression DELIM .)
    SCONST          reduce using rule 196 (expression-statement -> statement-expression DELIM .)
    VSCONST         reduce using rule 196 (expression-statement -> statement-expression DELIM .)
    TRUE            reduce using rule 196 (expression-statement -> statement-expression DELIM .)
    FALSE           reduce using rule 196 (expression-statement -> statement-expression DELIM .)
    OPEN_PAREN      reduce using rule 196 (expression-statement -> statement-expression DELIM .)
    THIS            reduce using rule 196 (expression-statement -> statement-expression DELIM .)
    BASE            reduce using rule 196 (expression-statement -> statement-expression DELIM .)
    BLOCK_END       reduce using rule 196 (expression-statement -> statement-expression DELIM .)
    CASE            reduce using rule 196 (expression-statement -> statement-expression DELIM .)
    DEFAULT         reduce using rule 196 (expression-statement -> statement-expression DELIM .)
    ELSE            reduce using rule 196 (expression-statement -> statement-expression DELIM .)


state 178

    (246) goto-statement -> GOTO IDENTIFIER . DELIM

    DELIM           shift and go to state 273


state 179

    (127) base-access -> BASE OPEN_BRACKET . expression-list CLOSE_BRACKET
    (94) expression-list -> . expression
    (95) expression-list -> . expression-list COMMA expression
    (49) expression -> . conditional-expression
    (50) expression -> . assignment
    (51) conditional-expression -> . conditional-or-expression
    (52) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (133) assignment -> . primary-expression assignment-operator expression
    (53) conditional-or-expression -> . conditional-and-expression
    (54) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (55) conditional-and-expression -> . inclusive-or-expression
    (56) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (57) inclusive-or-expression -> . exclusive-or-expression
    (58) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (59) exclusive-or-expression -> . and-expression
    (60) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (61) and-expression -> . equality-expression
    (62) and-expression -> . and-expression BITAND equality-expression
    (63) equality-expression -> . relational-expression
    (64) equality-expression -> . equality-expression EQ relational-expression
    (65) equality-expression -> . equality-expression NE relational-expression
    (66) relational-expression -> . shift-expression
    (67) relational-expression -> . relational-expression LT shift-expression
    (68) relational-expression -> . relational-expression GT shift-expression
    (69) relational-expression -> . relational-expression LE shift-expression
    (70) relational-expression -> . relational-expression GE shift-expression
    (71) shift-expression -> . additive-expression
    (72) shift-expression -> . shift-expression LSHIFT additive-expression
    (73) shift-expression -> . shift-expression RSHIFT additive-expression
    (74) additive-expression -> . multiplicative-expression
    (75) additive-expression -> . additive-expression PLUS multiplicative-expression
    (76) additive-expression -> . additive-expression MINUS multiplicative-expression
    (77) multiplicative-expression -> . unary-expression
    (78) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (79) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (80) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (81) unary-expression -> . primary-expression
    (82) unary-expression -> . PLUS unary-expression
    (83) unary-expression -> . MINUS unary-expression
    (84) unary-expression -> . BITNOT unary-expression
    (85) unary-expression -> . BITCOMP unary-expression
    (86) unary-expression -> . TIMES unary-expression
    (87) unary-expression -> . pre-increment-expression
    (88) unary-expression -> . pre-decrement-expression
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression

    NEW             shift and go to state 185
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88
    PLUS            shift and go to state 190
    MINUS           shift and go to state 187
    BITNOT          shift and go to state 197
    BITCOMP         shift and go to state 186
    TIMES           shift and go to state 184
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117

    this-access                    shift and go to state 77
    unary-expression               shift and go to state 199
    exclusive-or-expression        shift and go to state 183
    member-access                  shift and go to state 79
    relational-expression          shift and go to state 203
    additive-expression            shift and go to state 208
    primary-no-array-creation-expression shift and go to state 82
    inclusive-or-expression        shift and go to state 188
    equality-expression            shift and go to state 189
    post-increment-expression      shift and go to state 182
    element-access                 shift and go to state 101
    literal                        shift and go to state 128
    conditional-expression         shift and go to state 191
    conditional-and-expression     shift and go to state 192
    post-decrement-expression      shift and go to state 193
    base-access                    shift and go to state 126
    array-creation-expression      shift and go to state 144
    assignment                     shift and go to state 196
    object-creation-expression     shift and go to state 198
    pre-increment-expression       shift and go to state 202
    expression-list                shift and go to state 274
    shift-expression               shift and go to state 204
    and-expression                 shift and go to state 201
    pre-decrement-expression       shift and go to state 205
    multiplicative-expression      shift and go to state 207
    expression                     shift and go to state 272
    primary-expression             shift and go to state 209
    invocation-expression          shift and go to state 210
    conditional-or-expression      shift and go to state 211
    parenthesized-expression       shift and go to state 96

state 180

    (126) base-access -> BASE DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 275


state 181

    (239) foreach-statement -> FOREACH OPEN_PAREN . type IDENTIFIER IN expression CLOSE_PAREN embedded-statement
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (29) simple-type -> . numeric-type
    (30) simple-type -> . BOOL
    (12) class-type -> . IDENTIFIER
    (40) array-type -> . simple-type rank-specifier
    (31) numeric-type -> . integral-type
    (32) numeric-type -> . floating-point-type
    (33) integral-type -> . INT
    (34) integral-type -> . UINT
    (35) integral-type -> . LONG
    (36) integral-type -> . ULONG
    (37) integral-type -> . CHAR
    (38) floating-point-type -> . FLOAT
    (39) floating-point-type -> . DOUBLE

    BOOL            shift and go to state 48
    IDENTIFIER      shift and go to state 15
    INT             shift and go to state 25
    UINT            shift and go to state 42
    LONG            shift and go to state 44
    ULONG           shift and go to state 27
    CHAR            shift and go to state 22
    FLOAT           shift and go to state 47
    DOUBLE          shift and go to state 52

    array-type                     shift and go to state 36
    integral-type                  shift and go to state 26
    type                           shift and go to state 276
    numeric-type                   shift and go to state 28
    floating-point-type            shift and go to state 39
    simple-type                    shift and go to state 23
    class-type                     shift and go to state 49

state 182

    (111) primary-no-array-creation-expression -> post-increment-expression .

    OPEN_BRACKET    reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)
    DOT             reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)
    OPEN_PAREN      reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)
    INCRE           reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)
    DECRE           reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)
    TIMES           reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)
    DIV             reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)
    MOD             reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)
    PLUS            reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)
    MINUS           reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)
    LSHIFT          reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)
    RSHIFT          reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)
    LT              reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)
    GT              reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)
    LE              reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)
    GE              reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)
    EQ              reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)
    NE              reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)
    BITAND          reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)
    BITXOR          reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)
    BITOR           reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)
    LOGAND          reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)
    CONDOP          reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)
    LOGOR           reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)
    DELIM           reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)
    CLOSE_PAREN     reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)
    COMMA           reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)
    CLOSE_BRACKET   reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)
    BLOCK_END       reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)
    COLON           reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)
    ASSIGN          reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)
    PLUSEQUAL       reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)
    MINUSEQUAL      reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)
    TIMESEQUAL      reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)
    DIVEQUAL        reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)
    MODEQUAL        reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)
    BITANDEQUAL     reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)
    BITOREQUAL      reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)
    BITXOREQUAL     reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)
    LSHIFTEQUAL     reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)
    RSHIFTEQUAL     reduce using rule 111 (primary-no-array-creation-expression -> post-increment-expression .)


state 183

    (57) inclusive-or-expression -> exclusive-or-expression .
    (60) exclusive-or-expression -> exclusive-or-expression . BITXOR and-expression

    BITOR           reduce using rule 57 (inclusive-or-expression -> exclusive-or-expression .)
    LOGAND          reduce using rule 57 (inclusive-or-expression -> exclusive-or-expression .)
    CONDOP          reduce using rule 57 (inclusive-or-expression -> exclusive-or-expression .)
    LOGOR           reduce using rule 57 (inclusive-or-expression -> exclusive-or-expression .)
    COMMA           reduce using rule 57 (inclusive-or-expression -> exclusive-or-expression .)
    CLOSE_PAREN     reduce using rule 57 (inclusive-or-expression -> exclusive-or-expression .)
    DELIM           reduce using rule 57 (inclusive-or-expression -> exclusive-or-expression .)
    CLOSE_BRACKET   reduce using rule 57 (inclusive-or-expression -> exclusive-or-expression .)
    BLOCK_END       reduce using rule 57 (inclusive-or-expression -> exclusive-or-expression .)
    COLON           reduce using rule 57 (inclusive-or-expression -> exclusive-or-expression .)
    BITXOR          shift and go to state 277


state 184

    (86) unary-expression -> TIMES . unary-expression
    (81) unary-expression -> . primary-expression
    (82) unary-expression -> . PLUS unary-expression
    (83) unary-expression -> . MINUS unary-expression
    (84) unary-expression -> . BITNOT unary-expression
    (85) unary-expression -> . BITCOMP unary-expression
    (86) unary-expression -> . TIMES unary-expression
    (87) unary-expression -> . pre-increment-expression
    (88) unary-expression -> . pre-decrement-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 190
    MINUS           shift and go to state 187
    BITNOT          shift and go to state 197
    BITCOMP         shift and go to state 186
    TIMES           shift and go to state 184
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117
    NEW             shift and go to state 185
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88

    this-access                    shift and go to state 77
    post-increment-expression      shift and go to state 182
    member-access                  shift and go to state 79
    primary-no-array-creation-expression shift and go to state 82
    unary-expression               shift and go to state 278
    element-access                 shift and go to state 101
    literal                        shift and go to state 128
    base-access                    shift and go to state 126
    post-decrement-expression      shift and go to state 193
    array-creation-expression      shift and go to state 144
    object-creation-expression     shift and go to state 198
    pre-increment-expression       shift and go to state 202
    pre-decrement-expression       shift and go to state 205
    primary-expression             shift and go to state 217
    invocation-expression          shift and go to state 210
    parenthesized-expression       shift and go to state 96

state 185

    (91) array-creation-expression -> NEW . simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (130) object-creation-expression -> NEW . type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (29) simple-type -> . numeric-type
    (30) simple-type -> . BOOL
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (31) numeric-type -> . integral-type
    (32) numeric-type -> . floating-point-type
    (12) class-type -> . IDENTIFIER
    (40) array-type -> . simple-type rank-specifier
    (33) integral-type -> . INT
    (34) integral-type -> . UINT
    (35) integral-type -> . LONG
    (36) integral-type -> . ULONG
    (37) integral-type -> . CHAR
    (38) floating-point-type -> . FLOAT
    (39) floating-point-type -> . DOUBLE

    BOOL            shift and go to state 48
    IDENTIFIER      shift and go to state 15
    INT             shift and go to state 25
    UINT            shift and go to state 42
    LONG            shift and go to state 44
    ULONG           shift and go to state 27
    CHAR            shift and go to state 22
    FLOAT           shift and go to state 47
    DOUBLE          shift and go to state 52

    array-type                     shift and go to state 36
    integral-type                  shift and go to state 26
    type                           shift and go to state 220
    numeric-type                   shift and go to state 28
    floating-point-type            shift and go to state 39
    simple-type                    shift and go to state 219
    class-type                     shift and go to state 49

state 186

    (85) unary-expression -> BITCOMP . unary-expression
    (81) unary-expression -> . primary-expression
    (82) unary-expression -> . PLUS unary-expression
    (83) unary-expression -> . MINUS unary-expression
    (84) unary-expression -> . BITNOT unary-expression
    (85) unary-expression -> . BITCOMP unary-expression
    (86) unary-expression -> . TIMES unary-expression
    (87) unary-expression -> . pre-increment-expression
    (88) unary-expression -> . pre-decrement-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 190
    MINUS           shift and go to state 187
    BITNOT          shift and go to state 197
    BITCOMP         shift and go to state 186
    TIMES           shift and go to state 184
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117
    NEW             shift and go to state 185
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88

    this-access                    shift and go to state 77
    post-increment-expression      shift and go to state 182
    member-access                  shift and go to state 79
    primary-no-array-creation-expression shift and go to state 82
    unary-expression               shift and go to state 279
    element-access                 shift and go to state 101
    literal                        shift and go to state 128
    base-access                    shift and go to state 126
    post-decrement-expression      shift and go to state 193
    array-creation-expression      shift and go to state 144
    object-creation-expression     shift and go to state 198
    pre-increment-expression       shift and go to state 202
    pre-decrement-expression       shift and go to state 205
    primary-expression             shift and go to state 217
    invocation-expression          shift and go to state 210
    parenthesized-expression       shift and go to state 96

state 187

    (83) unary-expression -> MINUS . unary-expression
    (81) unary-expression -> . primary-expression
    (82) unary-expression -> . PLUS unary-expression
    (83) unary-expression -> . MINUS unary-expression
    (84) unary-expression -> . BITNOT unary-expression
    (85) unary-expression -> . BITCOMP unary-expression
    (86) unary-expression -> . TIMES unary-expression
    (87) unary-expression -> . pre-increment-expression
    (88) unary-expression -> . pre-decrement-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 190
    MINUS           shift and go to state 187
    BITNOT          shift and go to state 197
    BITCOMP         shift and go to state 186
    TIMES           shift and go to state 184
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117
    NEW             shift and go to state 185
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88

    this-access                    shift and go to state 77
    post-increment-expression      shift and go to state 182
    member-access                  shift and go to state 79
    primary-no-array-creation-expression shift and go to state 82
    unary-expression               shift and go to state 280
    element-access                 shift and go to state 101
    literal                        shift and go to state 128
    base-access                    shift and go to state 126
    post-decrement-expression      shift and go to state 193
    array-creation-expression      shift and go to state 144
    object-creation-expression     shift and go to state 198
    pre-increment-expression       shift and go to state 202
    pre-decrement-expression       shift and go to state 205
    primary-expression             shift and go to state 217
    invocation-expression          shift and go to state 210
    parenthesized-expression       shift and go to state 96

state 188

    (55) conditional-and-expression -> inclusive-or-expression .
    (58) inclusive-or-expression -> inclusive-or-expression . BITOR exclusive-or-expression

    LOGAND          reduce using rule 55 (conditional-and-expression -> inclusive-or-expression .)
    CONDOP          reduce using rule 55 (conditional-and-expression -> inclusive-or-expression .)
    LOGOR           reduce using rule 55 (conditional-and-expression -> inclusive-or-expression .)
    DELIM           reduce using rule 55 (conditional-and-expression -> inclusive-or-expression .)
    CLOSE_PAREN     reduce using rule 55 (conditional-and-expression -> inclusive-or-expression .)
    COMMA           reduce using rule 55 (conditional-and-expression -> inclusive-or-expression .)
    CLOSE_BRACKET   reduce using rule 55 (conditional-and-expression -> inclusive-or-expression .)
    BLOCK_END       reduce using rule 55 (conditional-and-expression -> inclusive-or-expression .)
    COLON           reduce using rule 55 (conditional-and-expression -> inclusive-or-expression .)
    BITOR           shift and go to state 281


state 189

    (61) and-expression -> equality-expression .
    (64) equality-expression -> equality-expression . EQ relational-expression
    (65) equality-expression -> equality-expression . NE relational-expression

    BITAND          reduce using rule 61 (and-expression -> equality-expression .)
    BITXOR          reduce using rule 61 (and-expression -> equality-expression .)
    BITOR           reduce using rule 61 (and-expression -> equality-expression .)
    LOGAND          reduce using rule 61 (and-expression -> equality-expression .)
    CONDOP          reduce using rule 61 (and-expression -> equality-expression .)
    LOGOR           reduce using rule 61 (and-expression -> equality-expression .)
    COMMA           reduce using rule 61 (and-expression -> equality-expression .)
    CLOSE_PAREN     reduce using rule 61 (and-expression -> equality-expression .)
    DELIM           reduce using rule 61 (and-expression -> equality-expression .)
    CLOSE_BRACKET   reduce using rule 61 (and-expression -> equality-expression .)
    BLOCK_END       reduce using rule 61 (and-expression -> equality-expression .)
    COLON           reduce using rule 61 (and-expression -> equality-expression .)
    EQ              shift and go to state 282
    NE              shift and go to state 283


state 190

    (82) unary-expression -> PLUS . unary-expression
    (81) unary-expression -> . primary-expression
    (82) unary-expression -> . PLUS unary-expression
    (83) unary-expression -> . MINUS unary-expression
    (84) unary-expression -> . BITNOT unary-expression
    (85) unary-expression -> . BITCOMP unary-expression
    (86) unary-expression -> . TIMES unary-expression
    (87) unary-expression -> . pre-increment-expression
    (88) unary-expression -> . pre-decrement-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 190
    MINUS           shift and go to state 187
    BITNOT          shift and go to state 197
    BITCOMP         shift and go to state 186
    TIMES           shift and go to state 184
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117
    NEW             shift and go to state 185
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88

    this-access                    shift and go to state 77
    post-increment-expression      shift and go to state 182
    member-access                  shift and go to state 79
    primary-no-array-creation-expression shift and go to state 82
    unary-expression               shift and go to state 284
    element-access                 shift and go to state 101
    literal                        shift and go to state 128
    base-access                    shift and go to state 126
    post-decrement-expression      shift and go to state 193
    array-creation-expression      shift and go to state 144
    object-creation-expression     shift and go to state 198
    pre-increment-expression       shift and go to state 202
    pre-decrement-expression       shift and go to state 205
    primary-expression             shift and go to state 217
    invocation-expression          shift and go to state 210
    parenthesized-expression       shift and go to state 96

state 191

    (49) expression -> conditional-expression .

    COMMA           reduce using rule 49 (expression -> conditional-expression .)
    BLOCK_END       reduce using rule 49 (expression -> conditional-expression .)
    CLOSE_BRACKET   reduce using rule 49 (expression -> conditional-expression .)
    COLON           reduce using rule 49 (expression -> conditional-expression .)
    DELIM           reduce using rule 49 (expression -> conditional-expression .)
    CLOSE_PAREN     reduce using rule 49 (expression -> conditional-expression .)


state 192

    (53) conditional-or-expression -> conditional-and-expression .
    (56) conditional-and-expression -> conditional-and-expression . LOGAND inclusive-or-expression

    CONDOP          reduce using rule 53 (conditional-or-expression -> conditional-and-expression .)
    LOGOR           reduce using rule 53 (conditional-or-expression -> conditional-and-expression .)
    COMMA           reduce using rule 53 (conditional-or-expression -> conditional-and-expression .)
    CLOSE_PAREN     reduce using rule 53 (conditional-or-expression -> conditional-and-expression .)
    COLON           reduce using rule 53 (conditional-or-expression -> conditional-and-expression .)
    DELIM           reduce using rule 53 (conditional-or-expression -> conditional-and-expression .)
    CLOSE_BRACKET   reduce using rule 53 (conditional-or-expression -> conditional-and-expression .)
    BLOCK_END       reduce using rule 53 (conditional-or-expression -> conditional-and-expression .)
    LOGAND          shift and go to state 285


state 193

    (112) primary-no-array-creation-expression -> post-decrement-expression .

    OPEN_BRACKET    reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)
    DOT             reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)
    OPEN_PAREN      reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)
    INCRE           reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)
    DECRE           reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)
    TIMES           reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)
    DIV             reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)
    MOD             reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)
    PLUS            reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)
    MINUS           reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)
    LSHIFT          reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)
    RSHIFT          reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)
    LT              reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)
    GT              reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)
    LE              reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)
    GE              reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)
    EQ              reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)
    NE              reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)
    BITAND          reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)
    BITXOR          reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)
    BITOR           reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)
    LOGAND          reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)
    CONDOP          reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)
    LOGOR           reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)
    DELIM           reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)
    CLOSE_PAREN     reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)
    COMMA           reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)
    CLOSE_BRACKET   reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)
    BLOCK_END       reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)
    COLON           reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)
    ASSIGN          reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)
    PLUSEQUAL       reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)
    MINUSEQUAL      reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)
    TIMESEQUAL      reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)
    DIVEQUAL        reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)
    MODEQUAL        reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)
    BITANDEQUAL     reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)
    BITOREQUAL      reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)
    BITXOREQUAL     reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)
    LSHIFTEQUAL     reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)
    RSHIFTEQUAL     reduce using rule 112 (primary-no-array-creation-expression -> post-decrement-expression .)


state 194

    (104) primary-no-array-creation-expression -> IDENTIFIER .

    OPEN_BRACKET    reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    DOT             reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    OPEN_PAREN      reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    INCRE           reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    DECRE           reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    TIMES           reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    DIV             reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    MOD             reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    PLUS            reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    MINUS           reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    LSHIFT          reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    RSHIFT          reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    LT              reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    GT              reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    LE              reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    GE              reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    EQ              reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    NE              reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    BITAND          reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    BITXOR          reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    BITOR           reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    LOGAND          reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    CONDOP          reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    LOGOR           reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    DELIM           reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    COMMA           reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    BLOCK_END       reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    COLON           reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    ASSIGN          reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    PLUSEQUAL       reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    MINUSEQUAL      reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    TIMESEQUAL      reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    DIVEQUAL        reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    MODEQUAL        reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    BITANDEQUAL     reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    BITOREQUAL      reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    BITXOREQUAL     reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    LSHIFTEQUAL     reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    RSHIFTEQUAL     reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)


state 195

    (249) expression-opt -> empty .

    DELIM           reduce using rule 249 (expression-opt -> empty .)


state 196

    (50) expression -> assignment .

    COMMA           reduce using rule 50 (expression -> assignment .)
    BLOCK_END       reduce using rule 50 (expression -> assignment .)
    CLOSE_BRACKET   reduce using rule 50 (expression -> assignment .)
    COLON           reduce using rule 50 (expression -> assignment .)
    DELIM           reduce using rule 50 (expression -> assignment .)
    CLOSE_PAREN     reduce using rule 50 (expression -> assignment .)


state 197

    (84) unary-expression -> BITNOT . unary-expression
    (81) unary-expression -> . primary-expression
    (82) unary-expression -> . PLUS unary-expression
    (83) unary-expression -> . MINUS unary-expression
    (84) unary-expression -> . BITNOT unary-expression
    (85) unary-expression -> . BITCOMP unary-expression
    (86) unary-expression -> . TIMES unary-expression
    (87) unary-expression -> . pre-increment-expression
    (88) unary-expression -> . pre-decrement-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 190
    MINUS           shift and go to state 187
    BITNOT          shift and go to state 197
    BITCOMP         shift and go to state 186
    TIMES           shift and go to state 184
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117
    NEW             shift and go to state 185
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88

    this-access                    shift and go to state 77
    post-increment-expression      shift and go to state 182
    member-access                  shift and go to state 79
    primary-no-array-creation-expression shift and go to state 82
    unary-expression               shift and go to state 286
    element-access                 shift and go to state 101
    literal                        shift and go to state 128
    base-access                    shift and go to state 126
    post-decrement-expression      shift and go to state 193
    array-creation-expression      shift and go to state 144
    object-creation-expression     shift and go to state 198
    pre-increment-expression       shift and go to state 202
    pre-decrement-expression       shift and go to state 205
    primary-expression             shift and go to state 217
    invocation-expression          shift and go to state 210
    parenthesized-expression       shift and go to state 96

state 198

    (113) primary-no-array-creation-expression -> object-creation-expression .

    OPEN_BRACKET    reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)
    DOT             reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)
    OPEN_PAREN      reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)
    INCRE           reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)
    DECRE           reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)
    TIMES           reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)
    DIV             reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)
    MOD             reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)
    PLUS            reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)
    MINUS           reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)
    LSHIFT          reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)
    RSHIFT          reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)
    LT              reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)
    GT              reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)
    LE              reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)
    GE              reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)
    EQ              reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)
    NE              reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)
    BITAND          reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)
    BITXOR          reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)
    BITOR           reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)
    LOGAND          reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)
    CONDOP          reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)
    LOGOR           reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)
    DELIM           reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)
    CLOSE_PAREN     reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)
    COMMA           reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)
    CLOSE_BRACKET   reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)
    BLOCK_END       reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)
    COLON           reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)
    ASSIGN          reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)
    PLUSEQUAL       reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)
    MINUSEQUAL      reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)
    TIMESEQUAL      reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)
    DIVEQUAL        reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)
    MODEQUAL        reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)
    BITANDEQUAL     reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)
    BITOREQUAL      reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)
    BITXOREQUAL     reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)
    LSHIFTEQUAL     reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)
    RSHIFTEQUAL     reduce using rule 113 (primary-no-array-creation-expression -> object-creation-expression .)


state 199

    (77) multiplicative-expression -> unary-expression .

    TIMES           reduce using rule 77 (multiplicative-expression -> unary-expression .)
    DIV             reduce using rule 77 (multiplicative-expression -> unary-expression .)
    MOD             reduce using rule 77 (multiplicative-expression -> unary-expression .)
    PLUS            reduce using rule 77 (multiplicative-expression -> unary-expression .)
    MINUS           reduce using rule 77 (multiplicative-expression -> unary-expression .)
    LSHIFT          reduce using rule 77 (multiplicative-expression -> unary-expression .)
    RSHIFT          reduce using rule 77 (multiplicative-expression -> unary-expression .)
    LT              reduce using rule 77 (multiplicative-expression -> unary-expression .)
    GT              reduce using rule 77 (multiplicative-expression -> unary-expression .)
    LE              reduce using rule 77 (multiplicative-expression -> unary-expression .)
    GE              reduce using rule 77 (multiplicative-expression -> unary-expression .)
    EQ              reduce using rule 77 (multiplicative-expression -> unary-expression .)
    NE              reduce using rule 77 (multiplicative-expression -> unary-expression .)
    BITAND          reduce using rule 77 (multiplicative-expression -> unary-expression .)
    BITXOR          reduce using rule 77 (multiplicative-expression -> unary-expression .)
    BITOR           reduce using rule 77 (multiplicative-expression -> unary-expression .)
    LOGAND          reduce using rule 77 (multiplicative-expression -> unary-expression .)
    CONDOP          reduce using rule 77 (multiplicative-expression -> unary-expression .)
    LOGOR           reduce using rule 77 (multiplicative-expression -> unary-expression .)
    DELIM           reduce using rule 77 (multiplicative-expression -> unary-expression .)
    COMMA           reduce using rule 77 (multiplicative-expression -> unary-expression .)
    CLOSE_PAREN     reduce using rule 77 (multiplicative-expression -> unary-expression .)
    CLOSE_BRACKET   reduce using rule 77 (multiplicative-expression -> unary-expression .)
    BLOCK_END       reduce using rule 77 (multiplicative-expression -> unary-expression .)
    COLON           reduce using rule 77 (multiplicative-expression -> unary-expression .)


state 200

    (247) return-statement -> RETURN expression-opt . DELIM

    DELIM           shift and go to state 287


state 201

    (59) exclusive-or-expression -> and-expression .
    (62) and-expression -> and-expression . BITAND equality-expression

    BITXOR          reduce using rule 59 (exclusive-or-expression -> and-expression .)
    BITOR           reduce using rule 59 (exclusive-or-expression -> and-expression .)
    LOGAND          reduce using rule 59 (exclusive-or-expression -> and-expression .)
    CONDOP          reduce using rule 59 (exclusive-or-expression -> and-expression .)
    LOGOR           reduce using rule 59 (exclusive-or-expression -> and-expression .)
    DELIM           reduce using rule 59 (exclusive-or-expression -> and-expression .)
    CLOSE_PAREN     reduce using rule 59 (exclusive-or-expression -> and-expression .)
    COMMA           reduce using rule 59 (exclusive-or-expression -> and-expression .)
    CLOSE_BRACKET   reduce using rule 59 (exclusive-or-expression -> and-expression .)
    BLOCK_END       reduce using rule 59 (exclusive-or-expression -> and-expression .)
    COLON           reduce using rule 59 (exclusive-or-expression -> and-expression .)
    BITAND          shift and go to state 288


state 202

    (87) unary-expression -> pre-increment-expression .

    TIMES           reduce using rule 87 (unary-expression -> pre-increment-expression .)
    DIV             reduce using rule 87 (unary-expression -> pre-increment-expression .)
    MOD             reduce using rule 87 (unary-expression -> pre-increment-expression .)
    PLUS            reduce using rule 87 (unary-expression -> pre-increment-expression .)
    MINUS           reduce using rule 87 (unary-expression -> pre-increment-expression .)
    LSHIFT          reduce using rule 87 (unary-expression -> pre-increment-expression .)
    RSHIFT          reduce using rule 87 (unary-expression -> pre-increment-expression .)
    LT              reduce using rule 87 (unary-expression -> pre-increment-expression .)
    GT              reduce using rule 87 (unary-expression -> pre-increment-expression .)
    LE              reduce using rule 87 (unary-expression -> pre-increment-expression .)
    GE              reduce using rule 87 (unary-expression -> pre-increment-expression .)
    EQ              reduce using rule 87 (unary-expression -> pre-increment-expression .)
    NE              reduce using rule 87 (unary-expression -> pre-increment-expression .)
    BITAND          reduce using rule 87 (unary-expression -> pre-increment-expression .)
    BITXOR          reduce using rule 87 (unary-expression -> pre-increment-expression .)
    BITOR           reduce using rule 87 (unary-expression -> pre-increment-expression .)
    LOGAND          reduce using rule 87 (unary-expression -> pre-increment-expression .)
    CONDOP          reduce using rule 87 (unary-expression -> pre-increment-expression .)
    LOGOR           reduce using rule 87 (unary-expression -> pre-increment-expression .)
    CLOSE_BRACKET   reduce using rule 87 (unary-expression -> pre-increment-expression .)
    COMMA           reduce using rule 87 (unary-expression -> pre-increment-expression .)
    DELIM           reduce using rule 87 (unary-expression -> pre-increment-expression .)
    CLOSE_PAREN     reduce using rule 87 (unary-expression -> pre-increment-expression .)
    BLOCK_END       reduce using rule 87 (unary-expression -> pre-increment-expression .)
    COLON           reduce using rule 87 (unary-expression -> pre-increment-expression .)


state 203

    (63) equality-expression -> relational-expression .
    (67) relational-expression -> relational-expression . LT shift-expression
    (68) relational-expression -> relational-expression . GT shift-expression
    (69) relational-expression -> relational-expression . LE shift-expression
    (70) relational-expression -> relational-expression . GE shift-expression

    EQ              reduce using rule 63 (equality-expression -> relational-expression .)
    NE              reduce using rule 63 (equality-expression -> relational-expression .)
    BITAND          reduce using rule 63 (equality-expression -> relational-expression .)
    BITXOR          reduce using rule 63 (equality-expression -> relational-expression .)
    BITOR           reduce using rule 63 (equality-expression -> relational-expression .)
    LOGAND          reduce using rule 63 (equality-expression -> relational-expression .)
    CONDOP          reduce using rule 63 (equality-expression -> relational-expression .)
    LOGOR           reduce using rule 63 (equality-expression -> relational-expression .)
    CLOSE_BRACKET   reduce using rule 63 (equality-expression -> relational-expression .)
    COMMA           reduce using rule 63 (equality-expression -> relational-expression .)
    CLOSE_PAREN     reduce using rule 63 (equality-expression -> relational-expression .)
    DELIM           reduce using rule 63 (equality-expression -> relational-expression .)
    BLOCK_END       reduce using rule 63 (equality-expression -> relational-expression .)
    COLON           reduce using rule 63 (equality-expression -> relational-expression .)
    LT              shift and go to state 291
    GT              shift and go to state 292
    LE              shift and go to state 289
    GE              shift and go to state 290


state 204

    (66) relational-expression -> shift-expression .
    (72) shift-expression -> shift-expression . LSHIFT additive-expression
    (73) shift-expression -> shift-expression . RSHIFT additive-expression

    LT              reduce using rule 66 (relational-expression -> shift-expression .)
    GT              reduce using rule 66 (relational-expression -> shift-expression .)
    LE              reduce using rule 66 (relational-expression -> shift-expression .)
    GE              reduce using rule 66 (relational-expression -> shift-expression .)
    EQ              reduce using rule 66 (relational-expression -> shift-expression .)
    NE              reduce using rule 66 (relational-expression -> shift-expression .)
    BITAND          reduce using rule 66 (relational-expression -> shift-expression .)
    BITXOR          reduce using rule 66 (relational-expression -> shift-expression .)
    BITOR           reduce using rule 66 (relational-expression -> shift-expression .)
    LOGAND          reduce using rule 66 (relational-expression -> shift-expression .)
    CONDOP          reduce using rule 66 (relational-expression -> shift-expression .)
    LOGOR           reduce using rule 66 (relational-expression -> shift-expression .)
    COLON           reduce using rule 66 (relational-expression -> shift-expression .)
    CLOSE_PAREN     reduce using rule 66 (relational-expression -> shift-expression .)
    COMMA           reduce using rule 66 (relational-expression -> shift-expression .)
    BLOCK_END       reduce using rule 66 (relational-expression -> shift-expression .)
    DELIM           reduce using rule 66 (relational-expression -> shift-expression .)
    CLOSE_BRACKET   reduce using rule 66 (relational-expression -> shift-expression .)
    LSHIFT          shift and go to state 294
    RSHIFT          shift and go to state 293


state 205

    (88) unary-expression -> pre-decrement-expression .

    TIMES           reduce using rule 88 (unary-expression -> pre-decrement-expression .)
    DIV             reduce using rule 88 (unary-expression -> pre-decrement-expression .)
    MOD             reduce using rule 88 (unary-expression -> pre-decrement-expression .)
    PLUS            reduce using rule 88 (unary-expression -> pre-decrement-expression .)
    MINUS           reduce using rule 88 (unary-expression -> pre-decrement-expression .)
    LSHIFT          reduce using rule 88 (unary-expression -> pre-decrement-expression .)
    RSHIFT          reduce using rule 88 (unary-expression -> pre-decrement-expression .)
    LT              reduce using rule 88 (unary-expression -> pre-decrement-expression .)
    GT              reduce using rule 88 (unary-expression -> pre-decrement-expression .)
    LE              reduce using rule 88 (unary-expression -> pre-decrement-expression .)
    GE              reduce using rule 88 (unary-expression -> pre-decrement-expression .)
    EQ              reduce using rule 88 (unary-expression -> pre-decrement-expression .)
    NE              reduce using rule 88 (unary-expression -> pre-decrement-expression .)
    BITAND          reduce using rule 88 (unary-expression -> pre-decrement-expression .)
    BITXOR          reduce using rule 88 (unary-expression -> pre-decrement-expression .)
    BITOR           reduce using rule 88 (unary-expression -> pre-decrement-expression .)
    LOGAND          reduce using rule 88 (unary-expression -> pre-decrement-expression .)
    CONDOP          reduce using rule 88 (unary-expression -> pre-decrement-expression .)
    LOGOR           reduce using rule 88 (unary-expression -> pre-decrement-expression .)
    CLOSE_BRACKET   reduce using rule 88 (unary-expression -> pre-decrement-expression .)
    COMMA           reduce using rule 88 (unary-expression -> pre-decrement-expression .)
    DELIM           reduce using rule 88 (unary-expression -> pre-decrement-expression .)
    CLOSE_PAREN     reduce using rule 88 (unary-expression -> pre-decrement-expression .)
    BLOCK_END       reduce using rule 88 (unary-expression -> pre-decrement-expression .)
    COLON           reduce using rule 88 (unary-expression -> pre-decrement-expression .)


state 206

    (248) expression-opt -> expression .

    DELIM           reduce using rule 248 (expression-opt -> expression .)


state 207

    (74) additive-expression -> multiplicative-expression .
    (78) multiplicative-expression -> multiplicative-expression . TIMES unary-expression
    (79) multiplicative-expression -> multiplicative-expression . DIV unary-expression
    (80) multiplicative-expression -> multiplicative-expression . MOD unary-expression

    PLUS            reduce using rule 74 (additive-expression -> multiplicative-expression .)
    MINUS           reduce using rule 74 (additive-expression -> multiplicative-expression .)
    LSHIFT          reduce using rule 74 (additive-expression -> multiplicative-expression .)
    RSHIFT          reduce using rule 74 (additive-expression -> multiplicative-expression .)
    LT              reduce using rule 74 (additive-expression -> multiplicative-expression .)
    GT              reduce using rule 74 (additive-expression -> multiplicative-expression .)
    LE              reduce using rule 74 (additive-expression -> multiplicative-expression .)
    GE              reduce using rule 74 (additive-expression -> multiplicative-expression .)
    EQ              reduce using rule 74 (additive-expression -> multiplicative-expression .)
    NE              reduce using rule 74 (additive-expression -> multiplicative-expression .)
    BITAND          reduce using rule 74 (additive-expression -> multiplicative-expression .)
    BITXOR          reduce using rule 74 (additive-expression -> multiplicative-expression .)
    BITOR           reduce using rule 74 (additive-expression -> multiplicative-expression .)
    LOGAND          reduce using rule 74 (additive-expression -> multiplicative-expression .)
    CONDOP          reduce using rule 74 (additive-expression -> multiplicative-expression .)
    LOGOR           reduce using rule 74 (additive-expression -> multiplicative-expression .)
    DELIM           reduce using rule 74 (additive-expression -> multiplicative-expression .)
    CLOSE_PAREN     reduce using rule 74 (additive-expression -> multiplicative-expression .)
    COMMA           reduce using rule 74 (additive-expression -> multiplicative-expression .)
    CLOSE_BRACKET   reduce using rule 74 (additive-expression -> multiplicative-expression .)
    BLOCK_END       reduce using rule 74 (additive-expression -> multiplicative-expression .)
    COLON           reduce using rule 74 (additive-expression -> multiplicative-expression .)
    TIMES           shift and go to state 297
    DIV             shift and go to state 295
    MOD             shift and go to state 296


state 208

    (71) shift-expression -> additive-expression .
    (75) additive-expression -> additive-expression . PLUS multiplicative-expression
    (76) additive-expression -> additive-expression . MINUS multiplicative-expression

    LSHIFT          reduce using rule 71 (shift-expression -> additive-expression .)
    RSHIFT          reduce using rule 71 (shift-expression -> additive-expression .)
    LT              reduce using rule 71 (shift-expression -> additive-expression .)
    GT              reduce using rule 71 (shift-expression -> additive-expression .)
    LE              reduce using rule 71 (shift-expression -> additive-expression .)
    GE              reduce using rule 71 (shift-expression -> additive-expression .)
    EQ              reduce using rule 71 (shift-expression -> additive-expression .)
    NE              reduce using rule 71 (shift-expression -> additive-expression .)
    BITAND          reduce using rule 71 (shift-expression -> additive-expression .)
    BITXOR          reduce using rule 71 (shift-expression -> additive-expression .)
    BITOR           reduce using rule 71 (shift-expression -> additive-expression .)
    LOGAND          reduce using rule 71 (shift-expression -> additive-expression .)
    CONDOP          reduce using rule 71 (shift-expression -> additive-expression .)
    LOGOR           reduce using rule 71 (shift-expression -> additive-expression .)
    DELIM           reduce using rule 71 (shift-expression -> additive-expression .)
    CLOSE_PAREN     reduce using rule 71 (shift-expression -> additive-expression .)
    COMMA           reduce using rule 71 (shift-expression -> additive-expression .)
    CLOSE_BRACKET   reduce using rule 71 (shift-expression -> additive-expression .)
    BLOCK_END       reduce using rule 71 (shift-expression -> additive-expression .)
    COLON           reduce using rule 71 (shift-expression -> additive-expression .)
    PLUS            shift and go to state 298
    MINUS           shift and go to state 299


state 209

    (133) assignment -> primary-expression . assignment-operator expression
    (115) member-access -> primary-expression . DOT IDENTIFIER
    (116) invocation-expression -> primary-expression . OPEN_PAREN argument-list-opt CLOSE_PAREN
    (128) post-increment-expression -> primary-expression . INCRE
    (129) post-decrement-expression -> primary-expression . DECRE
    (81) unary-expression -> primary-expression .
    (134) assignment-operator -> . ASSIGN
    (135) assignment-operator -> . PLUSEQUAL
    (136) assignment-operator -> . MINUSEQUAL
    (137) assignment-operator -> . TIMESEQUAL
    (138) assignment-operator -> . DIVEQUAL
    (139) assignment-operator -> . MODEQUAL
    (140) assignment-operator -> . BITANDEQUAL
    (141) assignment-operator -> . BITOREQUAL
    (142) assignment-operator -> . BITXOREQUAL
    (143) assignment-operator -> . LSHIFTEQUAL
    (144) assignment-operator -> . RSHIFTEQUAL

    DOT             shift and go to state 246
    OPEN_PAREN      shift and go to state 245
    INCRE           shift and go to state 244
    DECRE           shift and go to state 241
    TIMES           reduce using rule 81 (unary-expression -> primary-expression .)
    DIV             reduce using rule 81 (unary-expression -> primary-expression .)
    MOD             reduce using rule 81 (unary-expression -> primary-expression .)
    PLUS            reduce using rule 81 (unary-expression -> primary-expression .)
    MINUS           reduce using rule 81 (unary-expression -> primary-expression .)
    LSHIFT          reduce using rule 81 (unary-expression -> primary-expression .)
    RSHIFT          reduce using rule 81 (unary-expression -> primary-expression .)
    LT              reduce using rule 81 (unary-expression -> primary-expression .)
    GT              reduce using rule 81 (unary-expression -> primary-expression .)
    LE              reduce using rule 81 (unary-expression -> primary-expression .)
    GE              reduce using rule 81 (unary-expression -> primary-expression .)
    EQ              reduce using rule 81 (unary-expression -> primary-expression .)
    NE              reduce using rule 81 (unary-expression -> primary-expression .)
    BITAND          reduce using rule 81 (unary-expression -> primary-expression .)
    BITXOR          reduce using rule 81 (unary-expression -> primary-expression .)
    BITOR           reduce using rule 81 (unary-expression -> primary-expression .)
    LOGAND          reduce using rule 81 (unary-expression -> primary-expression .)
    CONDOP          reduce using rule 81 (unary-expression -> primary-expression .)
    LOGOR           reduce using rule 81 (unary-expression -> primary-expression .)
    CLOSE_BRACKET   reduce using rule 81 (unary-expression -> primary-expression .)
    COMMA           reduce using rule 81 (unary-expression -> primary-expression .)
    DELIM           reduce using rule 81 (unary-expression -> primary-expression .)
    COLON           reduce using rule 81 (unary-expression -> primary-expression .)
    CLOSE_PAREN     reduce using rule 81 (unary-expression -> primary-expression .)
    BLOCK_END       reduce using rule 81 (unary-expression -> primary-expression .)
    ASSIGN          shift and go to state 248
    PLUSEQUAL       shift and go to state 243
    MINUSEQUAL      shift and go to state 238
    TIMESEQUAL      shift and go to state 237
    DIVEQUAL        shift and go to state 234
    MODEQUAL        shift and go to state 240
    BITANDEQUAL     shift and go to state 236
    BITOREQUAL      shift and go to state 242
    BITXOREQUAL     shift and go to state 249
    LSHIFTEQUAL     shift and go to state 247
    RSHIFTEQUAL     shift and go to state 235

    assignment-operator            shift and go to state 239

state 210

    (107) primary-no-array-creation-expression -> invocation-expression .

    OPEN_BRACKET    reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)
    DOT             reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)
    OPEN_PAREN      reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)
    INCRE           reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)
    DECRE           reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)
    TIMES           reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)
    DIV             reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)
    MOD             reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)
    PLUS            reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)
    MINUS           reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)
    LSHIFT          reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)
    RSHIFT          reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)
    LT              reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)
    GT              reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)
    LE              reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)
    GE              reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)
    EQ              reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)
    NE              reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)
    BITAND          reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)
    BITXOR          reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)
    BITOR           reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)
    LOGAND          reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)
    CONDOP          reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)
    LOGOR           reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)
    DELIM           reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)
    CLOSE_PAREN     reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)
    COMMA           reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)
    CLOSE_BRACKET   reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)
    BLOCK_END       reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)
    COLON           reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)
    ASSIGN          reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)
    PLUSEQUAL       reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)
    MINUSEQUAL      reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)
    TIMESEQUAL      reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)
    DIVEQUAL        reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)
    MODEQUAL        reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)
    BITANDEQUAL     reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)
    BITOREQUAL      reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)
    BITXOREQUAL     reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)
    LSHIFTEQUAL     reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)
    RSHIFTEQUAL     reduce using rule 107 (primary-no-array-creation-expression -> invocation-expression .)


state 211

    (51) conditional-expression -> conditional-or-expression .
    (52) conditional-expression -> conditional-or-expression . CONDOP expression COLON expression
    (54) conditional-or-expression -> conditional-or-expression . LOGOR conditional-and-expression

    COLON           reduce using rule 51 (conditional-expression -> conditional-or-expression .)
    CLOSE_BRACKET   reduce using rule 51 (conditional-expression -> conditional-or-expression .)
    COMMA           reduce using rule 51 (conditional-expression -> conditional-or-expression .)
    DELIM           reduce using rule 51 (conditional-expression -> conditional-or-expression .)
    CLOSE_PAREN     reduce using rule 51 (conditional-expression -> conditional-or-expression .)
    BLOCK_END       reduce using rule 51 (conditional-expression -> conditional-or-expression .)
    CONDOP          shift and go to state 301
    LOGOR           shift and go to state 300


state 212

    (180) declaration-statement -> local-constant-declaration DELIM .

    IDENTIFIER      reduce using rule 180 (declaration-statement -> local-constant-declaration DELIM .)
    CONST           reduce using rule 180 (declaration-statement -> local-constant-declaration DELIM .)
    BLOCK_BEGIN     reduce using rule 180 (declaration-statement -> local-constant-declaration DELIM .)
    DELIM           reduce using rule 180 (declaration-statement -> local-constant-declaration DELIM .)
    IF              reduce using rule 180 (declaration-statement -> local-constant-declaration DELIM .)
    SWITCH          reduce using rule 180 (declaration-statement -> local-constant-declaration DELIM .)
    WHILE           reduce using rule 180 (declaration-statement -> local-constant-declaration DELIM .)
    FOR             reduce using rule 180 (declaration-statement -> local-constant-declaration DELIM .)
    FOREACH         reduce using rule 180 (declaration-statement -> local-constant-declaration DELIM .)
    DO              reduce using rule 180 (declaration-statement -> local-constant-declaration DELIM .)
    BREAK           reduce using rule 180 (declaration-statement -> local-constant-declaration DELIM .)
    CONTINUE        reduce using rule 180 (declaration-statement -> local-constant-declaration DELIM .)
    GOTO            reduce using rule 180 (declaration-statement -> local-constant-declaration DELIM .)
    RETURN          reduce using rule 180 (declaration-statement -> local-constant-declaration DELIM .)
    BOOL            reduce using rule 180 (declaration-statement -> local-constant-declaration DELIM .)
    NEW             reduce using rule 180 (declaration-statement -> local-constant-declaration DELIM .)
    INCRE           reduce using rule 180 (declaration-statement -> local-constant-declaration DELIM .)
    DECRE           reduce using rule 180 (declaration-statement -> local-constant-declaration DELIM .)
    INT             reduce using rule 180 (declaration-statement -> local-constant-declaration DELIM .)
    UINT            reduce using rule 180 (declaration-statement -> local-constant-declaration DELIM .)
    LONG            reduce using rule 180 (declaration-statement -> local-constant-declaration DELIM .)
    ULONG           reduce using rule 180 (declaration-statement -> local-constant-declaration DELIM .)
    CHAR            reduce using rule 180 (declaration-statement -> local-constant-declaration DELIM .)
    FLOAT           reduce using rule 180 (declaration-statement -> local-constant-declaration DELIM .)
    DOUBLE          reduce using rule 180 (declaration-statement -> local-constant-declaration DELIM .)
    ICONST          reduce using rule 180 (declaration-statement -> local-constant-declaration DELIM .)
    UICONST         reduce using rule 180 (declaration-statement -> local-constant-declaration DELIM .)
    LICONST         reduce using rule 180 (declaration-statement -> local-constant-declaration DELIM .)
    ULICONST        reduce using rule 180 (declaration-statement -> local-constant-declaration DELIM .)
    FCONST          reduce using rule 180 (declaration-statement -> local-constant-declaration DELIM .)
    DCONST          reduce using rule 180 (declaration-statement -> local-constant-declaration DELIM .)
    MCONST          reduce using rule 180 (declaration-statement -> local-constant-declaration DELIM .)
    CCONST          reduce using rule 180 (declaration-statement -> local-constant-declaration DELIM .)
    SCONST          reduce using rule 180 (declaration-statement -> local-constant-declaration DELIM .)
    VSCONST         reduce using rule 180 (declaration-statement -> local-constant-declaration DELIM .)
    TRUE            reduce using rule 180 (declaration-statement -> local-constant-declaration DELIM .)
    FALSE           reduce using rule 180 (declaration-statement -> local-constant-declaration DELIM .)
    OPEN_PAREN      reduce using rule 180 (declaration-statement -> local-constant-declaration DELIM .)
    THIS            reduce using rule 180 (declaration-statement -> local-constant-declaration DELIM .)
    BASE            reduce using rule 180 (declaration-statement -> local-constant-declaration DELIM .)
    BLOCK_END       reduce using rule 180 (declaration-statement -> local-constant-declaration DELIM .)
    CASE            reduce using rule 180 (declaration-statement -> local-constant-declaration DELIM .)
    DEFAULT         reduce using rule 180 (declaration-statement -> local-constant-declaration DELIM .)


state 213

    (226) for-statement -> FOR OPEN_PAREN . for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement
    (227) for-initializer-opt -> . for-initializer
    (228) for-initializer-opt -> . empty
    (229) for-initializer -> . local-variable-declaration
    (230) for-initializer -> . statement-expression-list
    (269) empty -> .
    (181) local-variable-declaration -> . type local-variable-declarators
    (237) statement-expression-list -> . statement-expression
    (238) statement-expression-list -> . statement-expression-list COMMA statement-expression
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (197) statement-expression -> . invocation-expression
    (198) statement-expression -> . object-creation-expression
    (199) statement-expression -> . assignment
    (200) statement-expression -> . post-increment-expression
    (201) statement-expression -> . post-decrement-expression
    (202) statement-expression -> . pre-increment-expression
    (203) statement-expression -> . pre-decrement-expression
    (29) simple-type -> . numeric-type
    (30) simple-type -> . BOOL
    (12) class-type -> . IDENTIFIER
    (40) array-type -> . simple-type rank-specifier
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (133) assignment -> . primary-expression assignment-operator expression
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression
    (31) numeric-type -> . integral-type
    (32) numeric-type -> . floating-point-type
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (33) integral-type -> . INT
    (34) integral-type -> . UINT
    (35) integral-type -> . LONG
    (36) integral-type -> . ULONG
    (37) integral-type -> . CHAR
    (38) floating-point-type -> . FLOAT
    (39) floating-point-type -> . DOUBLE
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET

    DELIM           reduce using rule 269 (empty -> .)
    BOOL            shift and go to state 48
    IDENTIFIER      shift and go to state 305
    NEW             shift and go to state 120
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117
    INT             shift and go to state 25
    UINT            shift and go to state 42
    LONG            shift and go to state 44
    ULONG           shift and go to state 27
    CHAR            shift and go to state 22
    FLOAT           shift and go to state 47
    DOUBLE          shift and go to state 52
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88

    this-access                    shift and go to state 77
    for-initializer                shift and go to state 302
    member-access                  shift and go to state 79
    array-creation-expression      shift and go to state 144
    simple-type                    shift and go to state 23
    primary-no-array-creation-expression shift and go to state 82
    integral-type                  shift and go to state 26
    numeric-type                   shift and go to state 28
    post-increment-expression      shift and go to state 83
    element-access                 shift and go to state 101
    statement-expression           shift and go to state 303
    base-access                    shift and go to state 126
    literal                        shift and go to state 128
    post-decrement-expression      shift and go to state 132
    statement-expression-list      shift and go to state 304
    type                           shift and go to state 130
    empty                          shift and go to state 306
    array-type                     shift and go to state 36
    floating-point-type            shift and go to state 39
    assignment                     shift and go to state 145
    primary-expression             shift and go to state 149
    object-creation-expression     shift and go to state 146
    pre-increment-expression       shift and go to state 147
    pre-decrement-expression       shift and go to state 108
    local-variable-declaration     shift and go to state 307
    parenthesized-expression       shift and go to state 96
    class-type                     shift and go to state 49
    invocation-expression          shift and go to state 95
    for-initializer-opt            shift and go to state 308

state 214

    (179) declaration-statement -> local-variable-declaration DELIM .

    IDENTIFIER      reduce using rule 179 (declaration-statement -> local-variable-declaration DELIM .)
    CONST           reduce using rule 179 (declaration-statement -> local-variable-declaration DELIM .)
    BLOCK_BEGIN     reduce using rule 179 (declaration-statement -> local-variable-declaration DELIM .)
    DELIM           reduce using rule 179 (declaration-statement -> local-variable-declaration DELIM .)
    IF              reduce using rule 179 (declaration-statement -> local-variable-declaration DELIM .)
    SWITCH          reduce using rule 179 (declaration-statement -> local-variable-declaration DELIM .)
    WHILE           reduce using rule 179 (declaration-statement -> local-variable-declaration DELIM .)
    FOR             reduce using rule 179 (declaration-statement -> local-variable-declaration DELIM .)
    FOREACH         reduce using rule 179 (declaration-statement -> local-variable-declaration DELIM .)
    DO              reduce using rule 179 (declaration-statement -> local-variable-declaration DELIM .)
    BREAK           reduce using rule 179 (declaration-statement -> local-variable-declaration DELIM .)
    CONTINUE        reduce using rule 179 (declaration-statement -> local-variable-declaration DELIM .)
    GOTO            reduce using rule 179 (declaration-statement -> local-variable-declaration DELIM .)
    RETURN          reduce using rule 179 (declaration-statement -> local-variable-declaration DELIM .)
    BOOL            reduce using rule 179 (declaration-statement -> local-variable-declaration DELIM .)
    NEW             reduce using rule 179 (declaration-statement -> local-variable-declaration DELIM .)
    INCRE           reduce using rule 179 (declaration-statement -> local-variable-declaration DELIM .)
    DECRE           reduce using rule 179 (declaration-statement -> local-variable-declaration DELIM .)
    INT             reduce using rule 179 (declaration-statement -> local-variable-declaration DELIM .)
    UINT            reduce using rule 179 (declaration-statement -> local-variable-declaration DELIM .)
    LONG            reduce using rule 179 (declaration-statement -> local-variable-declaration DELIM .)
    ULONG           reduce using rule 179 (declaration-statement -> local-variable-declaration DELIM .)
    CHAR            reduce using rule 179 (declaration-statement -> local-variable-declaration DELIM .)
    FLOAT           reduce using rule 179 (declaration-statement -> local-variable-declaration DELIM .)
    DOUBLE          reduce using rule 179 (declaration-statement -> local-variable-declaration DELIM .)
    ICONST          reduce using rule 179 (declaration-statement -> local-variable-declaration DELIM .)
    UICONST         reduce using rule 179 (declaration-statement -> local-variable-declaration DELIM .)
    LICONST         reduce using rule 179 (declaration-statement -> local-variable-declaration DELIM .)
    ULICONST        reduce using rule 179 (declaration-statement -> local-variable-declaration DELIM .)
    FCONST          reduce using rule 179 (declaration-statement -> local-variable-declaration DELIM .)
    DCONST          reduce using rule 179 (declaration-statement -> local-variable-declaration DELIM .)
    MCONST          reduce using rule 179 (declaration-statement -> local-variable-declaration DELIM .)
    CCONST          reduce using rule 179 (declaration-statement -> local-variable-declaration DELIM .)
    SCONST          reduce using rule 179 (declaration-statement -> local-variable-declaration DELIM .)
    VSCONST         reduce using rule 179 (declaration-statement -> local-variable-declaration DELIM .)
    TRUE            reduce using rule 179 (declaration-statement -> local-variable-declaration DELIM .)
    FALSE           reduce using rule 179 (declaration-statement -> local-variable-declaration DELIM .)
    OPEN_PAREN      reduce using rule 179 (declaration-statement -> local-variable-declaration DELIM .)
    THIS            reduce using rule 179 (declaration-statement -> local-variable-declaration DELIM .)
    BASE            reduce using rule 179 (declaration-statement -> local-variable-declaration DELIM .)
    BLOCK_END       reduce using rule 179 (declaration-statement -> local-variable-declaration DELIM .)
    CASE            reduce using rule 179 (declaration-statement -> local-variable-declaration DELIM .)
    DEFAULT         reduce using rule 179 (declaration-statement -> local-variable-declaration DELIM .)


state 215

    (245) continue-statement -> CONTINUE DELIM .

    IDENTIFIER      reduce using rule 245 (continue-statement -> CONTINUE DELIM .)
    CONST           reduce using rule 245 (continue-statement -> CONTINUE DELIM .)
    BLOCK_BEGIN     reduce using rule 245 (continue-statement -> CONTINUE DELIM .)
    DELIM           reduce using rule 245 (continue-statement -> CONTINUE DELIM .)
    IF              reduce using rule 245 (continue-statement -> CONTINUE DELIM .)
    SWITCH          reduce using rule 245 (continue-statement -> CONTINUE DELIM .)
    WHILE           reduce using rule 245 (continue-statement -> CONTINUE DELIM .)
    FOR             reduce using rule 245 (continue-statement -> CONTINUE DELIM .)
    FOREACH         reduce using rule 245 (continue-statement -> CONTINUE DELIM .)
    DO              reduce using rule 245 (continue-statement -> CONTINUE DELIM .)
    BREAK           reduce using rule 245 (continue-statement -> CONTINUE DELIM .)
    CONTINUE        reduce using rule 245 (continue-statement -> CONTINUE DELIM .)
    GOTO            reduce using rule 245 (continue-statement -> CONTINUE DELIM .)
    RETURN          reduce using rule 245 (continue-statement -> CONTINUE DELIM .)
    BOOL            reduce using rule 245 (continue-statement -> CONTINUE DELIM .)
    NEW             reduce using rule 245 (continue-statement -> CONTINUE DELIM .)
    INCRE           reduce using rule 245 (continue-statement -> CONTINUE DELIM .)
    DECRE           reduce using rule 245 (continue-statement -> CONTINUE DELIM .)
    INT             reduce using rule 245 (continue-statement -> CONTINUE DELIM .)
    UINT            reduce using rule 245 (continue-statement -> CONTINUE DELIM .)
    LONG            reduce using rule 245 (continue-statement -> CONTINUE DELIM .)
    ULONG           reduce using rule 245 (continue-statement -> CONTINUE DELIM .)
    CHAR            reduce using rule 245 (continue-statement -> CONTINUE DELIM .)
    FLOAT           reduce using rule 245 (continue-statement -> CONTINUE DELIM .)
    DOUBLE          reduce using rule 245 (continue-statement -> CONTINUE DELIM .)
    ICONST          reduce using rule 245 (continue-statement -> CONTINUE DELIM .)
    UICONST         reduce using rule 245 (continue-statement -> CONTINUE DELIM .)
    LICONST         reduce using rule 245 (continue-statement -> CONTINUE DELIM .)
    ULICONST        reduce using rule 245 (continue-statement -> CONTINUE DELIM .)
    FCONST          reduce using rule 245 (continue-statement -> CONTINUE DELIM .)
    DCONST          reduce using rule 245 (continue-statement -> CONTINUE DELIM .)
    MCONST          reduce using rule 245 (continue-statement -> CONTINUE DELIM .)
    CCONST          reduce using rule 245 (continue-statement -> CONTINUE DELIM .)
    SCONST          reduce using rule 245 (continue-statement -> CONTINUE DELIM .)
    VSCONST         reduce using rule 245 (continue-statement -> CONTINUE DELIM .)
    TRUE            reduce using rule 245 (continue-statement -> CONTINUE DELIM .)
    FALSE           reduce using rule 245 (continue-statement -> CONTINUE DELIM .)
    OPEN_PAREN      reduce using rule 245 (continue-statement -> CONTINUE DELIM .)
    THIS            reduce using rule 245 (continue-statement -> CONTINUE DELIM .)
    BASE            reduce using rule 245 (continue-statement -> CONTINUE DELIM .)
    BLOCK_END       reduce using rule 245 (continue-statement -> CONTINUE DELIM .)
    CASE            reduce using rule 245 (continue-statement -> CONTINUE DELIM .)
    DEFAULT         reduce using rule 245 (continue-statement -> CONTINUE DELIM .)
    ELSE            reduce using rule 245 (continue-statement -> CONTINUE DELIM .)


state 216

    (132) pre-decrement-expression -> DECRE unary-expression .

    TIMES           reduce using rule 132 (pre-decrement-expression -> DECRE unary-expression .)
    DIV             reduce using rule 132 (pre-decrement-expression -> DECRE unary-expression .)
    MOD             reduce using rule 132 (pre-decrement-expression -> DECRE unary-expression .)
    PLUS            reduce using rule 132 (pre-decrement-expression -> DECRE unary-expression .)
    MINUS           reduce using rule 132 (pre-decrement-expression -> DECRE unary-expression .)
    LSHIFT          reduce using rule 132 (pre-decrement-expression -> DECRE unary-expression .)
    RSHIFT          reduce using rule 132 (pre-decrement-expression -> DECRE unary-expression .)
    LT              reduce using rule 132 (pre-decrement-expression -> DECRE unary-expression .)
    GT              reduce using rule 132 (pre-decrement-expression -> DECRE unary-expression .)
    LE              reduce using rule 132 (pre-decrement-expression -> DECRE unary-expression .)
    GE              reduce using rule 132 (pre-decrement-expression -> DECRE unary-expression .)
    EQ              reduce using rule 132 (pre-decrement-expression -> DECRE unary-expression .)
    NE              reduce using rule 132 (pre-decrement-expression -> DECRE unary-expression .)
    BITAND          reduce using rule 132 (pre-decrement-expression -> DECRE unary-expression .)
    BITXOR          reduce using rule 132 (pre-decrement-expression -> DECRE unary-expression .)
    BITOR           reduce using rule 132 (pre-decrement-expression -> DECRE unary-expression .)
    LOGAND          reduce using rule 132 (pre-decrement-expression -> DECRE unary-expression .)
    CONDOP          reduce using rule 132 (pre-decrement-expression -> DECRE unary-expression .)
    LOGOR           reduce using rule 132 (pre-decrement-expression -> DECRE unary-expression .)
    COMMA           reduce using rule 132 (pre-decrement-expression -> DECRE unary-expression .)
    DELIM           reduce using rule 132 (pre-decrement-expression -> DECRE unary-expression .)
    CLOSE_PAREN     reduce using rule 132 (pre-decrement-expression -> DECRE unary-expression .)
    CLOSE_BRACKET   reduce using rule 132 (pre-decrement-expression -> DECRE unary-expression .)
    BLOCK_END       reduce using rule 132 (pre-decrement-expression -> DECRE unary-expression .)
    COLON           reduce using rule 132 (pre-decrement-expression -> DECRE unary-expression .)


state 217

    (81) unary-expression -> primary-expression .
    (115) member-access -> primary-expression . DOT IDENTIFIER
    (116) invocation-expression -> primary-expression . OPEN_PAREN argument-list-opt CLOSE_PAREN
    (128) post-increment-expression -> primary-expression . INCRE
    (129) post-decrement-expression -> primary-expression . DECRE

    TIMES           reduce using rule 81 (unary-expression -> primary-expression .)
    DIV             reduce using rule 81 (unary-expression -> primary-expression .)
    MOD             reduce using rule 81 (unary-expression -> primary-expression .)
    PLUS            reduce using rule 81 (unary-expression -> primary-expression .)
    MINUS           reduce using rule 81 (unary-expression -> primary-expression .)
    LSHIFT          reduce using rule 81 (unary-expression -> primary-expression .)
    RSHIFT          reduce using rule 81 (unary-expression -> primary-expression .)
    LT              reduce using rule 81 (unary-expression -> primary-expression .)
    GT              reduce using rule 81 (unary-expression -> primary-expression .)
    LE              reduce using rule 81 (unary-expression -> primary-expression .)
    GE              reduce using rule 81 (unary-expression -> primary-expression .)
    EQ              reduce using rule 81 (unary-expression -> primary-expression .)
    NE              reduce using rule 81 (unary-expression -> primary-expression .)
    BITAND          reduce using rule 81 (unary-expression -> primary-expression .)
    BITXOR          reduce using rule 81 (unary-expression -> primary-expression .)
    BITOR           reduce using rule 81 (unary-expression -> primary-expression .)
    LOGAND          reduce using rule 81 (unary-expression -> primary-expression .)
    CONDOP          reduce using rule 81 (unary-expression -> primary-expression .)
    LOGOR           reduce using rule 81 (unary-expression -> primary-expression .)
    DELIM           reduce using rule 81 (unary-expression -> primary-expression .)
    CLOSE_PAREN     reduce using rule 81 (unary-expression -> primary-expression .)
    COMMA           reduce using rule 81 (unary-expression -> primary-expression .)
    CLOSE_BRACKET   reduce using rule 81 (unary-expression -> primary-expression .)
    BLOCK_END       reduce using rule 81 (unary-expression -> primary-expression .)
    COLON           reduce using rule 81 (unary-expression -> primary-expression .)
    DOT             shift and go to state 246
    OPEN_PAREN      shift and go to state 245
    INCRE           shift and go to state 244
    DECRE           shift and go to state 241


state 218

    (224) while-statement -> WHILE OPEN_PAREN . boolean-expression CLOSE_PAREN embedded-statement
    (208) boolean-expression -> . expression
    (49) expression -> . conditional-expression
    (50) expression -> . assignment
    (51) conditional-expression -> . conditional-or-expression
    (52) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (133) assignment -> . primary-expression assignment-operator expression
    (53) conditional-or-expression -> . conditional-and-expression
    (54) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (55) conditional-and-expression -> . inclusive-or-expression
    (56) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (57) inclusive-or-expression -> . exclusive-or-expression
    (58) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (59) exclusive-or-expression -> . and-expression
    (60) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (61) and-expression -> . equality-expression
    (62) and-expression -> . and-expression BITAND equality-expression
    (63) equality-expression -> . relational-expression
    (64) equality-expression -> . equality-expression EQ relational-expression
    (65) equality-expression -> . equality-expression NE relational-expression
    (66) relational-expression -> . shift-expression
    (67) relational-expression -> . relational-expression LT shift-expression
    (68) relational-expression -> . relational-expression GT shift-expression
    (69) relational-expression -> . relational-expression LE shift-expression
    (70) relational-expression -> . relational-expression GE shift-expression
    (71) shift-expression -> . additive-expression
    (72) shift-expression -> . shift-expression LSHIFT additive-expression
    (73) shift-expression -> . shift-expression RSHIFT additive-expression
    (74) additive-expression -> . multiplicative-expression
    (75) additive-expression -> . additive-expression PLUS multiplicative-expression
    (76) additive-expression -> . additive-expression MINUS multiplicative-expression
    (77) multiplicative-expression -> . unary-expression
    (78) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (79) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (80) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (81) unary-expression -> . primary-expression
    (82) unary-expression -> . PLUS unary-expression
    (83) unary-expression -> . MINUS unary-expression
    (84) unary-expression -> . BITNOT unary-expression
    (85) unary-expression -> . BITCOMP unary-expression
    (86) unary-expression -> . TIMES unary-expression
    (87) unary-expression -> . pre-increment-expression
    (88) unary-expression -> . pre-decrement-expression
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression

    NEW             shift and go to state 185
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88
    PLUS            shift and go to state 190
    MINUS           shift and go to state 187
    BITNOT          shift and go to state 197
    BITCOMP         shift and go to state 186
    TIMES           shift and go to state 184
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117

    this-access                    shift and go to state 77
    unary-expression               shift and go to state 199
    exclusive-or-expression        shift and go to state 183
    member-access                  shift and go to state 79
    relational-expression          shift and go to state 203
    additive-expression            shift and go to state 208
    primary-no-array-creation-expression shift and go to state 82
    boolean-expression             shift and go to state 309
    inclusive-or-expression        shift and go to state 188
    equality-expression            shift and go to state 189
    post-increment-expression      shift and go to state 182
    element-access                 shift and go to state 101
    literal                        shift and go to state 128
    base-access                    shift and go to state 126
    conditional-and-expression     shift and go to state 192
    post-decrement-expression      shift and go to state 193
    conditional-expression         shift and go to state 191
    array-creation-expression      shift and go to state 144
    assignment                     shift and go to state 196
    object-creation-expression     shift and go to state 198
    pre-increment-expression       shift and go to state 202
    shift-expression               shift and go to state 204
    and-expression                 shift and go to state 201
    pre-decrement-expression       shift and go to state 205
    multiplicative-expression      shift and go to state 207
    conditional-or-expression      shift and go to state 211
    primary-expression             shift and go to state 209
    invocation-expression          shift and go to state 210
    expression                     shift and go to state 310
    parenthesized-expression       shift and go to state 96

state 219

    (91) array-creation-expression -> NEW simple-type . OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (26) type -> simple-type .
    (40) array-type -> simple-type . rank-specifier
    (41) rank-specifier -> . OPEN_BRACKET dim-separators-opt CLOSE_BRACKET

    OPEN_BRACKET    shift and go to state 311
    OPEN_PAREN      reduce using rule 26 (type -> simple-type .)

    rank-specifier                 shift and go to state 61

state 220

    (130) object-creation-expression -> NEW type . OPEN_PAREN argument-list-opt CLOSE_PAREN

    OPEN_PAREN      shift and go to state 312


state 221

    (131) pre-increment-expression -> INCRE unary-expression .

    DELIM           reduce using rule 131 (pre-increment-expression -> INCRE unary-expression .)
    COMMA           reduce using rule 131 (pre-increment-expression -> INCRE unary-expression .)
    CLOSE_PAREN     reduce using rule 131 (pre-increment-expression -> INCRE unary-expression .)
    TIMES           reduce using rule 131 (pre-increment-expression -> INCRE unary-expression .)
    DIV             reduce using rule 131 (pre-increment-expression -> INCRE unary-expression .)
    MOD             reduce using rule 131 (pre-increment-expression -> INCRE unary-expression .)
    PLUS            reduce using rule 131 (pre-increment-expression -> INCRE unary-expression .)
    MINUS           reduce using rule 131 (pre-increment-expression -> INCRE unary-expression .)
    LSHIFT          reduce using rule 131 (pre-increment-expression -> INCRE unary-expression .)
    RSHIFT          reduce using rule 131 (pre-increment-expression -> INCRE unary-expression .)
    LT              reduce using rule 131 (pre-increment-expression -> INCRE unary-expression .)
    GT              reduce using rule 131 (pre-increment-expression -> INCRE unary-expression .)
    LE              reduce using rule 131 (pre-increment-expression -> INCRE unary-expression .)
    GE              reduce using rule 131 (pre-increment-expression -> INCRE unary-expression .)
    EQ              reduce using rule 131 (pre-increment-expression -> INCRE unary-expression .)
    NE              reduce using rule 131 (pre-increment-expression -> INCRE unary-expression .)
    BITAND          reduce using rule 131 (pre-increment-expression -> INCRE unary-expression .)
    BITXOR          reduce using rule 131 (pre-increment-expression -> INCRE unary-expression .)
    BITOR           reduce using rule 131 (pre-increment-expression -> INCRE unary-expression .)
    LOGAND          reduce using rule 131 (pre-increment-expression -> INCRE unary-expression .)
    CONDOP          reduce using rule 131 (pre-increment-expression -> INCRE unary-expression .)
    LOGOR           reduce using rule 131 (pre-increment-expression -> INCRE unary-expression .)
    CLOSE_BRACKET   reduce using rule 131 (pre-increment-expression -> INCRE unary-expression .)
    BLOCK_END       reduce using rule 131 (pre-increment-expression -> INCRE unary-expression .)
    COLON           reduce using rule 131 (pre-increment-expression -> INCRE unary-expression .)


state 222

    (209) switch-statement -> SWITCH OPEN_PAREN . expression CLOSE_PAREN switch-block
    (49) expression -> . conditional-expression
    (50) expression -> . assignment
    (51) conditional-expression -> . conditional-or-expression
    (52) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (133) assignment -> . primary-expression assignment-operator expression
    (53) conditional-or-expression -> . conditional-and-expression
    (54) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (55) conditional-and-expression -> . inclusive-or-expression
    (56) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (57) inclusive-or-expression -> . exclusive-or-expression
    (58) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (59) exclusive-or-expression -> . and-expression
    (60) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (61) and-expression -> . equality-expression
    (62) and-expression -> . and-expression BITAND equality-expression
    (63) equality-expression -> . relational-expression
    (64) equality-expression -> . equality-expression EQ relational-expression
    (65) equality-expression -> . equality-expression NE relational-expression
    (66) relational-expression -> . shift-expression
    (67) relational-expression -> . relational-expression LT shift-expression
    (68) relational-expression -> . relational-expression GT shift-expression
    (69) relational-expression -> . relational-expression LE shift-expression
    (70) relational-expression -> . relational-expression GE shift-expression
    (71) shift-expression -> . additive-expression
    (72) shift-expression -> . shift-expression LSHIFT additive-expression
    (73) shift-expression -> . shift-expression RSHIFT additive-expression
    (74) additive-expression -> . multiplicative-expression
    (75) additive-expression -> . additive-expression PLUS multiplicative-expression
    (76) additive-expression -> . additive-expression MINUS multiplicative-expression
    (77) multiplicative-expression -> . unary-expression
    (78) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (79) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (80) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (81) unary-expression -> . primary-expression
    (82) unary-expression -> . PLUS unary-expression
    (83) unary-expression -> . MINUS unary-expression
    (84) unary-expression -> . BITNOT unary-expression
    (85) unary-expression -> . BITCOMP unary-expression
    (86) unary-expression -> . TIMES unary-expression
    (87) unary-expression -> . pre-increment-expression
    (88) unary-expression -> . pre-decrement-expression
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression

    NEW             shift and go to state 185
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88
    PLUS            shift and go to state 190
    MINUS           shift and go to state 187
    BITNOT          shift and go to state 197
    BITCOMP         shift and go to state 186
    TIMES           shift and go to state 184
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117

    this-access                    shift and go to state 77
    unary-expression               shift and go to state 199
    exclusive-or-expression        shift and go to state 183
    member-access                  shift and go to state 79
    relational-expression          shift and go to state 203
    additive-expression            shift and go to state 208
    primary-no-array-creation-expression shift and go to state 82
    inclusive-or-expression        shift and go to state 188
    equality-expression            shift and go to state 189
    post-increment-expression      shift and go to state 182
    element-access                 shift and go to state 101
    literal                        shift and go to state 128
    base-access                    shift and go to state 126
    conditional-and-expression     shift and go to state 192
    post-decrement-expression      shift and go to state 193
    conditional-expression         shift and go to state 191
    array-creation-expression      shift and go to state 144
    assignment                     shift and go to state 196
    object-creation-expression     shift and go to state 198
    pre-increment-expression       shift and go to state 202
    shift-expression               shift and go to state 204
    and-expression                 shift and go to state 201
    pre-decrement-expression       shift and go to state 205
    multiplicative-expression      shift and go to state 207
    conditional-or-expression      shift and go to state 211
    primary-expression             shift and go to state 209
    invocation-expression          shift and go to state 210
    expression                     shift and go to state 313
    parenthesized-expression       shift and go to state 96

state 223

    (114) parenthesized-expression -> OPEN_PAREN expression . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 314


state 224

    (178) labeled-statement -> IDENTIFIER COLON . statement
    (175) statement -> . labeled-statement
    (176) statement -> . declaration-statement
    (177) statement -> . embedded-statement
    (178) labeled-statement -> . IDENTIFIER COLON statement
    (179) declaration-statement -> . local-variable-declaration DELIM
    (180) declaration-statement -> . local-constant-declaration DELIM
    (189) embedded-statement -> . block
    (190) embedded-statement -> . empty-statement
    (191) embedded-statement -> . expression-statement
    (192) embedded-statement -> . selection-statement
    (193) embedded-statement -> . iteration-statement
    (194) embedded-statement -> . jump-statement
    (181) local-variable-declaration -> . type local-variable-declarators
    (188) local-constant-declaration -> . CONST type constant-declarators
    (170) block -> . BLOCK_BEGIN statement-list-opt BLOCK_END
    (195) empty-statement -> . DELIM
    (196) expression-statement -> . statement-expression DELIM
    (204) selection-statement -> . if-statement
    (205) selection-statement -> . switch-statement
    (220) iteration-statement -> . while-statement
    (221) iteration-statement -> . for-statement
    (222) iteration-statement -> . foreach-statement
    (223) iteration-statement -> . do-statement
    (240) jump-statement -> . break-statement
    (241) jump-statement -> . continue-statement
    (242) jump-statement -> . goto-statement
    (243) jump-statement -> . return-statement
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (197) statement-expression -> . invocation-expression
    (198) statement-expression -> . object-creation-expression
    (199) statement-expression -> . assignment
    (200) statement-expression -> . post-increment-expression
    (201) statement-expression -> . post-decrement-expression
    (202) statement-expression -> . pre-increment-expression
    (203) statement-expression -> . pre-decrement-expression
    (206) if-statement -> . IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement
    (207) if-statement -> . IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement
    (209) switch-statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block
    (224) while-statement -> . WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement
    (226) for-statement -> . FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement
    (239) foreach-statement -> . FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement
    (225) do-statement -> . DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM
    (244) break-statement -> . BREAK DELIM
    (245) continue-statement -> . CONTINUE DELIM
    (246) goto-statement -> . GOTO IDENTIFIER DELIM
    (247) return-statement -> . RETURN expression-opt DELIM
    (29) simple-type -> . numeric-type
    (30) simple-type -> . BOOL
    (12) class-type -> . IDENTIFIER
    (40) array-type -> . simple-type rank-specifier
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (133) assignment -> . primary-expression assignment-operator expression
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression
    (31) numeric-type -> . integral-type
    (32) numeric-type -> . floating-point-type
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (33) integral-type -> . INT
    (34) integral-type -> . UINT
    (35) integral-type -> . LONG
    (36) integral-type -> . ULONG
    (37) integral-type -> . CHAR
    (38) floating-point-type -> . FLOAT
    (39) floating-point-type -> . DOUBLE
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET

    IDENTIFIER      shift and go to state 129
    CONST           shift and go to state 140
    BLOCK_BEGIN     shift and go to state 55
    DELIM           shift and go to state 115
    IF              shift and go to state 148
    SWITCH          shift and go to state 124
    WHILE           shift and go to state 118
    FOR             shift and go to state 105
    FOREACH         shift and go to state 90
    DO              shift and go to state 139
    BREAK           shift and go to state 136
    CONTINUE        shift and go to state 113
    GOTO            shift and go to state 87
    RETURN          shift and go to state 97
    BOOL            shift and go to state 48
    NEW             shift and go to state 120
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117
    INT             shift and go to state 25
    UINT            shift and go to state 42
    LONG            shift and go to state 44
    ULONG           shift and go to state 27
    CHAR            shift and go to state 22
    FLOAT           shift and go to state 47
    DOUBLE          shift and go to state 52
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88

    this-access                    shift and go to state 77
    return-statement               shift and go to state 98
    member-access                  shift and go to state 79
    selection-statement            shift and go to state 116
    parenthesized-expression       shift and go to state 96
    array-creation-expression      shift and go to state 144
    empty-statement                shift and go to state 119
    expression-statement           shift and go to state 81
    pre-decrement-expression       shift and go to state 108
    primary-no-array-creation-expression shift and go to state 82
    integral-type                  shift and go to state 26
    foreach-statement              shift and go to state 100
    break-statement                shift and go to state 121
    post-increment-expression      shift and go to state 83
    element-access                 shift and go to state 101
    statement-expression           shift and go to state 84
    local-constant-declaration     shift and go to state 102
    literal                        shift and go to state 128
    statement                      shift and go to state 315
    assignment                     shift and go to state 145
    for-statement                  shift and go to state 86
    type                           shift and go to state 130
    do-statement                   shift and go to state 104
    array-type                     shift and go to state 36
    floating-point-type            shift and go to state 39
    continue-statement             shift and go to state 106
    primary-expression             shift and go to state 149
    invocation-expression          shift and go to state 95
    labeled-statement              shift and go to state 89
    declaration-statement          shift and go to state 133
    object-creation-expression     shift and go to state 146
    post-decrement-expression      shift and go to state 132
    switch-statement               shift and go to state 91
    pre-increment-expression       shift and go to state 147
    numeric-type                   shift and go to state 28
    embedded-statement             shift and go to state 92
    base-access                    shift and go to state 126
    iteration-statement            shift and go to state 135
    jump-statement                 shift and go to state 93
    local-variable-declaration     shift and go to state 109
    goto-statement                 shift and go to state 111
    if-statement                   shift and go to state 112
    class-type                     shift and go to state 49
    while-statement                shift and go to state 138
    simple-type                    shift and go to state 23
    block                          shift and go to state 114

state 225

    (181) local-variable-declaration -> type local-variable-declarators .
    (183) local-variable-declarators -> local-variable-declarators . COMMA local-variable-declarator

    DELIM           reduce using rule 181 (local-variable-declaration -> type local-variable-declarators .)
    COMMA           shift and go to state 316


state 226

    (182) local-variable-declarators -> local-variable-declarator .

    COMMA           reduce using rule 182 (local-variable-declarators -> local-variable-declarator .)
    DELIM           reduce using rule 182 (local-variable-declarators -> local-variable-declarator .)


state 227

    (184) local-variable-declarator -> IDENTIFIER .
    (185) local-variable-declarator -> IDENTIFIER . ASSIGN local-variable-initializer

    COMMA           reduce using rule 184 (local-variable-declarator -> IDENTIFIER .)
    DELIM           reduce using rule 184 (local-variable-declarator -> IDENTIFIER .)
    ASSIGN          shift and go to state 317


state 228

    (244) break-statement -> BREAK DELIM .

    IDENTIFIER      reduce using rule 244 (break-statement -> BREAK DELIM .)
    CONST           reduce using rule 244 (break-statement -> BREAK DELIM .)
    BLOCK_BEGIN     reduce using rule 244 (break-statement -> BREAK DELIM .)
    DELIM           reduce using rule 244 (break-statement -> BREAK DELIM .)
    IF              reduce using rule 244 (break-statement -> BREAK DELIM .)
    SWITCH          reduce using rule 244 (break-statement -> BREAK DELIM .)
    WHILE           reduce using rule 244 (break-statement -> BREAK DELIM .)
    FOR             reduce using rule 244 (break-statement -> BREAK DELIM .)
    FOREACH         reduce using rule 244 (break-statement -> BREAK DELIM .)
    DO              reduce using rule 244 (break-statement -> BREAK DELIM .)
    BREAK           reduce using rule 244 (break-statement -> BREAK DELIM .)
    CONTINUE        reduce using rule 244 (break-statement -> BREAK DELIM .)
    GOTO            reduce using rule 244 (break-statement -> BREAK DELIM .)
    RETURN          reduce using rule 244 (break-statement -> BREAK DELIM .)
    BOOL            reduce using rule 244 (break-statement -> BREAK DELIM .)
    NEW             reduce using rule 244 (break-statement -> BREAK DELIM .)
    INCRE           reduce using rule 244 (break-statement -> BREAK DELIM .)
    DECRE           reduce using rule 244 (break-statement -> BREAK DELIM .)
    INT             reduce using rule 244 (break-statement -> BREAK DELIM .)
    UINT            reduce using rule 244 (break-statement -> BREAK DELIM .)
    LONG            reduce using rule 244 (break-statement -> BREAK DELIM .)
    ULONG           reduce using rule 244 (break-statement -> BREAK DELIM .)
    CHAR            reduce using rule 244 (break-statement -> BREAK DELIM .)
    FLOAT           reduce using rule 244 (break-statement -> BREAK DELIM .)
    DOUBLE          reduce using rule 244 (break-statement -> BREAK DELIM .)
    ICONST          reduce using rule 244 (break-statement -> BREAK DELIM .)
    UICONST         reduce using rule 244 (break-statement -> BREAK DELIM .)
    LICONST         reduce using rule 244 (break-statement -> BREAK DELIM .)
    ULICONST        reduce using rule 244 (break-statement -> BREAK DELIM .)
    FCONST          reduce using rule 244 (break-statement -> BREAK DELIM .)
    DCONST          reduce using rule 244 (break-statement -> BREAK DELIM .)
    MCONST          reduce using rule 244 (break-statement -> BREAK DELIM .)
    CCONST          reduce using rule 244 (break-statement -> BREAK DELIM .)
    SCONST          reduce using rule 244 (break-statement -> BREAK DELIM .)
    VSCONST         reduce using rule 244 (break-statement -> BREAK DELIM .)
    TRUE            reduce using rule 244 (break-statement -> BREAK DELIM .)
    FALSE           reduce using rule 244 (break-statement -> BREAK DELIM .)
    OPEN_PAREN      reduce using rule 244 (break-statement -> BREAK DELIM .)
    THIS            reduce using rule 244 (break-statement -> BREAK DELIM .)
    BASE            reduce using rule 244 (break-statement -> BREAK DELIM .)
    BLOCK_END       reduce using rule 244 (break-statement -> BREAK DELIM .)
    CASE            reduce using rule 244 (break-statement -> BREAK DELIM .)
    DEFAULT         reduce using rule 244 (break-statement -> BREAK DELIM .)
    ELSE            reduce using rule 244 (break-statement -> BREAK DELIM .)


state 229

    (174) statement-list -> statement-list statement .

    IDENTIFIER      reduce using rule 174 (statement-list -> statement-list statement .)
    CONST           reduce using rule 174 (statement-list -> statement-list statement .)
    BLOCK_BEGIN     reduce using rule 174 (statement-list -> statement-list statement .)
    DELIM           reduce using rule 174 (statement-list -> statement-list statement .)
    IF              reduce using rule 174 (statement-list -> statement-list statement .)
    SWITCH          reduce using rule 174 (statement-list -> statement-list statement .)
    WHILE           reduce using rule 174 (statement-list -> statement-list statement .)
    FOR             reduce using rule 174 (statement-list -> statement-list statement .)
    FOREACH         reduce using rule 174 (statement-list -> statement-list statement .)
    DO              reduce using rule 174 (statement-list -> statement-list statement .)
    BREAK           reduce using rule 174 (statement-list -> statement-list statement .)
    CONTINUE        reduce using rule 174 (statement-list -> statement-list statement .)
    GOTO            reduce using rule 174 (statement-list -> statement-list statement .)
    RETURN          reduce using rule 174 (statement-list -> statement-list statement .)
    BOOL            reduce using rule 174 (statement-list -> statement-list statement .)
    NEW             reduce using rule 174 (statement-list -> statement-list statement .)
    INCRE           reduce using rule 174 (statement-list -> statement-list statement .)
    DECRE           reduce using rule 174 (statement-list -> statement-list statement .)
    INT             reduce using rule 174 (statement-list -> statement-list statement .)
    UINT            reduce using rule 174 (statement-list -> statement-list statement .)
    LONG            reduce using rule 174 (statement-list -> statement-list statement .)
    ULONG           reduce using rule 174 (statement-list -> statement-list statement .)
    CHAR            reduce using rule 174 (statement-list -> statement-list statement .)
    FLOAT           reduce using rule 174 (statement-list -> statement-list statement .)
    DOUBLE          reduce using rule 174 (statement-list -> statement-list statement .)
    ICONST          reduce using rule 174 (statement-list -> statement-list statement .)
    UICONST         reduce using rule 174 (statement-list -> statement-list statement .)
    LICONST         reduce using rule 174 (statement-list -> statement-list statement .)
    ULICONST        reduce using rule 174 (statement-list -> statement-list statement .)
    FCONST          reduce using rule 174 (statement-list -> statement-list statement .)
    DCONST          reduce using rule 174 (statement-list -> statement-list statement .)
    MCONST          reduce using rule 174 (statement-list -> statement-list statement .)
    CCONST          reduce using rule 174 (statement-list -> statement-list statement .)
    SCONST          reduce using rule 174 (statement-list -> statement-list statement .)
    VSCONST         reduce using rule 174 (statement-list -> statement-list statement .)
    TRUE            reduce using rule 174 (statement-list -> statement-list statement .)
    FALSE           reduce using rule 174 (statement-list -> statement-list statement .)
    OPEN_PAREN      reduce using rule 174 (statement-list -> statement-list statement .)
    THIS            reduce using rule 174 (statement-list -> statement-list statement .)
    BASE            reduce using rule 174 (statement-list -> statement-list statement .)
    BLOCK_END       reduce using rule 174 (statement-list -> statement-list statement .)
    CASE            reduce using rule 174 (statement-list -> statement-list statement .)
    DEFAULT         reduce using rule 174 (statement-list -> statement-list statement .)


state 230

    (225) do-statement -> DO embedded-statement . WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM

    WHILE           shift and go to state 318


state 231

    (188) local-constant-declaration -> CONST type . constant-declarators
    (46) constant-declarators -> . constant-declarator
    (47) constant-declarators -> . constant-declarators COMMA constant-declarator
    (48) constant-declarator -> . IDENTIFIER ASSIGN expression

    IDENTIFIER      shift and go to state 157

    constant-declarators           shift and go to state 319
    constant-declarator            shift and go to state 158

state 232

    (170) block -> BLOCK_BEGIN statement-list-opt BLOCK_END .

    CONST           reduce using rule 170 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    BITCOMP         reduce using rule 170 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    CLASS           reduce using rule 170 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    PUBLIC          reduce using rule 170 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    PRIVATE         reduce using rule 170 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    VOID            reduce using rule 170 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    IDENTIFIER      reduce using rule 170 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    BOOL            reduce using rule 170 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    INT             reduce using rule 170 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    UINT            reduce using rule 170 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    LONG            reduce using rule 170 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    ULONG           reduce using rule 170 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    CHAR            reduce using rule 170 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    FLOAT           reduce using rule 170 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    DOUBLE          reduce using rule 170 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    BLOCK_END       reduce using rule 170 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    BLOCK_BEGIN     reduce using rule 170 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    DELIM           reduce using rule 170 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    IF              reduce using rule 170 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    SWITCH          reduce using rule 170 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    WHILE           reduce using rule 170 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    FOR             reduce using rule 170 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    FOREACH         reduce using rule 170 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    DO              reduce using rule 170 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    BREAK           reduce using rule 170 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    CONTINUE        reduce using rule 170 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    GOTO            reduce using rule 170 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    RETURN          reduce using rule 170 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    NEW             reduce using rule 170 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    INCRE           reduce using rule 170 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    DECRE           reduce using rule 170 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    ICONST          reduce using rule 170 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    UICONST         reduce using rule 170 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    LICONST         reduce using rule 170 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    ULICONST        reduce using rule 170 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    FCONST          reduce using rule 170 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    DCONST          reduce using rule 170 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    MCONST          reduce using rule 170 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    CCONST          reduce using rule 170 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    SCONST          reduce using rule 170 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    VSCONST         reduce using rule 170 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    TRUE            reduce using rule 170 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    FALSE           reduce using rule 170 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    OPEN_PAREN      reduce using rule 170 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    THIS            reduce using rule 170 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    BASE            reduce using rule 170 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    CASE            reduce using rule 170 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    DEFAULT         reduce using rule 170 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    ELSE            reduce using rule 170 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)


state 233

    (206) if-statement -> IF OPEN_PAREN . boolean-expression CLOSE_PAREN embedded-statement
    (207) if-statement -> IF OPEN_PAREN . boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement
    (208) boolean-expression -> . expression
    (49) expression -> . conditional-expression
    (50) expression -> . assignment
    (51) conditional-expression -> . conditional-or-expression
    (52) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (133) assignment -> . primary-expression assignment-operator expression
    (53) conditional-or-expression -> . conditional-and-expression
    (54) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (55) conditional-and-expression -> . inclusive-or-expression
    (56) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (57) inclusive-or-expression -> . exclusive-or-expression
    (58) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (59) exclusive-or-expression -> . and-expression
    (60) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (61) and-expression -> . equality-expression
    (62) and-expression -> . and-expression BITAND equality-expression
    (63) equality-expression -> . relational-expression
    (64) equality-expression -> . equality-expression EQ relational-expression
    (65) equality-expression -> . equality-expression NE relational-expression
    (66) relational-expression -> . shift-expression
    (67) relational-expression -> . relational-expression LT shift-expression
    (68) relational-expression -> . relational-expression GT shift-expression
    (69) relational-expression -> . relational-expression LE shift-expression
    (70) relational-expression -> . relational-expression GE shift-expression
    (71) shift-expression -> . additive-expression
    (72) shift-expression -> . shift-expression LSHIFT additive-expression
    (73) shift-expression -> . shift-expression RSHIFT additive-expression
    (74) additive-expression -> . multiplicative-expression
    (75) additive-expression -> . additive-expression PLUS multiplicative-expression
    (76) additive-expression -> . additive-expression MINUS multiplicative-expression
    (77) multiplicative-expression -> . unary-expression
    (78) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (79) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (80) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (81) unary-expression -> . primary-expression
    (82) unary-expression -> . PLUS unary-expression
    (83) unary-expression -> . MINUS unary-expression
    (84) unary-expression -> . BITNOT unary-expression
    (85) unary-expression -> . BITCOMP unary-expression
    (86) unary-expression -> . TIMES unary-expression
    (87) unary-expression -> . pre-increment-expression
    (88) unary-expression -> . pre-decrement-expression
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression

    NEW             shift and go to state 185
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88
    PLUS            shift and go to state 190
    MINUS           shift and go to state 187
    BITNOT          shift and go to state 197
    BITCOMP         shift and go to state 186
    TIMES           shift and go to state 184
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117

    this-access                    shift and go to state 77
    unary-expression               shift and go to state 199
    exclusive-or-expression        shift and go to state 183
    member-access                  shift and go to state 79
    relational-expression          shift and go to state 203
    additive-expression            shift and go to state 208
    primary-no-array-creation-expression shift and go to state 82
    boolean-expression             shift and go to state 320
    inclusive-or-expression        shift and go to state 188
    equality-expression            shift and go to state 189
    post-increment-expression      shift and go to state 182
    element-access                 shift and go to state 101
    literal                        shift and go to state 128
    base-access                    shift and go to state 126
    conditional-and-expression     shift and go to state 192
    post-decrement-expression      shift and go to state 193
    conditional-expression         shift and go to state 191
    array-creation-expression      shift and go to state 144
    assignment                     shift and go to state 196
    object-creation-expression     shift and go to state 198
    pre-increment-expression       shift and go to state 202
    shift-expression               shift and go to state 204
    and-expression                 shift and go to state 201
    pre-decrement-expression       shift and go to state 205
    multiplicative-expression      shift and go to state 207
    conditional-or-expression      shift and go to state 211
    primary-expression             shift and go to state 209
    invocation-expression          shift and go to state 210
    expression                     shift and go to state 310
    parenthesized-expression       shift and go to state 96

state 234

    (138) assignment-operator -> DIVEQUAL .

    NEW             reduce using rule 138 (assignment-operator -> DIVEQUAL .)
    IDENTIFIER      reduce using rule 138 (assignment-operator -> DIVEQUAL .)
    ICONST          reduce using rule 138 (assignment-operator -> DIVEQUAL .)
    UICONST         reduce using rule 138 (assignment-operator -> DIVEQUAL .)
    LICONST         reduce using rule 138 (assignment-operator -> DIVEQUAL .)
    ULICONST        reduce using rule 138 (assignment-operator -> DIVEQUAL .)
    FCONST          reduce using rule 138 (assignment-operator -> DIVEQUAL .)
    DCONST          reduce using rule 138 (assignment-operator -> DIVEQUAL .)
    MCONST          reduce using rule 138 (assignment-operator -> DIVEQUAL .)
    CCONST          reduce using rule 138 (assignment-operator -> DIVEQUAL .)
    SCONST          reduce using rule 138 (assignment-operator -> DIVEQUAL .)
    VSCONST         reduce using rule 138 (assignment-operator -> DIVEQUAL .)
    TRUE            reduce using rule 138 (assignment-operator -> DIVEQUAL .)
    FALSE           reduce using rule 138 (assignment-operator -> DIVEQUAL .)
    OPEN_PAREN      reduce using rule 138 (assignment-operator -> DIVEQUAL .)
    THIS            reduce using rule 138 (assignment-operator -> DIVEQUAL .)
    BASE            reduce using rule 138 (assignment-operator -> DIVEQUAL .)
    PLUS            reduce using rule 138 (assignment-operator -> DIVEQUAL .)
    MINUS           reduce using rule 138 (assignment-operator -> DIVEQUAL .)
    BITNOT          reduce using rule 138 (assignment-operator -> DIVEQUAL .)
    BITCOMP         reduce using rule 138 (assignment-operator -> DIVEQUAL .)
    TIMES           reduce using rule 138 (assignment-operator -> DIVEQUAL .)
    INCRE           reduce using rule 138 (assignment-operator -> DIVEQUAL .)
    DECRE           reduce using rule 138 (assignment-operator -> DIVEQUAL .)


state 235

    (144) assignment-operator -> RSHIFTEQUAL .

    NEW             reduce using rule 144 (assignment-operator -> RSHIFTEQUAL .)
    IDENTIFIER      reduce using rule 144 (assignment-operator -> RSHIFTEQUAL .)
    ICONST          reduce using rule 144 (assignment-operator -> RSHIFTEQUAL .)
    UICONST         reduce using rule 144 (assignment-operator -> RSHIFTEQUAL .)
    LICONST         reduce using rule 144 (assignment-operator -> RSHIFTEQUAL .)
    ULICONST        reduce using rule 144 (assignment-operator -> RSHIFTEQUAL .)
    FCONST          reduce using rule 144 (assignment-operator -> RSHIFTEQUAL .)
    DCONST          reduce using rule 144 (assignment-operator -> RSHIFTEQUAL .)
    MCONST          reduce using rule 144 (assignment-operator -> RSHIFTEQUAL .)
    CCONST          reduce using rule 144 (assignment-operator -> RSHIFTEQUAL .)
    SCONST          reduce using rule 144 (assignment-operator -> RSHIFTEQUAL .)
    VSCONST         reduce using rule 144 (assignment-operator -> RSHIFTEQUAL .)
    TRUE            reduce using rule 144 (assignment-operator -> RSHIFTEQUAL .)
    FALSE           reduce using rule 144 (assignment-operator -> RSHIFTEQUAL .)
    OPEN_PAREN      reduce using rule 144 (assignment-operator -> RSHIFTEQUAL .)
    THIS            reduce using rule 144 (assignment-operator -> RSHIFTEQUAL .)
    BASE            reduce using rule 144 (assignment-operator -> RSHIFTEQUAL .)
    PLUS            reduce using rule 144 (assignment-operator -> RSHIFTEQUAL .)
    MINUS           reduce using rule 144 (assignment-operator -> RSHIFTEQUAL .)
    BITNOT          reduce using rule 144 (assignment-operator -> RSHIFTEQUAL .)
    BITCOMP         reduce using rule 144 (assignment-operator -> RSHIFTEQUAL .)
    TIMES           reduce using rule 144 (assignment-operator -> RSHIFTEQUAL .)
    INCRE           reduce using rule 144 (assignment-operator -> RSHIFTEQUAL .)
    DECRE           reduce using rule 144 (assignment-operator -> RSHIFTEQUAL .)


state 236

    (140) assignment-operator -> BITANDEQUAL .

    NEW             reduce using rule 140 (assignment-operator -> BITANDEQUAL .)
    IDENTIFIER      reduce using rule 140 (assignment-operator -> BITANDEQUAL .)
    ICONST          reduce using rule 140 (assignment-operator -> BITANDEQUAL .)
    UICONST         reduce using rule 140 (assignment-operator -> BITANDEQUAL .)
    LICONST         reduce using rule 140 (assignment-operator -> BITANDEQUAL .)
    ULICONST        reduce using rule 140 (assignment-operator -> BITANDEQUAL .)
    FCONST          reduce using rule 140 (assignment-operator -> BITANDEQUAL .)
    DCONST          reduce using rule 140 (assignment-operator -> BITANDEQUAL .)
    MCONST          reduce using rule 140 (assignment-operator -> BITANDEQUAL .)
    CCONST          reduce using rule 140 (assignment-operator -> BITANDEQUAL .)
    SCONST          reduce using rule 140 (assignment-operator -> BITANDEQUAL .)
    VSCONST         reduce using rule 140 (assignment-operator -> BITANDEQUAL .)
    TRUE            reduce using rule 140 (assignment-operator -> BITANDEQUAL .)
    FALSE           reduce using rule 140 (assignment-operator -> BITANDEQUAL .)
    OPEN_PAREN      reduce using rule 140 (assignment-operator -> BITANDEQUAL .)
    THIS            reduce using rule 140 (assignment-operator -> BITANDEQUAL .)
    BASE            reduce using rule 140 (assignment-operator -> BITANDEQUAL .)
    PLUS            reduce using rule 140 (assignment-operator -> BITANDEQUAL .)
    MINUS           reduce using rule 140 (assignment-operator -> BITANDEQUAL .)
    BITNOT          reduce using rule 140 (assignment-operator -> BITANDEQUAL .)
    BITCOMP         reduce using rule 140 (assignment-operator -> BITANDEQUAL .)
    TIMES           reduce using rule 140 (assignment-operator -> BITANDEQUAL .)
    INCRE           reduce using rule 140 (assignment-operator -> BITANDEQUAL .)
    DECRE           reduce using rule 140 (assignment-operator -> BITANDEQUAL .)


state 237

    (137) assignment-operator -> TIMESEQUAL .

    NEW             reduce using rule 137 (assignment-operator -> TIMESEQUAL .)
    IDENTIFIER      reduce using rule 137 (assignment-operator -> TIMESEQUAL .)
    ICONST          reduce using rule 137 (assignment-operator -> TIMESEQUAL .)
    UICONST         reduce using rule 137 (assignment-operator -> TIMESEQUAL .)
    LICONST         reduce using rule 137 (assignment-operator -> TIMESEQUAL .)
    ULICONST        reduce using rule 137 (assignment-operator -> TIMESEQUAL .)
    FCONST          reduce using rule 137 (assignment-operator -> TIMESEQUAL .)
    DCONST          reduce using rule 137 (assignment-operator -> TIMESEQUAL .)
    MCONST          reduce using rule 137 (assignment-operator -> TIMESEQUAL .)
    CCONST          reduce using rule 137 (assignment-operator -> TIMESEQUAL .)
    SCONST          reduce using rule 137 (assignment-operator -> TIMESEQUAL .)
    VSCONST         reduce using rule 137 (assignment-operator -> TIMESEQUAL .)
    TRUE            reduce using rule 137 (assignment-operator -> TIMESEQUAL .)
    FALSE           reduce using rule 137 (assignment-operator -> TIMESEQUAL .)
    OPEN_PAREN      reduce using rule 137 (assignment-operator -> TIMESEQUAL .)
    THIS            reduce using rule 137 (assignment-operator -> TIMESEQUAL .)
    BASE            reduce using rule 137 (assignment-operator -> TIMESEQUAL .)
    PLUS            reduce using rule 137 (assignment-operator -> TIMESEQUAL .)
    MINUS           reduce using rule 137 (assignment-operator -> TIMESEQUAL .)
    BITNOT          reduce using rule 137 (assignment-operator -> TIMESEQUAL .)
    BITCOMP         reduce using rule 137 (assignment-operator -> TIMESEQUAL .)
    TIMES           reduce using rule 137 (assignment-operator -> TIMESEQUAL .)
    INCRE           reduce using rule 137 (assignment-operator -> TIMESEQUAL .)
    DECRE           reduce using rule 137 (assignment-operator -> TIMESEQUAL .)


state 238

    (136) assignment-operator -> MINUSEQUAL .

    NEW             reduce using rule 136 (assignment-operator -> MINUSEQUAL .)
    IDENTIFIER      reduce using rule 136 (assignment-operator -> MINUSEQUAL .)
    ICONST          reduce using rule 136 (assignment-operator -> MINUSEQUAL .)
    UICONST         reduce using rule 136 (assignment-operator -> MINUSEQUAL .)
    LICONST         reduce using rule 136 (assignment-operator -> MINUSEQUAL .)
    ULICONST        reduce using rule 136 (assignment-operator -> MINUSEQUAL .)
    FCONST          reduce using rule 136 (assignment-operator -> MINUSEQUAL .)
    DCONST          reduce using rule 136 (assignment-operator -> MINUSEQUAL .)
    MCONST          reduce using rule 136 (assignment-operator -> MINUSEQUAL .)
    CCONST          reduce using rule 136 (assignment-operator -> MINUSEQUAL .)
    SCONST          reduce using rule 136 (assignment-operator -> MINUSEQUAL .)
    VSCONST         reduce using rule 136 (assignment-operator -> MINUSEQUAL .)
    TRUE            reduce using rule 136 (assignment-operator -> MINUSEQUAL .)
    FALSE           reduce using rule 136 (assignment-operator -> MINUSEQUAL .)
    OPEN_PAREN      reduce using rule 136 (assignment-operator -> MINUSEQUAL .)
    THIS            reduce using rule 136 (assignment-operator -> MINUSEQUAL .)
    BASE            reduce using rule 136 (assignment-operator -> MINUSEQUAL .)
    PLUS            reduce using rule 136 (assignment-operator -> MINUSEQUAL .)
    MINUS           reduce using rule 136 (assignment-operator -> MINUSEQUAL .)
    BITNOT          reduce using rule 136 (assignment-operator -> MINUSEQUAL .)
    BITCOMP         reduce using rule 136 (assignment-operator -> MINUSEQUAL .)
    TIMES           reduce using rule 136 (assignment-operator -> MINUSEQUAL .)
    INCRE           reduce using rule 136 (assignment-operator -> MINUSEQUAL .)
    DECRE           reduce using rule 136 (assignment-operator -> MINUSEQUAL .)


state 239

    (133) assignment -> primary-expression assignment-operator . expression
    (49) expression -> . conditional-expression
    (50) expression -> . assignment
    (51) conditional-expression -> . conditional-or-expression
    (52) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (133) assignment -> . primary-expression assignment-operator expression
    (53) conditional-or-expression -> . conditional-and-expression
    (54) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (55) conditional-and-expression -> . inclusive-or-expression
    (56) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (57) inclusive-or-expression -> . exclusive-or-expression
    (58) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (59) exclusive-or-expression -> . and-expression
    (60) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (61) and-expression -> . equality-expression
    (62) and-expression -> . and-expression BITAND equality-expression
    (63) equality-expression -> . relational-expression
    (64) equality-expression -> . equality-expression EQ relational-expression
    (65) equality-expression -> . equality-expression NE relational-expression
    (66) relational-expression -> . shift-expression
    (67) relational-expression -> . relational-expression LT shift-expression
    (68) relational-expression -> . relational-expression GT shift-expression
    (69) relational-expression -> . relational-expression LE shift-expression
    (70) relational-expression -> . relational-expression GE shift-expression
    (71) shift-expression -> . additive-expression
    (72) shift-expression -> . shift-expression LSHIFT additive-expression
    (73) shift-expression -> . shift-expression RSHIFT additive-expression
    (74) additive-expression -> . multiplicative-expression
    (75) additive-expression -> . additive-expression PLUS multiplicative-expression
    (76) additive-expression -> . additive-expression MINUS multiplicative-expression
    (77) multiplicative-expression -> . unary-expression
    (78) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (79) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (80) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (81) unary-expression -> . primary-expression
    (82) unary-expression -> . PLUS unary-expression
    (83) unary-expression -> . MINUS unary-expression
    (84) unary-expression -> . BITNOT unary-expression
    (85) unary-expression -> . BITCOMP unary-expression
    (86) unary-expression -> . TIMES unary-expression
    (87) unary-expression -> . pre-increment-expression
    (88) unary-expression -> . pre-decrement-expression
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression

    NEW             shift and go to state 185
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88
    PLUS            shift and go to state 190
    MINUS           shift and go to state 187
    BITNOT          shift and go to state 197
    BITCOMP         shift and go to state 186
    TIMES           shift and go to state 184
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117

    this-access                    shift and go to state 77
    unary-expression               shift and go to state 199
    exclusive-or-expression        shift and go to state 183
    member-access                  shift and go to state 79
    relational-expression          shift and go to state 203
    additive-expression            shift and go to state 208
    primary-no-array-creation-expression shift and go to state 82
    inclusive-or-expression        shift and go to state 188
    equality-expression            shift and go to state 189
    post-increment-expression      shift and go to state 182
    element-access                 shift and go to state 101
    literal                        shift and go to state 128
    base-access                    shift and go to state 126
    conditional-and-expression     shift and go to state 192
    post-decrement-expression      shift and go to state 193
    conditional-expression         shift and go to state 191
    array-creation-expression      shift and go to state 144
    assignment                     shift and go to state 196
    object-creation-expression     shift and go to state 198
    pre-increment-expression       shift and go to state 202
    shift-expression               shift and go to state 204
    and-expression                 shift and go to state 201
    pre-decrement-expression       shift and go to state 205
    multiplicative-expression      shift and go to state 207
    conditional-or-expression      shift and go to state 211
    primary-expression             shift and go to state 209
    invocation-expression          shift and go to state 210
    expression                     shift and go to state 321
    parenthesized-expression       shift and go to state 96

state 240

    (139) assignment-operator -> MODEQUAL .

    NEW             reduce using rule 139 (assignment-operator -> MODEQUAL .)
    IDENTIFIER      reduce using rule 139 (assignment-operator -> MODEQUAL .)
    ICONST          reduce using rule 139 (assignment-operator -> MODEQUAL .)
    UICONST         reduce using rule 139 (assignment-operator -> MODEQUAL .)
    LICONST         reduce using rule 139 (assignment-operator -> MODEQUAL .)
    ULICONST        reduce using rule 139 (assignment-operator -> MODEQUAL .)
    FCONST          reduce using rule 139 (assignment-operator -> MODEQUAL .)
    DCONST          reduce using rule 139 (assignment-operator -> MODEQUAL .)
    MCONST          reduce using rule 139 (assignment-operator -> MODEQUAL .)
    CCONST          reduce using rule 139 (assignment-operator -> MODEQUAL .)
    SCONST          reduce using rule 139 (assignment-operator -> MODEQUAL .)
    VSCONST         reduce using rule 139 (assignment-operator -> MODEQUAL .)
    TRUE            reduce using rule 139 (assignment-operator -> MODEQUAL .)
    FALSE           reduce using rule 139 (assignment-operator -> MODEQUAL .)
    OPEN_PAREN      reduce using rule 139 (assignment-operator -> MODEQUAL .)
    THIS            reduce using rule 139 (assignment-operator -> MODEQUAL .)
    BASE            reduce using rule 139 (assignment-operator -> MODEQUAL .)
    PLUS            reduce using rule 139 (assignment-operator -> MODEQUAL .)
    MINUS           reduce using rule 139 (assignment-operator -> MODEQUAL .)
    BITNOT          reduce using rule 139 (assignment-operator -> MODEQUAL .)
    BITCOMP         reduce using rule 139 (assignment-operator -> MODEQUAL .)
    TIMES           reduce using rule 139 (assignment-operator -> MODEQUAL .)
    INCRE           reduce using rule 139 (assignment-operator -> MODEQUAL .)
    DECRE           reduce using rule 139 (assignment-operator -> MODEQUAL .)


state 241

    (129) post-decrement-expression -> primary-expression DECRE .

    OPEN_BRACKET    reduce using rule 129 (post-decrement-expression -> primary-expression DECRE .)
    DOT             reduce using rule 129 (post-decrement-expression -> primary-expression DECRE .)
    OPEN_PAREN      reduce using rule 129 (post-decrement-expression -> primary-expression DECRE .)
    INCRE           reduce using rule 129 (post-decrement-expression -> primary-expression DECRE .)
    DECRE           reduce using rule 129 (post-decrement-expression -> primary-expression DECRE .)
    ASSIGN          reduce using rule 129 (post-decrement-expression -> primary-expression DECRE .)
    PLUSEQUAL       reduce using rule 129 (post-decrement-expression -> primary-expression DECRE .)
    MINUSEQUAL      reduce using rule 129 (post-decrement-expression -> primary-expression DECRE .)
    TIMESEQUAL      reduce using rule 129 (post-decrement-expression -> primary-expression DECRE .)
    DIVEQUAL        reduce using rule 129 (post-decrement-expression -> primary-expression DECRE .)
    MODEQUAL        reduce using rule 129 (post-decrement-expression -> primary-expression DECRE .)
    BITANDEQUAL     reduce using rule 129 (post-decrement-expression -> primary-expression DECRE .)
    BITOREQUAL      reduce using rule 129 (post-decrement-expression -> primary-expression DECRE .)
    BITXOREQUAL     reduce using rule 129 (post-decrement-expression -> primary-expression DECRE .)
    LSHIFTEQUAL     reduce using rule 129 (post-decrement-expression -> primary-expression DECRE .)
    RSHIFTEQUAL     reduce using rule 129 (post-decrement-expression -> primary-expression DECRE .)
    TIMES           reduce using rule 129 (post-decrement-expression -> primary-expression DECRE .)
    DIV             reduce using rule 129 (post-decrement-expression -> primary-expression DECRE .)
    MOD             reduce using rule 129 (post-decrement-expression -> primary-expression DECRE .)
    PLUS            reduce using rule 129 (post-decrement-expression -> primary-expression DECRE .)
    MINUS           reduce using rule 129 (post-decrement-expression -> primary-expression DECRE .)
    LSHIFT          reduce using rule 129 (post-decrement-expression -> primary-expression DECRE .)
    RSHIFT          reduce using rule 129 (post-decrement-expression -> primary-expression DECRE .)
    LT              reduce using rule 129 (post-decrement-expression -> primary-expression DECRE .)
    GT              reduce using rule 129 (post-decrement-expression -> primary-expression DECRE .)
    LE              reduce using rule 129 (post-decrement-expression -> primary-expression DECRE .)
    GE              reduce using rule 129 (post-decrement-expression -> primary-expression DECRE .)
    EQ              reduce using rule 129 (post-decrement-expression -> primary-expression DECRE .)
    NE              reduce using rule 129 (post-decrement-expression -> primary-expression DECRE .)
    BITAND          reduce using rule 129 (post-decrement-expression -> primary-expression DECRE .)
    BITXOR          reduce using rule 129 (post-decrement-expression -> primary-expression DECRE .)
    BITOR           reduce using rule 129 (post-decrement-expression -> primary-expression DECRE .)
    LOGAND          reduce using rule 129 (post-decrement-expression -> primary-expression DECRE .)
    CONDOP          reduce using rule 129 (post-decrement-expression -> primary-expression DECRE .)
    LOGOR           reduce using rule 129 (post-decrement-expression -> primary-expression DECRE .)
    COMMA           reduce using rule 129 (post-decrement-expression -> primary-expression DECRE .)
    BLOCK_END       reduce using rule 129 (post-decrement-expression -> primary-expression DECRE .)
    DELIM           reduce using rule 129 (post-decrement-expression -> primary-expression DECRE .)
    CLOSE_PAREN     reduce using rule 129 (post-decrement-expression -> primary-expression DECRE .)
    CLOSE_BRACKET   reduce using rule 129 (post-decrement-expression -> primary-expression DECRE .)
    COLON           reduce using rule 129 (post-decrement-expression -> primary-expression DECRE .)


state 242

    (141) assignment-operator -> BITOREQUAL .

    NEW             reduce using rule 141 (assignment-operator -> BITOREQUAL .)
    IDENTIFIER      reduce using rule 141 (assignment-operator -> BITOREQUAL .)
    ICONST          reduce using rule 141 (assignment-operator -> BITOREQUAL .)
    UICONST         reduce using rule 141 (assignment-operator -> BITOREQUAL .)
    LICONST         reduce using rule 141 (assignment-operator -> BITOREQUAL .)
    ULICONST        reduce using rule 141 (assignment-operator -> BITOREQUAL .)
    FCONST          reduce using rule 141 (assignment-operator -> BITOREQUAL .)
    DCONST          reduce using rule 141 (assignment-operator -> BITOREQUAL .)
    MCONST          reduce using rule 141 (assignment-operator -> BITOREQUAL .)
    CCONST          reduce using rule 141 (assignment-operator -> BITOREQUAL .)
    SCONST          reduce using rule 141 (assignment-operator -> BITOREQUAL .)
    VSCONST         reduce using rule 141 (assignment-operator -> BITOREQUAL .)
    TRUE            reduce using rule 141 (assignment-operator -> BITOREQUAL .)
    FALSE           reduce using rule 141 (assignment-operator -> BITOREQUAL .)
    OPEN_PAREN      reduce using rule 141 (assignment-operator -> BITOREQUAL .)
    THIS            reduce using rule 141 (assignment-operator -> BITOREQUAL .)
    BASE            reduce using rule 141 (assignment-operator -> BITOREQUAL .)
    PLUS            reduce using rule 141 (assignment-operator -> BITOREQUAL .)
    MINUS           reduce using rule 141 (assignment-operator -> BITOREQUAL .)
    BITNOT          reduce using rule 141 (assignment-operator -> BITOREQUAL .)
    BITCOMP         reduce using rule 141 (assignment-operator -> BITOREQUAL .)
    TIMES           reduce using rule 141 (assignment-operator -> BITOREQUAL .)
    INCRE           reduce using rule 141 (assignment-operator -> BITOREQUAL .)
    DECRE           reduce using rule 141 (assignment-operator -> BITOREQUAL .)


state 243

    (135) assignment-operator -> PLUSEQUAL .

    NEW             reduce using rule 135 (assignment-operator -> PLUSEQUAL .)
    IDENTIFIER      reduce using rule 135 (assignment-operator -> PLUSEQUAL .)
    ICONST          reduce using rule 135 (assignment-operator -> PLUSEQUAL .)
    UICONST         reduce using rule 135 (assignment-operator -> PLUSEQUAL .)
    LICONST         reduce using rule 135 (assignment-operator -> PLUSEQUAL .)
    ULICONST        reduce using rule 135 (assignment-operator -> PLUSEQUAL .)
    FCONST          reduce using rule 135 (assignment-operator -> PLUSEQUAL .)
    DCONST          reduce using rule 135 (assignment-operator -> PLUSEQUAL .)
    MCONST          reduce using rule 135 (assignment-operator -> PLUSEQUAL .)
    CCONST          reduce using rule 135 (assignment-operator -> PLUSEQUAL .)
    SCONST          reduce using rule 135 (assignment-operator -> PLUSEQUAL .)
    VSCONST         reduce using rule 135 (assignment-operator -> PLUSEQUAL .)
    TRUE            reduce using rule 135 (assignment-operator -> PLUSEQUAL .)
    FALSE           reduce using rule 135 (assignment-operator -> PLUSEQUAL .)
    OPEN_PAREN      reduce using rule 135 (assignment-operator -> PLUSEQUAL .)
    THIS            reduce using rule 135 (assignment-operator -> PLUSEQUAL .)
    BASE            reduce using rule 135 (assignment-operator -> PLUSEQUAL .)
    PLUS            reduce using rule 135 (assignment-operator -> PLUSEQUAL .)
    MINUS           reduce using rule 135 (assignment-operator -> PLUSEQUAL .)
    BITNOT          reduce using rule 135 (assignment-operator -> PLUSEQUAL .)
    BITCOMP         reduce using rule 135 (assignment-operator -> PLUSEQUAL .)
    TIMES           reduce using rule 135 (assignment-operator -> PLUSEQUAL .)
    INCRE           reduce using rule 135 (assignment-operator -> PLUSEQUAL .)
    DECRE           reduce using rule 135 (assignment-operator -> PLUSEQUAL .)


state 244

    (128) post-increment-expression -> primary-expression INCRE .

    OPEN_BRACKET    reduce using rule 128 (post-increment-expression -> primary-expression INCRE .)
    DOT             reduce using rule 128 (post-increment-expression -> primary-expression INCRE .)
    OPEN_PAREN      reduce using rule 128 (post-increment-expression -> primary-expression INCRE .)
    INCRE           reduce using rule 128 (post-increment-expression -> primary-expression INCRE .)
    DECRE           reduce using rule 128 (post-increment-expression -> primary-expression INCRE .)
    ASSIGN          reduce using rule 128 (post-increment-expression -> primary-expression INCRE .)
    PLUSEQUAL       reduce using rule 128 (post-increment-expression -> primary-expression INCRE .)
    MINUSEQUAL      reduce using rule 128 (post-increment-expression -> primary-expression INCRE .)
    TIMESEQUAL      reduce using rule 128 (post-increment-expression -> primary-expression INCRE .)
    DIVEQUAL        reduce using rule 128 (post-increment-expression -> primary-expression INCRE .)
    MODEQUAL        reduce using rule 128 (post-increment-expression -> primary-expression INCRE .)
    BITANDEQUAL     reduce using rule 128 (post-increment-expression -> primary-expression INCRE .)
    BITOREQUAL      reduce using rule 128 (post-increment-expression -> primary-expression INCRE .)
    BITXOREQUAL     reduce using rule 128 (post-increment-expression -> primary-expression INCRE .)
    LSHIFTEQUAL     reduce using rule 128 (post-increment-expression -> primary-expression INCRE .)
    RSHIFTEQUAL     reduce using rule 128 (post-increment-expression -> primary-expression INCRE .)
    TIMES           reduce using rule 128 (post-increment-expression -> primary-expression INCRE .)
    DIV             reduce using rule 128 (post-increment-expression -> primary-expression INCRE .)
    MOD             reduce using rule 128 (post-increment-expression -> primary-expression INCRE .)
    PLUS            reduce using rule 128 (post-increment-expression -> primary-expression INCRE .)
    MINUS           reduce using rule 128 (post-increment-expression -> primary-expression INCRE .)
    LSHIFT          reduce using rule 128 (post-increment-expression -> primary-expression INCRE .)
    RSHIFT          reduce using rule 128 (post-increment-expression -> primary-expression INCRE .)
    LT              reduce using rule 128 (post-increment-expression -> primary-expression INCRE .)
    GT              reduce using rule 128 (post-increment-expression -> primary-expression INCRE .)
    LE              reduce using rule 128 (post-increment-expression -> primary-expression INCRE .)
    GE              reduce using rule 128 (post-increment-expression -> primary-expression INCRE .)
    EQ              reduce using rule 128 (post-increment-expression -> primary-expression INCRE .)
    NE              reduce using rule 128 (post-increment-expression -> primary-expression INCRE .)
    BITAND          reduce using rule 128 (post-increment-expression -> primary-expression INCRE .)
    BITXOR          reduce using rule 128 (post-increment-expression -> primary-expression INCRE .)
    BITOR           reduce using rule 128 (post-increment-expression -> primary-expression INCRE .)
    LOGAND          reduce using rule 128 (post-increment-expression -> primary-expression INCRE .)
    CONDOP          reduce using rule 128 (post-increment-expression -> primary-expression INCRE .)
    LOGOR           reduce using rule 128 (post-increment-expression -> primary-expression INCRE .)
    CLOSE_PAREN     reduce using rule 128 (post-increment-expression -> primary-expression INCRE .)
    COMMA           reduce using rule 128 (post-increment-expression -> primary-expression INCRE .)
    DELIM           reduce using rule 128 (post-increment-expression -> primary-expression INCRE .)
    CLOSE_BRACKET   reduce using rule 128 (post-increment-expression -> primary-expression INCRE .)
    BLOCK_END       reduce using rule 128 (post-increment-expression -> primary-expression INCRE .)
    COLON           reduce using rule 128 (post-increment-expression -> primary-expression INCRE .)


state 245

    (116) invocation-expression -> primary-expression OPEN_PAREN . argument-list-opt CLOSE_PAREN
    (117) argument-list-opt -> . argument-list
    (118) argument-list-opt -> . empty
    (119) argument-list -> . argument
    (120) argument-list -> . argument-list COMMA argument
    (269) empty -> .
    (121) argument -> . expression
    (122) argument -> . OUT variable-reference
    (49) expression -> . conditional-expression
    (50) expression -> . assignment
    (51) conditional-expression -> . conditional-or-expression
    (52) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (133) assignment -> . primary-expression assignment-operator expression
    (53) conditional-or-expression -> . conditional-and-expression
    (54) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (55) conditional-and-expression -> . inclusive-or-expression
    (56) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (57) inclusive-or-expression -> . exclusive-or-expression
    (58) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (59) exclusive-or-expression -> . and-expression
    (60) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (61) and-expression -> . equality-expression
    (62) and-expression -> . and-expression BITAND equality-expression
    (63) equality-expression -> . relational-expression
    (64) equality-expression -> . equality-expression EQ relational-expression
    (65) equality-expression -> . equality-expression NE relational-expression
    (66) relational-expression -> . shift-expression
    (67) relational-expression -> . relational-expression LT shift-expression
    (68) relational-expression -> . relational-expression GT shift-expression
    (69) relational-expression -> . relational-expression LE shift-expression
    (70) relational-expression -> . relational-expression GE shift-expression
    (71) shift-expression -> . additive-expression
    (72) shift-expression -> . shift-expression LSHIFT additive-expression
    (73) shift-expression -> . shift-expression RSHIFT additive-expression
    (74) additive-expression -> . multiplicative-expression
    (75) additive-expression -> . additive-expression PLUS multiplicative-expression
    (76) additive-expression -> . additive-expression MINUS multiplicative-expression
    (77) multiplicative-expression -> . unary-expression
    (78) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (79) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (80) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (81) unary-expression -> . primary-expression
    (82) unary-expression -> . PLUS unary-expression
    (83) unary-expression -> . MINUS unary-expression
    (84) unary-expression -> . BITNOT unary-expression
    (85) unary-expression -> . BITCOMP unary-expression
    (86) unary-expression -> . TIMES unary-expression
    (87) unary-expression -> . pre-increment-expression
    (88) unary-expression -> . pre-decrement-expression
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression

    CLOSE_PAREN     reduce using rule 269 (empty -> .)
    OUT             shift and go to state 326
    NEW             shift and go to state 185
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88
    PLUS            shift and go to state 190
    MINUS           shift and go to state 187
    BITNOT          shift and go to state 197
    BITCOMP         shift and go to state 186
    TIMES           shift and go to state 184
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117

    this-access                    shift and go to state 77
    argument-list-opt              shift and go to state 322
    unary-expression               shift and go to state 199
    exclusive-or-expression        shift and go to state 183
    member-access                  shift and go to state 79
    argument                       shift and go to state 327
    relational-expression          shift and go to state 203
    additive-expression            shift and go to state 208
    primary-no-array-creation-expression shift and go to state 82
    inclusive-or-expression        shift and go to state 188
    equality-expression            shift and go to state 189
    post-increment-expression      shift and go to state 182
    element-access                 shift and go to state 101
    literal                        shift and go to state 128
    conditional-expression         shift and go to state 191
    assignment                     shift and go to state 196
    post-decrement-expression      shift and go to state 193
    argument-list                  shift and go to state 323
    empty                          shift and go to state 325
    base-access                    shift and go to state 126
    array-creation-expression      shift and go to state 144
    conditional-and-expression     shift and go to state 192
    object-creation-expression     shift and go to state 198
    pre-increment-expression       shift and go to state 202
    shift-expression               shift and go to state 204
    and-expression                 shift and go to state 201
    pre-decrement-expression       shift and go to state 205
    multiplicative-expression      shift and go to state 207
    expression                     shift and go to state 324
    primary-expression             shift and go to state 209
    invocation-expression          shift and go to state 210
    conditional-or-expression      shift and go to state 211
    parenthesized-expression       shift and go to state 96

state 246

    (115) member-access -> primary-expression DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 328


state 247

    (143) assignment-operator -> LSHIFTEQUAL .

    NEW             reduce using rule 143 (assignment-operator -> LSHIFTEQUAL .)
    IDENTIFIER      reduce using rule 143 (assignment-operator -> LSHIFTEQUAL .)
    ICONST          reduce using rule 143 (assignment-operator -> LSHIFTEQUAL .)
    UICONST         reduce using rule 143 (assignment-operator -> LSHIFTEQUAL .)
    LICONST         reduce using rule 143 (assignment-operator -> LSHIFTEQUAL .)
    ULICONST        reduce using rule 143 (assignment-operator -> LSHIFTEQUAL .)
    FCONST          reduce using rule 143 (assignment-operator -> LSHIFTEQUAL .)
    DCONST          reduce using rule 143 (assignment-operator -> LSHIFTEQUAL .)
    MCONST          reduce using rule 143 (assignment-operator -> LSHIFTEQUAL .)
    CCONST          reduce using rule 143 (assignment-operator -> LSHIFTEQUAL .)
    SCONST          reduce using rule 143 (assignment-operator -> LSHIFTEQUAL .)
    VSCONST         reduce using rule 143 (assignment-operator -> LSHIFTEQUAL .)
    TRUE            reduce using rule 143 (assignment-operator -> LSHIFTEQUAL .)
    FALSE           reduce using rule 143 (assignment-operator -> LSHIFTEQUAL .)
    OPEN_PAREN      reduce using rule 143 (assignment-operator -> LSHIFTEQUAL .)
    THIS            reduce using rule 143 (assignment-operator -> LSHIFTEQUAL .)
    BASE            reduce using rule 143 (assignment-operator -> LSHIFTEQUAL .)
    PLUS            reduce using rule 143 (assignment-operator -> LSHIFTEQUAL .)
    MINUS           reduce using rule 143 (assignment-operator -> LSHIFTEQUAL .)
    BITNOT          reduce using rule 143 (assignment-operator -> LSHIFTEQUAL .)
    BITCOMP         reduce using rule 143 (assignment-operator -> LSHIFTEQUAL .)
    TIMES           reduce using rule 143 (assignment-operator -> LSHIFTEQUAL .)
    INCRE           reduce using rule 143 (assignment-operator -> LSHIFTEQUAL .)
    DECRE           reduce using rule 143 (assignment-operator -> LSHIFTEQUAL .)


state 248

    (134) assignment-operator -> ASSIGN .

    NEW             reduce using rule 134 (assignment-operator -> ASSIGN .)
    IDENTIFIER      reduce using rule 134 (assignment-operator -> ASSIGN .)
    ICONST          reduce using rule 134 (assignment-operator -> ASSIGN .)
    UICONST         reduce using rule 134 (assignment-operator -> ASSIGN .)
    LICONST         reduce using rule 134 (assignment-operator -> ASSIGN .)
    ULICONST        reduce using rule 134 (assignment-operator -> ASSIGN .)
    FCONST          reduce using rule 134 (assignment-operator -> ASSIGN .)
    DCONST          reduce using rule 134 (assignment-operator -> ASSIGN .)
    MCONST          reduce using rule 134 (assignment-operator -> ASSIGN .)
    CCONST          reduce using rule 134 (assignment-operator -> ASSIGN .)
    SCONST          reduce using rule 134 (assignment-operator -> ASSIGN .)
    VSCONST         reduce using rule 134 (assignment-operator -> ASSIGN .)
    TRUE            reduce using rule 134 (assignment-operator -> ASSIGN .)
    FALSE           reduce using rule 134 (assignment-operator -> ASSIGN .)
    OPEN_PAREN      reduce using rule 134 (assignment-operator -> ASSIGN .)
    THIS            reduce using rule 134 (assignment-operator -> ASSIGN .)
    BASE            reduce using rule 134 (assignment-operator -> ASSIGN .)
    PLUS            reduce using rule 134 (assignment-operator -> ASSIGN .)
    MINUS           reduce using rule 134 (assignment-operator -> ASSIGN .)
    BITNOT          reduce using rule 134 (assignment-operator -> ASSIGN .)
    BITCOMP         reduce using rule 134 (assignment-operator -> ASSIGN .)
    TIMES           reduce using rule 134 (assignment-operator -> ASSIGN .)
    INCRE           reduce using rule 134 (assignment-operator -> ASSIGN .)
    DECRE           reduce using rule 134 (assignment-operator -> ASSIGN .)


state 249

    (142) assignment-operator -> BITXOREQUAL .

    NEW             reduce using rule 142 (assignment-operator -> BITXOREQUAL .)
    IDENTIFIER      reduce using rule 142 (assignment-operator -> BITXOREQUAL .)
    ICONST          reduce using rule 142 (assignment-operator -> BITXOREQUAL .)
    UICONST         reduce using rule 142 (assignment-operator -> BITXOREQUAL .)
    LICONST         reduce using rule 142 (assignment-operator -> BITXOREQUAL .)
    ULICONST        reduce using rule 142 (assignment-operator -> BITXOREQUAL .)
    FCONST          reduce using rule 142 (assignment-operator -> BITXOREQUAL .)
    DCONST          reduce using rule 142 (assignment-operator -> BITXOREQUAL .)
    MCONST          reduce using rule 142 (assignment-operator -> BITXOREQUAL .)
    CCONST          reduce using rule 142 (assignment-operator -> BITXOREQUAL .)
    SCONST          reduce using rule 142 (assignment-operator -> BITXOREQUAL .)
    VSCONST         reduce using rule 142 (assignment-operator -> BITXOREQUAL .)
    TRUE            reduce using rule 142 (assignment-operator -> BITXOREQUAL .)
    FALSE           reduce using rule 142 (assignment-operator -> BITXOREQUAL .)
    OPEN_PAREN      reduce using rule 142 (assignment-operator -> BITXOREQUAL .)
    THIS            reduce using rule 142 (assignment-operator -> BITXOREQUAL .)
    BASE            reduce using rule 142 (assignment-operator -> BITXOREQUAL .)
    PLUS            reduce using rule 142 (assignment-operator -> BITXOREQUAL .)
    MINUS           reduce using rule 142 (assignment-operator -> BITXOREQUAL .)
    BITNOT          reduce using rule 142 (assignment-operator -> BITXOREQUAL .)
    BITCOMP         reduce using rule 142 (assignment-operator -> BITXOREQUAL .)
    TIMES           reduce using rule 142 (assignment-operator -> BITXOREQUAL .)
    INCRE           reduce using rule 142 (assignment-operator -> BITXOREQUAL .)
    DECRE           reduce using rule 142 (assignment-operator -> BITXOREQUAL .)


state 250

    (157) method-header -> VOID member-name OPEN_PAREN formal-parameter-list-opt . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 329


state 251

    (41) rank-specifier -> OPEN_BRACKET dim-separators-opt CLOSE_BRACKET .

    OPEN_PAREN      reduce using rule 41 (rank-specifier -> OPEN_BRACKET dim-separators-opt CLOSE_BRACKET .)
    IDENTIFIER      reduce using rule 41 (rank-specifier -> OPEN_BRACKET dim-separators-opt CLOSE_BRACKET .)


state 252

    (45) dim-separators -> dim-separators COMMA .

    COMMA           reduce using rule 45 (dim-separators -> dim-separators COMMA .)
    CLOSE_BRACKET   reduce using rule 45 (dim-separators -> dim-separators COMMA .)


state 253

    (25) constant-declaration -> CONST simple-type constant-declarators DELIM .

    CONST           reduce using rule 25 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    BITCOMP         reduce using rule 25 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    CLASS           reduce using rule 25 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    PUBLIC          reduce using rule 25 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    PRIVATE         reduce using rule 25 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    VOID            reduce using rule 25 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    IDENTIFIER      reduce using rule 25 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    BOOL            reduce using rule 25 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    INT             reduce using rule 25 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    UINT            reduce using rule 25 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    LONG            reduce using rule 25 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    ULONG           reduce using rule 25 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    CHAR            reduce using rule 25 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    FLOAT           reduce using rule 25 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    DOUBLE          reduce using rule 25 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    BLOCK_END       reduce using rule 25 (constant-declaration -> CONST simple-type constant-declarators DELIM .)


state 254

    (47) constant-declarators -> constant-declarators COMMA . constant-declarator
    (48) constant-declarator -> . IDENTIFIER ASSIGN expression

    IDENTIFIER      shift and go to state 157

    constant-declarator            shift and go to state 330

state 255

    (48) constant-declarator -> IDENTIFIER ASSIGN . expression
    (49) expression -> . conditional-expression
    (50) expression -> . assignment
    (51) conditional-expression -> . conditional-or-expression
    (52) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (133) assignment -> . primary-expression assignment-operator expression
    (53) conditional-or-expression -> . conditional-and-expression
    (54) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (55) conditional-and-expression -> . inclusive-or-expression
    (56) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (57) inclusive-or-expression -> . exclusive-or-expression
    (58) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (59) exclusive-or-expression -> . and-expression
    (60) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (61) and-expression -> . equality-expression
    (62) and-expression -> . and-expression BITAND equality-expression
    (63) equality-expression -> . relational-expression
    (64) equality-expression -> . equality-expression EQ relational-expression
    (65) equality-expression -> . equality-expression NE relational-expression
    (66) relational-expression -> . shift-expression
    (67) relational-expression -> . relational-expression LT shift-expression
    (68) relational-expression -> . relational-expression GT shift-expression
    (69) relational-expression -> . relational-expression LE shift-expression
    (70) relational-expression -> . relational-expression GE shift-expression
    (71) shift-expression -> . additive-expression
    (72) shift-expression -> . shift-expression LSHIFT additive-expression
    (73) shift-expression -> . shift-expression RSHIFT additive-expression
    (74) additive-expression -> . multiplicative-expression
    (75) additive-expression -> . additive-expression PLUS multiplicative-expression
    (76) additive-expression -> . additive-expression MINUS multiplicative-expression
    (77) multiplicative-expression -> . unary-expression
    (78) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (79) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (80) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (81) unary-expression -> . primary-expression
    (82) unary-expression -> . PLUS unary-expression
    (83) unary-expression -> . MINUS unary-expression
    (84) unary-expression -> . BITNOT unary-expression
    (85) unary-expression -> . BITCOMP unary-expression
    (86) unary-expression -> . TIMES unary-expression
    (87) unary-expression -> . pre-increment-expression
    (88) unary-expression -> . pre-decrement-expression
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression

    NEW             shift and go to state 185
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88
    PLUS            shift and go to state 190
    MINUS           shift and go to state 187
    BITNOT          shift and go to state 197
    BITCOMP         shift and go to state 186
    TIMES           shift and go to state 184
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117

    this-access                    shift and go to state 77
    unary-expression               shift and go to state 199
    exclusive-or-expression        shift and go to state 183
    member-access                  shift and go to state 79
    relational-expression          shift and go to state 203
    additive-expression            shift and go to state 208
    primary-no-array-creation-expression shift and go to state 82
    inclusive-or-expression        shift and go to state 188
    equality-expression            shift and go to state 189
    post-increment-expression      shift and go to state 182
    element-access                 shift and go to state 101
    literal                        shift and go to state 128
    base-access                    shift and go to state 126
    conditional-and-expression     shift and go to state 192
    post-decrement-expression      shift and go to state 193
    conditional-expression         shift and go to state 191
    array-creation-expression      shift and go to state 144
    assignment                     shift and go to state 196
    object-creation-expression     shift and go to state 198
    pre-increment-expression       shift and go to state 202
    shift-expression               shift and go to state 204
    and-expression                 shift and go to state 201
    pre-decrement-expression       shift and go to state 205
    multiplicative-expression      shift and go to state 207
    conditional-or-expression      shift and go to state 211
    primary-expression             shift and go to state 209
    invocation-expression          shift and go to state 210
    expression                     shift and go to state 331
    parenthesized-expression       shift and go to state 96

state 256

    (254) destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN . destructor-body
    (255) destructor-body -> . block
    (256) destructor-body -> . DELIM
    (170) block -> . BLOCK_BEGIN statement-list-opt BLOCK_END

    DELIM           shift and go to state 332
    BLOCK_BEGIN     shift and go to state 55

    destructor-body                shift and go to state 333
    block                          shift and go to state 334

state 257

    (150) variable-declarators -> variable-declarators COMMA variable-declarator .

    DELIM           reduce using rule 150 (variable-declarators -> variable-declarators COMMA variable-declarator .)
    COMMA           reduce using rule 150 (variable-declarators -> variable-declarators COMMA variable-declarator .)


state 258

    (151) variable-declarator -> IDENTIFIER .
    (152) variable-declarator -> IDENTIFIER . ASSIGN variable-initializer

    DELIM           reduce using rule 151 (variable-declarator -> IDENTIFIER .)
    COMMA           reduce using rule 151 (variable-declarator -> IDENTIFIER .)
    ASSIGN          shift and go to state 163


state 259

    (156) method-header -> type member-name OPEN_PAREN formal-parameter-list-opt . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 335


state 260

    (102) variable-initializer -> array-initializer .

    COMMA           reduce using rule 102 (variable-initializer -> array-initializer .)
    BLOCK_END       reduce using rule 102 (variable-initializer -> array-initializer .)
    DELIM           reduce using rule 102 (variable-initializer -> array-initializer .)


state 261

    (152) variable-declarator -> IDENTIFIER ASSIGN variable-initializer .

    DELIM           reduce using rule 152 (variable-declarator -> IDENTIFIER ASSIGN variable-initializer .)
    COMMA           reduce using rule 152 (variable-declarator -> IDENTIFIER ASSIGN variable-initializer .)


state 262

    (101) variable-initializer -> expression .

    COMMA           reduce using rule 101 (variable-initializer -> expression .)
    BLOCK_END       reduce using rule 101 (variable-initializer -> expression .)
    DELIM           reduce using rule 101 (variable-initializer -> expression .)


state 263

    (96) array-initializer -> BLOCK_BEGIN . variable-initializer-list-opt BLOCK_END
    (97) variable-initializer-list-opt -> . variable-initializer-list
    (98) variable-initializer-list-opt -> . empty
    (99) variable-initializer-list -> . variable-initializer
    (100) variable-initializer-list -> . variable-initializer-list COMMA variable-initializer
    (269) empty -> .
    (101) variable-initializer -> . expression
    (102) variable-initializer -> . array-initializer
    (49) expression -> . conditional-expression
    (50) expression -> . assignment
    (96) array-initializer -> . BLOCK_BEGIN variable-initializer-list-opt BLOCK_END
    (51) conditional-expression -> . conditional-or-expression
    (52) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (133) assignment -> . primary-expression assignment-operator expression
    (53) conditional-or-expression -> . conditional-and-expression
    (54) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (55) conditional-and-expression -> . inclusive-or-expression
    (56) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (57) inclusive-or-expression -> . exclusive-or-expression
    (58) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (59) exclusive-or-expression -> . and-expression
    (60) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (61) and-expression -> . equality-expression
    (62) and-expression -> . and-expression BITAND equality-expression
    (63) equality-expression -> . relational-expression
    (64) equality-expression -> . equality-expression EQ relational-expression
    (65) equality-expression -> . equality-expression NE relational-expression
    (66) relational-expression -> . shift-expression
    (67) relational-expression -> . relational-expression LT shift-expression
    (68) relational-expression -> . relational-expression GT shift-expression
    (69) relational-expression -> . relational-expression LE shift-expression
    (70) relational-expression -> . relational-expression GE shift-expression
    (71) shift-expression -> . additive-expression
    (72) shift-expression -> . shift-expression LSHIFT additive-expression
    (73) shift-expression -> . shift-expression RSHIFT additive-expression
    (74) additive-expression -> . multiplicative-expression
    (75) additive-expression -> . additive-expression PLUS multiplicative-expression
    (76) additive-expression -> . additive-expression MINUS multiplicative-expression
    (77) multiplicative-expression -> . unary-expression
    (78) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (79) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (80) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (81) unary-expression -> . primary-expression
    (82) unary-expression -> . PLUS unary-expression
    (83) unary-expression -> . MINUS unary-expression
    (84) unary-expression -> . BITNOT unary-expression
    (85) unary-expression -> . BITCOMP unary-expression
    (86) unary-expression -> . TIMES unary-expression
    (87) unary-expression -> . pre-increment-expression
    (88) unary-expression -> . pre-decrement-expression
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression

    BLOCK_END       reduce using rule 269 (empty -> .)
    BLOCK_BEGIN     shift and go to state 263
    NEW             shift and go to state 185
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88
    PLUS            shift and go to state 190
    MINUS           shift and go to state 187
    BITNOT          shift and go to state 197
    BITCOMP         shift and go to state 186
    TIMES           shift and go to state 184
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117

    this-access                    shift and go to state 77
    variable-initializer-list      shift and go to state 336
    unary-expression               shift and go to state 199
    exclusive-or-expression        shift and go to state 183
    member-access                  shift and go to state 79
    relational-expression          shift and go to state 203
    additive-expression            shift and go to state 208
    primary-no-array-creation-expression shift and go to state 82
    array-initializer              shift and go to state 260
    inclusive-or-expression        shift and go to state 188
    equality-expression            shift and go to state 189
    post-increment-expression      shift and go to state 182
    element-access                 shift and go to state 101
    literal                        shift and go to state 128
    conditional-expression         shift and go to state 191
    conditional-and-expression     shift and go to state 192
    post-decrement-expression      shift and go to state 193
    variable-initializer-list-opt  shift and go to state 338
    empty                          shift and go to state 339
    base-access                    shift and go to state 126
    array-creation-expression      shift and go to state 144
    assignment                     shift and go to state 196
    variable-initializer           shift and go to state 337
    object-creation-expression     shift and go to state 198
    pre-increment-expression       shift and go to state 202
    shift-expression               shift and go to state 204
    and-expression                 shift and go to state 201
    pre-decrement-expression       shift and go to state 205
    multiplicative-expression      shift and go to state 207
    expression                     shift and go to state 262
    primary-expression             shift and go to state 209
    invocation-expression          shift and go to state 210
    conditional-or-expression      shift and go to state 211
    parenthesized-expression       shift and go to state 96

state 264

    (164) fixed-parameter -> parameter-modifier-opt type . IDENTIFIER

    IDENTIFIER      shift and go to state 340


state 265

    (163) fixed-parameters -> fixed-parameters COMMA . fixed-parameter
    (164) fixed-parameter -> . parameter-modifier-opt type IDENTIFIER
    (165) parameter-modifier-opt -> . parameter-modifier
    (166) parameter-modifier-opt -> . empty
    (167) parameter-modifier -> . OUT
    (269) empty -> .

    OUT             shift and go to state 167
    BOOL            reduce using rule 269 (empty -> .)
    IDENTIFIER      reduce using rule 269 (empty -> .)
    INT             reduce using rule 269 (empty -> .)
    UINT            reduce using rule 269 (empty -> .)
    LONG            reduce using rule 269 (empty -> .)
    ULONG           reduce using rule 269 (empty -> .)
    CHAR            reduce using rule 269 (empty -> .)
    FLOAT           reduce using rule 269 (empty -> .)
    DOUBLE          reduce using rule 269 (empty -> .)

    parameter-modifier             shift and go to state 164
    parameter-modifier-opt         shift and go to state 165
    empty                          shift and go to state 341
    fixed-parameter                shift and go to state 342

state 266

    (251) constructor-declarator -> IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .

    DELIM           reduce using rule 251 (constructor-declarator -> IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)
    BLOCK_BEGIN     reduce using rule 251 (constructor-declarator -> IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)


state 267

    (24) constant-declaration -> modifier CONST simple-type constant-declarators . DELIM
    (47) constant-declarators -> constant-declarators . COMMA constant-declarator

    DELIM           shift and go to state 343
    COMMA           shift and go to state 254


state 268

    (155) method-header -> modifier VOID member-name OPEN_PAREN . formal-parameter-list-opt CLOSE_PAREN
    (158) formal-parameter-list-opt -> . formal-parameter-list
    (159) formal-parameter-list-opt -> . empty
    (161) formal-parameter-list -> . fixed-parameters
    (269) empty -> .
    (162) fixed-parameters -> . fixed-parameter
    (163) fixed-parameters -> . fixed-parameters COMMA fixed-parameter
    (164) fixed-parameter -> . parameter-modifier-opt type IDENTIFIER
    (165) parameter-modifier-opt -> . parameter-modifier
    (166) parameter-modifier-opt -> . empty
    (167) parameter-modifier -> . OUT

    CLOSE_PAREN     reduce using rule 269 (empty -> .)
    BOOL            reduce using rule 269 (empty -> .)
    IDENTIFIER      reduce using rule 269 (empty -> .)
    INT             reduce using rule 269 (empty -> .)
    UINT            reduce using rule 269 (empty -> .)
    LONG            reduce using rule 269 (empty -> .)
    ULONG           reduce using rule 269 (empty -> .)
    CHAR            reduce using rule 269 (empty -> .)
    FLOAT           reduce using rule 269 (empty -> .)
    DOUBLE          reduce using rule 269 (empty -> .)
    OUT             shift and go to state 167

    parameter-modifier             shift and go to state 164
    parameter-modifier-opt         shift and go to state 165
    fixed-parameters               shift and go to state 166
    formal-parameter-list-opt      shift and go to state 344
    fixed-parameter                shift and go to state 169
    empty                          shift and go to state 170
    formal-parameter-list          shift and go to state 171

state 269

    (145) field-declaration -> modifier type variable-declarators DELIM .

    CONST           reduce using rule 145 (field-declaration -> modifier type variable-declarators DELIM .)
    BITCOMP         reduce using rule 145 (field-declaration -> modifier type variable-declarators DELIM .)
    CLASS           reduce using rule 145 (field-declaration -> modifier type variable-declarators DELIM .)
    PUBLIC          reduce using rule 145 (field-declaration -> modifier type variable-declarators DELIM .)
    PRIVATE         reduce using rule 145 (field-declaration -> modifier type variable-declarators DELIM .)
    VOID            reduce using rule 145 (field-declaration -> modifier type variable-declarators DELIM .)
    IDENTIFIER      reduce using rule 145 (field-declaration -> modifier type variable-declarators DELIM .)
    BOOL            reduce using rule 145 (field-declaration -> modifier type variable-declarators DELIM .)
    INT             reduce using rule 145 (field-declaration -> modifier type variable-declarators DELIM .)
    UINT            reduce using rule 145 (field-declaration -> modifier type variable-declarators DELIM .)
    LONG            reduce using rule 145 (field-declaration -> modifier type variable-declarators DELIM .)
    ULONG           reduce using rule 145 (field-declaration -> modifier type variable-declarators DELIM .)
    CHAR            reduce using rule 145 (field-declaration -> modifier type variable-declarators DELIM .)
    FLOAT           reduce using rule 145 (field-declaration -> modifier type variable-declarators DELIM .)
    DOUBLE          reduce using rule 145 (field-declaration -> modifier type variable-declarators DELIM .)
    BLOCK_END       reduce using rule 145 (field-declaration -> modifier type variable-declarators DELIM .)


state 270

    (154) method-header -> modifier type member-name OPEN_PAREN . formal-parameter-list-opt CLOSE_PAREN
    (158) formal-parameter-list-opt -> . formal-parameter-list
    (159) formal-parameter-list-opt -> . empty
    (161) formal-parameter-list -> . fixed-parameters
    (269) empty -> .
    (162) fixed-parameters -> . fixed-parameter
    (163) fixed-parameters -> . fixed-parameters COMMA fixed-parameter
    (164) fixed-parameter -> . parameter-modifier-opt type IDENTIFIER
    (165) parameter-modifier-opt -> . parameter-modifier
    (166) parameter-modifier-opt -> . empty
    (167) parameter-modifier -> . OUT

    CLOSE_PAREN     reduce using rule 269 (empty -> .)
    BOOL            reduce using rule 269 (empty -> .)
    IDENTIFIER      reduce using rule 269 (empty -> .)
    INT             reduce using rule 269 (empty -> .)
    UINT            reduce using rule 269 (empty -> .)
    LONG            reduce using rule 269 (empty -> .)
    ULONG           reduce using rule 269 (empty -> .)
    CHAR            reduce using rule 269 (empty -> .)
    FLOAT           reduce using rule 269 (empty -> .)
    DOUBLE          reduce using rule 269 (empty -> .)
    OUT             shift and go to state 167

    parameter-modifier             shift and go to state 164
    parameter-modifier-opt         shift and go to state 165
    fixed-parameters               shift and go to state 166
    formal-parameter-list-opt      shift and go to state 345
    fixed-parameter                shift and go to state 169
    empty                          shift and go to state 170
    formal-parameter-list          shift and go to state 171

state 271

    (124) element-access -> primary-no-array-creation-expression OPEN_BRACKET expression-list . CLOSE_BRACKET
    (95) expression-list -> expression-list . COMMA expression

    CLOSE_BRACKET   shift and go to state 346
    COMMA           shift and go to state 347


state 272

    (94) expression-list -> expression .

    CLOSE_BRACKET   reduce using rule 94 (expression-list -> expression .)
    COMMA           reduce using rule 94 (expression-list -> expression .)


state 273

    (246) goto-statement -> GOTO IDENTIFIER DELIM .

    IDENTIFIER      reduce using rule 246 (goto-statement -> GOTO IDENTIFIER DELIM .)
    CONST           reduce using rule 246 (goto-statement -> GOTO IDENTIFIER DELIM .)
    BLOCK_BEGIN     reduce using rule 246 (goto-statement -> GOTO IDENTIFIER DELIM .)
    DELIM           reduce using rule 246 (goto-statement -> GOTO IDENTIFIER DELIM .)
    IF              reduce using rule 246 (goto-statement -> GOTO IDENTIFIER DELIM .)
    SWITCH          reduce using rule 246 (goto-statement -> GOTO IDENTIFIER DELIM .)
    WHILE           reduce using rule 246 (goto-statement -> GOTO IDENTIFIER DELIM .)
    FOR             reduce using rule 246 (goto-statement -> GOTO IDENTIFIER DELIM .)
    FOREACH         reduce using rule 246 (goto-statement -> GOTO IDENTIFIER DELIM .)
    DO              reduce using rule 246 (goto-statement -> GOTO IDENTIFIER DELIM .)
    BREAK           reduce using rule 246 (goto-statement -> GOTO IDENTIFIER DELIM .)
    CONTINUE        reduce using rule 246 (goto-statement -> GOTO IDENTIFIER DELIM .)
    GOTO            reduce using rule 246 (goto-statement -> GOTO IDENTIFIER DELIM .)
    RETURN          reduce using rule 246 (goto-statement -> GOTO IDENTIFIER DELIM .)
    BOOL            reduce using rule 246 (goto-statement -> GOTO IDENTIFIER DELIM .)
    NEW             reduce using rule 246 (goto-statement -> GOTO IDENTIFIER DELIM .)
    INCRE           reduce using rule 246 (goto-statement -> GOTO IDENTIFIER DELIM .)
    DECRE           reduce using rule 246 (goto-statement -> GOTO IDENTIFIER DELIM .)
    INT             reduce using rule 246 (goto-statement -> GOTO IDENTIFIER DELIM .)
    UINT            reduce using rule 246 (goto-statement -> GOTO IDENTIFIER DELIM .)
    LONG            reduce using rule 246 (goto-statement -> GOTO IDENTIFIER DELIM .)
    ULONG           reduce using rule 246 (goto-statement -> GOTO IDENTIFIER DELIM .)
    CHAR            reduce using rule 246 (goto-statement -> GOTO IDENTIFIER DELIM .)
    FLOAT           reduce using rule 246 (goto-statement -> GOTO IDENTIFIER DELIM .)
    DOUBLE          reduce using rule 246 (goto-statement -> GOTO IDENTIFIER DELIM .)
    ICONST          reduce using rule 246 (goto-statement -> GOTO IDENTIFIER DELIM .)
    UICONST         reduce using rule 246 (goto-statement -> GOTO IDENTIFIER DELIM .)
    LICONST         reduce using rule 246 (goto-statement -> GOTO IDENTIFIER DELIM .)
    ULICONST        reduce using rule 246 (goto-statement -> GOTO IDENTIFIER DELIM .)
    FCONST          reduce using rule 246 (goto-statement -> GOTO IDENTIFIER DELIM .)
    DCONST          reduce using rule 246 (goto-statement -> GOTO IDENTIFIER DELIM .)
    MCONST          reduce using rule 246 (goto-statement -> GOTO IDENTIFIER DELIM .)
    CCONST          reduce using rule 246 (goto-statement -> GOTO IDENTIFIER DELIM .)
    SCONST          reduce using rule 246 (goto-statement -> GOTO IDENTIFIER DELIM .)
    VSCONST         reduce using rule 246 (goto-statement -> GOTO IDENTIFIER DELIM .)
    TRUE            reduce using rule 246 (goto-statement -> GOTO IDENTIFIER DELIM .)
    FALSE           reduce using rule 246 (goto-statement -> GOTO IDENTIFIER DELIM .)
    OPEN_PAREN      reduce using rule 246 (goto-statement -> GOTO IDENTIFIER DELIM .)
    THIS            reduce using rule 246 (goto-statement -> GOTO IDENTIFIER DELIM .)
    BASE            reduce using rule 246 (goto-statement -> GOTO IDENTIFIER DELIM .)
    BLOCK_END       reduce using rule 246 (goto-statement -> GOTO IDENTIFIER DELIM .)
    CASE            reduce using rule 246 (goto-statement -> GOTO IDENTIFIER DELIM .)
    DEFAULT         reduce using rule 246 (goto-statement -> GOTO IDENTIFIER DELIM .)
    ELSE            reduce using rule 246 (goto-statement -> GOTO IDENTIFIER DELIM .)


state 274

    (127) base-access -> BASE OPEN_BRACKET expression-list . CLOSE_BRACKET
    (95) expression-list -> expression-list . COMMA expression

    CLOSE_BRACKET   shift and go to state 348
    COMMA           shift and go to state 347


state 275

    (126) base-access -> BASE DOT IDENTIFIER .

    OPEN_BRACKET    reduce using rule 126 (base-access -> BASE DOT IDENTIFIER .)
    DOT             reduce using rule 126 (base-access -> BASE DOT IDENTIFIER .)
    OPEN_PAREN      reduce using rule 126 (base-access -> BASE DOT IDENTIFIER .)
    INCRE           reduce using rule 126 (base-access -> BASE DOT IDENTIFIER .)
    DECRE           reduce using rule 126 (base-access -> BASE DOT IDENTIFIER .)
    ASSIGN          reduce using rule 126 (base-access -> BASE DOT IDENTIFIER .)
    PLUSEQUAL       reduce using rule 126 (base-access -> BASE DOT IDENTIFIER .)
    MINUSEQUAL      reduce using rule 126 (base-access -> BASE DOT IDENTIFIER .)
    TIMESEQUAL      reduce using rule 126 (base-access -> BASE DOT IDENTIFIER .)
    DIVEQUAL        reduce using rule 126 (base-access -> BASE DOT IDENTIFIER .)
    MODEQUAL        reduce using rule 126 (base-access -> BASE DOT IDENTIFIER .)
    BITANDEQUAL     reduce using rule 126 (base-access -> BASE DOT IDENTIFIER .)
    BITOREQUAL      reduce using rule 126 (base-access -> BASE DOT IDENTIFIER .)
    BITXOREQUAL     reduce using rule 126 (base-access -> BASE DOT IDENTIFIER .)
    LSHIFTEQUAL     reduce using rule 126 (base-access -> BASE DOT IDENTIFIER .)
    RSHIFTEQUAL     reduce using rule 126 (base-access -> BASE DOT IDENTIFIER .)
    TIMES           reduce using rule 126 (base-access -> BASE DOT IDENTIFIER .)
    DIV             reduce using rule 126 (base-access -> BASE DOT IDENTIFIER .)
    MOD             reduce using rule 126 (base-access -> BASE DOT IDENTIFIER .)
    PLUS            reduce using rule 126 (base-access -> BASE DOT IDENTIFIER .)
    MINUS           reduce using rule 126 (base-access -> BASE DOT IDENTIFIER .)
    LSHIFT          reduce using rule 126 (base-access -> BASE DOT IDENTIFIER .)
    RSHIFT          reduce using rule 126 (base-access -> BASE DOT IDENTIFIER .)
    LT              reduce using rule 126 (base-access -> BASE DOT IDENTIFIER .)
    GT              reduce using rule 126 (base-access -> BASE DOT IDENTIFIER .)
    LE              reduce using rule 126 (base-access -> BASE DOT IDENTIFIER .)
    GE              reduce using rule 126 (base-access -> BASE DOT IDENTIFIER .)
    EQ              reduce using rule 126 (base-access -> BASE DOT IDENTIFIER .)
    NE              reduce using rule 126 (base-access -> BASE DOT IDENTIFIER .)
    BITAND          reduce using rule 126 (base-access -> BASE DOT IDENTIFIER .)
    BITXOR          reduce using rule 126 (base-access -> BASE DOT IDENTIFIER .)
    BITOR           reduce using rule 126 (base-access -> BASE DOT IDENTIFIER .)
    LOGAND          reduce using rule 126 (base-access -> BASE DOT IDENTIFIER .)
    CONDOP          reduce using rule 126 (base-access -> BASE DOT IDENTIFIER .)
    LOGOR           reduce using rule 126 (base-access -> BASE DOT IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 126 (base-access -> BASE DOT IDENTIFIER .)
    COMMA           reduce using rule 126 (base-access -> BASE DOT IDENTIFIER .)
    DELIM           reduce using rule 126 (base-access -> BASE DOT IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 126 (base-access -> BASE DOT IDENTIFIER .)
    BLOCK_END       reduce using rule 126 (base-access -> BASE DOT IDENTIFIER .)
    COLON           reduce using rule 126 (base-access -> BASE DOT IDENTIFIER .)


state 276

    (239) foreach-statement -> FOREACH OPEN_PAREN type . IDENTIFIER IN expression CLOSE_PAREN embedded-statement

    IDENTIFIER      shift and go to state 349


state 277

    (60) exclusive-or-expression -> exclusive-or-expression BITXOR . and-expression
    (61) and-expression -> . equality-expression
    (62) and-expression -> . and-expression BITAND equality-expression
    (63) equality-expression -> . relational-expression
    (64) equality-expression -> . equality-expression EQ relational-expression
    (65) equality-expression -> . equality-expression NE relational-expression
    (66) relational-expression -> . shift-expression
    (67) relational-expression -> . relational-expression LT shift-expression
    (68) relational-expression -> . relational-expression GT shift-expression
    (69) relational-expression -> . relational-expression LE shift-expression
    (70) relational-expression -> . relational-expression GE shift-expression
    (71) shift-expression -> . additive-expression
    (72) shift-expression -> . shift-expression LSHIFT additive-expression
    (73) shift-expression -> . shift-expression RSHIFT additive-expression
    (74) additive-expression -> . multiplicative-expression
    (75) additive-expression -> . additive-expression PLUS multiplicative-expression
    (76) additive-expression -> . additive-expression MINUS multiplicative-expression
    (77) multiplicative-expression -> . unary-expression
    (78) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (79) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (80) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (81) unary-expression -> . primary-expression
    (82) unary-expression -> . PLUS unary-expression
    (83) unary-expression -> . MINUS unary-expression
    (84) unary-expression -> . BITNOT unary-expression
    (85) unary-expression -> . BITCOMP unary-expression
    (86) unary-expression -> . TIMES unary-expression
    (87) unary-expression -> . pre-increment-expression
    (88) unary-expression -> . pre-decrement-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 190
    MINUS           shift and go to state 187
    BITNOT          shift and go to state 197
    BITCOMP         shift and go to state 186
    TIMES           shift and go to state 184
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117
    NEW             shift and go to state 185
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88

    this-access                    shift and go to state 77
    post-increment-expression      shift and go to state 182
    member-access                  shift and go to state 79
    relational-expression          shift and go to state 203
    additive-expression            shift and go to state 208
    primary-no-array-creation-expression shift and go to state 82
    unary-expression               shift and go to state 199
    element-access                 shift and go to state 101
    literal                        shift and go to state 128
    base-access                    shift and go to state 126
    post-decrement-expression      shift and go to state 193
    array-creation-expression      shift and go to state 144
    object-creation-expression     shift and go to state 198
    pre-increment-expression       shift and go to state 202
    equality-expression            shift and go to state 189
    shift-expression               shift and go to state 204
    and-expression                 shift and go to state 350
    pre-decrement-expression       shift and go to state 205
    multiplicative-expression      shift and go to state 207
    primary-expression             shift and go to state 217
    invocation-expression          shift and go to state 210
    parenthesized-expression       shift and go to state 96

state 278

    (86) unary-expression -> TIMES unary-expression .

    TIMES           reduce using rule 86 (unary-expression -> TIMES unary-expression .)
    DIV             reduce using rule 86 (unary-expression -> TIMES unary-expression .)
    MOD             reduce using rule 86 (unary-expression -> TIMES unary-expression .)
    PLUS            reduce using rule 86 (unary-expression -> TIMES unary-expression .)
    MINUS           reduce using rule 86 (unary-expression -> TIMES unary-expression .)
    LSHIFT          reduce using rule 86 (unary-expression -> TIMES unary-expression .)
    RSHIFT          reduce using rule 86 (unary-expression -> TIMES unary-expression .)
    LT              reduce using rule 86 (unary-expression -> TIMES unary-expression .)
    GT              reduce using rule 86 (unary-expression -> TIMES unary-expression .)
    LE              reduce using rule 86 (unary-expression -> TIMES unary-expression .)
    GE              reduce using rule 86 (unary-expression -> TIMES unary-expression .)
    EQ              reduce using rule 86 (unary-expression -> TIMES unary-expression .)
    NE              reduce using rule 86 (unary-expression -> TIMES unary-expression .)
    BITAND          reduce using rule 86 (unary-expression -> TIMES unary-expression .)
    BITXOR          reduce using rule 86 (unary-expression -> TIMES unary-expression .)
    BITOR           reduce using rule 86 (unary-expression -> TIMES unary-expression .)
    LOGAND          reduce using rule 86 (unary-expression -> TIMES unary-expression .)
    CONDOP          reduce using rule 86 (unary-expression -> TIMES unary-expression .)
    LOGOR           reduce using rule 86 (unary-expression -> TIMES unary-expression .)
    CLOSE_BRACKET   reduce using rule 86 (unary-expression -> TIMES unary-expression .)
    COMMA           reduce using rule 86 (unary-expression -> TIMES unary-expression .)
    DELIM           reduce using rule 86 (unary-expression -> TIMES unary-expression .)
    CLOSE_PAREN     reduce using rule 86 (unary-expression -> TIMES unary-expression .)
    BLOCK_END       reduce using rule 86 (unary-expression -> TIMES unary-expression .)
    COLON           reduce using rule 86 (unary-expression -> TIMES unary-expression .)


state 279

    (85) unary-expression -> BITCOMP unary-expression .

    TIMES           reduce using rule 85 (unary-expression -> BITCOMP unary-expression .)
    DIV             reduce using rule 85 (unary-expression -> BITCOMP unary-expression .)
    MOD             reduce using rule 85 (unary-expression -> BITCOMP unary-expression .)
    PLUS            reduce using rule 85 (unary-expression -> BITCOMP unary-expression .)
    MINUS           reduce using rule 85 (unary-expression -> BITCOMP unary-expression .)
    LSHIFT          reduce using rule 85 (unary-expression -> BITCOMP unary-expression .)
    RSHIFT          reduce using rule 85 (unary-expression -> BITCOMP unary-expression .)
    LT              reduce using rule 85 (unary-expression -> BITCOMP unary-expression .)
    GT              reduce using rule 85 (unary-expression -> BITCOMP unary-expression .)
    LE              reduce using rule 85 (unary-expression -> BITCOMP unary-expression .)
    GE              reduce using rule 85 (unary-expression -> BITCOMP unary-expression .)
    EQ              reduce using rule 85 (unary-expression -> BITCOMP unary-expression .)
    NE              reduce using rule 85 (unary-expression -> BITCOMP unary-expression .)
    BITAND          reduce using rule 85 (unary-expression -> BITCOMP unary-expression .)
    BITXOR          reduce using rule 85 (unary-expression -> BITCOMP unary-expression .)
    BITOR           reduce using rule 85 (unary-expression -> BITCOMP unary-expression .)
    LOGAND          reduce using rule 85 (unary-expression -> BITCOMP unary-expression .)
    CONDOP          reduce using rule 85 (unary-expression -> BITCOMP unary-expression .)
    LOGOR           reduce using rule 85 (unary-expression -> BITCOMP unary-expression .)
    CLOSE_BRACKET   reduce using rule 85 (unary-expression -> BITCOMP unary-expression .)
    COMMA           reduce using rule 85 (unary-expression -> BITCOMP unary-expression .)
    DELIM           reduce using rule 85 (unary-expression -> BITCOMP unary-expression .)
    CLOSE_PAREN     reduce using rule 85 (unary-expression -> BITCOMP unary-expression .)
    BLOCK_END       reduce using rule 85 (unary-expression -> BITCOMP unary-expression .)
    COLON           reduce using rule 85 (unary-expression -> BITCOMP unary-expression .)


state 280

    (83) unary-expression -> MINUS unary-expression .

    TIMES           reduce using rule 83 (unary-expression -> MINUS unary-expression .)
    DIV             reduce using rule 83 (unary-expression -> MINUS unary-expression .)
    MOD             reduce using rule 83 (unary-expression -> MINUS unary-expression .)
    PLUS            reduce using rule 83 (unary-expression -> MINUS unary-expression .)
    MINUS           reduce using rule 83 (unary-expression -> MINUS unary-expression .)
    LSHIFT          reduce using rule 83 (unary-expression -> MINUS unary-expression .)
    RSHIFT          reduce using rule 83 (unary-expression -> MINUS unary-expression .)
    LT              reduce using rule 83 (unary-expression -> MINUS unary-expression .)
    GT              reduce using rule 83 (unary-expression -> MINUS unary-expression .)
    LE              reduce using rule 83 (unary-expression -> MINUS unary-expression .)
    GE              reduce using rule 83 (unary-expression -> MINUS unary-expression .)
    EQ              reduce using rule 83 (unary-expression -> MINUS unary-expression .)
    NE              reduce using rule 83 (unary-expression -> MINUS unary-expression .)
    BITAND          reduce using rule 83 (unary-expression -> MINUS unary-expression .)
    BITXOR          reduce using rule 83 (unary-expression -> MINUS unary-expression .)
    BITOR           reduce using rule 83 (unary-expression -> MINUS unary-expression .)
    LOGAND          reduce using rule 83 (unary-expression -> MINUS unary-expression .)
    CONDOP          reduce using rule 83 (unary-expression -> MINUS unary-expression .)
    LOGOR           reduce using rule 83 (unary-expression -> MINUS unary-expression .)
    CLOSE_BRACKET   reduce using rule 83 (unary-expression -> MINUS unary-expression .)
    COMMA           reduce using rule 83 (unary-expression -> MINUS unary-expression .)
    DELIM           reduce using rule 83 (unary-expression -> MINUS unary-expression .)
    CLOSE_PAREN     reduce using rule 83 (unary-expression -> MINUS unary-expression .)
    BLOCK_END       reduce using rule 83 (unary-expression -> MINUS unary-expression .)
    COLON           reduce using rule 83 (unary-expression -> MINUS unary-expression .)


state 281

    (58) inclusive-or-expression -> inclusive-or-expression BITOR . exclusive-or-expression
    (59) exclusive-or-expression -> . and-expression
    (60) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (61) and-expression -> . equality-expression
    (62) and-expression -> . and-expression BITAND equality-expression
    (63) equality-expression -> . relational-expression
    (64) equality-expression -> . equality-expression EQ relational-expression
    (65) equality-expression -> . equality-expression NE relational-expression
    (66) relational-expression -> . shift-expression
    (67) relational-expression -> . relational-expression LT shift-expression
    (68) relational-expression -> . relational-expression GT shift-expression
    (69) relational-expression -> . relational-expression LE shift-expression
    (70) relational-expression -> . relational-expression GE shift-expression
    (71) shift-expression -> . additive-expression
    (72) shift-expression -> . shift-expression LSHIFT additive-expression
    (73) shift-expression -> . shift-expression RSHIFT additive-expression
    (74) additive-expression -> . multiplicative-expression
    (75) additive-expression -> . additive-expression PLUS multiplicative-expression
    (76) additive-expression -> . additive-expression MINUS multiplicative-expression
    (77) multiplicative-expression -> . unary-expression
    (78) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (79) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (80) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (81) unary-expression -> . primary-expression
    (82) unary-expression -> . PLUS unary-expression
    (83) unary-expression -> . MINUS unary-expression
    (84) unary-expression -> . BITNOT unary-expression
    (85) unary-expression -> . BITCOMP unary-expression
    (86) unary-expression -> . TIMES unary-expression
    (87) unary-expression -> . pre-increment-expression
    (88) unary-expression -> . pre-decrement-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 190
    MINUS           shift and go to state 187
    BITNOT          shift and go to state 197
    BITCOMP         shift and go to state 186
    TIMES           shift and go to state 184
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117
    NEW             shift and go to state 185
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88

    this-access                    shift and go to state 77
    post-increment-expression      shift and go to state 182
    exclusive-or-expression        shift and go to state 351
    member-access                  shift and go to state 79
    relational-expression          shift and go to state 203
    additive-expression            shift and go to state 208
    primary-no-array-creation-expression shift and go to state 82
    equality-expression            shift and go to state 189
    unary-expression               shift and go to state 199
    element-access                 shift and go to state 101
    literal                        shift and go to state 128
    base-access                    shift and go to state 126
    post-decrement-expression      shift and go to state 193
    array-creation-expression      shift and go to state 144
    object-creation-expression     shift and go to state 198
    pre-increment-expression       shift and go to state 202
    shift-expression               shift and go to state 204
    and-expression                 shift and go to state 201
    pre-decrement-expression       shift and go to state 205
    multiplicative-expression      shift and go to state 207
    primary-expression             shift and go to state 217
    invocation-expression          shift and go to state 210
    parenthesized-expression       shift and go to state 96

state 282

    (64) equality-expression -> equality-expression EQ . relational-expression
    (66) relational-expression -> . shift-expression
    (67) relational-expression -> . relational-expression LT shift-expression
    (68) relational-expression -> . relational-expression GT shift-expression
    (69) relational-expression -> . relational-expression LE shift-expression
    (70) relational-expression -> . relational-expression GE shift-expression
    (71) shift-expression -> . additive-expression
    (72) shift-expression -> . shift-expression LSHIFT additive-expression
    (73) shift-expression -> . shift-expression RSHIFT additive-expression
    (74) additive-expression -> . multiplicative-expression
    (75) additive-expression -> . additive-expression PLUS multiplicative-expression
    (76) additive-expression -> . additive-expression MINUS multiplicative-expression
    (77) multiplicative-expression -> . unary-expression
    (78) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (79) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (80) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (81) unary-expression -> . primary-expression
    (82) unary-expression -> . PLUS unary-expression
    (83) unary-expression -> . MINUS unary-expression
    (84) unary-expression -> . BITNOT unary-expression
    (85) unary-expression -> . BITCOMP unary-expression
    (86) unary-expression -> . TIMES unary-expression
    (87) unary-expression -> . pre-increment-expression
    (88) unary-expression -> . pre-decrement-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 190
    MINUS           shift and go to state 187
    BITNOT          shift and go to state 197
    BITCOMP         shift and go to state 186
    TIMES           shift and go to state 184
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117
    NEW             shift and go to state 185
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88

    this-access                    shift and go to state 77
    unary-expression               shift and go to state 199
    member-access                  shift and go to state 79
    relational-expression          shift and go to state 352
    additive-expression            shift and go to state 208
    primary-no-array-creation-expression shift and go to state 82
    post-increment-expression      shift and go to state 182
    element-access                 shift and go to state 101
    literal                        shift and go to state 128
    base-access                    shift and go to state 126
    post-decrement-expression      shift and go to state 193
    array-creation-expression      shift and go to state 144
    object-creation-expression     shift and go to state 198
    pre-increment-expression       shift and go to state 202
    shift-expression               shift and go to state 204
    pre-decrement-expression       shift and go to state 205
    multiplicative-expression      shift and go to state 207
    primary-expression             shift and go to state 217
    invocation-expression          shift and go to state 210
    parenthesized-expression       shift and go to state 96

state 283

    (65) equality-expression -> equality-expression NE . relational-expression
    (66) relational-expression -> . shift-expression
    (67) relational-expression -> . relational-expression LT shift-expression
    (68) relational-expression -> . relational-expression GT shift-expression
    (69) relational-expression -> . relational-expression LE shift-expression
    (70) relational-expression -> . relational-expression GE shift-expression
    (71) shift-expression -> . additive-expression
    (72) shift-expression -> . shift-expression LSHIFT additive-expression
    (73) shift-expression -> . shift-expression RSHIFT additive-expression
    (74) additive-expression -> . multiplicative-expression
    (75) additive-expression -> . additive-expression PLUS multiplicative-expression
    (76) additive-expression -> . additive-expression MINUS multiplicative-expression
    (77) multiplicative-expression -> . unary-expression
    (78) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (79) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (80) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (81) unary-expression -> . primary-expression
    (82) unary-expression -> . PLUS unary-expression
    (83) unary-expression -> . MINUS unary-expression
    (84) unary-expression -> . BITNOT unary-expression
    (85) unary-expression -> . BITCOMP unary-expression
    (86) unary-expression -> . TIMES unary-expression
    (87) unary-expression -> . pre-increment-expression
    (88) unary-expression -> . pre-decrement-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 190
    MINUS           shift and go to state 187
    BITNOT          shift and go to state 197
    BITCOMP         shift and go to state 186
    TIMES           shift and go to state 184
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117
    NEW             shift and go to state 185
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88

    this-access                    shift and go to state 77
    unary-expression               shift and go to state 199
    member-access                  shift and go to state 79
    relational-expression          shift and go to state 353
    additive-expression            shift and go to state 208
    primary-no-array-creation-expression shift and go to state 82
    post-increment-expression      shift and go to state 182
    element-access                 shift and go to state 101
    literal                        shift and go to state 128
    base-access                    shift and go to state 126
    post-decrement-expression      shift and go to state 193
    array-creation-expression      shift and go to state 144
    object-creation-expression     shift and go to state 198
    pre-increment-expression       shift and go to state 202
    shift-expression               shift and go to state 204
    pre-decrement-expression       shift and go to state 205
    multiplicative-expression      shift and go to state 207
    primary-expression             shift and go to state 217
    invocation-expression          shift and go to state 210
    parenthesized-expression       shift and go to state 96

state 284

    (82) unary-expression -> PLUS unary-expression .

    TIMES           reduce using rule 82 (unary-expression -> PLUS unary-expression .)
    DIV             reduce using rule 82 (unary-expression -> PLUS unary-expression .)
    MOD             reduce using rule 82 (unary-expression -> PLUS unary-expression .)
    PLUS            reduce using rule 82 (unary-expression -> PLUS unary-expression .)
    MINUS           reduce using rule 82 (unary-expression -> PLUS unary-expression .)
    LSHIFT          reduce using rule 82 (unary-expression -> PLUS unary-expression .)
    RSHIFT          reduce using rule 82 (unary-expression -> PLUS unary-expression .)
    LT              reduce using rule 82 (unary-expression -> PLUS unary-expression .)
    GT              reduce using rule 82 (unary-expression -> PLUS unary-expression .)
    LE              reduce using rule 82 (unary-expression -> PLUS unary-expression .)
    GE              reduce using rule 82 (unary-expression -> PLUS unary-expression .)
    EQ              reduce using rule 82 (unary-expression -> PLUS unary-expression .)
    NE              reduce using rule 82 (unary-expression -> PLUS unary-expression .)
    BITAND          reduce using rule 82 (unary-expression -> PLUS unary-expression .)
    BITXOR          reduce using rule 82 (unary-expression -> PLUS unary-expression .)
    BITOR           reduce using rule 82 (unary-expression -> PLUS unary-expression .)
    LOGAND          reduce using rule 82 (unary-expression -> PLUS unary-expression .)
    CONDOP          reduce using rule 82 (unary-expression -> PLUS unary-expression .)
    LOGOR           reduce using rule 82 (unary-expression -> PLUS unary-expression .)
    CLOSE_BRACKET   reduce using rule 82 (unary-expression -> PLUS unary-expression .)
    COMMA           reduce using rule 82 (unary-expression -> PLUS unary-expression .)
    DELIM           reduce using rule 82 (unary-expression -> PLUS unary-expression .)
    CLOSE_PAREN     reduce using rule 82 (unary-expression -> PLUS unary-expression .)
    BLOCK_END       reduce using rule 82 (unary-expression -> PLUS unary-expression .)
    COLON           reduce using rule 82 (unary-expression -> PLUS unary-expression .)


state 285

    (56) conditional-and-expression -> conditional-and-expression LOGAND . inclusive-or-expression
    (57) inclusive-or-expression -> . exclusive-or-expression
    (58) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (59) exclusive-or-expression -> . and-expression
    (60) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (61) and-expression -> . equality-expression
    (62) and-expression -> . and-expression BITAND equality-expression
    (63) equality-expression -> . relational-expression
    (64) equality-expression -> . equality-expression EQ relational-expression
    (65) equality-expression -> . equality-expression NE relational-expression
    (66) relational-expression -> . shift-expression
    (67) relational-expression -> . relational-expression LT shift-expression
    (68) relational-expression -> . relational-expression GT shift-expression
    (69) relational-expression -> . relational-expression LE shift-expression
    (70) relational-expression -> . relational-expression GE shift-expression
    (71) shift-expression -> . additive-expression
    (72) shift-expression -> . shift-expression LSHIFT additive-expression
    (73) shift-expression -> . shift-expression RSHIFT additive-expression
    (74) additive-expression -> . multiplicative-expression
    (75) additive-expression -> . additive-expression PLUS multiplicative-expression
    (76) additive-expression -> . additive-expression MINUS multiplicative-expression
    (77) multiplicative-expression -> . unary-expression
    (78) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (79) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (80) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (81) unary-expression -> . primary-expression
    (82) unary-expression -> . PLUS unary-expression
    (83) unary-expression -> . MINUS unary-expression
    (84) unary-expression -> . BITNOT unary-expression
    (85) unary-expression -> . BITCOMP unary-expression
    (86) unary-expression -> . TIMES unary-expression
    (87) unary-expression -> . pre-increment-expression
    (88) unary-expression -> . pre-decrement-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 190
    MINUS           shift and go to state 187
    BITNOT          shift and go to state 197
    BITCOMP         shift and go to state 186
    TIMES           shift and go to state 184
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117
    NEW             shift and go to state 185
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88

    this-access                    shift and go to state 77
    post-increment-expression      shift and go to state 182
    exclusive-or-expression        shift and go to state 183
    member-access                  shift and go to state 79
    relational-expression          shift and go to state 203
    additive-expression            shift and go to state 208
    primary-no-array-creation-expression shift and go to state 82
    inclusive-or-expression        shift and go to state 354
    equality-expression            shift and go to state 189
    unary-expression               shift and go to state 199
    element-access                 shift and go to state 101
    literal                        shift and go to state 128
    base-access                    shift and go to state 126
    post-decrement-expression      shift and go to state 193
    array-creation-expression      shift and go to state 144
    object-creation-expression     shift and go to state 198
    pre-increment-expression       shift and go to state 202
    shift-expression               shift and go to state 204
    and-expression                 shift and go to state 201
    pre-decrement-expression       shift and go to state 205
    multiplicative-expression      shift and go to state 207
    primary-expression             shift and go to state 217
    invocation-expression          shift and go to state 210
    parenthesized-expression       shift and go to state 96

state 286

    (84) unary-expression -> BITNOT unary-expression .

    TIMES           reduce using rule 84 (unary-expression -> BITNOT unary-expression .)
    DIV             reduce using rule 84 (unary-expression -> BITNOT unary-expression .)
    MOD             reduce using rule 84 (unary-expression -> BITNOT unary-expression .)
    PLUS            reduce using rule 84 (unary-expression -> BITNOT unary-expression .)
    MINUS           reduce using rule 84 (unary-expression -> BITNOT unary-expression .)
    LSHIFT          reduce using rule 84 (unary-expression -> BITNOT unary-expression .)
    RSHIFT          reduce using rule 84 (unary-expression -> BITNOT unary-expression .)
    LT              reduce using rule 84 (unary-expression -> BITNOT unary-expression .)
    GT              reduce using rule 84 (unary-expression -> BITNOT unary-expression .)
    LE              reduce using rule 84 (unary-expression -> BITNOT unary-expression .)
    GE              reduce using rule 84 (unary-expression -> BITNOT unary-expression .)
    EQ              reduce using rule 84 (unary-expression -> BITNOT unary-expression .)
    NE              reduce using rule 84 (unary-expression -> BITNOT unary-expression .)
    BITAND          reduce using rule 84 (unary-expression -> BITNOT unary-expression .)
    BITXOR          reduce using rule 84 (unary-expression -> BITNOT unary-expression .)
    BITOR           reduce using rule 84 (unary-expression -> BITNOT unary-expression .)
    LOGAND          reduce using rule 84 (unary-expression -> BITNOT unary-expression .)
    CONDOP          reduce using rule 84 (unary-expression -> BITNOT unary-expression .)
    LOGOR           reduce using rule 84 (unary-expression -> BITNOT unary-expression .)
    CLOSE_BRACKET   reduce using rule 84 (unary-expression -> BITNOT unary-expression .)
    COMMA           reduce using rule 84 (unary-expression -> BITNOT unary-expression .)
    DELIM           reduce using rule 84 (unary-expression -> BITNOT unary-expression .)
    CLOSE_PAREN     reduce using rule 84 (unary-expression -> BITNOT unary-expression .)
    BLOCK_END       reduce using rule 84 (unary-expression -> BITNOT unary-expression .)
    COLON           reduce using rule 84 (unary-expression -> BITNOT unary-expression .)


state 287

    (247) return-statement -> RETURN expression-opt DELIM .

    IDENTIFIER      reduce using rule 247 (return-statement -> RETURN expression-opt DELIM .)
    CONST           reduce using rule 247 (return-statement -> RETURN expression-opt DELIM .)
    BLOCK_BEGIN     reduce using rule 247 (return-statement -> RETURN expression-opt DELIM .)
    DELIM           reduce using rule 247 (return-statement -> RETURN expression-opt DELIM .)
    IF              reduce using rule 247 (return-statement -> RETURN expression-opt DELIM .)
    SWITCH          reduce using rule 247 (return-statement -> RETURN expression-opt DELIM .)
    WHILE           reduce using rule 247 (return-statement -> RETURN expression-opt DELIM .)
    FOR             reduce using rule 247 (return-statement -> RETURN expression-opt DELIM .)
    FOREACH         reduce using rule 247 (return-statement -> RETURN expression-opt DELIM .)
    DO              reduce using rule 247 (return-statement -> RETURN expression-opt DELIM .)
    BREAK           reduce using rule 247 (return-statement -> RETURN expression-opt DELIM .)
    CONTINUE        reduce using rule 247 (return-statement -> RETURN expression-opt DELIM .)
    GOTO            reduce using rule 247 (return-statement -> RETURN expression-opt DELIM .)
    RETURN          reduce using rule 247 (return-statement -> RETURN expression-opt DELIM .)
    BOOL            reduce using rule 247 (return-statement -> RETURN expression-opt DELIM .)
    NEW             reduce using rule 247 (return-statement -> RETURN expression-opt DELIM .)
    INCRE           reduce using rule 247 (return-statement -> RETURN expression-opt DELIM .)
    DECRE           reduce using rule 247 (return-statement -> RETURN expression-opt DELIM .)
    INT             reduce using rule 247 (return-statement -> RETURN expression-opt DELIM .)
    UINT            reduce using rule 247 (return-statement -> RETURN expression-opt DELIM .)
    LONG            reduce using rule 247 (return-statement -> RETURN expression-opt DELIM .)
    ULONG           reduce using rule 247 (return-statement -> RETURN expression-opt DELIM .)
    CHAR            reduce using rule 247 (return-statement -> RETURN expression-opt DELIM .)
    FLOAT           reduce using rule 247 (return-statement -> RETURN expression-opt DELIM .)
    DOUBLE          reduce using rule 247 (return-statement -> RETURN expression-opt DELIM .)
    ICONST          reduce using rule 247 (return-statement -> RETURN expression-opt DELIM .)
    UICONST         reduce using rule 247 (return-statement -> RETURN expression-opt DELIM .)
    LICONST         reduce using rule 247 (return-statement -> RETURN expression-opt DELIM .)
    ULICONST        reduce using rule 247 (return-statement -> RETURN expression-opt DELIM .)
    FCONST          reduce using rule 247 (return-statement -> RETURN expression-opt DELIM .)
    DCONST          reduce using rule 247 (return-statement -> RETURN expression-opt DELIM .)
    MCONST          reduce using rule 247 (return-statement -> RETURN expression-opt DELIM .)
    CCONST          reduce using rule 247 (return-statement -> RETURN expression-opt DELIM .)
    SCONST          reduce using rule 247 (return-statement -> RETURN expression-opt DELIM .)
    VSCONST         reduce using rule 247 (return-statement -> RETURN expression-opt DELIM .)
    TRUE            reduce using rule 247 (return-statement -> RETURN expression-opt DELIM .)
    FALSE           reduce using rule 247 (return-statement -> RETURN expression-opt DELIM .)
    OPEN_PAREN      reduce using rule 247 (return-statement -> RETURN expression-opt DELIM .)
    THIS            reduce using rule 247 (return-statement -> RETURN expression-opt DELIM .)
    BASE            reduce using rule 247 (return-statement -> RETURN expression-opt DELIM .)
    BLOCK_END       reduce using rule 247 (return-statement -> RETURN expression-opt DELIM .)
    CASE            reduce using rule 247 (return-statement -> RETURN expression-opt DELIM .)
    DEFAULT         reduce using rule 247 (return-statement -> RETURN expression-opt DELIM .)
    ELSE            reduce using rule 247 (return-statement -> RETURN expression-opt DELIM .)


state 288

    (62) and-expression -> and-expression BITAND . equality-expression
    (63) equality-expression -> . relational-expression
    (64) equality-expression -> . equality-expression EQ relational-expression
    (65) equality-expression -> . equality-expression NE relational-expression
    (66) relational-expression -> . shift-expression
    (67) relational-expression -> . relational-expression LT shift-expression
    (68) relational-expression -> . relational-expression GT shift-expression
    (69) relational-expression -> . relational-expression LE shift-expression
    (70) relational-expression -> . relational-expression GE shift-expression
    (71) shift-expression -> . additive-expression
    (72) shift-expression -> . shift-expression LSHIFT additive-expression
    (73) shift-expression -> . shift-expression RSHIFT additive-expression
    (74) additive-expression -> . multiplicative-expression
    (75) additive-expression -> . additive-expression PLUS multiplicative-expression
    (76) additive-expression -> . additive-expression MINUS multiplicative-expression
    (77) multiplicative-expression -> . unary-expression
    (78) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (79) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (80) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (81) unary-expression -> . primary-expression
    (82) unary-expression -> . PLUS unary-expression
    (83) unary-expression -> . MINUS unary-expression
    (84) unary-expression -> . BITNOT unary-expression
    (85) unary-expression -> . BITCOMP unary-expression
    (86) unary-expression -> . TIMES unary-expression
    (87) unary-expression -> . pre-increment-expression
    (88) unary-expression -> . pre-decrement-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 190
    MINUS           shift and go to state 187
    BITNOT          shift and go to state 197
    BITCOMP         shift and go to state 186
    TIMES           shift and go to state 184
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117
    NEW             shift and go to state 185
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88

    this-access                    shift and go to state 77
    post-increment-expression      shift and go to state 182
    member-access                  shift and go to state 79
    relational-expression          shift and go to state 203
    additive-expression            shift and go to state 208
    primary-no-array-creation-expression shift and go to state 82
    equality-expression            shift and go to state 355
    unary-expression               shift and go to state 199
    element-access                 shift and go to state 101
    literal                        shift and go to state 128
    base-access                    shift and go to state 126
    post-decrement-expression      shift and go to state 193
    array-creation-expression      shift and go to state 144
    object-creation-expression     shift and go to state 198
    pre-increment-expression       shift and go to state 202
    shift-expression               shift and go to state 204
    pre-decrement-expression       shift and go to state 205
    multiplicative-expression      shift and go to state 207
    primary-expression             shift and go to state 217
    invocation-expression          shift and go to state 210
    parenthesized-expression       shift and go to state 96

state 289

    (69) relational-expression -> relational-expression LE . shift-expression
    (71) shift-expression -> . additive-expression
    (72) shift-expression -> . shift-expression LSHIFT additive-expression
    (73) shift-expression -> . shift-expression RSHIFT additive-expression
    (74) additive-expression -> . multiplicative-expression
    (75) additive-expression -> . additive-expression PLUS multiplicative-expression
    (76) additive-expression -> . additive-expression MINUS multiplicative-expression
    (77) multiplicative-expression -> . unary-expression
    (78) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (79) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (80) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (81) unary-expression -> . primary-expression
    (82) unary-expression -> . PLUS unary-expression
    (83) unary-expression -> . MINUS unary-expression
    (84) unary-expression -> . BITNOT unary-expression
    (85) unary-expression -> . BITCOMP unary-expression
    (86) unary-expression -> . TIMES unary-expression
    (87) unary-expression -> . pre-increment-expression
    (88) unary-expression -> . pre-decrement-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 190
    MINUS           shift and go to state 187
    BITNOT          shift and go to state 197
    BITCOMP         shift and go to state 186
    TIMES           shift and go to state 184
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117
    NEW             shift and go to state 185
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88

    this-access                    shift and go to state 77
    unary-expression               shift and go to state 199
    member-access                  shift and go to state 79
    additive-expression            shift and go to state 208
    primary-no-array-creation-expression shift and go to state 82
    post-increment-expression      shift and go to state 182
    element-access                 shift and go to state 101
    literal                        shift and go to state 128
    base-access                    shift and go to state 126
    post-decrement-expression      shift and go to state 193
    array-creation-expression      shift and go to state 144
    object-creation-expression     shift and go to state 198
    pre-increment-expression       shift and go to state 202
    shift-expression               shift and go to state 356
    pre-decrement-expression       shift and go to state 205
    multiplicative-expression      shift and go to state 207
    primary-expression             shift and go to state 217
    invocation-expression          shift and go to state 210
    parenthesized-expression       shift and go to state 96

state 290

    (70) relational-expression -> relational-expression GE . shift-expression
    (71) shift-expression -> . additive-expression
    (72) shift-expression -> . shift-expression LSHIFT additive-expression
    (73) shift-expression -> . shift-expression RSHIFT additive-expression
    (74) additive-expression -> . multiplicative-expression
    (75) additive-expression -> . additive-expression PLUS multiplicative-expression
    (76) additive-expression -> . additive-expression MINUS multiplicative-expression
    (77) multiplicative-expression -> . unary-expression
    (78) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (79) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (80) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (81) unary-expression -> . primary-expression
    (82) unary-expression -> . PLUS unary-expression
    (83) unary-expression -> . MINUS unary-expression
    (84) unary-expression -> . BITNOT unary-expression
    (85) unary-expression -> . BITCOMP unary-expression
    (86) unary-expression -> . TIMES unary-expression
    (87) unary-expression -> . pre-increment-expression
    (88) unary-expression -> . pre-decrement-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 190
    MINUS           shift and go to state 187
    BITNOT          shift and go to state 197
    BITCOMP         shift and go to state 186
    TIMES           shift and go to state 184
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117
    NEW             shift and go to state 185
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88

    this-access                    shift and go to state 77
    unary-expression               shift and go to state 199
    member-access                  shift and go to state 79
    additive-expression            shift and go to state 208
    primary-no-array-creation-expression shift and go to state 82
    post-increment-expression      shift and go to state 182
    element-access                 shift and go to state 101
    literal                        shift and go to state 128
    base-access                    shift and go to state 126
    post-decrement-expression      shift and go to state 193
    array-creation-expression      shift and go to state 144
    object-creation-expression     shift and go to state 198
    pre-increment-expression       shift and go to state 202
    shift-expression               shift and go to state 357
    pre-decrement-expression       shift and go to state 205
    multiplicative-expression      shift and go to state 207
    primary-expression             shift and go to state 217
    invocation-expression          shift and go to state 210
    parenthesized-expression       shift and go to state 96

state 291

    (67) relational-expression -> relational-expression LT . shift-expression
    (71) shift-expression -> . additive-expression
    (72) shift-expression -> . shift-expression LSHIFT additive-expression
    (73) shift-expression -> . shift-expression RSHIFT additive-expression
    (74) additive-expression -> . multiplicative-expression
    (75) additive-expression -> . additive-expression PLUS multiplicative-expression
    (76) additive-expression -> . additive-expression MINUS multiplicative-expression
    (77) multiplicative-expression -> . unary-expression
    (78) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (79) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (80) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (81) unary-expression -> . primary-expression
    (82) unary-expression -> . PLUS unary-expression
    (83) unary-expression -> . MINUS unary-expression
    (84) unary-expression -> . BITNOT unary-expression
    (85) unary-expression -> . BITCOMP unary-expression
    (86) unary-expression -> . TIMES unary-expression
    (87) unary-expression -> . pre-increment-expression
    (88) unary-expression -> . pre-decrement-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 190
    MINUS           shift and go to state 187
    BITNOT          shift and go to state 197
    BITCOMP         shift and go to state 186
    TIMES           shift and go to state 184
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117
    NEW             shift and go to state 185
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88

    this-access                    shift and go to state 77
    unary-expression               shift and go to state 199
    member-access                  shift and go to state 79
    additive-expression            shift and go to state 208
    primary-no-array-creation-expression shift and go to state 82
    post-increment-expression      shift and go to state 182
    element-access                 shift and go to state 101
    literal                        shift and go to state 128
    base-access                    shift and go to state 126
    post-decrement-expression      shift and go to state 193
    array-creation-expression      shift and go to state 144
    object-creation-expression     shift and go to state 198
    pre-increment-expression       shift and go to state 202
    shift-expression               shift and go to state 358
    pre-decrement-expression       shift and go to state 205
    multiplicative-expression      shift and go to state 207
    primary-expression             shift and go to state 217
    invocation-expression          shift and go to state 210
    parenthesized-expression       shift and go to state 96

state 292

    (68) relational-expression -> relational-expression GT . shift-expression
    (71) shift-expression -> . additive-expression
    (72) shift-expression -> . shift-expression LSHIFT additive-expression
    (73) shift-expression -> . shift-expression RSHIFT additive-expression
    (74) additive-expression -> . multiplicative-expression
    (75) additive-expression -> . additive-expression PLUS multiplicative-expression
    (76) additive-expression -> . additive-expression MINUS multiplicative-expression
    (77) multiplicative-expression -> . unary-expression
    (78) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (79) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (80) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (81) unary-expression -> . primary-expression
    (82) unary-expression -> . PLUS unary-expression
    (83) unary-expression -> . MINUS unary-expression
    (84) unary-expression -> . BITNOT unary-expression
    (85) unary-expression -> . BITCOMP unary-expression
    (86) unary-expression -> . TIMES unary-expression
    (87) unary-expression -> . pre-increment-expression
    (88) unary-expression -> . pre-decrement-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 190
    MINUS           shift and go to state 187
    BITNOT          shift and go to state 197
    BITCOMP         shift and go to state 186
    TIMES           shift and go to state 184
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117
    NEW             shift and go to state 185
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88

    this-access                    shift and go to state 77
    unary-expression               shift and go to state 199
    member-access                  shift and go to state 79
    additive-expression            shift and go to state 208
    primary-no-array-creation-expression shift and go to state 82
    post-increment-expression      shift and go to state 182
    element-access                 shift and go to state 101
    literal                        shift and go to state 128
    base-access                    shift and go to state 126
    post-decrement-expression      shift and go to state 193
    array-creation-expression      shift and go to state 144
    object-creation-expression     shift and go to state 198
    pre-increment-expression       shift and go to state 202
    shift-expression               shift and go to state 359
    pre-decrement-expression       shift and go to state 205
    multiplicative-expression      shift and go to state 207
    primary-expression             shift and go to state 217
    invocation-expression          shift and go to state 210
    parenthesized-expression       shift and go to state 96

state 293

    (73) shift-expression -> shift-expression RSHIFT . additive-expression
    (74) additive-expression -> . multiplicative-expression
    (75) additive-expression -> . additive-expression PLUS multiplicative-expression
    (76) additive-expression -> . additive-expression MINUS multiplicative-expression
    (77) multiplicative-expression -> . unary-expression
    (78) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (79) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (80) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (81) unary-expression -> . primary-expression
    (82) unary-expression -> . PLUS unary-expression
    (83) unary-expression -> . MINUS unary-expression
    (84) unary-expression -> . BITNOT unary-expression
    (85) unary-expression -> . BITCOMP unary-expression
    (86) unary-expression -> . TIMES unary-expression
    (87) unary-expression -> . pre-increment-expression
    (88) unary-expression -> . pre-decrement-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 190
    MINUS           shift and go to state 187
    BITNOT          shift and go to state 197
    BITCOMP         shift and go to state 186
    TIMES           shift and go to state 184
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117
    NEW             shift and go to state 185
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88

    this-access                    shift and go to state 77
    post-increment-expression      shift and go to state 182
    member-access                  shift and go to state 79
    additive-expression            shift and go to state 360
    primary-no-array-creation-expression shift and go to state 82
    unary-expression               shift and go to state 199
    element-access                 shift and go to state 101
    literal                        shift and go to state 128
    base-access                    shift and go to state 126
    post-decrement-expression      shift and go to state 193
    array-creation-expression      shift and go to state 144
    object-creation-expression     shift and go to state 198
    pre-increment-expression       shift and go to state 202
    pre-decrement-expression       shift and go to state 205
    multiplicative-expression      shift and go to state 207
    primary-expression             shift and go to state 217
    invocation-expression          shift and go to state 210
    parenthesized-expression       shift and go to state 96

state 294

    (72) shift-expression -> shift-expression LSHIFT . additive-expression
    (74) additive-expression -> . multiplicative-expression
    (75) additive-expression -> . additive-expression PLUS multiplicative-expression
    (76) additive-expression -> . additive-expression MINUS multiplicative-expression
    (77) multiplicative-expression -> . unary-expression
    (78) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (79) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (80) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (81) unary-expression -> . primary-expression
    (82) unary-expression -> . PLUS unary-expression
    (83) unary-expression -> . MINUS unary-expression
    (84) unary-expression -> . BITNOT unary-expression
    (85) unary-expression -> . BITCOMP unary-expression
    (86) unary-expression -> . TIMES unary-expression
    (87) unary-expression -> . pre-increment-expression
    (88) unary-expression -> . pre-decrement-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 190
    MINUS           shift and go to state 187
    BITNOT          shift and go to state 197
    BITCOMP         shift and go to state 186
    TIMES           shift and go to state 184
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117
    NEW             shift and go to state 185
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88

    this-access                    shift and go to state 77
    post-increment-expression      shift and go to state 182
    member-access                  shift and go to state 79
    additive-expression            shift and go to state 361
    primary-no-array-creation-expression shift and go to state 82
    unary-expression               shift and go to state 199
    element-access                 shift and go to state 101
    literal                        shift and go to state 128
    base-access                    shift and go to state 126
    post-decrement-expression      shift and go to state 193
    array-creation-expression      shift and go to state 144
    object-creation-expression     shift and go to state 198
    pre-increment-expression       shift and go to state 202
    pre-decrement-expression       shift and go to state 205
    multiplicative-expression      shift and go to state 207
    primary-expression             shift and go to state 217
    invocation-expression          shift and go to state 210
    parenthesized-expression       shift and go to state 96

state 295

    (79) multiplicative-expression -> multiplicative-expression DIV . unary-expression
    (81) unary-expression -> . primary-expression
    (82) unary-expression -> . PLUS unary-expression
    (83) unary-expression -> . MINUS unary-expression
    (84) unary-expression -> . BITNOT unary-expression
    (85) unary-expression -> . BITCOMP unary-expression
    (86) unary-expression -> . TIMES unary-expression
    (87) unary-expression -> . pre-increment-expression
    (88) unary-expression -> . pre-decrement-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 190
    MINUS           shift and go to state 187
    BITNOT          shift and go to state 197
    BITCOMP         shift and go to state 186
    TIMES           shift and go to state 184
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117
    NEW             shift and go to state 185
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88

    this-access                    shift and go to state 77
    post-increment-expression      shift and go to state 182
    member-access                  shift and go to state 79
    primary-no-array-creation-expression shift and go to state 82
    unary-expression               shift and go to state 362
    element-access                 shift and go to state 101
    literal                        shift and go to state 128
    base-access                    shift and go to state 126
    post-decrement-expression      shift and go to state 193
    array-creation-expression      shift and go to state 144
    object-creation-expression     shift and go to state 198
    pre-increment-expression       shift and go to state 202
    pre-decrement-expression       shift and go to state 205
    primary-expression             shift and go to state 217
    invocation-expression          shift and go to state 210
    parenthesized-expression       shift and go to state 96

state 296

    (80) multiplicative-expression -> multiplicative-expression MOD . unary-expression
    (81) unary-expression -> . primary-expression
    (82) unary-expression -> . PLUS unary-expression
    (83) unary-expression -> . MINUS unary-expression
    (84) unary-expression -> . BITNOT unary-expression
    (85) unary-expression -> . BITCOMP unary-expression
    (86) unary-expression -> . TIMES unary-expression
    (87) unary-expression -> . pre-increment-expression
    (88) unary-expression -> . pre-decrement-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 190
    MINUS           shift and go to state 187
    BITNOT          shift and go to state 197
    BITCOMP         shift and go to state 186
    TIMES           shift and go to state 184
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117
    NEW             shift and go to state 185
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88

    this-access                    shift and go to state 77
    post-increment-expression      shift and go to state 182
    member-access                  shift and go to state 79
    primary-no-array-creation-expression shift and go to state 82
    unary-expression               shift and go to state 363
    element-access                 shift and go to state 101
    literal                        shift and go to state 128
    base-access                    shift and go to state 126
    post-decrement-expression      shift and go to state 193
    array-creation-expression      shift and go to state 144
    object-creation-expression     shift and go to state 198
    pre-increment-expression       shift and go to state 202
    pre-decrement-expression       shift and go to state 205
    primary-expression             shift and go to state 217
    invocation-expression          shift and go to state 210
    parenthesized-expression       shift and go to state 96

state 297

    (78) multiplicative-expression -> multiplicative-expression TIMES . unary-expression
    (81) unary-expression -> . primary-expression
    (82) unary-expression -> . PLUS unary-expression
    (83) unary-expression -> . MINUS unary-expression
    (84) unary-expression -> . BITNOT unary-expression
    (85) unary-expression -> . BITCOMP unary-expression
    (86) unary-expression -> . TIMES unary-expression
    (87) unary-expression -> . pre-increment-expression
    (88) unary-expression -> . pre-decrement-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 190
    MINUS           shift and go to state 187
    BITNOT          shift and go to state 197
    BITCOMP         shift and go to state 186
    TIMES           shift and go to state 184
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117
    NEW             shift and go to state 185
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88

    this-access                    shift and go to state 77
    post-increment-expression      shift and go to state 182
    member-access                  shift and go to state 79
    primary-no-array-creation-expression shift and go to state 82
    unary-expression               shift and go to state 364
    element-access                 shift and go to state 101
    literal                        shift and go to state 128
    base-access                    shift and go to state 126
    post-decrement-expression      shift and go to state 193
    array-creation-expression      shift and go to state 144
    object-creation-expression     shift and go to state 198
    pre-increment-expression       shift and go to state 202
    pre-decrement-expression       shift and go to state 205
    primary-expression             shift and go to state 217
    invocation-expression          shift and go to state 210
    parenthesized-expression       shift and go to state 96

state 298

    (75) additive-expression -> additive-expression PLUS . multiplicative-expression
    (77) multiplicative-expression -> . unary-expression
    (78) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (79) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (80) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (81) unary-expression -> . primary-expression
    (82) unary-expression -> . PLUS unary-expression
    (83) unary-expression -> . MINUS unary-expression
    (84) unary-expression -> . BITNOT unary-expression
    (85) unary-expression -> . BITCOMP unary-expression
    (86) unary-expression -> . TIMES unary-expression
    (87) unary-expression -> . pre-increment-expression
    (88) unary-expression -> . pre-decrement-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 190
    MINUS           shift and go to state 187
    BITNOT          shift and go to state 197
    BITCOMP         shift and go to state 186
    TIMES           shift and go to state 184
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117
    NEW             shift and go to state 185
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88

    this-access                    shift and go to state 77
    post-increment-expression      shift and go to state 182
    member-access                  shift and go to state 79
    primary-no-array-creation-expression shift and go to state 82
    unary-expression               shift and go to state 199
    element-access                 shift and go to state 101
    literal                        shift and go to state 128
    base-access                    shift and go to state 126
    post-decrement-expression      shift and go to state 193
    array-creation-expression      shift and go to state 144
    object-creation-expression     shift and go to state 198
    pre-increment-expression       shift and go to state 202
    pre-decrement-expression       shift and go to state 205
    multiplicative-expression      shift and go to state 365
    primary-expression             shift and go to state 217
    invocation-expression          shift and go to state 210
    parenthesized-expression       shift and go to state 96

state 299

    (76) additive-expression -> additive-expression MINUS . multiplicative-expression
    (77) multiplicative-expression -> . unary-expression
    (78) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (79) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (80) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (81) unary-expression -> . primary-expression
    (82) unary-expression -> . PLUS unary-expression
    (83) unary-expression -> . MINUS unary-expression
    (84) unary-expression -> . BITNOT unary-expression
    (85) unary-expression -> . BITCOMP unary-expression
    (86) unary-expression -> . TIMES unary-expression
    (87) unary-expression -> . pre-increment-expression
    (88) unary-expression -> . pre-decrement-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 190
    MINUS           shift and go to state 187
    BITNOT          shift and go to state 197
    BITCOMP         shift and go to state 186
    TIMES           shift and go to state 184
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117
    NEW             shift and go to state 185
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88

    this-access                    shift and go to state 77
    post-increment-expression      shift and go to state 182
    member-access                  shift and go to state 79
    primary-no-array-creation-expression shift and go to state 82
    unary-expression               shift and go to state 199
    element-access                 shift and go to state 101
    literal                        shift and go to state 128
    base-access                    shift and go to state 126
    post-decrement-expression      shift and go to state 193
    array-creation-expression      shift and go to state 144
    object-creation-expression     shift and go to state 198
    pre-increment-expression       shift and go to state 202
    pre-decrement-expression       shift and go to state 205
    multiplicative-expression      shift and go to state 366
    primary-expression             shift and go to state 217
    invocation-expression          shift and go to state 210
    parenthesized-expression       shift and go to state 96

state 300

    (54) conditional-or-expression -> conditional-or-expression LOGOR . conditional-and-expression
    (55) conditional-and-expression -> . inclusive-or-expression
    (56) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (57) inclusive-or-expression -> . exclusive-or-expression
    (58) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (59) exclusive-or-expression -> . and-expression
    (60) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (61) and-expression -> . equality-expression
    (62) and-expression -> . and-expression BITAND equality-expression
    (63) equality-expression -> . relational-expression
    (64) equality-expression -> . equality-expression EQ relational-expression
    (65) equality-expression -> . equality-expression NE relational-expression
    (66) relational-expression -> . shift-expression
    (67) relational-expression -> . relational-expression LT shift-expression
    (68) relational-expression -> . relational-expression GT shift-expression
    (69) relational-expression -> . relational-expression LE shift-expression
    (70) relational-expression -> . relational-expression GE shift-expression
    (71) shift-expression -> . additive-expression
    (72) shift-expression -> . shift-expression LSHIFT additive-expression
    (73) shift-expression -> . shift-expression RSHIFT additive-expression
    (74) additive-expression -> . multiplicative-expression
    (75) additive-expression -> . additive-expression PLUS multiplicative-expression
    (76) additive-expression -> . additive-expression MINUS multiplicative-expression
    (77) multiplicative-expression -> . unary-expression
    (78) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (79) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (80) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (81) unary-expression -> . primary-expression
    (82) unary-expression -> . PLUS unary-expression
    (83) unary-expression -> . MINUS unary-expression
    (84) unary-expression -> . BITNOT unary-expression
    (85) unary-expression -> . BITCOMP unary-expression
    (86) unary-expression -> . TIMES unary-expression
    (87) unary-expression -> . pre-increment-expression
    (88) unary-expression -> . pre-decrement-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 190
    MINUS           shift and go to state 187
    BITNOT          shift and go to state 197
    BITCOMP         shift and go to state 186
    TIMES           shift and go to state 184
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117
    NEW             shift and go to state 185
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88

    this-access                    shift and go to state 77
    post-increment-expression      shift and go to state 182
    exclusive-or-expression        shift and go to state 183
    member-access                  shift and go to state 79
    relational-expression          shift and go to state 203
    additive-expression            shift and go to state 208
    primary-no-array-creation-expression shift and go to state 82
    inclusive-or-expression        shift and go to state 188
    unary-expression               shift and go to state 199
    element-access                 shift and go to state 101
    literal                        shift and go to state 128
    base-access                    shift and go to state 126
    post-decrement-expression      shift and go to state 193
    array-creation-expression      shift and go to state 144
    conditional-and-expression     shift and go to state 367
    object-creation-expression     shift and go to state 198
    pre-increment-expression       shift and go to state 202
    equality-expression            shift and go to state 189
    shift-expression               shift and go to state 204
    and-expression                 shift and go to state 201
    pre-decrement-expression       shift and go to state 205
    multiplicative-expression      shift and go to state 207
    primary-expression             shift and go to state 217
    invocation-expression          shift and go to state 210
    parenthesized-expression       shift and go to state 96

state 301

    (52) conditional-expression -> conditional-or-expression CONDOP . expression COLON expression
    (49) expression -> . conditional-expression
    (50) expression -> . assignment
    (51) conditional-expression -> . conditional-or-expression
    (52) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (133) assignment -> . primary-expression assignment-operator expression
    (53) conditional-or-expression -> . conditional-and-expression
    (54) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (55) conditional-and-expression -> . inclusive-or-expression
    (56) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (57) inclusive-or-expression -> . exclusive-or-expression
    (58) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (59) exclusive-or-expression -> . and-expression
    (60) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (61) and-expression -> . equality-expression
    (62) and-expression -> . and-expression BITAND equality-expression
    (63) equality-expression -> . relational-expression
    (64) equality-expression -> . equality-expression EQ relational-expression
    (65) equality-expression -> . equality-expression NE relational-expression
    (66) relational-expression -> . shift-expression
    (67) relational-expression -> . relational-expression LT shift-expression
    (68) relational-expression -> . relational-expression GT shift-expression
    (69) relational-expression -> . relational-expression LE shift-expression
    (70) relational-expression -> . relational-expression GE shift-expression
    (71) shift-expression -> . additive-expression
    (72) shift-expression -> . shift-expression LSHIFT additive-expression
    (73) shift-expression -> . shift-expression RSHIFT additive-expression
    (74) additive-expression -> . multiplicative-expression
    (75) additive-expression -> . additive-expression PLUS multiplicative-expression
    (76) additive-expression -> . additive-expression MINUS multiplicative-expression
    (77) multiplicative-expression -> . unary-expression
    (78) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (79) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (80) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (81) unary-expression -> . primary-expression
    (82) unary-expression -> . PLUS unary-expression
    (83) unary-expression -> . MINUS unary-expression
    (84) unary-expression -> . BITNOT unary-expression
    (85) unary-expression -> . BITCOMP unary-expression
    (86) unary-expression -> . TIMES unary-expression
    (87) unary-expression -> . pre-increment-expression
    (88) unary-expression -> . pre-decrement-expression
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression

    NEW             shift and go to state 185
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88
    PLUS            shift and go to state 190
    MINUS           shift and go to state 187
    BITNOT          shift and go to state 197
    BITCOMP         shift and go to state 186
    TIMES           shift and go to state 184
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117

    this-access                    shift and go to state 77
    unary-expression               shift and go to state 199
    exclusive-or-expression        shift and go to state 183
    member-access                  shift and go to state 79
    relational-expression          shift and go to state 203
    additive-expression            shift and go to state 208
    primary-no-array-creation-expression shift and go to state 82
    inclusive-or-expression        shift and go to state 188
    equality-expression            shift and go to state 189
    post-increment-expression      shift and go to state 182
    element-access                 shift and go to state 101
    literal                        shift and go to state 128
    conditional-expression         shift and go to state 191
    conditional-and-expression     shift and go to state 192
    post-decrement-expression      shift and go to state 193
    base-access                    shift and go to state 126
    array-creation-expression      shift and go to state 144
    assignment                     shift and go to state 196
    object-creation-expression     shift and go to state 198
    pre-increment-expression       shift and go to state 202
    shift-expression               shift and go to state 204
    and-expression                 shift and go to state 201
    pre-decrement-expression       shift and go to state 205
    multiplicative-expression      shift and go to state 207
    expression                     shift and go to state 368
    primary-expression             shift and go to state 209
    invocation-expression          shift and go to state 210
    conditional-or-expression      shift and go to state 211
    parenthesized-expression       shift and go to state 96

state 302

    (227) for-initializer-opt -> for-initializer .

    DELIM           reduce using rule 227 (for-initializer-opt -> for-initializer .)


state 303

    (237) statement-expression-list -> statement-expression .

    COMMA           reduce using rule 237 (statement-expression-list -> statement-expression .)
    DELIM           reduce using rule 237 (statement-expression-list -> statement-expression .)
    CLOSE_PAREN     reduce using rule 237 (statement-expression-list -> statement-expression .)


state 304

    (230) for-initializer -> statement-expression-list .
    (238) statement-expression-list -> statement-expression-list . COMMA statement-expression

    DELIM           reduce using rule 230 (for-initializer -> statement-expression-list .)
    COMMA           shift and go to state 369


state 305

    (12) class-type -> IDENTIFIER .
    (104) primary-no-array-creation-expression -> IDENTIFIER .

    IDENTIFIER      reduce using rule 12 (class-type -> IDENTIFIER .)
    OPEN_BRACKET    reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    OPEN_PAREN      reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    INCRE           reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    DECRE           reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    DOT             reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    ASSIGN          reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    PLUSEQUAL       reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    MINUSEQUAL      reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    TIMESEQUAL      reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    DIVEQUAL        reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    MODEQUAL        reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    BITANDEQUAL     reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    BITOREQUAL      reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    BITXOREQUAL     reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    LSHIFTEQUAL     reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)
    RSHIFTEQUAL     reduce using rule 104 (primary-no-array-creation-expression -> IDENTIFIER .)


state 306

    (228) for-initializer-opt -> empty .

    DELIM           reduce using rule 228 (for-initializer-opt -> empty .)


state 307

    (229) for-initializer -> local-variable-declaration .

    DELIM           reduce using rule 229 (for-initializer -> local-variable-declaration .)


state 308

    (226) for-statement -> FOR OPEN_PAREN for-initializer-opt . DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement

    DELIM           shift and go to state 370


state 309

    (224) while-statement -> WHILE OPEN_PAREN boolean-expression . CLOSE_PAREN embedded-statement

    CLOSE_PAREN     shift and go to state 371


state 310

    (208) boolean-expression -> expression .

    CLOSE_PAREN     reduce using rule 208 (boolean-expression -> expression .)
    DELIM           reduce using rule 208 (boolean-expression -> expression .)


state 311

    (91) array-creation-expression -> NEW simple-type OPEN_BRACKET . expression-list CLOSE_BRACKET array-initializer-opt
    (41) rank-specifier -> OPEN_BRACKET . dim-separators-opt CLOSE_BRACKET
    (94) expression-list -> . expression
    (95) expression-list -> . expression-list COMMA expression
    (42) dim-separators-opt -> . dim-separators
    (43) dim-separators-opt -> . empty
    (49) expression -> . conditional-expression
    (50) expression -> . assignment
    (44) dim-separators -> . COMMA
    (45) dim-separators -> . dim-separators COMMA
    (269) empty -> .
    (51) conditional-expression -> . conditional-or-expression
    (52) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (133) assignment -> . primary-expression assignment-operator expression
    (53) conditional-or-expression -> . conditional-and-expression
    (54) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (55) conditional-and-expression -> . inclusive-or-expression
    (56) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (57) inclusive-or-expression -> . exclusive-or-expression
    (58) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (59) exclusive-or-expression -> . and-expression
    (60) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (61) and-expression -> . equality-expression
    (62) and-expression -> . and-expression BITAND equality-expression
    (63) equality-expression -> . relational-expression
    (64) equality-expression -> . equality-expression EQ relational-expression
    (65) equality-expression -> . equality-expression NE relational-expression
    (66) relational-expression -> . shift-expression
    (67) relational-expression -> . relational-expression LT shift-expression
    (68) relational-expression -> . relational-expression GT shift-expression
    (69) relational-expression -> . relational-expression LE shift-expression
    (70) relational-expression -> . relational-expression GE shift-expression
    (71) shift-expression -> . additive-expression
    (72) shift-expression -> . shift-expression LSHIFT additive-expression
    (73) shift-expression -> . shift-expression RSHIFT additive-expression
    (74) additive-expression -> . multiplicative-expression
    (75) additive-expression -> . additive-expression PLUS multiplicative-expression
    (76) additive-expression -> . additive-expression MINUS multiplicative-expression
    (77) multiplicative-expression -> . unary-expression
    (78) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (79) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (80) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (81) unary-expression -> . primary-expression
    (82) unary-expression -> . PLUS unary-expression
    (83) unary-expression -> . MINUS unary-expression
    (84) unary-expression -> . BITNOT unary-expression
    (85) unary-expression -> . BITCOMP unary-expression
    (86) unary-expression -> . TIMES unary-expression
    (87) unary-expression -> . pre-increment-expression
    (88) unary-expression -> . pre-decrement-expression
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression

    COMMA           shift and go to state 153
    CLOSE_BRACKET   reduce using rule 269 (empty -> .)
    NEW             shift and go to state 185
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88
    PLUS            shift and go to state 190
    MINUS           shift and go to state 187
    BITNOT          shift and go to state 197
    BITCOMP         shift and go to state 186
    TIMES           shift and go to state 184
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117

    this-access                    shift and go to state 77
    unary-expression               shift and go to state 199
    exclusive-or-expression        shift and go to state 183
    member-access                  shift and go to state 79
    relational-expression          shift and go to state 203
    dim-separators                 shift and go to state 154
    additive-expression            shift and go to state 208
    primary-no-array-creation-expression shift and go to state 82
    inclusive-or-expression        shift and go to state 188
    equality-expression            shift and go to state 189
    post-increment-expression      shift and go to state 182
    element-access                 shift and go to state 101
    literal                        shift and go to state 128
    conditional-expression         shift and go to state 191
    assignment                     shift and go to state 196
    post-decrement-expression      shift and go to state 193
    empty                          shift and go to state 155
    base-access                    shift and go to state 126
    array-creation-expression      shift and go to state 144
    dim-separators-opt             shift and go to state 152
    conditional-and-expression     shift and go to state 192
    object-creation-expression     shift and go to state 198
    pre-increment-expression       shift and go to state 202
    expression-list                shift and go to state 372
    shift-expression               shift and go to state 204
    and-expression                 shift and go to state 201
    pre-decrement-expression       shift and go to state 205
    multiplicative-expression      shift and go to state 207
    conditional-or-expression      shift and go to state 211
    primary-expression             shift and go to state 209
    invocation-expression          shift and go to state 210
    expression                     shift and go to state 272
    parenthesized-expression       shift and go to state 96

state 312

    (130) object-creation-expression -> NEW type OPEN_PAREN . argument-list-opt CLOSE_PAREN
    (117) argument-list-opt -> . argument-list
    (118) argument-list-opt -> . empty
    (119) argument-list -> . argument
    (120) argument-list -> . argument-list COMMA argument
    (269) empty -> .
    (121) argument -> . expression
    (122) argument -> . OUT variable-reference
    (49) expression -> . conditional-expression
    (50) expression -> . assignment
    (51) conditional-expression -> . conditional-or-expression
    (52) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (133) assignment -> . primary-expression assignment-operator expression
    (53) conditional-or-expression -> . conditional-and-expression
    (54) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (55) conditional-and-expression -> . inclusive-or-expression
    (56) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (57) inclusive-or-expression -> . exclusive-or-expression
    (58) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (59) exclusive-or-expression -> . and-expression
    (60) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (61) and-expression -> . equality-expression
    (62) and-expression -> . and-expression BITAND equality-expression
    (63) equality-expression -> . relational-expression
    (64) equality-expression -> . equality-expression EQ relational-expression
    (65) equality-expression -> . equality-expression NE relational-expression
    (66) relational-expression -> . shift-expression
    (67) relational-expression -> . relational-expression LT shift-expression
    (68) relational-expression -> . relational-expression GT shift-expression
    (69) relational-expression -> . relational-expression LE shift-expression
    (70) relational-expression -> . relational-expression GE shift-expression
    (71) shift-expression -> . additive-expression
    (72) shift-expression -> . shift-expression LSHIFT additive-expression
    (73) shift-expression -> . shift-expression RSHIFT additive-expression
    (74) additive-expression -> . multiplicative-expression
    (75) additive-expression -> . additive-expression PLUS multiplicative-expression
    (76) additive-expression -> . additive-expression MINUS multiplicative-expression
    (77) multiplicative-expression -> . unary-expression
    (78) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (79) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (80) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (81) unary-expression -> . primary-expression
    (82) unary-expression -> . PLUS unary-expression
    (83) unary-expression -> . MINUS unary-expression
    (84) unary-expression -> . BITNOT unary-expression
    (85) unary-expression -> . BITCOMP unary-expression
    (86) unary-expression -> . TIMES unary-expression
    (87) unary-expression -> . pre-increment-expression
    (88) unary-expression -> . pre-decrement-expression
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression

    CLOSE_PAREN     reduce using rule 269 (empty -> .)
    OUT             shift and go to state 326
    NEW             shift and go to state 185
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88
    PLUS            shift and go to state 190
    MINUS           shift and go to state 187
    BITNOT          shift and go to state 197
    BITCOMP         shift and go to state 186
    TIMES           shift and go to state 184
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117

    this-access                    shift and go to state 77
    argument-list-opt              shift and go to state 373
    unary-expression               shift and go to state 199
    exclusive-or-expression        shift and go to state 183
    member-access                  shift and go to state 79
    argument                       shift and go to state 327
    relational-expression          shift and go to state 203
    additive-expression            shift and go to state 208
    primary-no-array-creation-expression shift and go to state 82
    inclusive-or-expression        shift and go to state 188
    equality-expression            shift and go to state 189
    post-increment-expression      shift and go to state 182
    element-access                 shift and go to state 101
    literal                        shift and go to state 128
    conditional-expression         shift and go to state 191
    assignment                     shift and go to state 196
    post-decrement-expression      shift and go to state 193
    argument-list                  shift and go to state 323
    empty                          shift and go to state 325
    base-access                    shift and go to state 126
    array-creation-expression      shift and go to state 144
    conditional-and-expression     shift and go to state 192
    object-creation-expression     shift and go to state 198
    pre-increment-expression       shift and go to state 202
    shift-expression               shift and go to state 204
    and-expression                 shift and go to state 201
    pre-decrement-expression       shift and go to state 205
    multiplicative-expression      shift and go to state 207
    expression                     shift and go to state 324
    primary-expression             shift and go to state 209
    invocation-expression          shift and go to state 210
    conditional-or-expression      shift and go to state 211
    parenthesized-expression       shift and go to state 96

state 313

    (209) switch-statement -> SWITCH OPEN_PAREN expression . CLOSE_PAREN switch-block

    CLOSE_PAREN     shift and go to state 374


state 314

    (114) parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .

    OPEN_BRACKET    reduce using rule 114 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    DOT             reduce using rule 114 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    OPEN_PAREN      reduce using rule 114 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    INCRE           reduce using rule 114 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    DECRE           reduce using rule 114 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    TIMES           reduce using rule 114 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    DIV             reduce using rule 114 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    MOD             reduce using rule 114 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    PLUS            reduce using rule 114 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    MINUS           reduce using rule 114 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    LSHIFT          reduce using rule 114 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    RSHIFT          reduce using rule 114 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    LT              reduce using rule 114 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    GT              reduce using rule 114 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    LE              reduce using rule 114 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    GE              reduce using rule 114 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    EQ              reduce using rule 114 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    NE              reduce using rule 114 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    BITAND          reduce using rule 114 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    BITXOR          reduce using rule 114 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    BITOR           reduce using rule 114 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    LOGAND          reduce using rule 114 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    CONDOP          reduce using rule 114 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    LOGOR           reduce using rule 114 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    DELIM           reduce using rule 114 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 114 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    COMMA           reduce using rule 114 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    CLOSE_BRACKET   reduce using rule 114 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    BLOCK_END       reduce using rule 114 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    COLON           reduce using rule 114 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    ASSIGN          reduce using rule 114 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    PLUSEQUAL       reduce using rule 114 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    MINUSEQUAL      reduce using rule 114 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    TIMESEQUAL      reduce using rule 114 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    DIVEQUAL        reduce using rule 114 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    MODEQUAL        reduce using rule 114 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    BITANDEQUAL     reduce using rule 114 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    BITOREQUAL      reduce using rule 114 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    BITXOREQUAL     reduce using rule 114 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    LSHIFTEQUAL     reduce using rule 114 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    RSHIFTEQUAL     reduce using rule 114 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)


state 315

    (178) labeled-statement -> IDENTIFIER COLON statement .

    IDENTIFIER      reduce using rule 178 (labeled-statement -> IDENTIFIER COLON statement .)
    CONST           reduce using rule 178 (labeled-statement -> IDENTIFIER COLON statement .)
    BLOCK_BEGIN     reduce using rule 178 (labeled-statement -> IDENTIFIER COLON statement .)
    DELIM           reduce using rule 178 (labeled-statement -> IDENTIFIER COLON statement .)
    IF              reduce using rule 178 (labeled-statement -> IDENTIFIER COLON statement .)
    SWITCH          reduce using rule 178 (labeled-statement -> IDENTIFIER COLON statement .)
    WHILE           reduce using rule 178 (labeled-statement -> IDENTIFIER COLON statement .)
    FOR             reduce using rule 178 (labeled-statement -> IDENTIFIER COLON statement .)
    FOREACH         reduce using rule 178 (labeled-statement -> IDENTIFIER COLON statement .)
    DO              reduce using rule 178 (labeled-statement -> IDENTIFIER COLON statement .)
    BREAK           reduce using rule 178 (labeled-statement -> IDENTIFIER COLON statement .)
    CONTINUE        reduce using rule 178 (labeled-statement -> IDENTIFIER COLON statement .)
    GOTO            reduce using rule 178 (labeled-statement -> IDENTIFIER COLON statement .)
    RETURN          reduce using rule 178 (labeled-statement -> IDENTIFIER COLON statement .)
    BOOL            reduce using rule 178 (labeled-statement -> IDENTIFIER COLON statement .)
    NEW             reduce using rule 178 (labeled-statement -> IDENTIFIER COLON statement .)
    INCRE           reduce using rule 178 (labeled-statement -> IDENTIFIER COLON statement .)
    DECRE           reduce using rule 178 (labeled-statement -> IDENTIFIER COLON statement .)
    INT             reduce using rule 178 (labeled-statement -> IDENTIFIER COLON statement .)
    UINT            reduce using rule 178 (labeled-statement -> IDENTIFIER COLON statement .)
    LONG            reduce using rule 178 (labeled-statement -> IDENTIFIER COLON statement .)
    ULONG           reduce using rule 178 (labeled-statement -> IDENTIFIER COLON statement .)
    CHAR            reduce using rule 178 (labeled-statement -> IDENTIFIER COLON statement .)
    FLOAT           reduce using rule 178 (labeled-statement -> IDENTIFIER COLON statement .)
    DOUBLE          reduce using rule 178 (labeled-statement -> IDENTIFIER COLON statement .)
    ICONST          reduce using rule 178 (labeled-statement -> IDENTIFIER COLON statement .)
    UICONST         reduce using rule 178 (labeled-statement -> IDENTIFIER COLON statement .)
    LICONST         reduce using rule 178 (labeled-statement -> IDENTIFIER COLON statement .)
    ULICONST        reduce using rule 178 (labeled-statement -> IDENTIFIER COLON statement .)
    FCONST          reduce using rule 178 (labeled-statement -> IDENTIFIER COLON statement .)
    DCONST          reduce using rule 178 (labeled-statement -> IDENTIFIER COLON statement .)
    MCONST          reduce using rule 178 (labeled-statement -> IDENTIFIER COLON statement .)
    CCONST          reduce using rule 178 (labeled-statement -> IDENTIFIER COLON statement .)
    SCONST          reduce using rule 178 (labeled-statement -> IDENTIFIER COLON statement .)
    VSCONST         reduce using rule 178 (labeled-statement -> IDENTIFIER COLON statement .)
    TRUE            reduce using rule 178 (labeled-statement -> IDENTIFIER COLON statement .)
    FALSE           reduce using rule 178 (labeled-statement -> IDENTIFIER COLON statement .)
    OPEN_PAREN      reduce using rule 178 (labeled-statement -> IDENTIFIER COLON statement .)
    THIS            reduce using rule 178 (labeled-statement -> IDENTIFIER COLON statement .)
    BASE            reduce using rule 178 (labeled-statement -> IDENTIFIER COLON statement .)
    BLOCK_END       reduce using rule 178 (labeled-statement -> IDENTIFIER COLON statement .)
    CASE            reduce using rule 178 (labeled-statement -> IDENTIFIER COLON statement .)
    DEFAULT         reduce using rule 178 (labeled-statement -> IDENTIFIER COLON statement .)


state 316

    (183) local-variable-declarators -> local-variable-declarators COMMA . local-variable-declarator
    (184) local-variable-declarator -> . IDENTIFIER
    (185) local-variable-declarator -> . IDENTIFIER ASSIGN local-variable-initializer

    IDENTIFIER      shift and go to state 227

    local-variable-declarator      shift and go to state 375

state 317

    (185) local-variable-declarator -> IDENTIFIER ASSIGN . local-variable-initializer
    (186) local-variable-initializer -> . expression
    (187) local-variable-initializer -> . array-initializer
    (49) expression -> . conditional-expression
    (50) expression -> . assignment
    (96) array-initializer -> . BLOCK_BEGIN variable-initializer-list-opt BLOCK_END
    (51) conditional-expression -> . conditional-or-expression
    (52) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (133) assignment -> . primary-expression assignment-operator expression
    (53) conditional-or-expression -> . conditional-and-expression
    (54) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (55) conditional-and-expression -> . inclusive-or-expression
    (56) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (57) inclusive-or-expression -> . exclusive-or-expression
    (58) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (59) exclusive-or-expression -> . and-expression
    (60) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (61) and-expression -> . equality-expression
    (62) and-expression -> . and-expression BITAND equality-expression
    (63) equality-expression -> . relational-expression
    (64) equality-expression -> . equality-expression EQ relational-expression
    (65) equality-expression -> . equality-expression NE relational-expression
    (66) relational-expression -> . shift-expression
    (67) relational-expression -> . relational-expression LT shift-expression
    (68) relational-expression -> . relational-expression GT shift-expression
    (69) relational-expression -> . relational-expression LE shift-expression
    (70) relational-expression -> . relational-expression GE shift-expression
    (71) shift-expression -> . additive-expression
    (72) shift-expression -> . shift-expression LSHIFT additive-expression
    (73) shift-expression -> . shift-expression RSHIFT additive-expression
    (74) additive-expression -> . multiplicative-expression
    (75) additive-expression -> . additive-expression PLUS multiplicative-expression
    (76) additive-expression -> . additive-expression MINUS multiplicative-expression
    (77) multiplicative-expression -> . unary-expression
    (78) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (79) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (80) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (81) unary-expression -> . primary-expression
    (82) unary-expression -> . PLUS unary-expression
    (83) unary-expression -> . MINUS unary-expression
    (84) unary-expression -> . BITNOT unary-expression
    (85) unary-expression -> . BITCOMP unary-expression
    (86) unary-expression -> . TIMES unary-expression
    (87) unary-expression -> . pre-increment-expression
    (88) unary-expression -> . pre-decrement-expression
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression

    BLOCK_BEGIN     shift and go to state 263
    NEW             shift and go to state 185
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88
    PLUS            shift and go to state 190
    MINUS           shift and go to state 187
    BITNOT          shift and go to state 197
    BITCOMP         shift and go to state 186
    TIMES           shift and go to state 184
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117

    this-access                    shift and go to state 77
    unary-expression               shift and go to state 199
    exclusive-or-expression        shift and go to state 183
    member-access                  shift and go to state 79
    relational-expression          shift and go to state 203
    additive-expression            shift and go to state 208
    primary-no-array-creation-expression shift and go to state 82
    array-initializer              shift and go to state 376
    inclusive-or-expression        shift and go to state 188
    equality-expression            shift and go to state 189
    post-increment-expression      shift and go to state 182
    element-access                 shift and go to state 101
    literal                        shift and go to state 128
    conditional-expression         shift and go to state 191
    conditional-and-expression     shift and go to state 192
    post-decrement-expression      shift and go to state 193
    base-access                    shift and go to state 126
    array-creation-expression      shift and go to state 144
    assignment                     shift and go to state 196
    object-creation-expression     shift and go to state 198
    pre-increment-expression       shift and go to state 202
    shift-expression               shift and go to state 204
    and-expression                 shift and go to state 201
    pre-decrement-expression       shift and go to state 205
    multiplicative-expression      shift and go to state 207
    expression                     shift and go to state 377
    primary-expression             shift and go to state 209
    invocation-expression          shift and go to state 210
    conditional-or-expression      shift and go to state 211
    parenthesized-expression       shift and go to state 96
    local-variable-initializer     shift and go to state 378

state 318

    (225) do-statement -> DO embedded-statement WHILE . OPEN_PAREN boolean-expression CLOSE_PAREN DELIM

    OPEN_PAREN      shift and go to state 379


state 319

    (188) local-constant-declaration -> CONST type constant-declarators .
    (47) constant-declarators -> constant-declarators . COMMA constant-declarator

    DELIM           reduce using rule 188 (local-constant-declaration -> CONST type constant-declarators .)
    COMMA           shift and go to state 254


state 320

    (206) if-statement -> IF OPEN_PAREN boolean-expression . CLOSE_PAREN embedded-statement
    (207) if-statement -> IF OPEN_PAREN boolean-expression . CLOSE_PAREN embedded-statement ELSE embedded-statement

    CLOSE_PAREN     shift and go to state 380


state 321

    (133) assignment -> primary-expression assignment-operator expression .

    DELIM           reduce using rule 133 (assignment -> primary-expression assignment-operator expression .)
    CLOSE_BRACKET   reduce using rule 133 (assignment -> primary-expression assignment-operator expression .)
    COMMA           reduce using rule 133 (assignment -> primary-expression assignment-operator expression .)
    CLOSE_PAREN     reduce using rule 133 (assignment -> primary-expression assignment-operator expression .)
    BLOCK_END       reduce using rule 133 (assignment -> primary-expression assignment-operator expression .)
    COLON           reduce using rule 133 (assignment -> primary-expression assignment-operator expression .)


state 322

    (116) invocation-expression -> primary-expression OPEN_PAREN argument-list-opt . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 381


state 323

    (117) argument-list-opt -> argument-list .
    (120) argument-list -> argument-list . COMMA argument

    CLOSE_PAREN     reduce using rule 117 (argument-list-opt -> argument-list .)
    COMMA           shift and go to state 382


state 324

    (121) argument -> expression .

    COMMA           reduce using rule 121 (argument -> expression .)
    CLOSE_PAREN     reduce using rule 121 (argument -> expression .)


state 325

    (118) argument-list-opt -> empty .

    CLOSE_PAREN     reduce using rule 118 (argument-list-opt -> empty .)


state 326

    (122) argument -> OUT . variable-reference
    (123) variable-reference -> . expression
    (49) expression -> . conditional-expression
    (50) expression -> . assignment
    (51) conditional-expression -> . conditional-or-expression
    (52) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (133) assignment -> . primary-expression assignment-operator expression
    (53) conditional-or-expression -> . conditional-and-expression
    (54) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (55) conditional-and-expression -> . inclusive-or-expression
    (56) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (57) inclusive-or-expression -> . exclusive-or-expression
    (58) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (59) exclusive-or-expression -> . and-expression
    (60) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (61) and-expression -> . equality-expression
    (62) and-expression -> . and-expression BITAND equality-expression
    (63) equality-expression -> . relational-expression
    (64) equality-expression -> . equality-expression EQ relational-expression
    (65) equality-expression -> . equality-expression NE relational-expression
    (66) relational-expression -> . shift-expression
    (67) relational-expression -> . relational-expression LT shift-expression
    (68) relational-expression -> . relational-expression GT shift-expression
    (69) relational-expression -> . relational-expression LE shift-expression
    (70) relational-expression -> . relational-expression GE shift-expression
    (71) shift-expression -> . additive-expression
    (72) shift-expression -> . shift-expression LSHIFT additive-expression
    (73) shift-expression -> . shift-expression RSHIFT additive-expression
    (74) additive-expression -> . multiplicative-expression
    (75) additive-expression -> . additive-expression PLUS multiplicative-expression
    (76) additive-expression -> . additive-expression MINUS multiplicative-expression
    (77) multiplicative-expression -> . unary-expression
    (78) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (79) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (80) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (81) unary-expression -> . primary-expression
    (82) unary-expression -> . PLUS unary-expression
    (83) unary-expression -> . MINUS unary-expression
    (84) unary-expression -> . BITNOT unary-expression
    (85) unary-expression -> . BITCOMP unary-expression
    (86) unary-expression -> . TIMES unary-expression
    (87) unary-expression -> . pre-increment-expression
    (88) unary-expression -> . pre-decrement-expression
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression

    NEW             shift and go to state 185
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88
    PLUS            shift and go to state 190
    MINUS           shift and go to state 187
    BITNOT          shift and go to state 197
    BITCOMP         shift and go to state 186
    TIMES           shift and go to state 184
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117

    this-access                    shift and go to state 77
    unary-expression               shift and go to state 199
    exclusive-or-expression        shift and go to state 183
    member-access                  shift and go to state 79
    relational-expression          shift and go to state 203
    additive-expression            shift and go to state 208
    primary-no-array-creation-expression shift and go to state 82
    inclusive-or-expression        shift and go to state 188
    equality-expression            shift and go to state 189
    post-increment-expression      shift and go to state 182
    element-access                 shift and go to state 101
    literal                        shift and go to state 128
    base-access                    shift and go to state 126
    conditional-and-expression     shift and go to state 192
    post-decrement-expression      shift and go to state 193
    conditional-expression         shift and go to state 191
    array-creation-expression      shift and go to state 144
    assignment                     shift and go to state 196
    object-creation-expression     shift and go to state 198
    pre-increment-expression       shift and go to state 202
    shift-expression               shift and go to state 204
    and-expression                 shift and go to state 201
    pre-decrement-expression       shift and go to state 205
    multiplicative-expression      shift and go to state 207
    conditional-or-expression      shift and go to state 211
    primary-expression             shift and go to state 209
    invocation-expression          shift and go to state 210
    expression                     shift and go to state 383
    parenthesized-expression       shift and go to state 96
    variable-reference             shift and go to state 384

state 327

    (119) argument-list -> argument .

    COMMA           reduce using rule 119 (argument-list -> argument .)
    CLOSE_PAREN     reduce using rule 119 (argument-list -> argument .)


state 328

    (115) member-access -> primary-expression DOT IDENTIFIER .

    OPEN_BRACKET    reduce using rule 115 (member-access -> primary-expression DOT IDENTIFIER .)
    OPEN_PAREN      reduce using rule 115 (member-access -> primary-expression DOT IDENTIFIER .)
    INCRE           reduce using rule 115 (member-access -> primary-expression DOT IDENTIFIER .)
    DECRE           reduce using rule 115 (member-access -> primary-expression DOT IDENTIFIER .)
    DOT             reduce using rule 115 (member-access -> primary-expression DOT IDENTIFIER .)
    ASSIGN          reduce using rule 115 (member-access -> primary-expression DOT IDENTIFIER .)
    PLUSEQUAL       reduce using rule 115 (member-access -> primary-expression DOT IDENTIFIER .)
    MINUSEQUAL      reduce using rule 115 (member-access -> primary-expression DOT IDENTIFIER .)
    TIMESEQUAL      reduce using rule 115 (member-access -> primary-expression DOT IDENTIFIER .)
    DIVEQUAL        reduce using rule 115 (member-access -> primary-expression DOT IDENTIFIER .)
    MODEQUAL        reduce using rule 115 (member-access -> primary-expression DOT IDENTIFIER .)
    BITANDEQUAL     reduce using rule 115 (member-access -> primary-expression DOT IDENTIFIER .)
    BITOREQUAL      reduce using rule 115 (member-access -> primary-expression DOT IDENTIFIER .)
    BITXOREQUAL     reduce using rule 115 (member-access -> primary-expression DOT IDENTIFIER .)
    LSHIFTEQUAL     reduce using rule 115 (member-access -> primary-expression DOT IDENTIFIER .)
    RSHIFTEQUAL     reduce using rule 115 (member-access -> primary-expression DOT IDENTIFIER .)
    TIMES           reduce using rule 115 (member-access -> primary-expression DOT IDENTIFIER .)
    DIV             reduce using rule 115 (member-access -> primary-expression DOT IDENTIFIER .)
    MOD             reduce using rule 115 (member-access -> primary-expression DOT IDENTIFIER .)
    PLUS            reduce using rule 115 (member-access -> primary-expression DOT IDENTIFIER .)
    MINUS           reduce using rule 115 (member-access -> primary-expression DOT IDENTIFIER .)
    LSHIFT          reduce using rule 115 (member-access -> primary-expression DOT IDENTIFIER .)
    RSHIFT          reduce using rule 115 (member-access -> primary-expression DOT IDENTIFIER .)
    LT              reduce using rule 115 (member-access -> primary-expression DOT IDENTIFIER .)
    GT              reduce using rule 115 (member-access -> primary-expression DOT IDENTIFIER .)
    LE              reduce using rule 115 (member-access -> primary-expression DOT IDENTIFIER .)
    GE              reduce using rule 115 (member-access -> primary-expression DOT IDENTIFIER .)
    EQ              reduce using rule 115 (member-access -> primary-expression DOT IDENTIFIER .)
    NE              reduce using rule 115 (member-access -> primary-expression DOT IDENTIFIER .)
    BITAND          reduce using rule 115 (member-access -> primary-expression DOT IDENTIFIER .)
    BITXOR          reduce using rule 115 (member-access -> primary-expression DOT IDENTIFIER .)
    BITOR           reduce using rule 115 (member-access -> primary-expression DOT IDENTIFIER .)
    LOGAND          reduce using rule 115 (member-access -> primary-expression DOT IDENTIFIER .)
    CONDOP          reduce using rule 115 (member-access -> primary-expression DOT IDENTIFIER .)
    LOGOR           reduce using rule 115 (member-access -> primary-expression DOT IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 115 (member-access -> primary-expression DOT IDENTIFIER .)
    COMMA           reduce using rule 115 (member-access -> primary-expression DOT IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 115 (member-access -> primary-expression DOT IDENTIFIER .)
    DELIM           reduce using rule 115 (member-access -> primary-expression DOT IDENTIFIER .)
    BLOCK_END       reduce using rule 115 (member-access -> primary-expression DOT IDENTIFIER .)
    COLON           reduce using rule 115 (member-access -> primary-expression DOT IDENTIFIER .)


state 329

    (157) method-header -> VOID member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .

    DELIM           reduce using rule 157 (method-header -> VOID member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)
    BLOCK_BEGIN     reduce using rule 157 (method-header -> VOID member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)


state 330

    (47) constant-declarators -> constant-declarators COMMA constant-declarator .

    DELIM           reduce using rule 47 (constant-declarators -> constant-declarators COMMA constant-declarator .)
    COMMA           reduce using rule 47 (constant-declarators -> constant-declarators COMMA constant-declarator .)


state 331

    (48) constant-declarator -> IDENTIFIER ASSIGN expression .

    COMMA           reduce using rule 48 (constant-declarator -> IDENTIFIER ASSIGN expression .)
    DELIM           reduce using rule 48 (constant-declarator -> IDENTIFIER ASSIGN expression .)


state 332

    (256) destructor-body -> DELIM .

    CONST           reduce using rule 256 (destructor-body -> DELIM .)
    BITCOMP         reduce using rule 256 (destructor-body -> DELIM .)
    CLASS           reduce using rule 256 (destructor-body -> DELIM .)
    PUBLIC          reduce using rule 256 (destructor-body -> DELIM .)
    PRIVATE         reduce using rule 256 (destructor-body -> DELIM .)
    VOID            reduce using rule 256 (destructor-body -> DELIM .)
    IDENTIFIER      reduce using rule 256 (destructor-body -> DELIM .)
    BOOL            reduce using rule 256 (destructor-body -> DELIM .)
    INT             reduce using rule 256 (destructor-body -> DELIM .)
    UINT            reduce using rule 256 (destructor-body -> DELIM .)
    LONG            reduce using rule 256 (destructor-body -> DELIM .)
    ULONG           reduce using rule 256 (destructor-body -> DELIM .)
    CHAR            reduce using rule 256 (destructor-body -> DELIM .)
    FLOAT           reduce using rule 256 (destructor-body -> DELIM .)
    DOUBLE          reduce using rule 256 (destructor-body -> DELIM .)
    BLOCK_END       reduce using rule 256 (destructor-body -> DELIM .)


state 333

    (254) destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .

    CONST           reduce using rule 254 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    BITCOMP         reduce using rule 254 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    CLASS           reduce using rule 254 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    PUBLIC          reduce using rule 254 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    PRIVATE         reduce using rule 254 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    VOID            reduce using rule 254 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    IDENTIFIER      reduce using rule 254 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    BOOL            reduce using rule 254 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    INT             reduce using rule 254 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    UINT            reduce using rule 254 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    LONG            reduce using rule 254 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    ULONG           reduce using rule 254 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    CHAR            reduce using rule 254 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    FLOAT           reduce using rule 254 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    DOUBLE          reduce using rule 254 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    BLOCK_END       reduce using rule 254 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)


state 334

    (255) destructor-body -> block .

    CONST           reduce using rule 255 (destructor-body -> block .)
    BITCOMP         reduce using rule 255 (destructor-body -> block .)
    CLASS           reduce using rule 255 (destructor-body -> block .)
    PUBLIC          reduce using rule 255 (destructor-body -> block .)
    PRIVATE         reduce using rule 255 (destructor-body -> block .)
    VOID            reduce using rule 255 (destructor-body -> block .)
    IDENTIFIER      reduce using rule 255 (destructor-body -> block .)
    BOOL            reduce using rule 255 (destructor-body -> block .)
    INT             reduce using rule 255 (destructor-body -> block .)
    UINT            reduce using rule 255 (destructor-body -> block .)
    LONG            reduce using rule 255 (destructor-body -> block .)
    ULONG           reduce using rule 255 (destructor-body -> block .)
    CHAR            reduce using rule 255 (destructor-body -> block .)
    FLOAT           reduce using rule 255 (destructor-body -> block .)
    DOUBLE          reduce using rule 255 (destructor-body -> block .)
    BLOCK_END       reduce using rule 255 (destructor-body -> block .)


state 335

    (156) method-header -> type member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .

    DELIM           reduce using rule 156 (method-header -> type member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)
    BLOCK_BEGIN     reduce using rule 156 (method-header -> type member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)


state 336

    (97) variable-initializer-list-opt -> variable-initializer-list .
    (100) variable-initializer-list -> variable-initializer-list . COMMA variable-initializer

    BLOCK_END       reduce using rule 97 (variable-initializer-list-opt -> variable-initializer-list .)
    COMMA           shift and go to state 385


state 337

    (99) variable-initializer-list -> variable-initializer .

    COMMA           reduce using rule 99 (variable-initializer-list -> variable-initializer .)
    BLOCK_END       reduce using rule 99 (variable-initializer-list -> variable-initializer .)


state 338

    (96) array-initializer -> BLOCK_BEGIN variable-initializer-list-opt . BLOCK_END

    BLOCK_END       shift and go to state 386


state 339

    (98) variable-initializer-list-opt -> empty .

    BLOCK_END       reduce using rule 98 (variable-initializer-list-opt -> empty .)


state 340

    (164) fixed-parameter -> parameter-modifier-opt type IDENTIFIER .

    COMMA           reduce using rule 164 (fixed-parameter -> parameter-modifier-opt type IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 164 (fixed-parameter -> parameter-modifier-opt type IDENTIFIER .)


state 341

    (166) parameter-modifier-opt -> empty .

    BOOL            reduce using rule 166 (parameter-modifier-opt -> empty .)
    IDENTIFIER      reduce using rule 166 (parameter-modifier-opt -> empty .)
    INT             reduce using rule 166 (parameter-modifier-opt -> empty .)
    UINT            reduce using rule 166 (parameter-modifier-opt -> empty .)
    LONG            reduce using rule 166 (parameter-modifier-opt -> empty .)
    ULONG           reduce using rule 166 (parameter-modifier-opt -> empty .)
    CHAR            reduce using rule 166 (parameter-modifier-opt -> empty .)
    FLOAT           reduce using rule 166 (parameter-modifier-opt -> empty .)
    DOUBLE          reduce using rule 166 (parameter-modifier-opt -> empty .)


state 342

    (163) fixed-parameters -> fixed-parameters COMMA fixed-parameter .

    COMMA           reduce using rule 163 (fixed-parameters -> fixed-parameters COMMA fixed-parameter .)
    CLOSE_PAREN     reduce using rule 163 (fixed-parameters -> fixed-parameters COMMA fixed-parameter .)


state 343

    (24) constant-declaration -> modifier CONST simple-type constant-declarators DELIM .

    CONST           reduce using rule 24 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    BITCOMP         reduce using rule 24 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    CLASS           reduce using rule 24 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    PUBLIC          reduce using rule 24 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    PRIVATE         reduce using rule 24 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    VOID            reduce using rule 24 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    IDENTIFIER      reduce using rule 24 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    BOOL            reduce using rule 24 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    INT             reduce using rule 24 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    UINT            reduce using rule 24 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    LONG            reduce using rule 24 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    ULONG           reduce using rule 24 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    CHAR            reduce using rule 24 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    FLOAT           reduce using rule 24 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    DOUBLE          reduce using rule 24 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    BLOCK_END       reduce using rule 24 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)


state 344

    (155) method-header -> modifier VOID member-name OPEN_PAREN formal-parameter-list-opt . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 387


state 345

    (154) method-header -> modifier type member-name OPEN_PAREN formal-parameter-list-opt . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 388


state 346

    (124) element-access -> primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET .

    OPEN_BRACKET    reduce using rule 124 (element-access -> primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET .)
    DOT             reduce using rule 124 (element-access -> primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET .)
    OPEN_PAREN      reduce using rule 124 (element-access -> primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET .)
    INCRE           reduce using rule 124 (element-access -> primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET .)
    DECRE           reduce using rule 124 (element-access -> primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET .)
    ASSIGN          reduce using rule 124 (element-access -> primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET .)
    PLUSEQUAL       reduce using rule 124 (element-access -> primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET .)
    MINUSEQUAL      reduce using rule 124 (element-access -> primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET .)
    TIMESEQUAL      reduce using rule 124 (element-access -> primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET .)
    DIVEQUAL        reduce using rule 124 (element-access -> primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET .)
    MODEQUAL        reduce using rule 124 (element-access -> primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET .)
    BITANDEQUAL     reduce using rule 124 (element-access -> primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET .)
    BITOREQUAL      reduce using rule 124 (element-access -> primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET .)
    BITXOREQUAL     reduce using rule 124 (element-access -> primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET .)
    LSHIFTEQUAL     reduce using rule 124 (element-access -> primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET .)
    RSHIFTEQUAL     reduce using rule 124 (element-access -> primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET .)
    TIMES           reduce using rule 124 (element-access -> primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET .)
    DIV             reduce using rule 124 (element-access -> primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET .)
    MOD             reduce using rule 124 (element-access -> primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET .)
    PLUS            reduce using rule 124 (element-access -> primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET .)
    MINUS           reduce using rule 124 (element-access -> primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET .)
    LSHIFT          reduce using rule 124 (element-access -> primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET .)
    RSHIFT          reduce using rule 124 (element-access -> primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET .)
    LT              reduce using rule 124 (element-access -> primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET .)
    GT              reduce using rule 124 (element-access -> primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET .)
    LE              reduce using rule 124 (element-access -> primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET .)
    GE              reduce using rule 124 (element-access -> primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET .)
    EQ              reduce using rule 124 (element-access -> primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET .)
    NE              reduce using rule 124 (element-access -> primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET .)
    BITAND          reduce using rule 124 (element-access -> primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET .)
    BITXOR          reduce using rule 124 (element-access -> primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET .)
    BITOR           reduce using rule 124 (element-access -> primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET .)
    LOGAND          reduce using rule 124 (element-access -> primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET .)
    CONDOP          reduce using rule 124 (element-access -> primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET .)
    LOGOR           reduce using rule 124 (element-access -> primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET .)
    DELIM           reduce using rule 124 (element-access -> primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET .)
    CLOSE_PAREN     reduce using rule 124 (element-access -> primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET .)
    COMMA           reduce using rule 124 (element-access -> primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 124 (element-access -> primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET .)
    BLOCK_END       reduce using rule 124 (element-access -> primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET .)
    COLON           reduce using rule 124 (element-access -> primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET .)


state 347

    (95) expression-list -> expression-list COMMA . expression
    (49) expression -> . conditional-expression
    (50) expression -> . assignment
    (51) conditional-expression -> . conditional-or-expression
    (52) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (133) assignment -> . primary-expression assignment-operator expression
    (53) conditional-or-expression -> . conditional-and-expression
    (54) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (55) conditional-and-expression -> . inclusive-or-expression
    (56) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (57) inclusive-or-expression -> . exclusive-or-expression
    (58) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (59) exclusive-or-expression -> . and-expression
    (60) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (61) and-expression -> . equality-expression
    (62) and-expression -> . and-expression BITAND equality-expression
    (63) equality-expression -> . relational-expression
    (64) equality-expression -> . equality-expression EQ relational-expression
    (65) equality-expression -> . equality-expression NE relational-expression
    (66) relational-expression -> . shift-expression
    (67) relational-expression -> . relational-expression LT shift-expression
    (68) relational-expression -> . relational-expression GT shift-expression
    (69) relational-expression -> . relational-expression LE shift-expression
    (70) relational-expression -> . relational-expression GE shift-expression
    (71) shift-expression -> . additive-expression
    (72) shift-expression -> . shift-expression LSHIFT additive-expression
    (73) shift-expression -> . shift-expression RSHIFT additive-expression
    (74) additive-expression -> . multiplicative-expression
    (75) additive-expression -> . additive-expression PLUS multiplicative-expression
    (76) additive-expression -> . additive-expression MINUS multiplicative-expression
    (77) multiplicative-expression -> . unary-expression
    (78) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (79) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (80) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (81) unary-expression -> . primary-expression
    (82) unary-expression -> . PLUS unary-expression
    (83) unary-expression -> . MINUS unary-expression
    (84) unary-expression -> . BITNOT unary-expression
    (85) unary-expression -> . BITCOMP unary-expression
    (86) unary-expression -> . TIMES unary-expression
    (87) unary-expression -> . pre-increment-expression
    (88) unary-expression -> . pre-decrement-expression
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression

    NEW             shift and go to state 185
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88
    PLUS            shift and go to state 190
    MINUS           shift and go to state 187
    BITNOT          shift and go to state 197
    BITCOMP         shift and go to state 186
    TIMES           shift and go to state 184
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117

    this-access                    shift and go to state 77
    unary-expression               shift and go to state 199
    exclusive-or-expression        shift and go to state 183
    member-access                  shift and go to state 79
    relational-expression          shift and go to state 203
    additive-expression            shift and go to state 208
    primary-no-array-creation-expression shift and go to state 82
    inclusive-or-expression        shift and go to state 188
    equality-expression            shift and go to state 189
    post-increment-expression      shift and go to state 182
    element-access                 shift and go to state 101
    literal                        shift and go to state 128
    conditional-expression         shift and go to state 191
    conditional-and-expression     shift and go to state 192
    post-decrement-expression      shift and go to state 193
    base-access                    shift and go to state 126
    array-creation-expression      shift and go to state 144
    assignment                     shift and go to state 196
    object-creation-expression     shift and go to state 198
    pre-increment-expression       shift and go to state 202
    shift-expression               shift and go to state 204
    and-expression                 shift and go to state 201
    pre-decrement-expression       shift and go to state 205
    multiplicative-expression      shift and go to state 207
    expression                     shift and go to state 389
    primary-expression             shift and go to state 209
    invocation-expression          shift and go to state 210
    conditional-or-expression      shift and go to state 211
    parenthesized-expression       shift and go to state 96

state 348

    (127) base-access -> BASE OPEN_BRACKET expression-list CLOSE_BRACKET .

    OPEN_BRACKET    reduce using rule 127 (base-access -> BASE OPEN_BRACKET expression-list CLOSE_BRACKET .)
    DOT             reduce using rule 127 (base-access -> BASE OPEN_BRACKET expression-list CLOSE_BRACKET .)
    OPEN_PAREN      reduce using rule 127 (base-access -> BASE OPEN_BRACKET expression-list CLOSE_BRACKET .)
    INCRE           reduce using rule 127 (base-access -> BASE OPEN_BRACKET expression-list CLOSE_BRACKET .)
    DECRE           reduce using rule 127 (base-access -> BASE OPEN_BRACKET expression-list CLOSE_BRACKET .)
    ASSIGN          reduce using rule 127 (base-access -> BASE OPEN_BRACKET expression-list CLOSE_BRACKET .)
    PLUSEQUAL       reduce using rule 127 (base-access -> BASE OPEN_BRACKET expression-list CLOSE_BRACKET .)
    MINUSEQUAL      reduce using rule 127 (base-access -> BASE OPEN_BRACKET expression-list CLOSE_BRACKET .)
    TIMESEQUAL      reduce using rule 127 (base-access -> BASE OPEN_BRACKET expression-list CLOSE_BRACKET .)
    DIVEQUAL        reduce using rule 127 (base-access -> BASE OPEN_BRACKET expression-list CLOSE_BRACKET .)
    MODEQUAL        reduce using rule 127 (base-access -> BASE OPEN_BRACKET expression-list CLOSE_BRACKET .)
    BITANDEQUAL     reduce using rule 127 (base-access -> BASE OPEN_BRACKET expression-list CLOSE_BRACKET .)
    BITOREQUAL      reduce using rule 127 (base-access -> BASE OPEN_BRACKET expression-list CLOSE_BRACKET .)
    BITXOREQUAL     reduce using rule 127 (base-access -> BASE OPEN_BRACKET expression-list CLOSE_BRACKET .)
    LSHIFTEQUAL     reduce using rule 127 (base-access -> BASE OPEN_BRACKET expression-list CLOSE_BRACKET .)
    RSHIFTEQUAL     reduce using rule 127 (base-access -> BASE OPEN_BRACKET expression-list CLOSE_BRACKET .)
    TIMES           reduce using rule 127 (base-access -> BASE OPEN_BRACKET expression-list CLOSE_BRACKET .)
    DIV             reduce using rule 127 (base-access -> BASE OPEN_BRACKET expression-list CLOSE_BRACKET .)
    MOD             reduce using rule 127 (base-access -> BASE OPEN_BRACKET expression-list CLOSE_BRACKET .)
    PLUS            reduce using rule 127 (base-access -> BASE OPEN_BRACKET expression-list CLOSE_BRACKET .)
    MINUS           reduce using rule 127 (base-access -> BASE OPEN_BRACKET expression-list CLOSE_BRACKET .)
    LSHIFT          reduce using rule 127 (base-access -> BASE OPEN_BRACKET expression-list CLOSE_BRACKET .)
    RSHIFT          reduce using rule 127 (base-access -> BASE OPEN_BRACKET expression-list CLOSE_BRACKET .)
    LT              reduce using rule 127 (base-access -> BASE OPEN_BRACKET expression-list CLOSE_BRACKET .)
    GT              reduce using rule 127 (base-access -> BASE OPEN_BRACKET expression-list CLOSE_BRACKET .)
    LE              reduce using rule 127 (base-access -> BASE OPEN_BRACKET expression-list CLOSE_BRACKET .)
    GE              reduce using rule 127 (base-access -> BASE OPEN_BRACKET expression-list CLOSE_BRACKET .)
    EQ              reduce using rule 127 (base-access -> BASE OPEN_BRACKET expression-list CLOSE_BRACKET .)
    NE              reduce using rule 127 (base-access -> BASE OPEN_BRACKET expression-list CLOSE_BRACKET .)
    BITAND          reduce using rule 127 (base-access -> BASE OPEN_BRACKET expression-list CLOSE_BRACKET .)
    BITXOR          reduce using rule 127 (base-access -> BASE OPEN_BRACKET expression-list CLOSE_BRACKET .)
    BITOR           reduce using rule 127 (base-access -> BASE OPEN_BRACKET expression-list CLOSE_BRACKET .)
    LOGAND          reduce using rule 127 (base-access -> BASE OPEN_BRACKET expression-list CLOSE_BRACKET .)
    CONDOP          reduce using rule 127 (base-access -> BASE OPEN_BRACKET expression-list CLOSE_BRACKET .)
    LOGOR           reduce using rule 127 (base-access -> BASE OPEN_BRACKET expression-list CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 127 (base-access -> BASE OPEN_BRACKET expression-list CLOSE_BRACKET .)
    COMMA           reduce using rule 127 (base-access -> BASE OPEN_BRACKET expression-list CLOSE_BRACKET .)
    DELIM           reduce using rule 127 (base-access -> BASE OPEN_BRACKET expression-list CLOSE_BRACKET .)
    CLOSE_PAREN     reduce using rule 127 (base-access -> BASE OPEN_BRACKET expression-list CLOSE_BRACKET .)
    BLOCK_END       reduce using rule 127 (base-access -> BASE OPEN_BRACKET expression-list CLOSE_BRACKET .)
    COLON           reduce using rule 127 (base-access -> BASE OPEN_BRACKET expression-list CLOSE_BRACKET .)


state 349

    (239) foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER . IN expression CLOSE_PAREN embedded-statement

    IN              shift and go to state 390


state 350

    (60) exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .
    (62) and-expression -> and-expression . BITAND equality-expression

    BITXOR          reduce using rule 60 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    BITOR           reduce using rule 60 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    LOGAND          reduce using rule 60 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    CONDOP          reduce using rule 60 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    LOGOR           reduce using rule 60 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    DELIM           reduce using rule 60 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    CLOSE_PAREN     reduce using rule 60 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    COMMA           reduce using rule 60 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    CLOSE_BRACKET   reduce using rule 60 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    BLOCK_END       reduce using rule 60 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    COLON           reduce using rule 60 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    BITAND          shift and go to state 288


state 351

    (58) inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .
    (60) exclusive-or-expression -> exclusive-or-expression . BITXOR and-expression

    BITOR           reduce using rule 58 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    LOGAND          reduce using rule 58 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    CONDOP          reduce using rule 58 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    LOGOR           reduce using rule 58 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    COMMA           reduce using rule 58 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    CLOSE_PAREN     reduce using rule 58 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    DELIM           reduce using rule 58 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    CLOSE_BRACKET   reduce using rule 58 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    BLOCK_END       reduce using rule 58 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    COLON           reduce using rule 58 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    BITXOR          shift and go to state 277


state 352

    (64) equality-expression -> equality-expression EQ relational-expression .
    (67) relational-expression -> relational-expression . LT shift-expression
    (68) relational-expression -> relational-expression . GT shift-expression
    (69) relational-expression -> relational-expression . LE shift-expression
    (70) relational-expression -> relational-expression . GE shift-expression

    EQ              reduce using rule 64 (equality-expression -> equality-expression EQ relational-expression .)
    NE              reduce using rule 64 (equality-expression -> equality-expression EQ relational-expression .)
    BITAND          reduce using rule 64 (equality-expression -> equality-expression EQ relational-expression .)
    BITXOR          reduce using rule 64 (equality-expression -> equality-expression EQ relational-expression .)
    BITOR           reduce using rule 64 (equality-expression -> equality-expression EQ relational-expression .)
    LOGAND          reduce using rule 64 (equality-expression -> equality-expression EQ relational-expression .)
    CONDOP          reduce using rule 64 (equality-expression -> equality-expression EQ relational-expression .)
    LOGOR           reduce using rule 64 (equality-expression -> equality-expression EQ relational-expression .)
    CLOSE_BRACKET   reduce using rule 64 (equality-expression -> equality-expression EQ relational-expression .)
    COMMA           reduce using rule 64 (equality-expression -> equality-expression EQ relational-expression .)
    CLOSE_PAREN     reduce using rule 64 (equality-expression -> equality-expression EQ relational-expression .)
    DELIM           reduce using rule 64 (equality-expression -> equality-expression EQ relational-expression .)
    BLOCK_END       reduce using rule 64 (equality-expression -> equality-expression EQ relational-expression .)
    COLON           reduce using rule 64 (equality-expression -> equality-expression EQ relational-expression .)
    LT              shift and go to state 291
    GT              shift and go to state 292
    LE              shift and go to state 289
    GE              shift and go to state 290


state 353

    (65) equality-expression -> equality-expression NE relational-expression .
    (67) relational-expression -> relational-expression . LT shift-expression
    (68) relational-expression -> relational-expression . GT shift-expression
    (69) relational-expression -> relational-expression . LE shift-expression
    (70) relational-expression -> relational-expression . GE shift-expression

    EQ              reduce using rule 65 (equality-expression -> equality-expression NE relational-expression .)
    NE              reduce using rule 65 (equality-expression -> equality-expression NE relational-expression .)
    BITAND          reduce using rule 65 (equality-expression -> equality-expression NE relational-expression .)
    BITXOR          reduce using rule 65 (equality-expression -> equality-expression NE relational-expression .)
    BITOR           reduce using rule 65 (equality-expression -> equality-expression NE relational-expression .)
    LOGAND          reduce using rule 65 (equality-expression -> equality-expression NE relational-expression .)
    CONDOP          reduce using rule 65 (equality-expression -> equality-expression NE relational-expression .)
    LOGOR           reduce using rule 65 (equality-expression -> equality-expression NE relational-expression .)
    CLOSE_BRACKET   reduce using rule 65 (equality-expression -> equality-expression NE relational-expression .)
    COMMA           reduce using rule 65 (equality-expression -> equality-expression NE relational-expression .)
    CLOSE_PAREN     reduce using rule 65 (equality-expression -> equality-expression NE relational-expression .)
    DELIM           reduce using rule 65 (equality-expression -> equality-expression NE relational-expression .)
    BLOCK_END       reduce using rule 65 (equality-expression -> equality-expression NE relational-expression .)
    COLON           reduce using rule 65 (equality-expression -> equality-expression NE relational-expression .)
    LT              shift and go to state 291
    GT              shift and go to state 292
    LE              shift and go to state 289
    GE              shift and go to state 290


state 354

    (56) conditional-and-expression -> conditional-and-expression LOGAND inclusive-or-expression .
    (58) inclusive-or-expression -> inclusive-or-expression . BITOR exclusive-or-expression

    LOGAND          reduce using rule 56 (conditional-and-expression -> conditional-and-expression LOGAND inclusive-or-expression .)
    CONDOP          reduce using rule 56 (conditional-and-expression -> conditional-and-expression LOGAND inclusive-or-expression .)
    LOGOR           reduce using rule 56 (conditional-and-expression -> conditional-and-expression LOGAND inclusive-or-expression .)
    DELIM           reduce using rule 56 (conditional-and-expression -> conditional-and-expression LOGAND inclusive-or-expression .)
    CLOSE_PAREN     reduce using rule 56 (conditional-and-expression -> conditional-and-expression LOGAND inclusive-or-expression .)
    COMMA           reduce using rule 56 (conditional-and-expression -> conditional-and-expression LOGAND inclusive-or-expression .)
    CLOSE_BRACKET   reduce using rule 56 (conditional-and-expression -> conditional-and-expression LOGAND inclusive-or-expression .)
    BLOCK_END       reduce using rule 56 (conditional-and-expression -> conditional-and-expression LOGAND inclusive-or-expression .)
    COLON           reduce using rule 56 (conditional-and-expression -> conditional-and-expression LOGAND inclusive-or-expression .)
    BITOR           shift and go to state 281


state 355

    (62) and-expression -> and-expression BITAND equality-expression .
    (64) equality-expression -> equality-expression . EQ relational-expression
    (65) equality-expression -> equality-expression . NE relational-expression

    BITAND          reduce using rule 62 (and-expression -> and-expression BITAND equality-expression .)
    BITXOR          reduce using rule 62 (and-expression -> and-expression BITAND equality-expression .)
    BITOR           reduce using rule 62 (and-expression -> and-expression BITAND equality-expression .)
    LOGAND          reduce using rule 62 (and-expression -> and-expression BITAND equality-expression .)
    CONDOP          reduce using rule 62 (and-expression -> and-expression BITAND equality-expression .)
    LOGOR           reduce using rule 62 (and-expression -> and-expression BITAND equality-expression .)
    COMMA           reduce using rule 62 (and-expression -> and-expression BITAND equality-expression .)
    CLOSE_PAREN     reduce using rule 62 (and-expression -> and-expression BITAND equality-expression .)
    DELIM           reduce using rule 62 (and-expression -> and-expression BITAND equality-expression .)
    CLOSE_BRACKET   reduce using rule 62 (and-expression -> and-expression BITAND equality-expression .)
    BLOCK_END       reduce using rule 62 (and-expression -> and-expression BITAND equality-expression .)
    COLON           reduce using rule 62 (and-expression -> and-expression BITAND equality-expression .)
    EQ              shift and go to state 282
    NE              shift and go to state 283


state 356

    (69) relational-expression -> relational-expression LE shift-expression .
    (72) shift-expression -> shift-expression . LSHIFT additive-expression
    (73) shift-expression -> shift-expression . RSHIFT additive-expression

    LT              reduce using rule 69 (relational-expression -> relational-expression LE shift-expression .)
    GT              reduce using rule 69 (relational-expression -> relational-expression LE shift-expression .)
    LE              reduce using rule 69 (relational-expression -> relational-expression LE shift-expression .)
    GE              reduce using rule 69 (relational-expression -> relational-expression LE shift-expression .)
    EQ              reduce using rule 69 (relational-expression -> relational-expression LE shift-expression .)
    NE              reduce using rule 69 (relational-expression -> relational-expression LE shift-expression .)
    BITAND          reduce using rule 69 (relational-expression -> relational-expression LE shift-expression .)
    BITXOR          reduce using rule 69 (relational-expression -> relational-expression LE shift-expression .)
    BITOR           reduce using rule 69 (relational-expression -> relational-expression LE shift-expression .)
    LOGAND          reduce using rule 69 (relational-expression -> relational-expression LE shift-expression .)
    CONDOP          reduce using rule 69 (relational-expression -> relational-expression LE shift-expression .)
    LOGOR           reduce using rule 69 (relational-expression -> relational-expression LE shift-expression .)
    COLON           reduce using rule 69 (relational-expression -> relational-expression LE shift-expression .)
    CLOSE_PAREN     reduce using rule 69 (relational-expression -> relational-expression LE shift-expression .)
    COMMA           reduce using rule 69 (relational-expression -> relational-expression LE shift-expression .)
    BLOCK_END       reduce using rule 69 (relational-expression -> relational-expression LE shift-expression .)
    DELIM           reduce using rule 69 (relational-expression -> relational-expression LE shift-expression .)
    CLOSE_BRACKET   reduce using rule 69 (relational-expression -> relational-expression LE shift-expression .)
    LSHIFT          shift and go to state 294
    RSHIFT          shift and go to state 293


state 357

    (70) relational-expression -> relational-expression GE shift-expression .
    (72) shift-expression -> shift-expression . LSHIFT additive-expression
    (73) shift-expression -> shift-expression . RSHIFT additive-expression

    LT              reduce using rule 70 (relational-expression -> relational-expression GE shift-expression .)
    GT              reduce using rule 70 (relational-expression -> relational-expression GE shift-expression .)
    LE              reduce using rule 70 (relational-expression -> relational-expression GE shift-expression .)
    GE              reduce using rule 70 (relational-expression -> relational-expression GE shift-expression .)
    EQ              reduce using rule 70 (relational-expression -> relational-expression GE shift-expression .)
    NE              reduce using rule 70 (relational-expression -> relational-expression GE shift-expression .)
    BITAND          reduce using rule 70 (relational-expression -> relational-expression GE shift-expression .)
    BITXOR          reduce using rule 70 (relational-expression -> relational-expression GE shift-expression .)
    BITOR           reduce using rule 70 (relational-expression -> relational-expression GE shift-expression .)
    LOGAND          reduce using rule 70 (relational-expression -> relational-expression GE shift-expression .)
    CONDOP          reduce using rule 70 (relational-expression -> relational-expression GE shift-expression .)
    LOGOR           reduce using rule 70 (relational-expression -> relational-expression GE shift-expression .)
    COLON           reduce using rule 70 (relational-expression -> relational-expression GE shift-expression .)
    CLOSE_PAREN     reduce using rule 70 (relational-expression -> relational-expression GE shift-expression .)
    COMMA           reduce using rule 70 (relational-expression -> relational-expression GE shift-expression .)
    BLOCK_END       reduce using rule 70 (relational-expression -> relational-expression GE shift-expression .)
    DELIM           reduce using rule 70 (relational-expression -> relational-expression GE shift-expression .)
    CLOSE_BRACKET   reduce using rule 70 (relational-expression -> relational-expression GE shift-expression .)
    LSHIFT          shift and go to state 294
    RSHIFT          shift and go to state 293


state 358

    (67) relational-expression -> relational-expression LT shift-expression .
    (72) shift-expression -> shift-expression . LSHIFT additive-expression
    (73) shift-expression -> shift-expression . RSHIFT additive-expression

    LT              reduce using rule 67 (relational-expression -> relational-expression LT shift-expression .)
    GT              reduce using rule 67 (relational-expression -> relational-expression LT shift-expression .)
    LE              reduce using rule 67 (relational-expression -> relational-expression LT shift-expression .)
    GE              reduce using rule 67 (relational-expression -> relational-expression LT shift-expression .)
    EQ              reduce using rule 67 (relational-expression -> relational-expression LT shift-expression .)
    NE              reduce using rule 67 (relational-expression -> relational-expression LT shift-expression .)
    BITAND          reduce using rule 67 (relational-expression -> relational-expression LT shift-expression .)
    BITXOR          reduce using rule 67 (relational-expression -> relational-expression LT shift-expression .)
    BITOR           reduce using rule 67 (relational-expression -> relational-expression LT shift-expression .)
    LOGAND          reduce using rule 67 (relational-expression -> relational-expression LT shift-expression .)
    CONDOP          reduce using rule 67 (relational-expression -> relational-expression LT shift-expression .)
    LOGOR           reduce using rule 67 (relational-expression -> relational-expression LT shift-expression .)
    COLON           reduce using rule 67 (relational-expression -> relational-expression LT shift-expression .)
    CLOSE_PAREN     reduce using rule 67 (relational-expression -> relational-expression LT shift-expression .)
    COMMA           reduce using rule 67 (relational-expression -> relational-expression LT shift-expression .)
    BLOCK_END       reduce using rule 67 (relational-expression -> relational-expression LT shift-expression .)
    DELIM           reduce using rule 67 (relational-expression -> relational-expression LT shift-expression .)
    CLOSE_BRACKET   reduce using rule 67 (relational-expression -> relational-expression LT shift-expression .)
    LSHIFT          shift and go to state 294
    RSHIFT          shift and go to state 293


state 359

    (68) relational-expression -> relational-expression GT shift-expression .
    (72) shift-expression -> shift-expression . LSHIFT additive-expression
    (73) shift-expression -> shift-expression . RSHIFT additive-expression

    LT              reduce using rule 68 (relational-expression -> relational-expression GT shift-expression .)
    GT              reduce using rule 68 (relational-expression -> relational-expression GT shift-expression .)
    LE              reduce using rule 68 (relational-expression -> relational-expression GT shift-expression .)
    GE              reduce using rule 68 (relational-expression -> relational-expression GT shift-expression .)
    EQ              reduce using rule 68 (relational-expression -> relational-expression GT shift-expression .)
    NE              reduce using rule 68 (relational-expression -> relational-expression GT shift-expression .)
    BITAND          reduce using rule 68 (relational-expression -> relational-expression GT shift-expression .)
    BITXOR          reduce using rule 68 (relational-expression -> relational-expression GT shift-expression .)
    BITOR           reduce using rule 68 (relational-expression -> relational-expression GT shift-expression .)
    LOGAND          reduce using rule 68 (relational-expression -> relational-expression GT shift-expression .)
    CONDOP          reduce using rule 68 (relational-expression -> relational-expression GT shift-expression .)
    LOGOR           reduce using rule 68 (relational-expression -> relational-expression GT shift-expression .)
    COLON           reduce using rule 68 (relational-expression -> relational-expression GT shift-expression .)
    CLOSE_PAREN     reduce using rule 68 (relational-expression -> relational-expression GT shift-expression .)
    COMMA           reduce using rule 68 (relational-expression -> relational-expression GT shift-expression .)
    BLOCK_END       reduce using rule 68 (relational-expression -> relational-expression GT shift-expression .)
    DELIM           reduce using rule 68 (relational-expression -> relational-expression GT shift-expression .)
    CLOSE_BRACKET   reduce using rule 68 (relational-expression -> relational-expression GT shift-expression .)
    LSHIFT          shift and go to state 294
    RSHIFT          shift and go to state 293


state 360

    (73) shift-expression -> shift-expression RSHIFT additive-expression .
    (75) additive-expression -> additive-expression . PLUS multiplicative-expression
    (76) additive-expression -> additive-expression . MINUS multiplicative-expression

    LSHIFT          reduce using rule 73 (shift-expression -> shift-expression RSHIFT additive-expression .)
    RSHIFT          reduce using rule 73 (shift-expression -> shift-expression RSHIFT additive-expression .)
    LT              reduce using rule 73 (shift-expression -> shift-expression RSHIFT additive-expression .)
    GT              reduce using rule 73 (shift-expression -> shift-expression RSHIFT additive-expression .)
    LE              reduce using rule 73 (shift-expression -> shift-expression RSHIFT additive-expression .)
    GE              reduce using rule 73 (shift-expression -> shift-expression RSHIFT additive-expression .)
    EQ              reduce using rule 73 (shift-expression -> shift-expression RSHIFT additive-expression .)
    NE              reduce using rule 73 (shift-expression -> shift-expression RSHIFT additive-expression .)
    BITAND          reduce using rule 73 (shift-expression -> shift-expression RSHIFT additive-expression .)
    BITXOR          reduce using rule 73 (shift-expression -> shift-expression RSHIFT additive-expression .)
    BITOR           reduce using rule 73 (shift-expression -> shift-expression RSHIFT additive-expression .)
    LOGAND          reduce using rule 73 (shift-expression -> shift-expression RSHIFT additive-expression .)
    CONDOP          reduce using rule 73 (shift-expression -> shift-expression RSHIFT additive-expression .)
    LOGOR           reduce using rule 73 (shift-expression -> shift-expression RSHIFT additive-expression .)
    DELIM           reduce using rule 73 (shift-expression -> shift-expression RSHIFT additive-expression .)
    CLOSE_PAREN     reduce using rule 73 (shift-expression -> shift-expression RSHIFT additive-expression .)
    COMMA           reduce using rule 73 (shift-expression -> shift-expression RSHIFT additive-expression .)
    CLOSE_BRACKET   reduce using rule 73 (shift-expression -> shift-expression RSHIFT additive-expression .)
    BLOCK_END       reduce using rule 73 (shift-expression -> shift-expression RSHIFT additive-expression .)
    COLON           reduce using rule 73 (shift-expression -> shift-expression RSHIFT additive-expression .)
    PLUS            shift and go to state 298
    MINUS           shift and go to state 299


state 361

    (72) shift-expression -> shift-expression LSHIFT additive-expression .
    (75) additive-expression -> additive-expression . PLUS multiplicative-expression
    (76) additive-expression -> additive-expression . MINUS multiplicative-expression

    LSHIFT          reduce using rule 72 (shift-expression -> shift-expression LSHIFT additive-expression .)
    RSHIFT          reduce using rule 72 (shift-expression -> shift-expression LSHIFT additive-expression .)
    LT              reduce using rule 72 (shift-expression -> shift-expression LSHIFT additive-expression .)
    GT              reduce using rule 72 (shift-expression -> shift-expression LSHIFT additive-expression .)
    LE              reduce using rule 72 (shift-expression -> shift-expression LSHIFT additive-expression .)
    GE              reduce using rule 72 (shift-expression -> shift-expression LSHIFT additive-expression .)
    EQ              reduce using rule 72 (shift-expression -> shift-expression LSHIFT additive-expression .)
    NE              reduce using rule 72 (shift-expression -> shift-expression LSHIFT additive-expression .)
    BITAND          reduce using rule 72 (shift-expression -> shift-expression LSHIFT additive-expression .)
    BITXOR          reduce using rule 72 (shift-expression -> shift-expression LSHIFT additive-expression .)
    BITOR           reduce using rule 72 (shift-expression -> shift-expression LSHIFT additive-expression .)
    LOGAND          reduce using rule 72 (shift-expression -> shift-expression LSHIFT additive-expression .)
    CONDOP          reduce using rule 72 (shift-expression -> shift-expression LSHIFT additive-expression .)
    LOGOR           reduce using rule 72 (shift-expression -> shift-expression LSHIFT additive-expression .)
    DELIM           reduce using rule 72 (shift-expression -> shift-expression LSHIFT additive-expression .)
    CLOSE_PAREN     reduce using rule 72 (shift-expression -> shift-expression LSHIFT additive-expression .)
    COMMA           reduce using rule 72 (shift-expression -> shift-expression LSHIFT additive-expression .)
    CLOSE_BRACKET   reduce using rule 72 (shift-expression -> shift-expression LSHIFT additive-expression .)
    BLOCK_END       reduce using rule 72 (shift-expression -> shift-expression LSHIFT additive-expression .)
    COLON           reduce using rule 72 (shift-expression -> shift-expression LSHIFT additive-expression .)
    PLUS            shift and go to state 298
    MINUS           shift and go to state 299


state 362

    (79) multiplicative-expression -> multiplicative-expression DIV unary-expression .

    TIMES           reduce using rule 79 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    DIV             reduce using rule 79 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    MOD             reduce using rule 79 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    PLUS            reduce using rule 79 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    MINUS           reduce using rule 79 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    LSHIFT          reduce using rule 79 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    RSHIFT          reduce using rule 79 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    LT              reduce using rule 79 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    GT              reduce using rule 79 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    LE              reduce using rule 79 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    GE              reduce using rule 79 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    EQ              reduce using rule 79 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    NE              reduce using rule 79 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    BITAND          reduce using rule 79 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    BITXOR          reduce using rule 79 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    BITOR           reduce using rule 79 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    LOGAND          reduce using rule 79 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    CONDOP          reduce using rule 79 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    LOGOR           reduce using rule 79 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    DELIM           reduce using rule 79 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    COMMA           reduce using rule 79 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    CLOSE_PAREN     reduce using rule 79 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    CLOSE_BRACKET   reduce using rule 79 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    BLOCK_END       reduce using rule 79 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    COLON           reduce using rule 79 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)


state 363

    (80) multiplicative-expression -> multiplicative-expression MOD unary-expression .

    TIMES           reduce using rule 80 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    DIV             reduce using rule 80 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    MOD             reduce using rule 80 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    PLUS            reduce using rule 80 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    MINUS           reduce using rule 80 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    LSHIFT          reduce using rule 80 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    RSHIFT          reduce using rule 80 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    LT              reduce using rule 80 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    GT              reduce using rule 80 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    LE              reduce using rule 80 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    GE              reduce using rule 80 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    EQ              reduce using rule 80 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    NE              reduce using rule 80 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    BITAND          reduce using rule 80 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    BITXOR          reduce using rule 80 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    BITOR           reduce using rule 80 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    LOGAND          reduce using rule 80 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    CONDOP          reduce using rule 80 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    LOGOR           reduce using rule 80 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    DELIM           reduce using rule 80 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    COMMA           reduce using rule 80 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    CLOSE_PAREN     reduce using rule 80 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    CLOSE_BRACKET   reduce using rule 80 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    BLOCK_END       reduce using rule 80 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    COLON           reduce using rule 80 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)


state 364

    (78) multiplicative-expression -> multiplicative-expression TIMES unary-expression .

    TIMES           reduce using rule 78 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    DIV             reduce using rule 78 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    MOD             reduce using rule 78 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    PLUS            reduce using rule 78 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    MINUS           reduce using rule 78 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    LSHIFT          reduce using rule 78 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    RSHIFT          reduce using rule 78 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    LT              reduce using rule 78 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    GT              reduce using rule 78 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    LE              reduce using rule 78 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    GE              reduce using rule 78 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    EQ              reduce using rule 78 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    NE              reduce using rule 78 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    BITAND          reduce using rule 78 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    BITXOR          reduce using rule 78 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    BITOR           reduce using rule 78 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    LOGAND          reduce using rule 78 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    CONDOP          reduce using rule 78 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    LOGOR           reduce using rule 78 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    DELIM           reduce using rule 78 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    COMMA           reduce using rule 78 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    CLOSE_PAREN     reduce using rule 78 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    CLOSE_BRACKET   reduce using rule 78 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    BLOCK_END       reduce using rule 78 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    COLON           reduce using rule 78 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)


state 365

    (75) additive-expression -> additive-expression PLUS multiplicative-expression .
    (78) multiplicative-expression -> multiplicative-expression . TIMES unary-expression
    (79) multiplicative-expression -> multiplicative-expression . DIV unary-expression
    (80) multiplicative-expression -> multiplicative-expression . MOD unary-expression

    PLUS            reduce using rule 75 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    MINUS           reduce using rule 75 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    LSHIFT          reduce using rule 75 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    RSHIFT          reduce using rule 75 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    LT              reduce using rule 75 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    GT              reduce using rule 75 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    LE              reduce using rule 75 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    GE              reduce using rule 75 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    EQ              reduce using rule 75 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    NE              reduce using rule 75 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    BITAND          reduce using rule 75 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    BITXOR          reduce using rule 75 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    BITOR           reduce using rule 75 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    LOGAND          reduce using rule 75 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    CONDOP          reduce using rule 75 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    LOGOR           reduce using rule 75 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    DELIM           reduce using rule 75 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    CLOSE_PAREN     reduce using rule 75 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    COMMA           reduce using rule 75 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    CLOSE_BRACKET   reduce using rule 75 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    BLOCK_END       reduce using rule 75 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    COLON           reduce using rule 75 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    TIMES           shift and go to state 297
    DIV             shift and go to state 295
    MOD             shift and go to state 296


state 366

    (76) additive-expression -> additive-expression MINUS multiplicative-expression .
    (78) multiplicative-expression -> multiplicative-expression . TIMES unary-expression
    (79) multiplicative-expression -> multiplicative-expression . DIV unary-expression
    (80) multiplicative-expression -> multiplicative-expression . MOD unary-expression

    PLUS            reduce using rule 76 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    MINUS           reduce using rule 76 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    LSHIFT          reduce using rule 76 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    RSHIFT          reduce using rule 76 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    LT              reduce using rule 76 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    GT              reduce using rule 76 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    LE              reduce using rule 76 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    GE              reduce using rule 76 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    EQ              reduce using rule 76 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    NE              reduce using rule 76 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    BITAND          reduce using rule 76 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    BITXOR          reduce using rule 76 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    BITOR           reduce using rule 76 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    LOGAND          reduce using rule 76 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    CONDOP          reduce using rule 76 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    LOGOR           reduce using rule 76 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    DELIM           reduce using rule 76 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    CLOSE_PAREN     reduce using rule 76 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    COMMA           reduce using rule 76 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    CLOSE_BRACKET   reduce using rule 76 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    BLOCK_END       reduce using rule 76 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    COLON           reduce using rule 76 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    TIMES           shift and go to state 297
    DIV             shift and go to state 295
    MOD             shift and go to state 296


state 367

    (54) conditional-or-expression -> conditional-or-expression LOGOR conditional-and-expression .
    (56) conditional-and-expression -> conditional-and-expression . LOGAND inclusive-or-expression

    CONDOP          reduce using rule 54 (conditional-or-expression -> conditional-or-expression LOGOR conditional-and-expression .)
    LOGOR           reduce using rule 54 (conditional-or-expression -> conditional-or-expression LOGOR conditional-and-expression .)
    COMMA           reduce using rule 54 (conditional-or-expression -> conditional-or-expression LOGOR conditional-and-expression .)
    CLOSE_PAREN     reduce using rule 54 (conditional-or-expression -> conditional-or-expression LOGOR conditional-and-expression .)
    COLON           reduce using rule 54 (conditional-or-expression -> conditional-or-expression LOGOR conditional-and-expression .)
    DELIM           reduce using rule 54 (conditional-or-expression -> conditional-or-expression LOGOR conditional-and-expression .)
    CLOSE_BRACKET   reduce using rule 54 (conditional-or-expression -> conditional-or-expression LOGOR conditional-and-expression .)
    BLOCK_END       reduce using rule 54 (conditional-or-expression -> conditional-or-expression LOGOR conditional-and-expression .)
    LOGAND          shift and go to state 285


state 368

    (52) conditional-expression -> conditional-or-expression CONDOP expression . COLON expression

    COLON           shift and go to state 391


state 369

    (238) statement-expression-list -> statement-expression-list COMMA . statement-expression
    (197) statement-expression -> . invocation-expression
    (198) statement-expression -> . object-creation-expression
    (199) statement-expression -> . assignment
    (200) statement-expression -> . post-increment-expression
    (201) statement-expression -> . post-decrement-expression
    (202) statement-expression -> . pre-increment-expression
    (203) statement-expression -> . pre-decrement-expression
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (133) assignment -> . primary-expression assignment-operator expression
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET

    NEW             shift and go to state 120
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88

    this-access                    shift and go to state 77
    post-increment-expression      shift and go to state 83
    member-access                  shift and go to state 79
    primary-no-array-creation-expression shift and go to state 82
    element-access                 shift and go to state 101
    literal                        shift and go to state 128
    statement-expression           shift and go to state 392
    base-access                    shift and go to state 126
    post-decrement-expression      shift and go to state 132
    array-creation-expression      shift and go to state 144
    assignment                     shift and go to state 145
    object-creation-expression     shift and go to state 146
    pre-increment-expression       shift and go to state 147
    pre-decrement-expression       shift and go to state 108
    primary-expression             shift and go to state 149
    invocation-expression          shift and go to state 95
    parenthesized-expression       shift and go to state 96

state 370

    (226) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM . for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement
    (231) for-condition-opt -> . for-condition
    (232) for-condition-opt -> . empty
    (233) for-condition -> . boolean-expression
    (269) empty -> .
    (208) boolean-expression -> . expression
    (49) expression -> . conditional-expression
    (50) expression -> . assignment
    (51) conditional-expression -> . conditional-or-expression
    (52) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (133) assignment -> . primary-expression assignment-operator expression
    (53) conditional-or-expression -> . conditional-and-expression
    (54) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (55) conditional-and-expression -> . inclusive-or-expression
    (56) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (57) inclusive-or-expression -> . exclusive-or-expression
    (58) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (59) exclusive-or-expression -> . and-expression
    (60) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (61) and-expression -> . equality-expression
    (62) and-expression -> . and-expression BITAND equality-expression
    (63) equality-expression -> . relational-expression
    (64) equality-expression -> . equality-expression EQ relational-expression
    (65) equality-expression -> . equality-expression NE relational-expression
    (66) relational-expression -> . shift-expression
    (67) relational-expression -> . relational-expression LT shift-expression
    (68) relational-expression -> . relational-expression GT shift-expression
    (69) relational-expression -> . relational-expression LE shift-expression
    (70) relational-expression -> . relational-expression GE shift-expression
    (71) shift-expression -> . additive-expression
    (72) shift-expression -> . shift-expression LSHIFT additive-expression
    (73) shift-expression -> . shift-expression RSHIFT additive-expression
    (74) additive-expression -> . multiplicative-expression
    (75) additive-expression -> . additive-expression PLUS multiplicative-expression
    (76) additive-expression -> . additive-expression MINUS multiplicative-expression
    (77) multiplicative-expression -> . unary-expression
    (78) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (79) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (80) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (81) unary-expression -> . primary-expression
    (82) unary-expression -> . PLUS unary-expression
    (83) unary-expression -> . MINUS unary-expression
    (84) unary-expression -> . BITNOT unary-expression
    (85) unary-expression -> . BITCOMP unary-expression
    (86) unary-expression -> . TIMES unary-expression
    (87) unary-expression -> . pre-increment-expression
    (88) unary-expression -> . pre-decrement-expression
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression

    DELIM           reduce using rule 269 (empty -> .)
    NEW             shift and go to state 185
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88
    PLUS            shift and go to state 190
    MINUS           shift and go to state 187
    BITNOT          shift and go to state 197
    BITCOMP         shift and go to state 186
    TIMES           shift and go to state 184
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117

    this-access                    shift and go to state 77
    unary-expression               shift and go to state 199
    exclusive-or-expression        shift and go to state 183
    member-access                  shift and go to state 79
    relational-expression          shift and go to state 203
    for-condition                  shift and go to state 396
    primary-no-array-creation-expression shift and go to state 82
    boolean-expression             shift and go to state 393
    equality-expression            shift and go to state 189
    post-increment-expression      shift and go to state 182
    element-access                 shift and go to state 101
    literal                        shift and go to state 128
    conditional-expression         shift and go to state 191
    assignment                     shift and go to state 196
    post-decrement-expression      shift and go to state 193
    empty                          shift and go to state 395
    base-access                    shift and go to state 126
    array-creation-expression      shift and go to state 144
    conditional-and-expression     shift and go to state 192
    object-creation-expression     shift and go to state 198
    pre-increment-expression       shift and go to state 202
    shift-expression               shift and go to state 204
    and-expression                 shift and go to state 201
    pre-decrement-expression       shift and go to state 205
    for-condition-opt              shift and go to state 394
    conditional-or-expression      shift and go to state 211
    inclusive-or-expression        shift and go to state 188
    additive-expression            shift and go to state 208
    multiplicative-expression      shift and go to state 207
    primary-expression             shift and go to state 209
    invocation-expression          shift and go to state 210
    expression                     shift and go to state 310
    parenthesized-expression       shift and go to state 96

state 371

    (224) while-statement -> WHILE OPEN_PAREN boolean-expression CLOSE_PAREN . embedded-statement
    (189) embedded-statement -> . block
    (190) embedded-statement -> . empty-statement
    (191) embedded-statement -> . expression-statement
    (192) embedded-statement -> . selection-statement
    (193) embedded-statement -> . iteration-statement
    (194) embedded-statement -> . jump-statement
    (170) block -> . BLOCK_BEGIN statement-list-opt BLOCK_END
    (195) empty-statement -> . DELIM
    (196) expression-statement -> . statement-expression DELIM
    (204) selection-statement -> . if-statement
    (205) selection-statement -> . switch-statement
    (220) iteration-statement -> . while-statement
    (221) iteration-statement -> . for-statement
    (222) iteration-statement -> . foreach-statement
    (223) iteration-statement -> . do-statement
    (240) jump-statement -> . break-statement
    (241) jump-statement -> . continue-statement
    (242) jump-statement -> . goto-statement
    (243) jump-statement -> . return-statement
    (197) statement-expression -> . invocation-expression
    (198) statement-expression -> . object-creation-expression
    (199) statement-expression -> . assignment
    (200) statement-expression -> . post-increment-expression
    (201) statement-expression -> . post-decrement-expression
    (202) statement-expression -> . pre-increment-expression
    (203) statement-expression -> . pre-decrement-expression
    (206) if-statement -> . IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement
    (207) if-statement -> . IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement
    (209) switch-statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block
    (224) while-statement -> . WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement
    (226) for-statement -> . FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement
    (239) foreach-statement -> . FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement
    (225) do-statement -> . DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM
    (244) break-statement -> . BREAK DELIM
    (245) continue-statement -> . CONTINUE DELIM
    (246) goto-statement -> . GOTO IDENTIFIER DELIM
    (247) return-statement -> . RETURN expression-opt DELIM
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (133) assignment -> . primary-expression assignment-operator expression
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET

    BLOCK_BEGIN     shift and go to state 55
    DELIM           shift and go to state 115
    IF              shift and go to state 148
    SWITCH          shift and go to state 124
    WHILE           shift and go to state 118
    FOR             shift and go to state 105
    FOREACH         shift and go to state 90
    DO              shift and go to state 139
    BREAK           shift and go to state 136
    CONTINUE        shift and go to state 113
    GOTO            shift and go to state 87
    RETURN          shift and go to state 97
    NEW             shift and go to state 120
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88

    this-access                    shift and go to state 77
    member-access                  shift and go to state 79
    selection-statement            shift and go to state 116
    parenthesized-expression       shift and go to state 96
    empty-statement                shift and go to state 119
    return-statement               shift and go to state 98
    expression-statement           shift and go to state 81
    pre-decrement-expression       shift and go to state 108
    primary-no-array-creation-expression shift and go to state 82
    foreach-statement              shift and go to state 100
    break-statement                shift and go to state 121
    post-increment-expression      shift and go to state 83
    element-access                 shift and go to state 101
    statement-expression           shift and go to state 84
    base-access                    shift and go to state 126
    assignment                     shift and go to state 145
    for-statement                  shift and go to state 86
    do-statement                   shift and go to state 104
    array-creation-expression      shift and go to state 144
    continue-statement             shift and go to state 106
    literal                        shift and go to state 128
    invocation-expression          shift and go to state 95
    object-creation-expression     shift and go to state 146
    post-decrement-expression      shift and go to state 132
    switch-statement               shift and go to state 91
    pre-increment-expression       shift and go to state 147
    embedded-statement             shift and go to state 397
    jump-statement                 shift and go to state 93
    iteration-statement            shift and go to state 135
    goto-statement                 shift and go to state 111
    if-statement                   shift and go to state 112
    primary-expression             shift and go to state 149
    while-statement                shift and go to state 138
    block                          shift and go to state 114

state 372

    (91) array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list . CLOSE_BRACKET array-initializer-opt
    (95) expression-list -> expression-list . COMMA expression

    CLOSE_BRACKET   shift and go to state 398
    COMMA           shift and go to state 347


state 373

    (130) object-creation-expression -> NEW type OPEN_PAREN argument-list-opt . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 399


state 374

    (209) switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN . switch-block
    (210) switch-block -> . BLOCK_BEGIN switch-sections-opt BLOCK_END

    BLOCK_BEGIN     shift and go to state 400

    switch-block                   shift and go to state 401

state 375

    (183) local-variable-declarators -> local-variable-declarators COMMA local-variable-declarator .

    COMMA           reduce using rule 183 (local-variable-declarators -> local-variable-declarators COMMA local-variable-declarator .)
    DELIM           reduce using rule 183 (local-variable-declarators -> local-variable-declarators COMMA local-variable-declarator .)


state 376

    (187) local-variable-initializer -> array-initializer .

    COMMA           reduce using rule 187 (local-variable-initializer -> array-initializer .)
    DELIM           reduce using rule 187 (local-variable-initializer -> array-initializer .)


state 377

    (186) local-variable-initializer -> expression .

    COMMA           reduce using rule 186 (local-variable-initializer -> expression .)
    DELIM           reduce using rule 186 (local-variable-initializer -> expression .)


state 378

    (185) local-variable-declarator -> IDENTIFIER ASSIGN local-variable-initializer .

    COMMA           reduce using rule 185 (local-variable-declarator -> IDENTIFIER ASSIGN local-variable-initializer .)
    DELIM           reduce using rule 185 (local-variable-declarator -> IDENTIFIER ASSIGN local-variable-initializer .)


state 379

    (225) do-statement -> DO embedded-statement WHILE OPEN_PAREN . boolean-expression CLOSE_PAREN DELIM
    (208) boolean-expression -> . expression
    (49) expression -> . conditional-expression
    (50) expression -> . assignment
    (51) conditional-expression -> . conditional-or-expression
    (52) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (133) assignment -> . primary-expression assignment-operator expression
    (53) conditional-or-expression -> . conditional-and-expression
    (54) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (55) conditional-and-expression -> . inclusive-or-expression
    (56) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (57) inclusive-or-expression -> . exclusive-or-expression
    (58) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (59) exclusive-or-expression -> . and-expression
    (60) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (61) and-expression -> . equality-expression
    (62) and-expression -> . and-expression BITAND equality-expression
    (63) equality-expression -> . relational-expression
    (64) equality-expression -> . equality-expression EQ relational-expression
    (65) equality-expression -> . equality-expression NE relational-expression
    (66) relational-expression -> . shift-expression
    (67) relational-expression -> . relational-expression LT shift-expression
    (68) relational-expression -> . relational-expression GT shift-expression
    (69) relational-expression -> . relational-expression LE shift-expression
    (70) relational-expression -> . relational-expression GE shift-expression
    (71) shift-expression -> . additive-expression
    (72) shift-expression -> . shift-expression LSHIFT additive-expression
    (73) shift-expression -> . shift-expression RSHIFT additive-expression
    (74) additive-expression -> . multiplicative-expression
    (75) additive-expression -> . additive-expression PLUS multiplicative-expression
    (76) additive-expression -> . additive-expression MINUS multiplicative-expression
    (77) multiplicative-expression -> . unary-expression
    (78) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (79) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (80) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (81) unary-expression -> . primary-expression
    (82) unary-expression -> . PLUS unary-expression
    (83) unary-expression -> . MINUS unary-expression
    (84) unary-expression -> . BITNOT unary-expression
    (85) unary-expression -> . BITCOMP unary-expression
    (86) unary-expression -> . TIMES unary-expression
    (87) unary-expression -> . pre-increment-expression
    (88) unary-expression -> . pre-decrement-expression
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression

    NEW             shift and go to state 185
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88
    PLUS            shift and go to state 190
    MINUS           shift and go to state 187
    BITNOT          shift and go to state 197
    BITCOMP         shift and go to state 186
    TIMES           shift and go to state 184
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117

    this-access                    shift and go to state 77
    unary-expression               shift and go to state 199
    exclusive-or-expression        shift and go to state 183
    member-access                  shift and go to state 79
    relational-expression          shift and go to state 203
    additive-expression            shift and go to state 208
    primary-no-array-creation-expression shift and go to state 82
    boolean-expression             shift and go to state 402
    inclusive-or-expression        shift and go to state 188
    equality-expression            shift and go to state 189
    post-increment-expression      shift and go to state 182
    element-access                 shift and go to state 101
    literal                        shift and go to state 128
    base-access                    shift and go to state 126
    conditional-and-expression     shift and go to state 192
    post-decrement-expression      shift and go to state 193
    conditional-expression         shift and go to state 191
    array-creation-expression      shift and go to state 144
    assignment                     shift and go to state 196
    object-creation-expression     shift and go to state 198
    pre-increment-expression       shift and go to state 202
    shift-expression               shift and go to state 204
    and-expression                 shift and go to state 201
    pre-decrement-expression       shift and go to state 205
    multiplicative-expression      shift and go to state 207
    conditional-or-expression      shift and go to state 211
    primary-expression             shift and go to state 209
    invocation-expression          shift and go to state 210
    expression                     shift and go to state 310
    parenthesized-expression       shift and go to state 96

state 380

    (206) if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN . embedded-statement
    (207) if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN . embedded-statement ELSE embedded-statement
    (189) embedded-statement -> . block
    (190) embedded-statement -> . empty-statement
    (191) embedded-statement -> . expression-statement
    (192) embedded-statement -> . selection-statement
    (193) embedded-statement -> . iteration-statement
    (194) embedded-statement -> . jump-statement
    (170) block -> . BLOCK_BEGIN statement-list-opt BLOCK_END
    (195) empty-statement -> . DELIM
    (196) expression-statement -> . statement-expression DELIM
    (204) selection-statement -> . if-statement
    (205) selection-statement -> . switch-statement
    (220) iteration-statement -> . while-statement
    (221) iteration-statement -> . for-statement
    (222) iteration-statement -> . foreach-statement
    (223) iteration-statement -> . do-statement
    (240) jump-statement -> . break-statement
    (241) jump-statement -> . continue-statement
    (242) jump-statement -> . goto-statement
    (243) jump-statement -> . return-statement
    (197) statement-expression -> . invocation-expression
    (198) statement-expression -> . object-creation-expression
    (199) statement-expression -> . assignment
    (200) statement-expression -> . post-increment-expression
    (201) statement-expression -> . post-decrement-expression
    (202) statement-expression -> . pre-increment-expression
    (203) statement-expression -> . pre-decrement-expression
    (206) if-statement -> . IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement
    (207) if-statement -> . IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement
    (209) switch-statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block
    (224) while-statement -> . WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement
    (226) for-statement -> . FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement
    (239) foreach-statement -> . FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement
    (225) do-statement -> . DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM
    (244) break-statement -> . BREAK DELIM
    (245) continue-statement -> . CONTINUE DELIM
    (246) goto-statement -> . GOTO IDENTIFIER DELIM
    (247) return-statement -> . RETURN expression-opt DELIM
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (133) assignment -> . primary-expression assignment-operator expression
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET

    BLOCK_BEGIN     shift and go to state 55
    DELIM           shift and go to state 115
    IF              shift and go to state 148
    SWITCH          shift and go to state 124
    WHILE           shift and go to state 118
    FOR             shift and go to state 105
    FOREACH         shift and go to state 90
    DO              shift and go to state 139
    BREAK           shift and go to state 136
    CONTINUE        shift and go to state 113
    GOTO            shift and go to state 87
    RETURN          shift and go to state 97
    NEW             shift and go to state 120
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88

    this-access                    shift and go to state 77
    member-access                  shift and go to state 79
    selection-statement            shift and go to state 116
    parenthesized-expression       shift and go to state 96
    empty-statement                shift and go to state 119
    return-statement               shift and go to state 98
    expression-statement           shift and go to state 81
    pre-decrement-expression       shift and go to state 108
    primary-no-array-creation-expression shift and go to state 82
    foreach-statement              shift and go to state 100
    break-statement                shift and go to state 121
    post-increment-expression      shift and go to state 83
    element-access                 shift and go to state 101
    statement-expression           shift and go to state 84
    base-access                    shift and go to state 126
    assignment                     shift and go to state 145
    for-statement                  shift and go to state 86
    do-statement                   shift and go to state 104
    array-creation-expression      shift and go to state 144
    continue-statement             shift and go to state 106
    literal                        shift and go to state 128
    invocation-expression          shift and go to state 95
    object-creation-expression     shift and go to state 146
    post-decrement-expression      shift and go to state 132
    switch-statement               shift and go to state 91
    pre-increment-expression       shift and go to state 147
    embedded-statement             shift and go to state 403
    jump-statement                 shift and go to state 93
    iteration-statement            shift and go to state 135
    goto-statement                 shift and go to state 111
    if-statement                   shift and go to state 112
    primary-expression             shift and go to state 149
    while-statement                shift and go to state 138
    block                          shift and go to state 114

state 381

    (116) invocation-expression -> primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN .

    OPEN_BRACKET    reduce using rule 116 (invocation-expression -> primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    DOT             reduce using rule 116 (invocation-expression -> primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    OPEN_PAREN      reduce using rule 116 (invocation-expression -> primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    INCRE           reduce using rule 116 (invocation-expression -> primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    DECRE           reduce using rule 116 (invocation-expression -> primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    ASSIGN          reduce using rule 116 (invocation-expression -> primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    PLUSEQUAL       reduce using rule 116 (invocation-expression -> primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    MINUSEQUAL      reduce using rule 116 (invocation-expression -> primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    TIMESEQUAL      reduce using rule 116 (invocation-expression -> primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    DIVEQUAL        reduce using rule 116 (invocation-expression -> primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    MODEQUAL        reduce using rule 116 (invocation-expression -> primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITANDEQUAL     reduce using rule 116 (invocation-expression -> primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITOREQUAL      reduce using rule 116 (invocation-expression -> primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITXOREQUAL     reduce using rule 116 (invocation-expression -> primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LSHIFTEQUAL     reduce using rule 116 (invocation-expression -> primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    RSHIFTEQUAL     reduce using rule 116 (invocation-expression -> primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    TIMES           reduce using rule 116 (invocation-expression -> primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    DIV             reduce using rule 116 (invocation-expression -> primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    MOD             reduce using rule 116 (invocation-expression -> primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    PLUS            reduce using rule 116 (invocation-expression -> primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    MINUS           reduce using rule 116 (invocation-expression -> primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LSHIFT          reduce using rule 116 (invocation-expression -> primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    RSHIFT          reduce using rule 116 (invocation-expression -> primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LT              reduce using rule 116 (invocation-expression -> primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    GT              reduce using rule 116 (invocation-expression -> primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LE              reduce using rule 116 (invocation-expression -> primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    GE              reduce using rule 116 (invocation-expression -> primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    EQ              reduce using rule 116 (invocation-expression -> primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    NE              reduce using rule 116 (invocation-expression -> primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITAND          reduce using rule 116 (invocation-expression -> primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITXOR          reduce using rule 116 (invocation-expression -> primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITOR           reduce using rule 116 (invocation-expression -> primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LOGAND          reduce using rule 116 (invocation-expression -> primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    CONDOP          reduce using rule 116 (invocation-expression -> primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LOGOR           reduce using rule 116 (invocation-expression -> primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    COMMA           reduce using rule 116 (invocation-expression -> primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 116 (invocation-expression -> primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BLOCK_END       reduce using rule 116 (invocation-expression -> primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    DELIM           reduce using rule 116 (invocation-expression -> primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    CLOSE_BRACKET   reduce using rule 116 (invocation-expression -> primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    COLON           reduce using rule 116 (invocation-expression -> primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN .)


state 382

    (120) argument-list -> argument-list COMMA . argument
    (121) argument -> . expression
    (122) argument -> . OUT variable-reference
    (49) expression -> . conditional-expression
    (50) expression -> . assignment
    (51) conditional-expression -> . conditional-or-expression
    (52) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (133) assignment -> . primary-expression assignment-operator expression
    (53) conditional-or-expression -> . conditional-and-expression
    (54) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (55) conditional-and-expression -> . inclusive-or-expression
    (56) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (57) inclusive-or-expression -> . exclusive-or-expression
    (58) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (59) exclusive-or-expression -> . and-expression
    (60) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (61) and-expression -> . equality-expression
    (62) and-expression -> . and-expression BITAND equality-expression
    (63) equality-expression -> . relational-expression
    (64) equality-expression -> . equality-expression EQ relational-expression
    (65) equality-expression -> . equality-expression NE relational-expression
    (66) relational-expression -> . shift-expression
    (67) relational-expression -> . relational-expression LT shift-expression
    (68) relational-expression -> . relational-expression GT shift-expression
    (69) relational-expression -> . relational-expression LE shift-expression
    (70) relational-expression -> . relational-expression GE shift-expression
    (71) shift-expression -> . additive-expression
    (72) shift-expression -> . shift-expression LSHIFT additive-expression
    (73) shift-expression -> . shift-expression RSHIFT additive-expression
    (74) additive-expression -> . multiplicative-expression
    (75) additive-expression -> . additive-expression PLUS multiplicative-expression
    (76) additive-expression -> . additive-expression MINUS multiplicative-expression
    (77) multiplicative-expression -> . unary-expression
    (78) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (79) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (80) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (81) unary-expression -> . primary-expression
    (82) unary-expression -> . PLUS unary-expression
    (83) unary-expression -> . MINUS unary-expression
    (84) unary-expression -> . BITNOT unary-expression
    (85) unary-expression -> . BITCOMP unary-expression
    (86) unary-expression -> . TIMES unary-expression
    (87) unary-expression -> . pre-increment-expression
    (88) unary-expression -> . pre-decrement-expression
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression

    OUT             shift and go to state 326
    NEW             shift and go to state 185
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88
    PLUS            shift and go to state 190
    MINUS           shift and go to state 187
    BITNOT          shift and go to state 197
    BITCOMP         shift and go to state 186
    TIMES           shift and go to state 184
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117

    this-access                    shift and go to state 77
    unary-expression               shift and go to state 199
    exclusive-or-expression        shift and go to state 183
    member-access                  shift and go to state 79
    argument                       shift and go to state 404
    relational-expression          shift and go to state 203
    additive-expression            shift and go to state 208
    primary-no-array-creation-expression shift and go to state 82
    inclusive-or-expression        shift and go to state 188
    equality-expression            shift and go to state 189
    post-increment-expression      shift and go to state 182
    element-access                 shift and go to state 101
    literal                        shift and go to state 128
    conditional-expression         shift and go to state 191
    assignment                     shift and go to state 196
    post-decrement-expression      shift and go to state 193
    base-access                    shift and go to state 126
    array-creation-expression      shift and go to state 144
    conditional-and-expression     shift and go to state 192
    object-creation-expression     shift and go to state 198
    pre-increment-expression       shift and go to state 202
    shift-expression               shift and go to state 204
    and-expression                 shift and go to state 201
    pre-decrement-expression       shift and go to state 205
    multiplicative-expression      shift and go to state 207
    expression                     shift and go to state 324
    primary-expression             shift and go to state 209
    invocation-expression          shift and go to state 210
    conditional-or-expression      shift and go to state 211
    parenthesized-expression       shift and go to state 96

state 383

    (123) variable-reference -> expression .

    COMMA           reduce using rule 123 (variable-reference -> expression .)
    CLOSE_PAREN     reduce using rule 123 (variable-reference -> expression .)


state 384

    (122) argument -> OUT variable-reference .

    COMMA           reduce using rule 122 (argument -> OUT variable-reference .)
    CLOSE_PAREN     reduce using rule 122 (argument -> OUT variable-reference .)


state 385

    (100) variable-initializer-list -> variable-initializer-list COMMA . variable-initializer
    (101) variable-initializer -> . expression
    (102) variable-initializer -> . array-initializer
    (49) expression -> . conditional-expression
    (50) expression -> . assignment
    (96) array-initializer -> . BLOCK_BEGIN variable-initializer-list-opt BLOCK_END
    (51) conditional-expression -> . conditional-or-expression
    (52) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (133) assignment -> . primary-expression assignment-operator expression
    (53) conditional-or-expression -> . conditional-and-expression
    (54) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (55) conditional-and-expression -> . inclusive-or-expression
    (56) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (57) inclusive-or-expression -> . exclusive-or-expression
    (58) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (59) exclusive-or-expression -> . and-expression
    (60) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (61) and-expression -> . equality-expression
    (62) and-expression -> . and-expression BITAND equality-expression
    (63) equality-expression -> . relational-expression
    (64) equality-expression -> . equality-expression EQ relational-expression
    (65) equality-expression -> . equality-expression NE relational-expression
    (66) relational-expression -> . shift-expression
    (67) relational-expression -> . relational-expression LT shift-expression
    (68) relational-expression -> . relational-expression GT shift-expression
    (69) relational-expression -> . relational-expression LE shift-expression
    (70) relational-expression -> . relational-expression GE shift-expression
    (71) shift-expression -> . additive-expression
    (72) shift-expression -> . shift-expression LSHIFT additive-expression
    (73) shift-expression -> . shift-expression RSHIFT additive-expression
    (74) additive-expression -> . multiplicative-expression
    (75) additive-expression -> . additive-expression PLUS multiplicative-expression
    (76) additive-expression -> . additive-expression MINUS multiplicative-expression
    (77) multiplicative-expression -> . unary-expression
    (78) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (79) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (80) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (81) unary-expression -> . primary-expression
    (82) unary-expression -> . PLUS unary-expression
    (83) unary-expression -> . MINUS unary-expression
    (84) unary-expression -> . BITNOT unary-expression
    (85) unary-expression -> . BITCOMP unary-expression
    (86) unary-expression -> . TIMES unary-expression
    (87) unary-expression -> . pre-increment-expression
    (88) unary-expression -> . pre-decrement-expression
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression

    BLOCK_BEGIN     shift and go to state 263
    NEW             shift and go to state 185
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88
    PLUS            shift and go to state 190
    MINUS           shift and go to state 187
    BITNOT          shift and go to state 197
    BITCOMP         shift and go to state 186
    TIMES           shift and go to state 184
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117

    this-access                    shift and go to state 77
    unary-expression               shift and go to state 199
    exclusive-or-expression        shift and go to state 183
    member-access                  shift and go to state 79
    relational-expression          shift and go to state 203
    additive-expression            shift and go to state 208
    primary-no-array-creation-expression shift and go to state 82
    array-initializer              shift and go to state 260
    inclusive-or-expression        shift and go to state 188
    equality-expression            shift and go to state 189
    post-increment-expression      shift and go to state 182
    element-access                 shift and go to state 101
    literal                        shift and go to state 128
    conditional-expression         shift and go to state 191
    conditional-and-expression     shift and go to state 192
    post-decrement-expression      shift and go to state 193
    base-access                    shift and go to state 126
    array-creation-expression      shift and go to state 144
    assignment                     shift and go to state 196
    variable-initializer           shift and go to state 405
    object-creation-expression     shift and go to state 198
    pre-increment-expression       shift and go to state 202
    shift-expression               shift and go to state 204
    and-expression                 shift and go to state 201
    pre-decrement-expression       shift and go to state 205
    multiplicative-expression      shift and go to state 207
    expression                     shift and go to state 262
    primary-expression             shift and go to state 209
    invocation-expression          shift and go to state 210
    conditional-or-expression      shift and go to state 211
    parenthesized-expression       shift and go to state 96

state 386

    (96) array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .

    DELIM           reduce using rule 96 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    COMMA           reduce using rule 96 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    BLOCK_END       reduce using rule 96 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    OPEN_PAREN      reduce using rule 96 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    INCRE           reduce using rule 96 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    DECRE           reduce using rule 96 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    DOT             reduce using rule 96 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    ASSIGN          reduce using rule 96 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    PLUSEQUAL       reduce using rule 96 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    MINUSEQUAL      reduce using rule 96 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    TIMESEQUAL      reduce using rule 96 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    DIVEQUAL        reduce using rule 96 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    MODEQUAL        reduce using rule 96 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    BITANDEQUAL     reduce using rule 96 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    BITOREQUAL      reduce using rule 96 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    BITXOREQUAL     reduce using rule 96 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    LSHIFTEQUAL     reduce using rule 96 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    RSHIFTEQUAL     reduce using rule 96 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    TIMES           reduce using rule 96 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    DIV             reduce using rule 96 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    MOD             reduce using rule 96 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    PLUS            reduce using rule 96 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    MINUS           reduce using rule 96 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    LSHIFT          reduce using rule 96 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    RSHIFT          reduce using rule 96 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    LT              reduce using rule 96 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    GT              reduce using rule 96 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    LE              reduce using rule 96 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    GE              reduce using rule 96 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    EQ              reduce using rule 96 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    NE              reduce using rule 96 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    BITAND          reduce using rule 96 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    BITXOR          reduce using rule 96 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    BITOR           reduce using rule 96 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    LOGAND          reduce using rule 96 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    CONDOP          reduce using rule 96 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    LOGOR           reduce using rule 96 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    CLOSE_PAREN     reduce using rule 96 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    CLOSE_BRACKET   reduce using rule 96 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    COLON           reduce using rule 96 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)


state 387

    (155) method-header -> modifier VOID member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .

    DELIM           reduce using rule 155 (method-header -> modifier VOID member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)
    BLOCK_BEGIN     reduce using rule 155 (method-header -> modifier VOID member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)


state 388

    (154) method-header -> modifier type member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .

    DELIM           reduce using rule 154 (method-header -> modifier type member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)
    BLOCK_BEGIN     reduce using rule 154 (method-header -> modifier type member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)


state 389

    (95) expression-list -> expression-list COMMA expression .

    CLOSE_BRACKET   reduce using rule 95 (expression-list -> expression-list COMMA expression .)
    COMMA           reduce using rule 95 (expression-list -> expression-list COMMA expression .)


state 390

    (239) foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN . expression CLOSE_PAREN embedded-statement
    (49) expression -> . conditional-expression
    (50) expression -> . assignment
    (51) conditional-expression -> . conditional-or-expression
    (52) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (133) assignment -> . primary-expression assignment-operator expression
    (53) conditional-or-expression -> . conditional-and-expression
    (54) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (55) conditional-and-expression -> . inclusive-or-expression
    (56) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (57) inclusive-or-expression -> . exclusive-or-expression
    (58) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (59) exclusive-or-expression -> . and-expression
    (60) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (61) and-expression -> . equality-expression
    (62) and-expression -> . and-expression BITAND equality-expression
    (63) equality-expression -> . relational-expression
    (64) equality-expression -> . equality-expression EQ relational-expression
    (65) equality-expression -> . equality-expression NE relational-expression
    (66) relational-expression -> . shift-expression
    (67) relational-expression -> . relational-expression LT shift-expression
    (68) relational-expression -> . relational-expression GT shift-expression
    (69) relational-expression -> . relational-expression LE shift-expression
    (70) relational-expression -> . relational-expression GE shift-expression
    (71) shift-expression -> . additive-expression
    (72) shift-expression -> . shift-expression LSHIFT additive-expression
    (73) shift-expression -> . shift-expression RSHIFT additive-expression
    (74) additive-expression -> . multiplicative-expression
    (75) additive-expression -> . additive-expression PLUS multiplicative-expression
    (76) additive-expression -> . additive-expression MINUS multiplicative-expression
    (77) multiplicative-expression -> . unary-expression
    (78) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (79) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (80) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (81) unary-expression -> . primary-expression
    (82) unary-expression -> . PLUS unary-expression
    (83) unary-expression -> . MINUS unary-expression
    (84) unary-expression -> . BITNOT unary-expression
    (85) unary-expression -> . BITCOMP unary-expression
    (86) unary-expression -> . TIMES unary-expression
    (87) unary-expression -> . pre-increment-expression
    (88) unary-expression -> . pre-decrement-expression
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression

    NEW             shift and go to state 185
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88
    PLUS            shift and go to state 190
    MINUS           shift and go to state 187
    BITNOT          shift and go to state 197
    BITCOMP         shift and go to state 186
    TIMES           shift and go to state 184
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117

    this-access                    shift and go to state 77
    unary-expression               shift and go to state 199
    exclusive-or-expression        shift and go to state 183
    member-access                  shift and go to state 79
    relational-expression          shift and go to state 203
    additive-expression            shift and go to state 208
    primary-no-array-creation-expression shift and go to state 82
    inclusive-or-expression        shift and go to state 188
    equality-expression            shift and go to state 189
    post-increment-expression      shift and go to state 182
    element-access                 shift and go to state 101
    literal                        shift and go to state 128
    conditional-expression         shift and go to state 191
    conditional-and-expression     shift and go to state 192
    post-decrement-expression      shift and go to state 193
    base-access                    shift and go to state 126
    array-creation-expression      shift and go to state 144
    assignment                     shift and go to state 196
    object-creation-expression     shift and go to state 198
    pre-increment-expression       shift and go to state 202
    shift-expression               shift and go to state 204
    and-expression                 shift and go to state 201
    pre-decrement-expression       shift and go to state 205
    multiplicative-expression      shift and go to state 207
    expression                     shift and go to state 406
    primary-expression             shift and go to state 209
    invocation-expression          shift and go to state 210
    conditional-or-expression      shift and go to state 211
    parenthesized-expression       shift and go to state 96

state 391

    (52) conditional-expression -> conditional-or-expression CONDOP expression COLON . expression
    (49) expression -> . conditional-expression
    (50) expression -> . assignment
    (51) conditional-expression -> . conditional-or-expression
    (52) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (133) assignment -> . primary-expression assignment-operator expression
    (53) conditional-or-expression -> . conditional-and-expression
    (54) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (55) conditional-and-expression -> . inclusive-or-expression
    (56) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (57) inclusive-or-expression -> . exclusive-or-expression
    (58) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (59) exclusive-or-expression -> . and-expression
    (60) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (61) and-expression -> . equality-expression
    (62) and-expression -> . and-expression BITAND equality-expression
    (63) equality-expression -> . relational-expression
    (64) equality-expression -> . equality-expression EQ relational-expression
    (65) equality-expression -> . equality-expression NE relational-expression
    (66) relational-expression -> . shift-expression
    (67) relational-expression -> . relational-expression LT shift-expression
    (68) relational-expression -> . relational-expression GT shift-expression
    (69) relational-expression -> . relational-expression LE shift-expression
    (70) relational-expression -> . relational-expression GE shift-expression
    (71) shift-expression -> . additive-expression
    (72) shift-expression -> . shift-expression LSHIFT additive-expression
    (73) shift-expression -> . shift-expression RSHIFT additive-expression
    (74) additive-expression -> . multiplicative-expression
    (75) additive-expression -> . additive-expression PLUS multiplicative-expression
    (76) additive-expression -> . additive-expression MINUS multiplicative-expression
    (77) multiplicative-expression -> . unary-expression
    (78) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (79) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (80) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (81) unary-expression -> . primary-expression
    (82) unary-expression -> . PLUS unary-expression
    (83) unary-expression -> . MINUS unary-expression
    (84) unary-expression -> . BITNOT unary-expression
    (85) unary-expression -> . BITCOMP unary-expression
    (86) unary-expression -> . TIMES unary-expression
    (87) unary-expression -> . pre-increment-expression
    (88) unary-expression -> . pre-decrement-expression
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression

    NEW             shift and go to state 185
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88
    PLUS            shift and go to state 190
    MINUS           shift and go to state 187
    BITNOT          shift and go to state 197
    BITCOMP         shift and go to state 186
    TIMES           shift and go to state 184
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117

    this-access                    shift and go to state 77
    unary-expression               shift and go to state 199
    exclusive-or-expression        shift and go to state 183
    member-access                  shift and go to state 79
    relational-expression          shift and go to state 203
    additive-expression            shift and go to state 208
    primary-no-array-creation-expression shift and go to state 82
    inclusive-or-expression        shift and go to state 188
    equality-expression            shift and go to state 189
    post-increment-expression      shift and go to state 182
    element-access                 shift and go to state 101
    literal                        shift and go to state 128
    conditional-expression         shift and go to state 191
    conditional-and-expression     shift and go to state 192
    post-decrement-expression      shift and go to state 193
    base-access                    shift and go to state 126
    array-creation-expression      shift and go to state 144
    assignment                     shift and go to state 196
    object-creation-expression     shift and go to state 198
    pre-increment-expression       shift and go to state 202
    shift-expression               shift and go to state 204
    and-expression                 shift and go to state 201
    pre-decrement-expression       shift and go to state 205
    multiplicative-expression      shift and go to state 207
    expression                     shift and go to state 407
    primary-expression             shift and go to state 209
    invocation-expression          shift and go to state 210
    conditional-or-expression      shift and go to state 211
    parenthesized-expression       shift and go to state 96

state 392

    (238) statement-expression-list -> statement-expression-list COMMA statement-expression .

    COMMA           reduce using rule 238 (statement-expression-list -> statement-expression-list COMMA statement-expression .)
    DELIM           reduce using rule 238 (statement-expression-list -> statement-expression-list COMMA statement-expression .)
    CLOSE_PAREN     reduce using rule 238 (statement-expression-list -> statement-expression-list COMMA statement-expression .)


state 393

    (233) for-condition -> boolean-expression .

    DELIM           reduce using rule 233 (for-condition -> boolean-expression .)


state 394

    (226) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt . DELIM for-iterator-opt CLOSE_PAREN embedded-statement

    DELIM           shift and go to state 408


state 395

    (232) for-condition-opt -> empty .

    DELIM           reduce using rule 232 (for-condition-opt -> empty .)


state 396

    (231) for-condition-opt -> for-condition .

    DELIM           reduce using rule 231 (for-condition-opt -> for-condition .)


state 397

    (224) while-statement -> WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .

    IDENTIFIER      reduce using rule 224 (while-statement -> WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    CONST           reduce using rule 224 (while-statement -> WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    BLOCK_BEGIN     reduce using rule 224 (while-statement -> WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    DELIM           reduce using rule 224 (while-statement -> WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    IF              reduce using rule 224 (while-statement -> WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    SWITCH          reduce using rule 224 (while-statement -> WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    WHILE           reduce using rule 224 (while-statement -> WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    FOR             reduce using rule 224 (while-statement -> WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    FOREACH         reduce using rule 224 (while-statement -> WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    DO              reduce using rule 224 (while-statement -> WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    BREAK           reduce using rule 224 (while-statement -> WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    CONTINUE        reduce using rule 224 (while-statement -> WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    GOTO            reduce using rule 224 (while-statement -> WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    RETURN          reduce using rule 224 (while-statement -> WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    BOOL            reduce using rule 224 (while-statement -> WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    NEW             reduce using rule 224 (while-statement -> WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    INCRE           reduce using rule 224 (while-statement -> WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    DECRE           reduce using rule 224 (while-statement -> WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    INT             reduce using rule 224 (while-statement -> WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    UINT            reduce using rule 224 (while-statement -> WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    LONG            reduce using rule 224 (while-statement -> WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    ULONG           reduce using rule 224 (while-statement -> WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    CHAR            reduce using rule 224 (while-statement -> WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    FLOAT           reduce using rule 224 (while-statement -> WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    DOUBLE          reduce using rule 224 (while-statement -> WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    ICONST          reduce using rule 224 (while-statement -> WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    UICONST         reduce using rule 224 (while-statement -> WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    LICONST         reduce using rule 224 (while-statement -> WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    ULICONST        reduce using rule 224 (while-statement -> WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    FCONST          reduce using rule 224 (while-statement -> WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    DCONST          reduce using rule 224 (while-statement -> WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    MCONST          reduce using rule 224 (while-statement -> WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    CCONST          reduce using rule 224 (while-statement -> WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    SCONST          reduce using rule 224 (while-statement -> WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    VSCONST         reduce using rule 224 (while-statement -> WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    TRUE            reduce using rule 224 (while-statement -> WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    FALSE           reduce using rule 224 (while-statement -> WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    OPEN_PAREN      reduce using rule 224 (while-statement -> WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    THIS            reduce using rule 224 (while-statement -> WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    BASE            reduce using rule 224 (while-statement -> WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    BLOCK_END       reduce using rule 224 (while-statement -> WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    CASE            reduce using rule 224 (while-statement -> WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    DEFAULT         reduce using rule 224 (while-statement -> WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    ELSE            reduce using rule 224 (while-statement -> WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)


state 398

    (91) array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET . array-initializer-opt
    (92) array-initializer-opt -> . array-initializer
    (93) array-initializer-opt -> . empty
    (96) array-initializer -> . BLOCK_BEGIN variable-initializer-list-opt BLOCK_END
    (269) empty -> .

    BLOCK_BEGIN     shift and go to state 263
    OPEN_PAREN      reduce using rule 269 (empty -> .)
    INCRE           reduce using rule 269 (empty -> .)
    DECRE           reduce using rule 269 (empty -> .)
    DOT             reduce using rule 269 (empty -> .)
    ASSIGN          reduce using rule 269 (empty -> .)
    PLUSEQUAL       reduce using rule 269 (empty -> .)
    MINUSEQUAL      reduce using rule 269 (empty -> .)
    TIMESEQUAL      reduce using rule 269 (empty -> .)
    DIVEQUAL        reduce using rule 269 (empty -> .)
    MODEQUAL        reduce using rule 269 (empty -> .)
    BITANDEQUAL     reduce using rule 269 (empty -> .)
    BITOREQUAL      reduce using rule 269 (empty -> .)
    BITXOREQUAL     reduce using rule 269 (empty -> .)
    LSHIFTEQUAL     reduce using rule 269 (empty -> .)
    RSHIFTEQUAL     reduce using rule 269 (empty -> .)
    TIMES           reduce using rule 269 (empty -> .)
    DIV             reduce using rule 269 (empty -> .)
    MOD             reduce using rule 269 (empty -> .)
    PLUS            reduce using rule 269 (empty -> .)
    MINUS           reduce using rule 269 (empty -> .)
    LSHIFT          reduce using rule 269 (empty -> .)
    RSHIFT          reduce using rule 269 (empty -> .)
    LT              reduce using rule 269 (empty -> .)
    GT              reduce using rule 269 (empty -> .)
    LE              reduce using rule 269 (empty -> .)
    GE              reduce using rule 269 (empty -> .)
    EQ              reduce using rule 269 (empty -> .)
    NE              reduce using rule 269 (empty -> .)
    BITAND          reduce using rule 269 (empty -> .)
    BITXOR          reduce using rule 269 (empty -> .)
    BITOR           reduce using rule 269 (empty -> .)
    LOGAND          reduce using rule 269 (empty -> .)
    CONDOP          reduce using rule 269 (empty -> .)
    LOGOR           reduce using rule 269 (empty -> .)
    DELIM           reduce using rule 269 (empty -> .)
    CLOSE_PAREN     reduce using rule 269 (empty -> .)
    COMMA           reduce using rule 269 (empty -> .)
    CLOSE_BRACKET   reduce using rule 269 (empty -> .)
    BLOCK_END       reduce using rule 269 (empty -> .)
    COLON           reduce using rule 269 (empty -> .)

    array-initializer              shift and go to state 409
    array-initializer-opt          shift and go to state 410
    empty                          shift and go to state 411

state 399

    (130) object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .

    OPEN_BRACKET    reduce using rule 130 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    DOT             reduce using rule 130 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    OPEN_PAREN      reduce using rule 130 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    INCRE           reduce using rule 130 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    DECRE           reduce using rule 130 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    ASSIGN          reduce using rule 130 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    PLUSEQUAL       reduce using rule 130 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    MINUSEQUAL      reduce using rule 130 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    TIMESEQUAL      reduce using rule 130 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    DIVEQUAL        reduce using rule 130 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    MODEQUAL        reduce using rule 130 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITANDEQUAL     reduce using rule 130 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITOREQUAL      reduce using rule 130 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITXOREQUAL     reduce using rule 130 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LSHIFTEQUAL     reduce using rule 130 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    RSHIFTEQUAL     reduce using rule 130 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    TIMES           reduce using rule 130 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    DIV             reduce using rule 130 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    MOD             reduce using rule 130 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    PLUS            reduce using rule 130 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    MINUS           reduce using rule 130 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LSHIFT          reduce using rule 130 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    RSHIFT          reduce using rule 130 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LT              reduce using rule 130 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    GT              reduce using rule 130 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LE              reduce using rule 130 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    GE              reduce using rule 130 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    EQ              reduce using rule 130 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    NE              reduce using rule 130 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITAND          reduce using rule 130 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITXOR          reduce using rule 130 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITOR           reduce using rule 130 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LOGAND          reduce using rule 130 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    CONDOP          reduce using rule 130 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LOGOR           reduce using rule 130 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    COMMA           reduce using rule 130 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BLOCK_END       reduce using rule 130 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    DELIM           reduce using rule 130 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 130 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    CLOSE_BRACKET   reduce using rule 130 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    COLON           reduce using rule 130 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)


state 400

    (210) switch-block -> BLOCK_BEGIN . switch-sections-opt BLOCK_END
    (211) switch-sections-opt -> . switch-sections
    (212) switch-sections-opt -> . empty
    (213) switch-sections -> . switch-section
    (214) switch-sections -> . switch-sections switch-section
    (269) empty -> .
    (215) switch-section -> . switch-labels statement-list
    (216) switch-labels -> . switch-label
    (217) switch-labels -> . switch-labels switch-label
    (218) switch-label -> . CASE expression COLON
    (219) switch-label -> . DEFAULT COLON

    BLOCK_END       reduce using rule 269 (empty -> .)
    CASE            shift and go to state 412
    DEFAULT         shift and go to state 413

    switch-sections-opt            shift and go to state 416
    switch-section                 shift and go to state 414
    switch-labels                  shift and go to state 415
    switch-sections                shift and go to state 417
    empty                          shift and go to state 418
    switch-label                   shift and go to state 419

state 401

    (209) switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .

    IDENTIFIER      reduce using rule 209 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    CONST           reduce using rule 209 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    BLOCK_BEGIN     reduce using rule 209 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    DELIM           reduce using rule 209 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    IF              reduce using rule 209 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    SWITCH          reduce using rule 209 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    WHILE           reduce using rule 209 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    FOR             reduce using rule 209 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    FOREACH         reduce using rule 209 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    DO              reduce using rule 209 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    BREAK           reduce using rule 209 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    CONTINUE        reduce using rule 209 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    GOTO            reduce using rule 209 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    RETURN          reduce using rule 209 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    BOOL            reduce using rule 209 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    NEW             reduce using rule 209 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    INCRE           reduce using rule 209 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    DECRE           reduce using rule 209 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    INT             reduce using rule 209 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    UINT            reduce using rule 209 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    LONG            reduce using rule 209 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    ULONG           reduce using rule 209 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    CHAR            reduce using rule 209 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    FLOAT           reduce using rule 209 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    DOUBLE          reduce using rule 209 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    ICONST          reduce using rule 209 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    UICONST         reduce using rule 209 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    LICONST         reduce using rule 209 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    ULICONST        reduce using rule 209 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    FCONST          reduce using rule 209 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    DCONST          reduce using rule 209 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    MCONST          reduce using rule 209 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    CCONST          reduce using rule 209 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    SCONST          reduce using rule 209 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    VSCONST         reduce using rule 209 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    TRUE            reduce using rule 209 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    FALSE           reduce using rule 209 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    OPEN_PAREN      reduce using rule 209 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    THIS            reduce using rule 209 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    BASE            reduce using rule 209 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    BLOCK_END       reduce using rule 209 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    CASE            reduce using rule 209 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    DEFAULT         reduce using rule 209 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    ELSE            reduce using rule 209 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)


state 402

    (225) do-statement -> DO embedded-statement WHILE OPEN_PAREN boolean-expression . CLOSE_PAREN DELIM

    CLOSE_PAREN     shift and go to state 420


state 403

    (206) if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .
    (207) if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement . ELSE embedded-statement

    IDENTIFIER      reduce using rule 206 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    CONST           reduce using rule 206 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    BLOCK_BEGIN     reduce using rule 206 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    DELIM           reduce using rule 206 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    IF              reduce using rule 206 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    SWITCH          reduce using rule 206 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    WHILE           reduce using rule 206 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    FOR             reduce using rule 206 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    FOREACH         reduce using rule 206 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    DO              reduce using rule 206 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    BREAK           reduce using rule 206 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    CONTINUE        reduce using rule 206 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    GOTO            reduce using rule 206 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    RETURN          reduce using rule 206 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    BOOL            reduce using rule 206 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    NEW             reduce using rule 206 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    INCRE           reduce using rule 206 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    DECRE           reduce using rule 206 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    INT             reduce using rule 206 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    UINT            reduce using rule 206 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    LONG            reduce using rule 206 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    ULONG           reduce using rule 206 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    CHAR            reduce using rule 206 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    FLOAT           reduce using rule 206 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    DOUBLE          reduce using rule 206 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    ICONST          reduce using rule 206 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    UICONST         reduce using rule 206 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    LICONST         reduce using rule 206 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    ULICONST        reduce using rule 206 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    FCONST          reduce using rule 206 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    DCONST          reduce using rule 206 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    MCONST          reduce using rule 206 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    CCONST          reduce using rule 206 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    SCONST          reduce using rule 206 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    VSCONST         reduce using rule 206 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    TRUE            reduce using rule 206 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    FALSE           reduce using rule 206 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    OPEN_PAREN      reduce using rule 206 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    THIS            reduce using rule 206 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    BASE            reduce using rule 206 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    CASE            reduce using rule 206 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    DEFAULT         reduce using rule 206 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    BLOCK_END       reduce using rule 206 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .)
    ELSE            shift and go to state 421

  ! ELSE            [ reduce using rule 206 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement .) ]


state 404

    (120) argument-list -> argument-list COMMA argument .

    COMMA           reduce using rule 120 (argument-list -> argument-list COMMA argument .)
    CLOSE_PAREN     reduce using rule 120 (argument-list -> argument-list COMMA argument .)


state 405

    (100) variable-initializer-list -> variable-initializer-list COMMA variable-initializer .

    COMMA           reduce using rule 100 (variable-initializer-list -> variable-initializer-list COMMA variable-initializer .)
    BLOCK_END       reduce using rule 100 (variable-initializer-list -> variable-initializer-list COMMA variable-initializer .)


state 406

    (239) foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression . CLOSE_PAREN embedded-statement

    CLOSE_PAREN     shift and go to state 422


state 407

    (52) conditional-expression -> conditional-or-expression CONDOP expression COLON expression .

    COLON           reduce using rule 52 (conditional-expression -> conditional-or-expression CONDOP expression COLON expression .)
    CLOSE_BRACKET   reduce using rule 52 (conditional-expression -> conditional-or-expression CONDOP expression COLON expression .)
    COMMA           reduce using rule 52 (conditional-expression -> conditional-or-expression CONDOP expression COLON expression .)
    DELIM           reduce using rule 52 (conditional-expression -> conditional-or-expression CONDOP expression COLON expression .)
    CLOSE_PAREN     reduce using rule 52 (conditional-expression -> conditional-or-expression CONDOP expression COLON expression .)
    BLOCK_END       reduce using rule 52 (conditional-expression -> conditional-or-expression CONDOP expression COLON expression .)


state 408

    (226) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM . for-iterator-opt CLOSE_PAREN embedded-statement
    (234) for-iterator-opt -> . for-iterator
    (235) for-iterator-opt -> . empty
    (236) for-iterator -> . statement-expression-list
    (269) empty -> .
    (237) statement-expression-list -> . statement-expression
    (238) statement-expression-list -> . statement-expression-list COMMA statement-expression
    (197) statement-expression -> . invocation-expression
    (198) statement-expression -> . object-creation-expression
    (199) statement-expression -> . assignment
    (200) statement-expression -> . post-increment-expression
    (201) statement-expression -> . post-decrement-expression
    (202) statement-expression -> . pre-increment-expression
    (203) statement-expression -> . pre-decrement-expression
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (133) assignment -> . primary-expression assignment-operator expression
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET

    CLOSE_PAREN     reduce using rule 269 (empty -> .)
    NEW             shift and go to state 120
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88

    this-access                    shift and go to state 77
    post-increment-expression      shift and go to state 83
    member-access                  shift and go to state 79
    primary-no-array-creation-expression shift and go to state 82
    for-iterator-opt               shift and go to state 423
    element-access                 shift and go to state 101
    statement-expression           shift and go to state 303
    base-access                    shift and go to state 126
    post-decrement-expression      shift and go to state 132
    statement-expression-list      shift and go to state 424
    empty                          shift and go to state 425
    array-creation-expression      shift and go to state 144
    assignment                     shift and go to state 145
    literal                        shift and go to state 128
    for-iterator                   shift and go to state 426
    object-creation-expression     shift and go to state 146
    pre-increment-expression       shift and go to state 147
    pre-decrement-expression       shift and go to state 108
    parenthesized-expression       shift and go to state 96
    primary-expression             shift and go to state 149
    invocation-expression          shift and go to state 95

state 409

    (92) array-initializer-opt -> array-initializer .

    OPEN_PAREN      reduce using rule 92 (array-initializer-opt -> array-initializer .)
    INCRE           reduce using rule 92 (array-initializer-opt -> array-initializer .)
    DECRE           reduce using rule 92 (array-initializer-opt -> array-initializer .)
    DOT             reduce using rule 92 (array-initializer-opt -> array-initializer .)
    ASSIGN          reduce using rule 92 (array-initializer-opt -> array-initializer .)
    PLUSEQUAL       reduce using rule 92 (array-initializer-opt -> array-initializer .)
    MINUSEQUAL      reduce using rule 92 (array-initializer-opt -> array-initializer .)
    TIMESEQUAL      reduce using rule 92 (array-initializer-opt -> array-initializer .)
    DIVEQUAL        reduce using rule 92 (array-initializer-opt -> array-initializer .)
    MODEQUAL        reduce using rule 92 (array-initializer-opt -> array-initializer .)
    BITANDEQUAL     reduce using rule 92 (array-initializer-opt -> array-initializer .)
    BITOREQUAL      reduce using rule 92 (array-initializer-opt -> array-initializer .)
    BITXOREQUAL     reduce using rule 92 (array-initializer-opt -> array-initializer .)
    LSHIFTEQUAL     reduce using rule 92 (array-initializer-opt -> array-initializer .)
    RSHIFTEQUAL     reduce using rule 92 (array-initializer-opt -> array-initializer .)
    TIMES           reduce using rule 92 (array-initializer-opt -> array-initializer .)
    DIV             reduce using rule 92 (array-initializer-opt -> array-initializer .)
    MOD             reduce using rule 92 (array-initializer-opt -> array-initializer .)
    PLUS            reduce using rule 92 (array-initializer-opt -> array-initializer .)
    MINUS           reduce using rule 92 (array-initializer-opt -> array-initializer .)
    LSHIFT          reduce using rule 92 (array-initializer-opt -> array-initializer .)
    RSHIFT          reduce using rule 92 (array-initializer-opt -> array-initializer .)
    LT              reduce using rule 92 (array-initializer-opt -> array-initializer .)
    GT              reduce using rule 92 (array-initializer-opt -> array-initializer .)
    LE              reduce using rule 92 (array-initializer-opt -> array-initializer .)
    GE              reduce using rule 92 (array-initializer-opt -> array-initializer .)
    EQ              reduce using rule 92 (array-initializer-opt -> array-initializer .)
    NE              reduce using rule 92 (array-initializer-opt -> array-initializer .)
    BITAND          reduce using rule 92 (array-initializer-opt -> array-initializer .)
    BITXOR          reduce using rule 92 (array-initializer-opt -> array-initializer .)
    BITOR           reduce using rule 92 (array-initializer-opt -> array-initializer .)
    LOGAND          reduce using rule 92 (array-initializer-opt -> array-initializer .)
    CONDOP          reduce using rule 92 (array-initializer-opt -> array-initializer .)
    LOGOR           reduce using rule 92 (array-initializer-opt -> array-initializer .)
    DELIM           reduce using rule 92 (array-initializer-opt -> array-initializer .)
    CLOSE_PAREN     reduce using rule 92 (array-initializer-opt -> array-initializer .)
    COMMA           reduce using rule 92 (array-initializer-opt -> array-initializer .)
    CLOSE_BRACKET   reduce using rule 92 (array-initializer-opt -> array-initializer .)
    BLOCK_END       reduce using rule 92 (array-initializer-opt -> array-initializer .)
    COLON           reduce using rule 92 (array-initializer-opt -> array-initializer .)


state 410

    (91) array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .

    DOT             reduce using rule 91 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    OPEN_PAREN      reduce using rule 91 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    INCRE           reduce using rule 91 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    DECRE           reduce using rule 91 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    ASSIGN          reduce using rule 91 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    PLUSEQUAL       reduce using rule 91 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    MINUSEQUAL      reduce using rule 91 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    TIMESEQUAL      reduce using rule 91 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    DIVEQUAL        reduce using rule 91 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    MODEQUAL        reduce using rule 91 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    BITANDEQUAL     reduce using rule 91 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    BITOREQUAL      reduce using rule 91 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    BITXOREQUAL     reduce using rule 91 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    LSHIFTEQUAL     reduce using rule 91 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    RSHIFTEQUAL     reduce using rule 91 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    TIMES           reduce using rule 91 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    DIV             reduce using rule 91 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    MOD             reduce using rule 91 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    PLUS            reduce using rule 91 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    MINUS           reduce using rule 91 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    LSHIFT          reduce using rule 91 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    RSHIFT          reduce using rule 91 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    LT              reduce using rule 91 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    GT              reduce using rule 91 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    LE              reduce using rule 91 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    GE              reduce using rule 91 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    EQ              reduce using rule 91 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    NE              reduce using rule 91 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    BITAND          reduce using rule 91 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    BITXOR          reduce using rule 91 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    BITOR           reduce using rule 91 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    LOGAND          reduce using rule 91 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    CONDOP          reduce using rule 91 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    LOGOR           reduce using rule 91 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    COLON           reduce using rule 91 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    CLOSE_PAREN     reduce using rule 91 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    DELIM           reduce using rule 91 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    COMMA           reduce using rule 91 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    CLOSE_BRACKET   reduce using rule 91 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    BLOCK_END       reduce using rule 91 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)


state 411

    (93) array-initializer-opt -> empty .

    OPEN_PAREN      reduce using rule 93 (array-initializer-opt -> empty .)
    INCRE           reduce using rule 93 (array-initializer-opt -> empty .)
    DECRE           reduce using rule 93 (array-initializer-opt -> empty .)
    DOT             reduce using rule 93 (array-initializer-opt -> empty .)
    ASSIGN          reduce using rule 93 (array-initializer-opt -> empty .)
    PLUSEQUAL       reduce using rule 93 (array-initializer-opt -> empty .)
    MINUSEQUAL      reduce using rule 93 (array-initializer-opt -> empty .)
    TIMESEQUAL      reduce using rule 93 (array-initializer-opt -> empty .)
    DIVEQUAL        reduce using rule 93 (array-initializer-opt -> empty .)
    MODEQUAL        reduce using rule 93 (array-initializer-opt -> empty .)
    BITANDEQUAL     reduce using rule 93 (array-initializer-opt -> empty .)
    BITOREQUAL      reduce using rule 93 (array-initializer-opt -> empty .)
    BITXOREQUAL     reduce using rule 93 (array-initializer-opt -> empty .)
    LSHIFTEQUAL     reduce using rule 93 (array-initializer-opt -> empty .)
    RSHIFTEQUAL     reduce using rule 93 (array-initializer-opt -> empty .)
    TIMES           reduce using rule 93 (array-initializer-opt -> empty .)
    DIV             reduce using rule 93 (array-initializer-opt -> empty .)
    MOD             reduce using rule 93 (array-initializer-opt -> empty .)
    PLUS            reduce using rule 93 (array-initializer-opt -> empty .)
    MINUS           reduce using rule 93 (array-initializer-opt -> empty .)
    LSHIFT          reduce using rule 93 (array-initializer-opt -> empty .)
    RSHIFT          reduce using rule 93 (array-initializer-opt -> empty .)
    LT              reduce using rule 93 (array-initializer-opt -> empty .)
    GT              reduce using rule 93 (array-initializer-opt -> empty .)
    LE              reduce using rule 93 (array-initializer-opt -> empty .)
    GE              reduce using rule 93 (array-initializer-opt -> empty .)
    EQ              reduce using rule 93 (array-initializer-opt -> empty .)
    NE              reduce using rule 93 (array-initializer-opt -> empty .)
    BITAND          reduce using rule 93 (array-initializer-opt -> empty .)
    BITXOR          reduce using rule 93 (array-initializer-opt -> empty .)
    BITOR           reduce using rule 93 (array-initializer-opt -> empty .)
    LOGAND          reduce using rule 93 (array-initializer-opt -> empty .)
    CONDOP          reduce using rule 93 (array-initializer-opt -> empty .)
    LOGOR           reduce using rule 93 (array-initializer-opt -> empty .)
    DELIM           reduce using rule 93 (array-initializer-opt -> empty .)
    CLOSE_PAREN     reduce using rule 93 (array-initializer-opt -> empty .)
    COMMA           reduce using rule 93 (array-initializer-opt -> empty .)
    CLOSE_BRACKET   reduce using rule 93 (array-initializer-opt -> empty .)
    BLOCK_END       reduce using rule 93 (array-initializer-opt -> empty .)
    COLON           reduce using rule 93 (array-initializer-opt -> empty .)


state 412

    (218) switch-label -> CASE . expression COLON
    (49) expression -> . conditional-expression
    (50) expression -> . assignment
    (51) conditional-expression -> . conditional-or-expression
    (52) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (133) assignment -> . primary-expression assignment-operator expression
    (53) conditional-or-expression -> . conditional-and-expression
    (54) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (55) conditional-and-expression -> . inclusive-or-expression
    (56) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (57) inclusive-or-expression -> . exclusive-or-expression
    (58) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (59) exclusive-or-expression -> . and-expression
    (60) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (61) and-expression -> . equality-expression
    (62) and-expression -> . and-expression BITAND equality-expression
    (63) equality-expression -> . relational-expression
    (64) equality-expression -> . equality-expression EQ relational-expression
    (65) equality-expression -> . equality-expression NE relational-expression
    (66) relational-expression -> . shift-expression
    (67) relational-expression -> . relational-expression LT shift-expression
    (68) relational-expression -> . relational-expression GT shift-expression
    (69) relational-expression -> . relational-expression LE shift-expression
    (70) relational-expression -> . relational-expression GE shift-expression
    (71) shift-expression -> . additive-expression
    (72) shift-expression -> . shift-expression LSHIFT additive-expression
    (73) shift-expression -> . shift-expression RSHIFT additive-expression
    (74) additive-expression -> . multiplicative-expression
    (75) additive-expression -> . additive-expression PLUS multiplicative-expression
    (76) additive-expression -> . additive-expression MINUS multiplicative-expression
    (77) multiplicative-expression -> . unary-expression
    (78) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (79) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (80) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (81) unary-expression -> . primary-expression
    (82) unary-expression -> . PLUS unary-expression
    (83) unary-expression -> . MINUS unary-expression
    (84) unary-expression -> . BITNOT unary-expression
    (85) unary-expression -> . BITCOMP unary-expression
    (86) unary-expression -> . TIMES unary-expression
    (87) unary-expression -> . pre-increment-expression
    (88) unary-expression -> . pre-decrement-expression
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression

    NEW             shift and go to state 185
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88
    PLUS            shift and go to state 190
    MINUS           shift and go to state 187
    BITNOT          shift and go to state 197
    BITCOMP         shift and go to state 186
    TIMES           shift and go to state 184
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117

    this-access                    shift and go to state 77
    unary-expression               shift and go to state 199
    exclusive-or-expression        shift and go to state 183
    member-access                  shift and go to state 79
    relational-expression          shift and go to state 203
    additive-expression            shift and go to state 208
    primary-no-array-creation-expression shift and go to state 82
    inclusive-or-expression        shift and go to state 188
    equality-expression            shift and go to state 189
    post-increment-expression      shift and go to state 182
    element-access                 shift and go to state 101
    literal                        shift and go to state 128
    base-access                    shift and go to state 126
    conditional-and-expression     shift and go to state 192
    post-decrement-expression      shift and go to state 193
    conditional-expression         shift and go to state 191
    array-creation-expression      shift and go to state 144
    assignment                     shift and go to state 196
    object-creation-expression     shift and go to state 198
    pre-increment-expression       shift and go to state 202
    shift-expression               shift and go to state 204
    and-expression                 shift and go to state 201
    pre-decrement-expression       shift and go to state 205
    multiplicative-expression      shift and go to state 207
    conditional-or-expression      shift and go to state 211
    primary-expression             shift and go to state 209
    invocation-expression          shift and go to state 210
    expression                     shift and go to state 427
    parenthesized-expression       shift and go to state 96

state 413

    (219) switch-label -> DEFAULT . COLON

    COLON           shift and go to state 428


state 414

    (213) switch-sections -> switch-section .

    CASE            reduce using rule 213 (switch-sections -> switch-section .)
    DEFAULT         reduce using rule 213 (switch-sections -> switch-section .)
    BLOCK_END       reduce using rule 213 (switch-sections -> switch-section .)


state 415

    (215) switch-section -> switch-labels . statement-list
    (217) switch-labels -> switch-labels . switch-label
    (173) statement-list -> . statement
    (174) statement-list -> . statement-list statement
    (218) switch-label -> . CASE expression COLON
    (219) switch-label -> . DEFAULT COLON
    (175) statement -> . labeled-statement
    (176) statement -> . declaration-statement
    (177) statement -> . embedded-statement
    (178) labeled-statement -> . IDENTIFIER COLON statement
    (179) declaration-statement -> . local-variable-declaration DELIM
    (180) declaration-statement -> . local-constant-declaration DELIM
    (189) embedded-statement -> . block
    (190) embedded-statement -> . empty-statement
    (191) embedded-statement -> . expression-statement
    (192) embedded-statement -> . selection-statement
    (193) embedded-statement -> . iteration-statement
    (194) embedded-statement -> . jump-statement
    (181) local-variable-declaration -> . type local-variable-declarators
    (188) local-constant-declaration -> . CONST type constant-declarators
    (170) block -> . BLOCK_BEGIN statement-list-opt BLOCK_END
    (195) empty-statement -> . DELIM
    (196) expression-statement -> . statement-expression DELIM
    (204) selection-statement -> . if-statement
    (205) selection-statement -> . switch-statement
    (220) iteration-statement -> . while-statement
    (221) iteration-statement -> . for-statement
    (222) iteration-statement -> . foreach-statement
    (223) iteration-statement -> . do-statement
    (240) jump-statement -> . break-statement
    (241) jump-statement -> . continue-statement
    (242) jump-statement -> . goto-statement
    (243) jump-statement -> . return-statement
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (197) statement-expression -> . invocation-expression
    (198) statement-expression -> . object-creation-expression
    (199) statement-expression -> . assignment
    (200) statement-expression -> . post-increment-expression
    (201) statement-expression -> . post-decrement-expression
    (202) statement-expression -> . pre-increment-expression
    (203) statement-expression -> . pre-decrement-expression
    (206) if-statement -> . IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement
    (207) if-statement -> . IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement
    (209) switch-statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block
    (224) while-statement -> . WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement
    (226) for-statement -> . FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement
    (239) foreach-statement -> . FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement
    (225) do-statement -> . DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM
    (244) break-statement -> . BREAK DELIM
    (245) continue-statement -> . CONTINUE DELIM
    (246) goto-statement -> . GOTO IDENTIFIER DELIM
    (247) return-statement -> . RETURN expression-opt DELIM
    (29) simple-type -> . numeric-type
    (30) simple-type -> . BOOL
    (12) class-type -> . IDENTIFIER
    (40) array-type -> . simple-type rank-specifier
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (133) assignment -> . primary-expression assignment-operator expression
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression
    (31) numeric-type -> . integral-type
    (32) numeric-type -> . floating-point-type
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (33) integral-type -> . INT
    (34) integral-type -> . UINT
    (35) integral-type -> . LONG
    (36) integral-type -> . ULONG
    (37) integral-type -> . CHAR
    (38) floating-point-type -> . FLOAT
    (39) floating-point-type -> . DOUBLE
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET

    CASE            shift and go to state 412
    DEFAULT         shift and go to state 413
    IDENTIFIER      shift and go to state 129
    CONST           shift and go to state 140
    BLOCK_BEGIN     shift and go to state 55
    DELIM           shift and go to state 115
    IF              shift and go to state 148
    SWITCH          shift and go to state 124
    WHILE           shift and go to state 118
    FOR             shift and go to state 105
    FOREACH         shift and go to state 90
    DO              shift and go to state 139
    BREAK           shift and go to state 136
    CONTINUE        shift and go to state 113
    GOTO            shift and go to state 87
    RETURN          shift and go to state 97
    BOOL            shift and go to state 48
    NEW             shift and go to state 120
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117
    INT             shift and go to state 25
    UINT            shift and go to state 42
    LONG            shift and go to state 44
    ULONG           shift and go to state 27
    CHAR            shift and go to state 22
    FLOAT           shift and go to state 47
    DOUBLE          shift and go to state 52
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88

    this-access                    shift and go to state 77
    return-statement               shift and go to state 98
    member-access                  shift and go to state 79
    selection-statement            shift and go to state 116
    parenthesized-expression       shift and go to state 96
    array-creation-expression      shift and go to state 144
    empty-statement                shift and go to state 119
    expression-statement           shift and go to state 81
    pre-decrement-expression       shift and go to state 108
    primary-no-array-creation-expression shift and go to state 82
    integral-type                  shift and go to state 26
    foreach-statement              shift and go to state 100
    break-statement                shift and go to state 121
    post-increment-expression      shift and go to state 83
    element-access                 shift and go to state 101
    statement-expression           shift and go to state 84
    local-constant-declaration     shift and go to state 102
    switch-label                   shift and go to state 429
    statement                      shift and go to state 127
    assignment                     shift and go to state 145
    for-statement                  shift and go to state 86
    type                           shift and go to state 130
    do-statement                   shift and go to state 104
    array-type                     shift and go to state 36
    floating-point-type            shift and go to state 39
    continue-statement             shift and go to state 106
    primary-expression             shift and go to state 149
    literal                        shift and go to state 128
    invocation-expression          shift and go to state 95
    labeled-statement              shift and go to state 89
    declaration-statement          shift and go to state 133
    object-creation-expression     shift and go to state 146
    post-decrement-expression      shift and go to state 132
    switch-statement               shift and go to state 91
    pre-increment-expression       shift and go to state 147
    numeric-type                   shift and go to state 28
    embedded-statement             shift and go to state 92
    base-access                    shift and go to state 126
    iteration-statement            shift and go to state 135
    jump-statement                 shift and go to state 93
    local-variable-declaration     shift and go to state 109
    goto-statement                 shift and go to state 111
    if-statement                   shift and go to state 112
    statement-list                 shift and go to state 430
    class-type                     shift and go to state 49
    while-statement                shift and go to state 138
    simple-type                    shift and go to state 23
    block                          shift and go to state 114

state 416

    (210) switch-block -> BLOCK_BEGIN switch-sections-opt . BLOCK_END

    BLOCK_END       shift and go to state 431


state 417

    (211) switch-sections-opt -> switch-sections .
    (214) switch-sections -> switch-sections . switch-section
    (215) switch-section -> . switch-labels statement-list
    (216) switch-labels -> . switch-label
    (217) switch-labels -> . switch-labels switch-label
    (218) switch-label -> . CASE expression COLON
    (219) switch-label -> . DEFAULT COLON

    BLOCK_END       reduce using rule 211 (switch-sections-opt -> switch-sections .)
    CASE            shift and go to state 412
    DEFAULT         shift and go to state 413

    switch-section                 shift and go to state 432
    switch-labels                  shift and go to state 415
    switch-label                   shift and go to state 419

state 418

    (212) switch-sections-opt -> empty .

    BLOCK_END       reduce using rule 212 (switch-sections-opt -> empty .)


state 419

    (216) switch-labels -> switch-label .

    CASE            reduce using rule 216 (switch-labels -> switch-label .)
    DEFAULT         reduce using rule 216 (switch-labels -> switch-label .)
    IDENTIFIER      reduce using rule 216 (switch-labels -> switch-label .)
    CONST           reduce using rule 216 (switch-labels -> switch-label .)
    BLOCK_BEGIN     reduce using rule 216 (switch-labels -> switch-label .)
    DELIM           reduce using rule 216 (switch-labels -> switch-label .)
    IF              reduce using rule 216 (switch-labels -> switch-label .)
    SWITCH          reduce using rule 216 (switch-labels -> switch-label .)
    WHILE           reduce using rule 216 (switch-labels -> switch-label .)
    FOR             reduce using rule 216 (switch-labels -> switch-label .)
    FOREACH         reduce using rule 216 (switch-labels -> switch-label .)
    DO              reduce using rule 216 (switch-labels -> switch-label .)
    BREAK           reduce using rule 216 (switch-labels -> switch-label .)
    CONTINUE        reduce using rule 216 (switch-labels -> switch-label .)
    GOTO            reduce using rule 216 (switch-labels -> switch-label .)
    RETURN          reduce using rule 216 (switch-labels -> switch-label .)
    BOOL            reduce using rule 216 (switch-labels -> switch-label .)
    NEW             reduce using rule 216 (switch-labels -> switch-label .)
    INCRE           reduce using rule 216 (switch-labels -> switch-label .)
    DECRE           reduce using rule 216 (switch-labels -> switch-label .)
    INT             reduce using rule 216 (switch-labels -> switch-label .)
    UINT            reduce using rule 216 (switch-labels -> switch-label .)
    LONG            reduce using rule 216 (switch-labels -> switch-label .)
    ULONG           reduce using rule 216 (switch-labels -> switch-label .)
    CHAR            reduce using rule 216 (switch-labels -> switch-label .)
    FLOAT           reduce using rule 216 (switch-labels -> switch-label .)
    DOUBLE          reduce using rule 216 (switch-labels -> switch-label .)
    ICONST          reduce using rule 216 (switch-labels -> switch-label .)
    UICONST         reduce using rule 216 (switch-labels -> switch-label .)
    LICONST         reduce using rule 216 (switch-labels -> switch-label .)
    ULICONST        reduce using rule 216 (switch-labels -> switch-label .)
    FCONST          reduce using rule 216 (switch-labels -> switch-label .)
    DCONST          reduce using rule 216 (switch-labels -> switch-label .)
    MCONST          reduce using rule 216 (switch-labels -> switch-label .)
    CCONST          reduce using rule 216 (switch-labels -> switch-label .)
    SCONST          reduce using rule 216 (switch-labels -> switch-label .)
    VSCONST         reduce using rule 216 (switch-labels -> switch-label .)
    TRUE            reduce using rule 216 (switch-labels -> switch-label .)
    FALSE           reduce using rule 216 (switch-labels -> switch-label .)
    OPEN_PAREN      reduce using rule 216 (switch-labels -> switch-label .)
    THIS            reduce using rule 216 (switch-labels -> switch-label .)
    BASE            reduce using rule 216 (switch-labels -> switch-label .)


state 420

    (225) do-statement -> DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN . DELIM

    DELIM           shift and go to state 433


state 421

    (207) if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE . embedded-statement
    (189) embedded-statement -> . block
    (190) embedded-statement -> . empty-statement
    (191) embedded-statement -> . expression-statement
    (192) embedded-statement -> . selection-statement
    (193) embedded-statement -> . iteration-statement
    (194) embedded-statement -> . jump-statement
    (170) block -> . BLOCK_BEGIN statement-list-opt BLOCK_END
    (195) empty-statement -> . DELIM
    (196) expression-statement -> . statement-expression DELIM
    (204) selection-statement -> . if-statement
    (205) selection-statement -> . switch-statement
    (220) iteration-statement -> . while-statement
    (221) iteration-statement -> . for-statement
    (222) iteration-statement -> . foreach-statement
    (223) iteration-statement -> . do-statement
    (240) jump-statement -> . break-statement
    (241) jump-statement -> . continue-statement
    (242) jump-statement -> . goto-statement
    (243) jump-statement -> . return-statement
    (197) statement-expression -> . invocation-expression
    (198) statement-expression -> . object-creation-expression
    (199) statement-expression -> . assignment
    (200) statement-expression -> . post-increment-expression
    (201) statement-expression -> . post-decrement-expression
    (202) statement-expression -> . pre-increment-expression
    (203) statement-expression -> . pre-decrement-expression
    (206) if-statement -> . IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement
    (207) if-statement -> . IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement
    (209) switch-statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block
    (224) while-statement -> . WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement
    (226) for-statement -> . FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement
    (239) foreach-statement -> . FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement
    (225) do-statement -> . DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM
    (244) break-statement -> . BREAK DELIM
    (245) continue-statement -> . CONTINUE DELIM
    (246) goto-statement -> . GOTO IDENTIFIER DELIM
    (247) return-statement -> . RETURN expression-opt DELIM
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (133) assignment -> . primary-expression assignment-operator expression
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET

    BLOCK_BEGIN     shift and go to state 55
    DELIM           shift and go to state 115
    IF              shift and go to state 148
    SWITCH          shift and go to state 124
    WHILE           shift and go to state 118
    FOR             shift and go to state 105
    FOREACH         shift and go to state 90
    DO              shift and go to state 139
    BREAK           shift and go to state 136
    CONTINUE        shift and go to state 113
    GOTO            shift and go to state 87
    RETURN          shift and go to state 97
    NEW             shift and go to state 120
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88

    this-access                    shift and go to state 77
    member-access                  shift and go to state 79
    selection-statement            shift and go to state 116
    parenthesized-expression       shift and go to state 96
    empty-statement                shift and go to state 119
    return-statement               shift and go to state 98
    expression-statement           shift and go to state 81
    pre-decrement-expression       shift and go to state 108
    primary-no-array-creation-expression shift and go to state 82
    foreach-statement              shift and go to state 100
    break-statement                shift and go to state 121
    post-increment-expression      shift and go to state 83
    element-access                 shift and go to state 101
    statement-expression           shift and go to state 84
    base-access                    shift and go to state 126
    assignment                     shift and go to state 145
    for-statement                  shift and go to state 86
    do-statement                   shift and go to state 104
    array-creation-expression      shift and go to state 144
    continue-statement             shift and go to state 106
    literal                        shift and go to state 128
    invocation-expression          shift and go to state 95
    object-creation-expression     shift and go to state 146
    post-decrement-expression      shift and go to state 132
    switch-statement               shift and go to state 91
    pre-increment-expression       shift and go to state 147
    embedded-statement             shift and go to state 434
    jump-statement                 shift and go to state 93
    iteration-statement            shift and go to state 135
    goto-statement                 shift and go to state 111
    if-statement                   shift and go to state 112
    primary-expression             shift and go to state 149
    while-statement                shift and go to state 138
    block                          shift and go to state 114

state 422

    (239) foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN . embedded-statement
    (189) embedded-statement -> . block
    (190) embedded-statement -> . empty-statement
    (191) embedded-statement -> . expression-statement
    (192) embedded-statement -> . selection-statement
    (193) embedded-statement -> . iteration-statement
    (194) embedded-statement -> . jump-statement
    (170) block -> . BLOCK_BEGIN statement-list-opt BLOCK_END
    (195) empty-statement -> . DELIM
    (196) expression-statement -> . statement-expression DELIM
    (204) selection-statement -> . if-statement
    (205) selection-statement -> . switch-statement
    (220) iteration-statement -> . while-statement
    (221) iteration-statement -> . for-statement
    (222) iteration-statement -> . foreach-statement
    (223) iteration-statement -> . do-statement
    (240) jump-statement -> . break-statement
    (241) jump-statement -> . continue-statement
    (242) jump-statement -> . goto-statement
    (243) jump-statement -> . return-statement
    (197) statement-expression -> . invocation-expression
    (198) statement-expression -> . object-creation-expression
    (199) statement-expression -> . assignment
    (200) statement-expression -> . post-increment-expression
    (201) statement-expression -> . post-decrement-expression
    (202) statement-expression -> . pre-increment-expression
    (203) statement-expression -> . pre-decrement-expression
    (206) if-statement -> . IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement
    (207) if-statement -> . IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement
    (209) switch-statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block
    (224) while-statement -> . WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement
    (226) for-statement -> . FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement
    (239) foreach-statement -> . FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement
    (225) do-statement -> . DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM
    (244) break-statement -> . BREAK DELIM
    (245) continue-statement -> . CONTINUE DELIM
    (246) goto-statement -> . GOTO IDENTIFIER DELIM
    (247) return-statement -> . RETURN expression-opt DELIM
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (133) assignment -> . primary-expression assignment-operator expression
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET

    BLOCK_BEGIN     shift and go to state 55
    DELIM           shift and go to state 115
    IF              shift and go to state 148
    SWITCH          shift and go to state 124
    WHILE           shift and go to state 118
    FOR             shift and go to state 105
    FOREACH         shift and go to state 90
    DO              shift and go to state 139
    BREAK           shift and go to state 136
    CONTINUE        shift and go to state 113
    GOTO            shift and go to state 87
    RETURN          shift and go to state 97
    NEW             shift and go to state 120
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88

    this-access                    shift and go to state 77
    member-access                  shift and go to state 79
    selection-statement            shift and go to state 116
    parenthesized-expression       shift and go to state 96
    empty-statement                shift and go to state 119
    return-statement               shift and go to state 98
    expression-statement           shift and go to state 81
    pre-decrement-expression       shift and go to state 108
    primary-no-array-creation-expression shift and go to state 82
    foreach-statement              shift and go to state 100
    break-statement                shift and go to state 121
    post-increment-expression      shift and go to state 83
    element-access                 shift and go to state 101
    statement-expression           shift and go to state 84
    base-access                    shift and go to state 126
    assignment                     shift and go to state 145
    for-statement                  shift and go to state 86
    do-statement                   shift and go to state 104
    array-creation-expression      shift and go to state 144
    continue-statement             shift and go to state 106
    literal                        shift and go to state 128
    invocation-expression          shift and go to state 95
    object-creation-expression     shift and go to state 146
    post-decrement-expression      shift and go to state 132
    switch-statement               shift and go to state 91
    pre-increment-expression       shift and go to state 147
    embedded-statement             shift and go to state 435
    iteration-statement            shift and go to state 135
    jump-statement                 shift and go to state 93
    goto-statement                 shift and go to state 111
    if-statement                   shift and go to state 112
    primary-expression             shift and go to state 149
    while-statement                shift and go to state 138
    block                          shift and go to state 114

state 423

    (226) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt . CLOSE_PAREN embedded-statement

    CLOSE_PAREN     shift and go to state 436


state 424

    (236) for-iterator -> statement-expression-list .
    (238) statement-expression-list -> statement-expression-list . COMMA statement-expression

    CLOSE_PAREN     reduce using rule 236 (for-iterator -> statement-expression-list .)
    COMMA           shift and go to state 369


state 425

    (235) for-iterator-opt -> empty .

    CLOSE_PAREN     reduce using rule 235 (for-iterator-opt -> empty .)


state 426

    (234) for-iterator-opt -> for-iterator .

    CLOSE_PAREN     reduce using rule 234 (for-iterator-opt -> for-iterator .)


state 427

    (218) switch-label -> CASE expression . COLON

    COLON           shift and go to state 437


state 428

    (219) switch-label -> DEFAULT COLON .

    CASE            reduce using rule 219 (switch-label -> DEFAULT COLON .)
    DEFAULT         reduce using rule 219 (switch-label -> DEFAULT COLON .)
    IDENTIFIER      reduce using rule 219 (switch-label -> DEFAULT COLON .)
    CONST           reduce using rule 219 (switch-label -> DEFAULT COLON .)
    BLOCK_BEGIN     reduce using rule 219 (switch-label -> DEFAULT COLON .)
    DELIM           reduce using rule 219 (switch-label -> DEFAULT COLON .)
    IF              reduce using rule 219 (switch-label -> DEFAULT COLON .)
    SWITCH          reduce using rule 219 (switch-label -> DEFAULT COLON .)
    WHILE           reduce using rule 219 (switch-label -> DEFAULT COLON .)
    FOR             reduce using rule 219 (switch-label -> DEFAULT COLON .)
    FOREACH         reduce using rule 219 (switch-label -> DEFAULT COLON .)
    DO              reduce using rule 219 (switch-label -> DEFAULT COLON .)
    BREAK           reduce using rule 219 (switch-label -> DEFAULT COLON .)
    CONTINUE        reduce using rule 219 (switch-label -> DEFAULT COLON .)
    GOTO            reduce using rule 219 (switch-label -> DEFAULT COLON .)
    RETURN          reduce using rule 219 (switch-label -> DEFAULT COLON .)
    BOOL            reduce using rule 219 (switch-label -> DEFAULT COLON .)
    NEW             reduce using rule 219 (switch-label -> DEFAULT COLON .)
    INCRE           reduce using rule 219 (switch-label -> DEFAULT COLON .)
    DECRE           reduce using rule 219 (switch-label -> DEFAULT COLON .)
    INT             reduce using rule 219 (switch-label -> DEFAULT COLON .)
    UINT            reduce using rule 219 (switch-label -> DEFAULT COLON .)
    LONG            reduce using rule 219 (switch-label -> DEFAULT COLON .)
    ULONG           reduce using rule 219 (switch-label -> DEFAULT COLON .)
    CHAR            reduce using rule 219 (switch-label -> DEFAULT COLON .)
    FLOAT           reduce using rule 219 (switch-label -> DEFAULT COLON .)
    DOUBLE          reduce using rule 219 (switch-label -> DEFAULT COLON .)
    ICONST          reduce using rule 219 (switch-label -> DEFAULT COLON .)
    UICONST         reduce using rule 219 (switch-label -> DEFAULT COLON .)
    LICONST         reduce using rule 219 (switch-label -> DEFAULT COLON .)
    ULICONST        reduce using rule 219 (switch-label -> DEFAULT COLON .)
    FCONST          reduce using rule 219 (switch-label -> DEFAULT COLON .)
    DCONST          reduce using rule 219 (switch-label -> DEFAULT COLON .)
    MCONST          reduce using rule 219 (switch-label -> DEFAULT COLON .)
    CCONST          reduce using rule 219 (switch-label -> DEFAULT COLON .)
    SCONST          reduce using rule 219 (switch-label -> DEFAULT COLON .)
    VSCONST         reduce using rule 219 (switch-label -> DEFAULT COLON .)
    TRUE            reduce using rule 219 (switch-label -> DEFAULT COLON .)
    FALSE           reduce using rule 219 (switch-label -> DEFAULT COLON .)
    OPEN_PAREN      reduce using rule 219 (switch-label -> DEFAULT COLON .)
    THIS            reduce using rule 219 (switch-label -> DEFAULT COLON .)
    BASE            reduce using rule 219 (switch-label -> DEFAULT COLON .)


state 429

    (217) switch-labels -> switch-labels switch-label .

    CASE            reduce using rule 217 (switch-labels -> switch-labels switch-label .)
    DEFAULT         reduce using rule 217 (switch-labels -> switch-labels switch-label .)
    IDENTIFIER      reduce using rule 217 (switch-labels -> switch-labels switch-label .)
    CONST           reduce using rule 217 (switch-labels -> switch-labels switch-label .)
    BLOCK_BEGIN     reduce using rule 217 (switch-labels -> switch-labels switch-label .)
    DELIM           reduce using rule 217 (switch-labels -> switch-labels switch-label .)
    IF              reduce using rule 217 (switch-labels -> switch-labels switch-label .)
    SWITCH          reduce using rule 217 (switch-labels -> switch-labels switch-label .)
    WHILE           reduce using rule 217 (switch-labels -> switch-labels switch-label .)
    FOR             reduce using rule 217 (switch-labels -> switch-labels switch-label .)
    FOREACH         reduce using rule 217 (switch-labels -> switch-labels switch-label .)
    DO              reduce using rule 217 (switch-labels -> switch-labels switch-label .)
    BREAK           reduce using rule 217 (switch-labels -> switch-labels switch-label .)
    CONTINUE        reduce using rule 217 (switch-labels -> switch-labels switch-label .)
    GOTO            reduce using rule 217 (switch-labels -> switch-labels switch-label .)
    RETURN          reduce using rule 217 (switch-labels -> switch-labels switch-label .)
    BOOL            reduce using rule 217 (switch-labels -> switch-labels switch-label .)
    NEW             reduce using rule 217 (switch-labels -> switch-labels switch-label .)
    INCRE           reduce using rule 217 (switch-labels -> switch-labels switch-label .)
    DECRE           reduce using rule 217 (switch-labels -> switch-labels switch-label .)
    INT             reduce using rule 217 (switch-labels -> switch-labels switch-label .)
    UINT            reduce using rule 217 (switch-labels -> switch-labels switch-label .)
    LONG            reduce using rule 217 (switch-labels -> switch-labels switch-label .)
    ULONG           reduce using rule 217 (switch-labels -> switch-labels switch-label .)
    CHAR            reduce using rule 217 (switch-labels -> switch-labels switch-label .)
    FLOAT           reduce using rule 217 (switch-labels -> switch-labels switch-label .)
    DOUBLE          reduce using rule 217 (switch-labels -> switch-labels switch-label .)
    ICONST          reduce using rule 217 (switch-labels -> switch-labels switch-label .)
    UICONST         reduce using rule 217 (switch-labels -> switch-labels switch-label .)
    LICONST         reduce using rule 217 (switch-labels -> switch-labels switch-label .)
    ULICONST        reduce using rule 217 (switch-labels -> switch-labels switch-label .)
    FCONST          reduce using rule 217 (switch-labels -> switch-labels switch-label .)
    DCONST          reduce using rule 217 (switch-labels -> switch-labels switch-label .)
    MCONST          reduce using rule 217 (switch-labels -> switch-labels switch-label .)
    CCONST          reduce using rule 217 (switch-labels -> switch-labels switch-label .)
    SCONST          reduce using rule 217 (switch-labels -> switch-labels switch-label .)
    VSCONST         reduce using rule 217 (switch-labels -> switch-labels switch-label .)
    TRUE            reduce using rule 217 (switch-labels -> switch-labels switch-label .)
    FALSE           reduce using rule 217 (switch-labels -> switch-labels switch-label .)
    OPEN_PAREN      reduce using rule 217 (switch-labels -> switch-labels switch-label .)
    THIS            reduce using rule 217 (switch-labels -> switch-labels switch-label .)
    BASE            reduce using rule 217 (switch-labels -> switch-labels switch-label .)


state 430

    (215) switch-section -> switch-labels statement-list .
    (174) statement-list -> statement-list . statement
    (175) statement -> . labeled-statement
    (176) statement -> . declaration-statement
    (177) statement -> . embedded-statement
    (178) labeled-statement -> . IDENTIFIER COLON statement
    (179) declaration-statement -> . local-variable-declaration DELIM
    (180) declaration-statement -> . local-constant-declaration DELIM
    (189) embedded-statement -> . block
    (190) embedded-statement -> . empty-statement
    (191) embedded-statement -> . expression-statement
    (192) embedded-statement -> . selection-statement
    (193) embedded-statement -> . iteration-statement
    (194) embedded-statement -> . jump-statement
    (181) local-variable-declaration -> . type local-variable-declarators
    (188) local-constant-declaration -> . CONST type constant-declarators
    (170) block -> . BLOCK_BEGIN statement-list-opt BLOCK_END
    (195) empty-statement -> . DELIM
    (196) expression-statement -> . statement-expression DELIM
    (204) selection-statement -> . if-statement
    (205) selection-statement -> . switch-statement
    (220) iteration-statement -> . while-statement
    (221) iteration-statement -> . for-statement
    (222) iteration-statement -> . foreach-statement
    (223) iteration-statement -> . do-statement
    (240) jump-statement -> . break-statement
    (241) jump-statement -> . continue-statement
    (242) jump-statement -> . goto-statement
    (243) jump-statement -> . return-statement
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (197) statement-expression -> . invocation-expression
    (198) statement-expression -> . object-creation-expression
    (199) statement-expression -> . assignment
    (200) statement-expression -> . post-increment-expression
    (201) statement-expression -> . post-decrement-expression
    (202) statement-expression -> . pre-increment-expression
    (203) statement-expression -> . pre-decrement-expression
    (206) if-statement -> . IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement
    (207) if-statement -> . IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement
    (209) switch-statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block
    (224) while-statement -> . WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement
    (226) for-statement -> . FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement
    (239) foreach-statement -> . FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement
    (225) do-statement -> . DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM
    (244) break-statement -> . BREAK DELIM
    (245) continue-statement -> . CONTINUE DELIM
    (246) goto-statement -> . GOTO IDENTIFIER DELIM
    (247) return-statement -> . RETURN expression-opt DELIM
    (29) simple-type -> . numeric-type
    (30) simple-type -> . BOOL
    (12) class-type -> . IDENTIFIER
    (40) array-type -> . simple-type rank-specifier
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (133) assignment -> . primary-expression assignment-operator expression
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression
    (31) numeric-type -> . integral-type
    (32) numeric-type -> . floating-point-type
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (33) integral-type -> . INT
    (34) integral-type -> . UINT
    (35) integral-type -> . LONG
    (36) integral-type -> . ULONG
    (37) integral-type -> . CHAR
    (38) floating-point-type -> . FLOAT
    (39) floating-point-type -> . DOUBLE
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET

    CASE            reduce using rule 215 (switch-section -> switch-labels statement-list .)
    DEFAULT         reduce using rule 215 (switch-section -> switch-labels statement-list .)
    BLOCK_END       reduce using rule 215 (switch-section -> switch-labels statement-list .)
    IDENTIFIER      shift and go to state 129
    CONST           shift and go to state 140
    BLOCK_BEGIN     shift and go to state 55
    DELIM           shift and go to state 115
    IF              shift and go to state 148
    SWITCH          shift and go to state 124
    WHILE           shift and go to state 118
    FOR             shift and go to state 105
    FOREACH         shift and go to state 90
    DO              shift and go to state 139
    BREAK           shift and go to state 136
    CONTINUE        shift and go to state 113
    GOTO            shift and go to state 87
    RETURN          shift and go to state 97
    BOOL            shift and go to state 48
    NEW             shift and go to state 120
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117
    INT             shift and go to state 25
    UINT            shift and go to state 42
    LONG            shift and go to state 44
    ULONG           shift and go to state 27
    CHAR            shift and go to state 22
    FLOAT           shift and go to state 47
    DOUBLE          shift and go to state 52
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88

    this-access                    shift and go to state 77
    return-statement               shift and go to state 98
    member-access                  shift and go to state 79
    selection-statement            shift and go to state 116
    parenthesized-expression       shift and go to state 96
    array-creation-expression      shift and go to state 144
    empty-statement                shift and go to state 119
    expression-statement           shift and go to state 81
    pre-decrement-expression       shift and go to state 108
    primary-no-array-creation-expression shift and go to state 82
    integral-type                  shift and go to state 26
    foreach-statement              shift and go to state 100
    break-statement                shift and go to state 121
    post-increment-expression      shift and go to state 83
    element-access                 shift and go to state 101
    statement-expression           shift and go to state 84
    local-constant-declaration     shift and go to state 102
    literal                        shift and go to state 128
    statement                      shift and go to state 229
    assignment                     shift and go to state 145
    for-statement                  shift and go to state 86
    type                           shift and go to state 130
    do-statement                   shift and go to state 104
    array-type                     shift and go to state 36
    floating-point-type            shift and go to state 39
    continue-statement             shift and go to state 106
    primary-expression             shift and go to state 149
    invocation-expression          shift and go to state 95
    labeled-statement              shift and go to state 89
    declaration-statement          shift and go to state 133
    object-creation-expression     shift and go to state 146
    post-decrement-expression      shift and go to state 132
    switch-statement               shift and go to state 91
    pre-increment-expression       shift and go to state 147
    numeric-type                   shift and go to state 28
    embedded-statement             shift and go to state 92
    base-access                    shift and go to state 126
    jump-statement                 shift and go to state 93
    iteration-statement            shift and go to state 135
    local-variable-declaration     shift and go to state 109
    goto-statement                 shift and go to state 111
    if-statement                   shift and go to state 112
    class-type                     shift and go to state 49
    while-statement                shift and go to state 138
    simple-type                    shift and go to state 23
    block                          shift and go to state 114

state 431

    (210) switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .

    IDENTIFIER      reduce using rule 210 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    CONST           reduce using rule 210 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    BLOCK_BEGIN     reduce using rule 210 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    DELIM           reduce using rule 210 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    IF              reduce using rule 210 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    SWITCH          reduce using rule 210 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    WHILE           reduce using rule 210 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    FOR             reduce using rule 210 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    FOREACH         reduce using rule 210 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    DO              reduce using rule 210 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    BREAK           reduce using rule 210 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    CONTINUE        reduce using rule 210 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    GOTO            reduce using rule 210 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    RETURN          reduce using rule 210 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    BOOL            reduce using rule 210 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    NEW             reduce using rule 210 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    INCRE           reduce using rule 210 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    DECRE           reduce using rule 210 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    INT             reduce using rule 210 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    UINT            reduce using rule 210 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    LONG            reduce using rule 210 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    ULONG           reduce using rule 210 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    CHAR            reduce using rule 210 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    FLOAT           reduce using rule 210 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    DOUBLE          reduce using rule 210 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    ICONST          reduce using rule 210 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    UICONST         reduce using rule 210 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    LICONST         reduce using rule 210 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    ULICONST        reduce using rule 210 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    FCONST          reduce using rule 210 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    DCONST          reduce using rule 210 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    MCONST          reduce using rule 210 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    CCONST          reduce using rule 210 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    SCONST          reduce using rule 210 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    VSCONST         reduce using rule 210 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    TRUE            reduce using rule 210 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    FALSE           reduce using rule 210 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    OPEN_PAREN      reduce using rule 210 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    THIS            reduce using rule 210 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    BASE            reduce using rule 210 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    BLOCK_END       reduce using rule 210 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    CASE            reduce using rule 210 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    DEFAULT         reduce using rule 210 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    ELSE            reduce using rule 210 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)


state 432

    (214) switch-sections -> switch-sections switch-section .

    CASE            reduce using rule 214 (switch-sections -> switch-sections switch-section .)
    DEFAULT         reduce using rule 214 (switch-sections -> switch-sections switch-section .)
    BLOCK_END       reduce using rule 214 (switch-sections -> switch-sections switch-section .)


state 433

    (225) do-statement -> DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM .

    IDENTIFIER      reduce using rule 225 (do-statement -> DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM .)
    CONST           reduce using rule 225 (do-statement -> DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM .)
    BLOCK_BEGIN     reduce using rule 225 (do-statement -> DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM .)
    DELIM           reduce using rule 225 (do-statement -> DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM .)
    IF              reduce using rule 225 (do-statement -> DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM .)
    SWITCH          reduce using rule 225 (do-statement -> DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM .)
    WHILE           reduce using rule 225 (do-statement -> DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM .)
    FOR             reduce using rule 225 (do-statement -> DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM .)
    FOREACH         reduce using rule 225 (do-statement -> DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM .)
    DO              reduce using rule 225 (do-statement -> DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM .)
    BREAK           reduce using rule 225 (do-statement -> DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM .)
    CONTINUE        reduce using rule 225 (do-statement -> DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM .)
    GOTO            reduce using rule 225 (do-statement -> DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM .)
    RETURN          reduce using rule 225 (do-statement -> DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM .)
    BOOL            reduce using rule 225 (do-statement -> DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM .)
    NEW             reduce using rule 225 (do-statement -> DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM .)
    INCRE           reduce using rule 225 (do-statement -> DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM .)
    DECRE           reduce using rule 225 (do-statement -> DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM .)
    INT             reduce using rule 225 (do-statement -> DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM .)
    UINT            reduce using rule 225 (do-statement -> DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM .)
    LONG            reduce using rule 225 (do-statement -> DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM .)
    ULONG           reduce using rule 225 (do-statement -> DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM .)
    CHAR            reduce using rule 225 (do-statement -> DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM .)
    FLOAT           reduce using rule 225 (do-statement -> DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM .)
    DOUBLE          reduce using rule 225 (do-statement -> DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM .)
    ICONST          reduce using rule 225 (do-statement -> DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM .)
    UICONST         reduce using rule 225 (do-statement -> DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM .)
    LICONST         reduce using rule 225 (do-statement -> DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM .)
    ULICONST        reduce using rule 225 (do-statement -> DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM .)
    FCONST          reduce using rule 225 (do-statement -> DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM .)
    DCONST          reduce using rule 225 (do-statement -> DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM .)
    MCONST          reduce using rule 225 (do-statement -> DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM .)
    CCONST          reduce using rule 225 (do-statement -> DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM .)
    SCONST          reduce using rule 225 (do-statement -> DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM .)
    VSCONST         reduce using rule 225 (do-statement -> DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM .)
    TRUE            reduce using rule 225 (do-statement -> DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM .)
    FALSE           reduce using rule 225 (do-statement -> DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM .)
    OPEN_PAREN      reduce using rule 225 (do-statement -> DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM .)
    THIS            reduce using rule 225 (do-statement -> DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM .)
    BASE            reduce using rule 225 (do-statement -> DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM .)
    BLOCK_END       reduce using rule 225 (do-statement -> DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM .)
    CASE            reduce using rule 225 (do-statement -> DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM .)
    DEFAULT         reduce using rule 225 (do-statement -> DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM .)
    ELSE            reduce using rule 225 (do-statement -> DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM .)


state 434

    (207) if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement .

    IDENTIFIER      reduce using rule 207 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement .)
    CONST           reduce using rule 207 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement .)
    BLOCK_BEGIN     reduce using rule 207 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement .)
    DELIM           reduce using rule 207 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement .)
    IF              reduce using rule 207 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement .)
    SWITCH          reduce using rule 207 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement .)
    WHILE           reduce using rule 207 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement .)
    FOR             reduce using rule 207 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement .)
    FOREACH         reduce using rule 207 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement .)
    DO              reduce using rule 207 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement .)
    BREAK           reduce using rule 207 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement .)
    CONTINUE        reduce using rule 207 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement .)
    GOTO            reduce using rule 207 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement .)
    RETURN          reduce using rule 207 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement .)
    BOOL            reduce using rule 207 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement .)
    NEW             reduce using rule 207 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement .)
    INCRE           reduce using rule 207 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement .)
    DECRE           reduce using rule 207 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement .)
    INT             reduce using rule 207 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement .)
    UINT            reduce using rule 207 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement .)
    LONG            reduce using rule 207 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement .)
    ULONG           reduce using rule 207 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement .)
    CHAR            reduce using rule 207 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement .)
    FLOAT           reduce using rule 207 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement .)
    DOUBLE          reduce using rule 207 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement .)
    ICONST          reduce using rule 207 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement .)
    UICONST         reduce using rule 207 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement .)
    LICONST         reduce using rule 207 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement .)
    ULICONST        reduce using rule 207 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement .)
    FCONST          reduce using rule 207 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement .)
    DCONST          reduce using rule 207 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement .)
    MCONST          reduce using rule 207 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement .)
    CCONST          reduce using rule 207 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement .)
    SCONST          reduce using rule 207 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement .)
    VSCONST         reduce using rule 207 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement .)
    TRUE            reduce using rule 207 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement .)
    FALSE           reduce using rule 207 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement .)
    OPEN_PAREN      reduce using rule 207 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement .)
    THIS            reduce using rule 207 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement .)
    BASE            reduce using rule 207 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement .)
    CASE            reduce using rule 207 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement .)
    DEFAULT         reduce using rule 207 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement .)
    BLOCK_END       reduce using rule 207 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement .)
    ELSE            reduce using rule 207 (if-statement -> IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement .)


state 435

    (239) foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement .

    IDENTIFIER      reduce using rule 239 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement .)
    CONST           reduce using rule 239 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement .)
    BLOCK_BEGIN     reduce using rule 239 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement .)
    DELIM           reduce using rule 239 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement .)
    IF              reduce using rule 239 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement .)
    SWITCH          reduce using rule 239 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement .)
    WHILE           reduce using rule 239 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement .)
    FOR             reduce using rule 239 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement .)
    FOREACH         reduce using rule 239 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement .)
    DO              reduce using rule 239 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement .)
    BREAK           reduce using rule 239 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement .)
    CONTINUE        reduce using rule 239 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement .)
    GOTO            reduce using rule 239 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement .)
    RETURN          reduce using rule 239 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement .)
    BOOL            reduce using rule 239 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement .)
    NEW             reduce using rule 239 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement .)
    INCRE           reduce using rule 239 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement .)
    DECRE           reduce using rule 239 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement .)
    INT             reduce using rule 239 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement .)
    UINT            reduce using rule 239 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement .)
    LONG            reduce using rule 239 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement .)
    ULONG           reduce using rule 239 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement .)
    CHAR            reduce using rule 239 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement .)
    FLOAT           reduce using rule 239 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement .)
    DOUBLE          reduce using rule 239 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement .)
    ICONST          reduce using rule 239 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement .)
    UICONST         reduce using rule 239 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement .)
    LICONST         reduce using rule 239 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement .)
    ULICONST        reduce using rule 239 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement .)
    FCONST          reduce using rule 239 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement .)
    DCONST          reduce using rule 239 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement .)
    MCONST          reduce using rule 239 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement .)
    CCONST          reduce using rule 239 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement .)
    SCONST          reduce using rule 239 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement .)
    VSCONST         reduce using rule 239 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement .)
    TRUE            reduce using rule 239 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement .)
    FALSE           reduce using rule 239 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement .)
    OPEN_PAREN      reduce using rule 239 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement .)
    THIS            reduce using rule 239 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement .)
    BASE            reduce using rule 239 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement .)
    CASE            reduce using rule 239 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement .)
    DEFAULT         reduce using rule 239 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement .)
    BLOCK_END       reduce using rule 239 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement .)
    ELSE            reduce using rule 239 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement .)


state 436

    (226) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN . embedded-statement
    (189) embedded-statement -> . block
    (190) embedded-statement -> . empty-statement
    (191) embedded-statement -> . expression-statement
    (192) embedded-statement -> . selection-statement
    (193) embedded-statement -> . iteration-statement
    (194) embedded-statement -> . jump-statement
    (170) block -> . BLOCK_BEGIN statement-list-opt BLOCK_END
    (195) empty-statement -> . DELIM
    (196) expression-statement -> . statement-expression DELIM
    (204) selection-statement -> . if-statement
    (205) selection-statement -> . switch-statement
    (220) iteration-statement -> . while-statement
    (221) iteration-statement -> . for-statement
    (222) iteration-statement -> . foreach-statement
    (223) iteration-statement -> . do-statement
    (240) jump-statement -> . break-statement
    (241) jump-statement -> . continue-statement
    (242) jump-statement -> . goto-statement
    (243) jump-statement -> . return-statement
    (197) statement-expression -> . invocation-expression
    (198) statement-expression -> . object-creation-expression
    (199) statement-expression -> . assignment
    (200) statement-expression -> . post-increment-expression
    (201) statement-expression -> . post-decrement-expression
    (202) statement-expression -> . pre-increment-expression
    (203) statement-expression -> . pre-decrement-expression
    (206) if-statement -> . IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement
    (207) if-statement -> . IF OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement ELSE embedded-statement
    (209) switch-statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block
    (224) while-statement -> . WHILE OPEN_PAREN boolean-expression CLOSE_PAREN embedded-statement
    (226) for-statement -> . FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement
    (239) foreach-statement -> . FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN embedded-statement
    (225) do-statement -> . DO embedded-statement WHILE OPEN_PAREN boolean-expression CLOSE_PAREN DELIM
    (244) break-statement -> . BREAK DELIM
    (245) continue-statement -> . CONTINUE DELIM
    (246) goto-statement -> . GOTO IDENTIFIER DELIM
    (247) return-statement -> . RETURN expression-opt DELIM
    (116) invocation-expression -> . primary-expression OPEN_PAREN argument-list-opt CLOSE_PAREN
    (130) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (133) assignment -> . primary-expression assignment-operator expression
    (128) post-increment-expression -> . primary-expression INCRE
    (129) post-decrement-expression -> . primary-expression DECRE
    (131) pre-increment-expression -> . INCRE unary-expression
    (132) pre-decrement-expression -> . DECRE unary-expression
    (89) primary-expression -> . array-creation-expression
    (90) primary-expression -> . primary-no-array-creation-expression
    (91) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (103) primary-no-array-creation-expression -> . literal
    (104) primary-no-array-creation-expression -> . IDENTIFIER
    (105) primary-no-array-creation-expression -> . parenthesized-expression
    (106) primary-no-array-creation-expression -> . member-access
    (107) primary-no-array-creation-expression -> . invocation-expression
    (108) primary-no-array-creation-expression -> . element-access
    (109) primary-no-array-creation-expression -> . this-access
    (110) primary-no-array-creation-expression -> . base-access
    (111) primary-no-array-creation-expression -> . post-increment-expression
    (112) primary-no-array-creation-expression -> . post-decrement-expression
    (113) primary-no-array-creation-expression -> . object-creation-expression
    (257) literal -> . ICONST
    (258) literal -> . UICONST
    (259) literal -> . LICONST
    (260) literal -> . ULICONST
    (261) literal -> . FCONST
    (262) literal -> . DCONST
    (263) literal -> . MCONST
    (264) literal -> . CCONST
    (265) literal -> . SCONST
    (266) literal -> . VSCONST
    (267) literal -> . TRUE
    (268) literal -> . FALSE
    (114) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (115) member-access -> . primary-expression DOT IDENTIFIER
    (124) element-access -> . primary-no-array-creation-expression OPEN_BRACKET expression-list CLOSE_BRACKET
    (125) this-access -> . THIS
    (126) base-access -> . BASE DOT IDENTIFIER
    (127) base-access -> . BASE OPEN_BRACKET expression-list CLOSE_BRACKET

    BLOCK_BEGIN     shift and go to state 55
    DELIM           shift and go to state 115
    IF              shift and go to state 148
    SWITCH          shift and go to state 124
    WHILE           shift and go to state 118
    FOR             shift and go to state 105
    FOREACH         shift and go to state 90
    DO              shift and go to state 139
    BREAK           shift and go to state 136
    CONTINUE        shift and go to state 113
    GOTO            shift and go to state 87
    RETURN          shift and go to state 97
    NEW             shift and go to state 120
    INCRE           shift and go to state 122
    DECRE           shift and go to state 117
    IDENTIFIER      shift and go to state 194
    ICONST          shift and go to state 150
    UICONST         shift and go to state 103
    LICONST         shift and go to state 78
    ULICONST        shift and go to state 85
    FCONST          shift and go to state 99
    DCONST          shift and go to state 141
    MCONST          shift and go to state 107
    CCONST          shift and go to state 143
    SCONST          shift and go to state 123
    VSCONST         shift and go to state 110
    TRUE            shift and go to state 80
    FALSE           shift and go to state 134
    OPEN_PAREN      shift and go to state 125
    THIS            shift and go to state 94
    BASE            shift and go to state 88

    this-access                    shift and go to state 77
    member-access                  shift and go to state 79
    selection-statement            shift and go to state 116
    parenthesized-expression       shift and go to state 96
    empty-statement                shift and go to state 119
    return-statement               shift and go to state 98
    expression-statement           shift and go to state 81
    pre-decrement-expression       shift and go to state 108
    primary-no-array-creation-expression shift and go to state 82
    foreach-statement              shift and go to state 100
    break-statement                shift and go to state 121
    post-increment-expression      shift and go to state 83
    element-access                 shift and go to state 101
    statement-expression           shift and go to state 84
    base-access                    shift and go to state 126
    assignment                     shift and go to state 145
    for-statement                  shift and go to state 86
    do-statement                   shift and go to state 104
    array-creation-expression      shift and go to state 144
    continue-statement             shift and go to state 106
    literal                        shift and go to state 128
    invocation-expression          shift and go to state 95
    object-creation-expression     shift and go to state 146
    post-decrement-expression      shift and go to state 132
    switch-statement               shift and go to state 91
    pre-increment-expression       shift and go to state 147
    embedded-statement             shift and go to state 438
    iteration-statement            shift and go to state 135
    jump-statement                 shift and go to state 93
    goto-statement                 shift and go to state 111
    if-statement                   shift and go to state 112
    primary-expression             shift and go to state 149
    while-statement                shift and go to state 138
    block                          shift and go to state 114

state 437

    (218) switch-label -> CASE expression COLON .

    CASE            reduce using rule 218 (switch-label -> CASE expression COLON .)
    DEFAULT         reduce using rule 218 (switch-label -> CASE expression COLON .)
    IDENTIFIER      reduce using rule 218 (switch-label -> CASE expression COLON .)
    CONST           reduce using rule 218 (switch-label -> CASE expression COLON .)
    BLOCK_BEGIN     reduce using rule 218 (switch-label -> CASE expression COLON .)
    DELIM           reduce using rule 218 (switch-label -> CASE expression COLON .)
    IF              reduce using rule 218 (switch-label -> CASE expression COLON .)
    SWITCH          reduce using rule 218 (switch-label -> CASE expression COLON .)
    WHILE           reduce using rule 218 (switch-label -> CASE expression COLON .)
    FOR             reduce using rule 218 (switch-label -> CASE expression COLON .)
    FOREACH         reduce using rule 218 (switch-label -> CASE expression COLON .)
    DO              reduce using rule 218 (switch-label -> CASE expression COLON .)
    BREAK           reduce using rule 218 (switch-label -> CASE expression COLON .)
    CONTINUE        reduce using rule 218 (switch-label -> CASE expression COLON .)
    GOTO            reduce using rule 218 (switch-label -> CASE expression COLON .)
    RETURN          reduce using rule 218 (switch-label -> CASE expression COLON .)
    BOOL            reduce using rule 218 (switch-label -> CASE expression COLON .)
    NEW             reduce using rule 218 (switch-label -> CASE expression COLON .)
    INCRE           reduce using rule 218 (switch-label -> CASE expression COLON .)
    DECRE           reduce using rule 218 (switch-label -> CASE expression COLON .)
    INT             reduce using rule 218 (switch-label -> CASE expression COLON .)
    UINT            reduce using rule 218 (switch-label -> CASE expression COLON .)
    LONG            reduce using rule 218 (switch-label -> CASE expression COLON .)
    ULONG           reduce using rule 218 (switch-label -> CASE expression COLON .)
    CHAR            reduce using rule 218 (switch-label -> CASE expression COLON .)
    FLOAT           reduce using rule 218 (switch-label -> CASE expression COLON .)
    DOUBLE          reduce using rule 218 (switch-label -> CASE expression COLON .)
    ICONST          reduce using rule 218 (switch-label -> CASE expression COLON .)
    UICONST         reduce using rule 218 (switch-label -> CASE expression COLON .)
    LICONST         reduce using rule 218 (switch-label -> CASE expression COLON .)
    ULICONST        reduce using rule 218 (switch-label -> CASE expression COLON .)
    FCONST          reduce using rule 218 (switch-label -> CASE expression COLON .)
    DCONST          reduce using rule 218 (switch-label -> CASE expression COLON .)
    MCONST          reduce using rule 218 (switch-label -> CASE expression COLON .)
    CCONST          reduce using rule 218 (switch-label -> CASE expression COLON .)
    SCONST          reduce using rule 218 (switch-label -> CASE expression COLON .)
    VSCONST         reduce using rule 218 (switch-label -> CASE expression COLON .)
    TRUE            reduce using rule 218 (switch-label -> CASE expression COLON .)
    FALSE           reduce using rule 218 (switch-label -> CASE expression COLON .)
    OPEN_PAREN      reduce using rule 218 (switch-label -> CASE expression COLON .)
    THIS            reduce using rule 218 (switch-label -> CASE expression COLON .)
    BASE            reduce using rule 218 (switch-label -> CASE expression COLON .)


state 438

    (226) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement .

    IDENTIFIER      reduce using rule 226 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement .)
    CONST           reduce using rule 226 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement .)
    BLOCK_BEGIN     reduce using rule 226 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement .)
    DELIM           reduce using rule 226 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement .)
    IF              reduce using rule 226 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement .)
    SWITCH          reduce using rule 226 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement .)
    WHILE           reduce using rule 226 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement .)
    FOR             reduce using rule 226 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement .)
    FOREACH         reduce using rule 226 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement .)
    DO              reduce using rule 226 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement .)
    BREAK           reduce using rule 226 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement .)
    CONTINUE        reduce using rule 226 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement .)
    GOTO            reduce using rule 226 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement .)
    RETURN          reduce using rule 226 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement .)
    BOOL            reduce using rule 226 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement .)
    NEW             reduce using rule 226 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement .)
    INCRE           reduce using rule 226 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement .)
    DECRE           reduce using rule 226 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement .)
    INT             reduce using rule 226 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement .)
    UINT            reduce using rule 226 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement .)
    LONG            reduce using rule 226 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement .)
    ULONG           reduce using rule 226 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement .)
    CHAR            reduce using rule 226 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement .)
    FLOAT           reduce using rule 226 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement .)
    DOUBLE          reduce using rule 226 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement .)
    ICONST          reduce using rule 226 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement .)
    UICONST         reduce using rule 226 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement .)
    LICONST         reduce using rule 226 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement .)
    ULICONST        reduce using rule 226 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement .)
    FCONST          reduce using rule 226 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement .)
    DCONST          reduce using rule 226 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement .)
    MCONST          reduce using rule 226 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement .)
    CCONST          reduce using rule 226 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement .)
    SCONST          reduce using rule 226 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement .)
    VSCONST         reduce using rule 226 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement .)
    TRUE            reduce using rule 226 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement .)
    FALSE           reduce using rule 226 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement .)
    OPEN_PAREN      reduce using rule 226 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement .)
    THIS            reduce using rule 226 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement .)
    BASE            reduce using rule 226 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement .)
    CASE            reduce using rule 226 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement .)
    DEFAULT         reduce using rule 226 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement .)
    BLOCK_END       reduce using rule 226 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement .)
    ELSE            reduce using rule 226 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN embedded-statement .)

