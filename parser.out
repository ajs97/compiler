Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    LICONST
    LONG
    INCRE
    BASE
    FOREACH
    THIS
    FCONST
    ULONG
    MCONST
    VSCONST
    DECRE
    SCONST
    UICONST
    CCONST
    IN
    FLOAT
    ULICONST

Grammar

Rule 0     S' -> compilation-unit
Rule 1     compilation-unit -> class-declarations-opt
Rule 2     compilation-unit -> statement-list
Rule 3     semi-opt -> DELIM
Rule 4     semi-opt -> empty
Rule 5     class-declarations-opt -> class-declarations
Rule 6     class-declarations-opt -> empty
Rule 7     class-declarations -> class-declaration
Rule 8     class-declarations -> class-declarations class-declaration
Rule 9     class-declaration -> CLASS IDENTIFIER class-base-opt class-body semi-opt
Rule 10    class-base-opt -> class-base
Rule 11    class-base-opt -> empty
Rule 12    class-base -> COLON class-type
Rule 13    class-type -> IDENTIFIER
Rule 14    class-body -> BLOCK_BEGIN class-member-declarations-opt BLOCK_END
Rule 15    class-member-declarations-opt -> class-member-declarations
Rule 16    class-member-declarations-opt -> empty
Rule 17    class-member-declarations -> class-member-declaration
Rule 18    class-member-declarations -> class-member-declarations class-member-declaration
Rule 19    class-member-declaration -> constant-declaration
Rule 20    class-member-declaration -> field-declaration
Rule 21    class-member-declaration -> method-declaration
Rule 22    class-member-declaration -> constructor-declaration
Rule 23    class-member-declaration -> destructor-declaration
Rule 24    constant-declaration -> modifier CONST simple-type constant-declarators DELIM
Rule 25    constant-declaration -> CONST simple-type constant-declarators DELIM
Rule 26    type -> simple-type
Rule 27    type -> class-type
Rule 28    type -> array-type
Rule 29    simple-type -> BOOL
Rule 30    simple-type -> INT
Rule 31    simple-type -> UINT
Rule 32    simple-type -> CHAR
Rule 33    simple-type -> DOUBLE
Rule 34    array-type -> simple-type OPEN_BRACKET ICONST CLOSE_BRACKET
Rule 35    constant-declarators -> constant-declarator
Rule 36    constant-declarators -> constant-declarators COMMA constant-declarator
Rule 37    constant-declarator -> IDENTIFIER ASSIGN expression
Rule 38    expression -> conditional-expression
Rule 39    expression -> assignment
Rule 40    conditional-expression -> conditional-or-expression
Rule 41    conditional-expression -> conditional-or-expression CONDOP expression COLON expression
Rule 42    conditional-or-expression -> conditional-and-expression
Rule 43    conditional-or-expression -> conditional-or-expression LOGOR conditional-and-expression
Rule 44    conditional-and-expression -> inclusive-or-expression
Rule 45    conditional-and-expression -> conditional-and-expression LOGAND inclusive-or-expression
Rule 46    inclusive-or-expression -> exclusive-or-expression
Rule 47    inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression
Rule 48    exclusive-or-expression -> and-expression
Rule 49    exclusive-or-expression -> exclusive-or-expression BITXOR and-expression
Rule 50    and-expression -> equality-expression
Rule 51    and-expression -> and-expression BITAND equality-expression
Rule 52    equality-expression -> relational-expression
Rule 53    equality-expression -> equality-expression EQ relational-expression
Rule 54    equality-expression -> equality-expression NE relational-expression
Rule 55    relational-expression -> shift-expression
Rule 56    relational-expression -> relational-expression LT shift-expression
Rule 57    relational-expression -> relational-expression GT shift-expression
Rule 58    relational-expression -> relational-expression LE shift-expression
Rule 59    relational-expression -> relational-expression GE shift-expression
Rule 60    shift-expression -> additive-expression
Rule 61    shift-expression -> shift-expression LSHIFT additive-expression
Rule 62    shift-expression -> shift-expression RSHIFT additive-expression
Rule 63    additive-expression -> multiplicative-expression
Rule 64    additive-expression -> additive-expression PLUS multiplicative-expression
Rule 65    additive-expression -> additive-expression MINUS multiplicative-expression
Rule 66    multiplicative-expression -> unary-expression
Rule 67    multiplicative-expression -> multiplicative-expression TIMES unary-expression
Rule 68    multiplicative-expression -> multiplicative-expression DIV unary-expression
Rule 69    multiplicative-expression -> multiplicative-expression MOD unary-expression
Rule 70    unary-expression -> primary-expression
Rule 71    unary-expression -> PLUS unary-expression
Rule 72    unary-expression -> MINUS unary-expression
Rule 73    unary-expression -> BITNOT unary-expression
Rule 74    unary-expression -> BITCOMP unary-expression
Rule 75    primary-expression -> array-creation-expression
Rule 76    primary-expression -> primary-no-array-creation-expression
Rule 77    array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
Rule 78    array-initializer-opt -> array-initializer
Rule 79    array-initializer-opt -> empty
Rule 80    expression-list -> expression
Rule 81    expression-list -> expression-list COMMA expression
Rule 82    array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END
Rule 83    variable-initializer-list-opt -> expression-list
Rule 84    variable-initializer-list-opt -> empty
Rule 85    variable-initializer -> expression
Rule 86    variable-initializer -> array-initializer
Rule 87    primary-no-array-creation-expression -> literal
Rule 88    primary-no-array-creation-expression -> IDENTIFIER
Rule 89    primary-no-array-creation-expression -> parenthesized-expression
Rule 90    primary-no-array-creation-expression -> member-access
Rule 91    primary-no-array-creation-expression -> invocation-expression
Rule 92    primary-no-array-creation-expression -> element-access
Rule 93    parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN
Rule 94    member-access -> IDENTIFIER DOT IDENTIFIER
Rule 95    member-access -> member-access DOT IDENTIFIER
Rule 96    invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
Rule 97    invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
Rule 98    argument-list-opt -> expression-list
Rule 99    argument-list-opt -> empty
Rule 100   element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
Rule 101   element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET
Rule 102   prim-expression -> IDENTIFIER
Rule 103   prim-expression -> member-access
Rule 104   prim-expression -> element-access
Rule 105   assignment -> prim-expression assignment-operator expression
Rule 106   assignment-operator -> ASSIGN
Rule 107   assignment-operator -> PLUSEQUAL
Rule 108   assignment-operator -> MINUSEQUAL
Rule 109   assignment-operator -> TIMESEQUAL
Rule 110   assignment-operator -> DIVEQUAL
Rule 111   assignment-operator -> MODEQUAL
Rule 112   assignment-operator -> BITANDEQUAL
Rule 113   assignment-operator -> BITOREQUAL
Rule 114   assignment-operator -> BITXOREQUAL
Rule 115   assignment-operator -> LSHIFTEQUAL
Rule 116   assignment-operator -> RSHIFTEQUAL
Rule 117   field-declaration -> modifier type variable-declarators DELIM
Rule 118   field-declaration -> type variable-declarators DELIM
Rule 119   modifier -> PUBLIC
Rule 120   modifier -> PRIVATE
Rule 121   variable-declarators -> variable-declarator
Rule 122   variable-declarators -> variable-declarators COMMA variable-declarator
Rule 123   variable-declarator -> IDENTIFIER
Rule 124   variable-declarator -> IDENTIFIER ASSIGN variable-initializer
Rule 125   method-declaration -> method-header method-body
Rule 126   method-header -> modifier type member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
Rule 127   method-header -> modifier VOID member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
Rule 128   method-header -> type member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
Rule 129   method-header -> VOID member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
Rule 130   formal-parameter-list-opt -> formal-parameter-list
Rule 131   formal-parameter-list-opt -> empty
Rule 132   member-name -> IDENTIFIER
Rule 133   formal-parameter-list -> fixed-parameters
Rule 134   fixed-parameters -> fixed-parameter
Rule 135   fixed-parameters -> fixed-parameters COMMA fixed-parameter
Rule 136   fixed-parameter -> type IDENTIFIER
Rule 137   method-body -> block
Rule 138   method-body -> DELIM
Rule 139   block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END
Rule 140   M_bstart -> empty
Rule 141   statement-list-opt -> statement-list
Rule 142   statement-list-opt -> empty
Rule 143   statement-list -> statement
Rule 144   statement-list -> statement-list statement
Rule 145   statement -> labeled-statement
Rule 146   statement -> declaration-statement
Rule 147   statement -> block
Rule 148   statement -> empty-statement
Rule 149   statement -> expression-statement
Rule 150   statement -> selection-statement
Rule 151   statement -> iteration-statement
Rule 152   statement -> jump-statement
Rule 153   statement -> write-statement
Rule 154   statement -> read-statement
Rule 155   write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM
Rule 156   print-list -> expression
Rule 157   print-list -> expression COMMA print-list
Rule 158   read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM
Rule 159   labeled-statement -> IDENTIFIER COLON statement
Rule 160   declaration-statement -> local-variable-declaration DELIM
Rule 161   declaration-statement -> local-constant-declaration DELIM
Rule 162   local-variable-declaration -> type variable-declarators
Rule 163   local-constant-declaration -> CONST type constant-declarators
Rule 164   empty-statement -> DELIM
Rule 165   expression-statement -> statement-expression DELIM
Rule 166   statement-expression -> invocation-expression
Rule 167   statement-expression -> assignment
Rule 168   selection-statement -> if-statement M_quad
Rule 169   selection-statement -> switch-statement
Rule 170   if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block
Rule 171   if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block
Rule 172   M_if -> empty
Rule 173   M_else -> empty
Rule 174   M_quad -> empty
Rule 175   switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block
Rule 176   switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END
Rule 177   switch-sections-opt -> switch-sections
Rule 178   switch-sections-opt -> empty
Rule 179   switch-sections -> switch-section
Rule 180   switch-sections -> switch-sections switch-section
Rule 181   switch-section -> switch-labels statement-list
Rule 182   switch-labels -> switch-label
Rule 183   switch-labels -> switch-labels switch-label
Rule 184   switch-label -> CASE expression COLON
Rule 185   switch-label -> DEFAULT COLON
Rule 186   iteration-statement -> while-statement M_quad
Rule 187   iteration-statement -> for-statement M_quad
Rule 188   iteration-statement -> do-statement M_quad
Rule 189   while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block
Rule 190   M_while -> empty
Rule 191   do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM
Rule 192   for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block
Rule 193   for-initializer-opt -> for-initializer
Rule 194   for-initializer-opt -> empty
Rule 195   for-initializer -> statement-expression-list
Rule 196   for-condition -> expression
Rule 197   for-iterator-opt -> for-iterator
Rule 198   for-iterator-opt -> empty
Rule 199   for-iterator -> statement-expression-list
Rule 200   statement-expression-list -> statement-expression
Rule 201   statement-expression-list -> statement-expression-list COMMA statement-expression
Rule 202   jump-statement -> break-statement
Rule 203   jump-statement -> continue-statement
Rule 204   jump-statement -> goto-statement
Rule 205   jump-statement -> return-statement
Rule 206   break-statement -> BREAK DELIM
Rule 207   continue-statement -> CONTINUE DELIM
Rule 208   goto-statement -> GOTO IDENTIFIER DELIM
Rule 209   return-statement -> RETURN expression-opt DELIM
Rule 210   expression-opt -> expression
Rule 211   expression-opt -> empty
Rule 212   constructor-declaration -> constructor-declarator constructor-body
Rule 213   constructor-declarator -> IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
Rule 214   constructor-body -> block
Rule 215   constructor-body -> DELIM
Rule 216   destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body
Rule 217   destructor-body -> block
Rule 218   destructor-body -> DELIM
Rule 219   literal -> ICONST
Rule 220   literal -> DCONST
Rule 221   literal -> TRUE
Rule 222   literal -> FALSE
Rule 223   empty -> <empty>

Terminals, with rules where they appear

ASSIGN               : 37 106 124
BASE                 : 
BITAND               : 51
BITANDEQUAL          : 112
BITCOMP              : 74 216
BITNOT               : 73
BITOR                : 47
BITOREQUAL           : 113
BITXOR               : 49
BITXOREQUAL          : 114
BLOCK_BEGIN          : 14 82 139 176
BLOCK_END            : 14 82 139 176
BOOL                 : 29
BREAK                : 206
CASE                 : 184
CCONST               : 
CHAR                 : 32
CLASS                : 9
CLOSE_BRACKET        : 34 77 100 101
CLOSE_PAREN          : 93 96 97 126 127 128 129 155 158 170 171 175 189 191 192 213 216
COLON                : 12 41 159 184 185
COMMA                : 36 81 122 135 157 201
CONDOP               : 41
CONSOLE              : 155 158
CONST                : 24 25 163
CONTINUE             : 207
DCONST               : 220
DECRE                : 
DEFAULT              : 185
DELIM                : 3 24 25 117 118 138 155 158 160 161 164 165 191 192 192 206 207 208 209 215 218
DIV                  : 68
DIVEQUAL             : 110
DO                   : 191
DOT                  : 94 95 155 158
DOUBLE               : 33
ELSE                 : 171
EQ                   : 53
FALSE                : 222
FCONST               : 
FLOAT                : 
FOR                  : 192
FOREACH              : 
GE                   : 59
GOTO                 : 208
GT                   : 57
ICONST               : 34 77 219
IDENTIFIER           : 9 13 37 88 94 94 95 96 100 102 123 124 132 136 158 159 208 213 216
IF                   : 170 171
IN                   : 
INCRE                : 
INT                  : 30
LE                   : 58
LICONST              : 
LOGAND               : 45
LOGOR                : 43
LONG                 : 
LSHIFT               : 61
LSHIFTEQUAL          : 115
LT                   : 56
MCONST               : 
MINUS                : 65 72
MINUSEQUAL           : 108
MOD                  : 69
MODEQUAL             : 111
NE                   : 54
NEW                  : 77
OPEN_BRACKET         : 34 77 100 101
OPEN_PAREN           : 93 96 97 126 127 128 129 155 158 170 171 175 189 191 192 213 216
PLUS                 : 64 71
PLUSEQUAL            : 107
PRIVATE              : 120
PUBLIC               : 119
READLINE             : 158
RETURN               : 209
RSHIFT               : 62
RSHIFTEQUAL          : 116
SCONST               : 
SWITCH               : 175
THIS                 : 
TIMES                : 67
TIMESEQUAL           : 109
TRUE                 : 221
UICONST              : 
UINT                 : 31
ULICONST             : 
ULONG                : 
VOID                 : 127 129
VSCONST              : 
WHILE                : 189 191
WRITELINE            : 155
error                : 

Nonterminals, with rules where they appear

M_bstart             : 139
M_else               : 171
M_if                 : 170 171
M_quad               : 168 186 187 188 189 191 191 192 192 192
M_while              : 189
additive-expression  : 60 61 62 64 65
and-expression       : 48 49 51
argument-list-opt    : 96 97
array-creation-expression : 75
array-initializer    : 78 86
array-initializer-opt : 77
array-type           : 28
assignment           : 39 167
assignment-operator  : 105
block                : 137 147 170 171 171 189 191 192 214 217
break-statement      : 202
class-base           : 10
class-base-opt       : 9
class-body           : 9
class-declaration    : 7 8
class-declarations   : 5 8
class-declarations-opt : 1
class-member-declaration : 17 18
class-member-declarations : 15 18
class-member-declarations-opt : 14
class-type           : 12 27
compilation-unit     : 0
conditional-and-expression : 42 43 45
conditional-expression : 38
conditional-or-expression : 40 41 43
constant-declaration : 19
constant-declarator  : 35 36
constant-declarators : 24 25 36 163
constructor-body     : 212
constructor-declaration : 22
constructor-declarator : 212
continue-statement   : 203
declaration-statement : 146
destructor-body      : 216
destructor-declaration : 23
do-statement         : 188
element-access       : 92 104
empty                : 4 6 11 16 79 84 99 131 140 142 172 173 174 178 190 194 198 211
empty-statement      : 148
equality-expression  : 50 51 53 54
exclusive-or-expression : 46 47 49
expression           : 37 41 41 80 81 85 93 100 101 105 156 157 170 171 175 184 189 191 196 210
expression-list      : 81 83 98
expression-opt       : 209
expression-statement : 149
field-declaration    : 20
fixed-parameter      : 134 135
fixed-parameters     : 133 135
for-condition        : 192
for-initializer      : 193
for-initializer-opt  : 192
for-iterator         : 197
for-iterator-opt     : 192
for-statement        : 187
formal-parameter-list : 130
formal-parameter-list-opt : 126 127 128 129 213
goto-statement       : 204
if-statement         : 168
inclusive-or-expression : 44 45 47
invocation-expression : 91 166
iteration-statement  : 151
jump-statement       : 152
labeled-statement    : 145
literal              : 87
local-constant-declaration : 161
local-variable-declaration : 160
member-access        : 90 95 97 101 103
member-name          : 126 127 128 129
method-body          : 125
method-declaration   : 21
method-header        : 125
modifier             : 24 117 126 127
multiplicative-expression : 63 64 65 67 68 69
parenthesized-expression : 89
prim-expression      : 105
primary-expression   : 70
primary-no-array-creation-expression : 76
print-list           : 155 157
read-statement       : 154
relational-expression : 52 53 54 56 57 58 59
return-statement     : 205
selection-statement  : 150
semi-opt             : 9
shift-expression     : 55 56 57 58 59 61 62
simple-type          : 24 25 26 34 77
statement            : 143 144 159
statement-expression : 165 200 201
statement-expression-list : 195 199 201
statement-list       : 2 141 144 181
statement-list-opt   : 139
switch-block         : 175
switch-label         : 182 183
switch-labels        : 181 183
switch-section       : 179 180
switch-sections      : 177 180
switch-sections-opt  : 176
switch-statement     : 169
type                 : 117 118 126 128 136 162 163
unary-expression     : 66 67 68 69 71 72 73 74
variable-declarator  : 121 122
variable-declarators : 117 118 122 162
variable-initializer : 124
variable-initializer-list-opt : 82
while-statement      : 186
write-statement      : 153

Parsing method: LALR

state 0

    (0) S' -> . compilation-unit
    (1) compilation-unit -> . class-declarations-opt
    (2) compilation-unit -> . statement-list
    (5) class-declarations-opt -> . class-declarations
    (6) class-declarations-opt -> . empty
    (143) statement-list -> . statement
    (144) statement-list -> . statement-list statement
    (7) class-declarations -> . class-declaration
    (8) class-declarations -> . class-declarations class-declaration
    (223) empty -> .
    (145) statement -> . labeled-statement
    (146) statement -> . declaration-statement
    (147) statement -> . block
    (148) statement -> . empty-statement
    (149) statement -> . expression-statement
    (150) statement -> . selection-statement
    (151) statement -> . iteration-statement
    (152) statement -> . jump-statement
    (153) statement -> . write-statement
    (154) statement -> . read-statement
    (9) class-declaration -> . CLASS IDENTIFIER class-base-opt class-body semi-opt
    (159) labeled-statement -> . IDENTIFIER COLON statement
    (160) declaration-statement -> . local-variable-declaration DELIM
    (161) declaration-statement -> . local-constant-declaration DELIM
    (139) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END
    (164) empty-statement -> . DELIM
    (165) expression-statement -> . statement-expression DELIM
    (168) selection-statement -> . if-statement M_quad
    (169) selection-statement -> . switch-statement
    (186) iteration-statement -> . while-statement M_quad
    (187) iteration-statement -> . for-statement M_quad
    (188) iteration-statement -> . do-statement M_quad
    (202) jump-statement -> . break-statement
    (203) jump-statement -> . continue-statement
    (204) jump-statement -> . goto-statement
    (205) jump-statement -> . return-statement
    (155) write-statement -> . CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM
    (158) read-statement -> . CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM
    (162) local-variable-declaration -> . type variable-declarators
    (163) local-constant-declaration -> . CONST type constant-declarators
    (166) statement-expression -> . invocation-expression
    (167) statement-expression -> . assignment
    (170) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block
    (171) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block
    (175) switch-statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block
    (189) while-statement -> . WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block
    (192) for-statement -> . FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block
    (191) do-statement -> . DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM
    (206) break-statement -> . BREAK DELIM
    (207) continue-statement -> . CONTINUE DELIM
    (208) goto-statement -> . GOTO IDENTIFIER DELIM
    (209) return-statement -> . RETURN expression-opt DELIM
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (96) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (97) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (105) assignment -> . prim-expression assignment-operator expression
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE
    (13) class-type -> . IDENTIFIER
    (34) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET
    (94) member-access -> . IDENTIFIER DOT IDENTIFIER
    (95) member-access -> . member-access DOT IDENTIFIER
    (102) prim-expression -> . IDENTIFIER
    (103) prim-expression -> . member-access
    (104) prim-expression -> . element-access
    (100) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (101) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    $end            reduce using rule 223 (empty -> .)
    CLASS           shift and go to state 51
    IDENTIFIER      shift and go to state 36
    BLOCK_BEGIN     shift and go to state 49
    DELIM           shift and go to state 4
    CONSOLE         shift and go to state 53
    CONST           shift and go to state 48
    IF              shift and go to state 57
    SWITCH          shift and go to state 34
    WHILE           shift and go to state 31
    FOR             shift and go to state 21
    DO              shift and go to state 47
    BREAK           shift and go to state 42
    CONTINUE        shift and go to state 27
    GOTO            shift and go to state 7
    RETURN          shift and go to state 14
    BOOL            shift and go to state 43
    INT             shift and go to state 24
    UINT            shift and go to state 56
    CHAR            shift and go to state 30
    DOUBLE          shift and go to state 12

    return-statement               shift and go to state 16
    write-statement                shift and go to state 1
    member-access                  shift and go to state 2
    selection-statement            shift and go to state 29
    simple-type                    shift and go to state 15
    compilation-unit               shift and go to state 46
    expression-statement           shift and go to state 3
    class-declarations-opt         shift and go to state 17
    if-statement                   shift and go to state 26
    break-statement                shift and go to state 33
    prim-expression                shift and go to state 50
    statement-expression           shift and go to state 5
    element-access                 shift and go to state 18
    local-constant-declaration     shift and go to state 19
    statement                      shift and go to state 35
    assignment                     shift and go to state 54
    for-statement                  shift and go to state 6
    type                           shift and go to state 37
    read-statement                 shift and go to state 52
    do-statement                   shift and go to state 20
    array-type                     shift and go to state 39
    continue-statement             shift and go to state 22
    invocation-expression          shift and go to state 13
    class-declaration              shift and go to state 55
    labeled-statement              shift and go to state 8
    declaration-statement          shift and go to state 40
    switch-statement               shift and go to state 9
    jump-statement                 shift and go to state 10
    iteration-statement            shift and go to state 41
    local-variable-declaration     shift and go to state 23
    class-declarations             shift and go to state 11
    goto-statement                 shift and go to state 25
    empty                          shift and go to state 38
    statement-list                 shift and go to state 44
    class-type                     shift and go to state 58
    while-statement                shift and go to state 45
    empty-statement                shift and go to state 32
    block                          shift and go to state 28

state 1

    (153) statement -> write-statement .

    IDENTIFIER      reduce using rule 153 (statement -> write-statement .)
    BLOCK_BEGIN     reduce using rule 153 (statement -> write-statement .)
    DELIM           reduce using rule 153 (statement -> write-statement .)
    CONSOLE         reduce using rule 153 (statement -> write-statement .)
    CONST           reduce using rule 153 (statement -> write-statement .)
    IF              reduce using rule 153 (statement -> write-statement .)
    SWITCH          reduce using rule 153 (statement -> write-statement .)
    WHILE           reduce using rule 153 (statement -> write-statement .)
    FOR             reduce using rule 153 (statement -> write-statement .)
    DO              reduce using rule 153 (statement -> write-statement .)
    BREAK           reduce using rule 153 (statement -> write-statement .)
    CONTINUE        reduce using rule 153 (statement -> write-statement .)
    GOTO            reduce using rule 153 (statement -> write-statement .)
    RETURN          reduce using rule 153 (statement -> write-statement .)
    BOOL            reduce using rule 153 (statement -> write-statement .)
    INT             reduce using rule 153 (statement -> write-statement .)
    UINT            reduce using rule 153 (statement -> write-statement .)
    CHAR            reduce using rule 153 (statement -> write-statement .)
    DOUBLE          reduce using rule 153 (statement -> write-statement .)
    CASE            reduce using rule 153 (statement -> write-statement .)
    DEFAULT         reduce using rule 153 (statement -> write-statement .)
    BLOCK_END       reduce using rule 153 (statement -> write-statement .)
    $end            reduce using rule 153 (statement -> write-statement .)


state 2

    (97) invocation-expression -> member-access . OPEN_PAREN argument-list-opt CLOSE_PAREN
    (95) member-access -> member-access . DOT IDENTIFIER
    (103) prim-expression -> member-access .
    (101) element-access -> member-access . OPEN_BRACKET expression CLOSE_BRACKET

    OPEN_PAREN      shift and go to state 60
    DOT             shift and go to state 61
    ASSIGN          reduce using rule 103 (prim-expression -> member-access .)
    PLUSEQUAL       reduce using rule 103 (prim-expression -> member-access .)
    MINUSEQUAL      reduce using rule 103 (prim-expression -> member-access .)
    TIMESEQUAL      reduce using rule 103 (prim-expression -> member-access .)
    DIVEQUAL        reduce using rule 103 (prim-expression -> member-access .)
    MODEQUAL        reduce using rule 103 (prim-expression -> member-access .)
    BITANDEQUAL     reduce using rule 103 (prim-expression -> member-access .)
    BITOREQUAL      reduce using rule 103 (prim-expression -> member-access .)
    BITXOREQUAL     reduce using rule 103 (prim-expression -> member-access .)
    LSHIFTEQUAL     reduce using rule 103 (prim-expression -> member-access .)
    RSHIFTEQUAL     reduce using rule 103 (prim-expression -> member-access .)
    OPEN_BRACKET    shift and go to state 59


state 3

    (149) statement -> expression-statement .

    IDENTIFIER      reduce using rule 149 (statement -> expression-statement .)
    BLOCK_BEGIN     reduce using rule 149 (statement -> expression-statement .)
    DELIM           reduce using rule 149 (statement -> expression-statement .)
    CONSOLE         reduce using rule 149 (statement -> expression-statement .)
    CONST           reduce using rule 149 (statement -> expression-statement .)
    IF              reduce using rule 149 (statement -> expression-statement .)
    SWITCH          reduce using rule 149 (statement -> expression-statement .)
    WHILE           reduce using rule 149 (statement -> expression-statement .)
    FOR             reduce using rule 149 (statement -> expression-statement .)
    DO              reduce using rule 149 (statement -> expression-statement .)
    BREAK           reduce using rule 149 (statement -> expression-statement .)
    CONTINUE        reduce using rule 149 (statement -> expression-statement .)
    GOTO            reduce using rule 149 (statement -> expression-statement .)
    RETURN          reduce using rule 149 (statement -> expression-statement .)
    BOOL            reduce using rule 149 (statement -> expression-statement .)
    INT             reduce using rule 149 (statement -> expression-statement .)
    UINT            reduce using rule 149 (statement -> expression-statement .)
    CHAR            reduce using rule 149 (statement -> expression-statement .)
    DOUBLE          reduce using rule 149 (statement -> expression-statement .)
    CASE            reduce using rule 149 (statement -> expression-statement .)
    DEFAULT         reduce using rule 149 (statement -> expression-statement .)
    BLOCK_END       reduce using rule 149 (statement -> expression-statement .)
    $end            reduce using rule 149 (statement -> expression-statement .)


state 4

    (164) empty-statement -> DELIM .

    IDENTIFIER      reduce using rule 164 (empty-statement -> DELIM .)
    BLOCK_BEGIN     reduce using rule 164 (empty-statement -> DELIM .)
    DELIM           reduce using rule 164 (empty-statement -> DELIM .)
    CONSOLE         reduce using rule 164 (empty-statement -> DELIM .)
    CONST           reduce using rule 164 (empty-statement -> DELIM .)
    IF              reduce using rule 164 (empty-statement -> DELIM .)
    SWITCH          reduce using rule 164 (empty-statement -> DELIM .)
    WHILE           reduce using rule 164 (empty-statement -> DELIM .)
    FOR             reduce using rule 164 (empty-statement -> DELIM .)
    DO              reduce using rule 164 (empty-statement -> DELIM .)
    BREAK           reduce using rule 164 (empty-statement -> DELIM .)
    CONTINUE        reduce using rule 164 (empty-statement -> DELIM .)
    GOTO            reduce using rule 164 (empty-statement -> DELIM .)
    RETURN          reduce using rule 164 (empty-statement -> DELIM .)
    BOOL            reduce using rule 164 (empty-statement -> DELIM .)
    INT             reduce using rule 164 (empty-statement -> DELIM .)
    UINT            reduce using rule 164 (empty-statement -> DELIM .)
    CHAR            reduce using rule 164 (empty-statement -> DELIM .)
    DOUBLE          reduce using rule 164 (empty-statement -> DELIM .)
    $end            reduce using rule 164 (empty-statement -> DELIM .)
    CASE            reduce using rule 164 (empty-statement -> DELIM .)
    DEFAULT         reduce using rule 164 (empty-statement -> DELIM .)
    BLOCK_END       reduce using rule 164 (empty-statement -> DELIM .)


state 5

    (165) expression-statement -> statement-expression . DELIM

    DELIM           shift and go to state 62


state 6

    (187) iteration-statement -> for-statement . M_quad
    (174) M_quad -> . empty
    (223) empty -> .

    IDENTIFIER      reduce using rule 223 (empty -> .)
    BLOCK_BEGIN     reduce using rule 223 (empty -> .)
    DELIM           reduce using rule 223 (empty -> .)
    CONSOLE         reduce using rule 223 (empty -> .)
    CONST           reduce using rule 223 (empty -> .)
    IF              reduce using rule 223 (empty -> .)
    SWITCH          reduce using rule 223 (empty -> .)
    WHILE           reduce using rule 223 (empty -> .)
    FOR             reduce using rule 223 (empty -> .)
    DO              reduce using rule 223 (empty -> .)
    BREAK           reduce using rule 223 (empty -> .)
    CONTINUE        reduce using rule 223 (empty -> .)
    GOTO            reduce using rule 223 (empty -> .)
    RETURN          reduce using rule 223 (empty -> .)
    BOOL            reduce using rule 223 (empty -> .)
    INT             reduce using rule 223 (empty -> .)
    UINT            reduce using rule 223 (empty -> .)
    CHAR            reduce using rule 223 (empty -> .)
    DOUBLE          reduce using rule 223 (empty -> .)
    $end            reduce using rule 223 (empty -> .)
    BLOCK_END       reduce using rule 223 (empty -> .)
    CASE            reduce using rule 223 (empty -> .)
    DEFAULT         reduce using rule 223 (empty -> .)

    M_quad                         shift and go to state 63
    empty                          shift and go to state 64

state 7

    (208) goto-statement -> GOTO . IDENTIFIER DELIM

    IDENTIFIER      shift and go to state 65


state 8

    (145) statement -> labeled-statement .

    IDENTIFIER      reduce using rule 145 (statement -> labeled-statement .)
    BLOCK_BEGIN     reduce using rule 145 (statement -> labeled-statement .)
    DELIM           reduce using rule 145 (statement -> labeled-statement .)
    CONSOLE         reduce using rule 145 (statement -> labeled-statement .)
    CONST           reduce using rule 145 (statement -> labeled-statement .)
    IF              reduce using rule 145 (statement -> labeled-statement .)
    SWITCH          reduce using rule 145 (statement -> labeled-statement .)
    WHILE           reduce using rule 145 (statement -> labeled-statement .)
    FOR             reduce using rule 145 (statement -> labeled-statement .)
    DO              reduce using rule 145 (statement -> labeled-statement .)
    BREAK           reduce using rule 145 (statement -> labeled-statement .)
    CONTINUE        reduce using rule 145 (statement -> labeled-statement .)
    GOTO            reduce using rule 145 (statement -> labeled-statement .)
    RETURN          reduce using rule 145 (statement -> labeled-statement .)
    BOOL            reduce using rule 145 (statement -> labeled-statement .)
    INT             reduce using rule 145 (statement -> labeled-statement .)
    UINT            reduce using rule 145 (statement -> labeled-statement .)
    CHAR            reduce using rule 145 (statement -> labeled-statement .)
    DOUBLE          reduce using rule 145 (statement -> labeled-statement .)
    CASE            reduce using rule 145 (statement -> labeled-statement .)
    DEFAULT         reduce using rule 145 (statement -> labeled-statement .)
    BLOCK_END       reduce using rule 145 (statement -> labeled-statement .)
    $end            reduce using rule 145 (statement -> labeled-statement .)


state 9

    (169) selection-statement -> switch-statement .

    IDENTIFIER      reduce using rule 169 (selection-statement -> switch-statement .)
    BLOCK_BEGIN     reduce using rule 169 (selection-statement -> switch-statement .)
    DELIM           reduce using rule 169 (selection-statement -> switch-statement .)
    CONSOLE         reduce using rule 169 (selection-statement -> switch-statement .)
    CONST           reduce using rule 169 (selection-statement -> switch-statement .)
    IF              reduce using rule 169 (selection-statement -> switch-statement .)
    SWITCH          reduce using rule 169 (selection-statement -> switch-statement .)
    WHILE           reduce using rule 169 (selection-statement -> switch-statement .)
    FOR             reduce using rule 169 (selection-statement -> switch-statement .)
    DO              reduce using rule 169 (selection-statement -> switch-statement .)
    BREAK           reduce using rule 169 (selection-statement -> switch-statement .)
    CONTINUE        reduce using rule 169 (selection-statement -> switch-statement .)
    GOTO            reduce using rule 169 (selection-statement -> switch-statement .)
    RETURN          reduce using rule 169 (selection-statement -> switch-statement .)
    BOOL            reduce using rule 169 (selection-statement -> switch-statement .)
    INT             reduce using rule 169 (selection-statement -> switch-statement .)
    UINT            reduce using rule 169 (selection-statement -> switch-statement .)
    CHAR            reduce using rule 169 (selection-statement -> switch-statement .)
    DOUBLE          reduce using rule 169 (selection-statement -> switch-statement .)
    BLOCK_END       reduce using rule 169 (selection-statement -> switch-statement .)
    CASE            reduce using rule 169 (selection-statement -> switch-statement .)
    DEFAULT         reduce using rule 169 (selection-statement -> switch-statement .)
    $end            reduce using rule 169 (selection-statement -> switch-statement .)


state 10

    (152) statement -> jump-statement .

    IDENTIFIER      reduce using rule 152 (statement -> jump-statement .)
    BLOCK_BEGIN     reduce using rule 152 (statement -> jump-statement .)
    DELIM           reduce using rule 152 (statement -> jump-statement .)
    CONSOLE         reduce using rule 152 (statement -> jump-statement .)
    CONST           reduce using rule 152 (statement -> jump-statement .)
    IF              reduce using rule 152 (statement -> jump-statement .)
    SWITCH          reduce using rule 152 (statement -> jump-statement .)
    WHILE           reduce using rule 152 (statement -> jump-statement .)
    FOR             reduce using rule 152 (statement -> jump-statement .)
    DO              reduce using rule 152 (statement -> jump-statement .)
    BREAK           reduce using rule 152 (statement -> jump-statement .)
    CONTINUE        reduce using rule 152 (statement -> jump-statement .)
    GOTO            reduce using rule 152 (statement -> jump-statement .)
    RETURN          reduce using rule 152 (statement -> jump-statement .)
    BOOL            reduce using rule 152 (statement -> jump-statement .)
    INT             reduce using rule 152 (statement -> jump-statement .)
    UINT            reduce using rule 152 (statement -> jump-statement .)
    CHAR            reduce using rule 152 (statement -> jump-statement .)
    DOUBLE          reduce using rule 152 (statement -> jump-statement .)
    CASE            reduce using rule 152 (statement -> jump-statement .)
    DEFAULT         reduce using rule 152 (statement -> jump-statement .)
    BLOCK_END       reduce using rule 152 (statement -> jump-statement .)
    $end            reduce using rule 152 (statement -> jump-statement .)


state 11

    (5) class-declarations-opt -> class-declarations .
    (8) class-declarations -> class-declarations . class-declaration
    (9) class-declaration -> . CLASS IDENTIFIER class-base-opt class-body semi-opt

    $end            reduce using rule 5 (class-declarations-opt -> class-declarations .)
    CLASS           shift and go to state 51

    class-declaration              shift and go to state 66

state 12

    (33) simple-type -> DOUBLE .

    OPEN_BRACKET    reduce using rule 33 (simple-type -> DOUBLE .)
    IDENTIFIER      reduce using rule 33 (simple-type -> DOUBLE .)


state 13

    (166) statement-expression -> invocation-expression .

    DELIM           reduce using rule 166 (statement-expression -> invocation-expression .)
    COMMA           reduce using rule 166 (statement-expression -> invocation-expression .)
    CLOSE_PAREN     reduce using rule 166 (statement-expression -> invocation-expression .)


state 14

    (209) return-statement -> RETURN . expression-opt DELIM
    (210) expression-opt -> . expression
    (211) expression-opt -> . empty
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (223) empty -> .
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (105) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (102) prim-expression -> . IDENTIFIER
    (103) prim-expression -> . member-access
    (104) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (94) member-access -> . IDENTIFIER DOT IDENTIFIER
    (95) member-access -> . member-access DOT IDENTIFIER
    (100) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (101) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . array-creation-expression
    (76) primary-expression -> . primary-no-array-creation-expression
    (77) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (87) primary-no-array-creation-expression -> . literal
    (88) primary-no-array-creation-expression -> . IDENTIFIER
    (89) primary-no-array-creation-expression -> . parenthesized-expression
    (90) primary-no-array-creation-expression -> . member-access
    (91) primary-no-array-creation-expression -> . invocation-expression
    (92) primary-no-array-creation-expression -> . element-access
    (219) literal -> . ICONST
    (220) literal -> . DCONST
    (221) literal -> . TRUE
    (222) literal -> . FALSE
    (93) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (96) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (97) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    DELIM           reduce using rule 223 (empty -> .)
    IDENTIFIER      shift and go to state 81
    PLUS            shift and go to state 80
    MINUS           shift and go to state 73
    BITNOT          shift and go to state 96
    BITCOMP         shift and go to state 75
    NEW             shift and go to state 71
    ICONST          shift and go to state 86
    DCONST          shift and go to state 97
    TRUE            shift and go to state 91
    FALSE           shift and go to state 89
    OPEN_PAREN      shift and go to state 77

    unary-expression               shift and go to state 87
    exclusive-or-expression        shift and go to state 67
    member-access                  shift and go to state 68
    relational-expression          shift and go to state 69
    additive-expression            shift and go to state 72
    primary-no-array-creation-expression shift and go to state 85
    inclusive-or-expression        shift and go to state 74
    prim-expression                shift and go to state 50
    element-access                 shift and go to state 76
    literal                        shift and go to state 84
    conditional-expression         shift and go to state 78
    conditional-and-expression     shift and go to state 79
    empty                          shift and go to state 82
    array-creation-expression      shift and go to state 70
    assignment                     shift and go to state 83
    expression-opt                 shift and go to state 88
    equality-expression            shift and go to state 90
    shift-expression               shift and go to state 92
    and-expression                 shift and go to state 93
    multiplicative-expression      shift and go to state 94
    conditional-or-expression      shift and go to state 100
    primary-expression             shift and go to state 98
    invocation-expression          shift and go to state 99
    expression                     shift and go to state 95
    parenthesized-expression       shift and go to state 101

state 15

    (26) type -> simple-type .
    (34) array-type -> simple-type . OPEN_BRACKET ICONST CLOSE_BRACKET

    IDENTIFIER      reduce using rule 26 (type -> simple-type .)
    OPEN_BRACKET    shift and go to state 102


state 16

    (205) jump-statement -> return-statement .

    IDENTIFIER      reduce using rule 205 (jump-statement -> return-statement .)
    BLOCK_BEGIN     reduce using rule 205 (jump-statement -> return-statement .)
    DELIM           reduce using rule 205 (jump-statement -> return-statement .)
    CONSOLE         reduce using rule 205 (jump-statement -> return-statement .)
    CONST           reduce using rule 205 (jump-statement -> return-statement .)
    IF              reduce using rule 205 (jump-statement -> return-statement .)
    SWITCH          reduce using rule 205 (jump-statement -> return-statement .)
    WHILE           reduce using rule 205 (jump-statement -> return-statement .)
    FOR             reduce using rule 205 (jump-statement -> return-statement .)
    DO              reduce using rule 205 (jump-statement -> return-statement .)
    BREAK           reduce using rule 205 (jump-statement -> return-statement .)
    CONTINUE        reduce using rule 205 (jump-statement -> return-statement .)
    GOTO            reduce using rule 205 (jump-statement -> return-statement .)
    RETURN          reduce using rule 205 (jump-statement -> return-statement .)
    BOOL            reduce using rule 205 (jump-statement -> return-statement .)
    INT             reduce using rule 205 (jump-statement -> return-statement .)
    UINT            reduce using rule 205 (jump-statement -> return-statement .)
    CHAR            reduce using rule 205 (jump-statement -> return-statement .)
    DOUBLE          reduce using rule 205 (jump-statement -> return-statement .)
    BLOCK_END       reduce using rule 205 (jump-statement -> return-statement .)
    $end            reduce using rule 205 (jump-statement -> return-statement .)
    CASE            reduce using rule 205 (jump-statement -> return-statement .)
    DEFAULT         reduce using rule 205 (jump-statement -> return-statement .)


state 17

    (1) compilation-unit -> class-declarations-opt .

    $end            reduce using rule 1 (compilation-unit -> class-declarations-opt .)


state 18

    (104) prim-expression -> element-access .

    ASSIGN          reduce using rule 104 (prim-expression -> element-access .)
    PLUSEQUAL       reduce using rule 104 (prim-expression -> element-access .)
    MINUSEQUAL      reduce using rule 104 (prim-expression -> element-access .)
    TIMESEQUAL      reduce using rule 104 (prim-expression -> element-access .)
    DIVEQUAL        reduce using rule 104 (prim-expression -> element-access .)
    MODEQUAL        reduce using rule 104 (prim-expression -> element-access .)
    BITANDEQUAL     reduce using rule 104 (prim-expression -> element-access .)
    BITOREQUAL      reduce using rule 104 (prim-expression -> element-access .)
    BITXOREQUAL     reduce using rule 104 (prim-expression -> element-access .)
    LSHIFTEQUAL     reduce using rule 104 (prim-expression -> element-access .)
    RSHIFTEQUAL     reduce using rule 104 (prim-expression -> element-access .)


state 19

    (161) declaration-statement -> local-constant-declaration . DELIM

    DELIM           shift and go to state 103


state 20

    (188) iteration-statement -> do-statement . M_quad
    (174) M_quad -> . empty
    (223) empty -> .

    IDENTIFIER      reduce using rule 223 (empty -> .)
    BLOCK_BEGIN     reduce using rule 223 (empty -> .)
    DELIM           reduce using rule 223 (empty -> .)
    CONSOLE         reduce using rule 223 (empty -> .)
    CONST           reduce using rule 223 (empty -> .)
    IF              reduce using rule 223 (empty -> .)
    SWITCH          reduce using rule 223 (empty -> .)
    WHILE           reduce using rule 223 (empty -> .)
    FOR             reduce using rule 223 (empty -> .)
    DO              reduce using rule 223 (empty -> .)
    BREAK           reduce using rule 223 (empty -> .)
    CONTINUE        reduce using rule 223 (empty -> .)
    GOTO            reduce using rule 223 (empty -> .)
    RETURN          reduce using rule 223 (empty -> .)
    BOOL            reduce using rule 223 (empty -> .)
    INT             reduce using rule 223 (empty -> .)
    UINT            reduce using rule 223 (empty -> .)
    CHAR            reduce using rule 223 (empty -> .)
    DOUBLE          reduce using rule 223 (empty -> .)
    $end            reduce using rule 223 (empty -> .)
    BLOCK_END       reduce using rule 223 (empty -> .)
    CASE            reduce using rule 223 (empty -> .)
    DEFAULT         reduce using rule 223 (empty -> .)

    M_quad                         shift and go to state 104
    empty                          shift and go to state 64

state 21

    (192) for-statement -> FOR . OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block

    OPEN_PAREN      shift and go to state 105


state 22

    (203) jump-statement -> continue-statement .

    IDENTIFIER      reduce using rule 203 (jump-statement -> continue-statement .)
    BLOCK_BEGIN     reduce using rule 203 (jump-statement -> continue-statement .)
    DELIM           reduce using rule 203 (jump-statement -> continue-statement .)
    CONSOLE         reduce using rule 203 (jump-statement -> continue-statement .)
    CONST           reduce using rule 203 (jump-statement -> continue-statement .)
    IF              reduce using rule 203 (jump-statement -> continue-statement .)
    SWITCH          reduce using rule 203 (jump-statement -> continue-statement .)
    WHILE           reduce using rule 203 (jump-statement -> continue-statement .)
    FOR             reduce using rule 203 (jump-statement -> continue-statement .)
    DO              reduce using rule 203 (jump-statement -> continue-statement .)
    BREAK           reduce using rule 203 (jump-statement -> continue-statement .)
    CONTINUE        reduce using rule 203 (jump-statement -> continue-statement .)
    GOTO            reduce using rule 203 (jump-statement -> continue-statement .)
    RETURN          reduce using rule 203 (jump-statement -> continue-statement .)
    BOOL            reduce using rule 203 (jump-statement -> continue-statement .)
    INT             reduce using rule 203 (jump-statement -> continue-statement .)
    UINT            reduce using rule 203 (jump-statement -> continue-statement .)
    CHAR            reduce using rule 203 (jump-statement -> continue-statement .)
    DOUBLE          reduce using rule 203 (jump-statement -> continue-statement .)
    BLOCK_END       reduce using rule 203 (jump-statement -> continue-statement .)
    $end            reduce using rule 203 (jump-statement -> continue-statement .)
    CASE            reduce using rule 203 (jump-statement -> continue-statement .)
    DEFAULT         reduce using rule 203 (jump-statement -> continue-statement .)


state 23

    (160) declaration-statement -> local-variable-declaration . DELIM

    DELIM           shift and go to state 106


state 24

    (30) simple-type -> INT .

    OPEN_BRACKET    reduce using rule 30 (simple-type -> INT .)
    IDENTIFIER      reduce using rule 30 (simple-type -> INT .)


state 25

    (204) jump-statement -> goto-statement .

    IDENTIFIER      reduce using rule 204 (jump-statement -> goto-statement .)
    BLOCK_BEGIN     reduce using rule 204 (jump-statement -> goto-statement .)
    DELIM           reduce using rule 204 (jump-statement -> goto-statement .)
    CONSOLE         reduce using rule 204 (jump-statement -> goto-statement .)
    CONST           reduce using rule 204 (jump-statement -> goto-statement .)
    IF              reduce using rule 204 (jump-statement -> goto-statement .)
    SWITCH          reduce using rule 204 (jump-statement -> goto-statement .)
    WHILE           reduce using rule 204 (jump-statement -> goto-statement .)
    FOR             reduce using rule 204 (jump-statement -> goto-statement .)
    DO              reduce using rule 204 (jump-statement -> goto-statement .)
    BREAK           reduce using rule 204 (jump-statement -> goto-statement .)
    CONTINUE        reduce using rule 204 (jump-statement -> goto-statement .)
    GOTO            reduce using rule 204 (jump-statement -> goto-statement .)
    RETURN          reduce using rule 204 (jump-statement -> goto-statement .)
    BOOL            reduce using rule 204 (jump-statement -> goto-statement .)
    INT             reduce using rule 204 (jump-statement -> goto-statement .)
    UINT            reduce using rule 204 (jump-statement -> goto-statement .)
    CHAR            reduce using rule 204 (jump-statement -> goto-statement .)
    DOUBLE          reduce using rule 204 (jump-statement -> goto-statement .)
    BLOCK_END       reduce using rule 204 (jump-statement -> goto-statement .)
    $end            reduce using rule 204 (jump-statement -> goto-statement .)
    CASE            reduce using rule 204 (jump-statement -> goto-statement .)
    DEFAULT         reduce using rule 204 (jump-statement -> goto-statement .)


state 26

    (168) selection-statement -> if-statement . M_quad
    (174) M_quad -> . empty
    (223) empty -> .

    IDENTIFIER      reduce using rule 223 (empty -> .)
    BLOCK_BEGIN     reduce using rule 223 (empty -> .)
    DELIM           reduce using rule 223 (empty -> .)
    CONSOLE         reduce using rule 223 (empty -> .)
    CONST           reduce using rule 223 (empty -> .)
    IF              reduce using rule 223 (empty -> .)
    SWITCH          reduce using rule 223 (empty -> .)
    WHILE           reduce using rule 223 (empty -> .)
    FOR             reduce using rule 223 (empty -> .)
    DO              reduce using rule 223 (empty -> .)
    BREAK           reduce using rule 223 (empty -> .)
    CONTINUE        reduce using rule 223 (empty -> .)
    GOTO            reduce using rule 223 (empty -> .)
    RETURN          reduce using rule 223 (empty -> .)
    BOOL            reduce using rule 223 (empty -> .)
    INT             reduce using rule 223 (empty -> .)
    UINT            reduce using rule 223 (empty -> .)
    CHAR            reduce using rule 223 (empty -> .)
    DOUBLE          reduce using rule 223 (empty -> .)
    $end            reduce using rule 223 (empty -> .)
    BLOCK_END       reduce using rule 223 (empty -> .)
    CASE            reduce using rule 223 (empty -> .)
    DEFAULT         reduce using rule 223 (empty -> .)

    M_quad                         shift and go to state 107
    empty                          shift and go to state 64

state 27

    (207) continue-statement -> CONTINUE . DELIM

    DELIM           shift and go to state 108


state 28

    (147) statement -> block .

    IDENTIFIER      reduce using rule 147 (statement -> block .)
    BLOCK_BEGIN     reduce using rule 147 (statement -> block .)
    DELIM           reduce using rule 147 (statement -> block .)
    CONSOLE         reduce using rule 147 (statement -> block .)
    CONST           reduce using rule 147 (statement -> block .)
    IF              reduce using rule 147 (statement -> block .)
    SWITCH          reduce using rule 147 (statement -> block .)
    WHILE           reduce using rule 147 (statement -> block .)
    FOR             reduce using rule 147 (statement -> block .)
    DO              reduce using rule 147 (statement -> block .)
    BREAK           reduce using rule 147 (statement -> block .)
    CONTINUE        reduce using rule 147 (statement -> block .)
    GOTO            reduce using rule 147 (statement -> block .)
    RETURN          reduce using rule 147 (statement -> block .)
    BOOL            reduce using rule 147 (statement -> block .)
    INT             reduce using rule 147 (statement -> block .)
    UINT            reduce using rule 147 (statement -> block .)
    CHAR            reduce using rule 147 (statement -> block .)
    DOUBLE          reduce using rule 147 (statement -> block .)
    CASE            reduce using rule 147 (statement -> block .)
    DEFAULT         reduce using rule 147 (statement -> block .)
    BLOCK_END       reduce using rule 147 (statement -> block .)
    $end            reduce using rule 147 (statement -> block .)


state 29

    (150) statement -> selection-statement .

    IDENTIFIER      reduce using rule 150 (statement -> selection-statement .)
    BLOCK_BEGIN     reduce using rule 150 (statement -> selection-statement .)
    DELIM           reduce using rule 150 (statement -> selection-statement .)
    CONSOLE         reduce using rule 150 (statement -> selection-statement .)
    CONST           reduce using rule 150 (statement -> selection-statement .)
    IF              reduce using rule 150 (statement -> selection-statement .)
    SWITCH          reduce using rule 150 (statement -> selection-statement .)
    WHILE           reduce using rule 150 (statement -> selection-statement .)
    FOR             reduce using rule 150 (statement -> selection-statement .)
    DO              reduce using rule 150 (statement -> selection-statement .)
    BREAK           reduce using rule 150 (statement -> selection-statement .)
    CONTINUE        reduce using rule 150 (statement -> selection-statement .)
    GOTO            reduce using rule 150 (statement -> selection-statement .)
    RETURN          reduce using rule 150 (statement -> selection-statement .)
    BOOL            reduce using rule 150 (statement -> selection-statement .)
    INT             reduce using rule 150 (statement -> selection-statement .)
    UINT            reduce using rule 150 (statement -> selection-statement .)
    CHAR            reduce using rule 150 (statement -> selection-statement .)
    DOUBLE          reduce using rule 150 (statement -> selection-statement .)
    CASE            reduce using rule 150 (statement -> selection-statement .)
    DEFAULT         reduce using rule 150 (statement -> selection-statement .)
    BLOCK_END       reduce using rule 150 (statement -> selection-statement .)
    $end            reduce using rule 150 (statement -> selection-statement .)


state 30

    (32) simple-type -> CHAR .

    OPEN_BRACKET    reduce using rule 32 (simple-type -> CHAR .)
    IDENTIFIER      reduce using rule 32 (simple-type -> CHAR .)


state 31

    (189) while-statement -> WHILE . M_quad OPEN_PAREN expression CLOSE_PAREN M_while block
    (174) M_quad -> . empty
    (223) empty -> .

    OPEN_PAREN      reduce using rule 223 (empty -> .)

    M_quad                         shift and go to state 109
    empty                          shift and go to state 64

state 32

    (148) statement -> empty-statement .

    IDENTIFIER      reduce using rule 148 (statement -> empty-statement .)
    BLOCK_BEGIN     reduce using rule 148 (statement -> empty-statement .)
    DELIM           reduce using rule 148 (statement -> empty-statement .)
    CONSOLE         reduce using rule 148 (statement -> empty-statement .)
    CONST           reduce using rule 148 (statement -> empty-statement .)
    IF              reduce using rule 148 (statement -> empty-statement .)
    SWITCH          reduce using rule 148 (statement -> empty-statement .)
    WHILE           reduce using rule 148 (statement -> empty-statement .)
    FOR             reduce using rule 148 (statement -> empty-statement .)
    DO              reduce using rule 148 (statement -> empty-statement .)
    BREAK           reduce using rule 148 (statement -> empty-statement .)
    CONTINUE        reduce using rule 148 (statement -> empty-statement .)
    GOTO            reduce using rule 148 (statement -> empty-statement .)
    RETURN          reduce using rule 148 (statement -> empty-statement .)
    BOOL            reduce using rule 148 (statement -> empty-statement .)
    INT             reduce using rule 148 (statement -> empty-statement .)
    UINT            reduce using rule 148 (statement -> empty-statement .)
    CHAR            reduce using rule 148 (statement -> empty-statement .)
    DOUBLE          reduce using rule 148 (statement -> empty-statement .)
    CASE            reduce using rule 148 (statement -> empty-statement .)
    DEFAULT         reduce using rule 148 (statement -> empty-statement .)
    BLOCK_END       reduce using rule 148 (statement -> empty-statement .)
    $end            reduce using rule 148 (statement -> empty-statement .)


state 33

    (202) jump-statement -> break-statement .

    IDENTIFIER      reduce using rule 202 (jump-statement -> break-statement .)
    BLOCK_BEGIN     reduce using rule 202 (jump-statement -> break-statement .)
    DELIM           reduce using rule 202 (jump-statement -> break-statement .)
    CONSOLE         reduce using rule 202 (jump-statement -> break-statement .)
    CONST           reduce using rule 202 (jump-statement -> break-statement .)
    IF              reduce using rule 202 (jump-statement -> break-statement .)
    SWITCH          reduce using rule 202 (jump-statement -> break-statement .)
    WHILE           reduce using rule 202 (jump-statement -> break-statement .)
    FOR             reduce using rule 202 (jump-statement -> break-statement .)
    DO              reduce using rule 202 (jump-statement -> break-statement .)
    BREAK           reduce using rule 202 (jump-statement -> break-statement .)
    CONTINUE        reduce using rule 202 (jump-statement -> break-statement .)
    GOTO            reduce using rule 202 (jump-statement -> break-statement .)
    RETURN          reduce using rule 202 (jump-statement -> break-statement .)
    BOOL            reduce using rule 202 (jump-statement -> break-statement .)
    INT             reduce using rule 202 (jump-statement -> break-statement .)
    UINT            reduce using rule 202 (jump-statement -> break-statement .)
    CHAR            reduce using rule 202 (jump-statement -> break-statement .)
    DOUBLE          reduce using rule 202 (jump-statement -> break-statement .)
    BLOCK_END       reduce using rule 202 (jump-statement -> break-statement .)
    $end            reduce using rule 202 (jump-statement -> break-statement .)
    CASE            reduce using rule 202 (jump-statement -> break-statement .)
    DEFAULT         reduce using rule 202 (jump-statement -> break-statement .)


state 34

    (175) switch-statement -> SWITCH . OPEN_PAREN expression CLOSE_PAREN switch-block

    OPEN_PAREN      shift and go to state 110


state 35

    (143) statement-list -> statement .

    IDENTIFIER      reduce using rule 143 (statement-list -> statement .)
    BLOCK_BEGIN     reduce using rule 143 (statement-list -> statement .)
    DELIM           reduce using rule 143 (statement-list -> statement .)
    CONSOLE         reduce using rule 143 (statement-list -> statement .)
    CONST           reduce using rule 143 (statement-list -> statement .)
    IF              reduce using rule 143 (statement-list -> statement .)
    SWITCH          reduce using rule 143 (statement-list -> statement .)
    WHILE           reduce using rule 143 (statement-list -> statement .)
    FOR             reduce using rule 143 (statement-list -> statement .)
    DO              reduce using rule 143 (statement-list -> statement .)
    BREAK           reduce using rule 143 (statement-list -> statement .)
    CONTINUE        reduce using rule 143 (statement-list -> statement .)
    GOTO            reduce using rule 143 (statement-list -> statement .)
    RETURN          reduce using rule 143 (statement-list -> statement .)
    BOOL            reduce using rule 143 (statement-list -> statement .)
    INT             reduce using rule 143 (statement-list -> statement .)
    UINT            reduce using rule 143 (statement-list -> statement .)
    CHAR            reduce using rule 143 (statement-list -> statement .)
    DOUBLE          reduce using rule 143 (statement-list -> statement .)
    CASE            reduce using rule 143 (statement-list -> statement .)
    DEFAULT         reduce using rule 143 (statement-list -> statement .)
    BLOCK_END       reduce using rule 143 (statement-list -> statement .)
    $end            reduce using rule 143 (statement-list -> statement .)


state 36

    (159) labeled-statement -> IDENTIFIER . COLON statement
    (96) invocation-expression -> IDENTIFIER . OPEN_PAREN argument-list-opt CLOSE_PAREN
    (13) class-type -> IDENTIFIER .
    (94) member-access -> IDENTIFIER . DOT IDENTIFIER
    (102) prim-expression -> IDENTIFIER .
    (100) element-access -> IDENTIFIER . OPEN_BRACKET expression CLOSE_BRACKET

    COLON           shift and go to state 113
    OPEN_PAREN      shift and go to state 112
    IDENTIFIER      reduce using rule 13 (class-type -> IDENTIFIER .)
    DOT             shift and go to state 114
    ASSIGN          reduce using rule 102 (prim-expression -> IDENTIFIER .)
    PLUSEQUAL       reduce using rule 102 (prim-expression -> IDENTIFIER .)
    MINUSEQUAL      reduce using rule 102 (prim-expression -> IDENTIFIER .)
    TIMESEQUAL      reduce using rule 102 (prim-expression -> IDENTIFIER .)
    DIVEQUAL        reduce using rule 102 (prim-expression -> IDENTIFIER .)
    MODEQUAL        reduce using rule 102 (prim-expression -> IDENTIFIER .)
    BITANDEQUAL     reduce using rule 102 (prim-expression -> IDENTIFIER .)
    BITOREQUAL      reduce using rule 102 (prim-expression -> IDENTIFIER .)
    BITXOREQUAL     reduce using rule 102 (prim-expression -> IDENTIFIER .)
    LSHIFTEQUAL     reduce using rule 102 (prim-expression -> IDENTIFIER .)
    RSHIFTEQUAL     reduce using rule 102 (prim-expression -> IDENTIFIER .)
    OPEN_BRACKET    shift and go to state 111


state 37

    (162) local-variable-declaration -> type . variable-declarators
    (121) variable-declarators -> . variable-declarator
    (122) variable-declarators -> . variable-declarators COMMA variable-declarator
    (123) variable-declarator -> . IDENTIFIER
    (124) variable-declarator -> . IDENTIFIER ASSIGN variable-initializer

    IDENTIFIER      shift and go to state 117

    variable-declarator            shift and go to state 115
    variable-declarators           shift and go to state 116

state 38

    (6) class-declarations-opt -> empty .

    $end            reduce using rule 6 (class-declarations-opt -> empty .)


state 39

    (28) type -> array-type .

    IDENTIFIER      reduce using rule 28 (type -> array-type .)


state 40

    (146) statement -> declaration-statement .

    IDENTIFIER      reduce using rule 146 (statement -> declaration-statement .)
    BLOCK_BEGIN     reduce using rule 146 (statement -> declaration-statement .)
    DELIM           reduce using rule 146 (statement -> declaration-statement .)
    CONSOLE         reduce using rule 146 (statement -> declaration-statement .)
    CONST           reduce using rule 146 (statement -> declaration-statement .)
    IF              reduce using rule 146 (statement -> declaration-statement .)
    SWITCH          reduce using rule 146 (statement -> declaration-statement .)
    WHILE           reduce using rule 146 (statement -> declaration-statement .)
    FOR             reduce using rule 146 (statement -> declaration-statement .)
    DO              reduce using rule 146 (statement -> declaration-statement .)
    BREAK           reduce using rule 146 (statement -> declaration-statement .)
    CONTINUE        reduce using rule 146 (statement -> declaration-statement .)
    GOTO            reduce using rule 146 (statement -> declaration-statement .)
    RETURN          reduce using rule 146 (statement -> declaration-statement .)
    BOOL            reduce using rule 146 (statement -> declaration-statement .)
    INT             reduce using rule 146 (statement -> declaration-statement .)
    UINT            reduce using rule 146 (statement -> declaration-statement .)
    CHAR            reduce using rule 146 (statement -> declaration-statement .)
    DOUBLE          reduce using rule 146 (statement -> declaration-statement .)
    CASE            reduce using rule 146 (statement -> declaration-statement .)
    DEFAULT         reduce using rule 146 (statement -> declaration-statement .)
    BLOCK_END       reduce using rule 146 (statement -> declaration-statement .)
    $end            reduce using rule 146 (statement -> declaration-statement .)


state 41

    (151) statement -> iteration-statement .

    IDENTIFIER      reduce using rule 151 (statement -> iteration-statement .)
    BLOCK_BEGIN     reduce using rule 151 (statement -> iteration-statement .)
    DELIM           reduce using rule 151 (statement -> iteration-statement .)
    CONSOLE         reduce using rule 151 (statement -> iteration-statement .)
    CONST           reduce using rule 151 (statement -> iteration-statement .)
    IF              reduce using rule 151 (statement -> iteration-statement .)
    SWITCH          reduce using rule 151 (statement -> iteration-statement .)
    WHILE           reduce using rule 151 (statement -> iteration-statement .)
    FOR             reduce using rule 151 (statement -> iteration-statement .)
    DO              reduce using rule 151 (statement -> iteration-statement .)
    BREAK           reduce using rule 151 (statement -> iteration-statement .)
    CONTINUE        reduce using rule 151 (statement -> iteration-statement .)
    GOTO            reduce using rule 151 (statement -> iteration-statement .)
    RETURN          reduce using rule 151 (statement -> iteration-statement .)
    BOOL            reduce using rule 151 (statement -> iteration-statement .)
    INT             reduce using rule 151 (statement -> iteration-statement .)
    UINT            reduce using rule 151 (statement -> iteration-statement .)
    CHAR            reduce using rule 151 (statement -> iteration-statement .)
    DOUBLE          reduce using rule 151 (statement -> iteration-statement .)
    CASE            reduce using rule 151 (statement -> iteration-statement .)
    DEFAULT         reduce using rule 151 (statement -> iteration-statement .)
    BLOCK_END       reduce using rule 151 (statement -> iteration-statement .)
    $end            reduce using rule 151 (statement -> iteration-statement .)


state 42

    (206) break-statement -> BREAK . DELIM

    DELIM           shift and go to state 118


state 43

    (29) simple-type -> BOOL .

    OPEN_BRACKET    reduce using rule 29 (simple-type -> BOOL .)
    IDENTIFIER      reduce using rule 29 (simple-type -> BOOL .)


state 44

    (2) compilation-unit -> statement-list .
    (144) statement-list -> statement-list . statement
    (145) statement -> . labeled-statement
    (146) statement -> . declaration-statement
    (147) statement -> . block
    (148) statement -> . empty-statement
    (149) statement -> . expression-statement
    (150) statement -> . selection-statement
    (151) statement -> . iteration-statement
    (152) statement -> . jump-statement
    (153) statement -> . write-statement
    (154) statement -> . read-statement
    (159) labeled-statement -> . IDENTIFIER COLON statement
    (160) declaration-statement -> . local-variable-declaration DELIM
    (161) declaration-statement -> . local-constant-declaration DELIM
    (139) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END
    (164) empty-statement -> . DELIM
    (165) expression-statement -> . statement-expression DELIM
    (168) selection-statement -> . if-statement M_quad
    (169) selection-statement -> . switch-statement
    (186) iteration-statement -> . while-statement M_quad
    (187) iteration-statement -> . for-statement M_quad
    (188) iteration-statement -> . do-statement M_quad
    (202) jump-statement -> . break-statement
    (203) jump-statement -> . continue-statement
    (204) jump-statement -> . goto-statement
    (205) jump-statement -> . return-statement
    (155) write-statement -> . CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM
    (158) read-statement -> . CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM
    (162) local-variable-declaration -> . type variable-declarators
    (163) local-constant-declaration -> . CONST type constant-declarators
    (166) statement-expression -> . invocation-expression
    (167) statement-expression -> . assignment
    (170) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block
    (171) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block
    (175) switch-statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block
    (189) while-statement -> . WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block
    (192) for-statement -> . FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block
    (191) do-statement -> . DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM
    (206) break-statement -> . BREAK DELIM
    (207) continue-statement -> . CONTINUE DELIM
    (208) goto-statement -> . GOTO IDENTIFIER DELIM
    (209) return-statement -> . RETURN expression-opt DELIM
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (96) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (97) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (105) assignment -> . prim-expression assignment-operator expression
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE
    (13) class-type -> . IDENTIFIER
    (34) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET
    (94) member-access -> . IDENTIFIER DOT IDENTIFIER
    (95) member-access -> . member-access DOT IDENTIFIER
    (102) prim-expression -> . IDENTIFIER
    (103) prim-expression -> . member-access
    (104) prim-expression -> . element-access
    (100) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (101) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    $end            reduce using rule 2 (compilation-unit -> statement-list .)
    IDENTIFIER      shift and go to state 36
    BLOCK_BEGIN     shift and go to state 49
    DELIM           shift and go to state 4
    CONSOLE         shift and go to state 53
    CONST           shift and go to state 48
    IF              shift and go to state 57
    SWITCH          shift and go to state 34
    WHILE           shift and go to state 31
    FOR             shift and go to state 21
    DO              shift and go to state 47
    BREAK           shift and go to state 42
    CONTINUE        shift and go to state 27
    GOTO            shift and go to state 7
    RETURN          shift and go to state 14
    BOOL            shift and go to state 43
    INT             shift and go to state 24
    UINT            shift and go to state 56
    CHAR            shift and go to state 30
    DOUBLE          shift and go to state 12

    return-statement               shift and go to state 16
    write-statement                shift and go to state 1
    member-access                  shift and go to state 2
    selection-statement            shift and go to state 29
    empty-statement                shift and go to state 32
    expression-statement           shift and go to state 3
    break-statement                shift and go to state 33
    prim-expression                shift and go to state 50
    element-access                 shift and go to state 18
    statement-expression           shift and go to state 5
    local-constant-declaration     shift and go to state 19
    statement                      shift and go to state 119
    assignment                     shift and go to state 54
    for-statement                  shift and go to state 6
    type                           shift and go to state 37
    read-statement                 shift and go to state 52
    do-statement                   shift and go to state 20
    array-type                     shift and go to state 39
    continue-statement             shift and go to state 22
    invocation-expression          shift and go to state 13
    labeled-statement              shift and go to state 8
    declaration-statement          shift and go to state 40
    switch-statement               shift and go to state 9
    jump-statement                 shift and go to state 10
    iteration-statement            shift and go to state 41
    local-variable-declaration     shift and go to state 23
    goto-statement                 shift and go to state 25
    if-statement                   shift and go to state 26
    class-type                     shift and go to state 58
    while-statement                shift and go to state 45
    simple-type                    shift and go to state 15
    block                          shift and go to state 28

state 45

    (186) iteration-statement -> while-statement . M_quad
    (174) M_quad -> . empty
    (223) empty -> .

    IDENTIFIER      reduce using rule 223 (empty -> .)
    BLOCK_BEGIN     reduce using rule 223 (empty -> .)
    DELIM           reduce using rule 223 (empty -> .)
    CONSOLE         reduce using rule 223 (empty -> .)
    CONST           reduce using rule 223 (empty -> .)
    IF              reduce using rule 223 (empty -> .)
    SWITCH          reduce using rule 223 (empty -> .)
    WHILE           reduce using rule 223 (empty -> .)
    FOR             reduce using rule 223 (empty -> .)
    DO              reduce using rule 223 (empty -> .)
    BREAK           reduce using rule 223 (empty -> .)
    CONTINUE        reduce using rule 223 (empty -> .)
    GOTO            reduce using rule 223 (empty -> .)
    RETURN          reduce using rule 223 (empty -> .)
    BOOL            reduce using rule 223 (empty -> .)
    INT             reduce using rule 223 (empty -> .)
    UINT            reduce using rule 223 (empty -> .)
    CHAR            reduce using rule 223 (empty -> .)
    DOUBLE          reduce using rule 223 (empty -> .)
    $end            reduce using rule 223 (empty -> .)
    BLOCK_END       reduce using rule 223 (empty -> .)
    CASE            reduce using rule 223 (empty -> .)
    DEFAULT         reduce using rule 223 (empty -> .)

    M_quad                         shift and go to state 120
    empty                          shift and go to state 64

state 46

    (0) S' -> compilation-unit .



state 47

    (191) do-statement -> DO . M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM
    (174) M_quad -> . empty
    (223) empty -> .

    BLOCK_BEGIN     reduce using rule 223 (empty -> .)

    M_quad                         shift and go to state 121
    empty                          shift and go to state 64

state 48

    (163) local-constant-declaration -> CONST . type constant-declarators
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE
    (13) class-type -> . IDENTIFIER
    (34) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET

    BOOL            shift and go to state 43
    INT             shift and go to state 24
    UINT            shift and go to state 56
    CHAR            shift and go to state 30
    DOUBLE          shift and go to state 12
    IDENTIFIER      shift and go to state 122

    simple-type                    shift and go to state 15
    array-type                     shift and go to state 39
    type                           shift and go to state 123
    class-type                     shift and go to state 58

state 49

    (139) block -> BLOCK_BEGIN . M_bstart statement-list-opt BLOCK_END
    (140) M_bstart -> . empty
    (223) empty -> .

    IDENTIFIER      reduce using rule 223 (empty -> .)
    BLOCK_BEGIN     reduce using rule 223 (empty -> .)
    DELIM           reduce using rule 223 (empty -> .)
    CONSOLE         reduce using rule 223 (empty -> .)
    CONST           reduce using rule 223 (empty -> .)
    IF              reduce using rule 223 (empty -> .)
    SWITCH          reduce using rule 223 (empty -> .)
    WHILE           reduce using rule 223 (empty -> .)
    FOR             reduce using rule 223 (empty -> .)
    DO              reduce using rule 223 (empty -> .)
    BREAK           reduce using rule 223 (empty -> .)
    CONTINUE        reduce using rule 223 (empty -> .)
    GOTO            reduce using rule 223 (empty -> .)
    RETURN          reduce using rule 223 (empty -> .)
    BOOL            reduce using rule 223 (empty -> .)
    INT             reduce using rule 223 (empty -> .)
    UINT            reduce using rule 223 (empty -> .)
    CHAR            reduce using rule 223 (empty -> .)
    DOUBLE          reduce using rule 223 (empty -> .)
    BLOCK_END       reduce using rule 223 (empty -> .)

    M_bstart                       shift and go to state 124
    empty                          shift and go to state 125

state 50

    (105) assignment -> prim-expression . assignment-operator expression
    (106) assignment-operator -> . ASSIGN
    (107) assignment-operator -> . PLUSEQUAL
    (108) assignment-operator -> . MINUSEQUAL
    (109) assignment-operator -> . TIMESEQUAL
    (110) assignment-operator -> . DIVEQUAL
    (111) assignment-operator -> . MODEQUAL
    (112) assignment-operator -> . BITANDEQUAL
    (113) assignment-operator -> . BITOREQUAL
    (114) assignment-operator -> . BITXOREQUAL
    (115) assignment-operator -> . LSHIFTEQUAL
    (116) assignment-operator -> . RSHIFTEQUAL

    ASSIGN          shift and go to state 136
    PLUSEQUAL       shift and go to state 132
    MINUSEQUAL      shift and go to state 130
    TIMESEQUAL      shift and go to state 129
    DIVEQUAL        shift and go to state 126
    MODEQUAL        shift and go to state 137
    BITANDEQUAL     shift and go to state 134
    BITOREQUAL      shift and go to state 131
    BITXOREQUAL     shift and go to state 133
    LSHIFTEQUAL     shift and go to state 135
    RSHIFTEQUAL     shift and go to state 127

    assignment-operator            shift and go to state 128

state 51

    (9) class-declaration -> CLASS . IDENTIFIER class-base-opt class-body semi-opt

    IDENTIFIER      shift and go to state 138


state 52

    (154) statement -> read-statement .

    IDENTIFIER      reduce using rule 154 (statement -> read-statement .)
    BLOCK_BEGIN     reduce using rule 154 (statement -> read-statement .)
    DELIM           reduce using rule 154 (statement -> read-statement .)
    CONSOLE         reduce using rule 154 (statement -> read-statement .)
    CONST           reduce using rule 154 (statement -> read-statement .)
    IF              reduce using rule 154 (statement -> read-statement .)
    SWITCH          reduce using rule 154 (statement -> read-statement .)
    WHILE           reduce using rule 154 (statement -> read-statement .)
    FOR             reduce using rule 154 (statement -> read-statement .)
    DO              reduce using rule 154 (statement -> read-statement .)
    BREAK           reduce using rule 154 (statement -> read-statement .)
    CONTINUE        reduce using rule 154 (statement -> read-statement .)
    GOTO            reduce using rule 154 (statement -> read-statement .)
    RETURN          reduce using rule 154 (statement -> read-statement .)
    BOOL            reduce using rule 154 (statement -> read-statement .)
    INT             reduce using rule 154 (statement -> read-statement .)
    UINT            reduce using rule 154 (statement -> read-statement .)
    CHAR            reduce using rule 154 (statement -> read-statement .)
    DOUBLE          reduce using rule 154 (statement -> read-statement .)
    CASE            reduce using rule 154 (statement -> read-statement .)
    DEFAULT         reduce using rule 154 (statement -> read-statement .)
    BLOCK_END       reduce using rule 154 (statement -> read-statement .)
    $end            reduce using rule 154 (statement -> read-statement .)


state 53

    (155) write-statement -> CONSOLE . DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM
    (158) read-statement -> CONSOLE . DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM

    DOT             shift and go to state 139


state 54

    (167) statement-expression -> assignment .

    DELIM           reduce using rule 167 (statement-expression -> assignment .)
    COMMA           reduce using rule 167 (statement-expression -> assignment .)
    CLOSE_PAREN     reduce using rule 167 (statement-expression -> assignment .)


state 55

    (7) class-declarations -> class-declaration .

    CLASS           reduce using rule 7 (class-declarations -> class-declaration .)
    $end            reduce using rule 7 (class-declarations -> class-declaration .)


state 56

    (31) simple-type -> UINT .

    OPEN_BRACKET    reduce using rule 31 (simple-type -> UINT .)
    IDENTIFIER      reduce using rule 31 (simple-type -> UINT .)


state 57

    (170) if-statement -> IF . OPEN_PAREN expression CLOSE_PAREN M_if block
    (171) if-statement -> IF . OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block

    OPEN_PAREN      shift and go to state 140


state 58

    (27) type -> class-type .

    IDENTIFIER      reduce using rule 27 (type -> class-type .)


state 59

    (101) element-access -> member-access OPEN_BRACKET . expression CLOSE_BRACKET
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (105) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (102) prim-expression -> . IDENTIFIER
    (103) prim-expression -> . member-access
    (104) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (94) member-access -> . IDENTIFIER DOT IDENTIFIER
    (95) member-access -> . member-access DOT IDENTIFIER
    (100) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (101) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . array-creation-expression
    (76) primary-expression -> . primary-no-array-creation-expression
    (77) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (87) primary-no-array-creation-expression -> . literal
    (88) primary-no-array-creation-expression -> . IDENTIFIER
    (89) primary-no-array-creation-expression -> . parenthesized-expression
    (90) primary-no-array-creation-expression -> . member-access
    (91) primary-no-array-creation-expression -> . invocation-expression
    (92) primary-no-array-creation-expression -> . element-access
    (219) literal -> . ICONST
    (220) literal -> . DCONST
    (221) literal -> . TRUE
    (222) literal -> . FALSE
    (93) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (96) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (97) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 81
    PLUS            shift and go to state 80
    MINUS           shift and go to state 73
    BITNOT          shift and go to state 96
    BITCOMP         shift and go to state 75
    NEW             shift and go to state 71
    ICONST          shift and go to state 86
    DCONST          shift and go to state 97
    TRUE            shift and go to state 91
    FALSE           shift and go to state 89
    OPEN_PAREN      shift and go to state 77

    unary-expression               shift and go to state 87
    exclusive-or-expression        shift and go to state 67
    member-access                  shift and go to state 68
    relational-expression          shift and go to state 69
    additive-expression            shift and go to state 72
    primary-no-array-creation-expression shift and go to state 85
    inclusive-or-expression        shift and go to state 74
    prim-expression                shift and go to state 50
    element-access                 shift and go to state 76
    literal                        shift and go to state 84
    conditional-expression         shift and go to state 78
    assignment                     shift and go to state 83
    array-creation-expression      shift and go to state 70
    conditional-and-expression     shift and go to state 79
    equality-expression            shift and go to state 90
    shift-expression               shift and go to state 92
    and-expression                 shift and go to state 93
    multiplicative-expression      shift and go to state 94
    expression                     shift and go to state 141
    primary-expression             shift and go to state 98
    invocation-expression          shift and go to state 99
    conditional-or-expression      shift and go to state 100
    parenthesized-expression       shift and go to state 101

state 60

    (97) invocation-expression -> member-access OPEN_PAREN . argument-list-opt CLOSE_PAREN
    (98) argument-list-opt -> . expression-list
    (99) argument-list-opt -> . empty
    (80) expression-list -> . expression
    (81) expression-list -> . expression-list COMMA expression
    (223) empty -> .
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (105) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (102) prim-expression -> . IDENTIFIER
    (103) prim-expression -> . member-access
    (104) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (94) member-access -> . IDENTIFIER DOT IDENTIFIER
    (95) member-access -> . member-access DOT IDENTIFIER
    (100) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (101) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . array-creation-expression
    (76) primary-expression -> . primary-no-array-creation-expression
    (77) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (87) primary-no-array-creation-expression -> . literal
    (88) primary-no-array-creation-expression -> . IDENTIFIER
    (89) primary-no-array-creation-expression -> . parenthesized-expression
    (90) primary-no-array-creation-expression -> . member-access
    (91) primary-no-array-creation-expression -> . invocation-expression
    (92) primary-no-array-creation-expression -> . element-access
    (219) literal -> . ICONST
    (220) literal -> . DCONST
    (221) literal -> . TRUE
    (222) literal -> . FALSE
    (93) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (96) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (97) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    CLOSE_PAREN     reduce using rule 223 (empty -> .)
    IDENTIFIER      shift and go to state 81
    PLUS            shift and go to state 80
    MINUS           shift and go to state 73
    BITNOT          shift and go to state 96
    BITCOMP         shift and go to state 75
    NEW             shift and go to state 71
    ICONST          shift and go to state 86
    DCONST          shift and go to state 97
    TRUE            shift and go to state 91
    FALSE           shift and go to state 89
    OPEN_PAREN      shift and go to state 77

    argument-list-opt              shift and go to state 142
    unary-expression               shift and go to state 87
    exclusive-or-expression        shift and go to state 67
    member-access                  shift and go to state 68
    relational-expression          shift and go to state 69
    additive-expression            shift and go to state 72
    primary-no-array-creation-expression shift and go to state 85
    inclusive-or-expression        shift and go to state 74
    expression-list                shift and go to state 144
    prim-expression                shift and go to state 50
    element-access                 shift and go to state 76
    literal                        shift and go to state 84
    conditional-expression         shift and go to state 78
    assignment                     shift and go to state 83
    empty                          shift and go to state 143
    array-creation-expression      shift and go to state 70
    conditional-and-expression     shift and go to state 79
    equality-expression            shift and go to state 90
    shift-expression               shift and go to state 92
    and-expression                 shift and go to state 93
    multiplicative-expression      shift and go to state 94
    conditional-or-expression      shift and go to state 100
    primary-expression             shift and go to state 98
    invocation-expression          shift and go to state 99
    expression                     shift and go to state 145
    parenthesized-expression       shift and go to state 101

state 61

    (95) member-access -> member-access DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 146


state 62

    (165) expression-statement -> statement-expression DELIM .

    IDENTIFIER      reduce using rule 165 (expression-statement -> statement-expression DELIM .)
    BLOCK_BEGIN     reduce using rule 165 (expression-statement -> statement-expression DELIM .)
    DELIM           reduce using rule 165 (expression-statement -> statement-expression DELIM .)
    CONSOLE         reduce using rule 165 (expression-statement -> statement-expression DELIM .)
    CONST           reduce using rule 165 (expression-statement -> statement-expression DELIM .)
    IF              reduce using rule 165 (expression-statement -> statement-expression DELIM .)
    SWITCH          reduce using rule 165 (expression-statement -> statement-expression DELIM .)
    WHILE           reduce using rule 165 (expression-statement -> statement-expression DELIM .)
    FOR             reduce using rule 165 (expression-statement -> statement-expression DELIM .)
    DO              reduce using rule 165 (expression-statement -> statement-expression DELIM .)
    BREAK           reduce using rule 165 (expression-statement -> statement-expression DELIM .)
    CONTINUE        reduce using rule 165 (expression-statement -> statement-expression DELIM .)
    GOTO            reduce using rule 165 (expression-statement -> statement-expression DELIM .)
    RETURN          reduce using rule 165 (expression-statement -> statement-expression DELIM .)
    BOOL            reduce using rule 165 (expression-statement -> statement-expression DELIM .)
    INT             reduce using rule 165 (expression-statement -> statement-expression DELIM .)
    UINT            reduce using rule 165 (expression-statement -> statement-expression DELIM .)
    CHAR            reduce using rule 165 (expression-statement -> statement-expression DELIM .)
    DOUBLE          reduce using rule 165 (expression-statement -> statement-expression DELIM .)
    $end            reduce using rule 165 (expression-statement -> statement-expression DELIM .)
    BLOCK_END       reduce using rule 165 (expression-statement -> statement-expression DELIM .)
    CASE            reduce using rule 165 (expression-statement -> statement-expression DELIM .)
    DEFAULT         reduce using rule 165 (expression-statement -> statement-expression DELIM .)


state 63

    (187) iteration-statement -> for-statement M_quad .

    IDENTIFIER      reduce using rule 187 (iteration-statement -> for-statement M_quad .)
    BLOCK_BEGIN     reduce using rule 187 (iteration-statement -> for-statement M_quad .)
    DELIM           reduce using rule 187 (iteration-statement -> for-statement M_quad .)
    CONSOLE         reduce using rule 187 (iteration-statement -> for-statement M_quad .)
    CONST           reduce using rule 187 (iteration-statement -> for-statement M_quad .)
    IF              reduce using rule 187 (iteration-statement -> for-statement M_quad .)
    SWITCH          reduce using rule 187 (iteration-statement -> for-statement M_quad .)
    WHILE           reduce using rule 187 (iteration-statement -> for-statement M_quad .)
    FOR             reduce using rule 187 (iteration-statement -> for-statement M_quad .)
    DO              reduce using rule 187 (iteration-statement -> for-statement M_quad .)
    BREAK           reduce using rule 187 (iteration-statement -> for-statement M_quad .)
    CONTINUE        reduce using rule 187 (iteration-statement -> for-statement M_quad .)
    GOTO            reduce using rule 187 (iteration-statement -> for-statement M_quad .)
    RETURN          reduce using rule 187 (iteration-statement -> for-statement M_quad .)
    BOOL            reduce using rule 187 (iteration-statement -> for-statement M_quad .)
    INT             reduce using rule 187 (iteration-statement -> for-statement M_quad .)
    UINT            reduce using rule 187 (iteration-statement -> for-statement M_quad .)
    CHAR            reduce using rule 187 (iteration-statement -> for-statement M_quad .)
    DOUBLE          reduce using rule 187 (iteration-statement -> for-statement M_quad .)
    CASE            reduce using rule 187 (iteration-statement -> for-statement M_quad .)
    DEFAULT         reduce using rule 187 (iteration-statement -> for-statement M_quad .)
    BLOCK_END       reduce using rule 187 (iteration-statement -> for-statement M_quad .)
    $end            reduce using rule 187 (iteration-statement -> for-statement M_quad .)


state 64

    (174) M_quad -> empty .

    IDENTIFIER      reduce using rule 174 (M_quad -> empty .)
    BLOCK_BEGIN     reduce using rule 174 (M_quad -> empty .)
    DELIM           reduce using rule 174 (M_quad -> empty .)
    CONSOLE         reduce using rule 174 (M_quad -> empty .)
    CONST           reduce using rule 174 (M_quad -> empty .)
    IF              reduce using rule 174 (M_quad -> empty .)
    SWITCH          reduce using rule 174 (M_quad -> empty .)
    WHILE           reduce using rule 174 (M_quad -> empty .)
    FOR             reduce using rule 174 (M_quad -> empty .)
    DO              reduce using rule 174 (M_quad -> empty .)
    BREAK           reduce using rule 174 (M_quad -> empty .)
    CONTINUE        reduce using rule 174 (M_quad -> empty .)
    GOTO            reduce using rule 174 (M_quad -> empty .)
    RETURN          reduce using rule 174 (M_quad -> empty .)
    BOOL            reduce using rule 174 (M_quad -> empty .)
    INT             reduce using rule 174 (M_quad -> empty .)
    UINT            reduce using rule 174 (M_quad -> empty .)
    CHAR            reduce using rule 174 (M_quad -> empty .)
    DOUBLE          reduce using rule 174 (M_quad -> empty .)
    $end            reduce using rule 174 (M_quad -> empty .)
    BLOCK_END       reduce using rule 174 (M_quad -> empty .)
    CASE            reduce using rule 174 (M_quad -> empty .)
    DEFAULT         reduce using rule 174 (M_quad -> empty .)
    PLUS            reduce using rule 174 (M_quad -> empty .)
    MINUS           reduce using rule 174 (M_quad -> empty .)
    BITNOT          reduce using rule 174 (M_quad -> empty .)
    BITCOMP         reduce using rule 174 (M_quad -> empty .)
    NEW             reduce using rule 174 (M_quad -> empty .)
    ICONST          reduce using rule 174 (M_quad -> empty .)
    DCONST          reduce using rule 174 (M_quad -> empty .)
    TRUE            reduce using rule 174 (M_quad -> empty .)
    FALSE           reduce using rule 174 (M_quad -> empty .)
    OPEN_PAREN      reduce using rule 174 (M_quad -> empty .)
    CLOSE_PAREN     reduce using rule 174 (M_quad -> empty .)


state 65

    (208) goto-statement -> GOTO IDENTIFIER . DELIM

    DELIM           shift and go to state 147


state 66

    (8) class-declarations -> class-declarations class-declaration .

    CLASS           reduce using rule 8 (class-declarations -> class-declarations class-declaration .)
    $end            reduce using rule 8 (class-declarations -> class-declarations class-declaration .)


state 67

    (46) inclusive-or-expression -> exclusive-or-expression .
    (49) exclusive-or-expression -> exclusive-or-expression . BITXOR and-expression

    BITOR           reduce using rule 46 (inclusive-or-expression -> exclusive-or-expression .)
    LOGAND          reduce using rule 46 (inclusive-or-expression -> exclusive-or-expression .)
    CONDOP          reduce using rule 46 (inclusive-or-expression -> exclusive-or-expression .)
    LOGOR           reduce using rule 46 (inclusive-or-expression -> exclusive-or-expression .)
    CLOSE_BRACKET   reduce using rule 46 (inclusive-or-expression -> exclusive-or-expression .)
    DELIM           reduce using rule 46 (inclusive-or-expression -> exclusive-or-expression .)
    COMMA           reduce using rule 46 (inclusive-or-expression -> exclusive-or-expression .)
    CLOSE_PAREN     reduce using rule 46 (inclusive-or-expression -> exclusive-or-expression .)
    COLON           reduce using rule 46 (inclusive-or-expression -> exclusive-or-expression .)
    BLOCK_END       reduce using rule 46 (inclusive-or-expression -> exclusive-or-expression .)
    BITXOR          shift and go to state 148


state 68

    (103) prim-expression -> member-access .
    (95) member-access -> member-access . DOT IDENTIFIER
    (101) element-access -> member-access . OPEN_BRACKET expression CLOSE_BRACKET
    (90) primary-no-array-creation-expression -> member-access .
    (97) invocation-expression -> member-access . OPEN_PAREN argument-list-opt CLOSE_PAREN

    ASSIGN          reduce using rule 103 (prim-expression -> member-access .)
    PLUSEQUAL       reduce using rule 103 (prim-expression -> member-access .)
    MINUSEQUAL      reduce using rule 103 (prim-expression -> member-access .)
    TIMESEQUAL      reduce using rule 103 (prim-expression -> member-access .)
    DIVEQUAL        reduce using rule 103 (prim-expression -> member-access .)
    MODEQUAL        reduce using rule 103 (prim-expression -> member-access .)
    BITANDEQUAL     reduce using rule 103 (prim-expression -> member-access .)
    BITOREQUAL      reduce using rule 103 (prim-expression -> member-access .)
    BITXOREQUAL     reduce using rule 103 (prim-expression -> member-access .)
    LSHIFTEQUAL     reduce using rule 103 (prim-expression -> member-access .)
    RSHIFTEQUAL     reduce using rule 103 (prim-expression -> member-access .)
    DOT             shift and go to state 61
    OPEN_BRACKET    shift and go to state 59
    TIMES           reduce using rule 90 (primary-no-array-creation-expression -> member-access .)
    DIV             reduce using rule 90 (primary-no-array-creation-expression -> member-access .)
    MOD             reduce using rule 90 (primary-no-array-creation-expression -> member-access .)
    PLUS            reduce using rule 90 (primary-no-array-creation-expression -> member-access .)
    MINUS           reduce using rule 90 (primary-no-array-creation-expression -> member-access .)
    LSHIFT          reduce using rule 90 (primary-no-array-creation-expression -> member-access .)
    RSHIFT          reduce using rule 90 (primary-no-array-creation-expression -> member-access .)
    LT              reduce using rule 90 (primary-no-array-creation-expression -> member-access .)
    GT              reduce using rule 90 (primary-no-array-creation-expression -> member-access .)
    LE              reduce using rule 90 (primary-no-array-creation-expression -> member-access .)
    GE              reduce using rule 90 (primary-no-array-creation-expression -> member-access .)
    EQ              reduce using rule 90 (primary-no-array-creation-expression -> member-access .)
    NE              reduce using rule 90 (primary-no-array-creation-expression -> member-access .)
    BITAND          reduce using rule 90 (primary-no-array-creation-expression -> member-access .)
    BITXOR          reduce using rule 90 (primary-no-array-creation-expression -> member-access .)
    BITOR           reduce using rule 90 (primary-no-array-creation-expression -> member-access .)
    LOGAND          reduce using rule 90 (primary-no-array-creation-expression -> member-access .)
    CONDOP          reduce using rule 90 (primary-no-array-creation-expression -> member-access .)
    LOGOR           reduce using rule 90 (primary-no-array-creation-expression -> member-access .)
    DELIM           reduce using rule 90 (primary-no-array-creation-expression -> member-access .)
    CLOSE_BRACKET   reduce using rule 90 (primary-no-array-creation-expression -> member-access .)
    COMMA           reduce using rule 90 (primary-no-array-creation-expression -> member-access .)
    CLOSE_PAREN     reduce using rule 90 (primary-no-array-creation-expression -> member-access .)
    COLON           reduce using rule 90 (primary-no-array-creation-expression -> member-access .)
    BLOCK_END       reduce using rule 90 (primary-no-array-creation-expression -> member-access .)
    OPEN_PAREN      shift and go to state 60


state 69

    (52) equality-expression -> relational-expression .
    (56) relational-expression -> relational-expression . LT shift-expression
    (57) relational-expression -> relational-expression . GT shift-expression
    (58) relational-expression -> relational-expression . LE shift-expression
    (59) relational-expression -> relational-expression . GE shift-expression

    EQ              reduce using rule 52 (equality-expression -> relational-expression .)
    NE              reduce using rule 52 (equality-expression -> relational-expression .)
    BITAND          reduce using rule 52 (equality-expression -> relational-expression .)
    BITXOR          reduce using rule 52 (equality-expression -> relational-expression .)
    BITOR           reduce using rule 52 (equality-expression -> relational-expression .)
    LOGAND          reduce using rule 52 (equality-expression -> relational-expression .)
    CONDOP          reduce using rule 52 (equality-expression -> relational-expression .)
    LOGOR           reduce using rule 52 (equality-expression -> relational-expression .)
    COMMA           reduce using rule 52 (equality-expression -> relational-expression .)
    CLOSE_PAREN     reduce using rule 52 (equality-expression -> relational-expression .)
    BLOCK_END       reduce using rule 52 (equality-expression -> relational-expression .)
    DELIM           reduce using rule 52 (equality-expression -> relational-expression .)
    CLOSE_BRACKET   reduce using rule 52 (equality-expression -> relational-expression .)
    COLON           reduce using rule 52 (equality-expression -> relational-expression .)
    LT              shift and go to state 151
    GT              shift and go to state 152
    LE              shift and go to state 149
    GE              shift and go to state 150


state 70

    (75) primary-expression -> array-creation-expression .

    TIMES           reduce using rule 75 (primary-expression -> array-creation-expression .)
    DIV             reduce using rule 75 (primary-expression -> array-creation-expression .)
    MOD             reduce using rule 75 (primary-expression -> array-creation-expression .)
    PLUS            reduce using rule 75 (primary-expression -> array-creation-expression .)
    MINUS           reduce using rule 75 (primary-expression -> array-creation-expression .)
    LSHIFT          reduce using rule 75 (primary-expression -> array-creation-expression .)
    RSHIFT          reduce using rule 75 (primary-expression -> array-creation-expression .)
    LT              reduce using rule 75 (primary-expression -> array-creation-expression .)
    GT              reduce using rule 75 (primary-expression -> array-creation-expression .)
    LE              reduce using rule 75 (primary-expression -> array-creation-expression .)
    GE              reduce using rule 75 (primary-expression -> array-creation-expression .)
    EQ              reduce using rule 75 (primary-expression -> array-creation-expression .)
    NE              reduce using rule 75 (primary-expression -> array-creation-expression .)
    BITAND          reduce using rule 75 (primary-expression -> array-creation-expression .)
    BITXOR          reduce using rule 75 (primary-expression -> array-creation-expression .)
    BITOR           reduce using rule 75 (primary-expression -> array-creation-expression .)
    LOGAND          reduce using rule 75 (primary-expression -> array-creation-expression .)
    CONDOP          reduce using rule 75 (primary-expression -> array-creation-expression .)
    LOGOR           reduce using rule 75 (primary-expression -> array-creation-expression .)
    DELIM           reduce using rule 75 (primary-expression -> array-creation-expression .)
    CLOSE_BRACKET   reduce using rule 75 (primary-expression -> array-creation-expression .)
    COMMA           reduce using rule 75 (primary-expression -> array-creation-expression .)
    CLOSE_PAREN     reduce using rule 75 (primary-expression -> array-creation-expression .)
    COLON           reduce using rule 75 (primary-expression -> array-creation-expression .)
    BLOCK_END       reduce using rule 75 (primary-expression -> array-creation-expression .)


state 71

    (77) array-creation-expression -> NEW . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE

    BOOL            shift and go to state 43
    INT             shift and go to state 24
    UINT            shift and go to state 56
    CHAR            shift and go to state 30
    DOUBLE          shift and go to state 12

    simple-type                    shift and go to state 153

state 72

    (60) shift-expression -> additive-expression .
    (64) additive-expression -> additive-expression . PLUS multiplicative-expression
    (65) additive-expression -> additive-expression . MINUS multiplicative-expression

    LSHIFT          reduce using rule 60 (shift-expression -> additive-expression .)
    RSHIFT          reduce using rule 60 (shift-expression -> additive-expression .)
    LT              reduce using rule 60 (shift-expression -> additive-expression .)
    GT              reduce using rule 60 (shift-expression -> additive-expression .)
    LE              reduce using rule 60 (shift-expression -> additive-expression .)
    GE              reduce using rule 60 (shift-expression -> additive-expression .)
    EQ              reduce using rule 60 (shift-expression -> additive-expression .)
    NE              reduce using rule 60 (shift-expression -> additive-expression .)
    BITAND          reduce using rule 60 (shift-expression -> additive-expression .)
    BITXOR          reduce using rule 60 (shift-expression -> additive-expression .)
    BITOR           reduce using rule 60 (shift-expression -> additive-expression .)
    LOGAND          reduce using rule 60 (shift-expression -> additive-expression .)
    CONDOP          reduce using rule 60 (shift-expression -> additive-expression .)
    LOGOR           reduce using rule 60 (shift-expression -> additive-expression .)
    COMMA           reduce using rule 60 (shift-expression -> additive-expression .)
    BLOCK_END       reduce using rule 60 (shift-expression -> additive-expression .)
    DELIM           reduce using rule 60 (shift-expression -> additive-expression .)
    CLOSE_BRACKET   reduce using rule 60 (shift-expression -> additive-expression .)
    CLOSE_PAREN     reduce using rule 60 (shift-expression -> additive-expression .)
    COLON           reduce using rule 60 (shift-expression -> additive-expression .)
    PLUS            shift and go to state 154
    MINUS           shift and go to state 155


state 73

    (72) unary-expression -> MINUS . unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . array-creation-expression
    (76) primary-expression -> . primary-no-array-creation-expression
    (77) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (87) primary-no-array-creation-expression -> . literal
    (88) primary-no-array-creation-expression -> . IDENTIFIER
    (89) primary-no-array-creation-expression -> . parenthesized-expression
    (90) primary-no-array-creation-expression -> . member-access
    (91) primary-no-array-creation-expression -> . invocation-expression
    (92) primary-no-array-creation-expression -> . element-access
    (219) literal -> . ICONST
    (220) literal -> . DCONST
    (221) literal -> . TRUE
    (222) literal -> . FALSE
    (93) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (94) member-access -> . IDENTIFIER DOT IDENTIFIER
    (95) member-access -> . member-access DOT IDENTIFIER
    (96) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (97) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (100) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (101) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    PLUS            shift and go to state 80
    MINUS           shift and go to state 73
    BITNOT          shift and go to state 96
    BITCOMP         shift and go to state 75
    NEW             shift and go to state 71
    IDENTIFIER      shift and go to state 159
    ICONST          shift and go to state 86
    DCONST          shift and go to state 97
    TRUE            shift and go to state 91
    FALSE           shift and go to state 89
    OPEN_PAREN      shift and go to state 77

    primary-no-array-creation-expression shift and go to state 85
    member-access                  shift and go to state 156
    unary-expression               shift and go to state 157
    element-access                 shift and go to state 158
    literal                        shift and go to state 84
    array-creation-expression      shift and go to state 70
    primary-expression             shift and go to state 98
    invocation-expression          shift and go to state 99
    parenthesized-expression       shift and go to state 101

state 74

    (44) conditional-and-expression -> inclusive-or-expression .
    (47) inclusive-or-expression -> inclusive-or-expression . BITOR exclusive-or-expression

    LOGAND          reduce using rule 44 (conditional-and-expression -> inclusive-or-expression .)
    CONDOP          reduce using rule 44 (conditional-and-expression -> inclusive-or-expression .)
    LOGOR           reduce using rule 44 (conditional-and-expression -> inclusive-or-expression .)
    DELIM           reduce using rule 44 (conditional-and-expression -> inclusive-or-expression .)
    CLOSE_BRACKET   reduce using rule 44 (conditional-and-expression -> inclusive-or-expression .)
    COMMA           reduce using rule 44 (conditional-and-expression -> inclusive-or-expression .)
    CLOSE_PAREN     reduce using rule 44 (conditional-and-expression -> inclusive-or-expression .)
    COLON           reduce using rule 44 (conditional-and-expression -> inclusive-or-expression .)
    BLOCK_END       reduce using rule 44 (conditional-and-expression -> inclusive-or-expression .)
    BITOR           shift and go to state 160


state 75

    (74) unary-expression -> BITCOMP . unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . array-creation-expression
    (76) primary-expression -> . primary-no-array-creation-expression
    (77) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (87) primary-no-array-creation-expression -> . literal
    (88) primary-no-array-creation-expression -> . IDENTIFIER
    (89) primary-no-array-creation-expression -> . parenthesized-expression
    (90) primary-no-array-creation-expression -> . member-access
    (91) primary-no-array-creation-expression -> . invocation-expression
    (92) primary-no-array-creation-expression -> . element-access
    (219) literal -> . ICONST
    (220) literal -> . DCONST
    (221) literal -> . TRUE
    (222) literal -> . FALSE
    (93) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (94) member-access -> . IDENTIFIER DOT IDENTIFIER
    (95) member-access -> . member-access DOT IDENTIFIER
    (96) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (97) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (100) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (101) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    PLUS            shift and go to state 80
    MINUS           shift and go to state 73
    BITNOT          shift and go to state 96
    BITCOMP         shift and go to state 75
    NEW             shift and go to state 71
    IDENTIFIER      shift and go to state 159
    ICONST          shift and go to state 86
    DCONST          shift and go to state 97
    TRUE            shift and go to state 91
    FALSE           shift and go to state 89
    OPEN_PAREN      shift and go to state 77

    primary-no-array-creation-expression shift and go to state 85
    member-access                  shift and go to state 156
    unary-expression               shift and go to state 161
    element-access                 shift and go to state 158
    literal                        shift and go to state 84
    array-creation-expression      shift and go to state 70
    primary-expression             shift and go to state 98
    invocation-expression          shift and go to state 99
    parenthesized-expression       shift and go to state 101

state 76

    (104) prim-expression -> element-access .
    (92) primary-no-array-creation-expression -> element-access .

    ASSIGN          reduce using rule 104 (prim-expression -> element-access .)
    PLUSEQUAL       reduce using rule 104 (prim-expression -> element-access .)
    MINUSEQUAL      reduce using rule 104 (prim-expression -> element-access .)
    TIMESEQUAL      reduce using rule 104 (prim-expression -> element-access .)
    DIVEQUAL        reduce using rule 104 (prim-expression -> element-access .)
    MODEQUAL        reduce using rule 104 (prim-expression -> element-access .)
    BITANDEQUAL     reduce using rule 104 (prim-expression -> element-access .)
    BITOREQUAL      reduce using rule 104 (prim-expression -> element-access .)
    BITXOREQUAL     reduce using rule 104 (prim-expression -> element-access .)
    LSHIFTEQUAL     reduce using rule 104 (prim-expression -> element-access .)
    RSHIFTEQUAL     reduce using rule 104 (prim-expression -> element-access .)
    TIMES           reduce using rule 92 (primary-no-array-creation-expression -> element-access .)
    DIV             reduce using rule 92 (primary-no-array-creation-expression -> element-access .)
    MOD             reduce using rule 92 (primary-no-array-creation-expression -> element-access .)
    PLUS            reduce using rule 92 (primary-no-array-creation-expression -> element-access .)
    MINUS           reduce using rule 92 (primary-no-array-creation-expression -> element-access .)
    LSHIFT          reduce using rule 92 (primary-no-array-creation-expression -> element-access .)
    RSHIFT          reduce using rule 92 (primary-no-array-creation-expression -> element-access .)
    LT              reduce using rule 92 (primary-no-array-creation-expression -> element-access .)
    GT              reduce using rule 92 (primary-no-array-creation-expression -> element-access .)
    LE              reduce using rule 92 (primary-no-array-creation-expression -> element-access .)
    GE              reduce using rule 92 (primary-no-array-creation-expression -> element-access .)
    EQ              reduce using rule 92 (primary-no-array-creation-expression -> element-access .)
    NE              reduce using rule 92 (primary-no-array-creation-expression -> element-access .)
    BITAND          reduce using rule 92 (primary-no-array-creation-expression -> element-access .)
    BITXOR          reduce using rule 92 (primary-no-array-creation-expression -> element-access .)
    BITOR           reduce using rule 92 (primary-no-array-creation-expression -> element-access .)
    LOGAND          reduce using rule 92 (primary-no-array-creation-expression -> element-access .)
    CONDOP          reduce using rule 92 (primary-no-array-creation-expression -> element-access .)
    LOGOR           reduce using rule 92 (primary-no-array-creation-expression -> element-access .)
    DELIM           reduce using rule 92 (primary-no-array-creation-expression -> element-access .)
    CLOSE_BRACKET   reduce using rule 92 (primary-no-array-creation-expression -> element-access .)
    COMMA           reduce using rule 92 (primary-no-array-creation-expression -> element-access .)
    CLOSE_PAREN     reduce using rule 92 (primary-no-array-creation-expression -> element-access .)
    COLON           reduce using rule 92 (primary-no-array-creation-expression -> element-access .)
    BLOCK_END       reduce using rule 92 (primary-no-array-creation-expression -> element-access .)


state 77

    (93) parenthesized-expression -> OPEN_PAREN . expression CLOSE_PAREN
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (105) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (102) prim-expression -> . IDENTIFIER
    (103) prim-expression -> . member-access
    (104) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (94) member-access -> . IDENTIFIER DOT IDENTIFIER
    (95) member-access -> . member-access DOT IDENTIFIER
    (100) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (101) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . array-creation-expression
    (76) primary-expression -> . primary-no-array-creation-expression
    (77) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (87) primary-no-array-creation-expression -> . literal
    (88) primary-no-array-creation-expression -> . IDENTIFIER
    (89) primary-no-array-creation-expression -> . parenthesized-expression
    (90) primary-no-array-creation-expression -> . member-access
    (91) primary-no-array-creation-expression -> . invocation-expression
    (92) primary-no-array-creation-expression -> . element-access
    (219) literal -> . ICONST
    (220) literal -> . DCONST
    (221) literal -> . TRUE
    (222) literal -> . FALSE
    (93) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (96) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (97) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 81
    PLUS            shift and go to state 80
    MINUS           shift and go to state 73
    BITNOT          shift and go to state 96
    BITCOMP         shift and go to state 75
    NEW             shift and go to state 71
    ICONST          shift and go to state 86
    DCONST          shift and go to state 97
    TRUE            shift and go to state 91
    FALSE           shift and go to state 89
    OPEN_PAREN      shift and go to state 77

    unary-expression               shift and go to state 87
    exclusive-or-expression        shift and go to state 67
    member-access                  shift and go to state 68
    relational-expression          shift and go to state 69
    additive-expression            shift and go to state 72
    primary-no-array-creation-expression shift and go to state 85
    inclusive-or-expression        shift and go to state 74
    prim-expression                shift and go to state 50
    element-access                 shift and go to state 76
    literal                        shift and go to state 84
    conditional-expression         shift and go to state 78
    conditional-and-expression     shift and go to state 79
    array-creation-expression      shift and go to state 70
    assignment                     shift and go to state 83
    equality-expression            shift and go to state 90
    shift-expression               shift and go to state 92
    and-expression                 shift and go to state 93
    multiplicative-expression      shift and go to state 94
    conditional-or-expression      shift and go to state 100
    primary-expression             shift and go to state 98
    invocation-expression          shift and go to state 99
    expression                     shift and go to state 162
    parenthesized-expression       shift and go to state 101

state 78

    (38) expression -> conditional-expression .

    COMMA           reduce using rule 38 (expression -> conditional-expression .)
    CLOSE_PAREN     reduce using rule 38 (expression -> conditional-expression .)
    DELIM           reduce using rule 38 (expression -> conditional-expression .)
    CLOSE_BRACKET   reduce using rule 38 (expression -> conditional-expression .)
    COLON           reduce using rule 38 (expression -> conditional-expression .)
    BLOCK_END       reduce using rule 38 (expression -> conditional-expression .)


state 79

    (42) conditional-or-expression -> conditional-and-expression .
    (45) conditional-and-expression -> conditional-and-expression . LOGAND inclusive-or-expression

    CONDOP          reduce using rule 42 (conditional-or-expression -> conditional-and-expression .)
    LOGOR           reduce using rule 42 (conditional-or-expression -> conditional-and-expression .)
    COMMA           reduce using rule 42 (conditional-or-expression -> conditional-and-expression .)
    CLOSE_PAREN     reduce using rule 42 (conditional-or-expression -> conditional-and-expression .)
    COLON           reduce using rule 42 (conditional-or-expression -> conditional-and-expression .)
    DELIM           reduce using rule 42 (conditional-or-expression -> conditional-and-expression .)
    BLOCK_END       reduce using rule 42 (conditional-or-expression -> conditional-and-expression .)
    CLOSE_BRACKET   reduce using rule 42 (conditional-or-expression -> conditional-and-expression .)
    LOGAND          shift and go to state 163


state 80

    (71) unary-expression -> PLUS . unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . array-creation-expression
    (76) primary-expression -> . primary-no-array-creation-expression
    (77) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (87) primary-no-array-creation-expression -> . literal
    (88) primary-no-array-creation-expression -> . IDENTIFIER
    (89) primary-no-array-creation-expression -> . parenthesized-expression
    (90) primary-no-array-creation-expression -> . member-access
    (91) primary-no-array-creation-expression -> . invocation-expression
    (92) primary-no-array-creation-expression -> . element-access
    (219) literal -> . ICONST
    (220) literal -> . DCONST
    (221) literal -> . TRUE
    (222) literal -> . FALSE
    (93) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (94) member-access -> . IDENTIFIER DOT IDENTIFIER
    (95) member-access -> . member-access DOT IDENTIFIER
    (96) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (97) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (100) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (101) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    PLUS            shift and go to state 80
    MINUS           shift and go to state 73
    BITNOT          shift and go to state 96
    BITCOMP         shift and go to state 75
    NEW             shift and go to state 71
    IDENTIFIER      shift and go to state 159
    ICONST          shift and go to state 86
    DCONST          shift and go to state 97
    TRUE            shift and go to state 91
    FALSE           shift and go to state 89
    OPEN_PAREN      shift and go to state 77

    primary-no-array-creation-expression shift and go to state 85
    member-access                  shift and go to state 156
    unary-expression               shift and go to state 164
    element-access                 shift and go to state 158
    literal                        shift and go to state 84
    array-creation-expression      shift and go to state 70
    primary-expression             shift and go to state 98
    invocation-expression          shift and go to state 99
    parenthesized-expression       shift and go to state 101

state 81

    (102) prim-expression -> IDENTIFIER .
    (94) member-access -> IDENTIFIER . DOT IDENTIFIER
    (100) element-access -> IDENTIFIER . OPEN_BRACKET expression CLOSE_BRACKET
    (88) primary-no-array-creation-expression -> IDENTIFIER .
    (96) invocation-expression -> IDENTIFIER . OPEN_PAREN argument-list-opt CLOSE_PAREN

    ASSIGN          reduce using rule 102 (prim-expression -> IDENTIFIER .)
    PLUSEQUAL       reduce using rule 102 (prim-expression -> IDENTIFIER .)
    MINUSEQUAL      reduce using rule 102 (prim-expression -> IDENTIFIER .)
    TIMESEQUAL      reduce using rule 102 (prim-expression -> IDENTIFIER .)
    DIVEQUAL        reduce using rule 102 (prim-expression -> IDENTIFIER .)
    MODEQUAL        reduce using rule 102 (prim-expression -> IDENTIFIER .)
    BITANDEQUAL     reduce using rule 102 (prim-expression -> IDENTIFIER .)
    BITOREQUAL      reduce using rule 102 (prim-expression -> IDENTIFIER .)
    BITXOREQUAL     reduce using rule 102 (prim-expression -> IDENTIFIER .)
    LSHIFTEQUAL     reduce using rule 102 (prim-expression -> IDENTIFIER .)
    RSHIFTEQUAL     reduce using rule 102 (prim-expression -> IDENTIFIER .)
    DOT             shift and go to state 114
    OPEN_BRACKET    shift and go to state 111
    TIMES           reduce using rule 88 (primary-no-array-creation-expression -> IDENTIFIER .)
    DIV             reduce using rule 88 (primary-no-array-creation-expression -> IDENTIFIER .)
    MOD             reduce using rule 88 (primary-no-array-creation-expression -> IDENTIFIER .)
    PLUS            reduce using rule 88 (primary-no-array-creation-expression -> IDENTIFIER .)
    MINUS           reduce using rule 88 (primary-no-array-creation-expression -> IDENTIFIER .)
    LSHIFT          reduce using rule 88 (primary-no-array-creation-expression -> IDENTIFIER .)
    RSHIFT          reduce using rule 88 (primary-no-array-creation-expression -> IDENTIFIER .)
    LT              reduce using rule 88 (primary-no-array-creation-expression -> IDENTIFIER .)
    GT              reduce using rule 88 (primary-no-array-creation-expression -> IDENTIFIER .)
    LE              reduce using rule 88 (primary-no-array-creation-expression -> IDENTIFIER .)
    GE              reduce using rule 88 (primary-no-array-creation-expression -> IDENTIFIER .)
    EQ              reduce using rule 88 (primary-no-array-creation-expression -> IDENTIFIER .)
    NE              reduce using rule 88 (primary-no-array-creation-expression -> IDENTIFIER .)
    BITAND          reduce using rule 88 (primary-no-array-creation-expression -> IDENTIFIER .)
    BITXOR          reduce using rule 88 (primary-no-array-creation-expression -> IDENTIFIER .)
    BITOR           reduce using rule 88 (primary-no-array-creation-expression -> IDENTIFIER .)
    LOGAND          reduce using rule 88 (primary-no-array-creation-expression -> IDENTIFIER .)
    CONDOP          reduce using rule 88 (primary-no-array-creation-expression -> IDENTIFIER .)
    LOGOR           reduce using rule 88 (primary-no-array-creation-expression -> IDENTIFIER .)
    DELIM           reduce using rule 88 (primary-no-array-creation-expression -> IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 88 (primary-no-array-creation-expression -> IDENTIFIER .)
    COMMA           reduce using rule 88 (primary-no-array-creation-expression -> IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 88 (primary-no-array-creation-expression -> IDENTIFIER .)
    COLON           reduce using rule 88 (primary-no-array-creation-expression -> IDENTIFIER .)
    BLOCK_END       reduce using rule 88 (primary-no-array-creation-expression -> IDENTIFIER .)
    OPEN_PAREN      shift and go to state 112


state 82

    (211) expression-opt -> empty .

    DELIM           reduce using rule 211 (expression-opt -> empty .)


state 83

    (39) expression -> assignment .

    COMMA           reduce using rule 39 (expression -> assignment .)
    CLOSE_PAREN     reduce using rule 39 (expression -> assignment .)
    DELIM           reduce using rule 39 (expression -> assignment .)
    CLOSE_BRACKET   reduce using rule 39 (expression -> assignment .)
    COLON           reduce using rule 39 (expression -> assignment .)
    BLOCK_END       reduce using rule 39 (expression -> assignment .)


state 84

    (87) primary-no-array-creation-expression -> literal .

    TIMES           reduce using rule 87 (primary-no-array-creation-expression -> literal .)
    DIV             reduce using rule 87 (primary-no-array-creation-expression -> literal .)
    MOD             reduce using rule 87 (primary-no-array-creation-expression -> literal .)
    PLUS            reduce using rule 87 (primary-no-array-creation-expression -> literal .)
    MINUS           reduce using rule 87 (primary-no-array-creation-expression -> literal .)
    LSHIFT          reduce using rule 87 (primary-no-array-creation-expression -> literal .)
    RSHIFT          reduce using rule 87 (primary-no-array-creation-expression -> literal .)
    LT              reduce using rule 87 (primary-no-array-creation-expression -> literal .)
    GT              reduce using rule 87 (primary-no-array-creation-expression -> literal .)
    LE              reduce using rule 87 (primary-no-array-creation-expression -> literal .)
    GE              reduce using rule 87 (primary-no-array-creation-expression -> literal .)
    EQ              reduce using rule 87 (primary-no-array-creation-expression -> literal .)
    NE              reduce using rule 87 (primary-no-array-creation-expression -> literal .)
    BITAND          reduce using rule 87 (primary-no-array-creation-expression -> literal .)
    BITXOR          reduce using rule 87 (primary-no-array-creation-expression -> literal .)
    BITOR           reduce using rule 87 (primary-no-array-creation-expression -> literal .)
    LOGAND          reduce using rule 87 (primary-no-array-creation-expression -> literal .)
    CONDOP          reduce using rule 87 (primary-no-array-creation-expression -> literal .)
    LOGOR           reduce using rule 87 (primary-no-array-creation-expression -> literal .)
    DELIM           reduce using rule 87 (primary-no-array-creation-expression -> literal .)
    CLOSE_BRACKET   reduce using rule 87 (primary-no-array-creation-expression -> literal .)
    COMMA           reduce using rule 87 (primary-no-array-creation-expression -> literal .)
    CLOSE_PAREN     reduce using rule 87 (primary-no-array-creation-expression -> literal .)
    COLON           reduce using rule 87 (primary-no-array-creation-expression -> literal .)
    BLOCK_END       reduce using rule 87 (primary-no-array-creation-expression -> literal .)


state 85

    (76) primary-expression -> primary-no-array-creation-expression .

    TIMES           reduce using rule 76 (primary-expression -> primary-no-array-creation-expression .)
    DIV             reduce using rule 76 (primary-expression -> primary-no-array-creation-expression .)
    MOD             reduce using rule 76 (primary-expression -> primary-no-array-creation-expression .)
    PLUS            reduce using rule 76 (primary-expression -> primary-no-array-creation-expression .)
    MINUS           reduce using rule 76 (primary-expression -> primary-no-array-creation-expression .)
    LSHIFT          reduce using rule 76 (primary-expression -> primary-no-array-creation-expression .)
    RSHIFT          reduce using rule 76 (primary-expression -> primary-no-array-creation-expression .)
    LT              reduce using rule 76 (primary-expression -> primary-no-array-creation-expression .)
    GT              reduce using rule 76 (primary-expression -> primary-no-array-creation-expression .)
    LE              reduce using rule 76 (primary-expression -> primary-no-array-creation-expression .)
    GE              reduce using rule 76 (primary-expression -> primary-no-array-creation-expression .)
    EQ              reduce using rule 76 (primary-expression -> primary-no-array-creation-expression .)
    NE              reduce using rule 76 (primary-expression -> primary-no-array-creation-expression .)
    BITAND          reduce using rule 76 (primary-expression -> primary-no-array-creation-expression .)
    BITXOR          reduce using rule 76 (primary-expression -> primary-no-array-creation-expression .)
    BITOR           reduce using rule 76 (primary-expression -> primary-no-array-creation-expression .)
    LOGAND          reduce using rule 76 (primary-expression -> primary-no-array-creation-expression .)
    CONDOP          reduce using rule 76 (primary-expression -> primary-no-array-creation-expression .)
    LOGOR           reduce using rule 76 (primary-expression -> primary-no-array-creation-expression .)
    DELIM           reduce using rule 76 (primary-expression -> primary-no-array-creation-expression .)
    CLOSE_BRACKET   reduce using rule 76 (primary-expression -> primary-no-array-creation-expression .)
    COMMA           reduce using rule 76 (primary-expression -> primary-no-array-creation-expression .)
    CLOSE_PAREN     reduce using rule 76 (primary-expression -> primary-no-array-creation-expression .)
    COLON           reduce using rule 76 (primary-expression -> primary-no-array-creation-expression .)
    BLOCK_END       reduce using rule 76 (primary-expression -> primary-no-array-creation-expression .)


state 86

    (219) literal -> ICONST .

    TIMES           reduce using rule 219 (literal -> ICONST .)
    DIV             reduce using rule 219 (literal -> ICONST .)
    MOD             reduce using rule 219 (literal -> ICONST .)
    PLUS            reduce using rule 219 (literal -> ICONST .)
    MINUS           reduce using rule 219 (literal -> ICONST .)
    LSHIFT          reduce using rule 219 (literal -> ICONST .)
    RSHIFT          reduce using rule 219 (literal -> ICONST .)
    LT              reduce using rule 219 (literal -> ICONST .)
    GT              reduce using rule 219 (literal -> ICONST .)
    LE              reduce using rule 219 (literal -> ICONST .)
    GE              reduce using rule 219 (literal -> ICONST .)
    EQ              reduce using rule 219 (literal -> ICONST .)
    NE              reduce using rule 219 (literal -> ICONST .)
    BITAND          reduce using rule 219 (literal -> ICONST .)
    BITXOR          reduce using rule 219 (literal -> ICONST .)
    BITOR           reduce using rule 219 (literal -> ICONST .)
    LOGAND          reduce using rule 219 (literal -> ICONST .)
    CONDOP          reduce using rule 219 (literal -> ICONST .)
    LOGOR           reduce using rule 219 (literal -> ICONST .)
    DELIM           reduce using rule 219 (literal -> ICONST .)
    CLOSE_BRACKET   reduce using rule 219 (literal -> ICONST .)
    COMMA           reduce using rule 219 (literal -> ICONST .)
    CLOSE_PAREN     reduce using rule 219 (literal -> ICONST .)
    COLON           reduce using rule 219 (literal -> ICONST .)
    BLOCK_END       reduce using rule 219 (literal -> ICONST .)


state 87

    (66) multiplicative-expression -> unary-expression .

    TIMES           reduce using rule 66 (multiplicative-expression -> unary-expression .)
    DIV             reduce using rule 66 (multiplicative-expression -> unary-expression .)
    MOD             reduce using rule 66 (multiplicative-expression -> unary-expression .)
    PLUS            reduce using rule 66 (multiplicative-expression -> unary-expression .)
    MINUS           reduce using rule 66 (multiplicative-expression -> unary-expression .)
    LSHIFT          reduce using rule 66 (multiplicative-expression -> unary-expression .)
    RSHIFT          reduce using rule 66 (multiplicative-expression -> unary-expression .)
    LT              reduce using rule 66 (multiplicative-expression -> unary-expression .)
    GT              reduce using rule 66 (multiplicative-expression -> unary-expression .)
    LE              reduce using rule 66 (multiplicative-expression -> unary-expression .)
    GE              reduce using rule 66 (multiplicative-expression -> unary-expression .)
    EQ              reduce using rule 66 (multiplicative-expression -> unary-expression .)
    NE              reduce using rule 66 (multiplicative-expression -> unary-expression .)
    BITAND          reduce using rule 66 (multiplicative-expression -> unary-expression .)
    BITXOR          reduce using rule 66 (multiplicative-expression -> unary-expression .)
    BITOR           reduce using rule 66 (multiplicative-expression -> unary-expression .)
    LOGAND          reduce using rule 66 (multiplicative-expression -> unary-expression .)
    CONDOP          reduce using rule 66 (multiplicative-expression -> unary-expression .)
    LOGOR           reduce using rule 66 (multiplicative-expression -> unary-expression .)
    CLOSE_PAREN     reduce using rule 66 (multiplicative-expression -> unary-expression .)
    DELIM           reduce using rule 66 (multiplicative-expression -> unary-expression .)
    CLOSE_BRACKET   reduce using rule 66 (multiplicative-expression -> unary-expression .)
    COMMA           reduce using rule 66 (multiplicative-expression -> unary-expression .)
    COLON           reduce using rule 66 (multiplicative-expression -> unary-expression .)
    BLOCK_END       reduce using rule 66 (multiplicative-expression -> unary-expression .)


state 88

    (209) return-statement -> RETURN expression-opt . DELIM

    DELIM           shift and go to state 165


state 89

    (222) literal -> FALSE .

    TIMES           reduce using rule 222 (literal -> FALSE .)
    DIV             reduce using rule 222 (literal -> FALSE .)
    MOD             reduce using rule 222 (literal -> FALSE .)
    PLUS            reduce using rule 222 (literal -> FALSE .)
    MINUS           reduce using rule 222 (literal -> FALSE .)
    LSHIFT          reduce using rule 222 (literal -> FALSE .)
    RSHIFT          reduce using rule 222 (literal -> FALSE .)
    LT              reduce using rule 222 (literal -> FALSE .)
    GT              reduce using rule 222 (literal -> FALSE .)
    LE              reduce using rule 222 (literal -> FALSE .)
    GE              reduce using rule 222 (literal -> FALSE .)
    EQ              reduce using rule 222 (literal -> FALSE .)
    NE              reduce using rule 222 (literal -> FALSE .)
    BITAND          reduce using rule 222 (literal -> FALSE .)
    BITXOR          reduce using rule 222 (literal -> FALSE .)
    BITOR           reduce using rule 222 (literal -> FALSE .)
    LOGAND          reduce using rule 222 (literal -> FALSE .)
    CONDOP          reduce using rule 222 (literal -> FALSE .)
    LOGOR           reduce using rule 222 (literal -> FALSE .)
    DELIM           reduce using rule 222 (literal -> FALSE .)
    CLOSE_BRACKET   reduce using rule 222 (literal -> FALSE .)
    COMMA           reduce using rule 222 (literal -> FALSE .)
    CLOSE_PAREN     reduce using rule 222 (literal -> FALSE .)
    COLON           reduce using rule 222 (literal -> FALSE .)
    BLOCK_END       reduce using rule 222 (literal -> FALSE .)


state 90

    (50) and-expression -> equality-expression .
    (53) equality-expression -> equality-expression . EQ relational-expression
    (54) equality-expression -> equality-expression . NE relational-expression

    BITAND          reduce using rule 50 (and-expression -> equality-expression .)
    BITXOR          reduce using rule 50 (and-expression -> equality-expression .)
    BITOR           reduce using rule 50 (and-expression -> equality-expression .)
    LOGAND          reduce using rule 50 (and-expression -> equality-expression .)
    CONDOP          reduce using rule 50 (and-expression -> equality-expression .)
    LOGOR           reduce using rule 50 (and-expression -> equality-expression .)
    DELIM           reduce using rule 50 (and-expression -> equality-expression .)
    CLOSE_PAREN     reduce using rule 50 (and-expression -> equality-expression .)
    COMMA           reduce using rule 50 (and-expression -> equality-expression .)
    CLOSE_BRACKET   reduce using rule 50 (and-expression -> equality-expression .)
    COLON           reduce using rule 50 (and-expression -> equality-expression .)
    BLOCK_END       reduce using rule 50 (and-expression -> equality-expression .)
    EQ              shift and go to state 166
    NE              shift and go to state 167


state 91

    (221) literal -> TRUE .

    TIMES           reduce using rule 221 (literal -> TRUE .)
    DIV             reduce using rule 221 (literal -> TRUE .)
    MOD             reduce using rule 221 (literal -> TRUE .)
    PLUS            reduce using rule 221 (literal -> TRUE .)
    MINUS           reduce using rule 221 (literal -> TRUE .)
    LSHIFT          reduce using rule 221 (literal -> TRUE .)
    RSHIFT          reduce using rule 221 (literal -> TRUE .)
    LT              reduce using rule 221 (literal -> TRUE .)
    GT              reduce using rule 221 (literal -> TRUE .)
    LE              reduce using rule 221 (literal -> TRUE .)
    GE              reduce using rule 221 (literal -> TRUE .)
    EQ              reduce using rule 221 (literal -> TRUE .)
    NE              reduce using rule 221 (literal -> TRUE .)
    BITAND          reduce using rule 221 (literal -> TRUE .)
    BITXOR          reduce using rule 221 (literal -> TRUE .)
    BITOR           reduce using rule 221 (literal -> TRUE .)
    LOGAND          reduce using rule 221 (literal -> TRUE .)
    CONDOP          reduce using rule 221 (literal -> TRUE .)
    LOGOR           reduce using rule 221 (literal -> TRUE .)
    DELIM           reduce using rule 221 (literal -> TRUE .)
    CLOSE_BRACKET   reduce using rule 221 (literal -> TRUE .)
    COMMA           reduce using rule 221 (literal -> TRUE .)
    CLOSE_PAREN     reduce using rule 221 (literal -> TRUE .)
    COLON           reduce using rule 221 (literal -> TRUE .)
    BLOCK_END       reduce using rule 221 (literal -> TRUE .)


state 92

    (55) relational-expression -> shift-expression .
    (61) shift-expression -> shift-expression . LSHIFT additive-expression
    (62) shift-expression -> shift-expression . RSHIFT additive-expression

    LT              reduce using rule 55 (relational-expression -> shift-expression .)
    GT              reduce using rule 55 (relational-expression -> shift-expression .)
    LE              reduce using rule 55 (relational-expression -> shift-expression .)
    GE              reduce using rule 55 (relational-expression -> shift-expression .)
    EQ              reduce using rule 55 (relational-expression -> shift-expression .)
    NE              reduce using rule 55 (relational-expression -> shift-expression .)
    BITAND          reduce using rule 55 (relational-expression -> shift-expression .)
    BITXOR          reduce using rule 55 (relational-expression -> shift-expression .)
    BITOR           reduce using rule 55 (relational-expression -> shift-expression .)
    LOGAND          reduce using rule 55 (relational-expression -> shift-expression .)
    CONDOP          reduce using rule 55 (relational-expression -> shift-expression .)
    LOGOR           reduce using rule 55 (relational-expression -> shift-expression .)
    COMMA           reduce using rule 55 (relational-expression -> shift-expression .)
    DELIM           reduce using rule 55 (relational-expression -> shift-expression .)
    CLOSE_BRACKET   reduce using rule 55 (relational-expression -> shift-expression .)
    COLON           reduce using rule 55 (relational-expression -> shift-expression .)
    BLOCK_END       reduce using rule 55 (relational-expression -> shift-expression .)
    CLOSE_PAREN     reduce using rule 55 (relational-expression -> shift-expression .)
    LSHIFT          shift and go to state 169
    RSHIFT          shift and go to state 168


state 93

    (48) exclusive-or-expression -> and-expression .
    (51) and-expression -> and-expression . BITAND equality-expression

    BITXOR          reduce using rule 48 (exclusive-or-expression -> and-expression .)
    BITOR           reduce using rule 48 (exclusive-or-expression -> and-expression .)
    LOGAND          reduce using rule 48 (exclusive-or-expression -> and-expression .)
    CONDOP          reduce using rule 48 (exclusive-or-expression -> and-expression .)
    LOGOR           reduce using rule 48 (exclusive-or-expression -> and-expression .)
    DELIM           reduce using rule 48 (exclusive-or-expression -> and-expression .)
    CLOSE_BRACKET   reduce using rule 48 (exclusive-or-expression -> and-expression .)
    COMMA           reduce using rule 48 (exclusive-or-expression -> and-expression .)
    CLOSE_PAREN     reduce using rule 48 (exclusive-or-expression -> and-expression .)
    COLON           reduce using rule 48 (exclusive-or-expression -> and-expression .)
    BLOCK_END       reduce using rule 48 (exclusive-or-expression -> and-expression .)
    BITAND          shift and go to state 170


state 94

    (63) additive-expression -> multiplicative-expression .
    (67) multiplicative-expression -> multiplicative-expression . TIMES unary-expression
    (68) multiplicative-expression -> multiplicative-expression . DIV unary-expression
    (69) multiplicative-expression -> multiplicative-expression . MOD unary-expression

    PLUS            reduce using rule 63 (additive-expression -> multiplicative-expression .)
    MINUS           reduce using rule 63 (additive-expression -> multiplicative-expression .)
    LSHIFT          reduce using rule 63 (additive-expression -> multiplicative-expression .)
    RSHIFT          reduce using rule 63 (additive-expression -> multiplicative-expression .)
    LT              reduce using rule 63 (additive-expression -> multiplicative-expression .)
    GT              reduce using rule 63 (additive-expression -> multiplicative-expression .)
    LE              reduce using rule 63 (additive-expression -> multiplicative-expression .)
    GE              reduce using rule 63 (additive-expression -> multiplicative-expression .)
    EQ              reduce using rule 63 (additive-expression -> multiplicative-expression .)
    NE              reduce using rule 63 (additive-expression -> multiplicative-expression .)
    BITAND          reduce using rule 63 (additive-expression -> multiplicative-expression .)
    BITXOR          reduce using rule 63 (additive-expression -> multiplicative-expression .)
    BITOR           reduce using rule 63 (additive-expression -> multiplicative-expression .)
    LOGAND          reduce using rule 63 (additive-expression -> multiplicative-expression .)
    CONDOP          reduce using rule 63 (additive-expression -> multiplicative-expression .)
    LOGOR           reduce using rule 63 (additive-expression -> multiplicative-expression .)
    DELIM           reduce using rule 63 (additive-expression -> multiplicative-expression .)
    CLOSE_BRACKET   reduce using rule 63 (additive-expression -> multiplicative-expression .)
    COMMA           reduce using rule 63 (additive-expression -> multiplicative-expression .)
    CLOSE_PAREN     reduce using rule 63 (additive-expression -> multiplicative-expression .)
    COLON           reduce using rule 63 (additive-expression -> multiplicative-expression .)
    BLOCK_END       reduce using rule 63 (additive-expression -> multiplicative-expression .)
    TIMES           shift and go to state 173
    DIV             shift and go to state 171
    MOD             shift and go to state 172


state 95

    (210) expression-opt -> expression .

    DELIM           reduce using rule 210 (expression-opt -> expression .)


state 96

    (73) unary-expression -> BITNOT . unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . array-creation-expression
    (76) primary-expression -> . primary-no-array-creation-expression
    (77) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (87) primary-no-array-creation-expression -> . literal
    (88) primary-no-array-creation-expression -> . IDENTIFIER
    (89) primary-no-array-creation-expression -> . parenthesized-expression
    (90) primary-no-array-creation-expression -> . member-access
    (91) primary-no-array-creation-expression -> . invocation-expression
    (92) primary-no-array-creation-expression -> . element-access
    (219) literal -> . ICONST
    (220) literal -> . DCONST
    (221) literal -> . TRUE
    (222) literal -> . FALSE
    (93) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (94) member-access -> . IDENTIFIER DOT IDENTIFIER
    (95) member-access -> . member-access DOT IDENTIFIER
    (96) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (97) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (100) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (101) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    PLUS            shift and go to state 80
    MINUS           shift and go to state 73
    BITNOT          shift and go to state 96
    BITCOMP         shift and go to state 75
    NEW             shift and go to state 71
    IDENTIFIER      shift and go to state 159
    ICONST          shift and go to state 86
    DCONST          shift and go to state 97
    TRUE            shift and go to state 91
    FALSE           shift and go to state 89
    OPEN_PAREN      shift and go to state 77

    primary-no-array-creation-expression shift and go to state 85
    member-access                  shift and go to state 156
    unary-expression               shift and go to state 174
    element-access                 shift and go to state 158
    literal                        shift and go to state 84
    array-creation-expression      shift and go to state 70
    primary-expression             shift and go to state 98
    invocation-expression          shift and go to state 99
    parenthesized-expression       shift and go to state 101

state 97

    (220) literal -> DCONST .

    TIMES           reduce using rule 220 (literal -> DCONST .)
    DIV             reduce using rule 220 (literal -> DCONST .)
    MOD             reduce using rule 220 (literal -> DCONST .)
    PLUS            reduce using rule 220 (literal -> DCONST .)
    MINUS           reduce using rule 220 (literal -> DCONST .)
    LSHIFT          reduce using rule 220 (literal -> DCONST .)
    RSHIFT          reduce using rule 220 (literal -> DCONST .)
    LT              reduce using rule 220 (literal -> DCONST .)
    GT              reduce using rule 220 (literal -> DCONST .)
    LE              reduce using rule 220 (literal -> DCONST .)
    GE              reduce using rule 220 (literal -> DCONST .)
    EQ              reduce using rule 220 (literal -> DCONST .)
    NE              reduce using rule 220 (literal -> DCONST .)
    BITAND          reduce using rule 220 (literal -> DCONST .)
    BITXOR          reduce using rule 220 (literal -> DCONST .)
    BITOR           reduce using rule 220 (literal -> DCONST .)
    LOGAND          reduce using rule 220 (literal -> DCONST .)
    CONDOP          reduce using rule 220 (literal -> DCONST .)
    LOGOR           reduce using rule 220 (literal -> DCONST .)
    DELIM           reduce using rule 220 (literal -> DCONST .)
    CLOSE_BRACKET   reduce using rule 220 (literal -> DCONST .)
    COMMA           reduce using rule 220 (literal -> DCONST .)
    CLOSE_PAREN     reduce using rule 220 (literal -> DCONST .)
    COLON           reduce using rule 220 (literal -> DCONST .)
    BLOCK_END       reduce using rule 220 (literal -> DCONST .)


state 98

    (70) unary-expression -> primary-expression .

    TIMES           reduce using rule 70 (unary-expression -> primary-expression .)
    DIV             reduce using rule 70 (unary-expression -> primary-expression .)
    MOD             reduce using rule 70 (unary-expression -> primary-expression .)
    PLUS            reduce using rule 70 (unary-expression -> primary-expression .)
    MINUS           reduce using rule 70 (unary-expression -> primary-expression .)
    LSHIFT          reduce using rule 70 (unary-expression -> primary-expression .)
    RSHIFT          reduce using rule 70 (unary-expression -> primary-expression .)
    LT              reduce using rule 70 (unary-expression -> primary-expression .)
    GT              reduce using rule 70 (unary-expression -> primary-expression .)
    LE              reduce using rule 70 (unary-expression -> primary-expression .)
    GE              reduce using rule 70 (unary-expression -> primary-expression .)
    EQ              reduce using rule 70 (unary-expression -> primary-expression .)
    NE              reduce using rule 70 (unary-expression -> primary-expression .)
    BITAND          reduce using rule 70 (unary-expression -> primary-expression .)
    BITXOR          reduce using rule 70 (unary-expression -> primary-expression .)
    BITOR           reduce using rule 70 (unary-expression -> primary-expression .)
    LOGAND          reduce using rule 70 (unary-expression -> primary-expression .)
    CONDOP          reduce using rule 70 (unary-expression -> primary-expression .)
    LOGOR           reduce using rule 70 (unary-expression -> primary-expression .)
    COMMA           reduce using rule 70 (unary-expression -> primary-expression .)
    CLOSE_PAREN     reduce using rule 70 (unary-expression -> primary-expression .)
    BLOCK_END       reduce using rule 70 (unary-expression -> primary-expression .)
    DELIM           reduce using rule 70 (unary-expression -> primary-expression .)
    CLOSE_BRACKET   reduce using rule 70 (unary-expression -> primary-expression .)
    COLON           reduce using rule 70 (unary-expression -> primary-expression .)


state 99

    (91) primary-no-array-creation-expression -> invocation-expression .

    TIMES           reduce using rule 91 (primary-no-array-creation-expression -> invocation-expression .)
    DIV             reduce using rule 91 (primary-no-array-creation-expression -> invocation-expression .)
    MOD             reduce using rule 91 (primary-no-array-creation-expression -> invocation-expression .)
    PLUS            reduce using rule 91 (primary-no-array-creation-expression -> invocation-expression .)
    MINUS           reduce using rule 91 (primary-no-array-creation-expression -> invocation-expression .)
    LSHIFT          reduce using rule 91 (primary-no-array-creation-expression -> invocation-expression .)
    RSHIFT          reduce using rule 91 (primary-no-array-creation-expression -> invocation-expression .)
    LT              reduce using rule 91 (primary-no-array-creation-expression -> invocation-expression .)
    GT              reduce using rule 91 (primary-no-array-creation-expression -> invocation-expression .)
    LE              reduce using rule 91 (primary-no-array-creation-expression -> invocation-expression .)
    GE              reduce using rule 91 (primary-no-array-creation-expression -> invocation-expression .)
    EQ              reduce using rule 91 (primary-no-array-creation-expression -> invocation-expression .)
    NE              reduce using rule 91 (primary-no-array-creation-expression -> invocation-expression .)
    BITAND          reduce using rule 91 (primary-no-array-creation-expression -> invocation-expression .)
    BITXOR          reduce using rule 91 (primary-no-array-creation-expression -> invocation-expression .)
    BITOR           reduce using rule 91 (primary-no-array-creation-expression -> invocation-expression .)
    LOGAND          reduce using rule 91 (primary-no-array-creation-expression -> invocation-expression .)
    CONDOP          reduce using rule 91 (primary-no-array-creation-expression -> invocation-expression .)
    LOGOR           reduce using rule 91 (primary-no-array-creation-expression -> invocation-expression .)
    DELIM           reduce using rule 91 (primary-no-array-creation-expression -> invocation-expression .)
    CLOSE_BRACKET   reduce using rule 91 (primary-no-array-creation-expression -> invocation-expression .)
    COMMA           reduce using rule 91 (primary-no-array-creation-expression -> invocation-expression .)
    CLOSE_PAREN     reduce using rule 91 (primary-no-array-creation-expression -> invocation-expression .)
    COLON           reduce using rule 91 (primary-no-array-creation-expression -> invocation-expression .)
    BLOCK_END       reduce using rule 91 (primary-no-array-creation-expression -> invocation-expression .)


state 100

    (40) conditional-expression -> conditional-or-expression .
    (41) conditional-expression -> conditional-or-expression . CONDOP expression COLON expression
    (43) conditional-or-expression -> conditional-or-expression . LOGOR conditional-and-expression

    CLOSE_PAREN     reduce using rule 40 (conditional-expression -> conditional-or-expression .)
    COLON           reduce using rule 40 (conditional-expression -> conditional-or-expression .)
    COMMA           reduce using rule 40 (conditional-expression -> conditional-or-expression .)
    CLOSE_BRACKET   reduce using rule 40 (conditional-expression -> conditional-or-expression .)
    BLOCK_END       reduce using rule 40 (conditional-expression -> conditional-or-expression .)
    DELIM           reduce using rule 40 (conditional-expression -> conditional-or-expression .)
    CONDOP          shift and go to state 176
    LOGOR           shift and go to state 175


state 101

    (89) primary-no-array-creation-expression -> parenthesized-expression .

    TIMES           reduce using rule 89 (primary-no-array-creation-expression -> parenthesized-expression .)
    DIV             reduce using rule 89 (primary-no-array-creation-expression -> parenthesized-expression .)
    MOD             reduce using rule 89 (primary-no-array-creation-expression -> parenthesized-expression .)
    PLUS            reduce using rule 89 (primary-no-array-creation-expression -> parenthesized-expression .)
    MINUS           reduce using rule 89 (primary-no-array-creation-expression -> parenthesized-expression .)
    LSHIFT          reduce using rule 89 (primary-no-array-creation-expression -> parenthesized-expression .)
    RSHIFT          reduce using rule 89 (primary-no-array-creation-expression -> parenthesized-expression .)
    LT              reduce using rule 89 (primary-no-array-creation-expression -> parenthesized-expression .)
    GT              reduce using rule 89 (primary-no-array-creation-expression -> parenthesized-expression .)
    LE              reduce using rule 89 (primary-no-array-creation-expression -> parenthesized-expression .)
    GE              reduce using rule 89 (primary-no-array-creation-expression -> parenthesized-expression .)
    EQ              reduce using rule 89 (primary-no-array-creation-expression -> parenthesized-expression .)
    NE              reduce using rule 89 (primary-no-array-creation-expression -> parenthesized-expression .)
    BITAND          reduce using rule 89 (primary-no-array-creation-expression -> parenthesized-expression .)
    BITXOR          reduce using rule 89 (primary-no-array-creation-expression -> parenthesized-expression .)
    BITOR           reduce using rule 89 (primary-no-array-creation-expression -> parenthesized-expression .)
    LOGAND          reduce using rule 89 (primary-no-array-creation-expression -> parenthesized-expression .)
    CONDOP          reduce using rule 89 (primary-no-array-creation-expression -> parenthesized-expression .)
    LOGOR           reduce using rule 89 (primary-no-array-creation-expression -> parenthesized-expression .)
    DELIM           reduce using rule 89 (primary-no-array-creation-expression -> parenthesized-expression .)
    CLOSE_BRACKET   reduce using rule 89 (primary-no-array-creation-expression -> parenthesized-expression .)
    COMMA           reduce using rule 89 (primary-no-array-creation-expression -> parenthesized-expression .)
    CLOSE_PAREN     reduce using rule 89 (primary-no-array-creation-expression -> parenthesized-expression .)
    COLON           reduce using rule 89 (primary-no-array-creation-expression -> parenthesized-expression .)
    BLOCK_END       reduce using rule 89 (primary-no-array-creation-expression -> parenthesized-expression .)


state 102

    (34) array-type -> simple-type OPEN_BRACKET . ICONST CLOSE_BRACKET

    ICONST          shift and go to state 177


state 103

    (161) declaration-statement -> local-constant-declaration DELIM .

    IDENTIFIER      reduce using rule 161 (declaration-statement -> local-constant-declaration DELIM .)
    BLOCK_BEGIN     reduce using rule 161 (declaration-statement -> local-constant-declaration DELIM .)
    DELIM           reduce using rule 161 (declaration-statement -> local-constant-declaration DELIM .)
    CONSOLE         reduce using rule 161 (declaration-statement -> local-constant-declaration DELIM .)
    CONST           reduce using rule 161 (declaration-statement -> local-constant-declaration DELIM .)
    IF              reduce using rule 161 (declaration-statement -> local-constant-declaration DELIM .)
    SWITCH          reduce using rule 161 (declaration-statement -> local-constant-declaration DELIM .)
    WHILE           reduce using rule 161 (declaration-statement -> local-constant-declaration DELIM .)
    FOR             reduce using rule 161 (declaration-statement -> local-constant-declaration DELIM .)
    DO              reduce using rule 161 (declaration-statement -> local-constant-declaration DELIM .)
    BREAK           reduce using rule 161 (declaration-statement -> local-constant-declaration DELIM .)
    CONTINUE        reduce using rule 161 (declaration-statement -> local-constant-declaration DELIM .)
    GOTO            reduce using rule 161 (declaration-statement -> local-constant-declaration DELIM .)
    RETURN          reduce using rule 161 (declaration-statement -> local-constant-declaration DELIM .)
    BOOL            reduce using rule 161 (declaration-statement -> local-constant-declaration DELIM .)
    INT             reduce using rule 161 (declaration-statement -> local-constant-declaration DELIM .)
    UINT            reduce using rule 161 (declaration-statement -> local-constant-declaration DELIM .)
    CHAR            reduce using rule 161 (declaration-statement -> local-constant-declaration DELIM .)
    DOUBLE          reduce using rule 161 (declaration-statement -> local-constant-declaration DELIM .)
    CASE            reduce using rule 161 (declaration-statement -> local-constant-declaration DELIM .)
    DEFAULT         reduce using rule 161 (declaration-statement -> local-constant-declaration DELIM .)
    BLOCK_END       reduce using rule 161 (declaration-statement -> local-constant-declaration DELIM .)
    $end            reduce using rule 161 (declaration-statement -> local-constant-declaration DELIM .)


state 104

    (188) iteration-statement -> do-statement M_quad .

    IDENTIFIER      reduce using rule 188 (iteration-statement -> do-statement M_quad .)
    BLOCK_BEGIN     reduce using rule 188 (iteration-statement -> do-statement M_quad .)
    DELIM           reduce using rule 188 (iteration-statement -> do-statement M_quad .)
    CONSOLE         reduce using rule 188 (iteration-statement -> do-statement M_quad .)
    CONST           reduce using rule 188 (iteration-statement -> do-statement M_quad .)
    IF              reduce using rule 188 (iteration-statement -> do-statement M_quad .)
    SWITCH          reduce using rule 188 (iteration-statement -> do-statement M_quad .)
    WHILE           reduce using rule 188 (iteration-statement -> do-statement M_quad .)
    FOR             reduce using rule 188 (iteration-statement -> do-statement M_quad .)
    DO              reduce using rule 188 (iteration-statement -> do-statement M_quad .)
    BREAK           reduce using rule 188 (iteration-statement -> do-statement M_quad .)
    CONTINUE        reduce using rule 188 (iteration-statement -> do-statement M_quad .)
    GOTO            reduce using rule 188 (iteration-statement -> do-statement M_quad .)
    RETURN          reduce using rule 188 (iteration-statement -> do-statement M_quad .)
    BOOL            reduce using rule 188 (iteration-statement -> do-statement M_quad .)
    INT             reduce using rule 188 (iteration-statement -> do-statement M_quad .)
    UINT            reduce using rule 188 (iteration-statement -> do-statement M_quad .)
    CHAR            reduce using rule 188 (iteration-statement -> do-statement M_quad .)
    DOUBLE          reduce using rule 188 (iteration-statement -> do-statement M_quad .)
    CASE            reduce using rule 188 (iteration-statement -> do-statement M_quad .)
    DEFAULT         reduce using rule 188 (iteration-statement -> do-statement M_quad .)
    BLOCK_END       reduce using rule 188 (iteration-statement -> do-statement M_quad .)
    $end            reduce using rule 188 (iteration-statement -> do-statement M_quad .)


state 105

    (192) for-statement -> FOR OPEN_PAREN . for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block
    (193) for-initializer-opt -> . for-initializer
    (194) for-initializer-opt -> . empty
    (195) for-initializer -> . statement-expression-list
    (223) empty -> .
    (200) statement-expression-list -> . statement-expression
    (201) statement-expression-list -> . statement-expression-list COMMA statement-expression
    (166) statement-expression -> . invocation-expression
    (167) statement-expression -> . assignment
    (96) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (97) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (105) assignment -> . prim-expression assignment-operator expression
    (94) member-access -> . IDENTIFIER DOT IDENTIFIER
    (95) member-access -> . member-access DOT IDENTIFIER
    (102) prim-expression -> . IDENTIFIER
    (103) prim-expression -> . member-access
    (104) prim-expression -> . element-access
    (100) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (101) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    DELIM           reduce using rule 223 (empty -> .)
    IDENTIFIER      shift and go to state 181

    for-initializer                shift and go to state 178
    assignment                     shift and go to state 54
    prim-expression                shift and go to state 50
    member-access                  shift and go to state 2
    element-access                 shift and go to state 18
    statement-expression           shift and go to state 179
    empty                          shift and go to state 182
    invocation-expression          shift and go to state 13
    statement-expression-list      shift and go to state 180
    for-initializer-opt            shift and go to state 183

state 106

    (160) declaration-statement -> local-variable-declaration DELIM .

    IDENTIFIER      reduce using rule 160 (declaration-statement -> local-variable-declaration DELIM .)
    BLOCK_BEGIN     reduce using rule 160 (declaration-statement -> local-variable-declaration DELIM .)
    DELIM           reduce using rule 160 (declaration-statement -> local-variable-declaration DELIM .)
    CONSOLE         reduce using rule 160 (declaration-statement -> local-variable-declaration DELIM .)
    CONST           reduce using rule 160 (declaration-statement -> local-variable-declaration DELIM .)
    IF              reduce using rule 160 (declaration-statement -> local-variable-declaration DELIM .)
    SWITCH          reduce using rule 160 (declaration-statement -> local-variable-declaration DELIM .)
    WHILE           reduce using rule 160 (declaration-statement -> local-variable-declaration DELIM .)
    FOR             reduce using rule 160 (declaration-statement -> local-variable-declaration DELIM .)
    DO              reduce using rule 160 (declaration-statement -> local-variable-declaration DELIM .)
    BREAK           reduce using rule 160 (declaration-statement -> local-variable-declaration DELIM .)
    CONTINUE        reduce using rule 160 (declaration-statement -> local-variable-declaration DELIM .)
    GOTO            reduce using rule 160 (declaration-statement -> local-variable-declaration DELIM .)
    RETURN          reduce using rule 160 (declaration-statement -> local-variable-declaration DELIM .)
    BOOL            reduce using rule 160 (declaration-statement -> local-variable-declaration DELIM .)
    INT             reduce using rule 160 (declaration-statement -> local-variable-declaration DELIM .)
    UINT            reduce using rule 160 (declaration-statement -> local-variable-declaration DELIM .)
    CHAR            reduce using rule 160 (declaration-statement -> local-variable-declaration DELIM .)
    DOUBLE          reduce using rule 160 (declaration-statement -> local-variable-declaration DELIM .)
    CASE            reduce using rule 160 (declaration-statement -> local-variable-declaration DELIM .)
    DEFAULT         reduce using rule 160 (declaration-statement -> local-variable-declaration DELIM .)
    BLOCK_END       reduce using rule 160 (declaration-statement -> local-variable-declaration DELIM .)
    $end            reduce using rule 160 (declaration-statement -> local-variable-declaration DELIM .)


state 107

    (168) selection-statement -> if-statement M_quad .

    IDENTIFIER      reduce using rule 168 (selection-statement -> if-statement M_quad .)
    BLOCK_BEGIN     reduce using rule 168 (selection-statement -> if-statement M_quad .)
    DELIM           reduce using rule 168 (selection-statement -> if-statement M_quad .)
    CONSOLE         reduce using rule 168 (selection-statement -> if-statement M_quad .)
    CONST           reduce using rule 168 (selection-statement -> if-statement M_quad .)
    IF              reduce using rule 168 (selection-statement -> if-statement M_quad .)
    SWITCH          reduce using rule 168 (selection-statement -> if-statement M_quad .)
    WHILE           reduce using rule 168 (selection-statement -> if-statement M_quad .)
    FOR             reduce using rule 168 (selection-statement -> if-statement M_quad .)
    DO              reduce using rule 168 (selection-statement -> if-statement M_quad .)
    BREAK           reduce using rule 168 (selection-statement -> if-statement M_quad .)
    CONTINUE        reduce using rule 168 (selection-statement -> if-statement M_quad .)
    GOTO            reduce using rule 168 (selection-statement -> if-statement M_quad .)
    RETURN          reduce using rule 168 (selection-statement -> if-statement M_quad .)
    BOOL            reduce using rule 168 (selection-statement -> if-statement M_quad .)
    INT             reduce using rule 168 (selection-statement -> if-statement M_quad .)
    UINT            reduce using rule 168 (selection-statement -> if-statement M_quad .)
    CHAR            reduce using rule 168 (selection-statement -> if-statement M_quad .)
    DOUBLE          reduce using rule 168 (selection-statement -> if-statement M_quad .)
    BLOCK_END       reduce using rule 168 (selection-statement -> if-statement M_quad .)
    CASE            reduce using rule 168 (selection-statement -> if-statement M_quad .)
    DEFAULT         reduce using rule 168 (selection-statement -> if-statement M_quad .)
    $end            reduce using rule 168 (selection-statement -> if-statement M_quad .)


state 108

    (207) continue-statement -> CONTINUE DELIM .

    IDENTIFIER      reduce using rule 207 (continue-statement -> CONTINUE DELIM .)
    BLOCK_BEGIN     reduce using rule 207 (continue-statement -> CONTINUE DELIM .)
    DELIM           reduce using rule 207 (continue-statement -> CONTINUE DELIM .)
    CONSOLE         reduce using rule 207 (continue-statement -> CONTINUE DELIM .)
    CONST           reduce using rule 207 (continue-statement -> CONTINUE DELIM .)
    IF              reduce using rule 207 (continue-statement -> CONTINUE DELIM .)
    SWITCH          reduce using rule 207 (continue-statement -> CONTINUE DELIM .)
    WHILE           reduce using rule 207 (continue-statement -> CONTINUE DELIM .)
    FOR             reduce using rule 207 (continue-statement -> CONTINUE DELIM .)
    DO              reduce using rule 207 (continue-statement -> CONTINUE DELIM .)
    BREAK           reduce using rule 207 (continue-statement -> CONTINUE DELIM .)
    CONTINUE        reduce using rule 207 (continue-statement -> CONTINUE DELIM .)
    GOTO            reduce using rule 207 (continue-statement -> CONTINUE DELIM .)
    RETURN          reduce using rule 207 (continue-statement -> CONTINUE DELIM .)
    BOOL            reduce using rule 207 (continue-statement -> CONTINUE DELIM .)
    INT             reduce using rule 207 (continue-statement -> CONTINUE DELIM .)
    UINT            reduce using rule 207 (continue-statement -> CONTINUE DELIM .)
    CHAR            reduce using rule 207 (continue-statement -> CONTINUE DELIM .)
    DOUBLE          reduce using rule 207 (continue-statement -> CONTINUE DELIM .)
    BLOCK_END       reduce using rule 207 (continue-statement -> CONTINUE DELIM .)
    $end            reduce using rule 207 (continue-statement -> CONTINUE DELIM .)
    CASE            reduce using rule 207 (continue-statement -> CONTINUE DELIM .)
    DEFAULT         reduce using rule 207 (continue-statement -> CONTINUE DELIM .)


state 109

    (189) while-statement -> WHILE M_quad . OPEN_PAREN expression CLOSE_PAREN M_while block

    OPEN_PAREN      shift and go to state 184


state 110

    (175) switch-statement -> SWITCH OPEN_PAREN . expression CLOSE_PAREN switch-block
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (105) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (102) prim-expression -> . IDENTIFIER
    (103) prim-expression -> . member-access
    (104) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (94) member-access -> . IDENTIFIER DOT IDENTIFIER
    (95) member-access -> . member-access DOT IDENTIFIER
    (100) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (101) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . array-creation-expression
    (76) primary-expression -> . primary-no-array-creation-expression
    (77) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (87) primary-no-array-creation-expression -> . literal
    (88) primary-no-array-creation-expression -> . IDENTIFIER
    (89) primary-no-array-creation-expression -> . parenthesized-expression
    (90) primary-no-array-creation-expression -> . member-access
    (91) primary-no-array-creation-expression -> . invocation-expression
    (92) primary-no-array-creation-expression -> . element-access
    (219) literal -> . ICONST
    (220) literal -> . DCONST
    (221) literal -> . TRUE
    (222) literal -> . FALSE
    (93) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (96) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (97) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 81
    PLUS            shift and go to state 80
    MINUS           shift and go to state 73
    BITNOT          shift and go to state 96
    BITCOMP         shift and go to state 75
    NEW             shift and go to state 71
    ICONST          shift and go to state 86
    DCONST          shift and go to state 97
    TRUE            shift and go to state 91
    FALSE           shift and go to state 89
    OPEN_PAREN      shift and go to state 77

    unary-expression               shift and go to state 87
    exclusive-or-expression        shift and go to state 67
    member-access                  shift and go to state 68
    relational-expression          shift and go to state 69
    additive-expression            shift and go to state 72
    primary-no-array-creation-expression shift and go to state 85
    inclusive-or-expression        shift and go to state 74
    prim-expression                shift and go to state 50
    element-access                 shift and go to state 76
    literal                        shift and go to state 84
    conditional-expression         shift and go to state 78
    conditional-and-expression     shift and go to state 79
    array-creation-expression      shift and go to state 70
    assignment                     shift and go to state 83
    equality-expression            shift and go to state 90
    shift-expression               shift and go to state 92
    and-expression                 shift and go to state 93
    multiplicative-expression      shift and go to state 94
    conditional-or-expression      shift and go to state 100
    primary-expression             shift and go to state 98
    invocation-expression          shift and go to state 99
    expression                     shift and go to state 185
    parenthesized-expression       shift and go to state 101

state 111

    (100) element-access -> IDENTIFIER OPEN_BRACKET . expression CLOSE_BRACKET
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (105) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (102) prim-expression -> . IDENTIFIER
    (103) prim-expression -> . member-access
    (104) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (94) member-access -> . IDENTIFIER DOT IDENTIFIER
    (95) member-access -> . member-access DOT IDENTIFIER
    (100) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (101) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . array-creation-expression
    (76) primary-expression -> . primary-no-array-creation-expression
    (77) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (87) primary-no-array-creation-expression -> . literal
    (88) primary-no-array-creation-expression -> . IDENTIFIER
    (89) primary-no-array-creation-expression -> . parenthesized-expression
    (90) primary-no-array-creation-expression -> . member-access
    (91) primary-no-array-creation-expression -> . invocation-expression
    (92) primary-no-array-creation-expression -> . element-access
    (219) literal -> . ICONST
    (220) literal -> . DCONST
    (221) literal -> . TRUE
    (222) literal -> . FALSE
    (93) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (96) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (97) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 81
    PLUS            shift and go to state 80
    MINUS           shift and go to state 73
    BITNOT          shift and go to state 96
    BITCOMP         shift and go to state 75
    NEW             shift and go to state 71
    ICONST          shift and go to state 86
    DCONST          shift and go to state 97
    TRUE            shift and go to state 91
    FALSE           shift and go to state 89
    OPEN_PAREN      shift and go to state 77

    unary-expression               shift and go to state 87
    exclusive-or-expression        shift and go to state 67
    member-access                  shift and go to state 68
    relational-expression          shift and go to state 69
    additive-expression            shift and go to state 72
    primary-no-array-creation-expression shift and go to state 85
    inclusive-or-expression        shift and go to state 74
    prim-expression                shift and go to state 50
    element-access                 shift and go to state 76
    literal                        shift and go to state 84
    conditional-expression         shift and go to state 78
    conditional-and-expression     shift and go to state 79
    array-creation-expression      shift and go to state 70
    assignment                     shift and go to state 83
    equality-expression            shift and go to state 90
    shift-expression               shift and go to state 92
    and-expression                 shift and go to state 93
    multiplicative-expression      shift and go to state 94
    conditional-or-expression      shift and go to state 100
    primary-expression             shift and go to state 98
    invocation-expression          shift and go to state 99
    expression                     shift and go to state 186
    parenthesized-expression       shift and go to state 101

state 112

    (96) invocation-expression -> IDENTIFIER OPEN_PAREN . argument-list-opt CLOSE_PAREN
    (98) argument-list-opt -> . expression-list
    (99) argument-list-opt -> . empty
    (80) expression-list -> . expression
    (81) expression-list -> . expression-list COMMA expression
    (223) empty -> .
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (105) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (102) prim-expression -> . IDENTIFIER
    (103) prim-expression -> . member-access
    (104) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (94) member-access -> . IDENTIFIER DOT IDENTIFIER
    (95) member-access -> . member-access DOT IDENTIFIER
    (100) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (101) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . array-creation-expression
    (76) primary-expression -> . primary-no-array-creation-expression
    (77) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (87) primary-no-array-creation-expression -> . literal
    (88) primary-no-array-creation-expression -> . IDENTIFIER
    (89) primary-no-array-creation-expression -> . parenthesized-expression
    (90) primary-no-array-creation-expression -> . member-access
    (91) primary-no-array-creation-expression -> . invocation-expression
    (92) primary-no-array-creation-expression -> . element-access
    (219) literal -> . ICONST
    (220) literal -> . DCONST
    (221) literal -> . TRUE
    (222) literal -> . FALSE
    (93) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (96) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (97) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    CLOSE_PAREN     reduce using rule 223 (empty -> .)
    IDENTIFIER      shift and go to state 81
    PLUS            shift and go to state 80
    MINUS           shift and go to state 73
    BITNOT          shift and go to state 96
    BITCOMP         shift and go to state 75
    NEW             shift and go to state 71
    ICONST          shift and go to state 86
    DCONST          shift and go to state 97
    TRUE            shift and go to state 91
    FALSE           shift and go to state 89
    OPEN_PAREN      shift and go to state 77

    argument-list-opt              shift and go to state 187
    unary-expression               shift and go to state 87
    exclusive-or-expression        shift and go to state 67
    member-access                  shift and go to state 68
    relational-expression          shift and go to state 69
    additive-expression            shift and go to state 72
    primary-no-array-creation-expression shift and go to state 85
    inclusive-or-expression        shift and go to state 74
    equality-expression            shift and go to state 90
    prim-expression                shift and go to state 50
    element-access                 shift and go to state 76
    literal                        shift and go to state 84
    conditional-expression         shift and go to state 78
    conditional-and-expression     shift and go to state 79
    empty                          shift and go to state 143
    array-creation-expression      shift and go to state 70
    assignment                     shift and go to state 83
    expression-list                shift and go to state 144
    shift-expression               shift and go to state 92
    and-expression                 shift and go to state 93
    multiplicative-expression      shift and go to state 94
    expression                     shift and go to state 145
    primary-expression             shift and go to state 98
    invocation-expression          shift and go to state 99
    conditional-or-expression      shift and go to state 100
    parenthesized-expression       shift and go to state 101

state 113

    (159) labeled-statement -> IDENTIFIER COLON . statement
    (145) statement -> . labeled-statement
    (146) statement -> . declaration-statement
    (147) statement -> . block
    (148) statement -> . empty-statement
    (149) statement -> . expression-statement
    (150) statement -> . selection-statement
    (151) statement -> . iteration-statement
    (152) statement -> . jump-statement
    (153) statement -> . write-statement
    (154) statement -> . read-statement
    (159) labeled-statement -> . IDENTIFIER COLON statement
    (160) declaration-statement -> . local-variable-declaration DELIM
    (161) declaration-statement -> . local-constant-declaration DELIM
    (139) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END
    (164) empty-statement -> . DELIM
    (165) expression-statement -> . statement-expression DELIM
    (168) selection-statement -> . if-statement M_quad
    (169) selection-statement -> . switch-statement
    (186) iteration-statement -> . while-statement M_quad
    (187) iteration-statement -> . for-statement M_quad
    (188) iteration-statement -> . do-statement M_quad
    (202) jump-statement -> . break-statement
    (203) jump-statement -> . continue-statement
    (204) jump-statement -> . goto-statement
    (205) jump-statement -> . return-statement
    (155) write-statement -> . CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM
    (158) read-statement -> . CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM
    (162) local-variable-declaration -> . type variable-declarators
    (163) local-constant-declaration -> . CONST type constant-declarators
    (166) statement-expression -> . invocation-expression
    (167) statement-expression -> . assignment
    (170) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block
    (171) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block
    (175) switch-statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block
    (189) while-statement -> . WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block
    (192) for-statement -> . FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block
    (191) do-statement -> . DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM
    (206) break-statement -> . BREAK DELIM
    (207) continue-statement -> . CONTINUE DELIM
    (208) goto-statement -> . GOTO IDENTIFIER DELIM
    (209) return-statement -> . RETURN expression-opt DELIM
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (96) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (97) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (105) assignment -> . prim-expression assignment-operator expression
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE
    (13) class-type -> . IDENTIFIER
    (34) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET
    (94) member-access -> . IDENTIFIER DOT IDENTIFIER
    (95) member-access -> . member-access DOT IDENTIFIER
    (102) prim-expression -> . IDENTIFIER
    (103) prim-expression -> . member-access
    (104) prim-expression -> . element-access
    (100) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (101) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    IDENTIFIER      shift and go to state 36
    BLOCK_BEGIN     shift and go to state 49
    DELIM           shift and go to state 4
    CONSOLE         shift and go to state 53
    CONST           shift and go to state 48
    IF              shift and go to state 57
    SWITCH          shift and go to state 34
    WHILE           shift and go to state 31
    FOR             shift and go to state 21
    DO              shift and go to state 47
    BREAK           shift and go to state 42
    CONTINUE        shift and go to state 27
    GOTO            shift and go to state 7
    RETURN          shift and go to state 14
    BOOL            shift and go to state 43
    INT             shift and go to state 24
    UINT            shift and go to state 56
    CHAR            shift and go to state 30
    DOUBLE          shift and go to state 12

    return-statement               shift and go to state 16
    write-statement                shift and go to state 1
    member-access                  shift and go to state 2
    selection-statement            shift and go to state 29
    empty-statement                shift and go to state 32
    expression-statement           shift and go to state 3
    break-statement                shift and go to state 33
    prim-expression                shift and go to state 50
    element-access                 shift and go to state 18
    statement-expression           shift and go to state 5
    local-constant-declaration     shift and go to state 19
    statement                      shift and go to state 188
    assignment                     shift and go to state 54
    for-statement                  shift and go to state 6
    type                           shift and go to state 37
    read-statement                 shift and go to state 52
    do-statement                   shift and go to state 20
    array-type                     shift and go to state 39
    continue-statement             shift and go to state 22
    invocation-expression          shift and go to state 13
    labeled-statement              shift and go to state 8
    declaration-statement          shift and go to state 40
    switch-statement               shift and go to state 9
    iteration-statement            shift and go to state 41
    jump-statement                 shift and go to state 10
    local-variable-declaration     shift and go to state 23
    goto-statement                 shift and go to state 25
    if-statement                   shift and go to state 26
    class-type                     shift and go to state 58
    while-statement                shift and go to state 45
    simple-type                    shift and go to state 15
    block                          shift and go to state 28

state 114

    (94) member-access -> IDENTIFIER DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 189


state 115

    (121) variable-declarators -> variable-declarator .

    DELIM           reduce using rule 121 (variable-declarators -> variable-declarator .)
    COMMA           reduce using rule 121 (variable-declarators -> variable-declarator .)


state 116

    (162) local-variable-declaration -> type variable-declarators .
    (122) variable-declarators -> variable-declarators . COMMA variable-declarator

    DELIM           reduce using rule 162 (local-variable-declaration -> type variable-declarators .)
    COMMA           shift and go to state 190


state 117

    (123) variable-declarator -> IDENTIFIER .
    (124) variable-declarator -> IDENTIFIER . ASSIGN variable-initializer

    COMMA           reduce using rule 123 (variable-declarator -> IDENTIFIER .)
    DELIM           reduce using rule 123 (variable-declarator -> IDENTIFIER .)
    ASSIGN          shift and go to state 191


state 118

    (206) break-statement -> BREAK DELIM .

    IDENTIFIER      reduce using rule 206 (break-statement -> BREAK DELIM .)
    BLOCK_BEGIN     reduce using rule 206 (break-statement -> BREAK DELIM .)
    DELIM           reduce using rule 206 (break-statement -> BREAK DELIM .)
    CONSOLE         reduce using rule 206 (break-statement -> BREAK DELIM .)
    CONST           reduce using rule 206 (break-statement -> BREAK DELIM .)
    IF              reduce using rule 206 (break-statement -> BREAK DELIM .)
    SWITCH          reduce using rule 206 (break-statement -> BREAK DELIM .)
    WHILE           reduce using rule 206 (break-statement -> BREAK DELIM .)
    FOR             reduce using rule 206 (break-statement -> BREAK DELIM .)
    DO              reduce using rule 206 (break-statement -> BREAK DELIM .)
    BREAK           reduce using rule 206 (break-statement -> BREAK DELIM .)
    CONTINUE        reduce using rule 206 (break-statement -> BREAK DELIM .)
    GOTO            reduce using rule 206 (break-statement -> BREAK DELIM .)
    RETURN          reduce using rule 206 (break-statement -> BREAK DELIM .)
    BOOL            reduce using rule 206 (break-statement -> BREAK DELIM .)
    INT             reduce using rule 206 (break-statement -> BREAK DELIM .)
    UINT            reduce using rule 206 (break-statement -> BREAK DELIM .)
    CHAR            reduce using rule 206 (break-statement -> BREAK DELIM .)
    DOUBLE          reduce using rule 206 (break-statement -> BREAK DELIM .)
    $end            reduce using rule 206 (break-statement -> BREAK DELIM .)
    BLOCK_END       reduce using rule 206 (break-statement -> BREAK DELIM .)
    CASE            reduce using rule 206 (break-statement -> BREAK DELIM .)
    DEFAULT         reduce using rule 206 (break-statement -> BREAK DELIM .)


state 119

    (144) statement-list -> statement-list statement .

    IDENTIFIER      reduce using rule 144 (statement-list -> statement-list statement .)
    BLOCK_BEGIN     reduce using rule 144 (statement-list -> statement-list statement .)
    DELIM           reduce using rule 144 (statement-list -> statement-list statement .)
    CONSOLE         reduce using rule 144 (statement-list -> statement-list statement .)
    CONST           reduce using rule 144 (statement-list -> statement-list statement .)
    IF              reduce using rule 144 (statement-list -> statement-list statement .)
    SWITCH          reduce using rule 144 (statement-list -> statement-list statement .)
    WHILE           reduce using rule 144 (statement-list -> statement-list statement .)
    FOR             reduce using rule 144 (statement-list -> statement-list statement .)
    DO              reduce using rule 144 (statement-list -> statement-list statement .)
    BREAK           reduce using rule 144 (statement-list -> statement-list statement .)
    CONTINUE        reduce using rule 144 (statement-list -> statement-list statement .)
    GOTO            reduce using rule 144 (statement-list -> statement-list statement .)
    RETURN          reduce using rule 144 (statement-list -> statement-list statement .)
    BOOL            reduce using rule 144 (statement-list -> statement-list statement .)
    INT             reduce using rule 144 (statement-list -> statement-list statement .)
    UINT            reduce using rule 144 (statement-list -> statement-list statement .)
    CHAR            reduce using rule 144 (statement-list -> statement-list statement .)
    DOUBLE          reduce using rule 144 (statement-list -> statement-list statement .)
    CASE            reduce using rule 144 (statement-list -> statement-list statement .)
    DEFAULT         reduce using rule 144 (statement-list -> statement-list statement .)
    BLOCK_END       reduce using rule 144 (statement-list -> statement-list statement .)
    $end            reduce using rule 144 (statement-list -> statement-list statement .)


state 120

    (186) iteration-statement -> while-statement M_quad .

    IDENTIFIER      reduce using rule 186 (iteration-statement -> while-statement M_quad .)
    BLOCK_BEGIN     reduce using rule 186 (iteration-statement -> while-statement M_quad .)
    DELIM           reduce using rule 186 (iteration-statement -> while-statement M_quad .)
    CONSOLE         reduce using rule 186 (iteration-statement -> while-statement M_quad .)
    CONST           reduce using rule 186 (iteration-statement -> while-statement M_quad .)
    IF              reduce using rule 186 (iteration-statement -> while-statement M_quad .)
    SWITCH          reduce using rule 186 (iteration-statement -> while-statement M_quad .)
    WHILE           reduce using rule 186 (iteration-statement -> while-statement M_quad .)
    FOR             reduce using rule 186 (iteration-statement -> while-statement M_quad .)
    DO              reduce using rule 186 (iteration-statement -> while-statement M_quad .)
    BREAK           reduce using rule 186 (iteration-statement -> while-statement M_quad .)
    CONTINUE        reduce using rule 186 (iteration-statement -> while-statement M_quad .)
    GOTO            reduce using rule 186 (iteration-statement -> while-statement M_quad .)
    RETURN          reduce using rule 186 (iteration-statement -> while-statement M_quad .)
    BOOL            reduce using rule 186 (iteration-statement -> while-statement M_quad .)
    INT             reduce using rule 186 (iteration-statement -> while-statement M_quad .)
    UINT            reduce using rule 186 (iteration-statement -> while-statement M_quad .)
    CHAR            reduce using rule 186 (iteration-statement -> while-statement M_quad .)
    DOUBLE          reduce using rule 186 (iteration-statement -> while-statement M_quad .)
    CASE            reduce using rule 186 (iteration-statement -> while-statement M_quad .)
    DEFAULT         reduce using rule 186 (iteration-statement -> while-statement M_quad .)
    BLOCK_END       reduce using rule 186 (iteration-statement -> while-statement M_quad .)
    $end            reduce using rule 186 (iteration-statement -> while-statement M_quad .)


state 121

    (191) do-statement -> DO M_quad . block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM
    (139) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END

    BLOCK_BEGIN     shift and go to state 49

    block                          shift and go to state 192

state 122

    (13) class-type -> IDENTIFIER .

    IDENTIFIER      reduce using rule 13 (class-type -> IDENTIFIER .)
    BLOCK_BEGIN     reduce using rule 13 (class-type -> IDENTIFIER .)


state 123

    (163) local-constant-declaration -> CONST type . constant-declarators
    (35) constant-declarators -> . constant-declarator
    (36) constant-declarators -> . constant-declarators COMMA constant-declarator
    (37) constant-declarator -> . IDENTIFIER ASSIGN expression

    IDENTIFIER      shift and go to state 194

    constant-declarators           shift and go to state 193
    constant-declarator            shift and go to state 195

state 124

    (139) block -> BLOCK_BEGIN M_bstart . statement-list-opt BLOCK_END
    (141) statement-list-opt -> . statement-list
    (142) statement-list-opt -> . empty
    (143) statement-list -> . statement
    (144) statement-list -> . statement-list statement
    (223) empty -> .
    (145) statement -> . labeled-statement
    (146) statement -> . declaration-statement
    (147) statement -> . block
    (148) statement -> . empty-statement
    (149) statement -> . expression-statement
    (150) statement -> . selection-statement
    (151) statement -> . iteration-statement
    (152) statement -> . jump-statement
    (153) statement -> . write-statement
    (154) statement -> . read-statement
    (159) labeled-statement -> . IDENTIFIER COLON statement
    (160) declaration-statement -> . local-variable-declaration DELIM
    (161) declaration-statement -> . local-constant-declaration DELIM
    (139) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END
    (164) empty-statement -> . DELIM
    (165) expression-statement -> . statement-expression DELIM
    (168) selection-statement -> . if-statement M_quad
    (169) selection-statement -> . switch-statement
    (186) iteration-statement -> . while-statement M_quad
    (187) iteration-statement -> . for-statement M_quad
    (188) iteration-statement -> . do-statement M_quad
    (202) jump-statement -> . break-statement
    (203) jump-statement -> . continue-statement
    (204) jump-statement -> . goto-statement
    (205) jump-statement -> . return-statement
    (155) write-statement -> . CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM
    (158) read-statement -> . CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM
    (162) local-variable-declaration -> . type variable-declarators
    (163) local-constant-declaration -> . CONST type constant-declarators
    (166) statement-expression -> . invocation-expression
    (167) statement-expression -> . assignment
    (170) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block
    (171) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block
    (175) switch-statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block
    (189) while-statement -> . WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block
    (192) for-statement -> . FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block
    (191) do-statement -> . DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM
    (206) break-statement -> . BREAK DELIM
    (207) continue-statement -> . CONTINUE DELIM
    (208) goto-statement -> . GOTO IDENTIFIER DELIM
    (209) return-statement -> . RETURN expression-opt DELIM
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (96) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (97) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (105) assignment -> . prim-expression assignment-operator expression
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE
    (13) class-type -> . IDENTIFIER
    (34) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET
    (94) member-access -> . IDENTIFIER DOT IDENTIFIER
    (95) member-access -> . member-access DOT IDENTIFIER
    (102) prim-expression -> . IDENTIFIER
    (103) prim-expression -> . member-access
    (104) prim-expression -> . element-access
    (100) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (101) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    BLOCK_END       reduce using rule 223 (empty -> .)
    IDENTIFIER      shift and go to state 36
    BLOCK_BEGIN     shift and go to state 49
    DELIM           shift and go to state 4
    CONSOLE         shift and go to state 53
    CONST           shift and go to state 48
    IF              shift and go to state 57
    SWITCH          shift and go to state 34
    WHILE           shift and go to state 31
    FOR             shift and go to state 21
    DO              shift and go to state 47
    BREAK           shift and go to state 42
    CONTINUE        shift and go to state 27
    GOTO            shift and go to state 7
    RETURN          shift and go to state 14
    BOOL            shift and go to state 43
    INT             shift and go to state 24
    UINT            shift and go to state 56
    CHAR            shift and go to state 30
    DOUBLE          shift and go to state 12

    return-statement               shift and go to state 16
    write-statement                shift and go to state 1
    member-access                  shift and go to state 2
    selection-statement            shift and go to state 29
    empty-statement                shift and go to state 32
    statement-list-opt             shift and go to state 196
    expression-statement           shift and go to state 3
    break-statement                shift and go to state 33
    prim-expression                shift and go to state 50
    element-access                 shift and go to state 18
    statement-expression           shift and go to state 5
    local-constant-declaration     shift and go to state 19
    statement                      shift and go to state 35
    assignment                     shift and go to state 54
    for-statement                  shift and go to state 6
    type                           shift and go to state 37
    read-statement                 shift and go to state 52
    do-statement                   shift and go to state 20
    array-type                     shift and go to state 39
    continue-statement             shift and go to state 22
    invocation-expression          shift and go to state 13
    labeled-statement              shift and go to state 8
    declaration-statement          shift and go to state 40
    switch-statement               shift and go to state 9
    iteration-statement            shift and go to state 41
    jump-statement                 shift and go to state 10
    local-variable-declaration     shift and go to state 23
    goto-statement                 shift and go to state 25
    if-statement                   shift and go to state 26
    empty                          shift and go to state 197
    statement-list                 shift and go to state 198
    class-type                     shift and go to state 58
    while-statement                shift and go to state 45
    simple-type                    shift and go to state 15
    block                          shift and go to state 28

state 125

    (140) M_bstart -> empty .

    IDENTIFIER      reduce using rule 140 (M_bstart -> empty .)
    BLOCK_BEGIN     reduce using rule 140 (M_bstart -> empty .)
    DELIM           reduce using rule 140 (M_bstart -> empty .)
    CONSOLE         reduce using rule 140 (M_bstart -> empty .)
    CONST           reduce using rule 140 (M_bstart -> empty .)
    IF              reduce using rule 140 (M_bstart -> empty .)
    SWITCH          reduce using rule 140 (M_bstart -> empty .)
    WHILE           reduce using rule 140 (M_bstart -> empty .)
    FOR             reduce using rule 140 (M_bstart -> empty .)
    DO              reduce using rule 140 (M_bstart -> empty .)
    BREAK           reduce using rule 140 (M_bstart -> empty .)
    CONTINUE        reduce using rule 140 (M_bstart -> empty .)
    GOTO            reduce using rule 140 (M_bstart -> empty .)
    RETURN          reduce using rule 140 (M_bstart -> empty .)
    BOOL            reduce using rule 140 (M_bstart -> empty .)
    INT             reduce using rule 140 (M_bstart -> empty .)
    UINT            reduce using rule 140 (M_bstart -> empty .)
    CHAR            reduce using rule 140 (M_bstart -> empty .)
    DOUBLE          reduce using rule 140 (M_bstart -> empty .)
    BLOCK_END       reduce using rule 140 (M_bstart -> empty .)


state 126

    (110) assignment-operator -> DIVEQUAL .

    IDENTIFIER      reduce using rule 110 (assignment-operator -> DIVEQUAL .)
    PLUS            reduce using rule 110 (assignment-operator -> DIVEQUAL .)
    MINUS           reduce using rule 110 (assignment-operator -> DIVEQUAL .)
    BITNOT          reduce using rule 110 (assignment-operator -> DIVEQUAL .)
    BITCOMP         reduce using rule 110 (assignment-operator -> DIVEQUAL .)
    NEW             reduce using rule 110 (assignment-operator -> DIVEQUAL .)
    ICONST          reduce using rule 110 (assignment-operator -> DIVEQUAL .)
    DCONST          reduce using rule 110 (assignment-operator -> DIVEQUAL .)
    TRUE            reduce using rule 110 (assignment-operator -> DIVEQUAL .)
    FALSE           reduce using rule 110 (assignment-operator -> DIVEQUAL .)
    OPEN_PAREN      reduce using rule 110 (assignment-operator -> DIVEQUAL .)


state 127

    (116) assignment-operator -> RSHIFTEQUAL .

    IDENTIFIER      reduce using rule 116 (assignment-operator -> RSHIFTEQUAL .)
    PLUS            reduce using rule 116 (assignment-operator -> RSHIFTEQUAL .)
    MINUS           reduce using rule 116 (assignment-operator -> RSHIFTEQUAL .)
    BITNOT          reduce using rule 116 (assignment-operator -> RSHIFTEQUAL .)
    BITCOMP         reduce using rule 116 (assignment-operator -> RSHIFTEQUAL .)
    NEW             reduce using rule 116 (assignment-operator -> RSHIFTEQUAL .)
    ICONST          reduce using rule 116 (assignment-operator -> RSHIFTEQUAL .)
    DCONST          reduce using rule 116 (assignment-operator -> RSHIFTEQUAL .)
    TRUE            reduce using rule 116 (assignment-operator -> RSHIFTEQUAL .)
    FALSE           reduce using rule 116 (assignment-operator -> RSHIFTEQUAL .)
    OPEN_PAREN      reduce using rule 116 (assignment-operator -> RSHIFTEQUAL .)


state 128

    (105) assignment -> prim-expression assignment-operator . expression
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (105) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (102) prim-expression -> . IDENTIFIER
    (103) prim-expression -> . member-access
    (104) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (94) member-access -> . IDENTIFIER DOT IDENTIFIER
    (95) member-access -> . member-access DOT IDENTIFIER
    (100) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (101) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . array-creation-expression
    (76) primary-expression -> . primary-no-array-creation-expression
    (77) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (87) primary-no-array-creation-expression -> . literal
    (88) primary-no-array-creation-expression -> . IDENTIFIER
    (89) primary-no-array-creation-expression -> . parenthesized-expression
    (90) primary-no-array-creation-expression -> . member-access
    (91) primary-no-array-creation-expression -> . invocation-expression
    (92) primary-no-array-creation-expression -> . element-access
    (219) literal -> . ICONST
    (220) literal -> . DCONST
    (221) literal -> . TRUE
    (222) literal -> . FALSE
    (93) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (96) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (97) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 81
    PLUS            shift and go to state 80
    MINUS           shift and go to state 73
    BITNOT          shift and go to state 96
    BITCOMP         shift and go to state 75
    NEW             shift and go to state 71
    ICONST          shift and go to state 86
    DCONST          shift and go to state 97
    TRUE            shift and go to state 91
    FALSE           shift and go to state 89
    OPEN_PAREN      shift and go to state 77

    unary-expression               shift and go to state 87
    exclusive-or-expression        shift and go to state 67
    member-access                  shift and go to state 68
    relational-expression          shift and go to state 69
    additive-expression            shift and go to state 72
    primary-no-array-creation-expression shift and go to state 85
    inclusive-or-expression        shift and go to state 74
    prim-expression                shift and go to state 50
    element-access                 shift and go to state 76
    literal                        shift and go to state 84
    conditional-expression         shift and go to state 78
    conditional-and-expression     shift and go to state 79
    array-creation-expression      shift and go to state 70
    assignment                     shift and go to state 83
    equality-expression            shift and go to state 90
    shift-expression               shift and go to state 92
    and-expression                 shift and go to state 93
    multiplicative-expression      shift and go to state 94
    conditional-or-expression      shift and go to state 100
    primary-expression             shift and go to state 98
    invocation-expression          shift and go to state 99
    expression                     shift and go to state 199
    parenthesized-expression       shift and go to state 101

state 129

    (109) assignment-operator -> TIMESEQUAL .

    IDENTIFIER      reduce using rule 109 (assignment-operator -> TIMESEQUAL .)
    PLUS            reduce using rule 109 (assignment-operator -> TIMESEQUAL .)
    MINUS           reduce using rule 109 (assignment-operator -> TIMESEQUAL .)
    BITNOT          reduce using rule 109 (assignment-operator -> TIMESEQUAL .)
    BITCOMP         reduce using rule 109 (assignment-operator -> TIMESEQUAL .)
    NEW             reduce using rule 109 (assignment-operator -> TIMESEQUAL .)
    ICONST          reduce using rule 109 (assignment-operator -> TIMESEQUAL .)
    DCONST          reduce using rule 109 (assignment-operator -> TIMESEQUAL .)
    TRUE            reduce using rule 109 (assignment-operator -> TIMESEQUAL .)
    FALSE           reduce using rule 109 (assignment-operator -> TIMESEQUAL .)
    OPEN_PAREN      reduce using rule 109 (assignment-operator -> TIMESEQUAL .)


state 130

    (108) assignment-operator -> MINUSEQUAL .

    IDENTIFIER      reduce using rule 108 (assignment-operator -> MINUSEQUAL .)
    PLUS            reduce using rule 108 (assignment-operator -> MINUSEQUAL .)
    MINUS           reduce using rule 108 (assignment-operator -> MINUSEQUAL .)
    BITNOT          reduce using rule 108 (assignment-operator -> MINUSEQUAL .)
    BITCOMP         reduce using rule 108 (assignment-operator -> MINUSEQUAL .)
    NEW             reduce using rule 108 (assignment-operator -> MINUSEQUAL .)
    ICONST          reduce using rule 108 (assignment-operator -> MINUSEQUAL .)
    DCONST          reduce using rule 108 (assignment-operator -> MINUSEQUAL .)
    TRUE            reduce using rule 108 (assignment-operator -> MINUSEQUAL .)
    FALSE           reduce using rule 108 (assignment-operator -> MINUSEQUAL .)
    OPEN_PAREN      reduce using rule 108 (assignment-operator -> MINUSEQUAL .)


state 131

    (113) assignment-operator -> BITOREQUAL .

    IDENTIFIER      reduce using rule 113 (assignment-operator -> BITOREQUAL .)
    PLUS            reduce using rule 113 (assignment-operator -> BITOREQUAL .)
    MINUS           reduce using rule 113 (assignment-operator -> BITOREQUAL .)
    BITNOT          reduce using rule 113 (assignment-operator -> BITOREQUAL .)
    BITCOMP         reduce using rule 113 (assignment-operator -> BITOREQUAL .)
    NEW             reduce using rule 113 (assignment-operator -> BITOREQUAL .)
    ICONST          reduce using rule 113 (assignment-operator -> BITOREQUAL .)
    DCONST          reduce using rule 113 (assignment-operator -> BITOREQUAL .)
    TRUE            reduce using rule 113 (assignment-operator -> BITOREQUAL .)
    FALSE           reduce using rule 113 (assignment-operator -> BITOREQUAL .)
    OPEN_PAREN      reduce using rule 113 (assignment-operator -> BITOREQUAL .)


state 132

    (107) assignment-operator -> PLUSEQUAL .

    IDENTIFIER      reduce using rule 107 (assignment-operator -> PLUSEQUAL .)
    PLUS            reduce using rule 107 (assignment-operator -> PLUSEQUAL .)
    MINUS           reduce using rule 107 (assignment-operator -> PLUSEQUAL .)
    BITNOT          reduce using rule 107 (assignment-operator -> PLUSEQUAL .)
    BITCOMP         reduce using rule 107 (assignment-operator -> PLUSEQUAL .)
    NEW             reduce using rule 107 (assignment-operator -> PLUSEQUAL .)
    ICONST          reduce using rule 107 (assignment-operator -> PLUSEQUAL .)
    DCONST          reduce using rule 107 (assignment-operator -> PLUSEQUAL .)
    TRUE            reduce using rule 107 (assignment-operator -> PLUSEQUAL .)
    FALSE           reduce using rule 107 (assignment-operator -> PLUSEQUAL .)
    OPEN_PAREN      reduce using rule 107 (assignment-operator -> PLUSEQUAL .)


state 133

    (114) assignment-operator -> BITXOREQUAL .

    IDENTIFIER      reduce using rule 114 (assignment-operator -> BITXOREQUAL .)
    PLUS            reduce using rule 114 (assignment-operator -> BITXOREQUAL .)
    MINUS           reduce using rule 114 (assignment-operator -> BITXOREQUAL .)
    BITNOT          reduce using rule 114 (assignment-operator -> BITXOREQUAL .)
    BITCOMP         reduce using rule 114 (assignment-operator -> BITXOREQUAL .)
    NEW             reduce using rule 114 (assignment-operator -> BITXOREQUAL .)
    ICONST          reduce using rule 114 (assignment-operator -> BITXOREQUAL .)
    DCONST          reduce using rule 114 (assignment-operator -> BITXOREQUAL .)
    TRUE            reduce using rule 114 (assignment-operator -> BITXOREQUAL .)
    FALSE           reduce using rule 114 (assignment-operator -> BITXOREQUAL .)
    OPEN_PAREN      reduce using rule 114 (assignment-operator -> BITXOREQUAL .)


state 134

    (112) assignment-operator -> BITANDEQUAL .

    IDENTIFIER      reduce using rule 112 (assignment-operator -> BITANDEQUAL .)
    PLUS            reduce using rule 112 (assignment-operator -> BITANDEQUAL .)
    MINUS           reduce using rule 112 (assignment-operator -> BITANDEQUAL .)
    BITNOT          reduce using rule 112 (assignment-operator -> BITANDEQUAL .)
    BITCOMP         reduce using rule 112 (assignment-operator -> BITANDEQUAL .)
    NEW             reduce using rule 112 (assignment-operator -> BITANDEQUAL .)
    ICONST          reduce using rule 112 (assignment-operator -> BITANDEQUAL .)
    DCONST          reduce using rule 112 (assignment-operator -> BITANDEQUAL .)
    TRUE            reduce using rule 112 (assignment-operator -> BITANDEQUAL .)
    FALSE           reduce using rule 112 (assignment-operator -> BITANDEQUAL .)
    OPEN_PAREN      reduce using rule 112 (assignment-operator -> BITANDEQUAL .)


state 135

    (115) assignment-operator -> LSHIFTEQUAL .

    IDENTIFIER      reduce using rule 115 (assignment-operator -> LSHIFTEQUAL .)
    PLUS            reduce using rule 115 (assignment-operator -> LSHIFTEQUAL .)
    MINUS           reduce using rule 115 (assignment-operator -> LSHIFTEQUAL .)
    BITNOT          reduce using rule 115 (assignment-operator -> LSHIFTEQUAL .)
    BITCOMP         reduce using rule 115 (assignment-operator -> LSHIFTEQUAL .)
    NEW             reduce using rule 115 (assignment-operator -> LSHIFTEQUAL .)
    ICONST          reduce using rule 115 (assignment-operator -> LSHIFTEQUAL .)
    DCONST          reduce using rule 115 (assignment-operator -> LSHIFTEQUAL .)
    TRUE            reduce using rule 115 (assignment-operator -> LSHIFTEQUAL .)
    FALSE           reduce using rule 115 (assignment-operator -> LSHIFTEQUAL .)
    OPEN_PAREN      reduce using rule 115 (assignment-operator -> LSHIFTEQUAL .)


state 136

    (106) assignment-operator -> ASSIGN .

    IDENTIFIER      reduce using rule 106 (assignment-operator -> ASSIGN .)
    PLUS            reduce using rule 106 (assignment-operator -> ASSIGN .)
    MINUS           reduce using rule 106 (assignment-operator -> ASSIGN .)
    BITNOT          reduce using rule 106 (assignment-operator -> ASSIGN .)
    BITCOMP         reduce using rule 106 (assignment-operator -> ASSIGN .)
    NEW             reduce using rule 106 (assignment-operator -> ASSIGN .)
    ICONST          reduce using rule 106 (assignment-operator -> ASSIGN .)
    DCONST          reduce using rule 106 (assignment-operator -> ASSIGN .)
    TRUE            reduce using rule 106 (assignment-operator -> ASSIGN .)
    FALSE           reduce using rule 106 (assignment-operator -> ASSIGN .)
    OPEN_PAREN      reduce using rule 106 (assignment-operator -> ASSIGN .)


state 137

    (111) assignment-operator -> MODEQUAL .

    IDENTIFIER      reduce using rule 111 (assignment-operator -> MODEQUAL .)
    PLUS            reduce using rule 111 (assignment-operator -> MODEQUAL .)
    MINUS           reduce using rule 111 (assignment-operator -> MODEQUAL .)
    BITNOT          reduce using rule 111 (assignment-operator -> MODEQUAL .)
    BITCOMP         reduce using rule 111 (assignment-operator -> MODEQUAL .)
    NEW             reduce using rule 111 (assignment-operator -> MODEQUAL .)
    ICONST          reduce using rule 111 (assignment-operator -> MODEQUAL .)
    DCONST          reduce using rule 111 (assignment-operator -> MODEQUAL .)
    TRUE            reduce using rule 111 (assignment-operator -> MODEQUAL .)
    FALSE           reduce using rule 111 (assignment-operator -> MODEQUAL .)
    OPEN_PAREN      reduce using rule 111 (assignment-operator -> MODEQUAL .)


state 138

    (9) class-declaration -> CLASS IDENTIFIER . class-base-opt class-body semi-opt
    (10) class-base-opt -> . class-base
    (11) class-base-opt -> . empty
    (12) class-base -> . COLON class-type
    (223) empty -> .

    COLON           shift and go to state 202
    BLOCK_BEGIN     reduce using rule 223 (empty -> .)

    class-base-opt                 shift and go to state 200
    class-base                     shift and go to state 201
    empty                          shift and go to state 203

state 139

    (155) write-statement -> CONSOLE DOT . WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM
    (158) read-statement -> CONSOLE DOT . READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM

    WRITELINE       shift and go to state 204
    READLINE        shift and go to state 205


state 140

    (170) if-statement -> IF OPEN_PAREN . expression CLOSE_PAREN M_if block
    (171) if-statement -> IF OPEN_PAREN . expression CLOSE_PAREN M_if block ELSE M_else block
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (105) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (102) prim-expression -> . IDENTIFIER
    (103) prim-expression -> . member-access
    (104) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (94) member-access -> . IDENTIFIER DOT IDENTIFIER
    (95) member-access -> . member-access DOT IDENTIFIER
    (100) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (101) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . array-creation-expression
    (76) primary-expression -> . primary-no-array-creation-expression
    (77) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (87) primary-no-array-creation-expression -> . literal
    (88) primary-no-array-creation-expression -> . IDENTIFIER
    (89) primary-no-array-creation-expression -> . parenthesized-expression
    (90) primary-no-array-creation-expression -> . member-access
    (91) primary-no-array-creation-expression -> . invocation-expression
    (92) primary-no-array-creation-expression -> . element-access
    (219) literal -> . ICONST
    (220) literal -> . DCONST
    (221) literal -> . TRUE
    (222) literal -> . FALSE
    (93) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (96) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (97) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 81
    PLUS            shift and go to state 80
    MINUS           shift and go to state 73
    BITNOT          shift and go to state 96
    BITCOMP         shift and go to state 75
    NEW             shift and go to state 71
    ICONST          shift and go to state 86
    DCONST          shift and go to state 97
    TRUE            shift and go to state 91
    FALSE           shift and go to state 89
    OPEN_PAREN      shift and go to state 77

    unary-expression               shift and go to state 87
    exclusive-or-expression        shift and go to state 67
    member-access                  shift and go to state 68
    relational-expression          shift and go to state 69
    additive-expression            shift and go to state 72
    primary-no-array-creation-expression shift and go to state 85
    inclusive-or-expression        shift and go to state 74
    prim-expression                shift and go to state 50
    element-access                 shift and go to state 76
    literal                        shift and go to state 84
    conditional-expression         shift and go to state 78
    conditional-and-expression     shift and go to state 79
    array-creation-expression      shift and go to state 70
    assignment                     shift and go to state 83
    equality-expression            shift and go to state 90
    shift-expression               shift and go to state 92
    and-expression                 shift and go to state 93
    multiplicative-expression      shift and go to state 94
    expression                     shift and go to state 206
    primary-expression             shift and go to state 98
    invocation-expression          shift and go to state 99
    conditional-or-expression      shift and go to state 100
    parenthesized-expression       shift and go to state 101

state 141

    (101) element-access -> member-access OPEN_BRACKET expression . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 207


state 142

    (97) invocation-expression -> member-access OPEN_PAREN argument-list-opt . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 208


state 143

    (99) argument-list-opt -> empty .

    CLOSE_PAREN     reduce using rule 99 (argument-list-opt -> empty .)


state 144

    (98) argument-list-opt -> expression-list .
    (81) expression-list -> expression-list . COMMA expression

    CLOSE_PAREN     reduce using rule 98 (argument-list-opt -> expression-list .)
    COMMA           shift and go to state 209


state 145

    (80) expression-list -> expression .

    COMMA           reduce using rule 80 (expression-list -> expression .)
    CLOSE_PAREN     reduce using rule 80 (expression-list -> expression .)
    BLOCK_END       reduce using rule 80 (expression-list -> expression .)


state 146

    (95) member-access -> member-access DOT IDENTIFIER .

    DOT             reduce using rule 95 (member-access -> member-access DOT IDENTIFIER .)
    OPEN_PAREN      reduce using rule 95 (member-access -> member-access DOT IDENTIFIER .)
    OPEN_BRACKET    reduce using rule 95 (member-access -> member-access DOT IDENTIFIER .)
    TIMES           reduce using rule 95 (member-access -> member-access DOT IDENTIFIER .)
    DIV             reduce using rule 95 (member-access -> member-access DOT IDENTIFIER .)
    MOD             reduce using rule 95 (member-access -> member-access DOT IDENTIFIER .)
    PLUS            reduce using rule 95 (member-access -> member-access DOT IDENTIFIER .)
    MINUS           reduce using rule 95 (member-access -> member-access DOT IDENTIFIER .)
    LSHIFT          reduce using rule 95 (member-access -> member-access DOT IDENTIFIER .)
    RSHIFT          reduce using rule 95 (member-access -> member-access DOT IDENTIFIER .)
    LT              reduce using rule 95 (member-access -> member-access DOT IDENTIFIER .)
    GT              reduce using rule 95 (member-access -> member-access DOT IDENTIFIER .)
    LE              reduce using rule 95 (member-access -> member-access DOT IDENTIFIER .)
    GE              reduce using rule 95 (member-access -> member-access DOT IDENTIFIER .)
    EQ              reduce using rule 95 (member-access -> member-access DOT IDENTIFIER .)
    NE              reduce using rule 95 (member-access -> member-access DOT IDENTIFIER .)
    BITAND          reduce using rule 95 (member-access -> member-access DOT IDENTIFIER .)
    BITXOR          reduce using rule 95 (member-access -> member-access DOT IDENTIFIER .)
    BITOR           reduce using rule 95 (member-access -> member-access DOT IDENTIFIER .)
    LOGAND          reduce using rule 95 (member-access -> member-access DOT IDENTIFIER .)
    CONDOP          reduce using rule 95 (member-access -> member-access DOT IDENTIFIER .)
    LOGOR           reduce using rule 95 (member-access -> member-access DOT IDENTIFIER .)
    DELIM           reduce using rule 95 (member-access -> member-access DOT IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 95 (member-access -> member-access DOT IDENTIFIER .)
    COMMA           reduce using rule 95 (member-access -> member-access DOT IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 95 (member-access -> member-access DOT IDENTIFIER .)
    COLON           reduce using rule 95 (member-access -> member-access DOT IDENTIFIER .)
    BLOCK_END       reduce using rule 95 (member-access -> member-access DOT IDENTIFIER .)
    ASSIGN          reduce using rule 95 (member-access -> member-access DOT IDENTIFIER .)
    PLUSEQUAL       reduce using rule 95 (member-access -> member-access DOT IDENTIFIER .)
    MINUSEQUAL      reduce using rule 95 (member-access -> member-access DOT IDENTIFIER .)
    TIMESEQUAL      reduce using rule 95 (member-access -> member-access DOT IDENTIFIER .)
    DIVEQUAL        reduce using rule 95 (member-access -> member-access DOT IDENTIFIER .)
    MODEQUAL        reduce using rule 95 (member-access -> member-access DOT IDENTIFIER .)
    BITANDEQUAL     reduce using rule 95 (member-access -> member-access DOT IDENTIFIER .)
    BITOREQUAL      reduce using rule 95 (member-access -> member-access DOT IDENTIFIER .)
    BITXOREQUAL     reduce using rule 95 (member-access -> member-access DOT IDENTIFIER .)
    LSHIFTEQUAL     reduce using rule 95 (member-access -> member-access DOT IDENTIFIER .)
    RSHIFTEQUAL     reduce using rule 95 (member-access -> member-access DOT IDENTIFIER .)


state 147

    (208) goto-statement -> GOTO IDENTIFIER DELIM .

    IDENTIFIER      reduce using rule 208 (goto-statement -> GOTO IDENTIFIER DELIM .)
    BLOCK_BEGIN     reduce using rule 208 (goto-statement -> GOTO IDENTIFIER DELIM .)
    DELIM           reduce using rule 208 (goto-statement -> GOTO IDENTIFIER DELIM .)
    CONSOLE         reduce using rule 208 (goto-statement -> GOTO IDENTIFIER DELIM .)
    CONST           reduce using rule 208 (goto-statement -> GOTO IDENTIFIER DELIM .)
    IF              reduce using rule 208 (goto-statement -> GOTO IDENTIFIER DELIM .)
    SWITCH          reduce using rule 208 (goto-statement -> GOTO IDENTIFIER DELIM .)
    WHILE           reduce using rule 208 (goto-statement -> GOTO IDENTIFIER DELIM .)
    FOR             reduce using rule 208 (goto-statement -> GOTO IDENTIFIER DELIM .)
    DO              reduce using rule 208 (goto-statement -> GOTO IDENTIFIER DELIM .)
    BREAK           reduce using rule 208 (goto-statement -> GOTO IDENTIFIER DELIM .)
    CONTINUE        reduce using rule 208 (goto-statement -> GOTO IDENTIFIER DELIM .)
    GOTO            reduce using rule 208 (goto-statement -> GOTO IDENTIFIER DELIM .)
    RETURN          reduce using rule 208 (goto-statement -> GOTO IDENTIFIER DELIM .)
    BOOL            reduce using rule 208 (goto-statement -> GOTO IDENTIFIER DELIM .)
    INT             reduce using rule 208 (goto-statement -> GOTO IDENTIFIER DELIM .)
    UINT            reduce using rule 208 (goto-statement -> GOTO IDENTIFIER DELIM .)
    CHAR            reduce using rule 208 (goto-statement -> GOTO IDENTIFIER DELIM .)
    DOUBLE          reduce using rule 208 (goto-statement -> GOTO IDENTIFIER DELIM .)
    CASE            reduce using rule 208 (goto-statement -> GOTO IDENTIFIER DELIM .)
    DEFAULT         reduce using rule 208 (goto-statement -> GOTO IDENTIFIER DELIM .)
    BLOCK_END       reduce using rule 208 (goto-statement -> GOTO IDENTIFIER DELIM .)
    $end            reduce using rule 208 (goto-statement -> GOTO IDENTIFIER DELIM .)


state 148

    (49) exclusive-or-expression -> exclusive-or-expression BITXOR . and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . array-creation-expression
    (76) primary-expression -> . primary-no-array-creation-expression
    (77) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (87) primary-no-array-creation-expression -> . literal
    (88) primary-no-array-creation-expression -> . IDENTIFIER
    (89) primary-no-array-creation-expression -> . parenthesized-expression
    (90) primary-no-array-creation-expression -> . member-access
    (91) primary-no-array-creation-expression -> . invocation-expression
    (92) primary-no-array-creation-expression -> . element-access
    (219) literal -> . ICONST
    (220) literal -> . DCONST
    (221) literal -> . TRUE
    (222) literal -> . FALSE
    (93) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (94) member-access -> . IDENTIFIER DOT IDENTIFIER
    (95) member-access -> . member-access DOT IDENTIFIER
    (96) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (97) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (100) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (101) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    PLUS            shift and go to state 80
    MINUS           shift and go to state 73
    BITNOT          shift and go to state 96
    BITCOMP         shift and go to state 75
    NEW             shift and go to state 71
    IDENTIFIER      shift and go to state 159
    ICONST          shift and go to state 86
    DCONST          shift and go to state 97
    TRUE            shift and go to state 91
    FALSE           shift and go to state 89
    OPEN_PAREN      shift and go to state 77

    array-creation-expression      shift and go to state 70
    and-expression                 shift and go to state 210
    multiplicative-expression      shift and go to state 94
    equality-expression            shift and go to state 90
    unary-expression               shift and go to state 87
    relational-expression          shift and go to state 69
    element-access                 shift and go to state 158
    literal                        shift and go to state 84
    primary-no-array-creation-expression shift and go to state 85
    primary-expression             shift and go to state 98
    invocation-expression          shift and go to state 99
    additive-expression            shift and go to state 72
    parenthesized-expression       shift and go to state 101
    member-access                  shift and go to state 156
    shift-expression               shift and go to state 92

state 149

    (58) relational-expression -> relational-expression LE . shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . array-creation-expression
    (76) primary-expression -> . primary-no-array-creation-expression
    (77) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (87) primary-no-array-creation-expression -> . literal
    (88) primary-no-array-creation-expression -> . IDENTIFIER
    (89) primary-no-array-creation-expression -> . parenthesized-expression
    (90) primary-no-array-creation-expression -> . member-access
    (91) primary-no-array-creation-expression -> . invocation-expression
    (92) primary-no-array-creation-expression -> . element-access
    (219) literal -> . ICONST
    (220) literal -> . DCONST
    (221) literal -> . TRUE
    (222) literal -> . FALSE
    (93) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (94) member-access -> . IDENTIFIER DOT IDENTIFIER
    (95) member-access -> . member-access DOT IDENTIFIER
    (96) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (97) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (100) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (101) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    PLUS            shift and go to state 80
    MINUS           shift and go to state 73
    BITNOT          shift and go to state 96
    BITCOMP         shift and go to state 75
    NEW             shift and go to state 71
    IDENTIFIER      shift and go to state 159
    ICONST          shift and go to state 86
    DCONST          shift and go to state 97
    TRUE            shift and go to state 91
    FALSE           shift and go to state 89
    OPEN_PAREN      shift and go to state 77

    array-creation-expression      shift and go to state 70
    multiplicative-expression      shift and go to state 94
    member-access                  shift and go to state 156
    unary-expression               shift and go to state 87
    element-access                 shift and go to state 158
    literal                        shift and go to state 84
    primary-no-array-creation-expression shift and go to state 85
    primary-expression             shift and go to state 98
    invocation-expression          shift and go to state 99
    additive-expression            shift and go to state 72
    parenthesized-expression       shift and go to state 101
    shift-expression               shift and go to state 211

state 150

    (59) relational-expression -> relational-expression GE . shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . array-creation-expression
    (76) primary-expression -> . primary-no-array-creation-expression
    (77) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (87) primary-no-array-creation-expression -> . literal
    (88) primary-no-array-creation-expression -> . IDENTIFIER
    (89) primary-no-array-creation-expression -> . parenthesized-expression
    (90) primary-no-array-creation-expression -> . member-access
    (91) primary-no-array-creation-expression -> . invocation-expression
    (92) primary-no-array-creation-expression -> . element-access
    (219) literal -> . ICONST
    (220) literal -> . DCONST
    (221) literal -> . TRUE
    (222) literal -> . FALSE
    (93) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (94) member-access -> . IDENTIFIER DOT IDENTIFIER
    (95) member-access -> . member-access DOT IDENTIFIER
    (96) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (97) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (100) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (101) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    PLUS            shift and go to state 80
    MINUS           shift and go to state 73
    BITNOT          shift and go to state 96
    BITCOMP         shift and go to state 75
    NEW             shift and go to state 71
    IDENTIFIER      shift and go to state 159
    ICONST          shift and go to state 86
    DCONST          shift and go to state 97
    TRUE            shift and go to state 91
    FALSE           shift and go to state 89
    OPEN_PAREN      shift and go to state 77

    array-creation-expression      shift and go to state 70
    multiplicative-expression      shift and go to state 94
    member-access                  shift and go to state 156
    unary-expression               shift and go to state 87
    element-access                 shift and go to state 158
    literal                        shift and go to state 84
    primary-no-array-creation-expression shift and go to state 85
    primary-expression             shift and go to state 98
    invocation-expression          shift and go to state 99
    additive-expression            shift and go to state 72
    parenthesized-expression       shift and go to state 101
    shift-expression               shift and go to state 212

state 151

    (56) relational-expression -> relational-expression LT . shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . array-creation-expression
    (76) primary-expression -> . primary-no-array-creation-expression
    (77) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (87) primary-no-array-creation-expression -> . literal
    (88) primary-no-array-creation-expression -> . IDENTIFIER
    (89) primary-no-array-creation-expression -> . parenthesized-expression
    (90) primary-no-array-creation-expression -> . member-access
    (91) primary-no-array-creation-expression -> . invocation-expression
    (92) primary-no-array-creation-expression -> . element-access
    (219) literal -> . ICONST
    (220) literal -> . DCONST
    (221) literal -> . TRUE
    (222) literal -> . FALSE
    (93) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (94) member-access -> . IDENTIFIER DOT IDENTIFIER
    (95) member-access -> . member-access DOT IDENTIFIER
    (96) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (97) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (100) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (101) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    PLUS            shift and go to state 80
    MINUS           shift and go to state 73
    BITNOT          shift and go to state 96
    BITCOMP         shift and go to state 75
    NEW             shift and go to state 71
    IDENTIFIER      shift and go to state 159
    ICONST          shift and go to state 86
    DCONST          shift and go to state 97
    TRUE            shift and go to state 91
    FALSE           shift and go to state 89
    OPEN_PAREN      shift and go to state 77

    array-creation-expression      shift and go to state 70
    multiplicative-expression      shift and go to state 94
    member-access                  shift and go to state 156
    unary-expression               shift and go to state 87
    element-access                 shift and go to state 158
    literal                        shift and go to state 84
    primary-no-array-creation-expression shift and go to state 85
    primary-expression             shift and go to state 98
    invocation-expression          shift and go to state 99
    additive-expression            shift and go to state 72
    parenthesized-expression       shift and go to state 101
    shift-expression               shift and go to state 213

state 152

    (57) relational-expression -> relational-expression GT . shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . array-creation-expression
    (76) primary-expression -> . primary-no-array-creation-expression
    (77) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (87) primary-no-array-creation-expression -> . literal
    (88) primary-no-array-creation-expression -> . IDENTIFIER
    (89) primary-no-array-creation-expression -> . parenthesized-expression
    (90) primary-no-array-creation-expression -> . member-access
    (91) primary-no-array-creation-expression -> . invocation-expression
    (92) primary-no-array-creation-expression -> . element-access
    (219) literal -> . ICONST
    (220) literal -> . DCONST
    (221) literal -> . TRUE
    (222) literal -> . FALSE
    (93) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (94) member-access -> . IDENTIFIER DOT IDENTIFIER
    (95) member-access -> . member-access DOT IDENTIFIER
    (96) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (97) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (100) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (101) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    PLUS            shift and go to state 80
    MINUS           shift and go to state 73
    BITNOT          shift and go to state 96
    BITCOMP         shift and go to state 75
    NEW             shift and go to state 71
    IDENTIFIER      shift and go to state 159
    ICONST          shift and go to state 86
    DCONST          shift and go to state 97
    TRUE            shift and go to state 91
    FALSE           shift and go to state 89
    OPEN_PAREN      shift and go to state 77

    array-creation-expression      shift and go to state 70
    multiplicative-expression      shift and go to state 94
    member-access                  shift and go to state 156
    unary-expression               shift and go to state 87
    element-access                 shift and go to state 158
    literal                        shift and go to state 84
    primary-no-array-creation-expression shift and go to state 85
    primary-expression             shift and go to state 98
    invocation-expression          shift and go to state 99
    additive-expression            shift and go to state 72
    parenthesized-expression       shift and go to state 101
    shift-expression               shift and go to state 214

state 153

    (77) array-creation-expression -> NEW simple-type . OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt

    OPEN_BRACKET    shift and go to state 215


state 154

    (64) additive-expression -> additive-expression PLUS . multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . array-creation-expression
    (76) primary-expression -> . primary-no-array-creation-expression
    (77) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (87) primary-no-array-creation-expression -> . literal
    (88) primary-no-array-creation-expression -> . IDENTIFIER
    (89) primary-no-array-creation-expression -> . parenthesized-expression
    (90) primary-no-array-creation-expression -> . member-access
    (91) primary-no-array-creation-expression -> . invocation-expression
    (92) primary-no-array-creation-expression -> . element-access
    (219) literal -> . ICONST
    (220) literal -> . DCONST
    (221) literal -> . TRUE
    (222) literal -> . FALSE
    (93) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (94) member-access -> . IDENTIFIER DOT IDENTIFIER
    (95) member-access -> . member-access DOT IDENTIFIER
    (96) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (97) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (100) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (101) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    PLUS            shift and go to state 80
    MINUS           shift and go to state 73
    BITNOT          shift and go to state 96
    BITCOMP         shift and go to state 75
    NEW             shift and go to state 71
    IDENTIFIER      shift and go to state 159
    ICONST          shift and go to state 86
    DCONST          shift and go to state 97
    TRUE            shift and go to state 91
    FALSE           shift and go to state 89
    OPEN_PAREN      shift and go to state 77

    array-creation-expression      shift and go to state 70
    multiplicative-expression      shift and go to state 216
    member-access                  shift and go to state 156
    unary-expression               shift and go to state 87
    element-access                 shift and go to state 158
    literal                        shift and go to state 84
    primary-no-array-creation-expression shift and go to state 85
    primary-expression             shift and go to state 98
    invocation-expression          shift and go to state 99
    parenthesized-expression       shift and go to state 101

state 155

    (65) additive-expression -> additive-expression MINUS . multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . array-creation-expression
    (76) primary-expression -> . primary-no-array-creation-expression
    (77) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (87) primary-no-array-creation-expression -> . literal
    (88) primary-no-array-creation-expression -> . IDENTIFIER
    (89) primary-no-array-creation-expression -> . parenthesized-expression
    (90) primary-no-array-creation-expression -> . member-access
    (91) primary-no-array-creation-expression -> . invocation-expression
    (92) primary-no-array-creation-expression -> . element-access
    (219) literal -> . ICONST
    (220) literal -> . DCONST
    (221) literal -> . TRUE
    (222) literal -> . FALSE
    (93) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (94) member-access -> . IDENTIFIER DOT IDENTIFIER
    (95) member-access -> . member-access DOT IDENTIFIER
    (96) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (97) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (100) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (101) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    PLUS            shift and go to state 80
    MINUS           shift and go to state 73
    BITNOT          shift and go to state 96
    BITCOMP         shift and go to state 75
    NEW             shift and go to state 71
    IDENTIFIER      shift and go to state 159
    ICONST          shift and go to state 86
    DCONST          shift and go to state 97
    TRUE            shift and go to state 91
    FALSE           shift and go to state 89
    OPEN_PAREN      shift and go to state 77

    array-creation-expression      shift and go to state 70
    multiplicative-expression      shift and go to state 217
    member-access                  shift and go to state 156
    unary-expression               shift and go to state 87
    element-access                 shift and go to state 158
    literal                        shift and go to state 84
    primary-no-array-creation-expression shift and go to state 85
    primary-expression             shift and go to state 98
    invocation-expression          shift and go to state 99
    parenthesized-expression       shift and go to state 101

state 156

    (90) primary-no-array-creation-expression -> member-access .
    (95) member-access -> member-access . DOT IDENTIFIER
    (97) invocation-expression -> member-access . OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) element-access -> member-access . OPEN_BRACKET expression CLOSE_BRACKET

    TIMES           reduce using rule 90 (primary-no-array-creation-expression -> member-access .)
    DIV             reduce using rule 90 (primary-no-array-creation-expression -> member-access .)
    MOD             reduce using rule 90 (primary-no-array-creation-expression -> member-access .)
    PLUS            reduce using rule 90 (primary-no-array-creation-expression -> member-access .)
    MINUS           reduce using rule 90 (primary-no-array-creation-expression -> member-access .)
    LSHIFT          reduce using rule 90 (primary-no-array-creation-expression -> member-access .)
    RSHIFT          reduce using rule 90 (primary-no-array-creation-expression -> member-access .)
    LT              reduce using rule 90 (primary-no-array-creation-expression -> member-access .)
    GT              reduce using rule 90 (primary-no-array-creation-expression -> member-access .)
    LE              reduce using rule 90 (primary-no-array-creation-expression -> member-access .)
    GE              reduce using rule 90 (primary-no-array-creation-expression -> member-access .)
    EQ              reduce using rule 90 (primary-no-array-creation-expression -> member-access .)
    NE              reduce using rule 90 (primary-no-array-creation-expression -> member-access .)
    BITAND          reduce using rule 90 (primary-no-array-creation-expression -> member-access .)
    BITXOR          reduce using rule 90 (primary-no-array-creation-expression -> member-access .)
    BITOR           reduce using rule 90 (primary-no-array-creation-expression -> member-access .)
    LOGAND          reduce using rule 90 (primary-no-array-creation-expression -> member-access .)
    CONDOP          reduce using rule 90 (primary-no-array-creation-expression -> member-access .)
    LOGOR           reduce using rule 90 (primary-no-array-creation-expression -> member-access .)
    DELIM           reduce using rule 90 (primary-no-array-creation-expression -> member-access .)
    CLOSE_BRACKET   reduce using rule 90 (primary-no-array-creation-expression -> member-access .)
    COMMA           reduce using rule 90 (primary-no-array-creation-expression -> member-access .)
    CLOSE_PAREN     reduce using rule 90 (primary-no-array-creation-expression -> member-access .)
    COLON           reduce using rule 90 (primary-no-array-creation-expression -> member-access .)
    BLOCK_END       reduce using rule 90 (primary-no-array-creation-expression -> member-access .)
    DOT             shift and go to state 61
    OPEN_PAREN      shift and go to state 60
    OPEN_BRACKET    shift and go to state 59


state 157

    (72) unary-expression -> MINUS unary-expression .

    TIMES           reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    DIV             reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    MOD             reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    PLUS            reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    MINUS           reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    LSHIFT          reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    RSHIFT          reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    LT              reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    GT              reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    LE              reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    GE              reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    EQ              reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    NE              reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    BITAND          reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    BITXOR          reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    BITOR           reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    LOGAND          reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    CONDOP          reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    LOGOR           reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    COMMA           reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    CLOSE_PAREN     reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    BLOCK_END       reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    DELIM           reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    CLOSE_BRACKET   reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    COLON           reduce using rule 72 (unary-expression -> MINUS unary-expression .)


state 158

    (92) primary-no-array-creation-expression -> element-access .

    TIMES           reduce using rule 92 (primary-no-array-creation-expression -> element-access .)
    DIV             reduce using rule 92 (primary-no-array-creation-expression -> element-access .)
    MOD             reduce using rule 92 (primary-no-array-creation-expression -> element-access .)
    PLUS            reduce using rule 92 (primary-no-array-creation-expression -> element-access .)
    MINUS           reduce using rule 92 (primary-no-array-creation-expression -> element-access .)
    LSHIFT          reduce using rule 92 (primary-no-array-creation-expression -> element-access .)
    RSHIFT          reduce using rule 92 (primary-no-array-creation-expression -> element-access .)
    LT              reduce using rule 92 (primary-no-array-creation-expression -> element-access .)
    GT              reduce using rule 92 (primary-no-array-creation-expression -> element-access .)
    LE              reduce using rule 92 (primary-no-array-creation-expression -> element-access .)
    GE              reduce using rule 92 (primary-no-array-creation-expression -> element-access .)
    EQ              reduce using rule 92 (primary-no-array-creation-expression -> element-access .)
    NE              reduce using rule 92 (primary-no-array-creation-expression -> element-access .)
    BITAND          reduce using rule 92 (primary-no-array-creation-expression -> element-access .)
    BITXOR          reduce using rule 92 (primary-no-array-creation-expression -> element-access .)
    BITOR           reduce using rule 92 (primary-no-array-creation-expression -> element-access .)
    LOGAND          reduce using rule 92 (primary-no-array-creation-expression -> element-access .)
    CONDOP          reduce using rule 92 (primary-no-array-creation-expression -> element-access .)
    LOGOR           reduce using rule 92 (primary-no-array-creation-expression -> element-access .)
    DELIM           reduce using rule 92 (primary-no-array-creation-expression -> element-access .)
    CLOSE_BRACKET   reduce using rule 92 (primary-no-array-creation-expression -> element-access .)
    COMMA           reduce using rule 92 (primary-no-array-creation-expression -> element-access .)
    CLOSE_PAREN     reduce using rule 92 (primary-no-array-creation-expression -> element-access .)
    COLON           reduce using rule 92 (primary-no-array-creation-expression -> element-access .)
    BLOCK_END       reduce using rule 92 (primary-no-array-creation-expression -> element-access .)


state 159

    (88) primary-no-array-creation-expression -> IDENTIFIER .
    (94) member-access -> IDENTIFIER . DOT IDENTIFIER
    (96) invocation-expression -> IDENTIFIER . OPEN_PAREN argument-list-opt CLOSE_PAREN
    (100) element-access -> IDENTIFIER . OPEN_BRACKET expression CLOSE_BRACKET

    TIMES           reduce using rule 88 (primary-no-array-creation-expression -> IDENTIFIER .)
    DIV             reduce using rule 88 (primary-no-array-creation-expression -> IDENTIFIER .)
    MOD             reduce using rule 88 (primary-no-array-creation-expression -> IDENTIFIER .)
    PLUS            reduce using rule 88 (primary-no-array-creation-expression -> IDENTIFIER .)
    MINUS           reduce using rule 88 (primary-no-array-creation-expression -> IDENTIFIER .)
    LSHIFT          reduce using rule 88 (primary-no-array-creation-expression -> IDENTIFIER .)
    RSHIFT          reduce using rule 88 (primary-no-array-creation-expression -> IDENTIFIER .)
    LT              reduce using rule 88 (primary-no-array-creation-expression -> IDENTIFIER .)
    GT              reduce using rule 88 (primary-no-array-creation-expression -> IDENTIFIER .)
    LE              reduce using rule 88 (primary-no-array-creation-expression -> IDENTIFIER .)
    GE              reduce using rule 88 (primary-no-array-creation-expression -> IDENTIFIER .)
    EQ              reduce using rule 88 (primary-no-array-creation-expression -> IDENTIFIER .)
    NE              reduce using rule 88 (primary-no-array-creation-expression -> IDENTIFIER .)
    BITAND          reduce using rule 88 (primary-no-array-creation-expression -> IDENTIFIER .)
    BITXOR          reduce using rule 88 (primary-no-array-creation-expression -> IDENTIFIER .)
    BITOR           reduce using rule 88 (primary-no-array-creation-expression -> IDENTIFIER .)
    LOGAND          reduce using rule 88 (primary-no-array-creation-expression -> IDENTIFIER .)
    CONDOP          reduce using rule 88 (primary-no-array-creation-expression -> IDENTIFIER .)
    LOGOR           reduce using rule 88 (primary-no-array-creation-expression -> IDENTIFIER .)
    DELIM           reduce using rule 88 (primary-no-array-creation-expression -> IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 88 (primary-no-array-creation-expression -> IDENTIFIER .)
    COMMA           reduce using rule 88 (primary-no-array-creation-expression -> IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 88 (primary-no-array-creation-expression -> IDENTIFIER .)
    COLON           reduce using rule 88 (primary-no-array-creation-expression -> IDENTIFIER .)
    BLOCK_END       reduce using rule 88 (primary-no-array-creation-expression -> IDENTIFIER .)
    DOT             shift and go to state 114
    OPEN_PAREN      shift and go to state 112
    OPEN_BRACKET    shift and go to state 111


state 160

    (47) inclusive-or-expression -> inclusive-or-expression BITOR . exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . array-creation-expression
    (76) primary-expression -> . primary-no-array-creation-expression
    (77) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (87) primary-no-array-creation-expression -> . literal
    (88) primary-no-array-creation-expression -> . IDENTIFIER
    (89) primary-no-array-creation-expression -> . parenthesized-expression
    (90) primary-no-array-creation-expression -> . member-access
    (91) primary-no-array-creation-expression -> . invocation-expression
    (92) primary-no-array-creation-expression -> . element-access
    (219) literal -> . ICONST
    (220) literal -> . DCONST
    (221) literal -> . TRUE
    (222) literal -> . FALSE
    (93) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (94) member-access -> . IDENTIFIER DOT IDENTIFIER
    (95) member-access -> . member-access DOT IDENTIFIER
    (96) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (97) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (100) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (101) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    PLUS            shift and go to state 80
    MINUS           shift and go to state 73
    BITNOT          shift and go to state 96
    BITCOMP         shift and go to state 75
    NEW             shift and go to state 71
    IDENTIFIER      shift and go to state 159
    ICONST          shift and go to state 86
    DCONST          shift and go to state 97
    TRUE            shift and go to state 91
    FALSE           shift and go to state 89
    OPEN_PAREN      shift and go to state 77

    array-creation-expression      shift and go to state 70
    and-expression                 shift and go to state 93
    element-access                 shift and go to state 158
    additive-expression            shift and go to state 72
    exclusive-or-expression        shift and go to state 218
    unary-expression               shift and go to state 87
    relational-expression          shift and go to state 69
    multiplicative-expression      shift and go to state 94
    literal                        shift and go to state 84
    primary-no-array-creation-expression shift and go to state 85
    primary-expression             shift and go to state 98
    invocation-expression          shift and go to state 99
    equality-expression            shift and go to state 90
    parenthesized-expression       shift and go to state 101
    member-access                  shift and go to state 156
    shift-expression               shift and go to state 92

state 161

    (74) unary-expression -> BITCOMP unary-expression .

    TIMES           reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    DIV             reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    MOD             reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    PLUS            reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    MINUS           reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    LSHIFT          reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    RSHIFT          reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    LT              reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    GT              reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    LE              reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    GE              reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    EQ              reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    NE              reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    BITAND          reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    BITXOR          reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    BITOR           reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    LOGAND          reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    CONDOP          reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    LOGOR           reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    COMMA           reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    CLOSE_PAREN     reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    BLOCK_END       reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    DELIM           reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    CLOSE_BRACKET   reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    COLON           reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)


state 162

    (93) parenthesized-expression -> OPEN_PAREN expression . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 219


state 163

    (45) conditional-and-expression -> conditional-and-expression LOGAND . inclusive-or-expression
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . array-creation-expression
    (76) primary-expression -> . primary-no-array-creation-expression
    (77) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (87) primary-no-array-creation-expression -> . literal
    (88) primary-no-array-creation-expression -> . IDENTIFIER
    (89) primary-no-array-creation-expression -> . parenthesized-expression
    (90) primary-no-array-creation-expression -> . member-access
    (91) primary-no-array-creation-expression -> . invocation-expression
    (92) primary-no-array-creation-expression -> . element-access
    (219) literal -> . ICONST
    (220) literal -> . DCONST
    (221) literal -> . TRUE
    (222) literal -> . FALSE
    (93) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (94) member-access -> . IDENTIFIER DOT IDENTIFIER
    (95) member-access -> . member-access DOT IDENTIFIER
    (96) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (97) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (100) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (101) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    PLUS            shift and go to state 80
    MINUS           shift and go to state 73
    BITNOT          shift and go to state 96
    BITCOMP         shift and go to state 75
    NEW             shift and go to state 71
    IDENTIFIER      shift and go to state 159
    ICONST          shift and go to state 86
    DCONST          shift and go to state 97
    TRUE            shift and go to state 91
    FALSE           shift and go to state 89
    OPEN_PAREN      shift and go to state 77

    exclusive-or-expression        shift and go to state 67
    member-access                  shift and go to state 156
    relational-expression          shift and go to state 69
    additive-expression            shift and go to state 72
    primary-no-array-creation-expression shift and go to state 85
    inclusive-or-expression        shift and go to state 220
    unary-expression               shift and go to state 87
    element-access                 shift and go to state 158
    literal                        shift and go to state 84
    array-creation-expression      shift and go to state 70
    equality-expression            shift and go to state 90
    shift-expression               shift and go to state 92
    and-expression                 shift and go to state 93
    multiplicative-expression      shift and go to state 94
    primary-expression             shift and go to state 98
    invocation-expression          shift and go to state 99
    parenthesized-expression       shift and go to state 101

state 164

    (71) unary-expression -> PLUS unary-expression .

    TIMES           reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    DIV             reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    MOD             reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    PLUS            reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    MINUS           reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    LSHIFT          reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    RSHIFT          reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    LT              reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    GT              reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    LE              reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    GE              reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    EQ              reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    NE              reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    BITAND          reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    BITXOR          reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    BITOR           reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    LOGAND          reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    CONDOP          reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    LOGOR           reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    COMMA           reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    CLOSE_PAREN     reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    BLOCK_END       reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    DELIM           reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    CLOSE_BRACKET   reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    COLON           reduce using rule 71 (unary-expression -> PLUS unary-expression .)


state 165

    (209) return-statement -> RETURN expression-opt DELIM .

    IDENTIFIER      reduce using rule 209 (return-statement -> RETURN expression-opt DELIM .)
    BLOCK_BEGIN     reduce using rule 209 (return-statement -> RETURN expression-opt DELIM .)
    DELIM           reduce using rule 209 (return-statement -> RETURN expression-opt DELIM .)
    CONSOLE         reduce using rule 209 (return-statement -> RETURN expression-opt DELIM .)
    CONST           reduce using rule 209 (return-statement -> RETURN expression-opt DELIM .)
    IF              reduce using rule 209 (return-statement -> RETURN expression-opt DELIM .)
    SWITCH          reduce using rule 209 (return-statement -> RETURN expression-opt DELIM .)
    WHILE           reduce using rule 209 (return-statement -> RETURN expression-opt DELIM .)
    FOR             reduce using rule 209 (return-statement -> RETURN expression-opt DELIM .)
    DO              reduce using rule 209 (return-statement -> RETURN expression-opt DELIM .)
    BREAK           reduce using rule 209 (return-statement -> RETURN expression-opt DELIM .)
    CONTINUE        reduce using rule 209 (return-statement -> RETURN expression-opt DELIM .)
    GOTO            reduce using rule 209 (return-statement -> RETURN expression-opt DELIM .)
    RETURN          reduce using rule 209 (return-statement -> RETURN expression-opt DELIM .)
    BOOL            reduce using rule 209 (return-statement -> RETURN expression-opt DELIM .)
    INT             reduce using rule 209 (return-statement -> RETURN expression-opt DELIM .)
    UINT            reduce using rule 209 (return-statement -> RETURN expression-opt DELIM .)
    CHAR            reduce using rule 209 (return-statement -> RETURN expression-opt DELIM .)
    DOUBLE          reduce using rule 209 (return-statement -> RETURN expression-opt DELIM .)
    CASE            reduce using rule 209 (return-statement -> RETURN expression-opt DELIM .)
    DEFAULT         reduce using rule 209 (return-statement -> RETURN expression-opt DELIM .)
    BLOCK_END       reduce using rule 209 (return-statement -> RETURN expression-opt DELIM .)
    $end            reduce using rule 209 (return-statement -> RETURN expression-opt DELIM .)


state 166

    (53) equality-expression -> equality-expression EQ . relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . array-creation-expression
    (76) primary-expression -> . primary-no-array-creation-expression
    (77) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (87) primary-no-array-creation-expression -> . literal
    (88) primary-no-array-creation-expression -> . IDENTIFIER
    (89) primary-no-array-creation-expression -> . parenthesized-expression
    (90) primary-no-array-creation-expression -> . member-access
    (91) primary-no-array-creation-expression -> . invocation-expression
    (92) primary-no-array-creation-expression -> . element-access
    (219) literal -> . ICONST
    (220) literal -> . DCONST
    (221) literal -> . TRUE
    (222) literal -> . FALSE
    (93) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (94) member-access -> . IDENTIFIER DOT IDENTIFIER
    (95) member-access -> . member-access DOT IDENTIFIER
    (96) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (97) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (100) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (101) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    PLUS            shift and go to state 80
    MINUS           shift and go to state 73
    BITNOT          shift and go to state 96
    BITCOMP         shift and go to state 75
    NEW             shift and go to state 71
    IDENTIFIER      shift and go to state 159
    ICONST          shift and go to state 86
    DCONST          shift and go to state 97
    TRUE            shift and go to state 91
    FALSE           shift and go to state 89
    OPEN_PAREN      shift and go to state 77

    array-creation-expression      shift and go to state 70
    multiplicative-expression      shift and go to state 94
    unary-expression               shift and go to state 87
    relational-expression          shift and go to state 221
    element-access                 shift and go to state 158
    literal                        shift and go to state 84
    primary-no-array-creation-expression shift and go to state 85
    primary-expression             shift and go to state 98
    invocation-expression          shift and go to state 99
    additive-expression            shift and go to state 72
    parenthesized-expression       shift and go to state 101
    member-access                  shift and go to state 156
    shift-expression               shift and go to state 92

state 167

    (54) equality-expression -> equality-expression NE . relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . array-creation-expression
    (76) primary-expression -> . primary-no-array-creation-expression
    (77) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (87) primary-no-array-creation-expression -> . literal
    (88) primary-no-array-creation-expression -> . IDENTIFIER
    (89) primary-no-array-creation-expression -> . parenthesized-expression
    (90) primary-no-array-creation-expression -> . member-access
    (91) primary-no-array-creation-expression -> . invocation-expression
    (92) primary-no-array-creation-expression -> . element-access
    (219) literal -> . ICONST
    (220) literal -> . DCONST
    (221) literal -> . TRUE
    (222) literal -> . FALSE
    (93) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (94) member-access -> . IDENTIFIER DOT IDENTIFIER
    (95) member-access -> . member-access DOT IDENTIFIER
    (96) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (97) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (100) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (101) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    PLUS            shift and go to state 80
    MINUS           shift and go to state 73
    BITNOT          shift and go to state 96
    BITCOMP         shift and go to state 75
    NEW             shift and go to state 71
    IDENTIFIER      shift and go to state 159
    ICONST          shift and go to state 86
    DCONST          shift and go to state 97
    TRUE            shift and go to state 91
    FALSE           shift and go to state 89
    OPEN_PAREN      shift and go to state 77

    array-creation-expression      shift and go to state 70
    multiplicative-expression      shift and go to state 94
    unary-expression               shift and go to state 87
    relational-expression          shift and go to state 222
    element-access                 shift and go to state 158
    literal                        shift and go to state 84
    primary-no-array-creation-expression shift and go to state 85
    primary-expression             shift and go to state 98
    invocation-expression          shift and go to state 99
    additive-expression            shift and go to state 72
    parenthesized-expression       shift and go to state 101
    member-access                  shift and go to state 156
    shift-expression               shift and go to state 92

state 168

    (62) shift-expression -> shift-expression RSHIFT . additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . array-creation-expression
    (76) primary-expression -> . primary-no-array-creation-expression
    (77) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (87) primary-no-array-creation-expression -> . literal
    (88) primary-no-array-creation-expression -> . IDENTIFIER
    (89) primary-no-array-creation-expression -> . parenthesized-expression
    (90) primary-no-array-creation-expression -> . member-access
    (91) primary-no-array-creation-expression -> . invocation-expression
    (92) primary-no-array-creation-expression -> . element-access
    (219) literal -> . ICONST
    (220) literal -> . DCONST
    (221) literal -> . TRUE
    (222) literal -> . FALSE
    (93) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (94) member-access -> . IDENTIFIER DOT IDENTIFIER
    (95) member-access -> . member-access DOT IDENTIFIER
    (96) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (97) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (100) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (101) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    PLUS            shift and go to state 80
    MINUS           shift and go to state 73
    BITNOT          shift and go to state 96
    BITCOMP         shift and go to state 75
    NEW             shift and go to state 71
    IDENTIFIER      shift and go to state 159
    ICONST          shift and go to state 86
    DCONST          shift and go to state 97
    TRUE            shift and go to state 91
    FALSE           shift and go to state 89
    OPEN_PAREN      shift and go to state 77

    array-creation-expression      shift and go to state 70
    multiplicative-expression      shift and go to state 94
    member-access                  shift and go to state 156
    unary-expression               shift and go to state 87
    element-access                 shift and go to state 158
    literal                        shift and go to state 84
    primary-no-array-creation-expression shift and go to state 85
    primary-expression             shift and go to state 98
    invocation-expression          shift and go to state 99
    additive-expression            shift and go to state 223
    parenthesized-expression       shift and go to state 101

state 169

    (61) shift-expression -> shift-expression LSHIFT . additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . array-creation-expression
    (76) primary-expression -> . primary-no-array-creation-expression
    (77) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (87) primary-no-array-creation-expression -> . literal
    (88) primary-no-array-creation-expression -> . IDENTIFIER
    (89) primary-no-array-creation-expression -> . parenthesized-expression
    (90) primary-no-array-creation-expression -> . member-access
    (91) primary-no-array-creation-expression -> . invocation-expression
    (92) primary-no-array-creation-expression -> . element-access
    (219) literal -> . ICONST
    (220) literal -> . DCONST
    (221) literal -> . TRUE
    (222) literal -> . FALSE
    (93) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (94) member-access -> . IDENTIFIER DOT IDENTIFIER
    (95) member-access -> . member-access DOT IDENTIFIER
    (96) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (97) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (100) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (101) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    PLUS            shift and go to state 80
    MINUS           shift and go to state 73
    BITNOT          shift and go to state 96
    BITCOMP         shift and go to state 75
    NEW             shift and go to state 71
    IDENTIFIER      shift and go to state 159
    ICONST          shift and go to state 86
    DCONST          shift and go to state 97
    TRUE            shift and go to state 91
    FALSE           shift and go to state 89
    OPEN_PAREN      shift and go to state 77

    array-creation-expression      shift and go to state 70
    multiplicative-expression      shift and go to state 94
    member-access                  shift and go to state 156
    unary-expression               shift and go to state 87
    element-access                 shift and go to state 158
    literal                        shift and go to state 84
    primary-no-array-creation-expression shift and go to state 85
    primary-expression             shift and go to state 98
    invocation-expression          shift and go to state 99
    additive-expression            shift and go to state 224
    parenthesized-expression       shift and go to state 101

state 170

    (51) and-expression -> and-expression BITAND . equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . array-creation-expression
    (76) primary-expression -> . primary-no-array-creation-expression
    (77) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (87) primary-no-array-creation-expression -> . literal
    (88) primary-no-array-creation-expression -> . IDENTIFIER
    (89) primary-no-array-creation-expression -> . parenthesized-expression
    (90) primary-no-array-creation-expression -> . member-access
    (91) primary-no-array-creation-expression -> . invocation-expression
    (92) primary-no-array-creation-expression -> . element-access
    (219) literal -> . ICONST
    (220) literal -> . DCONST
    (221) literal -> . TRUE
    (222) literal -> . FALSE
    (93) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (94) member-access -> . IDENTIFIER DOT IDENTIFIER
    (95) member-access -> . member-access DOT IDENTIFIER
    (96) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (97) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (100) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (101) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    PLUS            shift and go to state 80
    MINUS           shift and go to state 73
    BITNOT          shift and go to state 96
    BITCOMP         shift and go to state 75
    NEW             shift and go to state 71
    IDENTIFIER      shift and go to state 159
    ICONST          shift and go to state 86
    DCONST          shift and go to state 97
    TRUE            shift and go to state 91
    FALSE           shift and go to state 89
    OPEN_PAREN      shift and go to state 77

    array-creation-expression      shift and go to state 70
    multiplicative-expression      shift and go to state 94
    additive-expression            shift and go to state 72
    unary-expression               shift and go to state 87
    relational-expression          shift and go to state 69
    element-access                 shift and go to state 158
    literal                        shift and go to state 84
    primary-no-array-creation-expression shift and go to state 85
    primary-expression             shift and go to state 98
    invocation-expression          shift and go to state 99
    equality-expression            shift and go to state 225
    parenthesized-expression       shift and go to state 101
    member-access                  shift and go to state 156
    shift-expression               shift and go to state 92

state 171

    (68) multiplicative-expression -> multiplicative-expression DIV . unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . array-creation-expression
    (76) primary-expression -> . primary-no-array-creation-expression
    (77) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (87) primary-no-array-creation-expression -> . literal
    (88) primary-no-array-creation-expression -> . IDENTIFIER
    (89) primary-no-array-creation-expression -> . parenthesized-expression
    (90) primary-no-array-creation-expression -> . member-access
    (91) primary-no-array-creation-expression -> . invocation-expression
    (92) primary-no-array-creation-expression -> . element-access
    (219) literal -> . ICONST
    (220) literal -> . DCONST
    (221) literal -> . TRUE
    (222) literal -> . FALSE
    (93) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (94) member-access -> . IDENTIFIER DOT IDENTIFIER
    (95) member-access -> . member-access DOT IDENTIFIER
    (96) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (97) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (100) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (101) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    PLUS            shift and go to state 80
    MINUS           shift and go to state 73
    BITNOT          shift and go to state 96
    BITCOMP         shift and go to state 75
    NEW             shift and go to state 71
    IDENTIFIER      shift and go to state 159
    ICONST          shift and go to state 86
    DCONST          shift and go to state 97
    TRUE            shift and go to state 91
    FALSE           shift and go to state 89
    OPEN_PAREN      shift and go to state 77

    primary-no-array-creation-expression shift and go to state 85
    member-access                  shift and go to state 156
    unary-expression               shift and go to state 226
    element-access                 shift and go to state 158
    literal                        shift and go to state 84
    array-creation-expression      shift and go to state 70
    primary-expression             shift and go to state 98
    invocation-expression          shift and go to state 99
    parenthesized-expression       shift and go to state 101

state 172

    (69) multiplicative-expression -> multiplicative-expression MOD . unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . array-creation-expression
    (76) primary-expression -> . primary-no-array-creation-expression
    (77) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (87) primary-no-array-creation-expression -> . literal
    (88) primary-no-array-creation-expression -> . IDENTIFIER
    (89) primary-no-array-creation-expression -> . parenthesized-expression
    (90) primary-no-array-creation-expression -> . member-access
    (91) primary-no-array-creation-expression -> . invocation-expression
    (92) primary-no-array-creation-expression -> . element-access
    (219) literal -> . ICONST
    (220) literal -> . DCONST
    (221) literal -> . TRUE
    (222) literal -> . FALSE
    (93) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (94) member-access -> . IDENTIFIER DOT IDENTIFIER
    (95) member-access -> . member-access DOT IDENTIFIER
    (96) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (97) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (100) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (101) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    PLUS            shift and go to state 80
    MINUS           shift and go to state 73
    BITNOT          shift and go to state 96
    BITCOMP         shift and go to state 75
    NEW             shift and go to state 71
    IDENTIFIER      shift and go to state 159
    ICONST          shift and go to state 86
    DCONST          shift and go to state 97
    TRUE            shift and go to state 91
    FALSE           shift and go to state 89
    OPEN_PAREN      shift and go to state 77

    primary-no-array-creation-expression shift and go to state 85
    member-access                  shift and go to state 156
    unary-expression               shift and go to state 227
    element-access                 shift and go to state 158
    literal                        shift and go to state 84
    array-creation-expression      shift and go to state 70
    primary-expression             shift and go to state 98
    invocation-expression          shift and go to state 99
    parenthesized-expression       shift and go to state 101

state 173

    (67) multiplicative-expression -> multiplicative-expression TIMES . unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . array-creation-expression
    (76) primary-expression -> . primary-no-array-creation-expression
    (77) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (87) primary-no-array-creation-expression -> . literal
    (88) primary-no-array-creation-expression -> . IDENTIFIER
    (89) primary-no-array-creation-expression -> . parenthesized-expression
    (90) primary-no-array-creation-expression -> . member-access
    (91) primary-no-array-creation-expression -> . invocation-expression
    (92) primary-no-array-creation-expression -> . element-access
    (219) literal -> . ICONST
    (220) literal -> . DCONST
    (221) literal -> . TRUE
    (222) literal -> . FALSE
    (93) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (94) member-access -> . IDENTIFIER DOT IDENTIFIER
    (95) member-access -> . member-access DOT IDENTIFIER
    (96) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (97) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (100) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (101) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    PLUS            shift and go to state 80
    MINUS           shift and go to state 73
    BITNOT          shift and go to state 96
    BITCOMP         shift and go to state 75
    NEW             shift and go to state 71
    IDENTIFIER      shift and go to state 159
    ICONST          shift and go to state 86
    DCONST          shift and go to state 97
    TRUE            shift and go to state 91
    FALSE           shift and go to state 89
    OPEN_PAREN      shift and go to state 77

    primary-no-array-creation-expression shift and go to state 85
    member-access                  shift and go to state 156
    unary-expression               shift and go to state 228
    element-access                 shift and go to state 158
    literal                        shift and go to state 84
    array-creation-expression      shift and go to state 70
    primary-expression             shift and go to state 98
    invocation-expression          shift and go to state 99
    parenthesized-expression       shift and go to state 101

state 174

    (73) unary-expression -> BITNOT unary-expression .

    TIMES           reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    DIV             reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    MOD             reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    PLUS            reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    MINUS           reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    LSHIFT          reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    RSHIFT          reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    LT              reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    GT              reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    LE              reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    GE              reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    EQ              reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    NE              reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    BITAND          reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    BITXOR          reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    BITOR           reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    LOGAND          reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    CONDOP          reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    LOGOR           reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    COMMA           reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    CLOSE_PAREN     reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    BLOCK_END       reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    DELIM           reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    CLOSE_BRACKET   reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    COLON           reduce using rule 73 (unary-expression -> BITNOT unary-expression .)


state 175

    (43) conditional-or-expression -> conditional-or-expression LOGOR . conditional-and-expression
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . array-creation-expression
    (76) primary-expression -> . primary-no-array-creation-expression
    (77) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (87) primary-no-array-creation-expression -> . literal
    (88) primary-no-array-creation-expression -> . IDENTIFIER
    (89) primary-no-array-creation-expression -> . parenthesized-expression
    (90) primary-no-array-creation-expression -> . member-access
    (91) primary-no-array-creation-expression -> . invocation-expression
    (92) primary-no-array-creation-expression -> . element-access
    (219) literal -> . ICONST
    (220) literal -> . DCONST
    (221) literal -> . TRUE
    (222) literal -> . FALSE
    (93) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (94) member-access -> . IDENTIFIER DOT IDENTIFIER
    (95) member-access -> . member-access DOT IDENTIFIER
    (96) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (97) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (100) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (101) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    PLUS            shift and go to state 80
    MINUS           shift and go to state 73
    BITNOT          shift and go to state 96
    BITCOMP         shift and go to state 75
    NEW             shift and go to state 71
    IDENTIFIER      shift and go to state 159
    ICONST          shift and go to state 86
    DCONST          shift and go to state 97
    TRUE            shift and go to state 91
    FALSE           shift and go to state 89
    OPEN_PAREN      shift and go to state 77

    exclusive-or-expression        shift and go to state 67
    member-access                  shift and go to state 156
    relational-expression          shift and go to state 69
    additive-expression            shift and go to state 72
    primary-no-array-creation-expression shift and go to state 85
    inclusive-or-expression        shift and go to state 74
    unary-expression               shift and go to state 87
    element-access                 shift and go to state 158
    literal                        shift and go to state 84
    array-creation-expression      shift and go to state 70
    conditional-and-expression     shift and go to state 229
    equality-expression            shift and go to state 90
    shift-expression               shift and go to state 92
    and-expression                 shift and go to state 93
    multiplicative-expression      shift and go to state 94
    primary-expression             shift and go to state 98
    invocation-expression          shift and go to state 99
    parenthesized-expression       shift and go to state 101

state 176

    (41) conditional-expression -> conditional-or-expression CONDOP . expression COLON expression
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (105) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (102) prim-expression -> . IDENTIFIER
    (103) prim-expression -> . member-access
    (104) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (94) member-access -> . IDENTIFIER DOT IDENTIFIER
    (95) member-access -> . member-access DOT IDENTIFIER
    (100) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (101) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . array-creation-expression
    (76) primary-expression -> . primary-no-array-creation-expression
    (77) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (87) primary-no-array-creation-expression -> . literal
    (88) primary-no-array-creation-expression -> . IDENTIFIER
    (89) primary-no-array-creation-expression -> . parenthesized-expression
    (90) primary-no-array-creation-expression -> . member-access
    (91) primary-no-array-creation-expression -> . invocation-expression
    (92) primary-no-array-creation-expression -> . element-access
    (219) literal -> . ICONST
    (220) literal -> . DCONST
    (221) literal -> . TRUE
    (222) literal -> . FALSE
    (93) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (96) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (97) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 81
    PLUS            shift and go to state 80
    MINUS           shift and go to state 73
    BITNOT          shift and go to state 96
    BITCOMP         shift and go to state 75
    NEW             shift and go to state 71
    ICONST          shift and go to state 86
    DCONST          shift and go to state 97
    TRUE            shift and go to state 91
    FALSE           shift and go to state 89
    OPEN_PAREN      shift and go to state 77

    unary-expression               shift and go to state 87
    exclusive-or-expression        shift and go to state 67
    member-access                  shift and go to state 68
    relational-expression          shift and go to state 69
    additive-expression            shift and go to state 72
    primary-no-array-creation-expression shift and go to state 85
    inclusive-or-expression        shift and go to state 74
    prim-expression                shift and go to state 50
    element-access                 shift and go to state 76
    literal                        shift and go to state 84
    conditional-expression         shift and go to state 78
    conditional-and-expression     shift and go to state 79
    array-creation-expression      shift and go to state 70
    assignment                     shift and go to state 83
    equality-expression            shift and go to state 90
    shift-expression               shift and go to state 92
    and-expression                 shift and go to state 93
    multiplicative-expression      shift and go to state 94
    expression                     shift and go to state 230
    primary-expression             shift and go to state 98
    invocation-expression          shift and go to state 99
    conditional-or-expression      shift and go to state 100
    parenthesized-expression       shift and go to state 101

state 177

    (34) array-type -> simple-type OPEN_BRACKET ICONST . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 231


state 178

    (193) for-initializer-opt -> for-initializer .

    DELIM           reduce using rule 193 (for-initializer-opt -> for-initializer .)


state 179

    (200) statement-expression-list -> statement-expression .

    COMMA           reduce using rule 200 (statement-expression-list -> statement-expression .)
    CLOSE_PAREN     reduce using rule 200 (statement-expression-list -> statement-expression .)
    DELIM           reduce using rule 200 (statement-expression-list -> statement-expression .)


state 180

    (195) for-initializer -> statement-expression-list .
    (201) statement-expression-list -> statement-expression-list . COMMA statement-expression

    DELIM           reduce using rule 195 (for-initializer -> statement-expression-list .)
    COMMA           shift and go to state 232


state 181

    (96) invocation-expression -> IDENTIFIER . OPEN_PAREN argument-list-opt CLOSE_PAREN
    (94) member-access -> IDENTIFIER . DOT IDENTIFIER
    (102) prim-expression -> IDENTIFIER .
    (100) element-access -> IDENTIFIER . OPEN_BRACKET expression CLOSE_BRACKET

    OPEN_PAREN      shift and go to state 112
    DOT             shift and go to state 114
    ASSIGN          reduce using rule 102 (prim-expression -> IDENTIFIER .)
    PLUSEQUAL       reduce using rule 102 (prim-expression -> IDENTIFIER .)
    MINUSEQUAL      reduce using rule 102 (prim-expression -> IDENTIFIER .)
    TIMESEQUAL      reduce using rule 102 (prim-expression -> IDENTIFIER .)
    DIVEQUAL        reduce using rule 102 (prim-expression -> IDENTIFIER .)
    MODEQUAL        reduce using rule 102 (prim-expression -> IDENTIFIER .)
    BITANDEQUAL     reduce using rule 102 (prim-expression -> IDENTIFIER .)
    BITOREQUAL      reduce using rule 102 (prim-expression -> IDENTIFIER .)
    BITXOREQUAL     reduce using rule 102 (prim-expression -> IDENTIFIER .)
    LSHIFTEQUAL     reduce using rule 102 (prim-expression -> IDENTIFIER .)
    RSHIFTEQUAL     reduce using rule 102 (prim-expression -> IDENTIFIER .)
    OPEN_BRACKET    shift and go to state 111


state 182

    (194) for-initializer-opt -> empty .

    DELIM           reduce using rule 194 (for-initializer-opt -> empty .)


state 183

    (192) for-statement -> FOR OPEN_PAREN for-initializer-opt . DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block

    DELIM           shift and go to state 233


state 184

    (189) while-statement -> WHILE M_quad OPEN_PAREN . expression CLOSE_PAREN M_while block
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (105) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (102) prim-expression -> . IDENTIFIER
    (103) prim-expression -> . member-access
    (104) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (94) member-access -> . IDENTIFIER DOT IDENTIFIER
    (95) member-access -> . member-access DOT IDENTIFIER
    (100) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (101) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . array-creation-expression
    (76) primary-expression -> . primary-no-array-creation-expression
    (77) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (87) primary-no-array-creation-expression -> . literal
    (88) primary-no-array-creation-expression -> . IDENTIFIER
    (89) primary-no-array-creation-expression -> . parenthesized-expression
    (90) primary-no-array-creation-expression -> . member-access
    (91) primary-no-array-creation-expression -> . invocation-expression
    (92) primary-no-array-creation-expression -> . element-access
    (219) literal -> . ICONST
    (220) literal -> . DCONST
    (221) literal -> . TRUE
    (222) literal -> . FALSE
    (93) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (96) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (97) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 81
    PLUS            shift and go to state 80
    MINUS           shift and go to state 73
    BITNOT          shift and go to state 96
    BITCOMP         shift and go to state 75
    NEW             shift and go to state 71
    ICONST          shift and go to state 86
    DCONST          shift and go to state 97
    TRUE            shift and go to state 91
    FALSE           shift and go to state 89
    OPEN_PAREN      shift and go to state 77

    unary-expression               shift and go to state 87
    exclusive-or-expression        shift and go to state 67
    member-access                  shift and go to state 68
    relational-expression          shift and go to state 69
    additive-expression            shift and go to state 72
    primary-no-array-creation-expression shift and go to state 85
    inclusive-or-expression        shift and go to state 74
    prim-expression                shift and go to state 50
    element-access                 shift and go to state 76
    literal                        shift and go to state 84
    conditional-expression         shift and go to state 78
    conditional-and-expression     shift and go to state 79
    array-creation-expression      shift and go to state 70
    assignment                     shift and go to state 83
    equality-expression            shift and go to state 90
    shift-expression               shift and go to state 92
    and-expression                 shift and go to state 93
    multiplicative-expression      shift and go to state 94
    expression                     shift and go to state 234
    primary-expression             shift and go to state 98
    invocation-expression          shift and go to state 99
    conditional-or-expression      shift and go to state 100
    parenthesized-expression       shift and go to state 101

state 185

    (175) switch-statement -> SWITCH OPEN_PAREN expression . CLOSE_PAREN switch-block

    CLOSE_PAREN     shift and go to state 235


state 186

    (100) element-access -> IDENTIFIER OPEN_BRACKET expression . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 236


state 187

    (96) invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 237


state 188

    (159) labeled-statement -> IDENTIFIER COLON statement .

    IDENTIFIER      reduce using rule 159 (labeled-statement -> IDENTIFIER COLON statement .)
    BLOCK_BEGIN     reduce using rule 159 (labeled-statement -> IDENTIFIER COLON statement .)
    DELIM           reduce using rule 159 (labeled-statement -> IDENTIFIER COLON statement .)
    CONSOLE         reduce using rule 159 (labeled-statement -> IDENTIFIER COLON statement .)
    CONST           reduce using rule 159 (labeled-statement -> IDENTIFIER COLON statement .)
    IF              reduce using rule 159 (labeled-statement -> IDENTIFIER COLON statement .)
    SWITCH          reduce using rule 159 (labeled-statement -> IDENTIFIER COLON statement .)
    WHILE           reduce using rule 159 (labeled-statement -> IDENTIFIER COLON statement .)
    FOR             reduce using rule 159 (labeled-statement -> IDENTIFIER COLON statement .)
    DO              reduce using rule 159 (labeled-statement -> IDENTIFIER COLON statement .)
    BREAK           reduce using rule 159 (labeled-statement -> IDENTIFIER COLON statement .)
    CONTINUE        reduce using rule 159 (labeled-statement -> IDENTIFIER COLON statement .)
    GOTO            reduce using rule 159 (labeled-statement -> IDENTIFIER COLON statement .)
    RETURN          reduce using rule 159 (labeled-statement -> IDENTIFIER COLON statement .)
    BOOL            reduce using rule 159 (labeled-statement -> IDENTIFIER COLON statement .)
    INT             reduce using rule 159 (labeled-statement -> IDENTIFIER COLON statement .)
    UINT            reduce using rule 159 (labeled-statement -> IDENTIFIER COLON statement .)
    CHAR            reduce using rule 159 (labeled-statement -> IDENTIFIER COLON statement .)
    DOUBLE          reduce using rule 159 (labeled-statement -> IDENTIFIER COLON statement .)
    $end            reduce using rule 159 (labeled-statement -> IDENTIFIER COLON statement .)
    BLOCK_END       reduce using rule 159 (labeled-statement -> IDENTIFIER COLON statement .)
    CASE            reduce using rule 159 (labeled-statement -> IDENTIFIER COLON statement .)
    DEFAULT         reduce using rule 159 (labeled-statement -> IDENTIFIER COLON statement .)


state 189

    (94) member-access -> IDENTIFIER DOT IDENTIFIER .

    DOT             reduce using rule 94 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    OPEN_PAREN      reduce using rule 94 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    OPEN_BRACKET    reduce using rule 94 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    TIMES           reduce using rule 94 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    DIV             reduce using rule 94 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    MOD             reduce using rule 94 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    PLUS            reduce using rule 94 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    MINUS           reduce using rule 94 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    LSHIFT          reduce using rule 94 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    RSHIFT          reduce using rule 94 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    LT              reduce using rule 94 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    GT              reduce using rule 94 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    LE              reduce using rule 94 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    GE              reduce using rule 94 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    EQ              reduce using rule 94 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    NE              reduce using rule 94 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    BITAND          reduce using rule 94 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    BITXOR          reduce using rule 94 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    BITOR           reduce using rule 94 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    LOGAND          reduce using rule 94 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    CONDOP          reduce using rule 94 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    LOGOR           reduce using rule 94 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    DELIM           reduce using rule 94 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 94 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    COMMA           reduce using rule 94 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 94 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    COLON           reduce using rule 94 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    BLOCK_END       reduce using rule 94 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    ASSIGN          reduce using rule 94 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    PLUSEQUAL       reduce using rule 94 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    MINUSEQUAL      reduce using rule 94 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    TIMESEQUAL      reduce using rule 94 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    DIVEQUAL        reduce using rule 94 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    MODEQUAL        reduce using rule 94 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    BITANDEQUAL     reduce using rule 94 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    BITOREQUAL      reduce using rule 94 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    BITXOREQUAL     reduce using rule 94 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    LSHIFTEQUAL     reduce using rule 94 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    RSHIFTEQUAL     reduce using rule 94 (member-access -> IDENTIFIER DOT IDENTIFIER .)


state 190

    (122) variable-declarators -> variable-declarators COMMA . variable-declarator
    (123) variable-declarator -> . IDENTIFIER
    (124) variable-declarator -> . IDENTIFIER ASSIGN variable-initializer

    IDENTIFIER      shift and go to state 117

    variable-declarator            shift and go to state 238

state 191

    (124) variable-declarator -> IDENTIFIER ASSIGN . variable-initializer
    (85) variable-initializer -> . expression
    (86) variable-initializer -> . array-initializer
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (82) array-initializer -> . BLOCK_BEGIN variable-initializer-list-opt BLOCK_END
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (105) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (102) prim-expression -> . IDENTIFIER
    (103) prim-expression -> . member-access
    (104) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (94) member-access -> . IDENTIFIER DOT IDENTIFIER
    (95) member-access -> . member-access DOT IDENTIFIER
    (100) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (101) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . array-creation-expression
    (76) primary-expression -> . primary-no-array-creation-expression
    (77) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (87) primary-no-array-creation-expression -> . literal
    (88) primary-no-array-creation-expression -> . IDENTIFIER
    (89) primary-no-array-creation-expression -> . parenthesized-expression
    (90) primary-no-array-creation-expression -> . member-access
    (91) primary-no-array-creation-expression -> . invocation-expression
    (92) primary-no-array-creation-expression -> . element-access
    (219) literal -> . ICONST
    (220) literal -> . DCONST
    (221) literal -> . TRUE
    (222) literal -> . FALSE
    (93) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (96) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (97) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    BLOCK_BEGIN     shift and go to state 239
    IDENTIFIER      shift and go to state 81
    PLUS            shift and go to state 80
    MINUS           shift and go to state 73
    BITNOT          shift and go to state 96
    BITCOMP         shift and go to state 75
    NEW             shift and go to state 71
    ICONST          shift and go to state 86
    DCONST          shift and go to state 97
    TRUE            shift and go to state 91
    FALSE           shift and go to state 89
    OPEN_PAREN      shift and go to state 77

    unary-expression               shift and go to state 87
    exclusive-or-expression        shift and go to state 67
    member-access                  shift and go to state 68
    relational-expression          shift and go to state 69
    additive-expression            shift and go to state 72
    primary-no-array-creation-expression shift and go to state 85
    array-initializer              shift and go to state 240
    inclusive-or-expression        shift and go to state 74
    prim-expression                shift and go to state 50
    element-access                 shift and go to state 76
    literal                        shift and go to state 84
    conditional-expression         shift and go to state 78
    conditional-and-expression     shift and go to state 79
    array-creation-expression      shift and go to state 70
    assignment                     shift and go to state 83
    variable-initializer           shift and go to state 241
    equality-expression            shift and go to state 90
    shift-expression               shift and go to state 92
    and-expression                 shift and go to state 93
    multiplicative-expression      shift and go to state 94
    expression                     shift and go to state 242
    primary-expression             shift and go to state 98
    invocation-expression          shift and go to state 99
    conditional-or-expression      shift and go to state 100
    parenthesized-expression       shift and go to state 101

state 192

    (191) do-statement -> DO M_quad block . WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM

    WHILE           shift and go to state 243


state 193

    (163) local-constant-declaration -> CONST type constant-declarators .
    (36) constant-declarators -> constant-declarators . COMMA constant-declarator

    DELIM           reduce using rule 163 (local-constant-declaration -> CONST type constant-declarators .)
    COMMA           shift and go to state 244


state 194

    (37) constant-declarator -> IDENTIFIER . ASSIGN expression

    ASSIGN          shift and go to state 245


state 195

    (35) constant-declarators -> constant-declarator .

    DELIM           reduce using rule 35 (constant-declarators -> constant-declarator .)
    COMMA           reduce using rule 35 (constant-declarators -> constant-declarator .)


state 196

    (139) block -> BLOCK_BEGIN M_bstart statement-list-opt . BLOCK_END

    BLOCK_END       shift and go to state 246


state 197

    (142) statement-list-opt -> empty .

    BLOCK_END       reduce using rule 142 (statement-list-opt -> empty .)


state 198

    (141) statement-list-opt -> statement-list .
    (144) statement-list -> statement-list . statement
    (145) statement -> . labeled-statement
    (146) statement -> . declaration-statement
    (147) statement -> . block
    (148) statement -> . empty-statement
    (149) statement -> . expression-statement
    (150) statement -> . selection-statement
    (151) statement -> . iteration-statement
    (152) statement -> . jump-statement
    (153) statement -> . write-statement
    (154) statement -> . read-statement
    (159) labeled-statement -> . IDENTIFIER COLON statement
    (160) declaration-statement -> . local-variable-declaration DELIM
    (161) declaration-statement -> . local-constant-declaration DELIM
    (139) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END
    (164) empty-statement -> . DELIM
    (165) expression-statement -> . statement-expression DELIM
    (168) selection-statement -> . if-statement M_quad
    (169) selection-statement -> . switch-statement
    (186) iteration-statement -> . while-statement M_quad
    (187) iteration-statement -> . for-statement M_quad
    (188) iteration-statement -> . do-statement M_quad
    (202) jump-statement -> . break-statement
    (203) jump-statement -> . continue-statement
    (204) jump-statement -> . goto-statement
    (205) jump-statement -> . return-statement
    (155) write-statement -> . CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM
    (158) read-statement -> . CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM
    (162) local-variable-declaration -> . type variable-declarators
    (163) local-constant-declaration -> . CONST type constant-declarators
    (166) statement-expression -> . invocation-expression
    (167) statement-expression -> . assignment
    (170) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block
    (171) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block
    (175) switch-statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block
    (189) while-statement -> . WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block
    (192) for-statement -> . FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block
    (191) do-statement -> . DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM
    (206) break-statement -> . BREAK DELIM
    (207) continue-statement -> . CONTINUE DELIM
    (208) goto-statement -> . GOTO IDENTIFIER DELIM
    (209) return-statement -> . RETURN expression-opt DELIM
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (96) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (97) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (105) assignment -> . prim-expression assignment-operator expression
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE
    (13) class-type -> . IDENTIFIER
    (34) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET
    (94) member-access -> . IDENTIFIER DOT IDENTIFIER
    (95) member-access -> . member-access DOT IDENTIFIER
    (102) prim-expression -> . IDENTIFIER
    (103) prim-expression -> . member-access
    (104) prim-expression -> . element-access
    (100) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (101) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    BLOCK_END       reduce using rule 141 (statement-list-opt -> statement-list .)
    IDENTIFIER      shift and go to state 36
    BLOCK_BEGIN     shift and go to state 49
    DELIM           shift and go to state 4
    CONSOLE         shift and go to state 53
    CONST           shift and go to state 48
    IF              shift and go to state 57
    SWITCH          shift and go to state 34
    WHILE           shift and go to state 31
    FOR             shift and go to state 21
    DO              shift and go to state 47
    BREAK           shift and go to state 42
    CONTINUE        shift and go to state 27
    GOTO            shift and go to state 7
    RETURN          shift and go to state 14
    BOOL            shift and go to state 43
    INT             shift and go to state 24
    UINT            shift and go to state 56
    CHAR            shift and go to state 30
    DOUBLE          shift and go to state 12

    return-statement               shift and go to state 16
    write-statement                shift and go to state 1
    member-access                  shift and go to state 2
    selection-statement            shift and go to state 29
    empty-statement                shift and go to state 32
    expression-statement           shift and go to state 3
    break-statement                shift and go to state 33
    prim-expression                shift and go to state 50
    element-access                 shift and go to state 18
    statement-expression           shift and go to state 5
    local-constant-declaration     shift and go to state 19
    statement                      shift and go to state 119
    assignment                     shift and go to state 54
    for-statement                  shift and go to state 6
    type                           shift and go to state 37
    read-statement                 shift and go to state 52
    do-statement                   shift and go to state 20
    array-type                     shift and go to state 39
    continue-statement             shift and go to state 22
    invocation-expression          shift and go to state 13
    labeled-statement              shift and go to state 8
    declaration-statement          shift and go to state 40
    switch-statement               shift and go to state 9
    jump-statement                 shift and go to state 10
    iteration-statement            shift and go to state 41
    local-variable-declaration     shift and go to state 23
    goto-statement                 shift and go to state 25
    if-statement                   shift and go to state 26
    class-type                     shift and go to state 58
    while-statement                shift and go to state 45
    simple-type                    shift and go to state 15
    block                          shift and go to state 28

state 199

    (105) assignment -> prim-expression assignment-operator expression .

    DELIM           reduce using rule 105 (assignment -> prim-expression assignment-operator expression .)
    COMMA           reduce using rule 105 (assignment -> prim-expression assignment-operator expression .)
    CLOSE_BRACKET   reduce using rule 105 (assignment -> prim-expression assignment-operator expression .)
    CLOSE_PAREN     reduce using rule 105 (assignment -> prim-expression assignment-operator expression .)
    COLON           reduce using rule 105 (assignment -> prim-expression assignment-operator expression .)
    BLOCK_END       reduce using rule 105 (assignment -> prim-expression assignment-operator expression .)


state 200

    (9) class-declaration -> CLASS IDENTIFIER class-base-opt . class-body semi-opt
    (14) class-body -> . BLOCK_BEGIN class-member-declarations-opt BLOCK_END

    BLOCK_BEGIN     shift and go to state 248

    class-body                     shift and go to state 247

state 201

    (10) class-base-opt -> class-base .

    BLOCK_BEGIN     reduce using rule 10 (class-base-opt -> class-base .)


state 202

    (12) class-base -> COLON . class-type
    (13) class-type -> . IDENTIFIER

    IDENTIFIER      shift and go to state 122

    class-type                     shift and go to state 249

state 203

    (11) class-base-opt -> empty .

    BLOCK_BEGIN     reduce using rule 11 (class-base-opt -> empty .)


state 204

    (155) write-statement -> CONSOLE DOT WRITELINE . OPEN_PAREN print-list CLOSE_PAREN DELIM

    OPEN_PAREN      shift and go to state 250


state 205

    (158) read-statement -> CONSOLE DOT READLINE . OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM

    OPEN_PAREN      shift and go to state 251


state 206

    (170) if-statement -> IF OPEN_PAREN expression . CLOSE_PAREN M_if block
    (171) if-statement -> IF OPEN_PAREN expression . CLOSE_PAREN M_if block ELSE M_else block

    CLOSE_PAREN     shift and go to state 252


state 207

    (101) element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .

    TIMES           reduce using rule 101 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    DIV             reduce using rule 101 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    MOD             reduce using rule 101 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    PLUS            reduce using rule 101 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    MINUS           reduce using rule 101 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    LSHIFT          reduce using rule 101 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    RSHIFT          reduce using rule 101 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    LT              reduce using rule 101 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    GT              reduce using rule 101 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    LE              reduce using rule 101 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    GE              reduce using rule 101 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    EQ              reduce using rule 101 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    NE              reduce using rule 101 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    BITAND          reduce using rule 101 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    BITXOR          reduce using rule 101 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    BITOR           reduce using rule 101 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    LOGAND          reduce using rule 101 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    CONDOP          reduce using rule 101 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    LOGOR           reduce using rule 101 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    DELIM           reduce using rule 101 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 101 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    COMMA           reduce using rule 101 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    CLOSE_PAREN     reduce using rule 101 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    COLON           reduce using rule 101 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    BLOCK_END       reduce using rule 101 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    ASSIGN          reduce using rule 101 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    PLUSEQUAL       reduce using rule 101 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    MINUSEQUAL      reduce using rule 101 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    TIMESEQUAL      reduce using rule 101 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    DIVEQUAL        reduce using rule 101 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    MODEQUAL        reduce using rule 101 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    BITANDEQUAL     reduce using rule 101 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    BITOREQUAL      reduce using rule 101 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    BITXOREQUAL     reduce using rule 101 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    LSHIFTEQUAL     reduce using rule 101 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    RSHIFTEQUAL     reduce using rule 101 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)


state 208

    (97) invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .

    TIMES           reduce using rule 97 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    DIV             reduce using rule 97 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    MOD             reduce using rule 97 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    PLUS            reduce using rule 97 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    MINUS           reduce using rule 97 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LSHIFT          reduce using rule 97 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    RSHIFT          reduce using rule 97 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LT              reduce using rule 97 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    GT              reduce using rule 97 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LE              reduce using rule 97 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    GE              reduce using rule 97 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    EQ              reduce using rule 97 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    NE              reduce using rule 97 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITAND          reduce using rule 97 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITXOR          reduce using rule 97 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITOR           reduce using rule 97 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LOGAND          reduce using rule 97 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    CONDOP          reduce using rule 97 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LOGOR           reduce using rule 97 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    DELIM           reduce using rule 97 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    CLOSE_BRACKET   reduce using rule 97 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    COMMA           reduce using rule 97 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 97 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    COLON           reduce using rule 97 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BLOCK_END       reduce using rule 97 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)


state 209

    (81) expression-list -> expression-list COMMA . expression
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (105) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (102) prim-expression -> . IDENTIFIER
    (103) prim-expression -> . member-access
    (104) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (94) member-access -> . IDENTIFIER DOT IDENTIFIER
    (95) member-access -> . member-access DOT IDENTIFIER
    (100) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (101) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . array-creation-expression
    (76) primary-expression -> . primary-no-array-creation-expression
    (77) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (87) primary-no-array-creation-expression -> . literal
    (88) primary-no-array-creation-expression -> . IDENTIFIER
    (89) primary-no-array-creation-expression -> . parenthesized-expression
    (90) primary-no-array-creation-expression -> . member-access
    (91) primary-no-array-creation-expression -> . invocation-expression
    (92) primary-no-array-creation-expression -> . element-access
    (219) literal -> . ICONST
    (220) literal -> . DCONST
    (221) literal -> . TRUE
    (222) literal -> . FALSE
    (93) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (96) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (97) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 81
    PLUS            shift and go to state 80
    MINUS           shift and go to state 73
    BITNOT          shift and go to state 96
    BITCOMP         shift and go to state 75
    NEW             shift and go to state 71
    ICONST          shift and go to state 86
    DCONST          shift and go to state 97
    TRUE            shift and go to state 91
    FALSE           shift and go to state 89
    OPEN_PAREN      shift and go to state 77

    unary-expression               shift and go to state 87
    exclusive-or-expression        shift and go to state 67
    member-access                  shift and go to state 68
    relational-expression          shift and go to state 69
    additive-expression            shift and go to state 72
    primary-no-array-creation-expression shift and go to state 85
    inclusive-or-expression        shift and go to state 74
    equality-expression            shift and go to state 90
    prim-expression                shift and go to state 50
    element-access                 shift and go to state 76
    literal                        shift and go to state 84
    conditional-expression         shift and go to state 78
    conditional-and-expression     shift and go to state 79
    array-creation-expression      shift and go to state 70
    assignment                     shift and go to state 83
    shift-expression               shift and go to state 92
    and-expression                 shift and go to state 93
    multiplicative-expression      shift and go to state 94
    expression                     shift and go to state 253
    primary-expression             shift and go to state 98
    invocation-expression          shift and go to state 99
    conditional-or-expression      shift and go to state 100
    parenthesized-expression       shift and go to state 101

state 210

    (49) exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .
    (51) and-expression -> and-expression . BITAND equality-expression

    BITXOR          reduce using rule 49 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    BITOR           reduce using rule 49 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    LOGAND          reduce using rule 49 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    CONDOP          reduce using rule 49 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    LOGOR           reduce using rule 49 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    DELIM           reduce using rule 49 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    CLOSE_BRACKET   reduce using rule 49 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    COMMA           reduce using rule 49 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    CLOSE_PAREN     reduce using rule 49 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    COLON           reduce using rule 49 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    BLOCK_END       reduce using rule 49 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    BITAND          shift and go to state 170


state 211

    (58) relational-expression -> relational-expression LE shift-expression .
    (61) shift-expression -> shift-expression . LSHIFT additive-expression
    (62) shift-expression -> shift-expression . RSHIFT additive-expression

    LT              reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    GT              reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    LE              reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    GE              reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    EQ              reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    NE              reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    BITAND          reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    BITXOR          reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    BITOR           reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    LOGAND          reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    CONDOP          reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    LOGOR           reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    COMMA           reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    DELIM           reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    CLOSE_BRACKET   reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    COLON           reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    BLOCK_END       reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    CLOSE_PAREN     reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    LSHIFT          shift and go to state 169
    RSHIFT          shift and go to state 168


state 212

    (59) relational-expression -> relational-expression GE shift-expression .
    (61) shift-expression -> shift-expression . LSHIFT additive-expression
    (62) shift-expression -> shift-expression . RSHIFT additive-expression

    LT              reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    GT              reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    LE              reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    GE              reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    EQ              reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    NE              reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    BITAND          reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    BITXOR          reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    BITOR           reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    LOGAND          reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    CONDOP          reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    LOGOR           reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    COMMA           reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    DELIM           reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    CLOSE_BRACKET   reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    COLON           reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    BLOCK_END       reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    CLOSE_PAREN     reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    LSHIFT          shift and go to state 169
    RSHIFT          shift and go to state 168


state 213

    (56) relational-expression -> relational-expression LT shift-expression .
    (61) shift-expression -> shift-expression . LSHIFT additive-expression
    (62) shift-expression -> shift-expression . RSHIFT additive-expression

    LT              reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    GT              reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    LE              reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    GE              reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    EQ              reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    NE              reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    BITAND          reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    BITXOR          reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    BITOR           reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    LOGAND          reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    CONDOP          reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    LOGOR           reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    COMMA           reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    DELIM           reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    CLOSE_BRACKET   reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    COLON           reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    BLOCK_END       reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    CLOSE_PAREN     reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    LSHIFT          shift and go to state 169
    RSHIFT          shift and go to state 168


state 214

    (57) relational-expression -> relational-expression GT shift-expression .
    (61) shift-expression -> shift-expression . LSHIFT additive-expression
    (62) shift-expression -> shift-expression . RSHIFT additive-expression

    LT              reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    GT              reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    LE              reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    GE              reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    EQ              reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    NE              reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    BITAND          reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    BITXOR          reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    BITOR           reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    LOGAND          reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    CONDOP          reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    LOGOR           reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    COMMA           reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    DELIM           reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    CLOSE_BRACKET   reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    COLON           reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    BLOCK_END       reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    CLOSE_PAREN     reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    LSHIFT          shift and go to state 169
    RSHIFT          shift and go to state 168


state 215

    (77) array-creation-expression -> NEW simple-type OPEN_BRACKET . ICONST CLOSE_BRACKET array-initializer-opt

    ICONST          shift and go to state 254


state 216

    (64) additive-expression -> additive-expression PLUS multiplicative-expression .
    (67) multiplicative-expression -> multiplicative-expression . TIMES unary-expression
    (68) multiplicative-expression -> multiplicative-expression . DIV unary-expression
    (69) multiplicative-expression -> multiplicative-expression . MOD unary-expression

    PLUS            reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    MINUS           reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    LSHIFT          reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    RSHIFT          reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    LT              reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    GT              reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    LE              reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    GE              reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    EQ              reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    NE              reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    BITAND          reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    BITXOR          reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    BITOR           reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    LOGAND          reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    CONDOP          reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    LOGOR           reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    DELIM           reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    CLOSE_BRACKET   reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    COMMA           reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    CLOSE_PAREN     reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    COLON           reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    BLOCK_END       reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    TIMES           shift and go to state 173
    DIV             shift and go to state 171
    MOD             shift and go to state 172


state 217

    (65) additive-expression -> additive-expression MINUS multiplicative-expression .
    (67) multiplicative-expression -> multiplicative-expression . TIMES unary-expression
    (68) multiplicative-expression -> multiplicative-expression . DIV unary-expression
    (69) multiplicative-expression -> multiplicative-expression . MOD unary-expression

    PLUS            reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    MINUS           reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    LSHIFT          reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    RSHIFT          reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    LT              reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    GT              reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    LE              reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    GE              reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    EQ              reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    NE              reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    BITAND          reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    BITXOR          reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    BITOR           reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    LOGAND          reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    CONDOP          reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    LOGOR           reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    DELIM           reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    CLOSE_BRACKET   reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    COMMA           reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    CLOSE_PAREN     reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    COLON           reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    BLOCK_END       reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    TIMES           shift and go to state 173
    DIV             shift and go to state 171
    MOD             shift and go to state 172


state 218

    (47) inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .
    (49) exclusive-or-expression -> exclusive-or-expression . BITXOR and-expression

    BITOR           reduce using rule 47 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    LOGAND          reduce using rule 47 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    CONDOP          reduce using rule 47 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    LOGOR           reduce using rule 47 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    CLOSE_BRACKET   reduce using rule 47 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    DELIM           reduce using rule 47 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    COMMA           reduce using rule 47 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    CLOSE_PAREN     reduce using rule 47 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    COLON           reduce using rule 47 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    BLOCK_END       reduce using rule 47 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    BITXOR          shift and go to state 148


state 219

    (93) parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .

    TIMES           reduce using rule 93 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    DIV             reduce using rule 93 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    MOD             reduce using rule 93 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    PLUS            reduce using rule 93 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    MINUS           reduce using rule 93 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    LSHIFT          reduce using rule 93 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    RSHIFT          reduce using rule 93 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    LT              reduce using rule 93 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    GT              reduce using rule 93 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    LE              reduce using rule 93 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    GE              reduce using rule 93 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    EQ              reduce using rule 93 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    NE              reduce using rule 93 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    BITAND          reduce using rule 93 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    BITXOR          reduce using rule 93 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    BITOR           reduce using rule 93 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    LOGAND          reduce using rule 93 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    CONDOP          reduce using rule 93 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    LOGOR           reduce using rule 93 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    DELIM           reduce using rule 93 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    CLOSE_BRACKET   reduce using rule 93 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    COMMA           reduce using rule 93 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 93 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    COLON           reduce using rule 93 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    BLOCK_END       reduce using rule 93 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)


state 220

    (45) conditional-and-expression -> conditional-and-expression LOGAND inclusive-or-expression .
    (47) inclusive-or-expression -> inclusive-or-expression . BITOR exclusive-or-expression

    LOGAND          reduce using rule 45 (conditional-and-expression -> conditional-and-expression LOGAND inclusive-or-expression .)
    CONDOP          reduce using rule 45 (conditional-and-expression -> conditional-and-expression LOGAND inclusive-or-expression .)
    LOGOR           reduce using rule 45 (conditional-and-expression -> conditional-and-expression LOGAND inclusive-or-expression .)
    DELIM           reduce using rule 45 (conditional-and-expression -> conditional-and-expression LOGAND inclusive-or-expression .)
    CLOSE_BRACKET   reduce using rule 45 (conditional-and-expression -> conditional-and-expression LOGAND inclusive-or-expression .)
    COMMA           reduce using rule 45 (conditional-and-expression -> conditional-and-expression LOGAND inclusive-or-expression .)
    CLOSE_PAREN     reduce using rule 45 (conditional-and-expression -> conditional-and-expression LOGAND inclusive-or-expression .)
    COLON           reduce using rule 45 (conditional-and-expression -> conditional-and-expression LOGAND inclusive-or-expression .)
    BLOCK_END       reduce using rule 45 (conditional-and-expression -> conditional-and-expression LOGAND inclusive-or-expression .)
    BITOR           shift and go to state 160


state 221

    (53) equality-expression -> equality-expression EQ relational-expression .
    (56) relational-expression -> relational-expression . LT shift-expression
    (57) relational-expression -> relational-expression . GT shift-expression
    (58) relational-expression -> relational-expression . LE shift-expression
    (59) relational-expression -> relational-expression . GE shift-expression

    EQ              reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    NE              reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    BITAND          reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    BITXOR          reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    BITOR           reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    LOGAND          reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    CONDOP          reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    LOGOR           reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    COMMA           reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    CLOSE_PAREN     reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    BLOCK_END       reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    DELIM           reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    CLOSE_BRACKET   reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    COLON           reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    LT              shift and go to state 151
    GT              shift and go to state 152
    LE              shift and go to state 149
    GE              shift and go to state 150


state 222

    (54) equality-expression -> equality-expression NE relational-expression .
    (56) relational-expression -> relational-expression . LT shift-expression
    (57) relational-expression -> relational-expression . GT shift-expression
    (58) relational-expression -> relational-expression . LE shift-expression
    (59) relational-expression -> relational-expression . GE shift-expression

    EQ              reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    NE              reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    BITAND          reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    BITXOR          reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    BITOR           reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    LOGAND          reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    CONDOP          reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    LOGOR           reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    COMMA           reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    CLOSE_PAREN     reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    BLOCK_END       reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    DELIM           reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    CLOSE_BRACKET   reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    COLON           reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    LT              shift and go to state 151
    GT              shift and go to state 152
    LE              shift and go to state 149
    GE              shift and go to state 150


state 223

    (62) shift-expression -> shift-expression RSHIFT additive-expression .
    (64) additive-expression -> additive-expression . PLUS multiplicative-expression
    (65) additive-expression -> additive-expression . MINUS multiplicative-expression

    LSHIFT          reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    RSHIFT          reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    LT              reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    GT              reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    LE              reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    GE              reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    EQ              reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    NE              reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    BITAND          reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    BITXOR          reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    BITOR           reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    LOGAND          reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    CONDOP          reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    LOGOR           reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    COMMA           reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    BLOCK_END       reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    DELIM           reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    CLOSE_BRACKET   reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    CLOSE_PAREN     reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    COLON           reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    PLUS            shift and go to state 154
    MINUS           shift and go to state 155


state 224

    (61) shift-expression -> shift-expression LSHIFT additive-expression .
    (64) additive-expression -> additive-expression . PLUS multiplicative-expression
    (65) additive-expression -> additive-expression . MINUS multiplicative-expression

    LSHIFT          reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    RSHIFT          reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    LT              reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    GT              reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    LE              reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    GE              reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    EQ              reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    NE              reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    BITAND          reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    BITXOR          reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    BITOR           reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    LOGAND          reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    CONDOP          reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    LOGOR           reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    COMMA           reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    BLOCK_END       reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    DELIM           reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    CLOSE_BRACKET   reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    CLOSE_PAREN     reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    COLON           reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    PLUS            shift and go to state 154
    MINUS           shift and go to state 155


state 225

    (51) and-expression -> and-expression BITAND equality-expression .
    (53) equality-expression -> equality-expression . EQ relational-expression
    (54) equality-expression -> equality-expression . NE relational-expression

    BITAND          reduce using rule 51 (and-expression -> and-expression BITAND equality-expression .)
    BITXOR          reduce using rule 51 (and-expression -> and-expression BITAND equality-expression .)
    BITOR           reduce using rule 51 (and-expression -> and-expression BITAND equality-expression .)
    LOGAND          reduce using rule 51 (and-expression -> and-expression BITAND equality-expression .)
    CONDOP          reduce using rule 51 (and-expression -> and-expression BITAND equality-expression .)
    LOGOR           reduce using rule 51 (and-expression -> and-expression BITAND equality-expression .)
    DELIM           reduce using rule 51 (and-expression -> and-expression BITAND equality-expression .)
    CLOSE_PAREN     reduce using rule 51 (and-expression -> and-expression BITAND equality-expression .)
    COMMA           reduce using rule 51 (and-expression -> and-expression BITAND equality-expression .)
    CLOSE_BRACKET   reduce using rule 51 (and-expression -> and-expression BITAND equality-expression .)
    COLON           reduce using rule 51 (and-expression -> and-expression BITAND equality-expression .)
    BLOCK_END       reduce using rule 51 (and-expression -> and-expression BITAND equality-expression .)
    EQ              shift and go to state 166
    NE              shift and go to state 167


state 226

    (68) multiplicative-expression -> multiplicative-expression DIV unary-expression .

    TIMES           reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    DIV             reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    MOD             reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    PLUS            reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    MINUS           reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    LSHIFT          reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    RSHIFT          reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    LT              reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    GT              reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    LE              reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    GE              reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    EQ              reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    NE              reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    BITAND          reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    BITXOR          reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    BITOR           reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    LOGAND          reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    CONDOP          reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    LOGOR           reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    CLOSE_PAREN     reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    DELIM           reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    CLOSE_BRACKET   reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    COMMA           reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    COLON           reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    BLOCK_END       reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)


state 227

    (69) multiplicative-expression -> multiplicative-expression MOD unary-expression .

    TIMES           reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    DIV             reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    MOD             reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    PLUS            reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    MINUS           reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    LSHIFT          reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    RSHIFT          reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    LT              reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    GT              reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    LE              reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    GE              reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    EQ              reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    NE              reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    BITAND          reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    BITXOR          reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    BITOR           reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    LOGAND          reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    CONDOP          reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    LOGOR           reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    CLOSE_PAREN     reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    DELIM           reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    CLOSE_BRACKET   reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    COMMA           reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    COLON           reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    BLOCK_END       reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)


state 228

    (67) multiplicative-expression -> multiplicative-expression TIMES unary-expression .

    TIMES           reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    DIV             reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    MOD             reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    PLUS            reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    MINUS           reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    LSHIFT          reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    RSHIFT          reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    LT              reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    GT              reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    LE              reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    GE              reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    EQ              reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    NE              reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    BITAND          reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    BITXOR          reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    BITOR           reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    LOGAND          reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    CONDOP          reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    LOGOR           reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    CLOSE_PAREN     reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    DELIM           reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    CLOSE_BRACKET   reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    COMMA           reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    COLON           reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    BLOCK_END       reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)


state 229

    (43) conditional-or-expression -> conditional-or-expression LOGOR conditional-and-expression .
    (45) conditional-and-expression -> conditional-and-expression . LOGAND inclusive-or-expression

    CONDOP          reduce using rule 43 (conditional-or-expression -> conditional-or-expression LOGOR conditional-and-expression .)
    LOGOR           reduce using rule 43 (conditional-or-expression -> conditional-or-expression LOGOR conditional-and-expression .)
    COMMA           reduce using rule 43 (conditional-or-expression -> conditional-or-expression LOGOR conditional-and-expression .)
    CLOSE_PAREN     reduce using rule 43 (conditional-or-expression -> conditional-or-expression LOGOR conditional-and-expression .)
    COLON           reduce using rule 43 (conditional-or-expression -> conditional-or-expression LOGOR conditional-and-expression .)
    DELIM           reduce using rule 43 (conditional-or-expression -> conditional-or-expression LOGOR conditional-and-expression .)
    BLOCK_END       reduce using rule 43 (conditional-or-expression -> conditional-or-expression LOGOR conditional-and-expression .)
    CLOSE_BRACKET   reduce using rule 43 (conditional-or-expression -> conditional-or-expression LOGOR conditional-and-expression .)
    LOGAND          shift and go to state 163


state 230

    (41) conditional-expression -> conditional-or-expression CONDOP expression . COLON expression

    COLON           shift and go to state 255


state 231

    (34) array-type -> simple-type OPEN_BRACKET ICONST CLOSE_BRACKET .

    IDENTIFIER      reduce using rule 34 (array-type -> simple-type OPEN_BRACKET ICONST CLOSE_BRACKET .)


state 232

    (201) statement-expression-list -> statement-expression-list COMMA . statement-expression
    (166) statement-expression -> . invocation-expression
    (167) statement-expression -> . assignment
    (96) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (97) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (105) assignment -> . prim-expression assignment-operator expression
    (94) member-access -> . IDENTIFIER DOT IDENTIFIER
    (95) member-access -> . member-access DOT IDENTIFIER
    (102) prim-expression -> . IDENTIFIER
    (103) prim-expression -> . member-access
    (104) prim-expression -> . element-access
    (100) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (101) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    IDENTIFIER      shift and go to state 181

    assignment                     shift and go to state 54
    prim-expression                shift and go to state 50
    member-access                  shift and go to state 2
    element-access                 shift and go to state 18
    statement-expression           shift and go to state 256
    invocation-expression          shift and go to state 13

state 233

    (192) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM . M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block
    (174) M_quad -> . empty
    (223) empty -> .

    IDENTIFIER      reduce using rule 223 (empty -> .)
    PLUS            reduce using rule 223 (empty -> .)
    MINUS           reduce using rule 223 (empty -> .)
    BITNOT          reduce using rule 223 (empty -> .)
    BITCOMP         reduce using rule 223 (empty -> .)
    NEW             reduce using rule 223 (empty -> .)
    ICONST          reduce using rule 223 (empty -> .)
    DCONST          reduce using rule 223 (empty -> .)
    TRUE            reduce using rule 223 (empty -> .)
    FALSE           reduce using rule 223 (empty -> .)
    OPEN_PAREN      reduce using rule 223 (empty -> .)

    M_quad                         shift and go to state 257
    empty                          shift and go to state 64

state 234

    (189) while-statement -> WHILE M_quad OPEN_PAREN expression . CLOSE_PAREN M_while block

    CLOSE_PAREN     shift and go to state 258


state 235

    (175) switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN . switch-block
    (176) switch-block -> . BLOCK_BEGIN switch-sections-opt BLOCK_END

    BLOCK_BEGIN     shift and go to state 259

    switch-block                   shift and go to state 260

state 236

    (100) element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .

    TIMES           reduce using rule 100 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    DIV             reduce using rule 100 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    MOD             reduce using rule 100 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    PLUS            reduce using rule 100 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    MINUS           reduce using rule 100 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    LSHIFT          reduce using rule 100 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    RSHIFT          reduce using rule 100 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    LT              reduce using rule 100 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    GT              reduce using rule 100 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    LE              reduce using rule 100 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    GE              reduce using rule 100 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    EQ              reduce using rule 100 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    NE              reduce using rule 100 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    BITAND          reduce using rule 100 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    BITXOR          reduce using rule 100 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    BITOR           reduce using rule 100 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    LOGAND          reduce using rule 100 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    CONDOP          reduce using rule 100 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    LOGOR           reduce using rule 100 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    DELIM           reduce using rule 100 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 100 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    COMMA           reduce using rule 100 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    CLOSE_PAREN     reduce using rule 100 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    COLON           reduce using rule 100 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    BLOCK_END       reduce using rule 100 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    ASSIGN          reduce using rule 100 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    PLUSEQUAL       reduce using rule 100 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    MINUSEQUAL      reduce using rule 100 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    TIMESEQUAL      reduce using rule 100 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    DIVEQUAL        reduce using rule 100 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    MODEQUAL        reduce using rule 100 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    BITANDEQUAL     reduce using rule 100 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    BITOREQUAL      reduce using rule 100 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    BITXOREQUAL     reduce using rule 100 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    LSHIFTEQUAL     reduce using rule 100 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    RSHIFTEQUAL     reduce using rule 100 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)


state 237

    (96) invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .

    TIMES           reduce using rule 96 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    DIV             reduce using rule 96 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    MOD             reduce using rule 96 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    PLUS            reduce using rule 96 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    MINUS           reduce using rule 96 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LSHIFT          reduce using rule 96 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    RSHIFT          reduce using rule 96 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LT              reduce using rule 96 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    GT              reduce using rule 96 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LE              reduce using rule 96 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    GE              reduce using rule 96 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    EQ              reduce using rule 96 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    NE              reduce using rule 96 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITAND          reduce using rule 96 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITXOR          reduce using rule 96 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITOR           reduce using rule 96 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LOGAND          reduce using rule 96 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    CONDOP          reduce using rule 96 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LOGOR           reduce using rule 96 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    DELIM           reduce using rule 96 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    CLOSE_BRACKET   reduce using rule 96 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    COMMA           reduce using rule 96 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 96 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    COLON           reduce using rule 96 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BLOCK_END       reduce using rule 96 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)


state 238

    (122) variable-declarators -> variable-declarators COMMA variable-declarator .

    DELIM           reduce using rule 122 (variable-declarators -> variable-declarators COMMA variable-declarator .)
    COMMA           reduce using rule 122 (variable-declarators -> variable-declarators COMMA variable-declarator .)


state 239

    (82) array-initializer -> BLOCK_BEGIN . variable-initializer-list-opt BLOCK_END
    (83) variable-initializer-list-opt -> . expression-list
    (84) variable-initializer-list-opt -> . empty
    (80) expression-list -> . expression
    (81) expression-list -> . expression-list COMMA expression
    (223) empty -> .
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (105) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (102) prim-expression -> . IDENTIFIER
    (103) prim-expression -> . member-access
    (104) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (94) member-access -> . IDENTIFIER DOT IDENTIFIER
    (95) member-access -> . member-access DOT IDENTIFIER
    (100) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (101) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . array-creation-expression
    (76) primary-expression -> . primary-no-array-creation-expression
    (77) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (87) primary-no-array-creation-expression -> . literal
    (88) primary-no-array-creation-expression -> . IDENTIFIER
    (89) primary-no-array-creation-expression -> . parenthesized-expression
    (90) primary-no-array-creation-expression -> . member-access
    (91) primary-no-array-creation-expression -> . invocation-expression
    (92) primary-no-array-creation-expression -> . element-access
    (219) literal -> . ICONST
    (220) literal -> . DCONST
    (221) literal -> . TRUE
    (222) literal -> . FALSE
    (93) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (96) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (97) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    BLOCK_END       reduce using rule 223 (empty -> .)
    IDENTIFIER      shift and go to state 81
    PLUS            shift and go to state 80
    MINUS           shift and go to state 73
    BITNOT          shift and go to state 96
    BITCOMP         shift and go to state 75
    NEW             shift and go to state 71
    ICONST          shift and go to state 86
    DCONST          shift and go to state 97
    TRUE            shift and go to state 91
    FALSE           shift and go to state 89
    OPEN_PAREN      shift and go to state 77

    unary-expression               shift and go to state 87
    exclusive-or-expression        shift and go to state 67
    member-access                  shift and go to state 68
    relational-expression          shift and go to state 69
    additive-expression            shift and go to state 72
    primary-no-array-creation-expression shift and go to state 85
    inclusive-or-expression        shift and go to state 74
    expression-list                shift and go to state 263
    prim-expression                shift and go to state 50
    element-access                 shift and go to state 76
    literal                        shift and go to state 84
    conditional-expression         shift and go to state 78
    conditional-and-expression     shift and go to state 79
    variable-initializer-list-opt  shift and go to state 262
    empty                          shift and go to state 261
    array-creation-expression      shift and go to state 70
    assignment                     shift and go to state 83
    equality-expression            shift and go to state 90
    shift-expression               shift and go to state 92
    and-expression                 shift and go to state 93
    multiplicative-expression      shift and go to state 94
    expression                     shift and go to state 145
    primary-expression             shift and go to state 98
    invocation-expression          shift and go to state 99
    conditional-or-expression      shift and go to state 100
    parenthesized-expression       shift and go to state 101

state 240

    (86) variable-initializer -> array-initializer .

    COMMA           reduce using rule 86 (variable-initializer -> array-initializer .)
    DELIM           reduce using rule 86 (variable-initializer -> array-initializer .)


state 241

    (124) variable-declarator -> IDENTIFIER ASSIGN variable-initializer .

    DELIM           reduce using rule 124 (variable-declarator -> IDENTIFIER ASSIGN variable-initializer .)
    COMMA           reduce using rule 124 (variable-declarator -> IDENTIFIER ASSIGN variable-initializer .)


state 242

    (85) variable-initializer -> expression .

    COMMA           reduce using rule 85 (variable-initializer -> expression .)
    DELIM           reduce using rule 85 (variable-initializer -> expression .)


state 243

    (191) do-statement -> DO M_quad block WHILE . OPEN_PAREN M_quad expression CLOSE_PAREN DELIM

    OPEN_PAREN      shift and go to state 264


state 244

    (36) constant-declarators -> constant-declarators COMMA . constant-declarator
    (37) constant-declarator -> . IDENTIFIER ASSIGN expression

    IDENTIFIER      shift and go to state 194

    constant-declarator            shift and go to state 265

state 245

    (37) constant-declarator -> IDENTIFIER ASSIGN . expression
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (105) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (102) prim-expression -> . IDENTIFIER
    (103) prim-expression -> . member-access
    (104) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (94) member-access -> . IDENTIFIER DOT IDENTIFIER
    (95) member-access -> . member-access DOT IDENTIFIER
    (100) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (101) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . array-creation-expression
    (76) primary-expression -> . primary-no-array-creation-expression
    (77) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (87) primary-no-array-creation-expression -> . literal
    (88) primary-no-array-creation-expression -> . IDENTIFIER
    (89) primary-no-array-creation-expression -> . parenthesized-expression
    (90) primary-no-array-creation-expression -> . member-access
    (91) primary-no-array-creation-expression -> . invocation-expression
    (92) primary-no-array-creation-expression -> . element-access
    (219) literal -> . ICONST
    (220) literal -> . DCONST
    (221) literal -> . TRUE
    (222) literal -> . FALSE
    (93) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (96) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (97) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 81
    PLUS            shift and go to state 80
    MINUS           shift and go to state 73
    BITNOT          shift and go to state 96
    BITCOMP         shift and go to state 75
    NEW             shift and go to state 71
    ICONST          shift and go to state 86
    DCONST          shift and go to state 97
    TRUE            shift and go to state 91
    FALSE           shift and go to state 89
    OPEN_PAREN      shift and go to state 77

    unary-expression               shift and go to state 87
    exclusive-or-expression        shift and go to state 67
    member-access                  shift and go to state 68
    relational-expression          shift and go to state 69
    additive-expression            shift and go to state 72
    primary-no-array-creation-expression shift and go to state 85
    inclusive-or-expression        shift and go to state 74
    prim-expression                shift and go to state 50
    element-access                 shift and go to state 76
    literal                        shift and go to state 84
    conditional-expression         shift and go to state 78
    conditional-and-expression     shift and go to state 79
    array-creation-expression      shift and go to state 70
    assignment                     shift and go to state 83
    equality-expression            shift and go to state 90
    shift-expression               shift and go to state 92
    and-expression                 shift and go to state 93
    multiplicative-expression      shift and go to state 94
    conditional-or-expression      shift and go to state 100
    primary-expression             shift and go to state 98
    invocation-expression          shift and go to state 99
    expression                     shift and go to state 266
    parenthesized-expression       shift and go to state 101

state 246

    (139) block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .

    IDENTIFIER      reduce using rule 139 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    BLOCK_BEGIN     reduce using rule 139 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    DELIM           reduce using rule 139 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    CONSOLE         reduce using rule 139 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    CONST           reduce using rule 139 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    IF              reduce using rule 139 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    SWITCH          reduce using rule 139 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    WHILE           reduce using rule 139 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    FOR             reduce using rule 139 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    DO              reduce using rule 139 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    BREAK           reduce using rule 139 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    CONTINUE        reduce using rule 139 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    GOTO            reduce using rule 139 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    RETURN          reduce using rule 139 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    BOOL            reduce using rule 139 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    INT             reduce using rule 139 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    UINT            reduce using rule 139 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    CHAR            reduce using rule 139 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    DOUBLE          reduce using rule 139 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    CASE            reduce using rule 139 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    DEFAULT         reduce using rule 139 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    BLOCK_END       reduce using rule 139 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    $end            reduce using rule 139 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    BITCOMP         reduce using rule 139 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    PUBLIC          reduce using rule 139 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    PRIVATE         reduce using rule 139 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    VOID            reduce using rule 139 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    ELSE            reduce using rule 139 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)


state 247

    (9) class-declaration -> CLASS IDENTIFIER class-base-opt class-body . semi-opt
    (3) semi-opt -> . DELIM
    (4) semi-opt -> . empty
    (223) empty -> .

    DELIM           shift and go to state 267
    CLASS           reduce using rule 223 (empty -> .)
    $end            reduce using rule 223 (empty -> .)

    semi-opt                       shift and go to state 268
    empty                          shift and go to state 269

state 248

    (14) class-body -> BLOCK_BEGIN . class-member-declarations-opt BLOCK_END
    (15) class-member-declarations-opt -> . class-member-declarations
    (16) class-member-declarations-opt -> . empty
    (17) class-member-declarations -> . class-member-declaration
    (18) class-member-declarations -> . class-member-declarations class-member-declaration
    (223) empty -> .
    (19) class-member-declaration -> . constant-declaration
    (20) class-member-declaration -> . field-declaration
    (21) class-member-declaration -> . method-declaration
    (22) class-member-declaration -> . constructor-declaration
    (23) class-member-declaration -> . destructor-declaration
    (24) constant-declaration -> . modifier CONST simple-type constant-declarators DELIM
    (25) constant-declaration -> . CONST simple-type constant-declarators DELIM
    (117) field-declaration -> . modifier type variable-declarators DELIM
    (118) field-declaration -> . type variable-declarators DELIM
    (125) method-declaration -> . method-header method-body
    (212) constructor-declaration -> . constructor-declarator constructor-body
    (216) destructor-declaration -> . BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body
    (119) modifier -> . PUBLIC
    (120) modifier -> . PRIVATE
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (126) method-header -> . modifier type member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (127) method-header -> . modifier VOID member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (128) method-header -> . type member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (129) method-header -> . VOID member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (213) constructor-declarator -> . IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE
    (13) class-type -> . IDENTIFIER
    (34) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET

    BLOCK_END       reduce using rule 223 (empty -> .)
    CONST           shift and go to state 272
    BITCOMP         shift and go to state 274
    PUBLIC          shift and go to state 288
    PRIVATE         shift and go to state 273
    VOID            shift and go to state 271
    IDENTIFIER      shift and go to state 283
    BOOL            shift and go to state 43
    INT             shift and go to state 24
    UINT            shift and go to state 56
    CHAR            shift and go to state 30
    DOUBLE          shift and go to state 12

    method-header                  shift and go to state 270
    class-member-declaration       shift and go to state 286
    method-declaration             shift and go to state 275
    class-member-declarations-opt  shift and go to state 280
    type                           shift and go to state 278
    empty                          shift and go to state 279
    array-type                     shift and go to state 39
    field-declaration              shift and go to state 276
    constructor-declaration        shift and go to state 281
    class-member-declarations      shift and go to state 282
    constant-declaration           shift and go to state 277
    destructor-declaration         shift and go to state 284
    constructor-declarator         shift and go to state 285
    class-type                     shift and go to state 58
    simple-type                    shift and go to state 15
    modifier                       shift and go to state 287

state 249

    (12) class-base -> COLON class-type .

    BLOCK_BEGIN     reduce using rule 12 (class-base -> COLON class-type .)


state 250

    (155) write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN . print-list CLOSE_PAREN DELIM
    (156) print-list -> . expression
    (157) print-list -> . expression COMMA print-list
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (105) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (102) prim-expression -> . IDENTIFIER
    (103) prim-expression -> . member-access
    (104) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (94) member-access -> . IDENTIFIER DOT IDENTIFIER
    (95) member-access -> . member-access DOT IDENTIFIER
    (100) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (101) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . array-creation-expression
    (76) primary-expression -> . primary-no-array-creation-expression
    (77) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (87) primary-no-array-creation-expression -> . literal
    (88) primary-no-array-creation-expression -> . IDENTIFIER
    (89) primary-no-array-creation-expression -> . parenthesized-expression
    (90) primary-no-array-creation-expression -> . member-access
    (91) primary-no-array-creation-expression -> . invocation-expression
    (92) primary-no-array-creation-expression -> . element-access
    (219) literal -> . ICONST
    (220) literal -> . DCONST
    (221) literal -> . TRUE
    (222) literal -> . FALSE
    (93) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (96) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (97) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 81
    PLUS            shift and go to state 80
    MINUS           shift and go to state 73
    BITNOT          shift and go to state 96
    BITCOMP         shift and go to state 75
    NEW             shift and go to state 71
    ICONST          shift and go to state 86
    DCONST          shift and go to state 97
    TRUE            shift and go to state 91
    FALSE           shift and go to state 89
    OPEN_PAREN      shift and go to state 77

    unary-expression               shift and go to state 87
    exclusive-or-expression        shift and go to state 67
    member-access                  shift and go to state 68
    relational-expression          shift and go to state 69
    additive-expression            shift and go to state 72
    primary-no-array-creation-expression shift and go to state 85
    inclusive-or-expression        shift and go to state 74
    prim-expression                shift and go to state 50
    element-access                 shift and go to state 76
    literal                        shift and go to state 84
    conditional-expression         shift and go to state 78
    conditional-and-expression     shift and go to state 79
    array-creation-expression      shift and go to state 70
    assignment                     shift and go to state 83
    and-expression                 shift and go to state 93
    equality-expression            shift and go to state 90
    shift-expression               shift and go to state 92
    print-list                     shift and go to state 289
    multiplicative-expression      shift and go to state 94
    expression                     shift and go to state 290
    primary-expression             shift and go to state 98
    invocation-expression          shift and go to state 99
    conditional-or-expression      shift and go to state 100
    parenthesized-expression       shift and go to state 101

state 251

    (158) read-statement -> CONSOLE DOT READLINE OPEN_PAREN . IDENTIFIER CLOSE_PAREN DELIM

    IDENTIFIER      shift and go to state 291


state 252

    (170) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN . M_if block
    (171) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN . M_if block ELSE M_else block
    (172) M_if -> . empty
    (223) empty -> .

    BLOCK_BEGIN     reduce using rule 223 (empty -> .)

    M_if                           shift and go to state 292
    empty                          shift and go to state 293

state 253

    (81) expression-list -> expression-list COMMA expression .

    COMMA           reduce using rule 81 (expression-list -> expression-list COMMA expression .)
    CLOSE_PAREN     reduce using rule 81 (expression-list -> expression-list COMMA expression .)
    BLOCK_END       reduce using rule 81 (expression-list -> expression-list COMMA expression .)


state 254

    (77) array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST . CLOSE_BRACKET array-initializer-opt

    CLOSE_BRACKET   shift and go to state 294


state 255

    (41) conditional-expression -> conditional-or-expression CONDOP expression COLON . expression
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (105) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (102) prim-expression -> . IDENTIFIER
    (103) prim-expression -> . member-access
    (104) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (94) member-access -> . IDENTIFIER DOT IDENTIFIER
    (95) member-access -> . member-access DOT IDENTIFIER
    (100) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (101) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . array-creation-expression
    (76) primary-expression -> . primary-no-array-creation-expression
    (77) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (87) primary-no-array-creation-expression -> . literal
    (88) primary-no-array-creation-expression -> . IDENTIFIER
    (89) primary-no-array-creation-expression -> . parenthesized-expression
    (90) primary-no-array-creation-expression -> . member-access
    (91) primary-no-array-creation-expression -> . invocation-expression
    (92) primary-no-array-creation-expression -> . element-access
    (219) literal -> . ICONST
    (220) literal -> . DCONST
    (221) literal -> . TRUE
    (222) literal -> . FALSE
    (93) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (96) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (97) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 81
    PLUS            shift and go to state 80
    MINUS           shift and go to state 73
    BITNOT          shift and go to state 96
    BITCOMP         shift and go to state 75
    NEW             shift and go to state 71
    ICONST          shift and go to state 86
    DCONST          shift and go to state 97
    TRUE            shift and go to state 91
    FALSE           shift and go to state 89
    OPEN_PAREN      shift and go to state 77

    unary-expression               shift and go to state 87
    exclusive-or-expression        shift and go to state 67
    member-access                  shift and go to state 68
    relational-expression          shift and go to state 69
    additive-expression            shift and go to state 72
    primary-no-array-creation-expression shift and go to state 85
    inclusive-or-expression        shift and go to state 74
    prim-expression                shift and go to state 50
    element-access                 shift and go to state 76
    literal                        shift and go to state 84
    conditional-expression         shift and go to state 78
    conditional-and-expression     shift and go to state 79
    array-creation-expression      shift and go to state 70
    assignment                     shift and go to state 83
    equality-expression            shift and go to state 90
    shift-expression               shift and go to state 92
    and-expression                 shift and go to state 93
    multiplicative-expression      shift and go to state 94
    expression                     shift and go to state 295
    primary-expression             shift and go to state 98
    invocation-expression          shift and go to state 99
    conditional-or-expression      shift and go to state 100
    parenthesized-expression       shift and go to state 101

state 256

    (201) statement-expression-list -> statement-expression-list COMMA statement-expression .

    COMMA           reduce using rule 201 (statement-expression-list -> statement-expression-list COMMA statement-expression .)
    CLOSE_PAREN     reduce using rule 201 (statement-expression-list -> statement-expression-list COMMA statement-expression .)
    DELIM           reduce using rule 201 (statement-expression-list -> statement-expression-list COMMA statement-expression .)


state 257

    (192) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad . for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block
    (196) for-condition -> . expression
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (105) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (102) prim-expression -> . IDENTIFIER
    (103) prim-expression -> . member-access
    (104) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (94) member-access -> . IDENTIFIER DOT IDENTIFIER
    (95) member-access -> . member-access DOT IDENTIFIER
    (100) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (101) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . array-creation-expression
    (76) primary-expression -> . primary-no-array-creation-expression
    (77) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (87) primary-no-array-creation-expression -> . literal
    (88) primary-no-array-creation-expression -> . IDENTIFIER
    (89) primary-no-array-creation-expression -> . parenthesized-expression
    (90) primary-no-array-creation-expression -> . member-access
    (91) primary-no-array-creation-expression -> . invocation-expression
    (92) primary-no-array-creation-expression -> . element-access
    (219) literal -> . ICONST
    (220) literal -> . DCONST
    (221) literal -> . TRUE
    (222) literal -> . FALSE
    (93) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (96) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (97) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 81
    PLUS            shift and go to state 80
    MINUS           shift and go to state 73
    BITNOT          shift and go to state 96
    BITCOMP         shift and go to state 75
    NEW             shift and go to state 71
    ICONST          shift and go to state 86
    DCONST          shift and go to state 97
    TRUE            shift and go to state 91
    FALSE           shift and go to state 89
    OPEN_PAREN      shift and go to state 77

    unary-expression               shift and go to state 87
    exclusive-or-expression        shift and go to state 67
    member-access                  shift and go to state 68
    relational-expression          shift and go to state 69
    additive-expression            shift and go to state 72
    primary-no-array-creation-expression shift and go to state 85
    for-condition                  shift and go to state 296
    prim-expression                shift and go to state 50
    element-access                 shift and go to state 76
    literal                        shift and go to state 84
    conditional-expression         shift and go to state 78
    assignment                     shift and go to state 83
    array-creation-expression      shift and go to state 70
    conditional-and-expression     shift and go to state 79
    equality-expression            shift and go to state 90
    shift-expression               shift and go to state 92
    and-expression                 shift and go to state 93
    multiplicative-expression      shift and go to state 94
    expression                     shift and go to state 297
    parenthesized-expression       shift and go to state 101
    inclusive-or-expression        shift and go to state 74
    primary-expression             shift and go to state 98
    invocation-expression          shift and go to state 99
    conditional-or-expression      shift and go to state 100

state 258

    (189) while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN . M_while block
    (190) M_while -> . empty
    (223) empty -> .

    BLOCK_BEGIN     reduce using rule 223 (empty -> .)

    M_while                        shift and go to state 298
    empty                          shift and go to state 299

state 259

    (176) switch-block -> BLOCK_BEGIN . switch-sections-opt BLOCK_END
    (177) switch-sections-opt -> . switch-sections
    (178) switch-sections-opt -> . empty
    (179) switch-sections -> . switch-section
    (180) switch-sections -> . switch-sections switch-section
    (223) empty -> .
    (181) switch-section -> . switch-labels statement-list
    (182) switch-labels -> . switch-label
    (183) switch-labels -> . switch-labels switch-label
    (184) switch-label -> . CASE expression COLON
    (185) switch-label -> . DEFAULT COLON

    BLOCK_END       reduce using rule 223 (empty -> .)
    CASE            shift and go to state 300
    DEFAULT         shift and go to state 301

    switch-sections-opt            shift and go to state 304
    switch-section                 shift and go to state 302
    switch-labels                  shift and go to state 303
    switch-sections                shift and go to state 305
    empty                          shift and go to state 306
    switch-label                   shift and go to state 307

state 260

    (175) switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .

    IDENTIFIER      reduce using rule 175 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    BLOCK_BEGIN     reduce using rule 175 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    DELIM           reduce using rule 175 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    CONSOLE         reduce using rule 175 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    CONST           reduce using rule 175 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    IF              reduce using rule 175 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    SWITCH          reduce using rule 175 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    WHILE           reduce using rule 175 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    FOR             reduce using rule 175 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    DO              reduce using rule 175 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    BREAK           reduce using rule 175 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    CONTINUE        reduce using rule 175 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    GOTO            reduce using rule 175 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    RETURN          reduce using rule 175 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    BOOL            reduce using rule 175 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    INT             reduce using rule 175 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    UINT            reduce using rule 175 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    CHAR            reduce using rule 175 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    DOUBLE          reduce using rule 175 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    $end            reduce using rule 175 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    BLOCK_END       reduce using rule 175 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    CASE            reduce using rule 175 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    DEFAULT         reduce using rule 175 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)


state 261

    (84) variable-initializer-list-opt -> empty .

    BLOCK_END       reduce using rule 84 (variable-initializer-list-opt -> empty .)


state 262

    (82) array-initializer -> BLOCK_BEGIN variable-initializer-list-opt . BLOCK_END

    BLOCK_END       shift and go to state 308


state 263

    (83) variable-initializer-list-opt -> expression-list .
    (81) expression-list -> expression-list . COMMA expression

    BLOCK_END       reduce using rule 83 (variable-initializer-list-opt -> expression-list .)
    COMMA           shift and go to state 209


state 264

    (191) do-statement -> DO M_quad block WHILE OPEN_PAREN . M_quad expression CLOSE_PAREN DELIM
    (174) M_quad -> . empty
    (223) empty -> .

    IDENTIFIER      reduce using rule 223 (empty -> .)
    PLUS            reduce using rule 223 (empty -> .)
    MINUS           reduce using rule 223 (empty -> .)
    BITNOT          reduce using rule 223 (empty -> .)
    BITCOMP         reduce using rule 223 (empty -> .)
    NEW             reduce using rule 223 (empty -> .)
    ICONST          reduce using rule 223 (empty -> .)
    DCONST          reduce using rule 223 (empty -> .)
    TRUE            reduce using rule 223 (empty -> .)
    FALSE           reduce using rule 223 (empty -> .)
    OPEN_PAREN      reduce using rule 223 (empty -> .)

    M_quad                         shift and go to state 309
    empty                          shift and go to state 64

state 265

    (36) constant-declarators -> constant-declarators COMMA constant-declarator .

    DELIM           reduce using rule 36 (constant-declarators -> constant-declarators COMMA constant-declarator .)
    COMMA           reduce using rule 36 (constant-declarators -> constant-declarators COMMA constant-declarator .)


state 266

    (37) constant-declarator -> IDENTIFIER ASSIGN expression .

    DELIM           reduce using rule 37 (constant-declarator -> IDENTIFIER ASSIGN expression .)
    COMMA           reduce using rule 37 (constant-declarator -> IDENTIFIER ASSIGN expression .)


state 267

    (3) semi-opt -> DELIM .

    CLASS           reduce using rule 3 (semi-opt -> DELIM .)
    $end            reduce using rule 3 (semi-opt -> DELIM .)


state 268

    (9) class-declaration -> CLASS IDENTIFIER class-base-opt class-body semi-opt .

    CLASS           reduce using rule 9 (class-declaration -> CLASS IDENTIFIER class-base-opt class-body semi-opt .)
    $end            reduce using rule 9 (class-declaration -> CLASS IDENTIFIER class-base-opt class-body semi-opt .)


state 269

    (4) semi-opt -> empty .

    CLASS           reduce using rule 4 (semi-opt -> empty .)
    $end            reduce using rule 4 (semi-opt -> empty .)


state 270

    (125) method-declaration -> method-header . method-body
    (137) method-body -> . block
    (138) method-body -> . DELIM
    (139) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END

    DELIM           shift and go to state 310
    BLOCK_BEGIN     shift and go to state 49

    method-body                    shift and go to state 311
    block                          shift and go to state 312

state 271

    (129) method-header -> VOID . member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (132) member-name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 314

    member-name                    shift and go to state 313

state 272

    (25) constant-declaration -> CONST . simple-type constant-declarators DELIM
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE

    BOOL            shift and go to state 43
    INT             shift and go to state 24
    UINT            shift and go to state 56
    CHAR            shift and go to state 30
    DOUBLE          shift and go to state 12

    simple-type                    shift and go to state 315

state 273

    (120) modifier -> PRIVATE .

    CONST           reduce using rule 120 (modifier -> PRIVATE .)
    VOID            reduce using rule 120 (modifier -> PRIVATE .)
    BOOL            reduce using rule 120 (modifier -> PRIVATE .)
    INT             reduce using rule 120 (modifier -> PRIVATE .)
    UINT            reduce using rule 120 (modifier -> PRIVATE .)
    CHAR            reduce using rule 120 (modifier -> PRIVATE .)
    DOUBLE          reduce using rule 120 (modifier -> PRIVATE .)
    IDENTIFIER      reduce using rule 120 (modifier -> PRIVATE .)


state 274

    (216) destructor-declaration -> BITCOMP . IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body

    IDENTIFIER      shift and go to state 316


state 275

    (21) class-member-declaration -> method-declaration .

    CONST           reduce using rule 21 (class-member-declaration -> method-declaration .)
    BITCOMP         reduce using rule 21 (class-member-declaration -> method-declaration .)
    PUBLIC          reduce using rule 21 (class-member-declaration -> method-declaration .)
    PRIVATE         reduce using rule 21 (class-member-declaration -> method-declaration .)
    VOID            reduce using rule 21 (class-member-declaration -> method-declaration .)
    IDENTIFIER      reduce using rule 21 (class-member-declaration -> method-declaration .)
    BOOL            reduce using rule 21 (class-member-declaration -> method-declaration .)
    INT             reduce using rule 21 (class-member-declaration -> method-declaration .)
    UINT            reduce using rule 21 (class-member-declaration -> method-declaration .)
    CHAR            reduce using rule 21 (class-member-declaration -> method-declaration .)
    DOUBLE          reduce using rule 21 (class-member-declaration -> method-declaration .)
    BLOCK_END       reduce using rule 21 (class-member-declaration -> method-declaration .)


state 276

    (20) class-member-declaration -> field-declaration .

    CONST           reduce using rule 20 (class-member-declaration -> field-declaration .)
    BITCOMP         reduce using rule 20 (class-member-declaration -> field-declaration .)
    PUBLIC          reduce using rule 20 (class-member-declaration -> field-declaration .)
    PRIVATE         reduce using rule 20 (class-member-declaration -> field-declaration .)
    VOID            reduce using rule 20 (class-member-declaration -> field-declaration .)
    IDENTIFIER      reduce using rule 20 (class-member-declaration -> field-declaration .)
    BOOL            reduce using rule 20 (class-member-declaration -> field-declaration .)
    INT             reduce using rule 20 (class-member-declaration -> field-declaration .)
    UINT            reduce using rule 20 (class-member-declaration -> field-declaration .)
    CHAR            reduce using rule 20 (class-member-declaration -> field-declaration .)
    DOUBLE          reduce using rule 20 (class-member-declaration -> field-declaration .)
    BLOCK_END       reduce using rule 20 (class-member-declaration -> field-declaration .)


state 277

    (19) class-member-declaration -> constant-declaration .

    CONST           reduce using rule 19 (class-member-declaration -> constant-declaration .)
    BITCOMP         reduce using rule 19 (class-member-declaration -> constant-declaration .)
    PUBLIC          reduce using rule 19 (class-member-declaration -> constant-declaration .)
    PRIVATE         reduce using rule 19 (class-member-declaration -> constant-declaration .)
    VOID            reduce using rule 19 (class-member-declaration -> constant-declaration .)
    IDENTIFIER      reduce using rule 19 (class-member-declaration -> constant-declaration .)
    BOOL            reduce using rule 19 (class-member-declaration -> constant-declaration .)
    INT             reduce using rule 19 (class-member-declaration -> constant-declaration .)
    UINT            reduce using rule 19 (class-member-declaration -> constant-declaration .)
    CHAR            reduce using rule 19 (class-member-declaration -> constant-declaration .)
    DOUBLE          reduce using rule 19 (class-member-declaration -> constant-declaration .)
    BLOCK_END       reduce using rule 19 (class-member-declaration -> constant-declaration .)


state 278

    (118) field-declaration -> type . variable-declarators DELIM
    (128) method-header -> type . member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (121) variable-declarators -> . variable-declarator
    (122) variable-declarators -> . variable-declarators COMMA variable-declarator
    (132) member-name -> . IDENTIFIER
    (123) variable-declarator -> . IDENTIFIER
    (124) variable-declarator -> . IDENTIFIER ASSIGN variable-initializer

    IDENTIFIER      shift and go to state 319

    variable-declarator            shift and go to state 115
    variable-declarators           shift and go to state 317
    member-name                    shift and go to state 318

state 279

    (16) class-member-declarations-opt -> empty .

    BLOCK_END       reduce using rule 16 (class-member-declarations-opt -> empty .)


state 280

    (14) class-body -> BLOCK_BEGIN class-member-declarations-opt . BLOCK_END

    BLOCK_END       shift and go to state 320


state 281

    (22) class-member-declaration -> constructor-declaration .

    CONST           reduce using rule 22 (class-member-declaration -> constructor-declaration .)
    BITCOMP         reduce using rule 22 (class-member-declaration -> constructor-declaration .)
    PUBLIC          reduce using rule 22 (class-member-declaration -> constructor-declaration .)
    PRIVATE         reduce using rule 22 (class-member-declaration -> constructor-declaration .)
    VOID            reduce using rule 22 (class-member-declaration -> constructor-declaration .)
    IDENTIFIER      reduce using rule 22 (class-member-declaration -> constructor-declaration .)
    BOOL            reduce using rule 22 (class-member-declaration -> constructor-declaration .)
    INT             reduce using rule 22 (class-member-declaration -> constructor-declaration .)
    UINT            reduce using rule 22 (class-member-declaration -> constructor-declaration .)
    CHAR            reduce using rule 22 (class-member-declaration -> constructor-declaration .)
    DOUBLE          reduce using rule 22 (class-member-declaration -> constructor-declaration .)
    BLOCK_END       reduce using rule 22 (class-member-declaration -> constructor-declaration .)


state 282

    (15) class-member-declarations-opt -> class-member-declarations .
    (18) class-member-declarations -> class-member-declarations . class-member-declaration
    (19) class-member-declaration -> . constant-declaration
    (20) class-member-declaration -> . field-declaration
    (21) class-member-declaration -> . method-declaration
    (22) class-member-declaration -> . constructor-declaration
    (23) class-member-declaration -> . destructor-declaration
    (24) constant-declaration -> . modifier CONST simple-type constant-declarators DELIM
    (25) constant-declaration -> . CONST simple-type constant-declarators DELIM
    (117) field-declaration -> . modifier type variable-declarators DELIM
    (118) field-declaration -> . type variable-declarators DELIM
    (125) method-declaration -> . method-header method-body
    (212) constructor-declaration -> . constructor-declarator constructor-body
    (216) destructor-declaration -> . BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body
    (119) modifier -> . PUBLIC
    (120) modifier -> . PRIVATE
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (126) method-header -> . modifier type member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (127) method-header -> . modifier VOID member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (128) method-header -> . type member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (129) method-header -> . VOID member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (213) constructor-declarator -> . IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE
    (13) class-type -> . IDENTIFIER
    (34) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET

    BLOCK_END       reduce using rule 15 (class-member-declarations-opt -> class-member-declarations .)
    CONST           shift and go to state 272
    BITCOMP         shift and go to state 274
    PUBLIC          shift and go to state 288
    PRIVATE         shift and go to state 273
    VOID            shift and go to state 271
    IDENTIFIER      shift and go to state 283
    BOOL            shift and go to state 43
    INT             shift and go to state 24
    UINT            shift and go to state 56
    CHAR            shift and go to state 30
    DOUBLE          shift and go to state 12

    array-type                     shift and go to state 39
    modifier                       shift and go to state 287
    method-header                  shift and go to state 270
    constructor-declaration        shift and go to state 281
    type                           shift and go to state 278
    constructor-declarator         shift and go to state 285
    method-declaration             shift and go to state 275
    class-member-declaration       shift and go to state 321
    field-declaration              shift and go to state 276
    class-type                     shift and go to state 58
    simple-type                    shift and go to state 15
    constant-declaration           shift and go to state 277
    destructor-declaration         shift and go to state 284

state 283

    (213) constructor-declarator -> IDENTIFIER . OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (13) class-type -> IDENTIFIER .

    OPEN_PAREN      shift and go to state 322
    IDENTIFIER      reduce using rule 13 (class-type -> IDENTIFIER .)


state 284

    (23) class-member-declaration -> destructor-declaration .

    CONST           reduce using rule 23 (class-member-declaration -> destructor-declaration .)
    BITCOMP         reduce using rule 23 (class-member-declaration -> destructor-declaration .)
    PUBLIC          reduce using rule 23 (class-member-declaration -> destructor-declaration .)
    PRIVATE         reduce using rule 23 (class-member-declaration -> destructor-declaration .)
    VOID            reduce using rule 23 (class-member-declaration -> destructor-declaration .)
    IDENTIFIER      reduce using rule 23 (class-member-declaration -> destructor-declaration .)
    BOOL            reduce using rule 23 (class-member-declaration -> destructor-declaration .)
    INT             reduce using rule 23 (class-member-declaration -> destructor-declaration .)
    UINT            reduce using rule 23 (class-member-declaration -> destructor-declaration .)
    CHAR            reduce using rule 23 (class-member-declaration -> destructor-declaration .)
    DOUBLE          reduce using rule 23 (class-member-declaration -> destructor-declaration .)
    BLOCK_END       reduce using rule 23 (class-member-declaration -> destructor-declaration .)


state 285

    (212) constructor-declaration -> constructor-declarator . constructor-body
    (214) constructor-body -> . block
    (215) constructor-body -> . DELIM
    (139) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END

    DELIM           shift and go to state 324
    BLOCK_BEGIN     shift and go to state 49

    constructor-body               shift and go to state 323
    block                          shift and go to state 325

state 286

    (17) class-member-declarations -> class-member-declaration .

    CONST           reduce using rule 17 (class-member-declarations -> class-member-declaration .)
    BITCOMP         reduce using rule 17 (class-member-declarations -> class-member-declaration .)
    PUBLIC          reduce using rule 17 (class-member-declarations -> class-member-declaration .)
    PRIVATE         reduce using rule 17 (class-member-declarations -> class-member-declaration .)
    VOID            reduce using rule 17 (class-member-declarations -> class-member-declaration .)
    IDENTIFIER      reduce using rule 17 (class-member-declarations -> class-member-declaration .)
    BOOL            reduce using rule 17 (class-member-declarations -> class-member-declaration .)
    INT             reduce using rule 17 (class-member-declarations -> class-member-declaration .)
    UINT            reduce using rule 17 (class-member-declarations -> class-member-declaration .)
    CHAR            reduce using rule 17 (class-member-declarations -> class-member-declaration .)
    DOUBLE          reduce using rule 17 (class-member-declarations -> class-member-declaration .)
    BLOCK_END       reduce using rule 17 (class-member-declarations -> class-member-declaration .)


state 287

    (24) constant-declaration -> modifier . CONST simple-type constant-declarators DELIM
    (117) field-declaration -> modifier . type variable-declarators DELIM
    (126) method-header -> modifier . type member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (127) method-header -> modifier . VOID member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE
    (13) class-type -> . IDENTIFIER
    (34) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET

    CONST           shift and go to state 326
    VOID            shift and go to state 327
    BOOL            shift and go to state 43
    INT             shift and go to state 24
    UINT            shift and go to state 56
    CHAR            shift and go to state 30
    DOUBLE          shift and go to state 12
    IDENTIFIER      shift and go to state 122

    array-type                     shift and go to state 39
    simple-type                    shift and go to state 15
    class-type                     shift and go to state 58
    type                           shift and go to state 328

state 288

    (119) modifier -> PUBLIC .

    CONST           reduce using rule 119 (modifier -> PUBLIC .)
    VOID            reduce using rule 119 (modifier -> PUBLIC .)
    BOOL            reduce using rule 119 (modifier -> PUBLIC .)
    INT             reduce using rule 119 (modifier -> PUBLIC .)
    UINT            reduce using rule 119 (modifier -> PUBLIC .)
    CHAR            reduce using rule 119 (modifier -> PUBLIC .)
    DOUBLE          reduce using rule 119 (modifier -> PUBLIC .)
    IDENTIFIER      reduce using rule 119 (modifier -> PUBLIC .)


state 289

    (155) write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list . CLOSE_PAREN DELIM

    CLOSE_PAREN     shift and go to state 329


state 290

    (156) print-list -> expression .
    (157) print-list -> expression . COMMA print-list

    CLOSE_PAREN     reduce using rule 156 (print-list -> expression .)
    COMMA           shift and go to state 330


state 291

    (158) read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER . CLOSE_PAREN DELIM

    CLOSE_PAREN     shift and go to state 331


state 292

    (170) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if . block
    (171) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if . block ELSE M_else block
    (139) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END

    BLOCK_BEGIN     shift and go to state 49

    block                          shift and go to state 332

state 293

    (172) M_if -> empty .

    BLOCK_BEGIN     reduce using rule 172 (M_if -> empty .)


state 294

    (77) array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET . array-initializer-opt
    (78) array-initializer-opt -> . array-initializer
    (79) array-initializer-opt -> . empty
    (82) array-initializer -> . BLOCK_BEGIN variable-initializer-list-opt BLOCK_END
    (223) empty -> .

    BLOCK_BEGIN     shift and go to state 239
    TIMES           reduce using rule 223 (empty -> .)
    DIV             reduce using rule 223 (empty -> .)
    MOD             reduce using rule 223 (empty -> .)
    PLUS            reduce using rule 223 (empty -> .)
    MINUS           reduce using rule 223 (empty -> .)
    LSHIFT          reduce using rule 223 (empty -> .)
    RSHIFT          reduce using rule 223 (empty -> .)
    LT              reduce using rule 223 (empty -> .)
    GT              reduce using rule 223 (empty -> .)
    LE              reduce using rule 223 (empty -> .)
    GE              reduce using rule 223 (empty -> .)
    EQ              reduce using rule 223 (empty -> .)
    NE              reduce using rule 223 (empty -> .)
    BITAND          reduce using rule 223 (empty -> .)
    BITXOR          reduce using rule 223 (empty -> .)
    BITOR           reduce using rule 223 (empty -> .)
    LOGAND          reduce using rule 223 (empty -> .)
    CONDOP          reduce using rule 223 (empty -> .)
    LOGOR           reduce using rule 223 (empty -> .)
    DELIM           reduce using rule 223 (empty -> .)
    CLOSE_BRACKET   reduce using rule 223 (empty -> .)
    COMMA           reduce using rule 223 (empty -> .)
    CLOSE_PAREN     reduce using rule 223 (empty -> .)
    COLON           reduce using rule 223 (empty -> .)
    BLOCK_END       reduce using rule 223 (empty -> .)

    array-initializer-opt          shift and go to state 334
    empty                          shift and go to state 335
    array-initializer              shift and go to state 333

state 295

    (41) conditional-expression -> conditional-or-expression CONDOP expression COLON expression .

    CLOSE_PAREN     reduce using rule 41 (conditional-expression -> conditional-or-expression CONDOP expression COLON expression .)
    COLON           reduce using rule 41 (conditional-expression -> conditional-or-expression CONDOP expression COLON expression .)
    COMMA           reduce using rule 41 (conditional-expression -> conditional-or-expression CONDOP expression COLON expression .)
    CLOSE_BRACKET   reduce using rule 41 (conditional-expression -> conditional-or-expression CONDOP expression COLON expression .)
    BLOCK_END       reduce using rule 41 (conditional-expression -> conditional-or-expression CONDOP expression COLON expression .)
    DELIM           reduce using rule 41 (conditional-expression -> conditional-or-expression CONDOP expression COLON expression .)


state 296

    (192) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition . DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block

    DELIM           shift and go to state 336


state 297

    (196) for-condition -> expression .

    DELIM           reduce using rule 196 (for-condition -> expression .)


state 298

    (189) while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while . block
    (139) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END

    BLOCK_BEGIN     shift and go to state 49

    block                          shift and go to state 337

state 299

    (190) M_while -> empty .

    BLOCK_BEGIN     reduce using rule 190 (M_while -> empty .)


state 300

    (184) switch-label -> CASE . expression COLON
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (105) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (102) prim-expression -> . IDENTIFIER
    (103) prim-expression -> . member-access
    (104) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (94) member-access -> . IDENTIFIER DOT IDENTIFIER
    (95) member-access -> . member-access DOT IDENTIFIER
    (100) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (101) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . array-creation-expression
    (76) primary-expression -> . primary-no-array-creation-expression
    (77) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (87) primary-no-array-creation-expression -> . literal
    (88) primary-no-array-creation-expression -> . IDENTIFIER
    (89) primary-no-array-creation-expression -> . parenthesized-expression
    (90) primary-no-array-creation-expression -> . member-access
    (91) primary-no-array-creation-expression -> . invocation-expression
    (92) primary-no-array-creation-expression -> . element-access
    (219) literal -> . ICONST
    (220) literal -> . DCONST
    (221) literal -> . TRUE
    (222) literal -> . FALSE
    (93) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (96) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (97) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 81
    PLUS            shift and go to state 80
    MINUS           shift and go to state 73
    BITNOT          shift and go to state 96
    BITCOMP         shift and go to state 75
    NEW             shift and go to state 71
    ICONST          shift and go to state 86
    DCONST          shift and go to state 97
    TRUE            shift and go to state 91
    FALSE           shift and go to state 89
    OPEN_PAREN      shift and go to state 77

    unary-expression               shift and go to state 87
    exclusive-or-expression        shift and go to state 67
    member-access                  shift and go to state 68
    relational-expression          shift and go to state 69
    additive-expression            shift and go to state 72
    primary-no-array-creation-expression shift and go to state 85
    inclusive-or-expression        shift and go to state 74
    prim-expression                shift and go to state 50
    element-access                 shift and go to state 76
    literal                        shift and go to state 84
    conditional-expression         shift and go to state 78
    conditional-and-expression     shift and go to state 79
    array-creation-expression      shift and go to state 70
    assignment                     shift and go to state 83
    equality-expression            shift and go to state 90
    shift-expression               shift and go to state 92
    and-expression                 shift and go to state 93
    multiplicative-expression      shift and go to state 94
    conditional-or-expression      shift and go to state 100
    primary-expression             shift and go to state 98
    invocation-expression          shift and go to state 99
    expression                     shift and go to state 338
    parenthesized-expression       shift and go to state 101

state 301

    (185) switch-label -> DEFAULT . COLON

    COLON           shift and go to state 339


state 302

    (179) switch-sections -> switch-section .

    CASE            reduce using rule 179 (switch-sections -> switch-section .)
    DEFAULT         reduce using rule 179 (switch-sections -> switch-section .)
    BLOCK_END       reduce using rule 179 (switch-sections -> switch-section .)


state 303

    (181) switch-section -> switch-labels . statement-list
    (183) switch-labels -> switch-labels . switch-label
    (143) statement-list -> . statement
    (144) statement-list -> . statement-list statement
    (184) switch-label -> . CASE expression COLON
    (185) switch-label -> . DEFAULT COLON
    (145) statement -> . labeled-statement
    (146) statement -> . declaration-statement
    (147) statement -> . block
    (148) statement -> . empty-statement
    (149) statement -> . expression-statement
    (150) statement -> . selection-statement
    (151) statement -> . iteration-statement
    (152) statement -> . jump-statement
    (153) statement -> . write-statement
    (154) statement -> . read-statement
    (159) labeled-statement -> . IDENTIFIER COLON statement
    (160) declaration-statement -> . local-variable-declaration DELIM
    (161) declaration-statement -> . local-constant-declaration DELIM
    (139) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END
    (164) empty-statement -> . DELIM
    (165) expression-statement -> . statement-expression DELIM
    (168) selection-statement -> . if-statement M_quad
    (169) selection-statement -> . switch-statement
    (186) iteration-statement -> . while-statement M_quad
    (187) iteration-statement -> . for-statement M_quad
    (188) iteration-statement -> . do-statement M_quad
    (202) jump-statement -> . break-statement
    (203) jump-statement -> . continue-statement
    (204) jump-statement -> . goto-statement
    (205) jump-statement -> . return-statement
    (155) write-statement -> . CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM
    (158) read-statement -> . CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM
    (162) local-variable-declaration -> . type variable-declarators
    (163) local-constant-declaration -> . CONST type constant-declarators
    (166) statement-expression -> . invocation-expression
    (167) statement-expression -> . assignment
    (170) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block
    (171) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block
    (175) switch-statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block
    (189) while-statement -> . WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block
    (192) for-statement -> . FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block
    (191) do-statement -> . DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM
    (206) break-statement -> . BREAK DELIM
    (207) continue-statement -> . CONTINUE DELIM
    (208) goto-statement -> . GOTO IDENTIFIER DELIM
    (209) return-statement -> . RETURN expression-opt DELIM
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (96) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (97) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (105) assignment -> . prim-expression assignment-operator expression
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE
    (13) class-type -> . IDENTIFIER
    (34) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET
    (94) member-access -> . IDENTIFIER DOT IDENTIFIER
    (95) member-access -> . member-access DOT IDENTIFIER
    (102) prim-expression -> . IDENTIFIER
    (103) prim-expression -> . member-access
    (104) prim-expression -> . element-access
    (100) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (101) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    CASE            shift and go to state 300
    DEFAULT         shift and go to state 301
    IDENTIFIER      shift and go to state 36
    BLOCK_BEGIN     shift and go to state 49
    DELIM           shift and go to state 4
    CONSOLE         shift and go to state 53
    CONST           shift and go to state 48
    IF              shift and go to state 57
    SWITCH          shift and go to state 34
    WHILE           shift and go to state 31
    FOR             shift and go to state 21
    DO              shift and go to state 47
    BREAK           shift and go to state 42
    CONTINUE        shift and go to state 27
    GOTO            shift and go to state 7
    RETURN          shift and go to state 14
    BOOL            shift and go to state 43
    INT             shift and go to state 24
    UINT            shift and go to state 56
    CHAR            shift and go to state 30
    DOUBLE          shift and go to state 12

    return-statement               shift and go to state 16
    write-statement                shift and go to state 1
    member-access                  shift and go to state 2
    selection-statement            shift and go to state 29
    empty-statement                shift and go to state 32
    expression-statement           shift and go to state 3
    break-statement                shift and go to state 33
    prim-expression                shift and go to state 50
    element-access                 shift and go to state 18
    statement-expression           shift and go to state 5
    local-constant-declaration     shift and go to state 19
    switch-label                   shift and go to state 340
    statement                      shift and go to state 35
    assignment                     shift and go to state 54
    for-statement                  shift and go to state 6
    type                           shift and go to state 37
    read-statement                 shift and go to state 52
    do-statement                   shift and go to state 20
    array-type                     shift and go to state 39
    continue-statement             shift and go to state 22
    invocation-expression          shift and go to state 13
    labeled-statement              shift and go to state 8
    declaration-statement          shift and go to state 40
    switch-statement               shift and go to state 9
    iteration-statement            shift and go to state 41
    jump-statement                 shift and go to state 10
    local-variable-declaration     shift and go to state 23
    goto-statement                 shift and go to state 25
    if-statement                   shift and go to state 26
    statement-list                 shift and go to state 341
    class-type                     shift and go to state 58
    while-statement                shift and go to state 45
    simple-type                    shift and go to state 15
    block                          shift and go to state 28

state 304

    (176) switch-block -> BLOCK_BEGIN switch-sections-opt . BLOCK_END

    BLOCK_END       shift and go to state 342


state 305

    (177) switch-sections-opt -> switch-sections .
    (180) switch-sections -> switch-sections . switch-section
    (181) switch-section -> . switch-labels statement-list
    (182) switch-labels -> . switch-label
    (183) switch-labels -> . switch-labels switch-label
    (184) switch-label -> . CASE expression COLON
    (185) switch-label -> . DEFAULT COLON

    BLOCK_END       reduce using rule 177 (switch-sections-opt -> switch-sections .)
    CASE            shift and go to state 300
    DEFAULT         shift and go to state 301

    switch-section                 shift and go to state 343
    switch-labels                  shift and go to state 303
    switch-label                   shift and go to state 307

state 306

    (178) switch-sections-opt -> empty .

    BLOCK_END       reduce using rule 178 (switch-sections-opt -> empty .)


state 307

    (182) switch-labels -> switch-label .

    CASE            reduce using rule 182 (switch-labels -> switch-label .)
    DEFAULT         reduce using rule 182 (switch-labels -> switch-label .)
    IDENTIFIER      reduce using rule 182 (switch-labels -> switch-label .)
    BLOCK_BEGIN     reduce using rule 182 (switch-labels -> switch-label .)
    DELIM           reduce using rule 182 (switch-labels -> switch-label .)
    CONSOLE         reduce using rule 182 (switch-labels -> switch-label .)
    CONST           reduce using rule 182 (switch-labels -> switch-label .)
    IF              reduce using rule 182 (switch-labels -> switch-label .)
    SWITCH          reduce using rule 182 (switch-labels -> switch-label .)
    WHILE           reduce using rule 182 (switch-labels -> switch-label .)
    FOR             reduce using rule 182 (switch-labels -> switch-label .)
    DO              reduce using rule 182 (switch-labels -> switch-label .)
    BREAK           reduce using rule 182 (switch-labels -> switch-label .)
    CONTINUE        reduce using rule 182 (switch-labels -> switch-label .)
    GOTO            reduce using rule 182 (switch-labels -> switch-label .)
    RETURN          reduce using rule 182 (switch-labels -> switch-label .)
    BOOL            reduce using rule 182 (switch-labels -> switch-label .)
    INT             reduce using rule 182 (switch-labels -> switch-label .)
    UINT            reduce using rule 182 (switch-labels -> switch-label .)
    CHAR            reduce using rule 182 (switch-labels -> switch-label .)
    DOUBLE          reduce using rule 182 (switch-labels -> switch-label .)


state 308

    (82) array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .

    COMMA           reduce using rule 82 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    DELIM           reduce using rule 82 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    TIMES           reduce using rule 82 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    DIV             reduce using rule 82 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    MOD             reduce using rule 82 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    PLUS            reduce using rule 82 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    MINUS           reduce using rule 82 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    LSHIFT          reduce using rule 82 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    RSHIFT          reduce using rule 82 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    LT              reduce using rule 82 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    GT              reduce using rule 82 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    LE              reduce using rule 82 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    GE              reduce using rule 82 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    EQ              reduce using rule 82 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    NE              reduce using rule 82 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    BITAND          reduce using rule 82 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    BITXOR          reduce using rule 82 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    BITOR           reduce using rule 82 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    LOGAND          reduce using rule 82 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    CONDOP          reduce using rule 82 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    LOGOR           reduce using rule 82 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    CLOSE_BRACKET   reduce using rule 82 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    CLOSE_PAREN     reduce using rule 82 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    COLON           reduce using rule 82 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    BLOCK_END       reduce using rule 82 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)


state 309

    (191) do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad . expression CLOSE_PAREN DELIM
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (105) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (102) prim-expression -> . IDENTIFIER
    (103) prim-expression -> . member-access
    (104) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (94) member-access -> . IDENTIFIER DOT IDENTIFIER
    (95) member-access -> . member-access DOT IDENTIFIER
    (100) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (101) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . array-creation-expression
    (76) primary-expression -> . primary-no-array-creation-expression
    (77) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (87) primary-no-array-creation-expression -> . literal
    (88) primary-no-array-creation-expression -> . IDENTIFIER
    (89) primary-no-array-creation-expression -> . parenthesized-expression
    (90) primary-no-array-creation-expression -> . member-access
    (91) primary-no-array-creation-expression -> . invocation-expression
    (92) primary-no-array-creation-expression -> . element-access
    (219) literal -> . ICONST
    (220) literal -> . DCONST
    (221) literal -> . TRUE
    (222) literal -> . FALSE
    (93) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (96) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (97) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 81
    PLUS            shift and go to state 80
    MINUS           shift and go to state 73
    BITNOT          shift and go to state 96
    BITCOMP         shift and go to state 75
    NEW             shift and go to state 71
    ICONST          shift and go to state 86
    DCONST          shift and go to state 97
    TRUE            shift and go to state 91
    FALSE           shift and go to state 89
    OPEN_PAREN      shift and go to state 77

    unary-expression               shift and go to state 87
    exclusive-or-expression        shift and go to state 67
    member-access                  shift and go to state 68
    relational-expression          shift and go to state 69
    additive-expression            shift and go to state 72
    primary-no-array-creation-expression shift and go to state 85
    inclusive-or-expression        shift and go to state 74
    prim-expression                shift and go to state 50
    element-access                 shift and go to state 76
    literal                        shift and go to state 84
    conditional-expression         shift and go to state 78
    conditional-and-expression     shift and go to state 79
    array-creation-expression      shift and go to state 70
    assignment                     shift and go to state 83
    equality-expression            shift and go to state 90
    shift-expression               shift and go to state 92
    and-expression                 shift and go to state 93
    multiplicative-expression      shift and go to state 94
    conditional-or-expression      shift and go to state 100
    primary-expression             shift and go to state 98
    invocation-expression          shift and go to state 99
    expression                     shift and go to state 344
    parenthesized-expression       shift and go to state 101

state 310

    (138) method-body -> DELIM .

    CONST           reduce using rule 138 (method-body -> DELIM .)
    BITCOMP         reduce using rule 138 (method-body -> DELIM .)
    PUBLIC          reduce using rule 138 (method-body -> DELIM .)
    PRIVATE         reduce using rule 138 (method-body -> DELIM .)
    VOID            reduce using rule 138 (method-body -> DELIM .)
    IDENTIFIER      reduce using rule 138 (method-body -> DELIM .)
    BOOL            reduce using rule 138 (method-body -> DELIM .)
    INT             reduce using rule 138 (method-body -> DELIM .)
    UINT            reduce using rule 138 (method-body -> DELIM .)
    CHAR            reduce using rule 138 (method-body -> DELIM .)
    DOUBLE          reduce using rule 138 (method-body -> DELIM .)
    BLOCK_END       reduce using rule 138 (method-body -> DELIM .)


state 311

    (125) method-declaration -> method-header method-body .

    CONST           reduce using rule 125 (method-declaration -> method-header method-body .)
    BITCOMP         reduce using rule 125 (method-declaration -> method-header method-body .)
    PUBLIC          reduce using rule 125 (method-declaration -> method-header method-body .)
    PRIVATE         reduce using rule 125 (method-declaration -> method-header method-body .)
    VOID            reduce using rule 125 (method-declaration -> method-header method-body .)
    IDENTIFIER      reduce using rule 125 (method-declaration -> method-header method-body .)
    BOOL            reduce using rule 125 (method-declaration -> method-header method-body .)
    INT             reduce using rule 125 (method-declaration -> method-header method-body .)
    UINT            reduce using rule 125 (method-declaration -> method-header method-body .)
    CHAR            reduce using rule 125 (method-declaration -> method-header method-body .)
    DOUBLE          reduce using rule 125 (method-declaration -> method-header method-body .)
    BLOCK_END       reduce using rule 125 (method-declaration -> method-header method-body .)


state 312

    (137) method-body -> block .

    CONST           reduce using rule 137 (method-body -> block .)
    BITCOMP         reduce using rule 137 (method-body -> block .)
    PUBLIC          reduce using rule 137 (method-body -> block .)
    PRIVATE         reduce using rule 137 (method-body -> block .)
    VOID            reduce using rule 137 (method-body -> block .)
    IDENTIFIER      reduce using rule 137 (method-body -> block .)
    BOOL            reduce using rule 137 (method-body -> block .)
    INT             reduce using rule 137 (method-body -> block .)
    UINT            reduce using rule 137 (method-body -> block .)
    CHAR            reduce using rule 137 (method-body -> block .)
    DOUBLE          reduce using rule 137 (method-body -> block .)
    BLOCK_END       reduce using rule 137 (method-body -> block .)


state 313

    (129) method-header -> VOID member-name . OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN

    OPEN_PAREN      shift and go to state 345


state 314

    (132) member-name -> IDENTIFIER .

    OPEN_PAREN      reduce using rule 132 (member-name -> IDENTIFIER .)


state 315

    (25) constant-declaration -> CONST simple-type . constant-declarators DELIM
    (35) constant-declarators -> . constant-declarator
    (36) constant-declarators -> . constant-declarators COMMA constant-declarator
    (37) constant-declarator -> . IDENTIFIER ASSIGN expression

    IDENTIFIER      shift and go to state 194

    constant-declarators           shift and go to state 346
    constant-declarator            shift and go to state 195

state 316

    (216) destructor-declaration -> BITCOMP IDENTIFIER . OPEN_PAREN CLOSE_PAREN destructor-body

    OPEN_PAREN      shift and go to state 347


state 317

    (118) field-declaration -> type variable-declarators . DELIM
    (122) variable-declarators -> variable-declarators . COMMA variable-declarator

    DELIM           shift and go to state 348
    COMMA           shift and go to state 190


state 318

    (128) method-header -> type member-name . OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN

    OPEN_PAREN      shift and go to state 349


state 319

    (132) member-name -> IDENTIFIER .
    (123) variable-declarator -> IDENTIFIER .
    (124) variable-declarator -> IDENTIFIER . ASSIGN variable-initializer

    OPEN_PAREN      reduce using rule 132 (member-name -> IDENTIFIER .)
    DELIM           reduce using rule 123 (variable-declarator -> IDENTIFIER .)
    COMMA           reduce using rule 123 (variable-declarator -> IDENTIFIER .)
    ASSIGN          shift and go to state 191


state 320

    (14) class-body -> BLOCK_BEGIN class-member-declarations-opt BLOCK_END .

    DELIM           reduce using rule 14 (class-body -> BLOCK_BEGIN class-member-declarations-opt BLOCK_END .)
    CLASS           reduce using rule 14 (class-body -> BLOCK_BEGIN class-member-declarations-opt BLOCK_END .)
    $end            reduce using rule 14 (class-body -> BLOCK_BEGIN class-member-declarations-opt BLOCK_END .)


state 321

    (18) class-member-declarations -> class-member-declarations class-member-declaration .

    CONST           reduce using rule 18 (class-member-declarations -> class-member-declarations class-member-declaration .)
    BITCOMP         reduce using rule 18 (class-member-declarations -> class-member-declarations class-member-declaration .)
    PUBLIC          reduce using rule 18 (class-member-declarations -> class-member-declarations class-member-declaration .)
    PRIVATE         reduce using rule 18 (class-member-declarations -> class-member-declarations class-member-declaration .)
    VOID            reduce using rule 18 (class-member-declarations -> class-member-declarations class-member-declaration .)
    IDENTIFIER      reduce using rule 18 (class-member-declarations -> class-member-declarations class-member-declaration .)
    BOOL            reduce using rule 18 (class-member-declarations -> class-member-declarations class-member-declaration .)
    INT             reduce using rule 18 (class-member-declarations -> class-member-declarations class-member-declaration .)
    UINT            reduce using rule 18 (class-member-declarations -> class-member-declarations class-member-declaration .)
    CHAR            reduce using rule 18 (class-member-declarations -> class-member-declarations class-member-declaration .)
    DOUBLE          reduce using rule 18 (class-member-declarations -> class-member-declarations class-member-declaration .)
    BLOCK_END       reduce using rule 18 (class-member-declarations -> class-member-declarations class-member-declaration .)


state 322

    (213) constructor-declarator -> IDENTIFIER OPEN_PAREN . formal-parameter-list-opt CLOSE_PAREN
    (130) formal-parameter-list-opt -> . formal-parameter-list
    (131) formal-parameter-list-opt -> . empty
    (133) formal-parameter-list -> . fixed-parameters
    (223) empty -> .
    (134) fixed-parameters -> . fixed-parameter
    (135) fixed-parameters -> . fixed-parameters COMMA fixed-parameter
    (136) fixed-parameter -> . type IDENTIFIER
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE
    (13) class-type -> . IDENTIFIER
    (34) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET

    CLOSE_PAREN     reduce using rule 223 (empty -> .)
    BOOL            shift and go to state 43
    INT             shift and go to state 24
    UINT            shift and go to state 56
    CHAR            shift and go to state 30
    DOUBLE          shift and go to state 12
    IDENTIFIER      shift and go to state 122

    array-type                     shift and go to state 39
    fixed-parameters               shift and go to state 351
    simple-type                    shift and go to state 15
    formal-parameter-list-opt      shift and go to state 352
    class-type                     shift and go to state 58
    formal-parameter-list          shift and go to state 355
    type                           shift and go to state 350
    empty                          shift and go to state 354
    fixed-parameter                shift and go to state 353

state 323

    (212) constructor-declaration -> constructor-declarator constructor-body .

    CONST           reduce using rule 212 (constructor-declaration -> constructor-declarator constructor-body .)
    BITCOMP         reduce using rule 212 (constructor-declaration -> constructor-declarator constructor-body .)
    PUBLIC          reduce using rule 212 (constructor-declaration -> constructor-declarator constructor-body .)
    PRIVATE         reduce using rule 212 (constructor-declaration -> constructor-declarator constructor-body .)
    VOID            reduce using rule 212 (constructor-declaration -> constructor-declarator constructor-body .)
    IDENTIFIER      reduce using rule 212 (constructor-declaration -> constructor-declarator constructor-body .)
    BOOL            reduce using rule 212 (constructor-declaration -> constructor-declarator constructor-body .)
    INT             reduce using rule 212 (constructor-declaration -> constructor-declarator constructor-body .)
    UINT            reduce using rule 212 (constructor-declaration -> constructor-declarator constructor-body .)
    CHAR            reduce using rule 212 (constructor-declaration -> constructor-declarator constructor-body .)
    DOUBLE          reduce using rule 212 (constructor-declaration -> constructor-declarator constructor-body .)
    BLOCK_END       reduce using rule 212 (constructor-declaration -> constructor-declarator constructor-body .)


state 324

    (215) constructor-body -> DELIM .

    CONST           reduce using rule 215 (constructor-body -> DELIM .)
    BITCOMP         reduce using rule 215 (constructor-body -> DELIM .)
    PUBLIC          reduce using rule 215 (constructor-body -> DELIM .)
    PRIVATE         reduce using rule 215 (constructor-body -> DELIM .)
    VOID            reduce using rule 215 (constructor-body -> DELIM .)
    IDENTIFIER      reduce using rule 215 (constructor-body -> DELIM .)
    BOOL            reduce using rule 215 (constructor-body -> DELIM .)
    INT             reduce using rule 215 (constructor-body -> DELIM .)
    UINT            reduce using rule 215 (constructor-body -> DELIM .)
    CHAR            reduce using rule 215 (constructor-body -> DELIM .)
    DOUBLE          reduce using rule 215 (constructor-body -> DELIM .)
    BLOCK_END       reduce using rule 215 (constructor-body -> DELIM .)


state 325

    (214) constructor-body -> block .

    CONST           reduce using rule 214 (constructor-body -> block .)
    BITCOMP         reduce using rule 214 (constructor-body -> block .)
    PUBLIC          reduce using rule 214 (constructor-body -> block .)
    PRIVATE         reduce using rule 214 (constructor-body -> block .)
    VOID            reduce using rule 214 (constructor-body -> block .)
    IDENTIFIER      reduce using rule 214 (constructor-body -> block .)
    BOOL            reduce using rule 214 (constructor-body -> block .)
    INT             reduce using rule 214 (constructor-body -> block .)
    UINT            reduce using rule 214 (constructor-body -> block .)
    CHAR            reduce using rule 214 (constructor-body -> block .)
    DOUBLE          reduce using rule 214 (constructor-body -> block .)
    BLOCK_END       reduce using rule 214 (constructor-body -> block .)


state 326

    (24) constant-declaration -> modifier CONST . simple-type constant-declarators DELIM
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE

    BOOL            shift and go to state 43
    INT             shift and go to state 24
    UINT            shift and go to state 56
    CHAR            shift and go to state 30
    DOUBLE          shift and go to state 12

    simple-type                    shift and go to state 356

state 327

    (127) method-header -> modifier VOID . member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (132) member-name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 314

    member-name                    shift and go to state 357

state 328

    (117) field-declaration -> modifier type . variable-declarators DELIM
    (126) method-header -> modifier type . member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (121) variable-declarators -> . variable-declarator
    (122) variable-declarators -> . variable-declarators COMMA variable-declarator
    (132) member-name -> . IDENTIFIER
    (123) variable-declarator -> . IDENTIFIER
    (124) variable-declarator -> . IDENTIFIER ASSIGN variable-initializer

    IDENTIFIER      shift and go to state 319

    variable-declarator            shift and go to state 115
    variable-declarators           shift and go to state 358
    member-name                    shift and go to state 359

state 329

    (155) write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN . DELIM

    DELIM           shift and go to state 360


state 330

    (157) print-list -> expression COMMA . print-list
    (156) print-list -> . expression
    (157) print-list -> . expression COMMA print-list
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (105) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (102) prim-expression -> . IDENTIFIER
    (103) prim-expression -> . member-access
    (104) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (94) member-access -> . IDENTIFIER DOT IDENTIFIER
    (95) member-access -> . member-access DOT IDENTIFIER
    (100) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (101) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) primary-expression -> . array-creation-expression
    (76) primary-expression -> . primary-no-array-creation-expression
    (77) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (87) primary-no-array-creation-expression -> . literal
    (88) primary-no-array-creation-expression -> . IDENTIFIER
    (89) primary-no-array-creation-expression -> . parenthesized-expression
    (90) primary-no-array-creation-expression -> . member-access
    (91) primary-no-array-creation-expression -> . invocation-expression
    (92) primary-no-array-creation-expression -> . element-access
    (219) literal -> . ICONST
    (220) literal -> . DCONST
    (221) literal -> . TRUE
    (222) literal -> . FALSE
    (93) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (96) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (97) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 81
    PLUS            shift and go to state 80
    MINUS           shift and go to state 73
    BITNOT          shift and go to state 96
    BITCOMP         shift and go to state 75
    NEW             shift and go to state 71
    ICONST          shift and go to state 86
    DCONST          shift and go to state 97
    TRUE            shift and go to state 91
    FALSE           shift and go to state 89
    OPEN_PAREN      shift and go to state 77

    unary-expression               shift and go to state 87
    exclusive-or-expression        shift and go to state 67
    member-access                  shift and go to state 68
    relational-expression          shift and go to state 69
    additive-expression            shift and go to state 72
    primary-no-array-creation-expression shift and go to state 85
    inclusive-or-expression        shift and go to state 74
    prim-expression                shift and go to state 50
    element-access                 shift and go to state 76
    literal                        shift and go to state 84
    conditional-expression         shift and go to state 78
    conditional-and-expression     shift and go to state 79
    array-creation-expression      shift and go to state 70
    assignment                     shift and go to state 83
    and-expression                 shift and go to state 93
    equality-expression            shift and go to state 90
    shift-expression               shift and go to state 92
    print-list                     shift and go to state 361
    multiplicative-expression      shift and go to state 94
    conditional-or-expression      shift and go to state 100
    primary-expression             shift and go to state 98
    invocation-expression          shift and go to state 99
    expression                     shift and go to state 290
    parenthesized-expression       shift and go to state 101

state 331

    (158) read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN . DELIM

    DELIM           shift and go to state 362


state 332

    (170) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .
    (171) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block . ELSE M_else block

    IDENTIFIER      reduce using rule 170 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    BLOCK_BEGIN     reduce using rule 170 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    DELIM           reduce using rule 170 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    CONSOLE         reduce using rule 170 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    CONST           reduce using rule 170 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    IF              reduce using rule 170 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    SWITCH          reduce using rule 170 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    WHILE           reduce using rule 170 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    FOR             reduce using rule 170 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    DO              reduce using rule 170 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    BREAK           reduce using rule 170 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    CONTINUE        reduce using rule 170 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    GOTO            reduce using rule 170 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    RETURN          reduce using rule 170 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    BOOL            reduce using rule 170 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    INT             reduce using rule 170 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    UINT            reduce using rule 170 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    CHAR            reduce using rule 170 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    DOUBLE          reduce using rule 170 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    CASE            reduce using rule 170 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    DEFAULT         reduce using rule 170 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    BLOCK_END       reduce using rule 170 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    $end            reduce using rule 170 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    ELSE            shift and go to state 363


state 333

    (78) array-initializer-opt -> array-initializer .

    TIMES           reduce using rule 78 (array-initializer-opt -> array-initializer .)
    DIV             reduce using rule 78 (array-initializer-opt -> array-initializer .)
    MOD             reduce using rule 78 (array-initializer-opt -> array-initializer .)
    PLUS            reduce using rule 78 (array-initializer-opt -> array-initializer .)
    MINUS           reduce using rule 78 (array-initializer-opt -> array-initializer .)
    LSHIFT          reduce using rule 78 (array-initializer-opt -> array-initializer .)
    RSHIFT          reduce using rule 78 (array-initializer-opt -> array-initializer .)
    LT              reduce using rule 78 (array-initializer-opt -> array-initializer .)
    GT              reduce using rule 78 (array-initializer-opt -> array-initializer .)
    LE              reduce using rule 78 (array-initializer-opt -> array-initializer .)
    GE              reduce using rule 78 (array-initializer-opt -> array-initializer .)
    EQ              reduce using rule 78 (array-initializer-opt -> array-initializer .)
    NE              reduce using rule 78 (array-initializer-opt -> array-initializer .)
    BITAND          reduce using rule 78 (array-initializer-opt -> array-initializer .)
    BITXOR          reduce using rule 78 (array-initializer-opt -> array-initializer .)
    BITOR           reduce using rule 78 (array-initializer-opt -> array-initializer .)
    LOGAND          reduce using rule 78 (array-initializer-opt -> array-initializer .)
    CONDOP          reduce using rule 78 (array-initializer-opt -> array-initializer .)
    LOGOR           reduce using rule 78 (array-initializer-opt -> array-initializer .)
    DELIM           reduce using rule 78 (array-initializer-opt -> array-initializer .)
    CLOSE_BRACKET   reduce using rule 78 (array-initializer-opt -> array-initializer .)
    COMMA           reduce using rule 78 (array-initializer-opt -> array-initializer .)
    CLOSE_PAREN     reduce using rule 78 (array-initializer-opt -> array-initializer .)
    COLON           reduce using rule 78 (array-initializer-opt -> array-initializer .)
    BLOCK_END       reduce using rule 78 (array-initializer-opt -> array-initializer .)


state 334

    (77) array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .

    TIMES           reduce using rule 77 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    DIV             reduce using rule 77 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    MOD             reduce using rule 77 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    PLUS            reduce using rule 77 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    MINUS           reduce using rule 77 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    LSHIFT          reduce using rule 77 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    RSHIFT          reduce using rule 77 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    LT              reduce using rule 77 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    GT              reduce using rule 77 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    LE              reduce using rule 77 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    GE              reduce using rule 77 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    EQ              reduce using rule 77 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    NE              reduce using rule 77 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    BITAND          reduce using rule 77 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    BITXOR          reduce using rule 77 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    BITOR           reduce using rule 77 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    LOGAND          reduce using rule 77 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    CONDOP          reduce using rule 77 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    LOGOR           reduce using rule 77 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    COMMA           reduce using rule 77 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    CLOSE_PAREN     reduce using rule 77 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    BLOCK_END       reduce using rule 77 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    CLOSE_BRACKET   reduce using rule 77 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    DELIM           reduce using rule 77 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    COLON           reduce using rule 77 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)


state 335

    (79) array-initializer-opt -> empty .

    TIMES           reduce using rule 79 (array-initializer-opt -> empty .)
    DIV             reduce using rule 79 (array-initializer-opt -> empty .)
    MOD             reduce using rule 79 (array-initializer-opt -> empty .)
    PLUS            reduce using rule 79 (array-initializer-opt -> empty .)
    MINUS           reduce using rule 79 (array-initializer-opt -> empty .)
    LSHIFT          reduce using rule 79 (array-initializer-opt -> empty .)
    RSHIFT          reduce using rule 79 (array-initializer-opt -> empty .)
    LT              reduce using rule 79 (array-initializer-opt -> empty .)
    GT              reduce using rule 79 (array-initializer-opt -> empty .)
    LE              reduce using rule 79 (array-initializer-opt -> empty .)
    GE              reduce using rule 79 (array-initializer-opt -> empty .)
    EQ              reduce using rule 79 (array-initializer-opt -> empty .)
    NE              reduce using rule 79 (array-initializer-opt -> empty .)
    BITAND          reduce using rule 79 (array-initializer-opt -> empty .)
    BITXOR          reduce using rule 79 (array-initializer-opt -> empty .)
    BITOR           reduce using rule 79 (array-initializer-opt -> empty .)
    LOGAND          reduce using rule 79 (array-initializer-opt -> empty .)
    CONDOP          reduce using rule 79 (array-initializer-opt -> empty .)
    LOGOR           reduce using rule 79 (array-initializer-opt -> empty .)
    DELIM           reduce using rule 79 (array-initializer-opt -> empty .)
    CLOSE_BRACKET   reduce using rule 79 (array-initializer-opt -> empty .)
    COMMA           reduce using rule 79 (array-initializer-opt -> empty .)
    CLOSE_PAREN     reduce using rule 79 (array-initializer-opt -> empty .)
    COLON           reduce using rule 79 (array-initializer-opt -> empty .)
    BLOCK_END       reduce using rule 79 (array-initializer-opt -> empty .)


state 336

    (192) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM . M_quad for-iterator-opt CLOSE_PAREN M_quad block
    (174) M_quad -> . empty
    (223) empty -> .

    IDENTIFIER      reduce using rule 223 (empty -> .)
    CLOSE_PAREN     reduce using rule 223 (empty -> .)

    M_quad                         shift and go to state 364
    empty                          shift and go to state 64

state 337

    (189) while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .

    IDENTIFIER      reduce using rule 189 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    BLOCK_BEGIN     reduce using rule 189 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    DELIM           reduce using rule 189 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    CONSOLE         reduce using rule 189 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    CONST           reduce using rule 189 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    IF              reduce using rule 189 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    SWITCH          reduce using rule 189 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    WHILE           reduce using rule 189 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    FOR             reduce using rule 189 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    DO              reduce using rule 189 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    BREAK           reduce using rule 189 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    CONTINUE        reduce using rule 189 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    GOTO            reduce using rule 189 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    RETURN          reduce using rule 189 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    BOOL            reduce using rule 189 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    INT             reduce using rule 189 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    UINT            reduce using rule 189 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    CHAR            reduce using rule 189 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    DOUBLE          reduce using rule 189 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    $end            reduce using rule 189 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    CASE            reduce using rule 189 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    DEFAULT         reduce using rule 189 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    BLOCK_END       reduce using rule 189 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)


state 338

    (184) switch-label -> CASE expression . COLON

    COLON           shift and go to state 365


state 339

    (185) switch-label -> DEFAULT COLON .

    CASE            reduce using rule 185 (switch-label -> DEFAULT COLON .)
    DEFAULT         reduce using rule 185 (switch-label -> DEFAULT COLON .)
    IDENTIFIER      reduce using rule 185 (switch-label -> DEFAULT COLON .)
    BLOCK_BEGIN     reduce using rule 185 (switch-label -> DEFAULT COLON .)
    DELIM           reduce using rule 185 (switch-label -> DEFAULT COLON .)
    CONSOLE         reduce using rule 185 (switch-label -> DEFAULT COLON .)
    CONST           reduce using rule 185 (switch-label -> DEFAULT COLON .)
    IF              reduce using rule 185 (switch-label -> DEFAULT COLON .)
    SWITCH          reduce using rule 185 (switch-label -> DEFAULT COLON .)
    WHILE           reduce using rule 185 (switch-label -> DEFAULT COLON .)
    FOR             reduce using rule 185 (switch-label -> DEFAULT COLON .)
    DO              reduce using rule 185 (switch-label -> DEFAULT COLON .)
    BREAK           reduce using rule 185 (switch-label -> DEFAULT COLON .)
    CONTINUE        reduce using rule 185 (switch-label -> DEFAULT COLON .)
    GOTO            reduce using rule 185 (switch-label -> DEFAULT COLON .)
    RETURN          reduce using rule 185 (switch-label -> DEFAULT COLON .)
    BOOL            reduce using rule 185 (switch-label -> DEFAULT COLON .)
    INT             reduce using rule 185 (switch-label -> DEFAULT COLON .)
    UINT            reduce using rule 185 (switch-label -> DEFAULT COLON .)
    CHAR            reduce using rule 185 (switch-label -> DEFAULT COLON .)
    DOUBLE          reduce using rule 185 (switch-label -> DEFAULT COLON .)


state 340

    (183) switch-labels -> switch-labels switch-label .

    CASE            reduce using rule 183 (switch-labels -> switch-labels switch-label .)
    DEFAULT         reduce using rule 183 (switch-labels -> switch-labels switch-label .)
    IDENTIFIER      reduce using rule 183 (switch-labels -> switch-labels switch-label .)
    BLOCK_BEGIN     reduce using rule 183 (switch-labels -> switch-labels switch-label .)
    DELIM           reduce using rule 183 (switch-labels -> switch-labels switch-label .)
    CONSOLE         reduce using rule 183 (switch-labels -> switch-labels switch-label .)
    CONST           reduce using rule 183 (switch-labels -> switch-labels switch-label .)
    IF              reduce using rule 183 (switch-labels -> switch-labels switch-label .)
    SWITCH          reduce using rule 183 (switch-labels -> switch-labels switch-label .)
    WHILE           reduce using rule 183 (switch-labels -> switch-labels switch-label .)
    FOR             reduce using rule 183 (switch-labels -> switch-labels switch-label .)
    DO              reduce using rule 183 (switch-labels -> switch-labels switch-label .)
    BREAK           reduce using rule 183 (switch-labels -> switch-labels switch-label .)
    CONTINUE        reduce using rule 183 (switch-labels -> switch-labels switch-label .)
    GOTO            reduce using rule 183 (switch-labels -> switch-labels switch-label .)
    RETURN          reduce using rule 183 (switch-labels -> switch-labels switch-label .)
    BOOL            reduce using rule 183 (switch-labels -> switch-labels switch-label .)
    INT             reduce using rule 183 (switch-labels -> switch-labels switch-label .)
    UINT            reduce using rule 183 (switch-labels -> switch-labels switch-label .)
    CHAR            reduce using rule 183 (switch-labels -> switch-labels switch-label .)
    DOUBLE          reduce using rule 183 (switch-labels -> switch-labels switch-label .)


state 341

    (181) switch-section -> switch-labels statement-list .
    (144) statement-list -> statement-list . statement
    (145) statement -> . labeled-statement
    (146) statement -> . declaration-statement
    (147) statement -> . block
    (148) statement -> . empty-statement
    (149) statement -> . expression-statement
    (150) statement -> . selection-statement
    (151) statement -> . iteration-statement
    (152) statement -> . jump-statement
    (153) statement -> . write-statement
    (154) statement -> . read-statement
    (159) labeled-statement -> . IDENTIFIER COLON statement
    (160) declaration-statement -> . local-variable-declaration DELIM
    (161) declaration-statement -> . local-constant-declaration DELIM
    (139) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END
    (164) empty-statement -> . DELIM
    (165) expression-statement -> . statement-expression DELIM
    (168) selection-statement -> . if-statement M_quad
    (169) selection-statement -> . switch-statement
    (186) iteration-statement -> . while-statement M_quad
    (187) iteration-statement -> . for-statement M_quad
    (188) iteration-statement -> . do-statement M_quad
    (202) jump-statement -> . break-statement
    (203) jump-statement -> . continue-statement
    (204) jump-statement -> . goto-statement
    (205) jump-statement -> . return-statement
    (155) write-statement -> . CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM
    (158) read-statement -> . CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM
    (162) local-variable-declaration -> . type variable-declarators
    (163) local-constant-declaration -> . CONST type constant-declarators
    (166) statement-expression -> . invocation-expression
    (167) statement-expression -> . assignment
    (170) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block
    (171) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block
    (175) switch-statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block
    (189) while-statement -> . WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block
    (192) for-statement -> . FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block
    (191) do-statement -> . DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM
    (206) break-statement -> . BREAK DELIM
    (207) continue-statement -> . CONTINUE DELIM
    (208) goto-statement -> . GOTO IDENTIFIER DELIM
    (209) return-statement -> . RETURN expression-opt DELIM
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (96) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (97) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (105) assignment -> . prim-expression assignment-operator expression
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE
    (13) class-type -> . IDENTIFIER
    (34) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET
    (94) member-access -> . IDENTIFIER DOT IDENTIFIER
    (95) member-access -> . member-access DOT IDENTIFIER
    (102) prim-expression -> . IDENTIFIER
    (103) prim-expression -> . member-access
    (104) prim-expression -> . element-access
    (100) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (101) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    CASE            reduce using rule 181 (switch-section -> switch-labels statement-list .)
    DEFAULT         reduce using rule 181 (switch-section -> switch-labels statement-list .)
    BLOCK_END       reduce using rule 181 (switch-section -> switch-labels statement-list .)
    IDENTIFIER      shift and go to state 36
    BLOCK_BEGIN     shift and go to state 49
    DELIM           shift and go to state 4
    CONSOLE         shift and go to state 53
    CONST           shift and go to state 48
    IF              shift and go to state 57
    SWITCH          shift and go to state 34
    WHILE           shift and go to state 31
    FOR             shift and go to state 21
    DO              shift and go to state 47
    BREAK           shift and go to state 42
    CONTINUE        shift and go to state 27
    GOTO            shift and go to state 7
    RETURN          shift and go to state 14
    BOOL            shift and go to state 43
    INT             shift and go to state 24
    UINT            shift and go to state 56
    CHAR            shift and go to state 30
    DOUBLE          shift and go to state 12

    return-statement               shift and go to state 16
    write-statement                shift and go to state 1
    member-access                  shift and go to state 2
    selection-statement            shift and go to state 29
    empty-statement                shift and go to state 32
    expression-statement           shift and go to state 3
    break-statement                shift and go to state 33
    prim-expression                shift and go to state 50
    element-access                 shift and go to state 18
    statement-expression           shift and go to state 5
    local-constant-declaration     shift and go to state 19
    statement                      shift and go to state 119
    assignment                     shift and go to state 54
    for-statement                  shift and go to state 6
    type                           shift and go to state 37
    read-statement                 shift and go to state 52
    do-statement                   shift and go to state 20
    array-type                     shift and go to state 39
    continue-statement             shift and go to state 22
    invocation-expression          shift and go to state 13
    labeled-statement              shift and go to state 8
    declaration-statement          shift and go to state 40
    switch-statement               shift and go to state 9
    jump-statement                 shift and go to state 10
    iteration-statement            shift and go to state 41
    local-variable-declaration     shift and go to state 23
    goto-statement                 shift and go to state 25
    if-statement                   shift and go to state 26
    class-type                     shift and go to state 58
    while-statement                shift and go to state 45
    simple-type                    shift and go to state 15
    block                          shift and go to state 28

state 342

    (176) switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .

    IDENTIFIER      reduce using rule 176 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    BLOCK_BEGIN     reduce using rule 176 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    DELIM           reduce using rule 176 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    CONSOLE         reduce using rule 176 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    CONST           reduce using rule 176 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    IF              reduce using rule 176 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    SWITCH          reduce using rule 176 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    WHILE           reduce using rule 176 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    FOR             reduce using rule 176 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    DO              reduce using rule 176 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    BREAK           reduce using rule 176 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    CONTINUE        reduce using rule 176 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    GOTO            reduce using rule 176 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    RETURN          reduce using rule 176 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    BOOL            reduce using rule 176 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    INT             reduce using rule 176 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    UINT            reduce using rule 176 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    CHAR            reduce using rule 176 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    DOUBLE          reduce using rule 176 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    $end            reduce using rule 176 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    BLOCK_END       reduce using rule 176 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    CASE            reduce using rule 176 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    DEFAULT         reduce using rule 176 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)


state 343

    (180) switch-sections -> switch-sections switch-section .

    CASE            reduce using rule 180 (switch-sections -> switch-sections switch-section .)
    DEFAULT         reduce using rule 180 (switch-sections -> switch-sections switch-section .)
    BLOCK_END       reduce using rule 180 (switch-sections -> switch-sections switch-section .)


state 344

    (191) do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression . CLOSE_PAREN DELIM

    CLOSE_PAREN     shift and go to state 366


state 345

    (129) method-header -> VOID member-name OPEN_PAREN . formal-parameter-list-opt CLOSE_PAREN
    (130) formal-parameter-list-opt -> . formal-parameter-list
    (131) formal-parameter-list-opt -> . empty
    (133) formal-parameter-list -> . fixed-parameters
    (223) empty -> .
    (134) fixed-parameters -> . fixed-parameter
    (135) fixed-parameters -> . fixed-parameters COMMA fixed-parameter
    (136) fixed-parameter -> . type IDENTIFIER
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE
    (13) class-type -> . IDENTIFIER
    (34) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET

    CLOSE_PAREN     reduce using rule 223 (empty -> .)
    BOOL            shift and go to state 43
    INT             shift and go to state 24
    UINT            shift and go to state 56
    CHAR            shift and go to state 30
    DOUBLE          shift and go to state 12
    IDENTIFIER      shift and go to state 122

    array-type                     shift and go to state 39
    fixed-parameters               shift and go to state 351
    simple-type                    shift and go to state 15
    formal-parameter-list-opt      shift and go to state 367
    class-type                     shift and go to state 58
    formal-parameter-list          shift and go to state 355
    type                           shift and go to state 350
    empty                          shift and go to state 354
    fixed-parameter                shift and go to state 353

state 346

    (25) constant-declaration -> CONST simple-type constant-declarators . DELIM
    (36) constant-declarators -> constant-declarators . COMMA constant-declarator

    DELIM           shift and go to state 368
    COMMA           shift and go to state 244


state 347

    (216) destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN . CLOSE_PAREN destructor-body

    CLOSE_PAREN     shift and go to state 369


state 348

    (118) field-declaration -> type variable-declarators DELIM .

    CONST           reduce using rule 118 (field-declaration -> type variable-declarators DELIM .)
    BITCOMP         reduce using rule 118 (field-declaration -> type variable-declarators DELIM .)
    PUBLIC          reduce using rule 118 (field-declaration -> type variable-declarators DELIM .)
    PRIVATE         reduce using rule 118 (field-declaration -> type variable-declarators DELIM .)
    VOID            reduce using rule 118 (field-declaration -> type variable-declarators DELIM .)
    IDENTIFIER      reduce using rule 118 (field-declaration -> type variable-declarators DELIM .)
    BOOL            reduce using rule 118 (field-declaration -> type variable-declarators DELIM .)
    INT             reduce using rule 118 (field-declaration -> type variable-declarators DELIM .)
    UINT            reduce using rule 118 (field-declaration -> type variable-declarators DELIM .)
    CHAR            reduce using rule 118 (field-declaration -> type variable-declarators DELIM .)
    DOUBLE          reduce using rule 118 (field-declaration -> type variable-declarators DELIM .)
    BLOCK_END       reduce using rule 118 (field-declaration -> type variable-declarators DELIM .)


state 349

    (128) method-header -> type member-name OPEN_PAREN . formal-parameter-list-opt CLOSE_PAREN
    (130) formal-parameter-list-opt -> . formal-parameter-list
    (131) formal-parameter-list-opt -> . empty
    (133) formal-parameter-list -> . fixed-parameters
    (223) empty -> .
    (134) fixed-parameters -> . fixed-parameter
    (135) fixed-parameters -> . fixed-parameters COMMA fixed-parameter
    (136) fixed-parameter -> . type IDENTIFIER
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE
    (13) class-type -> . IDENTIFIER
    (34) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET

    CLOSE_PAREN     reduce using rule 223 (empty -> .)
    BOOL            shift and go to state 43
    INT             shift and go to state 24
    UINT            shift and go to state 56
    CHAR            shift and go to state 30
    DOUBLE          shift and go to state 12
    IDENTIFIER      shift and go to state 122

    array-type                     shift and go to state 39
    fixed-parameters               shift and go to state 351
    simple-type                    shift and go to state 15
    formal-parameter-list-opt      shift and go to state 370
    class-type                     shift and go to state 58
    fixed-parameter                shift and go to state 353
    type                           shift and go to state 350
    empty                          shift and go to state 354
    formal-parameter-list          shift and go to state 355

state 350

    (136) fixed-parameter -> type . IDENTIFIER

    IDENTIFIER      shift and go to state 371


state 351

    (133) formal-parameter-list -> fixed-parameters .
    (135) fixed-parameters -> fixed-parameters . COMMA fixed-parameter

    CLOSE_PAREN     reduce using rule 133 (formal-parameter-list -> fixed-parameters .)
    COMMA           shift and go to state 372


state 352

    (213) constructor-declarator -> IDENTIFIER OPEN_PAREN formal-parameter-list-opt . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 373


state 353

    (134) fixed-parameters -> fixed-parameter .

    COMMA           reduce using rule 134 (fixed-parameters -> fixed-parameter .)
    CLOSE_PAREN     reduce using rule 134 (fixed-parameters -> fixed-parameter .)


state 354

    (131) formal-parameter-list-opt -> empty .

    CLOSE_PAREN     reduce using rule 131 (formal-parameter-list-opt -> empty .)


state 355

    (130) formal-parameter-list-opt -> formal-parameter-list .

    CLOSE_PAREN     reduce using rule 130 (formal-parameter-list-opt -> formal-parameter-list .)


state 356

    (24) constant-declaration -> modifier CONST simple-type . constant-declarators DELIM
    (35) constant-declarators -> . constant-declarator
    (36) constant-declarators -> . constant-declarators COMMA constant-declarator
    (37) constant-declarator -> . IDENTIFIER ASSIGN expression

    IDENTIFIER      shift and go to state 194

    constant-declarators           shift and go to state 374
    constant-declarator            shift and go to state 195

state 357

    (127) method-header -> modifier VOID member-name . OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN

    OPEN_PAREN      shift and go to state 375


state 358

    (117) field-declaration -> modifier type variable-declarators . DELIM
    (122) variable-declarators -> variable-declarators . COMMA variable-declarator

    DELIM           shift and go to state 376
    COMMA           shift and go to state 190


state 359

    (126) method-header -> modifier type member-name . OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN

    OPEN_PAREN      shift and go to state 377


state 360

    (155) write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .

    IDENTIFIER      reduce using rule 155 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    BLOCK_BEGIN     reduce using rule 155 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    DELIM           reduce using rule 155 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    CONSOLE         reduce using rule 155 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    CONST           reduce using rule 155 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    IF              reduce using rule 155 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    SWITCH          reduce using rule 155 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    WHILE           reduce using rule 155 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    FOR             reduce using rule 155 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    DO              reduce using rule 155 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    BREAK           reduce using rule 155 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    CONTINUE        reduce using rule 155 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    GOTO            reduce using rule 155 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    RETURN          reduce using rule 155 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    BOOL            reduce using rule 155 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    INT             reduce using rule 155 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    UINT            reduce using rule 155 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    CHAR            reduce using rule 155 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    DOUBLE          reduce using rule 155 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    $end            reduce using rule 155 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    BLOCK_END       reduce using rule 155 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    CASE            reduce using rule 155 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    DEFAULT         reduce using rule 155 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)


state 361

    (157) print-list -> expression COMMA print-list .

    CLOSE_PAREN     reduce using rule 157 (print-list -> expression COMMA print-list .)


state 362

    (158) read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .

    IDENTIFIER      reduce using rule 158 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    BLOCK_BEGIN     reduce using rule 158 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    DELIM           reduce using rule 158 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    CONSOLE         reduce using rule 158 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    CONST           reduce using rule 158 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    IF              reduce using rule 158 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    SWITCH          reduce using rule 158 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    WHILE           reduce using rule 158 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    FOR             reduce using rule 158 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    DO              reduce using rule 158 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    BREAK           reduce using rule 158 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    CONTINUE        reduce using rule 158 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    GOTO            reduce using rule 158 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    RETURN          reduce using rule 158 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    BOOL            reduce using rule 158 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    INT             reduce using rule 158 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    UINT            reduce using rule 158 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    CHAR            reduce using rule 158 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    DOUBLE          reduce using rule 158 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    BLOCK_END       reduce using rule 158 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    CASE            reduce using rule 158 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    DEFAULT         reduce using rule 158 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    $end            reduce using rule 158 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)


state 363

    (171) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE . M_else block
    (173) M_else -> . empty
    (223) empty -> .

    BLOCK_BEGIN     reduce using rule 223 (empty -> .)

    empty                          shift and go to state 379
    M_else                         shift and go to state 378

state 364

    (192) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad . for-iterator-opt CLOSE_PAREN M_quad block
    (197) for-iterator-opt -> . for-iterator
    (198) for-iterator-opt -> . empty
    (199) for-iterator -> . statement-expression-list
    (223) empty -> .
    (200) statement-expression-list -> . statement-expression
    (201) statement-expression-list -> . statement-expression-list COMMA statement-expression
    (166) statement-expression -> . invocation-expression
    (167) statement-expression -> . assignment
    (96) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (97) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (105) assignment -> . prim-expression assignment-operator expression
    (94) member-access -> . IDENTIFIER DOT IDENTIFIER
    (95) member-access -> . member-access DOT IDENTIFIER
    (102) prim-expression -> . IDENTIFIER
    (103) prim-expression -> . member-access
    (104) prim-expression -> . element-access
    (100) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (101) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    CLOSE_PAREN     reduce using rule 223 (empty -> .)
    IDENTIFIER      shift and go to state 181

    for-iterator-opt               shift and go to state 380
    assignment                     shift and go to state 54
    prim-expression                shift and go to state 50
    member-access                  shift and go to state 2
    element-access                 shift and go to state 18
    invocation-expression          shift and go to state 13
    statement-expression           shift and go to state 179
    empty                          shift and go to state 383
    for-iterator                   shift and go to state 381
    statement-expression-list      shift and go to state 382

state 365

    (184) switch-label -> CASE expression COLON .

    CASE            reduce using rule 184 (switch-label -> CASE expression COLON .)
    DEFAULT         reduce using rule 184 (switch-label -> CASE expression COLON .)
    IDENTIFIER      reduce using rule 184 (switch-label -> CASE expression COLON .)
    BLOCK_BEGIN     reduce using rule 184 (switch-label -> CASE expression COLON .)
    DELIM           reduce using rule 184 (switch-label -> CASE expression COLON .)
    CONSOLE         reduce using rule 184 (switch-label -> CASE expression COLON .)
    CONST           reduce using rule 184 (switch-label -> CASE expression COLON .)
    IF              reduce using rule 184 (switch-label -> CASE expression COLON .)
    SWITCH          reduce using rule 184 (switch-label -> CASE expression COLON .)
    WHILE           reduce using rule 184 (switch-label -> CASE expression COLON .)
    FOR             reduce using rule 184 (switch-label -> CASE expression COLON .)
    DO              reduce using rule 184 (switch-label -> CASE expression COLON .)
    BREAK           reduce using rule 184 (switch-label -> CASE expression COLON .)
    CONTINUE        reduce using rule 184 (switch-label -> CASE expression COLON .)
    GOTO            reduce using rule 184 (switch-label -> CASE expression COLON .)
    RETURN          reduce using rule 184 (switch-label -> CASE expression COLON .)
    BOOL            reduce using rule 184 (switch-label -> CASE expression COLON .)
    INT             reduce using rule 184 (switch-label -> CASE expression COLON .)
    UINT            reduce using rule 184 (switch-label -> CASE expression COLON .)
    CHAR            reduce using rule 184 (switch-label -> CASE expression COLON .)
    DOUBLE          reduce using rule 184 (switch-label -> CASE expression COLON .)


state 366

    (191) do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN . DELIM

    DELIM           shift and go to state 384


state 367

    (129) method-header -> VOID member-name OPEN_PAREN formal-parameter-list-opt . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 385


state 368

    (25) constant-declaration -> CONST simple-type constant-declarators DELIM .

    CONST           reduce using rule 25 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    BITCOMP         reduce using rule 25 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    PUBLIC          reduce using rule 25 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    PRIVATE         reduce using rule 25 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    VOID            reduce using rule 25 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    IDENTIFIER      reduce using rule 25 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    BOOL            reduce using rule 25 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    INT             reduce using rule 25 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    UINT            reduce using rule 25 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    CHAR            reduce using rule 25 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    DOUBLE          reduce using rule 25 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    BLOCK_END       reduce using rule 25 (constant-declaration -> CONST simple-type constant-declarators DELIM .)


state 369

    (216) destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN . destructor-body
    (217) destructor-body -> . block
    (218) destructor-body -> . DELIM
    (139) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END

    DELIM           shift and go to state 386
    BLOCK_BEGIN     shift and go to state 49

    destructor-body                shift and go to state 387
    block                          shift and go to state 388

state 370

    (128) method-header -> type member-name OPEN_PAREN formal-parameter-list-opt . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 389


state 371

    (136) fixed-parameter -> type IDENTIFIER .

    COMMA           reduce using rule 136 (fixed-parameter -> type IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 136 (fixed-parameter -> type IDENTIFIER .)


state 372

    (135) fixed-parameters -> fixed-parameters COMMA . fixed-parameter
    (136) fixed-parameter -> . type IDENTIFIER
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE
    (13) class-type -> . IDENTIFIER
    (34) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET

    BOOL            shift and go to state 43
    INT             shift and go to state 24
    UINT            shift and go to state 56
    CHAR            shift and go to state 30
    DOUBLE          shift and go to state 12
    IDENTIFIER      shift and go to state 122

    array-type                     shift and go to state 39
    simple-type                    shift and go to state 15
    class-type                     shift and go to state 58
    type                           shift and go to state 350
    fixed-parameter                shift and go to state 390

state 373

    (213) constructor-declarator -> IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .

    DELIM           reduce using rule 213 (constructor-declarator -> IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)
    BLOCK_BEGIN     reduce using rule 213 (constructor-declarator -> IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)


state 374

    (24) constant-declaration -> modifier CONST simple-type constant-declarators . DELIM
    (36) constant-declarators -> constant-declarators . COMMA constant-declarator

    DELIM           shift and go to state 391
    COMMA           shift and go to state 244


state 375

    (127) method-header -> modifier VOID member-name OPEN_PAREN . formal-parameter-list-opt CLOSE_PAREN
    (130) formal-parameter-list-opt -> . formal-parameter-list
    (131) formal-parameter-list-opt -> . empty
    (133) formal-parameter-list -> . fixed-parameters
    (223) empty -> .
    (134) fixed-parameters -> . fixed-parameter
    (135) fixed-parameters -> . fixed-parameters COMMA fixed-parameter
    (136) fixed-parameter -> . type IDENTIFIER
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE
    (13) class-type -> . IDENTIFIER
    (34) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET

    CLOSE_PAREN     reduce using rule 223 (empty -> .)
    BOOL            shift and go to state 43
    INT             shift and go to state 24
    UINT            shift and go to state 56
    CHAR            shift and go to state 30
    DOUBLE          shift and go to state 12
    IDENTIFIER      shift and go to state 122

    array-type                     shift and go to state 39
    class-type                     shift and go to state 58
    fixed-parameters               shift and go to state 351
    simple-type                    shift and go to state 15
    formal-parameter-list-opt      shift and go to state 392
    fixed-parameter                shift and go to state 353
    type                           shift and go to state 350
    empty                          shift and go to state 354
    formal-parameter-list          shift and go to state 355

state 376

    (117) field-declaration -> modifier type variable-declarators DELIM .

    CONST           reduce using rule 117 (field-declaration -> modifier type variable-declarators DELIM .)
    BITCOMP         reduce using rule 117 (field-declaration -> modifier type variable-declarators DELIM .)
    PUBLIC          reduce using rule 117 (field-declaration -> modifier type variable-declarators DELIM .)
    PRIVATE         reduce using rule 117 (field-declaration -> modifier type variable-declarators DELIM .)
    VOID            reduce using rule 117 (field-declaration -> modifier type variable-declarators DELIM .)
    IDENTIFIER      reduce using rule 117 (field-declaration -> modifier type variable-declarators DELIM .)
    BOOL            reduce using rule 117 (field-declaration -> modifier type variable-declarators DELIM .)
    INT             reduce using rule 117 (field-declaration -> modifier type variable-declarators DELIM .)
    UINT            reduce using rule 117 (field-declaration -> modifier type variable-declarators DELIM .)
    CHAR            reduce using rule 117 (field-declaration -> modifier type variable-declarators DELIM .)
    DOUBLE          reduce using rule 117 (field-declaration -> modifier type variable-declarators DELIM .)
    BLOCK_END       reduce using rule 117 (field-declaration -> modifier type variable-declarators DELIM .)


state 377

    (126) method-header -> modifier type member-name OPEN_PAREN . formal-parameter-list-opt CLOSE_PAREN
    (130) formal-parameter-list-opt -> . formal-parameter-list
    (131) formal-parameter-list-opt -> . empty
    (133) formal-parameter-list -> . fixed-parameters
    (223) empty -> .
    (134) fixed-parameters -> . fixed-parameter
    (135) fixed-parameters -> . fixed-parameters COMMA fixed-parameter
    (136) fixed-parameter -> . type IDENTIFIER
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE
    (13) class-type -> . IDENTIFIER
    (34) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET

    CLOSE_PAREN     reduce using rule 223 (empty -> .)
    BOOL            shift and go to state 43
    INT             shift and go to state 24
    UINT            shift and go to state 56
    CHAR            shift and go to state 30
    DOUBLE          shift and go to state 12
    IDENTIFIER      shift and go to state 122

    array-type                     shift and go to state 39
    class-type                     shift and go to state 58
    fixed-parameters               shift and go to state 351
    simple-type                    shift and go to state 15
    formal-parameter-list-opt      shift and go to state 393
    fixed-parameter                shift and go to state 353
    type                           shift and go to state 350
    empty                          shift and go to state 354
    formal-parameter-list          shift and go to state 355

state 378

    (171) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else . block
    (139) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END

    BLOCK_BEGIN     shift and go to state 49

    block                          shift and go to state 394

state 379

    (173) M_else -> empty .

    BLOCK_BEGIN     reduce using rule 173 (M_else -> empty .)


state 380

    (192) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt . CLOSE_PAREN M_quad block

    CLOSE_PAREN     shift and go to state 395


state 381

    (197) for-iterator-opt -> for-iterator .

    CLOSE_PAREN     reduce using rule 197 (for-iterator-opt -> for-iterator .)


state 382

    (199) for-iterator -> statement-expression-list .
    (201) statement-expression-list -> statement-expression-list . COMMA statement-expression

    CLOSE_PAREN     reduce using rule 199 (for-iterator -> statement-expression-list .)
    COMMA           shift and go to state 232


state 383

    (198) for-iterator-opt -> empty .

    CLOSE_PAREN     reduce using rule 198 (for-iterator-opt -> empty .)


state 384

    (191) do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .

    IDENTIFIER      reduce using rule 191 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    BLOCK_BEGIN     reduce using rule 191 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    DELIM           reduce using rule 191 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    CONSOLE         reduce using rule 191 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    CONST           reduce using rule 191 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    IF              reduce using rule 191 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    SWITCH          reduce using rule 191 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    WHILE           reduce using rule 191 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    FOR             reduce using rule 191 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    DO              reduce using rule 191 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    BREAK           reduce using rule 191 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    CONTINUE        reduce using rule 191 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    GOTO            reduce using rule 191 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    RETURN          reduce using rule 191 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    BOOL            reduce using rule 191 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    INT             reduce using rule 191 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    UINT            reduce using rule 191 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    CHAR            reduce using rule 191 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    DOUBLE          reduce using rule 191 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    $end            reduce using rule 191 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    CASE            reduce using rule 191 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    DEFAULT         reduce using rule 191 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    BLOCK_END       reduce using rule 191 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)


state 385

    (129) method-header -> VOID member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .

    DELIM           reduce using rule 129 (method-header -> VOID member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)
    BLOCK_BEGIN     reduce using rule 129 (method-header -> VOID member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)


state 386

    (218) destructor-body -> DELIM .

    CONST           reduce using rule 218 (destructor-body -> DELIM .)
    BITCOMP         reduce using rule 218 (destructor-body -> DELIM .)
    PUBLIC          reduce using rule 218 (destructor-body -> DELIM .)
    PRIVATE         reduce using rule 218 (destructor-body -> DELIM .)
    VOID            reduce using rule 218 (destructor-body -> DELIM .)
    IDENTIFIER      reduce using rule 218 (destructor-body -> DELIM .)
    BOOL            reduce using rule 218 (destructor-body -> DELIM .)
    INT             reduce using rule 218 (destructor-body -> DELIM .)
    UINT            reduce using rule 218 (destructor-body -> DELIM .)
    CHAR            reduce using rule 218 (destructor-body -> DELIM .)
    DOUBLE          reduce using rule 218 (destructor-body -> DELIM .)
    BLOCK_END       reduce using rule 218 (destructor-body -> DELIM .)


state 387

    (216) destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .

    CONST           reduce using rule 216 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    BITCOMP         reduce using rule 216 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    PUBLIC          reduce using rule 216 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    PRIVATE         reduce using rule 216 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    VOID            reduce using rule 216 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    IDENTIFIER      reduce using rule 216 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    BOOL            reduce using rule 216 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    INT             reduce using rule 216 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    UINT            reduce using rule 216 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    CHAR            reduce using rule 216 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    DOUBLE          reduce using rule 216 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    BLOCK_END       reduce using rule 216 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)


state 388

    (217) destructor-body -> block .

    CONST           reduce using rule 217 (destructor-body -> block .)
    BITCOMP         reduce using rule 217 (destructor-body -> block .)
    PUBLIC          reduce using rule 217 (destructor-body -> block .)
    PRIVATE         reduce using rule 217 (destructor-body -> block .)
    VOID            reduce using rule 217 (destructor-body -> block .)
    IDENTIFIER      reduce using rule 217 (destructor-body -> block .)
    BOOL            reduce using rule 217 (destructor-body -> block .)
    INT             reduce using rule 217 (destructor-body -> block .)
    UINT            reduce using rule 217 (destructor-body -> block .)
    CHAR            reduce using rule 217 (destructor-body -> block .)
    DOUBLE          reduce using rule 217 (destructor-body -> block .)
    BLOCK_END       reduce using rule 217 (destructor-body -> block .)


state 389

    (128) method-header -> type member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .

    DELIM           reduce using rule 128 (method-header -> type member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)
    BLOCK_BEGIN     reduce using rule 128 (method-header -> type member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)


state 390

    (135) fixed-parameters -> fixed-parameters COMMA fixed-parameter .

    COMMA           reduce using rule 135 (fixed-parameters -> fixed-parameters COMMA fixed-parameter .)
    CLOSE_PAREN     reduce using rule 135 (fixed-parameters -> fixed-parameters COMMA fixed-parameter .)


state 391

    (24) constant-declaration -> modifier CONST simple-type constant-declarators DELIM .

    CONST           reduce using rule 24 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    BITCOMP         reduce using rule 24 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    PUBLIC          reduce using rule 24 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    PRIVATE         reduce using rule 24 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    VOID            reduce using rule 24 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    IDENTIFIER      reduce using rule 24 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    BOOL            reduce using rule 24 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    INT             reduce using rule 24 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    UINT            reduce using rule 24 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    CHAR            reduce using rule 24 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    DOUBLE          reduce using rule 24 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    BLOCK_END       reduce using rule 24 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)


state 392

    (127) method-header -> modifier VOID member-name OPEN_PAREN formal-parameter-list-opt . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 396


state 393

    (126) method-header -> modifier type member-name OPEN_PAREN formal-parameter-list-opt . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 397


state 394

    (171) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .

    IDENTIFIER      reduce using rule 171 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    BLOCK_BEGIN     reduce using rule 171 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    DELIM           reduce using rule 171 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    CONSOLE         reduce using rule 171 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    CONST           reduce using rule 171 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    IF              reduce using rule 171 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    SWITCH          reduce using rule 171 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    WHILE           reduce using rule 171 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    FOR             reduce using rule 171 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    DO              reduce using rule 171 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    BREAK           reduce using rule 171 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    CONTINUE        reduce using rule 171 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    GOTO            reduce using rule 171 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    RETURN          reduce using rule 171 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    BOOL            reduce using rule 171 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    INT             reduce using rule 171 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    UINT            reduce using rule 171 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    CHAR            reduce using rule 171 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    DOUBLE          reduce using rule 171 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    CASE            reduce using rule 171 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    DEFAULT         reduce using rule 171 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    BLOCK_END       reduce using rule 171 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    $end            reduce using rule 171 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)


state 395

    (192) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN . M_quad block
    (174) M_quad -> . empty
    (223) empty -> .

    BLOCK_BEGIN     reduce using rule 223 (empty -> .)

    M_quad                         shift and go to state 398
    empty                          shift and go to state 64

state 396

    (127) method-header -> modifier VOID member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .

    DELIM           reduce using rule 127 (method-header -> modifier VOID member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)
    BLOCK_BEGIN     reduce using rule 127 (method-header -> modifier VOID member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)


state 397

    (126) method-header -> modifier type member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .

    DELIM           reduce using rule 126 (method-header -> modifier type member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)
    BLOCK_BEGIN     reduce using rule 126 (method-header -> modifier type member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)


state 398

    (192) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad . block
    (139) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END

    BLOCK_BEGIN     shift and go to state 49

    block                          shift and go to state 399

state 399

    (192) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .

    IDENTIFIER      reduce using rule 192 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    BLOCK_BEGIN     reduce using rule 192 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    DELIM           reduce using rule 192 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    CONSOLE         reduce using rule 192 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    CONST           reduce using rule 192 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    IF              reduce using rule 192 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    SWITCH          reduce using rule 192 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    WHILE           reduce using rule 192 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    FOR             reduce using rule 192 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    DO              reduce using rule 192 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    BREAK           reduce using rule 192 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    CONTINUE        reduce using rule 192 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    GOTO            reduce using rule 192 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    RETURN          reduce using rule 192 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    BOOL            reduce using rule 192 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    INT             reduce using rule 192 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    UINT            reduce using rule 192 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    CHAR            reduce using rule 192 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    DOUBLE          reduce using rule 192 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    $end            reduce using rule 192 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    CASE            reduce using rule 192 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    DEFAULT         reduce using rule 192 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    BLOCK_END       reduce using rule 192 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)

