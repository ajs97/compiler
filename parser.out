Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    LICONST
    LONG
    INCRE
    BASE
    FOREACH
    THIS
    FCONST
    ULONG
    MCONST
    VSCONST
    DECRE
    SCONST
    UICONST
    CCONST
    IN
    FLOAT
    ULICONST

Grammar

Rule 0     S' -> compilation-unit
Rule 1     compilation-unit -> class-declarations-opt
Rule 2     compilation-unit -> statement-list
Rule 3     semi-opt -> DELIM
Rule 4     semi-opt -> empty
Rule 5     class-declarations-opt -> class-declarations
Rule 6     class-declarations-opt -> empty
Rule 7     class-declarations -> class-declaration
Rule 8     class-declarations -> class-declarations class-declaration
Rule 9     class-declaration -> CLASS IDENTIFIER class-base-opt class-body semi-opt
Rule 10    class-base-opt -> class-base
Rule 11    class-base-opt -> empty
Rule 12    class-base -> COLON class-type
Rule 13    class-type -> IDENTIFIER
Rule 14    class-body -> BLOCK_BEGIN class-member-declarations-opt BLOCK_END
Rule 15    class-member-declarations-opt -> class-member-declarations
Rule 16    class-member-declarations-opt -> empty
Rule 17    class-member-declarations -> class-member-declaration
Rule 18    class-member-declarations -> class-member-declarations class-member-declaration
Rule 19    class-member-declaration -> constant-declaration
Rule 20    class-member-declaration -> field-declaration
Rule 21    class-member-declaration -> method-declaration
Rule 22    class-member-declaration -> constructor-declaration
Rule 23    class-member-declaration -> destructor-declaration
Rule 24    constant-declaration -> modifier CONST simple-type constant-declarators DELIM
Rule 25    constant-declaration -> CONST simple-type constant-declarators DELIM
Rule 26    type -> simple-type
Rule 27    type -> class-type
Rule 28    type -> array-type
Rule 29    simple-type -> BOOL
Rule 30    simple-type -> INT
Rule 31    simple-type -> UINT
Rule 32    simple-type -> CHAR
Rule 33    simple-type -> DOUBLE
Rule 34    array-type -> simple-type OPEN_BRACKET ICONST CLOSE_BRACKET
Rule 35    constant-declarators -> constant-declarator
Rule 36    constant-declarators -> constant-declarators COMMA constant-declarator
Rule 37    constant-declarator -> IDENTIFIER ASSIGN expression
Rule 38    expression -> conditional-expression
Rule 39    expression -> assignment
Rule 40    conditional-expression -> conditional-or-expression
Rule 41    conditional-expression -> conditional-or-expression CONDOP expression COLON expression
Rule 42    conditional-or-expression -> conditional-and-expression
Rule 43    conditional-or-expression -> conditional-or-expression LOGOR conditional-and-expression
Rule 44    conditional-and-expression -> inclusive-or-expression
Rule 45    conditional-and-expression -> conditional-and-expression LOGAND inclusive-or-expression
Rule 46    inclusive-or-expression -> exclusive-or-expression
Rule 47    inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression
Rule 48    exclusive-or-expression -> and-expression
Rule 49    exclusive-or-expression -> exclusive-or-expression BITXOR and-expression
Rule 50    and-expression -> equality-expression
Rule 51    and-expression -> and-expression BITAND equality-expression
Rule 52    equality-expression -> relational-expression
Rule 53    equality-expression -> equality-expression EQ relational-expression
Rule 54    equality-expression -> equality-expression NE relational-expression
Rule 55    relational-expression -> shift-expression
Rule 56    relational-expression -> relational-expression LT shift-expression
Rule 57    relational-expression -> relational-expression GT shift-expression
Rule 58    relational-expression -> relational-expression LE shift-expression
Rule 59    relational-expression -> relational-expression GE shift-expression
Rule 60    shift-expression -> additive-expression
Rule 61    shift-expression -> shift-expression LSHIFT additive-expression
Rule 62    shift-expression -> shift-expression RSHIFT additive-expression
Rule 63    additive-expression -> multiplicative-expression
Rule 64    additive-expression -> additive-expression PLUS multiplicative-expression
Rule 65    additive-expression -> additive-expression MINUS multiplicative-expression
Rule 66    multiplicative-expression -> unary-expression
Rule 67    multiplicative-expression -> multiplicative-expression TIMES unary-expression
Rule 68    multiplicative-expression -> multiplicative-expression DIV unary-expression
Rule 69    multiplicative-expression -> multiplicative-expression MOD unary-expression
Rule 70    unary-expression -> primary-expression
Rule 71    unary-expression -> PLUS unary-expression
Rule 72    unary-expression -> MINUS unary-expression
Rule 73    unary-expression -> BITNOT unary-expression
Rule 74    unary-expression -> BITCOMP unary-expression
Rule 75    unary-expression -> TIMES unary-expression
Rule 76    primary-expression -> array-creation-expression
Rule 77    primary-expression -> primary-no-array-creation-expression
Rule 78    array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
Rule 79    array-initializer-opt -> array-initializer
Rule 80    array-initializer-opt -> empty
Rule 81    expression-list -> expression
Rule 82    expression-list -> expression-list COMMA expression
Rule 83    array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END
Rule 84    variable-initializer-list-opt -> expression-list
Rule 85    variable-initializer-list-opt -> empty
Rule 86    variable-initializer -> expression
Rule 87    variable-initializer -> array-initializer
Rule 88    primary-no-array-creation-expression -> literal
Rule 89    primary-no-array-creation-expression -> IDENTIFIER
Rule 90    primary-no-array-creation-expression -> parenthesized-expression
Rule 91    primary-no-array-creation-expression -> member-access
Rule 92    primary-no-array-creation-expression -> invocation-expression
Rule 93    primary-no-array-creation-expression -> element-access
Rule 94    primary-no-array-creation-expression -> object-creation-expression
Rule 95    parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN
Rule 96    member-access -> prim-expression DOT IDENTIFIER
Rule 97    invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
Rule 98    invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
Rule 99    argument-list-opt -> expression-list
Rule 100   argument-list-opt -> empty
Rule 101   variable-reference -> expression
Rule 102   element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
Rule 103   element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET
Rule 104   prim-expression -> IDENTIFIER
Rule 105   prim-expression -> member-access
Rule 106   prim-expression -> element-access
Rule 107   object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
Rule 108   assignment -> prim-expression assignment-operator expression
Rule 109   assignment-operator -> ASSIGN
Rule 110   assignment-operator -> PLUSEQUAL
Rule 111   assignment-operator -> MINUSEQUAL
Rule 112   assignment-operator -> TIMESEQUAL
Rule 113   assignment-operator -> DIVEQUAL
Rule 114   assignment-operator -> MODEQUAL
Rule 115   assignment-operator -> BITANDEQUAL
Rule 116   assignment-operator -> BITOREQUAL
Rule 117   assignment-operator -> BITXOREQUAL
Rule 118   assignment-operator -> LSHIFTEQUAL
Rule 119   assignment-operator -> RSHIFTEQUAL
Rule 120   field-declaration -> modifier type variable-declarators DELIM
Rule 121   field-declaration -> type variable-declarators DELIM
Rule 122   modifier -> PUBLIC
Rule 123   modifier -> PRIVATE
Rule 124   variable-declarators -> variable-declarator
Rule 125   variable-declarators -> variable-declarators COMMA variable-declarator
Rule 126   variable-declarator -> IDENTIFIER
Rule 127   variable-declarator -> IDENTIFIER ASSIGN variable-initializer
Rule 128   method-declaration -> method-header method-body
Rule 129   method-header -> modifier type member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
Rule 130   method-header -> modifier VOID member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
Rule 131   method-header -> type member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
Rule 132   method-header -> VOID member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
Rule 133   formal-parameter-list-opt -> formal-parameter-list
Rule 134   formal-parameter-list-opt -> empty
Rule 135   member-name -> IDENTIFIER
Rule 136   formal-parameter-list -> fixed-parameters
Rule 137   fixed-parameters -> fixed-parameter
Rule 138   fixed-parameters -> fixed-parameters COMMA fixed-parameter
Rule 139   fixed-parameter -> type IDENTIFIER
Rule 140   method-body -> block
Rule 141   method-body -> DELIM
Rule 142   block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END
Rule 143   M_bstart -> empty
Rule 144   statement-list-opt -> statement-list
Rule 145   statement-list-opt -> empty
Rule 146   statement-list -> statement
Rule 147   statement-list -> statement-list statement
Rule 148   statement -> labeled-statement
Rule 149   statement -> declaration-statement
Rule 150   statement -> block
Rule 151   statement -> empty-statement
Rule 152   statement -> expression-statement
Rule 153   statement -> selection-statement
Rule 154   statement -> iteration-statement
Rule 155   statement -> jump-statement
Rule 156   statement -> write-statement
Rule 157   statement -> read-statement
Rule 158   write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM
Rule 159   print-list -> expression
Rule 160   print-list -> expression COMMA print-list
Rule 161   read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM
Rule 162   labeled-statement -> IDENTIFIER COLON statement
Rule 163   declaration-statement -> local-variable-declaration DELIM
Rule 164   declaration-statement -> local-constant-declaration DELIM
Rule 165   local-variable-declaration -> type variable-declarators
Rule 166   local-constant-declaration -> CONST type constant-declarators
Rule 167   empty-statement -> DELIM
Rule 168   expression-statement -> statement-expression DELIM
Rule 169   statement-expression -> invocation-expression
Rule 170   statement-expression -> object-creation-expression
Rule 171   statement-expression -> assignment
Rule 172   selection-statement -> if-statement M_quad
Rule 173   selection-statement -> switch-statement
Rule 174   if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block
Rule 175   if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block
Rule 176   M_if -> empty
Rule 177   M_else -> empty
Rule 178   M_quad -> empty
Rule 179   switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block
Rule 180   switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END
Rule 181   switch-sections-opt -> switch-sections
Rule 182   switch-sections-opt -> empty
Rule 183   switch-sections -> switch-section
Rule 184   switch-sections -> switch-sections switch-section
Rule 185   switch-section -> switch-labels statement-list
Rule 186   switch-labels -> switch-label
Rule 187   switch-labels -> switch-labels switch-label
Rule 188   switch-label -> CASE expression COLON
Rule 189   switch-label -> DEFAULT COLON
Rule 190   iteration-statement -> while-statement M_quad
Rule 191   iteration-statement -> for-statement M_quad
Rule 192   iteration-statement -> do-statement M_quad
Rule 193   while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block
Rule 194   M_while -> empty
Rule 195   do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM
Rule 196   for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block
Rule 197   for-initializer-opt -> for-initializer
Rule 198   for-initializer-opt -> empty
Rule 199   for-initializer -> statement-expression-list
Rule 200   for-condition -> expression
Rule 201   for-iterator-opt -> for-iterator
Rule 202   for-iterator-opt -> empty
Rule 203   for-iterator -> statement-expression-list
Rule 204   statement-expression-list -> statement-expression
Rule 205   statement-expression-list -> statement-expression-list COMMA statement-expression
Rule 206   jump-statement -> break-statement
Rule 207   jump-statement -> continue-statement
Rule 208   jump-statement -> goto-statement
Rule 209   jump-statement -> return-statement
Rule 210   break-statement -> BREAK DELIM
Rule 211   continue-statement -> CONTINUE DELIM
Rule 212   goto-statement -> GOTO IDENTIFIER DELIM
Rule 213   return-statement -> RETURN expression-opt DELIM
Rule 214   expression-opt -> expression
Rule 215   expression-opt -> empty
Rule 216   constructor-declaration -> constructor-declarator constructor-body
Rule 217   constructor-declarator -> IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
Rule 218   constructor-body -> block
Rule 219   constructor-body -> DELIM
Rule 220   destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body
Rule 221   destructor-body -> block
Rule 222   destructor-body -> DELIM
Rule 223   literal -> ICONST
Rule 224   literal -> DCONST
Rule 225   literal -> TRUE
Rule 226   literal -> FALSE
Rule 227   empty -> <empty>

Terminals, with rules where they appear

ASSIGN               : 37 109 127
BASE                 : 
BITAND               : 51
BITANDEQUAL          : 115
BITCOMP              : 74 220
BITNOT               : 73
BITOR                : 47
BITOREQUAL           : 116
BITXOR               : 49
BITXOREQUAL          : 117
BLOCK_BEGIN          : 14 83 142 180
BLOCK_END            : 14 83 142 180
BOOL                 : 29
BREAK                : 210
CASE                 : 188
CCONST               : 
CHAR                 : 32
CLASS                : 9
CLOSE_BRACKET        : 34 78 102 103
CLOSE_PAREN          : 95 97 98 107 129 130 131 132 158 161 174 175 179 193 195 196 217 220
COLON                : 12 41 162 188 189
COMMA                : 36 82 125 138 160 205
CONDOP               : 41
CONSOLE              : 158 161
CONST                : 24 25 166
CONTINUE             : 211
DCONST               : 224
DECRE                : 
DEFAULT              : 189
DELIM                : 3 24 25 120 121 141 158 161 163 164 167 168 195 196 196 210 211 212 213 219 222
DIV                  : 68
DIVEQUAL             : 113
DO                   : 195
DOT                  : 96 158 161
DOUBLE               : 33
ELSE                 : 175
EQ                   : 53
FALSE                : 226
FCONST               : 
FLOAT                : 
FOR                  : 196
FOREACH              : 
GE                   : 59
GOTO                 : 212
GT                   : 57
ICONST               : 34 78 223
IDENTIFIER           : 9 13 37 89 96 97 102 104 126 127 135 139 161 162 212 217 220
IF                   : 174 175
IN                   : 
INCRE                : 
INT                  : 30
LE                   : 58
LICONST              : 
LOGAND               : 45
LOGOR                : 43
LONG                 : 
LSHIFT               : 61
LSHIFTEQUAL          : 118
LT                   : 56
MCONST               : 
MINUS                : 65 72
MINUSEQUAL           : 111
MOD                  : 69
MODEQUAL             : 114
NE                   : 54
NEW                  : 78 107
OPEN_BRACKET         : 34 78 102 103
OPEN_PAREN           : 95 97 98 107 129 130 131 132 158 161 174 175 179 193 195 196 217 220
PLUS                 : 64 71
PLUSEQUAL            : 110
PRIVATE              : 123
PUBLIC               : 122
READLINE             : 161
RETURN               : 213
RSHIFT               : 62
RSHIFTEQUAL          : 119
SCONST               : 
SWITCH               : 179
THIS                 : 
TIMES                : 67 75
TIMESEQUAL           : 112
TRUE                 : 225
UICONST              : 
UINT                 : 31
ULICONST             : 
ULONG                : 
VOID                 : 130 132
VSCONST              : 
WHILE                : 193 195
WRITELINE            : 158
error                : 

Nonterminals, with rules where they appear

M_bstart             : 142
M_else               : 175
M_if                 : 174 175
M_quad               : 172 190 191 192 193 195 195 196 196 196
M_while              : 193
additive-expression  : 60 61 62 64 65
and-expression       : 48 49 51
argument-list-opt    : 97 98 107
array-creation-expression : 76
array-initializer    : 79 87
array-initializer-opt : 78
array-type           : 28
assignment           : 39 171
assignment-operator  : 108
block                : 140 150 174 175 175 193 195 196 218 221
break-statement      : 206
class-base           : 10
class-base-opt       : 9
class-body           : 9
class-declaration    : 7 8
class-declarations   : 5 8
class-declarations-opt : 1
class-member-declaration : 17 18
class-member-declarations : 15 18
class-member-declarations-opt : 14
class-type           : 12 27
compilation-unit     : 0
conditional-and-expression : 42 43 45
conditional-expression : 38
conditional-or-expression : 40 41 43
constant-declaration : 19
constant-declarator  : 35 36
constant-declarators : 24 25 36 166
constructor-body     : 216
constructor-declaration : 22
constructor-declarator : 216
continue-statement   : 207
declaration-statement : 149
destructor-body      : 220
destructor-declaration : 23
do-statement         : 192
element-access       : 93 106
empty                : 4 6 11 16 80 85 100 134 143 145 176 177 178 182 194 198 202 215
empty-statement      : 151
equality-expression  : 50 51 53 54
exclusive-or-expression : 46 47 49
expression           : 37 41 41 81 82 86 95 101 108 159 160 174 175 179 188 193 195 200 214
expression-list      : 82 84 99 102 103
expression-opt       : 213
expression-statement : 152
field-declaration    : 20
fixed-parameter      : 137 138
fixed-parameters     : 136 138
for-condition        : 196
for-initializer      : 197
for-initializer-opt  : 196
for-iterator         : 201
for-iterator-opt     : 196
for-statement        : 191
formal-parameter-list : 133
formal-parameter-list-opt : 129 130 131 132 217
goto-statement       : 208
if-statement         : 172
inclusive-or-expression : 44 45 47
invocation-expression : 92 169
iteration-statement  : 154
jump-statement       : 155
labeled-statement    : 148
literal              : 88
local-constant-declaration : 164
local-variable-declaration : 163
member-access        : 91 98 103 105
member-name          : 129 130 131 132
method-body          : 128
method-declaration   : 21
method-header        : 128
modifier             : 24 120 129 130
multiplicative-expression : 63 64 65 67 68 69
object-creation-expression : 94 170
parenthesized-expression : 90
prim-expression      : 96 108
primary-expression   : 70
primary-no-array-creation-expression : 77
print-list           : 158 160
read-statement       : 157
relational-expression : 52 53 54 56 57 58 59
return-statement     : 209
selection-statement  : 153
semi-opt             : 9
shift-expression     : 55 56 57 58 59 61 62
simple-type          : 24 25 26 34 78
statement            : 146 147 162
statement-expression : 168 204 205
statement-expression-list : 199 203 205
statement-list       : 2 144 147 185
statement-list-opt   : 142
switch-block         : 179
switch-label         : 186 187
switch-labels        : 185 187
switch-section       : 183 184
switch-sections      : 181 184
switch-sections-opt  : 180
switch-statement     : 173
type                 : 107 120 121 129 131 139 165 166
unary-expression     : 66 67 68 69 71 72 73 74 75
variable-declarator  : 124 125
variable-declarators : 120 121 125 165
variable-initializer : 127
variable-initializer-list-opt : 83
variable-reference   : 
while-statement      : 190
write-statement      : 156

Parsing method: LALR

state 0

    (0) S' -> . compilation-unit
    (1) compilation-unit -> . class-declarations-opt
    (2) compilation-unit -> . statement-list
    (5) class-declarations-opt -> . class-declarations
    (6) class-declarations-opt -> . empty
    (146) statement-list -> . statement
    (147) statement-list -> . statement-list statement
    (7) class-declarations -> . class-declaration
    (8) class-declarations -> . class-declarations class-declaration
    (227) empty -> .
    (148) statement -> . labeled-statement
    (149) statement -> . declaration-statement
    (150) statement -> . block
    (151) statement -> . empty-statement
    (152) statement -> . expression-statement
    (153) statement -> . selection-statement
    (154) statement -> . iteration-statement
    (155) statement -> . jump-statement
    (156) statement -> . write-statement
    (157) statement -> . read-statement
    (9) class-declaration -> . CLASS IDENTIFIER class-base-opt class-body semi-opt
    (162) labeled-statement -> . IDENTIFIER COLON statement
    (163) declaration-statement -> . local-variable-declaration DELIM
    (164) declaration-statement -> . local-constant-declaration DELIM
    (142) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END
    (167) empty-statement -> . DELIM
    (168) expression-statement -> . statement-expression DELIM
    (172) selection-statement -> . if-statement M_quad
    (173) selection-statement -> . switch-statement
    (190) iteration-statement -> . while-statement M_quad
    (191) iteration-statement -> . for-statement M_quad
    (192) iteration-statement -> . do-statement M_quad
    (206) jump-statement -> . break-statement
    (207) jump-statement -> . continue-statement
    (208) jump-statement -> . goto-statement
    (209) jump-statement -> . return-statement
    (158) write-statement -> . CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM
    (161) read-statement -> . CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM
    (165) local-variable-declaration -> . type variable-declarators
    (166) local-constant-declaration -> . CONST type constant-declarators
    (169) statement-expression -> . invocation-expression
    (170) statement-expression -> . object-creation-expression
    (171) statement-expression -> . assignment
    (174) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block
    (175) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block
    (179) switch-statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block
    (193) while-statement -> . WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block
    (196) for-statement -> . FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block
    (195) do-statement -> . DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM
    (210) break-statement -> . BREAK DELIM
    (211) continue-statement -> . CONTINUE DELIM
    (212) goto-statement -> . GOTO IDENTIFIER DELIM
    (213) return-statement -> . RETURN expression-opt DELIM
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (107) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (108) assignment -> . prim-expression assignment-operator expression
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE
    (13) class-type -> . IDENTIFIER
    (34) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET
    (96) member-access -> . prim-expression DOT IDENTIFIER
    (104) prim-expression -> . IDENTIFIER
    (105) prim-expression -> . member-access
    (106) prim-expression -> . element-access
    (102) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (103) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET

    $end            reduce using rule 227 (empty -> .)
    CLASS           shift and go to state 52
    IDENTIFIER      shift and go to state 37
    BLOCK_BEGIN     shift and go to state 50
    DELIM           shift and go to state 4
    CONSOLE         shift and go to state 54
    CONST           shift and go to state 49
    IF              shift and go to state 59
    SWITCH          shift and go to state 35
    WHILE           shift and go to state 31
    FOR             shift and go to state 21
    DO              shift and go to state 48
    BREAK           shift and go to state 43
    CONTINUE        shift and go to state 27
    GOTO            shift and go to state 7
    RETURN          shift and go to state 14
    NEW             shift and go to state 33
    BOOL            shift and go to state 44
    INT             shift and go to state 24
    UINT            shift and go to state 57
    CHAR            shift and go to state 30
    DOUBLE          shift and go to state 12

    return-statement               shift and go to state 16
    write-statement                shift and go to state 1
    member-access                  shift and go to state 2
    selection-statement            shift and go to state 29
    simple-type                    shift and go to state 15
    compilation-unit               shift and go to state 47
    expression-statement           shift and go to state 3
    class-declarations-opt         shift and go to state 17
    if-statement                   shift and go to state 26
    break-statement                shift and go to state 34
    prim-expression                shift and go to state 51
    statement-expression           shift and go to state 5
    element-access                 shift and go to state 18
    local-constant-declaration     shift and go to state 19
    statement                      shift and go to state 36
    assignment                     shift and go to state 55
    for-statement                  shift and go to state 6
    type                           shift and go to state 38
    read-statement                 shift and go to state 53
    do-statement                   shift and go to state 20
    array-type                     shift and go to state 40
    continue-statement             shift and go to state 22
    invocation-expression          shift and go to state 13
    class-declaration              shift and go to state 56
    labeled-statement              shift and go to state 8
    declaration-statement          shift and go to state 41
    object-creation-expression     shift and go to state 58
    switch-statement               shift and go to state 9
    jump-statement                 shift and go to state 10
    iteration-statement            shift and go to state 42
    local-variable-declaration     shift and go to state 23
    class-declarations             shift and go to state 11
    goto-statement                 shift and go to state 25
    empty                          shift and go to state 39
    statement-list                 shift and go to state 45
    class-type                     shift and go to state 60
    while-statement                shift and go to state 46
    empty-statement                shift and go to state 32
    block                          shift and go to state 28

state 1

    (156) statement -> write-statement .

    IDENTIFIER      reduce using rule 156 (statement -> write-statement .)
    BLOCK_BEGIN     reduce using rule 156 (statement -> write-statement .)
    DELIM           reduce using rule 156 (statement -> write-statement .)
    CONSOLE         reduce using rule 156 (statement -> write-statement .)
    CONST           reduce using rule 156 (statement -> write-statement .)
    IF              reduce using rule 156 (statement -> write-statement .)
    SWITCH          reduce using rule 156 (statement -> write-statement .)
    WHILE           reduce using rule 156 (statement -> write-statement .)
    FOR             reduce using rule 156 (statement -> write-statement .)
    DO              reduce using rule 156 (statement -> write-statement .)
    BREAK           reduce using rule 156 (statement -> write-statement .)
    CONTINUE        reduce using rule 156 (statement -> write-statement .)
    GOTO            reduce using rule 156 (statement -> write-statement .)
    RETURN          reduce using rule 156 (statement -> write-statement .)
    NEW             reduce using rule 156 (statement -> write-statement .)
    BOOL            reduce using rule 156 (statement -> write-statement .)
    INT             reduce using rule 156 (statement -> write-statement .)
    UINT            reduce using rule 156 (statement -> write-statement .)
    CHAR            reduce using rule 156 (statement -> write-statement .)
    DOUBLE          reduce using rule 156 (statement -> write-statement .)
    CASE            reduce using rule 156 (statement -> write-statement .)
    DEFAULT         reduce using rule 156 (statement -> write-statement .)
    BLOCK_END       reduce using rule 156 (statement -> write-statement .)
    $end            reduce using rule 156 (statement -> write-statement .)


state 2

    (98) invocation-expression -> member-access . OPEN_PAREN argument-list-opt CLOSE_PAREN
    (105) prim-expression -> member-access .
    (103) element-access -> member-access . OPEN_BRACKET expression-list CLOSE_BRACKET

    OPEN_PAREN      shift and go to state 62
    DOT             reduce using rule 105 (prim-expression -> member-access .)
    ASSIGN          reduce using rule 105 (prim-expression -> member-access .)
    PLUSEQUAL       reduce using rule 105 (prim-expression -> member-access .)
    MINUSEQUAL      reduce using rule 105 (prim-expression -> member-access .)
    TIMESEQUAL      reduce using rule 105 (prim-expression -> member-access .)
    DIVEQUAL        reduce using rule 105 (prim-expression -> member-access .)
    MODEQUAL        reduce using rule 105 (prim-expression -> member-access .)
    BITANDEQUAL     reduce using rule 105 (prim-expression -> member-access .)
    BITOREQUAL      reduce using rule 105 (prim-expression -> member-access .)
    BITXOREQUAL     reduce using rule 105 (prim-expression -> member-access .)
    LSHIFTEQUAL     reduce using rule 105 (prim-expression -> member-access .)
    RSHIFTEQUAL     reduce using rule 105 (prim-expression -> member-access .)
    OPEN_BRACKET    shift and go to state 61


state 3

    (152) statement -> expression-statement .

    IDENTIFIER      reduce using rule 152 (statement -> expression-statement .)
    BLOCK_BEGIN     reduce using rule 152 (statement -> expression-statement .)
    DELIM           reduce using rule 152 (statement -> expression-statement .)
    CONSOLE         reduce using rule 152 (statement -> expression-statement .)
    CONST           reduce using rule 152 (statement -> expression-statement .)
    IF              reduce using rule 152 (statement -> expression-statement .)
    SWITCH          reduce using rule 152 (statement -> expression-statement .)
    WHILE           reduce using rule 152 (statement -> expression-statement .)
    FOR             reduce using rule 152 (statement -> expression-statement .)
    DO              reduce using rule 152 (statement -> expression-statement .)
    BREAK           reduce using rule 152 (statement -> expression-statement .)
    CONTINUE        reduce using rule 152 (statement -> expression-statement .)
    GOTO            reduce using rule 152 (statement -> expression-statement .)
    RETURN          reduce using rule 152 (statement -> expression-statement .)
    NEW             reduce using rule 152 (statement -> expression-statement .)
    BOOL            reduce using rule 152 (statement -> expression-statement .)
    INT             reduce using rule 152 (statement -> expression-statement .)
    UINT            reduce using rule 152 (statement -> expression-statement .)
    CHAR            reduce using rule 152 (statement -> expression-statement .)
    DOUBLE          reduce using rule 152 (statement -> expression-statement .)
    CASE            reduce using rule 152 (statement -> expression-statement .)
    DEFAULT         reduce using rule 152 (statement -> expression-statement .)
    BLOCK_END       reduce using rule 152 (statement -> expression-statement .)
    $end            reduce using rule 152 (statement -> expression-statement .)


state 4

    (167) empty-statement -> DELIM .

    IDENTIFIER      reduce using rule 167 (empty-statement -> DELIM .)
    BLOCK_BEGIN     reduce using rule 167 (empty-statement -> DELIM .)
    DELIM           reduce using rule 167 (empty-statement -> DELIM .)
    CONSOLE         reduce using rule 167 (empty-statement -> DELIM .)
    CONST           reduce using rule 167 (empty-statement -> DELIM .)
    IF              reduce using rule 167 (empty-statement -> DELIM .)
    SWITCH          reduce using rule 167 (empty-statement -> DELIM .)
    WHILE           reduce using rule 167 (empty-statement -> DELIM .)
    FOR             reduce using rule 167 (empty-statement -> DELIM .)
    DO              reduce using rule 167 (empty-statement -> DELIM .)
    BREAK           reduce using rule 167 (empty-statement -> DELIM .)
    CONTINUE        reduce using rule 167 (empty-statement -> DELIM .)
    GOTO            reduce using rule 167 (empty-statement -> DELIM .)
    RETURN          reduce using rule 167 (empty-statement -> DELIM .)
    NEW             reduce using rule 167 (empty-statement -> DELIM .)
    BOOL            reduce using rule 167 (empty-statement -> DELIM .)
    INT             reduce using rule 167 (empty-statement -> DELIM .)
    UINT            reduce using rule 167 (empty-statement -> DELIM .)
    CHAR            reduce using rule 167 (empty-statement -> DELIM .)
    DOUBLE          reduce using rule 167 (empty-statement -> DELIM .)
    CASE            reduce using rule 167 (empty-statement -> DELIM .)
    DEFAULT         reduce using rule 167 (empty-statement -> DELIM .)
    BLOCK_END       reduce using rule 167 (empty-statement -> DELIM .)
    $end            reduce using rule 167 (empty-statement -> DELIM .)


state 5

    (168) expression-statement -> statement-expression . DELIM

    DELIM           shift and go to state 63


state 6

    (191) iteration-statement -> for-statement . M_quad
    (178) M_quad -> . empty
    (227) empty -> .

    IDENTIFIER      reduce using rule 227 (empty -> .)
    BLOCK_BEGIN     reduce using rule 227 (empty -> .)
    DELIM           reduce using rule 227 (empty -> .)
    CONSOLE         reduce using rule 227 (empty -> .)
    CONST           reduce using rule 227 (empty -> .)
    IF              reduce using rule 227 (empty -> .)
    SWITCH          reduce using rule 227 (empty -> .)
    WHILE           reduce using rule 227 (empty -> .)
    FOR             reduce using rule 227 (empty -> .)
    DO              reduce using rule 227 (empty -> .)
    BREAK           reduce using rule 227 (empty -> .)
    CONTINUE        reduce using rule 227 (empty -> .)
    GOTO            reduce using rule 227 (empty -> .)
    RETURN          reduce using rule 227 (empty -> .)
    NEW             reduce using rule 227 (empty -> .)
    BOOL            reduce using rule 227 (empty -> .)
    INT             reduce using rule 227 (empty -> .)
    UINT            reduce using rule 227 (empty -> .)
    CHAR            reduce using rule 227 (empty -> .)
    DOUBLE          reduce using rule 227 (empty -> .)
    $end            reduce using rule 227 (empty -> .)
    BLOCK_END       reduce using rule 227 (empty -> .)
    CASE            reduce using rule 227 (empty -> .)
    DEFAULT         reduce using rule 227 (empty -> .)

    M_quad                         shift and go to state 64
    empty                          shift and go to state 65

state 7

    (212) goto-statement -> GOTO . IDENTIFIER DELIM

    IDENTIFIER      shift and go to state 66


state 8

    (148) statement -> labeled-statement .

    IDENTIFIER      reduce using rule 148 (statement -> labeled-statement .)
    BLOCK_BEGIN     reduce using rule 148 (statement -> labeled-statement .)
    DELIM           reduce using rule 148 (statement -> labeled-statement .)
    CONSOLE         reduce using rule 148 (statement -> labeled-statement .)
    CONST           reduce using rule 148 (statement -> labeled-statement .)
    IF              reduce using rule 148 (statement -> labeled-statement .)
    SWITCH          reduce using rule 148 (statement -> labeled-statement .)
    WHILE           reduce using rule 148 (statement -> labeled-statement .)
    FOR             reduce using rule 148 (statement -> labeled-statement .)
    DO              reduce using rule 148 (statement -> labeled-statement .)
    BREAK           reduce using rule 148 (statement -> labeled-statement .)
    CONTINUE        reduce using rule 148 (statement -> labeled-statement .)
    GOTO            reduce using rule 148 (statement -> labeled-statement .)
    RETURN          reduce using rule 148 (statement -> labeled-statement .)
    NEW             reduce using rule 148 (statement -> labeled-statement .)
    BOOL            reduce using rule 148 (statement -> labeled-statement .)
    INT             reduce using rule 148 (statement -> labeled-statement .)
    UINT            reduce using rule 148 (statement -> labeled-statement .)
    CHAR            reduce using rule 148 (statement -> labeled-statement .)
    DOUBLE          reduce using rule 148 (statement -> labeled-statement .)
    CASE            reduce using rule 148 (statement -> labeled-statement .)
    DEFAULT         reduce using rule 148 (statement -> labeled-statement .)
    BLOCK_END       reduce using rule 148 (statement -> labeled-statement .)
    $end            reduce using rule 148 (statement -> labeled-statement .)


state 9

    (173) selection-statement -> switch-statement .

    IDENTIFIER      reduce using rule 173 (selection-statement -> switch-statement .)
    BLOCK_BEGIN     reduce using rule 173 (selection-statement -> switch-statement .)
    DELIM           reduce using rule 173 (selection-statement -> switch-statement .)
    CONSOLE         reduce using rule 173 (selection-statement -> switch-statement .)
    CONST           reduce using rule 173 (selection-statement -> switch-statement .)
    IF              reduce using rule 173 (selection-statement -> switch-statement .)
    SWITCH          reduce using rule 173 (selection-statement -> switch-statement .)
    WHILE           reduce using rule 173 (selection-statement -> switch-statement .)
    FOR             reduce using rule 173 (selection-statement -> switch-statement .)
    DO              reduce using rule 173 (selection-statement -> switch-statement .)
    BREAK           reduce using rule 173 (selection-statement -> switch-statement .)
    CONTINUE        reduce using rule 173 (selection-statement -> switch-statement .)
    GOTO            reduce using rule 173 (selection-statement -> switch-statement .)
    RETURN          reduce using rule 173 (selection-statement -> switch-statement .)
    NEW             reduce using rule 173 (selection-statement -> switch-statement .)
    BOOL            reduce using rule 173 (selection-statement -> switch-statement .)
    INT             reduce using rule 173 (selection-statement -> switch-statement .)
    UINT            reduce using rule 173 (selection-statement -> switch-statement .)
    CHAR            reduce using rule 173 (selection-statement -> switch-statement .)
    DOUBLE          reduce using rule 173 (selection-statement -> switch-statement .)
    BLOCK_END       reduce using rule 173 (selection-statement -> switch-statement .)
    CASE            reduce using rule 173 (selection-statement -> switch-statement .)
    DEFAULT         reduce using rule 173 (selection-statement -> switch-statement .)
    $end            reduce using rule 173 (selection-statement -> switch-statement .)


state 10

    (155) statement -> jump-statement .

    IDENTIFIER      reduce using rule 155 (statement -> jump-statement .)
    BLOCK_BEGIN     reduce using rule 155 (statement -> jump-statement .)
    DELIM           reduce using rule 155 (statement -> jump-statement .)
    CONSOLE         reduce using rule 155 (statement -> jump-statement .)
    CONST           reduce using rule 155 (statement -> jump-statement .)
    IF              reduce using rule 155 (statement -> jump-statement .)
    SWITCH          reduce using rule 155 (statement -> jump-statement .)
    WHILE           reduce using rule 155 (statement -> jump-statement .)
    FOR             reduce using rule 155 (statement -> jump-statement .)
    DO              reduce using rule 155 (statement -> jump-statement .)
    BREAK           reduce using rule 155 (statement -> jump-statement .)
    CONTINUE        reduce using rule 155 (statement -> jump-statement .)
    GOTO            reduce using rule 155 (statement -> jump-statement .)
    RETURN          reduce using rule 155 (statement -> jump-statement .)
    NEW             reduce using rule 155 (statement -> jump-statement .)
    BOOL            reduce using rule 155 (statement -> jump-statement .)
    INT             reduce using rule 155 (statement -> jump-statement .)
    UINT            reduce using rule 155 (statement -> jump-statement .)
    CHAR            reduce using rule 155 (statement -> jump-statement .)
    DOUBLE          reduce using rule 155 (statement -> jump-statement .)
    CASE            reduce using rule 155 (statement -> jump-statement .)
    DEFAULT         reduce using rule 155 (statement -> jump-statement .)
    BLOCK_END       reduce using rule 155 (statement -> jump-statement .)
    $end            reduce using rule 155 (statement -> jump-statement .)


state 11

    (5) class-declarations-opt -> class-declarations .
    (8) class-declarations -> class-declarations . class-declaration
    (9) class-declaration -> . CLASS IDENTIFIER class-base-opt class-body semi-opt

    $end            reduce using rule 5 (class-declarations-opt -> class-declarations .)
    CLASS           shift and go to state 52

    class-declaration              shift and go to state 67

state 12

    (33) simple-type -> DOUBLE .

    OPEN_BRACKET    reduce using rule 33 (simple-type -> DOUBLE .)
    IDENTIFIER      reduce using rule 33 (simple-type -> DOUBLE .)
    OPEN_PAREN      reduce using rule 33 (simple-type -> DOUBLE .)


state 13

    (169) statement-expression -> invocation-expression .

    DELIM           reduce using rule 169 (statement-expression -> invocation-expression .)
    COMMA           reduce using rule 169 (statement-expression -> invocation-expression .)
    CLOSE_PAREN     reduce using rule 169 (statement-expression -> invocation-expression .)


state 14

    (213) return-statement -> RETURN . expression-opt DELIM
    (214) expression-opt -> . expression
    (215) expression-opt -> . empty
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (227) empty -> .
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (108) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (104) prim-expression -> . IDENTIFIER
    (105) prim-expression -> . member-access
    (106) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (96) member-access -> . prim-expression DOT IDENTIFIER
    (102) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (103) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . parenthesized-expression
    (91) primary-no-array-creation-expression -> . member-access
    (92) primary-no-array-creation-expression -> . invocation-expression
    (93) primary-no-array-creation-expression -> . element-access
    (94) primary-no-array-creation-expression -> . object-creation-expression
    (223) literal -> . ICONST
    (224) literal -> . DCONST
    (225) literal -> . TRUE
    (226) literal -> . FALSE
    (95) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (107) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    DELIM           reduce using rule 227 (empty -> .)
    IDENTIFIER      shift and go to state 83
    PLUS            shift and go to state 82
    MINUS           shift and go to state 74
    BITNOT          shift and go to state 99
    BITCOMP         shift and go to state 77
    TIMES           shift and go to state 87
    NEW             shift and go to state 72
    ICONST          shift and go to state 89
    DCONST          shift and go to state 100
    TRUE            shift and go to state 94
    FALSE           shift and go to state 93
    OPEN_PAREN      shift and go to state 79

    unary-expression               shift and go to state 91
    exclusive-or-expression        shift and go to state 68
    member-access                  shift and go to state 69
    relational-expression          shift and go to state 70
    additive-expression            shift and go to state 73
    primary-no-array-creation-expression shift and go to state 88
    inclusive-or-expression        shift and go to state 75
    prim-expression                shift and go to state 51
    element-access                 shift and go to state 78
    literal                        shift and go to state 86
    conditional-expression         shift and go to state 80
    conditional-and-expression     shift and go to state 81
    empty                          shift and go to state 84
    array-creation-expression      shift and go to state 71
    assignment                     shift and go to state 85
    object-creation-expression     shift and go to state 90
    expression-opt                 shift and go to state 92
    equality-expression            shift and go to state 76
    shift-expression               shift and go to state 95
    and-expression                 shift and go to state 96
    multiplicative-expression      shift and go to state 97
    conditional-or-expression      shift and go to state 103
    primary-expression             shift and go to state 101
    invocation-expression          shift and go to state 102
    expression                     shift and go to state 98
    parenthesized-expression       shift and go to state 104

state 15

    (26) type -> simple-type .
    (34) array-type -> simple-type . OPEN_BRACKET ICONST CLOSE_BRACKET

    IDENTIFIER      reduce using rule 26 (type -> simple-type .)
    OPEN_PAREN      reduce using rule 26 (type -> simple-type .)
    OPEN_BRACKET    shift and go to state 105


state 16

    (209) jump-statement -> return-statement .

    IDENTIFIER      reduce using rule 209 (jump-statement -> return-statement .)
    BLOCK_BEGIN     reduce using rule 209 (jump-statement -> return-statement .)
    DELIM           reduce using rule 209 (jump-statement -> return-statement .)
    CONSOLE         reduce using rule 209 (jump-statement -> return-statement .)
    CONST           reduce using rule 209 (jump-statement -> return-statement .)
    IF              reduce using rule 209 (jump-statement -> return-statement .)
    SWITCH          reduce using rule 209 (jump-statement -> return-statement .)
    WHILE           reduce using rule 209 (jump-statement -> return-statement .)
    FOR             reduce using rule 209 (jump-statement -> return-statement .)
    DO              reduce using rule 209 (jump-statement -> return-statement .)
    BREAK           reduce using rule 209 (jump-statement -> return-statement .)
    CONTINUE        reduce using rule 209 (jump-statement -> return-statement .)
    GOTO            reduce using rule 209 (jump-statement -> return-statement .)
    RETURN          reduce using rule 209 (jump-statement -> return-statement .)
    NEW             reduce using rule 209 (jump-statement -> return-statement .)
    BOOL            reduce using rule 209 (jump-statement -> return-statement .)
    INT             reduce using rule 209 (jump-statement -> return-statement .)
    UINT            reduce using rule 209 (jump-statement -> return-statement .)
    CHAR            reduce using rule 209 (jump-statement -> return-statement .)
    DOUBLE          reduce using rule 209 (jump-statement -> return-statement .)
    $end            reduce using rule 209 (jump-statement -> return-statement .)
    CASE            reduce using rule 209 (jump-statement -> return-statement .)
    DEFAULT         reduce using rule 209 (jump-statement -> return-statement .)
    BLOCK_END       reduce using rule 209 (jump-statement -> return-statement .)


state 17

    (1) compilation-unit -> class-declarations-opt .

    $end            reduce using rule 1 (compilation-unit -> class-declarations-opt .)


state 18

    (106) prim-expression -> element-access .

    DOT             reduce using rule 106 (prim-expression -> element-access .)
    ASSIGN          reduce using rule 106 (prim-expression -> element-access .)
    PLUSEQUAL       reduce using rule 106 (prim-expression -> element-access .)
    MINUSEQUAL      reduce using rule 106 (prim-expression -> element-access .)
    TIMESEQUAL      reduce using rule 106 (prim-expression -> element-access .)
    DIVEQUAL        reduce using rule 106 (prim-expression -> element-access .)
    MODEQUAL        reduce using rule 106 (prim-expression -> element-access .)
    BITANDEQUAL     reduce using rule 106 (prim-expression -> element-access .)
    BITOREQUAL      reduce using rule 106 (prim-expression -> element-access .)
    BITXOREQUAL     reduce using rule 106 (prim-expression -> element-access .)
    LSHIFTEQUAL     reduce using rule 106 (prim-expression -> element-access .)
    RSHIFTEQUAL     reduce using rule 106 (prim-expression -> element-access .)


state 19

    (164) declaration-statement -> local-constant-declaration . DELIM

    DELIM           shift and go to state 106


state 20

    (192) iteration-statement -> do-statement . M_quad
    (178) M_quad -> . empty
    (227) empty -> .

    IDENTIFIER      reduce using rule 227 (empty -> .)
    BLOCK_BEGIN     reduce using rule 227 (empty -> .)
    DELIM           reduce using rule 227 (empty -> .)
    CONSOLE         reduce using rule 227 (empty -> .)
    CONST           reduce using rule 227 (empty -> .)
    IF              reduce using rule 227 (empty -> .)
    SWITCH          reduce using rule 227 (empty -> .)
    WHILE           reduce using rule 227 (empty -> .)
    FOR             reduce using rule 227 (empty -> .)
    DO              reduce using rule 227 (empty -> .)
    BREAK           reduce using rule 227 (empty -> .)
    CONTINUE        reduce using rule 227 (empty -> .)
    GOTO            reduce using rule 227 (empty -> .)
    RETURN          reduce using rule 227 (empty -> .)
    NEW             reduce using rule 227 (empty -> .)
    BOOL            reduce using rule 227 (empty -> .)
    INT             reduce using rule 227 (empty -> .)
    UINT            reduce using rule 227 (empty -> .)
    CHAR            reduce using rule 227 (empty -> .)
    DOUBLE          reduce using rule 227 (empty -> .)
    $end            reduce using rule 227 (empty -> .)
    BLOCK_END       reduce using rule 227 (empty -> .)
    CASE            reduce using rule 227 (empty -> .)
    DEFAULT         reduce using rule 227 (empty -> .)

    M_quad                         shift and go to state 107
    empty                          shift and go to state 65

state 21

    (196) for-statement -> FOR . OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block

    OPEN_PAREN      shift and go to state 108


state 22

    (207) jump-statement -> continue-statement .

    IDENTIFIER      reduce using rule 207 (jump-statement -> continue-statement .)
    BLOCK_BEGIN     reduce using rule 207 (jump-statement -> continue-statement .)
    DELIM           reduce using rule 207 (jump-statement -> continue-statement .)
    CONSOLE         reduce using rule 207 (jump-statement -> continue-statement .)
    CONST           reduce using rule 207 (jump-statement -> continue-statement .)
    IF              reduce using rule 207 (jump-statement -> continue-statement .)
    SWITCH          reduce using rule 207 (jump-statement -> continue-statement .)
    WHILE           reduce using rule 207 (jump-statement -> continue-statement .)
    FOR             reduce using rule 207 (jump-statement -> continue-statement .)
    DO              reduce using rule 207 (jump-statement -> continue-statement .)
    BREAK           reduce using rule 207 (jump-statement -> continue-statement .)
    CONTINUE        reduce using rule 207 (jump-statement -> continue-statement .)
    GOTO            reduce using rule 207 (jump-statement -> continue-statement .)
    RETURN          reduce using rule 207 (jump-statement -> continue-statement .)
    NEW             reduce using rule 207 (jump-statement -> continue-statement .)
    BOOL            reduce using rule 207 (jump-statement -> continue-statement .)
    INT             reduce using rule 207 (jump-statement -> continue-statement .)
    UINT            reduce using rule 207 (jump-statement -> continue-statement .)
    CHAR            reduce using rule 207 (jump-statement -> continue-statement .)
    DOUBLE          reduce using rule 207 (jump-statement -> continue-statement .)
    $end            reduce using rule 207 (jump-statement -> continue-statement .)
    CASE            reduce using rule 207 (jump-statement -> continue-statement .)
    DEFAULT         reduce using rule 207 (jump-statement -> continue-statement .)
    BLOCK_END       reduce using rule 207 (jump-statement -> continue-statement .)


state 23

    (163) declaration-statement -> local-variable-declaration . DELIM

    DELIM           shift and go to state 109


state 24

    (30) simple-type -> INT .

    OPEN_BRACKET    reduce using rule 30 (simple-type -> INT .)
    IDENTIFIER      reduce using rule 30 (simple-type -> INT .)
    OPEN_PAREN      reduce using rule 30 (simple-type -> INT .)


state 25

    (208) jump-statement -> goto-statement .

    IDENTIFIER      reduce using rule 208 (jump-statement -> goto-statement .)
    BLOCK_BEGIN     reduce using rule 208 (jump-statement -> goto-statement .)
    DELIM           reduce using rule 208 (jump-statement -> goto-statement .)
    CONSOLE         reduce using rule 208 (jump-statement -> goto-statement .)
    CONST           reduce using rule 208 (jump-statement -> goto-statement .)
    IF              reduce using rule 208 (jump-statement -> goto-statement .)
    SWITCH          reduce using rule 208 (jump-statement -> goto-statement .)
    WHILE           reduce using rule 208 (jump-statement -> goto-statement .)
    FOR             reduce using rule 208 (jump-statement -> goto-statement .)
    DO              reduce using rule 208 (jump-statement -> goto-statement .)
    BREAK           reduce using rule 208 (jump-statement -> goto-statement .)
    CONTINUE        reduce using rule 208 (jump-statement -> goto-statement .)
    GOTO            reduce using rule 208 (jump-statement -> goto-statement .)
    RETURN          reduce using rule 208 (jump-statement -> goto-statement .)
    NEW             reduce using rule 208 (jump-statement -> goto-statement .)
    BOOL            reduce using rule 208 (jump-statement -> goto-statement .)
    INT             reduce using rule 208 (jump-statement -> goto-statement .)
    UINT            reduce using rule 208 (jump-statement -> goto-statement .)
    CHAR            reduce using rule 208 (jump-statement -> goto-statement .)
    DOUBLE          reduce using rule 208 (jump-statement -> goto-statement .)
    $end            reduce using rule 208 (jump-statement -> goto-statement .)
    CASE            reduce using rule 208 (jump-statement -> goto-statement .)
    DEFAULT         reduce using rule 208 (jump-statement -> goto-statement .)
    BLOCK_END       reduce using rule 208 (jump-statement -> goto-statement .)


state 26

    (172) selection-statement -> if-statement . M_quad
    (178) M_quad -> . empty
    (227) empty -> .

    IDENTIFIER      reduce using rule 227 (empty -> .)
    BLOCK_BEGIN     reduce using rule 227 (empty -> .)
    DELIM           reduce using rule 227 (empty -> .)
    CONSOLE         reduce using rule 227 (empty -> .)
    CONST           reduce using rule 227 (empty -> .)
    IF              reduce using rule 227 (empty -> .)
    SWITCH          reduce using rule 227 (empty -> .)
    WHILE           reduce using rule 227 (empty -> .)
    FOR             reduce using rule 227 (empty -> .)
    DO              reduce using rule 227 (empty -> .)
    BREAK           reduce using rule 227 (empty -> .)
    CONTINUE        reduce using rule 227 (empty -> .)
    GOTO            reduce using rule 227 (empty -> .)
    RETURN          reduce using rule 227 (empty -> .)
    NEW             reduce using rule 227 (empty -> .)
    BOOL            reduce using rule 227 (empty -> .)
    INT             reduce using rule 227 (empty -> .)
    UINT            reduce using rule 227 (empty -> .)
    CHAR            reduce using rule 227 (empty -> .)
    DOUBLE          reduce using rule 227 (empty -> .)
    $end            reduce using rule 227 (empty -> .)
    BLOCK_END       reduce using rule 227 (empty -> .)
    CASE            reduce using rule 227 (empty -> .)
    DEFAULT         reduce using rule 227 (empty -> .)

    M_quad                         shift and go to state 110
    empty                          shift and go to state 65

state 27

    (211) continue-statement -> CONTINUE . DELIM

    DELIM           shift and go to state 111


state 28

    (150) statement -> block .

    IDENTIFIER      reduce using rule 150 (statement -> block .)
    BLOCK_BEGIN     reduce using rule 150 (statement -> block .)
    DELIM           reduce using rule 150 (statement -> block .)
    CONSOLE         reduce using rule 150 (statement -> block .)
    CONST           reduce using rule 150 (statement -> block .)
    IF              reduce using rule 150 (statement -> block .)
    SWITCH          reduce using rule 150 (statement -> block .)
    WHILE           reduce using rule 150 (statement -> block .)
    FOR             reduce using rule 150 (statement -> block .)
    DO              reduce using rule 150 (statement -> block .)
    BREAK           reduce using rule 150 (statement -> block .)
    CONTINUE        reduce using rule 150 (statement -> block .)
    GOTO            reduce using rule 150 (statement -> block .)
    RETURN          reduce using rule 150 (statement -> block .)
    NEW             reduce using rule 150 (statement -> block .)
    BOOL            reduce using rule 150 (statement -> block .)
    INT             reduce using rule 150 (statement -> block .)
    UINT            reduce using rule 150 (statement -> block .)
    CHAR            reduce using rule 150 (statement -> block .)
    DOUBLE          reduce using rule 150 (statement -> block .)
    CASE            reduce using rule 150 (statement -> block .)
    DEFAULT         reduce using rule 150 (statement -> block .)
    BLOCK_END       reduce using rule 150 (statement -> block .)
    $end            reduce using rule 150 (statement -> block .)


state 29

    (153) statement -> selection-statement .

    IDENTIFIER      reduce using rule 153 (statement -> selection-statement .)
    BLOCK_BEGIN     reduce using rule 153 (statement -> selection-statement .)
    DELIM           reduce using rule 153 (statement -> selection-statement .)
    CONSOLE         reduce using rule 153 (statement -> selection-statement .)
    CONST           reduce using rule 153 (statement -> selection-statement .)
    IF              reduce using rule 153 (statement -> selection-statement .)
    SWITCH          reduce using rule 153 (statement -> selection-statement .)
    WHILE           reduce using rule 153 (statement -> selection-statement .)
    FOR             reduce using rule 153 (statement -> selection-statement .)
    DO              reduce using rule 153 (statement -> selection-statement .)
    BREAK           reduce using rule 153 (statement -> selection-statement .)
    CONTINUE        reduce using rule 153 (statement -> selection-statement .)
    GOTO            reduce using rule 153 (statement -> selection-statement .)
    RETURN          reduce using rule 153 (statement -> selection-statement .)
    NEW             reduce using rule 153 (statement -> selection-statement .)
    BOOL            reduce using rule 153 (statement -> selection-statement .)
    INT             reduce using rule 153 (statement -> selection-statement .)
    UINT            reduce using rule 153 (statement -> selection-statement .)
    CHAR            reduce using rule 153 (statement -> selection-statement .)
    DOUBLE          reduce using rule 153 (statement -> selection-statement .)
    CASE            reduce using rule 153 (statement -> selection-statement .)
    DEFAULT         reduce using rule 153 (statement -> selection-statement .)
    BLOCK_END       reduce using rule 153 (statement -> selection-statement .)
    $end            reduce using rule 153 (statement -> selection-statement .)


state 30

    (32) simple-type -> CHAR .

    OPEN_BRACKET    reduce using rule 32 (simple-type -> CHAR .)
    IDENTIFIER      reduce using rule 32 (simple-type -> CHAR .)
    OPEN_PAREN      reduce using rule 32 (simple-type -> CHAR .)


state 31

    (193) while-statement -> WHILE . M_quad OPEN_PAREN expression CLOSE_PAREN M_while block
    (178) M_quad -> . empty
    (227) empty -> .

    OPEN_PAREN      reduce using rule 227 (empty -> .)

    M_quad                         shift and go to state 112
    empty                          shift and go to state 65

state 32

    (151) statement -> empty-statement .

    IDENTIFIER      reduce using rule 151 (statement -> empty-statement .)
    BLOCK_BEGIN     reduce using rule 151 (statement -> empty-statement .)
    DELIM           reduce using rule 151 (statement -> empty-statement .)
    CONSOLE         reduce using rule 151 (statement -> empty-statement .)
    CONST           reduce using rule 151 (statement -> empty-statement .)
    IF              reduce using rule 151 (statement -> empty-statement .)
    SWITCH          reduce using rule 151 (statement -> empty-statement .)
    WHILE           reduce using rule 151 (statement -> empty-statement .)
    FOR             reduce using rule 151 (statement -> empty-statement .)
    DO              reduce using rule 151 (statement -> empty-statement .)
    BREAK           reduce using rule 151 (statement -> empty-statement .)
    CONTINUE        reduce using rule 151 (statement -> empty-statement .)
    GOTO            reduce using rule 151 (statement -> empty-statement .)
    RETURN          reduce using rule 151 (statement -> empty-statement .)
    NEW             reduce using rule 151 (statement -> empty-statement .)
    BOOL            reduce using rule 151 (statement -> empty-statement .)
    INT             reduce using rule 151 (statement -> empty-statement .)
    UINT            reduce using rule 151 (statement -> empty-statement .)
    CHAR            reduce using rule 151 (statement -> empty-statement .)
    DOUBLE          reduce using rule 151 (statement -> empty-statement .)
    CASE            reduce using rule 151 (statement -> empty-statement .)
    DEFAULT         reduce using rule 151 (statement -> empty-statement .)
    BLOCK_END       reduce using rule 151 (statement -> empty-statement .)
    $end            reduce using rule 151 (statement -> empty-statement .)


state 33

    (107) object-creation-expression -> NEW . type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE
    (13) class-type -> . IDENTIFIER
    (34) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET

    BOOL            shift and go to state 44
    INT             shift and go to state 24
    UINT            shift and go to state 57
    CHAR            shift and go to state 30
    DOUBLE          shift and go to state 12
    IDENTIFIER      shift and go to state 113

    simple-type                    shift and go to state 15
    array-type                     shift and go to state 40
    class-type                     shift and go to state 60
    type                           shift and go to state 114

state 34

    (206) jump-statement -> break-statement .

    IDENTIFIER      reduce using rule 206 (jump-statement -> break-statement .)
    BLOCK_BEGIN     reduce using rule 206 (jump-statement -> break-statement .)
    DELIM           reduce using rule 206 (jump-statement -> break-statement .)
    CONSOLE         reduce using rule 206 (jump-statement -> break-statement .)
    CONST           reduce using rule 206 (jump-statement -> break-statement .)
    IF              reduce using rule 206 (jump-statement -> break-statement .)
    SWITCH          reduce using rule 206 (jump-statement -> break-statement .)
    WHILE           reduce using rule 206 (jump-statement -> break-statement .)
    FOR             reduce using rule 206 (jump-statement -> break-statement .)
    DO              reduce using rule 206 (jump-statement -> break-statement .)
    BREAK           reduce using rule 206 (jump-statement -> break-statement .)
    CONTINUE        reduce using rule 206 (jump-statement -> break-statement .)
    GOTO            reduce using rule 206 (jump-statement -> break-statement .)
    RETURN          reduce using rule 206 (jump-statement -> break-statement .)
    NEW             reduce using rule 206 (jump-statement -> break-statement .)
    BOOL            reduce using rule 206 (jump-statement -> break-statement .)
    INT             reduce using rule 206 (jump-statement -> break-statement .)
    UINT            reduce using rule 206 (jump-statement -> break-statement .)
    CHAR            reduce using rule 206 (jump-statement -> break-statement .)
    DOUBLE          reduce using rule 206 (jump-statement -> break-statement .)
    $end            reduce using rule 206 (jump-statement -> break-statement .)
    CASE            reduce using rule 206 (jump-statement -> break-statement .)
    DEFAULT         reduce using rule 206 (jump-statement -> break-statement .)
    BLOCK_END       reduce using rule 206 (jump-statement -> break-statement .)


state 35

    (179) switch-statement -> SWITCH . OPEN_PAREN expression CLOSE_PAREN switch-block

    OPEN_PAREN      shift and go to state 115


state 36

    (146) statement-list -> statement .

    IDENTIFIER      reduce using rule 146 (statement-list -> statement .)
    BLOCK_BEGIN     reduce using rule 146 (statement-list -> statement .)
    DELIM           reduce using rule 146 (statement-list -> statement .)
    CONSOLE         reduce using rule 146 (statement-list -> statement .)
    CONST           reduce using rule 146 (statement-list -> statement .)
    IF              reduce using rule 146 (statement-list -> statement .)
    SWITCH          reduce using rule 146 (statement-list -> statement .)
    WHILE           reduce using rule 146 (statement-list -> statement .)
    FOR             reduce using rule 146 (statement-list -> statement .)
    DO              reduce using rule 146 (statement-list -> statement .)
    BREAK           reduce using rule 146 (statement-list -> statement .)
    CONTINUE        reduce using rule 146 (statement-list -> statement .)
    GOTO            reduce using rule 146 (statement-list -> statement .)
    RETURN          reduce using rule 146 (statement-list -> statement .)
    NEW             reduce using rule 146 (statement-list -> statement .)
    BOOL            reduce using rule 146 (statement-list -> statement .)
    INT             reduce using rule 146 (statement-list -> statement .)
    UINT            reduce using rule 146 (statement-list -> statement .)
    CHAR            reduce using rule 146 (statement-list -> statement .)
    DOUBLE          reduce using rule 146 (statement-list -> statement .)
    BLOCK_END       reduce using rule 146 (statement-list -> statement .)
    $end            reduce using rule 146 (statement-list -> statement .)
    CASE            reduce using rule 146 (statement-list -> statement .)
    DEFAULT         reduce using rule 146 (statement-list -> statement .)


state 37

    (162) labeled-statement -> IDENTIFIER . COLON statement
    (97) invocation-expression -> IDENTIFIER . OPEN_PAREN argument-list-opt CLOSE_PAREN
    (13) class-type -> IDENTIFIER .
    (104) prim-expression -> IDENTIFIER .
    (102) element-access -> IDENTIFIER . OPEN_BRACKET expression-list CLOSE_BRACKET

    COLON           shift and go to state 118
    OPEN_PAREN      shift and go to state 117
    IDENTIFIER      reduce using rule 13 (class-type -> IDENTIFIER .)
    DOT             reduce using rule 104 (prim-expression -> IDENTIFIER .)
    ASSIGN          reduce using rule 104 (prim-expression -> IDENTIFIER .)
    PLUSEQUAL       reduce using rule 104 (prim-expression -> IDENTIFIER .)
    MINUSEQUAL      reduce using rule 104 (prim-expression -> IDENTIFIER .)
    TIMESEQUAL      reduce using rule 104 (prim-expression -> IDENTIFIER .)
    DIVEQUAL        reduce using rule 104 (prim-expression -> IDENTIFIER .)
    MODEQUAL        reduce using rule 104 (prim-expression -> IDENTIFIER .)
    BITANDEQUAL     reduce using rule 104 (prim-expression -> IDENTIFIER .)
    BITOREQUAL      reduce using rule 104 (prim-expression -> IDENTIFIER .)
    BITXOREQUAL     reduce using rule 104 (prim-expression -> IDENTIFIER .)
    LSHIFTEQUAL     reduce using rule 104 (prim-expression -> IDENTIFIER .)
    RSHIFTEQUAL     reduce using rule 104 (prim-expression -> IDENTIFIER .)
    OPEN_BRACKET    shift and go to state 116


state 38

    (165) local-variable-declaration -> type . variable-declarators
    (124) variable-declarators -> . variable-declarator
    (125) variable-declarators -> . variable-declarators COMMA variable-declarator
    (126) variable-declarator -> . IDENTIFIER
    (127) variable-declarator -> . IDENTIFIER ASSIGN variable-initializer

    IDENTIFIER      shift and go to state 121

    variable-declarator            shift and go to state 119
    variable-declarators           shift and go to state 120

state 39

    (6) class-declarations-opt -> empty .

    $end            reduce using rule 6 (class-declarations-opt -> empty .)


state 40

    (28) type -> array-type .

    IDENTIFIER      reduce using rule 28 (type -> array-type .)
    OPEN_PAREN      reduce using rule 28 (type -> array-type .)


state 41

    (149) statement -> declaration-statement .

    IDENTIFIER      reduce using rule 149 (statement -> declaration-statement .)
    BLOCK_BEGIN     reduce using rule 149 (statement -> declaration-statement .)
    DELIM           reduce using rule 149 (statement -> declaration-statement .)
    CONSOLE         reduce using rule 149 (statement -> declaration-statement .)
    CONST           reduce using rule 149 (statement -> declaration-statement .)
    IF              reduce using rule 149 (statement -> declaration-statement .)
    SWITCH          reduce using rule 149 (statement -> declaration-statement .)
    WHILE           reduce using rule 149 (statement -> declaration-statement .)
    FOR             reduce using rule 149 (statement -> declaration-statement .)
    DO              reduce using rule 149 (statement -> declaration-statement .)
    BREAK           reduce using rule 149 (statement -> declaration-statement .)
    CONTINUE        reduce using rule 149 (statement -> declaration-statement .)
    GOTO            reduce using rule 149 (statement -> declaration-statement .)
    RETURN          reduce using rule 149 (statement -> declaration-statement .)
    NEW             reduce using rule 149 (statement -> declaration-statement .)
    BOOL            reduce using rule 149 (statement -> declaration-statement .)
    INT             reduce using rule 149 (statement -> declaration-statement .)
    UINT            reduce using rule 149 (statement -> declaration-statement .)
    CHAR            reduce using rule 149 (statement -> declaration-statement .)
    DOUBLE          reduce using rule 149 (statement -> declaration-statement .)
    CASE            reduce using rule 149 (statement -> declaration-statement .)
    DEFAULT         reduce using rule 149 (statement -> declaration-statement .)
    BLOCK_END       reduce using rule 149 (statement -> declaration-statement .)
    $end            reduce using rule 149 (statement -> declaration-statement .)


state 42

    (154) statement -> iteration-statement .

    IDENTIFIER      reduce using rule 154 (statement -> iteration-statement .)
    BLOCK_BEGIN     reduce using rule 154 (statement -> iteration-statement .)
    DELIM           reduce using rule 154 (statement -> iteration-statement .)
    CONSOLE         reduce using rule 154 (statement -> iteration-statement .)
    CONST           reduce using rule 154 (statement -> iteration-statement .)
    IF              reduce using rule 154 (statement -> iteration-statement .)
    SWITCH          reduce using rule 154 (statement -> iteration-statement .)
    WHILE           reduce using rule 154 (statement -> iteration-statement .)
    FOR             reduce using rule 154 (statement -> iteration-statement .)
    DO              reduce using rule 154 (statement -> iteration-statement .)
    BREAK           reduce using rule 154 (statement -> iteration-statement .)
    CONTINUE        reduce using rule 154 (statement -> iteration-statement .)
    GOTO            reduce using rule 154 (statement -> iteration-statement .)
    RETURN          reduce using rule 154 (statement -> iteration-statement .)
    NEW             reduce using rule 154 (statement -> iteration-statement .)
    BOOL            reduce using rule 154 (statement -> iteration-statement .)
    INT             reduce using rule 154 (statement -> iteration-statement .)
    UINT            reduce using rule 154 (statement -> iteration-statement .)
    CHAR            reduce using rule 154 (statement -> iteration-statement .)
    DOUBLE          reduce using rule 154 (statement -> iteration-statement .)
    CASE            reduce using rule 154 (statement -> iteration-statement .)
    DEFAULT         reduce using rule 154 (statement -> iteration-statement .)
    BLOCK_END       reduce using rule 154 (statement -> iteration-statement .)
    $end            reduce using rule 154 (statement -> iteration-statement .)


state 43

    (210) break-statement -> BREAK . DELIM

    DELIM           shift and go to state 122


state 44

    (29) simple-type -> BOOL .

    OPEN_BRACKET    reduce using rule 29 (simple-type -> BOOL .)
    IDENTIFIER      reduce using rule 29 (simple-type -> BOOL .)
    OPEN_PAREN      reduce using rule 29 (simple-type -> BOOL .)


state 45

    (2) compilation-unit -> statement-list .
    (147) statement-list -> statement-list . statement
    (148) statement -> . labeled-statement
    (149) statement -> . declaration-statement
    (150) statement -> . block
    (151) statement -> . empty-statement
    (152) statement -> . expression-statement
    (153) statement -> . selection-statement
    (154) statement -> . iteration-statement
    (155) statement -> . jump-statement
    (156) statement -> . write-statement
    (157) statement -> . read-statement
    (162) labeled-statement -> . IDENTIFIER COLON statement
    (163) declaration-statement -> . local-variable-declaration DELIM
    (164) declaration-statement -> . local-constant-declaration DELIM
    (142) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END
    (167) empty-statement -> . DELIM
    (168) expression-statement -> . statement-expression DELIM
    (172) selection-statement -> . if-statement M_quad
    (173) selection-statement -> . switch-statement
    (190) iteration-statement -> . while-statement M_quad
    (191) iteration-statement -> . for-statement M_quad
    (192) iteration-statement -> . do-statement M_quad
    (206) jump-statement -> . break-statement
    (207) jump-statement -> . continue-statement
    (208) jump-statement -> . goto-statement
    (209) jump-statement -> . return-statement
    (158) write-statement -> . CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM
    (161) read-statement -> . CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM
    (165) local-variable-declaration -> . type variable-declarators
    (166) local-constant-declaration -> . CONST type constant-declarators
    (169) statement-expression -> . invocation-expression
    (170) statement-expression -> . object-creation-expression
    (171) statement-expression -> . assignment
    (174) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block
    (175) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block
    (179) switch-statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block
    (193) while-statement -> . WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block
    (196) for-statement -> . FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block
    (195) do-statement -> . DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM
    (210) break-statement -> . BREAK DELIM
    (211) continue-statement -> . CONTINUE DELIM
    (212) goto-statement -> . GOTO IDENTIFIER DELIM
    (213) return-statement -> . RETURN expression-opt DELIM
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (107) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (108) assignment -> . prim-expression assignment-operator expression
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE
    (13) class-type -> . IDENTIFIER
    (34) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET
    (96) member-access -> . prim-expression DOT IDENTIFIER
    (104) prim-expression -> . IDENTIFIER
    (105) prim-expression -> . member-access
    (106) prim-expression -> . element-access
    (102) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (103) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET

    $end            reduce using rule 2 (compilation-unit -> statement-list .)
    IDENTIFIER      shift and go to state 37
    BLOCK_BEGIN     shift and go to state 50
    DELIM           shift and go to state 4
    CONSOLE         shift and go to state 54
    CONST           shift and go to state 49
    IF              shift and go to state 59
    SWITCH          shift and go to state 35
    WHILE           shift and go to state 31
    FOR             shift and go to state 21
    DO              shift and go to state 48
    BREAK           shift and go to state 43
    CONTINUE        shift and go to state 27
    GOTO            shift and go to state 7
    RETURN          shift and go to state 14
    NEW             shift and go to state 33
    BOOL            shift and go to state 44
    INT             shift and go to state 24
    UINT            shift and go to state 57
    CHAR            shift and go to state 30
    DOUBLE          shift and go to state 12

    return-statement               shift and go to state 16
    write-statement                shift and go to state 1
    member-access                  shift and go to state 2
    selection-statement            shift and go to state 29
    empty-statement                shift and go to state 32
    expression-statement           shift and go to state 3
    break-statement                shift and go to state 34
    prim-expression                shift and go to state 51
    element-access                 shift and go to state 18
    statement-expression           shift and go to state 5
    local-constant-declaration     shift and go to state 19
    statement                      shift and go to state 123
    assignment                     shift and go to state 55
    for-statement                  shift and go to state 6
    type                           shift and go to state 38
    read-statement                 shift and go to state 53
    do-statement                   shift and go to state 20
    array-type                     shift and go to state 40
    continue-statement             shift and go to state 22
    invocation-expression          shift and go to state 13
    labeled-statement              shift and go to state 8
    declaration-statement          shift and go to state 41
    object-creation-expression     shift and go to state 58
    switch-statement               shift and go to state 9
    jump-statement                 shift and go to state 10
    iteration-statement            shift and go to state 42
    local-variable-declaration     shift and go to state 23
    goto-statement                 shift and go to state 25
    if-statement                   shift and go to state 26
    class-type                     shift and go to state 60
    while-statement                shift and go to state 46
    simple-type                    shift and go to state 15
    block                          shift and go to state 28

state 46

    (190) iteration-statement -> while-statement . M_quad
    (178) M_quad -> . empty
    (227) empty -> .

    IDENTIFIER      reduce using rule 227 (empty -> .)
    BLOCK_BEGIN     reduce using rule 227 (empty -> .)
    DELIM           reduce using rule 227 (empty -> .)
    CONSOLE         reduce using rule 227 (empty -> .)
    CONST           reduce using rule 227 (empty -> .)
    IF              reduce using rule 227 (empty -> .)
    SWITCH          reduce using rule 227 (empty -> .)
    WHILE           reduce using rule 227 (empty -> .)
    FOR             reduce using rule 227 (empty -> .)
    DO              reduce using rule 227 (empty -> .)
    BREAK           reduce using rule 227 (empty -> .)
    CONTINUE        reduce using rule 227 (empty -> .)
    GOTO            reduce using rule 227 (empty -> .)
    RETURN          reduce using rule 227 (empty -> .)
    NEW             reduce using rule 227 (empty -> .)
    BOOL            reduce using rule 227 (empty -> .)
    INT             reduce using rule 227 (empty -> .)
    UINT            reduce using rule 227 (empty -> .)
    CHAR            reduce using rule 227 (empty -> .)
    DOUBLE          reduce using rule 227 (empty -> .)
    $end            reduce using rule 227 (empty -> .)
    BLOCK_END       reduce using rule 227 (empty -> .)
    CASE            reduce using rule 227 (empty -> .)
    DEFAULT         reduce using rule 227 (empty -> .)

    M_quad                         shift and go to state 124
    empty                          shift and go to state 65

state 47

    (0) S' -> compilation-unit .



state 48

    (195) do-statement -> DO . M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM
    (178) M_quad -> . empty
    (227) empty -> .

    BLOCK_BEGIN     reduce using rule 227 (empty -> .)

    M_quad                         shift and go to state 125
    empty                          shift and go to state 65

state 49

    (166) local-constant-declaration -> CONST . type constant-declarators
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE
    (13) class-type -> . IDENTIFIER
    (34) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET

    BOOL            shift and go to state 44
    INT             shift and go to state 24
    UINT            shift and go to state 57
    CHAR            shift and go to state 30
    DOUBLE          shift and go to state 12
    IDENTIFIER      shift and go to state 113

    simple-type                    shift and go to state 15
    array-type                     shift and go to state 40
    type                           shift and go to state 126
    class-type                     shift and go to state 60

state 50

    (142) block -> BLOCK_BEGIN . M_bstart statement-list-opt BLOCK_END
    (143) M_bstart -> . empty
    (227) empty -> .

    IDENTIFIER      reduce using rule 227 (empty -> .)
    BLOCK_BEGIN     reduce using rule 227 (empty -> .)
    DELIM           reduce using rule 227 (empty -> .)
    CONSOLE         reduce using rule 227 (empty -> .)
    CONST           reduce using rule 227 (empty -> .)
    IF              reduce using rule 227 (empty -> .)
    SWITCH          reduce using rule 227 (empty -> .)
    WHILE           reduce using rule 227 (empty -> .)
    FOR             reduce using rule 227 (empty -> .)
    DO              reduce using rule 227 (empty -> .)
    BREAK           reduce using rule 227 (empty -> .)
    CONTINUE        reduce using rule 227 (empty -> .)
    GOTO            reduce using rule 227 (empty -> .)
    RETURN          reduce using rule 227 (empty -> .)
    NEW             reduce using rule 227 (empty -> .)
    BOOL            reduce using rule 227 (empty -> .)
    INT             reduce using rule 227 (empty -> .)
    UINT            reduce using rule 227 (empty -> .)
    CHAR            reduce using rule 227 (empty -> .)
    DOUBLE          reduce using rule 227 (empty -> .)
    BLOCK_END       reduce using rule 227 (empty -> .)

    M_bstart                       shift and go to state 127
    empty                          shift and go to state 128

state 51

    (108) assignment -> prim-expression . assignment-operator expression
    (96) member-access -> prim-expression . DOT IDENTIFIER
    (109) assignment-operator -> . ASSIGN
    (110) assignment-operator -> . PLUSEQUAL
    (111) assignment-operator -> . MINUSEQUAL
    (112) assignment-operator -> . TIMESEQUAL
    (113) assignment-operator -> . DIVEQUAL
    (114) assignment-operator -> . MODEQUAL
    (115) assignment-operator -> . BITANDEQUAL
    (116) assignment-operator -> . BITOREQUAL
    (117) assignment-operator -> . BITXOREQUAL
    (118) assignment-operator -> . LSHIFTEQUAL
    (119) assignment-operator -> . RSHIFTEQUAL

    DOT             shift and go to state 140
    ASSIGN          shift and go to state 139
    PLUSEQUAL       shift and go to state 135
    MINUSEQUAL      shift and go to state 133
    TIMESEQUAL      shift and go to state 132
    DIVEQUAL        shift and go to state 129
    MODEQUAL        shift and go to state 141
    BITANDEQUAL     shift and go to state 137
    BITOREQUAL      shift and go to state 134
    BITXOREQUAL     shift and go to state 136
    LSHIFTEQUAL     shift and go to state 138
    RSHIFTEQUAL     shift and go to state 130

    assignment-operator            shift and go to state 131

state 52

    (9) class-declaration -> CLASS . IDENTIFIER class-base-opt class-body semi-opt

    IDENTIFIER      shift and go to state 142


state 53

    (157) statement -> read-statement .

    IDENTIFIER      reduce using rule 157 (statement -> read-statement .)
    BLOCK_BEGIN     reduce using rule 157 (statement -> read-statement .)
    DELIM           reduce using rule 157 (statement -> read-statement .)
    CONSOLE         reduce using rule 157 (statement -> read-statement .)
    CONST           reduce using rule 157 (statement -> read-statement .)
    IF              reduce using rule 157 (statement -> read-statement .)
    SWITCH          reduce using rule 157 (statement -> read-statement .)
    WHILE           reduce using rule 157 (statement -> read-statement .)
    FOR             reduce using rule 157 (statement -> read-statement .)
    DO              reduce using rule 157 (statement -> read-statement .)
    BREAK           reduce using rule 157 (statement -> read-statement .)
    CONTINUE        reduce using rule 157 (statement -> read-statement .)
    GOTO            reduce using rule 157 (statement -> read-statement .)
    RETURN          reduce using rule 157 (statement -> read-statement .)
    NEW             reduce using rule 157 (statement -> read-statement .)
    BOOL            reduce using rule 157 (statement -> read-statement .)
    INT             reduce using rule 157 (statement -> read-statement .)
    UINT            reduce using rule 157 (statement -> read-statement .)
    CHAR            reduce using rule 157 (statement -> read-statement .)
    DOUBLE          reduce using rule 157 (statement -> read-statement .)
    CASE            reduce using rule 157 (statement -> read-statement .)
    DEFAULT         reduce using rule 157 (statement -> read-statement .)
    BLOCK_END       reduce using rule 157 (statement -> read-statement .)
    $end            reduce using rule 157 (statement -> read-statement .)


state 54

    (158) write-statement -> CONSOLE . DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM
    (161) read-statement -> CONSOLE . DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM

    DOT             shift and go to state 143


state 55

    (171) statement-expression -> assignment .

    DELIM           reduce using rule 171 (statement-expression -> assignment .)
    COMMA           reduce using rule 171 (statement-expression -> assignment .)
    CLOSE_PAREN     reduce using rule 171 (statement-expression -> assignment .)


state 56

    (7) class-declarations -> class-declaration .

    CLASS           reduce using rule 7 (class-declarations -> class-declaration .)
    $end            reduce using rule 7 (class-declarations -> class-declaration .)


state 57

    (31) simple-type -> UINT .

    OPEN_BRACKET    reduce using rule 31 (simple-type -> UINT .)
    IDENTIFIER      reduce using rule 31 (simple-type -> UINT .)
    OPEN_PAREN      reduce using rule 31 (simple-type -> UINT .)


state 58

    (170) statement-expression -> object-creation-expression .

    DELIM           reduce using rule 170 (statement-expression -> object-creation-expression .)
    COMMA           reduce using rule 170 (statement-expression -> object-creation-expression .)
    CLOSE_PAREN     reduce using rule 170 (statement-expression -> object-creation-expression .)


state 59

    (174) if-statement -> IF . OPEN_PAREN expression CLOSE_PAREN M_if block
    (175) if-statement -> IF . OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block

    OPEN_PAREN      shift and go to state 144


state 60

    (27) type -> class-type .

    IDENTIFIER      reduce using rule 27 (type -> class-type .)
    OPEN_PAREN      reduce using rule 27 (type -> class-type .)


state 61

    (103) element-access -> member-access OPEN_BRACKET . expression-list CLOSE_BRACKET
    (81) expression-list -> . expression
    (82) expression-list -> . expression-list COMMA expression
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (108) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (104) prim-expression -> . IDENTIFIER
    (105) prim-expression -> . member-access
    (106) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (96) member-access -> . prim-expression DOT IDENTIFIER
    (102) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (103) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . parenthesized-expression
    (91) primary-no-array-creation-expression -> . member-access
    (92) primary-no-array-creation-expression -> . invocation-expression
    (93) primary-no-array-creation-expression -> . element-access
    (94) primary-no-array-creation-expression -> . object-creation-expression
    (223) literal -> . ICONST
    (224) literal -> . DCONST
    (225) literal -> . TRUE
    (226) literal -> . FALSE
    (95) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (107) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 83
    PLUS            shift and go to state 82
    MINUS           shift and go to state 74
    BITNOT          shift and go to state 99
    BITCOMP         shift and go to state 77
    TIMES           shift and go to state 87
    NEW             shift and go to state 72
    ICONST          shift and go to state 89
    DCONST          shift and go to state 100
    TRUE            shift and go to state 94
    FALSE           shift and go to state 93
    OPEN_PAREN      shift and go to state 79

    unary-expression               shift and go to state 91
    exclusive-or-expression        shift and go to state 68
    member-access                  shift and go to state 69
    relational-expression          shift and go to state 70
    additive-expression            shift and go to state 73
    primary-no-array-creation-expression shift and go to state 88
    inclusive-or-expression        shift and go to state 75
    equality-expression            shift and go to state 76
    prim-expression                shift and go to state 51
    element-access                 shift and go to state 78
    literal                        shift and go to state 86
    conditional-expression         shift and go to state 80
    conditional-and-expression     shift and go to state 81
    array-creation-expression      shift and go to state 71
    assignment                     shift and go to state 85
    object-creation-expression     shift and go to state 90
    expression-list                shift and go to state 145
    shift-expression               shift and go to state 95
    and-expression                 shift and go to state 96
    multiplicative-expression      shift and go to state 97
    conditional-or-expression      shift and go to state 103
    primary-expression             shift and go to state 101
    invocation-expression          shift and go to state 102
    expression                     shift and go to state 146
    parenthesized-expression       shift and go to state 104

state 62

    (98) invocation-expression -> member-access OPEN_PAREN . argument-list-opt CLOSE_PAREN
    (99) argument-list-opt -> . expression-list
    (100) argument-list-opt -> . empty
    (81) expression-list -> . expression
    (82) expression-list -> . expression-list COMMA expression
    (227) empty -> .
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (108) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (104) prim-expression -> . IDENTIFIER
    (105) prim-expression -> . member-access
    (106) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (96) member-access -> . prim-expression DOT IDENTIFIER
    (102) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (103) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . parenthesized-expression
    (91) primary-no-array-creation-expression -> . member-access
    (92) primary-no-array-creation-expression -> . invocation-expression
    (93) primary-no-array-creation-expression -> . element-access
    (94) primary-no-array-creation-expression -> . object-creation-expression
    (223) literal -> . ICONST
    (224) literal -> . DCONST
    (225) literal -> . TRUE
    (226) literal -> . FALSE
    (95) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (107) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    CLOSE_PAREN     reduce using rule 227 (empty -> .)
    IDENTIFIER      shift and go to state 83
    PLUS            shift and go to state 82
    MINUS           shift and go to state 74
    BITNOT          shift and go to state 99
    BITCOMP         shift and go to state 77
    TIMES           shift and go to state 87
    NEW             shift and go to state 72
    ICONST          shift and go to state 89
    DCONST          shift and go to state 100
    TRUE            shift and go to state 94
    FALSE           shift and go to state 93
    OPEN_PAREN      shift and go to state 79

    argument-list-opt              shift and go to state 147
    unary-expression               shift and go to state 91
    exclusive-or-expression        shift and go to state 68
    member-access                  shift and go to state 69
    relational-expression          shift and go to state 70
    additive-expression            shift and go to state 73
    primary-no-array-creation-expression shift and go to state 88
    inclusive-or-expression        shift and go to state 75
    expression-list                shift and go to state 149
    prim-expression                shift and go to state 51
    element-access                 shift and go to state 78
    literal                        shift and go to state 86
    conditional-expression         shift and go to state 80
    assignment                     shift and go to state 85
    empty                          shift and go to state 148
    array-creation-expression      shift and go to state 71
    conditional-and-expression     shift and go to state 81
    object-creation-expression     shift and go to state 90
    equality-expression            shift and go to state 76
    shift-expression               shift and go to state 95
    and-expression                 shift and go to state 96
    multiplicative-expression      shift and go to state 97
    conditional-or-expression      shift and go to state 103
    primary-expression             shift and go to state 101
    invocation-expression          shift and go to state 102
    expression                     shift and go to state 146
    parenthesized-expression       shift and go to state 104

state 63

    (168) expression-statement -> statement-expression DELIM .

    IDENTIFIER      reduce using rule 168 (expression-statement -> statement-expression DELIM .)
    BLOCK_BEGIN     reduce using rule 168 (expression-statement -> statement-expression DELIM .)
    DELIM           reduce using rule 168 (expression-statement -> statement-expression DELIM .)
    CONSOLE         reduce using rule 168 (expression-statement -> statement-expression DELIM .)
    CONST           reduce using rule 168 (expression-statement -> statement-expression DELIM .)
    IF              reduce using rule 168 (expression-statement -> statement-expression DELIM .)
    SWITCH          reduce using rule 168 (expression-statement -> statement-expression DELIM .)
    WHILE           reduce using rule 168 (expression-statement -> statement-expression DELIM .)
    FOR             reduce using rule 168 (expression-statement -> statement-expression DELIM .)
    DO              reduce using rule 168 (expression-statement -> statement-expression DELIM .)
    BREAK           reduce using rule 168 (expression-statement -> statement-expression DELIM .)
    CONTINUE        reduce using rule 168 (expression-statement -> statement-expression DELIM .)
    GOTO            reduce using rule 168 (expression-statement -> statement-expression DELIM .)
    RETURN          reduce using rule 168 (expression-statement -> statement-expression DELIM .)
    NEW             reduce using rule 168 (expression-statement -> statement-expression DELIM .)
    BOOL            reduce using rule 168 (expression-statement -> statement-expression DELIM .)
    INT             reduce using rule 168 (expression-statement -> statement-expression DELIM .)
    UINT            reduce using rule 168 (expression-statement -> statement-expression DELIM .)
    CHAR            reduce using rule 168 (expression-statement -> statement-expression DELIM .)
    DOUBLE          reduce using rule 168 (expression-statement -> statement-expression DELIM .)
    $end            reduce using rule 168 (expression-statement -> statement-expression DELIM .)
    BLOCK_END       reduce using rule 168 (expression-statement -> statement-expression DELIM .)
    CASE            reduce using rule 168 (expression-statement -> statement-expression DELIM .)
    DEFAULT         reduce using rule 168 (expression-statement -> statement-expression DELIM .)


state 64

    (191) iteration-statement -> for-statement M_quad .

    IDENTIFIER      reduce using rule 191 (iteration-statement -> for-statement M_quad .)
    BLOCK_BEGIN     reduce using rule 191 (iteration-statement -> for-statement M_quad .)
    DELIM           reduce using rule 191 (iteration-statement -> for-statement M_quad .)
    CONSOLE         reduce using rule 191 (iteration-statement -> for-statement M_quad .)
    CONST           reduce using rule 191 (iteration-statement -> for-statement M_quad .)
    IF              reduce using rule 191 (iteration-statement -> for-statement M_quad .)
    SWITCH          reduce using rule 191 (iteration-statement -> for-statement M_quad .)
    WHILE           reduce using rule 191 (iteration-statement -> for-statement M_quad .)
    FOR             reduce using rule 191 (iteration-statement -> for-statement M_quad .)
    DO              reduce using rule 191 (iteration-statement -> for-statement M_quad .)
    BREAK           reduce using rule 191 (iteration-statement -> for-statement M_quad .)
    CONTINUE        reduce using rule 191 (iteration-statement -> for-statement M_quad .)
    GOTO            reduce using rule 191 (iteration-statement -> for-statement M_quad .)
    RETURN          reduce using rule 191 (iteration-statement -> for-statement M_quad .)
    NEW             reduce using rule 191 (iteration-statement -> for-statement M_quad .)
    BOOL            reduce using rule 191 (iteration-statement -> for-statement M_quad .)
    INT             reduce using rule 191 (iteration-statement -> for-statement M_quad .)
    UINT            reduce using rule 191 (iteration-statement -> for-statement M_quad .)
    CHAR            reduce using rule 191 (iteration-statement -> for-statement M_quad .)
    DOUBLE          reduce using rule 191 (iteration-statement -> for-statement M_quad .)
    $end            reduce using rule 191 (iteration-statement -> for-statement M_quad .)
    BLOCK_END       reduce using rule 191 (iteration-statement -> for-statement M_quad .)
    CASE            reduce using rule 191 (iteration-statement -> for-statement M_quad .)
    DEFAULT         reduce using rule 191 (iteration-statement -> for-statement M_quad .)


state 65

    (178) M_quad -> empty .

    IDENTIFIER      reduce using rule 178 (M_quad -> empty .)
    BLOCK_BEGIN     reduce using rule 178 (M_quad -> empty .)
    DELIM           reduce using rule 178 (M_quad -> empty .)
    CONSOLE         reduce using rule 178 (M_quad -> empty .)
    CONST           reduce using rule 178 (M_quad -> empty .)
    IF              reduce using rule 178 (M_quad -> empty .)
    SWITCH          reduce using rule 178 (M_quad -> empty .)
    WHILE           reduce using rule 178 (M_quad -> empty .)
    FOR             reduce using rule 178 (M_quad -> empty .)
    DO              reduce using rule 178 (M_quad -> empty .)
    BREAK           reduce using rule 178 (M_quad -> empty .)
    CONTINUE        reduce using rule 178 (M_quad -> empty .)
    GOTO            reduce using rule 178 (M_quad -> empty .)
    RETURN          reduce using rule 178 (M_quad -> empty .)
    NEW             reduce using rule 178 (M_quad -> empty .)
    BOOL            reduce using rule 178 (M_quad -> empty .)
    INT             reduce using rule 178 (M_quad -> empty .)
    UINT            reduce using rule 178 (M_quad -> empty .)
    CHAR            reduce using rule 178 (M_quad -> empty .)
    DOUBLE          reduce using rule 178 (M_quad -> empty .)
    $end            reduce using rule 178 (M_quad -> empty .)
    BLOCK_END       reduce using rule 178 (M_quad -> empty .)
    CASE            reduce using rule 178 (M_quad -> empty .)
    DEFAULT         reduce using rule 178 (M_quad -> empty .)
    PLUS            reduce using rule 178 (M_quad -> empty .)
    MINUS           reduce using rule 178 (M_quad -> empty .)
    BITNOT          reduce using rule 178 (M_quad -> empty .)
    BITCOMP         reduce using rule 178 (M_quad -> empty .)
    TIMES           reduce using rule 178 (M_quad -> empty .)
    ICONST          reduce using rule 178 (M_quad -> empty .)
    DCONST          reduce using rule 178 (M_quad -> empty .)
    TRUE            reduce using rule 178 (M_quad -> empty .)
    FALSE           reduce using rule 178 (M_quad -> empty .)
    OPEN_PAREN      reduce using rule 178 (M_quad -> empty .)
    CLOSE_PAREN     reduce using rule 178 (M_quad -> empty .)


state 66

    (212) goto-statement -> GOTO IDENTIFIER . DELIM

    DELIM           shift and go to state 150


state 67

    (8) class-declarations -> class-declarations class-declaration .

    CLASS           reduce using rule 8 (class-declarations -> class-declarations class-declaration .)
    $end            reduce using rule 8 (class-declarations -> class-declarations class-declaration .)


state 68

    (46) inclusive-or-expression -> exclusive-or-expression .
    (49) exclusive-or-expression -> exclusive-or-expression . BITXOR and-expression

    BITOR           reduce using rule 46 (inclusive-or-expression -> exclusive-or-expression .)
    LOGAND          reduce using rule 46 (inclusive-or-expression -> exclusive-or-expression .)
    CONDOP          reduce using rule 46 (inclusive-or-expression -> exclusive-or-expression .)
    LOGOR           reduce using rule 46 (inclusive-or-expression -> exclusive-or-expression .)
    COMMA           reduce using rule 46 (inclusive-or-expression -> exclusive-or-expression .)
    CLOSE_PAREN     reduce using rule 46 (inclusive-or-expression -> exclusive-or-expression .)
    DELIM           reduce using rule 46 (inclusive-or-expression -> exclusive-or-expression .)
    CLOSE_BRACKET   reduce using rule 46 (inclusive-or-expression -> exclusive-or-expression .)
    COLON           reduce using rule 46 (inclusive-or-expression -> exclusive-or-expression .)
    BLOCK_END       reduce using rule 46 (inclusive-or-expression -> exclusive-or-expression .)
    BITXOR          shift and go to state 151


state 69

    (105) prim-expression -> member-access .
    (103) element-access -> member-access . OPEN_BRACKET expression-list CLOSE_BRACKET
    (91) primary-no-array-creation-expression -> member-access .
    (98) invocation-expression -> member-access . OPEN_PAREN argument-list-opt CLOSE_PAREN

    DOT             reduce using rule 105 (prim-expression -> member-access .)
    ASSIGN          reduce using rule 105 (prim-expression -> member-access .)
    PLUSEQUAL       reduce using rule 105 (prim-expression -> member-access .)
    MINUSEQUAL      reduce using rule 105 (prim-expression -> member-access .)
    TIMESEQUAL      reduce using rule 105 (prim-expression -> member-access .)
    DIVEQUAL        reduce using rule 105 (prim-expression -> member-access .)
    MODEQUAL        reduce using rule 105 (prim-expression -> member-access .)
    BITANDEQUAL     reduce using rule 105 (prim-expression -> member-access .)
    BITOREQUAL      reduce using rule 105 (prim-expression -> member-access .)
    BITXOREQUAL     reduce using rule 105 (prim-expression -> member-access .)
    LSHIFTEQUAL     reduce using rule 105 (prim-expression -> member-access .)
    RSHIFTEQUAL     reduce using rule 105 (prim-expression -> member-access .)
    OPEN_BRACKET    shift and go to state 61
    TIMES           reduce using rule 91 (primary-no-array-creation-expression -> member-access .)
    DIV             reduce using rule 91 (primary-no-array-creation-expression -> member-access .)
    MOD             reduce using rule 91 (primary-no-array-creation-expression -> member-access .)
    PLUS            reduce using rule 91 (primary-no-array-creation-expression -> member-access .)
    MINUS           reduce using rule 91 (primary-no-array-creation-expression -> member-access .)
    LSHIFT          reduce using rule 91 (primary-no-array-creation-expression -> member-access .)
    RSHIFT          reduce using rule 91 (primary-no-array-creation-expression -> member-access .)
    LT              reduce using rule 91 (primary-no-array-creation-expression -> member-access .)
    GT              reduce using rule 91 (primary-no-array-creation-expression -> member-access .)
    LE              reduce using rule 91 (primary-no-array-creation-expression -> member-access .)
    GE              reduce using rule 91 (primary-no-array-creation-expression -> member-access .)
    EQ              reduce using rule 91 (primary-no-array-creation-expression -> member-access .)
    NE              reduce using rule 91 (primary-no-array-creation-expression -> member-access .)
    BITAND          reduce using rule 91 (primary-no-array-creation-expression -> member-access .)
    BITXOR          reduce using rule 91 (primary-no-array-creation-expression -> member-access .)
    BITOR           reduce using rule 91 (primary-no-array-creation-expression -> member-access .)
    LOGAND          reduce using rule 91 (primary-no-array-creation-expression -> member-access .)
    CONDOP          reduce using rule 91 (primary-no-array-creation-expression -> member-access .)
    LOGOR           reduce using rule 91 (primary-no-array-creation-expression -> member-access .)
    CLOSE_PAREN     reduce using rule 91 (primary-no-array-creation-expression -> member-access .)
    COMMA           reduce using rule 91 (primary-no-array-creation-expression -> member-access .)
    BLOCK_END       reduce using rule 91 (primary-no-array-creation-expression -> member-access .)
    CLOSE_BRACKET   reduce using rule 91 (primary-no-array-creation-expression -> member-access .)
    DELIM           reduce using rule 91 (primary-no-array-creation-expression -> member-access .)
    COLON           reduce using rule 91 (primary-no-array-creation-expression -> member-access .)
    OPEN_PAREN      shift and go to state 62


state 70

    (52) equality-expression -> relational-expression .
    (56) relational-expression -> relational-expression . LT shift-expression
    (57) relational-expression -> relational-expression . GT shift-expression
    (58) relational-expression -> relational-expression . LE shift-expression
    (59) relational-expression -> relational-expression . GE shift-expression

    EQ              reduce using rule 52 (equality-expression -> relational-expression .)
    NE              reduce using rule 52 (equality-expression -> relational-expression .)
    BITAND          reduce using rule 52 (equality-expression -> relational-expression .)
    BITXOR          reduce using rule 52 (equality-expression -> relational-expression .)
    BITOR           reduce using rule 52 (equality-expression -> relational-expression .)
    LOGAND          reduce using rule 52 (equality-expression -> relational-expression .)
    CONDOP          reduce using rule 52 (equality-expression -> relational-expression .)
    LOGOR           reduce using rule 52 (equality-expression -> relational-expression .)
    COMMA           reduce using rule 52 (equality-expression -> relational-expression .)
    BLOCK_END       reduce using rule 52 (equality-expression -> relational-expression .)
    CLOSE_PAREN     reduce using rule 52 (equality-expression -> relational-expression .)
    DELIM           reduce using rule 52 (equality-expression -> relational-expression .)
    CLOSE_BRACKET   reduce using rule 52 (equality-expression -> relational-expression .)
    COLON           reduce using rule 52 (equality-expression -> relational-expression .)
    LT              shift and go to state 154
    GT              shift and go to state 155
    LE              shift and go to state 152
    GE              shift and go to state 153


state 71

    (76) primary-expression -> array-creation-expression .

    TIMES           reduce using rule 76 (primary-expression -> array-creation-expression .)
    DIV             reduce using rule 76 (primary-expression -> array-creation-expression .)
    MOD             reduce using rule 76 (primary-expression -> array-creation-expression .)
    PLUS            reduce using rule 76 (primary-expression -> array-creation-expression .)
    MINUS           reduce using rule 76 (primary-expression -> array-creation-expression .)
    LSHIFT          reduce using rule 76 (primary-expression -> array-creation-expression .)
    RSHIFT          reduce using rule 76 (primary-expression -> array-creation-expression .)
    LT              reduce using rule 76 (primary-expression -> array-creation-expression .)
    GT              reduce using rule 76 (primary-expression -> array-creation-expression .)
    LE              reduce using rule 76 (primary-expression -> array-creation-expression .)
    GE              reduce using rule 76 (primary-expression -> array-creation-expression .)
    EQ              reduce using rule 76 (primary-expression -> array-creation-expression .)
    NE              reduce using rule 76 (primary-expression -> array-creation-expression .)
    BITAND          reduce using rule 76 (primary-expression -> array-creation-expression .)
    BITXOR          reduce using rule 76 (primary-expression -> array-creation-expression .)
    BITOR           reduce using rule 76 (primary-expression -> array-creation-expression .)
    LOGAND          reduce using rule 76 (primary-expression -> array-creation-expression .)
    CONDOP          reduce using rule 76 (primary-expression -> array-creation-expression .)
    LOGOR           reduce using rule 76 (primary-expression -> array-creation-expression .)
    DELIM           reduce using rule 76 (primary-expression -> array-creation-expression .)
    CLOSE_BRACKET   reduce using rule 76 (primary-expression -> array-creation-expression .)
    COMMA           reduce using rule 76 (primary-expression -> array-creation-expression .)
    CLOSE_PAREN     reduce using rule 76 (primary-expression -> array-creation-expression .)
    COLON           reduce using rule 76 (primary-expression -> array-creation-expression .)
    BLOCK_END       reduce using rule 76 (primary-expression -> array-creation-expression .)


state 72

    (78) array-creation-expression -> NEW . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (107) object-creation-expression -> NEW . type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (13) class-type -> . IDENTIFIER
    (34) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET

    BOOL            shift and go to state 44
    INT             shift and go to state 24
    UINT            shift and go to state 57
    CHAR            shift and go to state 30
    DOUBLE          shift and go to state 12
    IDENTIFIER      shift and go to state 113

    array-type                     shift and go to state 40
    simple-type                    shift and go to state 156
    class-type                     shift and go to state 60
    type                           shift and go to state 114

state 73

    (60) shift-expression -> additive-expression .
    (64) additive-expression -> additive-expression . PLUS multiplicative-expression
    (65) additive-expression -> additive-expression . MINUS multiplicative-expression

    LSHIFT          reduce using rule 60 (shift-expression -> additive-expression .)
    RSHIFT          reduce using rule 60 (shift-expression -> additive-expression .)
    LT              reduce using rule 60 (shift-expression -> additive-expression .)
    GT              reduce using rule 60 (shift-expression -> additive-expression .)
    LE              reduce using rule 60 (shift-expression -> additive-expression .)
    GE              reduce using rule 60 (shift-expression -> additive-expression .)
    EQ              reduce using rule 60 (shift-expression -> additive-expression .)
    NE              reduce using rule 60 (shift-expression -> additive-expression .)
    BITAND          reduce using rule 60 (shift-expression -> additive-expression .)
    BITXOR          reduce using rule 60 (shift-expression -> additive-expression .)
    BITOR           reduce using rule 60 (shift-expression -> additive-expression .)
    LOGAND          reduce using rule 60 (shift-expression -> additive-expression .)
    CONDOP          reduce using rule 60 (shift-expression -> additive-expression .)
    LOGOR           reduce using rule 60 (shift-expression -> additive-expression .)
    CLOSE_PAREN     reduce using rule 60 (shift-expression -> additive-expression .)
    DELIM           reduce using rule 60 (shift-expression -> additive-expression .)
    CLOSE_BRACKET   reduce using rule 60 (shift-expression -> additive-expression .)
    COMMA           reduce using rule 60 (shift-expression -> additive-expression .)
    COLON           reduce using rule 60 (shift-expression -> additive-expression .)
    BLOCK_END       reduce using rule 60 (shift-expression -> additive-expression .)
    PLUS            shift and go to state 157
    MINUS           shift and go to state 158


state 74

    (72) unary-expression -> MINUS . unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . parenthesized-expression
    (91) primary-no-array-creation-expression -> . member-access
    (92) primary-no-array-creation-expression -> . invocation-expression
    (93) primary-no-array-creation-expression -> . element-access
    (94) primary-no-array-creation-expression -> . object-creation-expression
    (223) literal -> . ICONST
    (224) literal -> . DCONST
    (225) literal -> . TRUE
    (226) literal -> . FALSE
    (95) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (96) member-access -> . prim-expression DOT IDENTIFIER
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (102) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (103) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (107) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (104) prim-expression -> . IDENTIFIER
    (105) prim-expression -> . member-access
    (106) prim-expression -> . element-access

    PLUS            shift and go to state 82
    MINUS           shift and go to state 74
    BITNOT          shift and go to state 99
    BITCOMP         shift and go to state 77
    TIMES           shift and go to state 87
    NEW             shift and go to state 72
    IDENTIFIER      shift and go to state 163
    ICONST          shift and go to state 89
    DCONST          shift and go to state 100
    TRUE            shift and go to state 94
    FALSE           shift and go to state 93
    OPEN_PAREN      shift and go to state 79

    primary-no-array-creation-expression shift and go to state 88
    member-access                  shift and go to state 160
    prim-expression                shift and go to state 159
    unary-expression               shift and go to state 161
    element-access                 shift and go to state 162
    literal                        shift and go to state 86
    array-creation-expression      shift and go to state 71
    object-creation-expression     shift and go to state 90
    primary-expression             shift and go to state 101
    invocation-expression          shift and go to state 102
    parenthesized-expression       shift and go to state 104

state 75

    (44) conditional-and-expression -> inclusive-or-expression .
    (47) inclusive-or-expression -> inclusive-or-expression . BITOR exclusive-or-expression

    LOGAND          reduce using rule 44 (conditional-and-expression -> inclusive-or-expression .)
    CONDOP          reduce using rule 44 (conditional-and-expression -> inclusive-or-expression .)
    LOGOR           reduce using rule 44 (conditional-and-expression -> inclusive-or-expression .)
    COMMA           reduce using rule 44 (conditional-and-expression -> inclusive-or-expression .)
    CLOSE_PAREN     reduce using rule 44 (conditional-and-expression -> inclusive-or-expression .)
    COLON           reduce using rule 44 (conditional-and-expression -> inclusive-or-expression .)
    DELIM           reduce using rule 44 (conditional-and-expression -> inclusive-or-expression .)
    CLOSE_BRACKET   reduce using rule 44 (conditional-and-expression -> inclusive-or-expression .)
    BLOCK_END       reduce using rule 44 (conditional-and-expression -> inclusive-or-expression .)
    BITOR           shift and go to state 164


state 76

    (50) and-expression -> equality-expression .
    (53) equality-expression -> equality-expression . EQ relational-expression
    (54) equality-expression -> equality-expression . NE relational-expression

    BITAND          reduce using rule 50 (and-expression -> equality-expression .)
    BITXOR          reduce using rule 50 (and-expression -> equality-expression .)
    BITOR           reduce using rule 50 (and-expression -> equality-expression .)
    LOGAND          reduce using rule 50 (and-expression -> equality-expression .)
    CONDOP          reduce using rule 50 (and-expression -> equality-expression .)
    LOGOR           reduce using rule 50 (and-expression -> equality-expression .)
    DELIM           reduce using rule 50 (and-expression -> equality-expression .)
    CLOSE_BRACKET   reduce using rule 50 (and-expression -> equality-expression .)
    COMMA           reduce using rule 50 (and-expression -> equality-expression .)
    CLOSE_PAREN     reduce using rule 50 (and-expression -> equality-expression .)
    COLON           reduce using rule 50 (and-expression -> equality-expression .)
    BLOCK_END       reduce using rule 50 (and-expression -> equality-expression .)
    EQ              shift and go to state 165
    NE              shift and go to state 166


state 77

    (74) unary-expression -> BITCOMP . unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . parenthesized-expression
    (91) primary-no-array-creation-expression -> . member-access
    (92) primary-no-array-creation-expression -> . invocation-expression
    (93) primary-no-array-creation-expression -> . element-access
    (94) primary-no-array-creation-expression -> . object-creation-expression
    (223) literal -> . ICONST
    (224) literal -> . DCONST
    (225) literal -> . TRUE
    (226) literal -> . FALSE
    (95) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (96) member-access -> . prim-expression DOT IDENTIFIER
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (102) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (103) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (107) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (104) prim-expression -> . IDENTIFIER
    (105) prim-expression -> . member-access
    (106) prim-expression -> . element-access

    PLUS            shift and go to state 82
    MINUS           shift and go to state 74
    BITNOT          shift and go to state 99
    BITCOMP         shift and go to state 77
    TIMES           shift and go to state 87
    NEW             shift and go to state 72
    IDENTIFIER      shift and go to state 163
    ICONST          shift and go to state 89
    DCONST          shift and go to state 100
    TRUE            shift and go to state 94
    FALSE           shift and go to state 93
    OPEN_PAREN      shift and go to state 79

    primary-no-array-creation-expression shift and go to state 88
    member-access                  shift and go to state 160
    prim-expression                shift and go to state 159
    unary-expression               shift and go to state 167
    element-access                 shift and go to state 162
    literal                        shift and go to state 86
    array-creation-expression      shift and go to state 71
    object-creation-expression     shift and go to state 90
    primary-expression             shift and go to state 101
    invocation-expression          shift and go to state 102
    parenthesized-expression       shift and go to state 104

state 78

    (106) prim-expression -> element-access .
    (93) primary-no-array-creation-expression -> element-access .

    DOT             reduce using rule 106 (prim-expression -> element-access .)
    ASSIGN          reduce using rule 106 (prim-expression -> element-access .)
    PLUSEQUAL       reduce using rule 106 (prim-expression -> element-access .)
    MINUSEQUAL      reduce using rule 106 (prim-expression -> element-access .)
    TIMESEQUAL      reduce using rule 106 (prim-expression -> element-access .)
    DIVEQUAL        reduce using rule 106 (prim-expression -> element-access .)
    MODEQUAL        reduce using rule 106 (prim-expression -> element-access .)
    BITANDEQUAL     reduce using rule 106 (prim-expression -> element-access .)
    BITOREQUAL      reduce using rule 106 (prim-expression -> element-access .)
    BITXOREQUAL     reduce using rule 106 (prim-expression -> element-access .)
    LSHIFTEQUAL     reduce using rule 106 (prim-expression -> element-access .)
    RSHIFTEQUAL     reduce using rule 106 (prim-expression -> element-access .)
    TIMES           reduce using rule 93 (primary-no-array-creation-expression -> element-access .)
    DIV             reduce using rule 93 (primary-no-array-creation-expression -> element-access .)
    MOD             reduce using rule 93 (primary-no-array-creation-expression -> element-access .)
    PLUS            reduce using rule 93 (primary-no-array-creation-expression -> element-access .)
    MINUS           reduce using rule 93 (primary-no-array-creation-expression -> element-access .)
    LSHIFT          reduce using rule 93 (primary-no-array-creation-expression -> element-access .)
    RSHIFT          reduce using rule 93 (primary-no-array-creation-expression -> element-access .)
    LT              reduce using rule 93 (primary-no-array-creation-expression -> element-access .)
    GT              reduce using rule 93 (primary-no-array-creation-expression -> element-access .)
    LE              reduce using rule 93 (primary-no-array-creation-expression -> element-access .)
    GE              reduce using rule 93 (primary-no-array-creation-expression -> element-access .)
    EQ              reduce using rule 93 (primary-no-array-creation-expression -> element-access .)
    NE              reduce using rule 93 (primary-no-array-creation-expression -> element-access .)
    BITAND          reduce using rule 93 (primary-no-array-creation-expression -> element-access .)
    BITXOR          reduce using rule 93 (primary-no-array-creation-expression -> element-access .)
    BITOR           reduce using rule 93 (primary-no-array-creation-expression -> element-access .)
    LOGAND          reduce using rule 93 (primary-no-array-creation-expression -> element-access .)
    CONDOP          reduce using rule 93 (primary-no-array-creation-expression -> element-access .)
    LOGOR           reduce using rule 93 (primary-no-array-creation-expression -> element-access .)
    CLOSE_PAREN     reduce using rule 93 (primary-no-array-creation-expression -> element-access .)
    COMMA           reduce using rule 93 (primary-no-array-creation-expression -> element-access .)
    BLOCK_END       reduce using rule 93 (primary-no-array-creation-expression -> element-access .)
    CLOSE_BRACKET   reduce using rule 93 (primary-no-array-creation-expression -> element-access .)
    DELIM           reduce using rule 93 (primary-no-array-creation-expression -> element-access .)
    COLON           reduce using rule 93 (primary-no-array-creation-expression -> element-access .)


state 79

    (95) parenthesized-expression -> OPEN_PAREN . expression CLOSE_PAREN
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (108) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (104) prim-expression -> . IDENTIFIER
    (105) prim-expression -> . member-access
    (106) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (96) member-access -> . prim-expression DOT IDENTIFIER
    (102) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (103) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . parenthesized-expression
    (91) primary-no-array-creation-expression -> . member-access
    (92) primary-no-array-creation-expression -> . invocation-expression
    (93) primary-no-array-creation-expression -> . element-access
    (94) primary-no-array-creation-expression -> . object-creation-expression
    (223) literal -> . ICONST
    (224) literal -> . DCONST
    (225) literal -> . TRUE
    (226) literal -> . FALSE
    (95) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (107) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 83
    PLUS            shift and go to state 82
    MINUS           shift and go to state 74
    BITNOT          shift and go to state 99
    BITCOMP         shift and go to state 77
    TIMES           shift and go to state 87
    NEW             shift and go to state 72
    ICONST          shift and go to state 89
    DCONST          shift and go to state 100
    TRUE            shift and go to state 94
    FALSE           shift and go to state 93
    OPEN_PAREN      shift and go to state 79

    unary-expression               shift and go to state 91
    exclusive-or-expression        shift and go to state 68
    member-access                  shift and go to state 69
    relational-expression          shift and go to state 70
    additive-expression            shift and go to state 73
    primary-no-array-creation-expression shift and go to state 88
    inclusive-or-expression        shift and go to state 75
    prim-expression                shift and go to state 51
    element-access                 shift and go to state 78
    literal                        shift and go to state 86
    conditional-expression         shift and go to state 80
    conditional-and-expression     shift and go to state 81
    array-creation-expression      shift and go to state 71
    assignment                     shift and go to state 85
    object-creation-expression     shift and go to state 90
    equality-expression            shift and go to state 76
    shift-expression               shift and go to state 95
    and-expression                 shift and go to state 96
    multiplicative-expression      shift and go to state 97
    conditional-or-expression      shift and go to state 103
    primary-expression             shift and go to state 101
    invocation-expression          shift and go to state 102
    expression                     shift and go to state 168
    parenthesized-expression       shift and go to state 104

state 80

    (38) expression -> conditional-expression .

    CLOSE_BRACKET   reduce using rule 38 (expression -> conditional-expression .)
    COMMA           reduce using rule 38 (expression -> conditional-expression .)
    CLOSE_PAREN     reduce using rule 38 (expression -> conditional-expression .)
    COLON           reduce using rule 38 (expression -> conditional-expression .)
    DELIM           reduce using rule 38 (expression -> conditional-expression .)
    BLOCK_END       reduce using rule 38 (expression -> conditional-expression .)


state 81

    (42) conditional-or-expression -> conditional-and-expression .
    (45) conditional-and-expression -> conditional-and-expression . LOGAND inclusive-or-expression

    CONDOP          reduce using rule 42 (conditional-or-expression -> conditional-and-expression .)
    LOGOR           reduce using rule 42 (conditional-or-expression -> conditional-and-expression .)
    COMMA           reduce using rule 42 (conditional-or-expression -> conditional-and-expression .)
    BLOCK_END       reduce using rule 42 (conditional-or-expression -> conditional-and-expression .)
    DELIM           reduce using rule 42 (conditional-or-expression -> conditional-and-expression .)
    CLOSE_PAREN     reduce using rule 42 (conditional-or-expression -> conditional-and-expression .)
    CLOSE_BRACKET   reduce using rule 42 (conditional-or-expression -> conditional-and-expression .)
    COLON           reduce using rule 42 (conditional-or-expression -> conditional-and-expression .)
    LOGAND          shift and go to state 169


state 82

    (71) unary-expression -> PLUS . unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . parenthesized-expression
    (91) primary-no-array-creation-expression -> . member-access
    (92) primary-no-array-creation-expression -> . invocation-expression
    (93) primary-no-array-creation-expression -> . element-access
    (94) primary-no-array-creation-expression -> . object-creation-expression
    (223) literal -> . ICONST
    (224) literal -> . DCONST
    (225) literal -> . TRUE
    (226) literal -> . FALSE
    (95) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (96) member-access -> . prim-expression DOT IDENTIFIER
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (102) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (103) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (107) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (104) prim-expression -> . IDENTIFIER
    (105) prim-expression -> . member-access
    (106) prim-expression -> . element-access

    PLUS            shift and go to state 82
    MINUS           shift and go to state 74
    BITNOT          shift and go to state 99
    BITCOMP         shift and go to state 77
    TIMES           shift and go to state 87
    NEW             shift and go to state 72
    IDENTIFIER      shift and go to state 163
    ICONST          shift and go to state 89
    DCONST          shift and go to state 100
    TRUE            shift and go to state 94
    FALSE           shift and go to state 93
    OPEN_PAREN      shift and go to state 79

    primary-no-array-creation-expression shift and go to state 88
    member-access                  shift and go to state 160
    prim-expression                shift and go to state 159
    unary-expression               shift and go to state 170
    element-access                 shift and go to state 162
    literal                        shift and go to state 86
    array-creation-expression      shift and go to state 71
    object-creation-expression     shift and go to state 90
    primary-expression             shift and go to state 101
    invocation-expression          shift and go to state 102
    parenthesized-expression       shift and go to state 104

state 83

    (104) prim-expression -> IDENTIFIER .
    (102) element-access -> IDENTIFIER . OPEN_BRACKET expression-list CLOSE_BRACKET
    (89) primary-no-array-creation-expression -> IDENTIFIER .
    (97) invocation-expression -> IDENTIFIER . OPEN_PAREN argument-list-opt CLOSE_PAREN

    DOT             reduce using rule 104 (prim-expression -> IDENTIFIER .)
    ASSIGN          reduce using rule 104 (prim-expression -> IDENTIFIER .)
    PLUSEQUAL       reduce using rule 104 (prim-expression -> IDENTIFIER .)
    MINUSEQUAL      reduce using rule 104 (prim-expression -> IDENTIFIER .)
    TIMESEQUAL      reduce using rule 104 (prim-expression -> IDENTIFIER .)
    DIVEQUAL        reduce using rule 104 (prim-expression -> IDENTIFIER .)
    MODEQUAL        reduce using rule 104 (prim-expression -> IDENTIFIER .)
    BITANDEQUAL     reduce using rule 104 (prim-expression -> IDENTIFIER .)
    BITOREQUAL      reduce using rule 104 (prim-expression -> IDENTIFIER .)
    BITXOREQUAL     reduce using rule 104 (prim-expression -> IDENTIFIER .)
    LSHIFTEQUAL     reduce using rule 104 (prim-expression -> IDENTIFIER .)
    RSHIFTEQUAL     reduce using rule 104 (prim-expression -> IDENTIFIER .)
    OPEN_BRACKET    shift and go to state 116
    TIMES           reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    DIV             reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    MOD             reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    PLUS            reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    MINUS           reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    LSHIFT          reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    RSHIFT          reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    LT              reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    GT              reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    LE              reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    GE              reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    EQ              reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    NE              reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    BITAND          reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    BITXOR          reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    BITOR           reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    LOGAND          reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    CONDOP          reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    LOGOR           reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    COMMA           reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    BLOCK_END       reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    DELIM           reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    COLON           reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    OPEN_PAREN      shift and go to state 117


state 84

    (215) expression-opt -> empty .

    DELIM           reduce using rule 215 (expression-opt -> empty .)


state 85

    (39) expression -> assignment .

    CLOSE_BRACKET   reduce using rule 39 (expression -> assignment .)
    COMMA           reduce using rule 39 (expression -> assignment .)
    CLOSE_PAREN     reduce using rule 39 (expression -> assignment .)
    COLON           reduce using rule 39 (expression -> assignment .)
    DELIM           reduce using rule 39 (expression -> assignment .)
    BLOCK_END       reduce using rule 39 (expression -> assignment .)


state 86

    (88) primary-no-array-creation-expression -> literal .

    TIMES           reduce using rule 88 (primary-no-array-creation-expression -> literal .)
    DIV             reduce using rule 88 (primary-no-array-creation-expression -> literal .)
    MOD             reduce using rule 88 (primary-no-array-creation-expression -> literal .)
    PLUS            reduce using rule 88 (primary-no-array-creation-expression -> literal .)
    MINUS           reduce using rule 88 (primary-no-array-creation-expression -> literal .)
    LSHIFT          reduce using rule 88 (primary-no-array-creation-expression -> literal .)
    RSHIFT          reduce using rule 88 (primary-no-array-creation-expression -> literal .)
    LT              reduce using rule 88 (primary-no-array-creation-expression -> literal .)
    GT              reduce using rule 88 (primary-no-array-creation-expression -> literal .)
    LE              reduce using rule 88 (primary-no-array-creation-expression -> literal .)
    GE              reduce using rule 88 (primary-no-array-creation-expression -> literal .)
    EQ              reduce using rule 88 (primary-no-array-creation-expression -> literal .)
    NE              reduce using rule 88 (primary-no-array-creation-expression -> literal .)
    BITAND          reduce using rule 88 (primary-no-array-creation-expression -> literal .)
    BITXOR          reduce using rule 88 (primary-no-array-creation-expression -> literal .)
    BITOR           reduce using rule 88 (primary-no-array-creation-expression -> literal .)
    LOGAND          reduce using rule 88 (primary-no-array-creation-expression -> literal .)
    CONDOP          reduce using rule 88 (primary-no-array-creation-expression -> literal .)
    LOGOR           reduce using rule 88 (primary-no-array-creation-expression -> literal .)
    DELIM           reduce using rule 88 (primary-no-array-creation-expression -> literal .)
    CLOSE_BRACKET   reduce using rule 88 (primary-no-array-creation-expression -> literal .)
    COMMA           reduce using rule 88 (primary-no-array-creation-expression -> literal .)
    CLOSE_PAREN     reduce using rule 88 (primary-no-array-creation-expression -> literal .)
    COLON           reduce using rule 88 (primary-no-array-creation-expression -> literal .)
    BLOCK_END       reduce using rule 88 (primary-no-array-creation-expression -> literal .)


state 87

    (75) unary-expression -> TIMES . unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . parenthesized-expression
    (91) primary-no-array-creation-expression -> . member-access
    (92) primary-no-array-creation-expression -> . invocation-expression
    (93) primary-no-array-creation-expression -> . element-access
    (94) primary-no-array-creation-expression -> . object-creation-expression
    (223) literal -> . ICONST
    (224) literal -> . DCONST
    (225) literal -> . TRUE
    (226) literal -> . FALSE
    (95) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (96) member-access -> . prim-expression DOT IDENTIFIER
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (102) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (103) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (107) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (104) prim-expression -> . IDENTIFIER
    (105) prim-expression -> . member-access
    (106) prim-expression -> . element-access

    PLUS            shift and go to state 82
    MINUS           shift and go to state 74
    BITNOT          shift and go to state 99
    BITCOMP         shift and go to state 77
    TIMES           shift and go to state 87
    NEW             shift and go to state 72
    IDENTIFIER      shift and go to state 163
    ICONST          shift and go to state 89
    DCONST          shift and go to state 100
    TRUE            shift and go to state 94
    FALSE           shift and go to state 93
    OPEN_PAREN      shift and go to state 79

    primary-no-array-creation-expression shift and go to state 88
    member-access                  shift and go to state 160
    prim-expression                shift and go to state 159
    unary-expression               shift and go to state 171
    element-access                 shift and go to state 162
    literal                        shift and go to state 86
    array-creation-expression      shift and go to state 71
    object-creation-expression     shift and go to state 90
    primary-expression             shift and go to state 101
    invocation-expression          shift and go to state 102
    parenthesized-expression       shift and go to state 104

state 88

    (77) primary-expression -> primary-no-array-creation-expression .

    TIMES           reduce using rule 77 (primary-expression -> primary-no-array-creation-expression .)
    DIV             reduce using rule 77 (primary-expression -> primary-no-array-creation-expression .)
    MOD             reduce using rule 77 (primary-expression -> primary-no-array-creation-expression .)
    PLUS            reduce using rule 77 (primary-expression -> primary-no-array-creation-expression .)
    MINUS           reduce using rule 77 (primary-expression -> primary-no-array-creation-expression .)
    LSHIFT          reduce using rule 77 (primary-expression -> primary-no-array-creation-expression .)
    RSHIFT          reduce using rule 77 (primary-expression -> primary-no-array-creation-expression .)
    LT              reduce using rule 77 (primary-expression -> primary-no-array-creation-expression .)
    GT              reduce using rule 77 (primary-expression -> primary-no-array-creation-expression .)
    LE              reduce using rule 77 (primary-expression -> primary-no-array-creation-expression .)
    GE              reduce using rule 77 (primary-expression -> primary-no-array-creation-expression .)
    EQ              reduce using rule 77 (primary-expression -> primary-no-array-creation-expression .)
    NE              reduce using rule 77 (primary-expression -> primary-no-array-creation-expression .)
    BITAND          reduce using rule 77 (primary-expression -> primary-no-array-creation-expression .)
    BITXOR          reduce using rule 77 (primary-expression -> primary-no-array-creation-expression .)
    BITOR           reduce using rule 77 (primary-expression -> primary-no-array-creation-expression .)
    LOGAND          reduce using rule 77 (primary-expression -> primary-no-array-creation-expression .)
    CONDOP          reduce using rule 77 (primary-expression -> primary-no-array-creation-expression .)
    LOGOR           reduce using rule 77 (primary-expression -> primary-no-array-creation-expression .)
    DELIM           reduce using rule 77 (primary-expression -> primary-no-array-creation-expression .)
    CLOSE_BRACKET   reduce using rule 77 (primary-expression -> primary-no-array-creation-expression .)
    COMMA           reduce using rule 77 (primary-expression -> primary-no-array-creation-expression .)
    CLOSE_PAREN     reduce using rule 77 (primary-expression -> primary-no-array-creation-expression .)
    COLON           reduce using rule 77 (primary-expression -> primary-no-array-creation-expression .)
    BLOCK_END       reduce using rule 77 (primary-expression -> primary-no-array-creation-expression .)


state 89

    (223) literal -> ICONST .

    TIMES           reduce using rule 223 (literal -> ICONST .)
    DIV             reduce using rule 223 (literal -> ICONST .)
    MOD             reduce using rule 223 (literal -> ICONST .)
    PLUS            reduce using rule 223 (literal -> ICONST .)
    MINUS           reduce using rule 223 (literal -> ICONST .)
    LSHIFT          reduce using rule 223 (literal -> ICONST .)
    RSHIFT          reduce using rule 223 (literal -> ICONST .)
    LT              reduce using rule 223 (literal -> ICONST .)
    GT              reduce using rule 223 (literal -> ICONST .)
    LE              reduce using rule 223 (literal -> ICONST .)
    GE              reduce using rule 223 (literal -> ICONST .)
    EQ              reduce using rule 223 (literal -> ICONST .)
    NE              reduce using rule 223 (literal -> ICONST .)
    BITAND          reduce using rule 223 (literal -> ICONST .)
    BITXOR          reduce using rule 223 (literal -> ICONST .)
    BITOR           reduce using rule 223 (literal -> ICONST .)
    LOGAND          reduce using rule 223 (literal -> ICONST .)
    CONDOP          reduce using rule 223 (literal -> ICONST .)
    LOGOR           reduce using rule 223 (literal -> ICONST .)
    DELIM           reduce using rule 223 (literal -> ICONST .)
    CLOSE_BRACKET   reduce using rule 223 (literal -> ICONST .)
    COMMA           reduce using rule 223 (literal -> ICONST .)
    CLOSE_PAREN     reduce using rule 223 (literal -> ICONST .)
    COLON           reduce using rule 223 (literal -> ICONST .)
    BLOCK_END       reduce using rule 223 (literal -> ICONST .)


state 90

    (94) primary-no-array-creation-expression -> object-creation-expression .

    TIMES           reduce using rule 94 (primary-no-array-creation-expression -> object-creation-expression .)
    DIV             reduce using rule 94 (primary-no-array-creation-expression -> object-creation-expression .)
    MOD             reduce using rule 94 (primary-no-array-creation-expression -> object-creation-expression .)
    PLUS            reduce using rule 94 (primary-no-array-creation-expression -> object-creation-expression .)
    MINUS           reduce using rule 94 (primary-no-array-creation-expression -> object-creation-expression .)
    LSHIFT          reduce using rule 94 (primary-no-array-creation-expression -> object-creation-expression .)
    RSHIFT          reduce using rule 94 (primary-no-array-creation-expression -> object-creation-expression .)
    LT              reduce using rule 94 (primary-no-array-creation-expression -> object-creation-expression .)
    GT              reduce using rule 94 (primary-no-array-creation-expression -> object-creation-expression .)
    LE              reduce using rule 94 (primary-no-array-creation-expression -> object-creation-expression .)
    GE              reduce using rule 94 (primary-no-array-creation-expression -> object-creation-expression .)
    EQ              reduce using rule 94 (primary-no-array-creation-expression -> object-creation-expression .)
    NE              reduce using rule 94 (primary-no-array-creation-expression -> object-creation-expression .)
    BITAND          reduce using rule 94 (primary-no-array-creation-expression -> object-creation-expression .)
    BITXOR          reduce using rule 94 (primary-no-array-creation-expression -> object-creation-expression .)
    BITOR           reduce using rule 94 (primary-no-array-creation-expression -> object-creation-expression .)
    LOGAND          reduce using rule 94 (primary-no-array-creation-expression -> object-creation-expression .)
    CONDOP          reduce using rule 94 (primary-no-array-creation-expression -> object-creation-expression .)
    LOGOR           reduce using rule 94 (primary-no-array-creation-expression -> object-creation-expression .)
    DELIM           reduce using rule 94 (primary-no-array-creation-expression -> object-creation-expression .)
    CLOSE_BRACKET   reduce using rule 94 (primary-no-array-creation-expression -> object-creation-expression .)
    COMMA           reduce using rule 94 (primary-no-array-creation-expression -> object-creation-expression .)
    CLOSE_PAREN     reduce using rule 94 (primary-no-array-creation-expression -> object-creation-expression .)
    COLON           reduce using rule 94 (primary-no-array-creation-expression -> object-creation-expression .)
    BLOCK_END       reduce using rule 94 (primary-no-array-creation-expression -> object-creation-expression .)


state 91

    (66) multiplicative-expression -> unary-expression .

    TIMES           reduce using rule 66 (multiplicative-expression -> unary-expression .)
    DIV             reduce using rule 66 (multiplicative-expression -> unary-expression .)
    MOD             reduce using rule 66 (multiplicative-expression -> unary-expression .)
    PLUS            reduce using rule 66 (multiplicative-expression -> unary-expression .)
    MINUS           reduce using rule 66 (multiplicative-expression -> unary-expression .)
    LSHIFT          reduce using rule 66 (multiplicative-expression -> unary-expression .)
    RSHIFT          reduce using rule 66 (multiplicative-expression -> unary-expression .)
    LT              reduce using rule 66 (multiplicative-expression -> unary-expression .)
    GT              reduce using rule 66 (multiplicative-expression -> unary-expression .)
    LE              reduce using rule 66 (multiplicative-expression -> unary-expression .)
    GE              reduce using rule 66 (multiplicative-expression -> unary-expression .)
    EQ              reduce using rule 66 (multiplicative-expression -> unary-expression .)
    NE              reduce using rule 66 (multiplicative-expression -> unary-expression .)
    BITAND          reduce using rule 66 (multiplicative-expression -> unary-expression .)
    BITXOR          reduce using rule 66 (multiplicative-expression -> unary-expression .)
    BITOR           reduce using rule 66 (multiplicative-expression -> unary-expression .)
    LOGAND          reduce using rule 66 (multiplicative-expression -> unary-expression .)
    CONDOP          reduce using rule 66 (multiplicative-expression -> unary-expression .)
    LOGOR           reduce using rule 66 (multiplicative-expression -> unary-expression .)
    DELIM           reduce using rule 66 (multiplicative-expression -> unary-expression .)
    CLOSE_BRACKET   reduce using rule 66 (multiplicative-expression -> unary-expression .)
    COMMA           reduce using rule 66 (multiplicative-expression -> unary-expression .)
    CLOSE_PAREN     reduce using rule 66 (multiplicative-expression -> unary-expression .)
    COLON           reduce using rule 66 (multiplicative-expression -> unary-expression .)
    BLOCK_END       reduce using rule 66 (multiplicative-expression -> unary-expression .)


state 92

    (213) return-statement -> RETURN expression-opt . DELIM

    DELIM           shift and go to state 172


state 93

    (226) literal -> FALSE .

    TIMES           reduce using rule 226 (literal -> FALSE .)
    DIV             reduce using rule 226 (literal -> FALSE .)
    MOD             reduce using rule 226 (literal -> FALSE .)
    PLUS            reduce using rule 226 (literal -> FALSE .)
    MINUS           reduce using rule 226 (literal -> FALSE .)
    LSHIFT          reduce using rule 226 (literal -> FALSE .)
    RSHIFT          reduce using rule 226 (literal -> FALSE .)
    LT              reduce using rule 226 (literal -> FALSE .)
    GT              reduce using rule 226 (literal -> FALSE .)
    LE              reduce using rule 226 (literal -> FALSE .)
    GE              reduce using rule 226 (literal -> FALSE .)
    EQ              reduce using rule 226 (literal -> FALSE .)
    NE              reduce using rule 226 (literal -> FALSE .)
    BITAND          reduce using rule 226 (literal -> FALSE .)
    BITXOR          reduce using rule 226 (literal -> FALSE .)
    BITOR           reduce using rule 226 (literal -> FALSE .)
    LOGAND          reduce using rule 226 (literal -> FALSE .)
    CONDOP          reduce using rule 226 (literal -> FALSE .)
    LOGOR           reduce using rule 226 (literal -> FALSE .)
    DELIM           reduce using rule 226 (literal -> FALSE .)
    CLOSE_BRACKET   reduce using rule 226 (literal -> FALSE .)
    COMMA           reduce using rule 226 (literal -> FALSE .)
    CLOSE_PAREN     reduce using rule 226 (literal -> FALSE .)
    COLON           reduce using rule 226 (literal -> FALSE .)
    BLOCK_END       reduce using rule 226 (literal -> FALSE .)


state 94

    (225) literal -> TRUE .

    TIMES           reduce using rule 225 (literal -> TRUE .)
    DIV             reduce using rule 225 (literal -> TRUE .)
    MOD             reduce using rule 225 (literal -> TRUE .)
    PLUS            reduce using rule 225 (literal -> TRUE .)
    MINUS           reduce using rule 225 (literal -> TRUE .)
    LSHIFT          reduce using rule 225 (literal -> TRUE .)
    RSHIFT          reduce using rule 225 (literal -> TRUE .)
    LT              reduce using rule 225 (literal -> TRUE .)
    GT              reduce using rule 225 (literal -> TRUE .)
    LE              reduce using rule 225 (literal -> TRUE .)
    GE              reduce using rule 225 (literal -> TRUE .)
    EQ              reduce using rule 225 (literal -> TRUE .)
    NE              reduce using rule 225 (literal -> TRUE .)
    BITAND          reduce using rule 225 (literal -> TRUE .)
    BITXOR          reduce using rule 225 (literal -> TRUE .)
    BITOR           reduce using rule 225 (literal -> TRUE .)
    LOGAND          reduce using rule 225 (literal -> TRUE .)
    CONDOP          reduce using rule 225 (literal -> TRUE .)
    LOGOR           reduce using rule 225 (literal -> TRUE .)
    DELIM           reduce using rule 225 (literal -> TRUE .)
    CLOSE_BRACKET   reduce using rule 225 (literal -> TRUE .)
    COMMA           reduce using rule 225 (literal -> TRUE .)
    CLOSE_PAREN     reduce using rule 225 (literal -> TRUE .)
    COLON           reduce using rule 225 (literal -> TRUE .)
    BLOCK_END       reduce using rule 225 (literal -> TRUE .)


state 95

    (55) relational-expression -> shift-expression .
    (61) shift-expression -> shift-expression . LSHIFT additive-expression
    (62) shift-expression -> shift-expression . RSHIFT additive-expression

    LT              reduce using rule 55 (relational-expression -> shift-expression .)
    GT              reduce using rule 55 (relational-expression -> shift-expression .)
    LE              reduce using rule 55 (relational-expression -> shift-expression .)
    GE              reduce using rule 55 (relational-expression -> shift-expression .)
    EQ              reduce using rule 55 (relational-expression -> shift-expression .)
    NE              reduce using rule 55 (relational-expression -> shift-expression .)
    BITAND          reduce using rule 55 (relational-expression -> shift-expression .)
    BITXOR          reduce using rule 55 (relational-expression -> shift-expression .)
    BITOR           reduce using rule 55 (relational-expression -> shift-expression .)
    LOGAND          reduce using rule 55 (relational-expression -> shift-expression .)
    CONDOP          reduce using rule 55 (relational-expression -> shift-expression .)
    LOGOR           reduce using rule 55 (relational-expression -> shift-expression .)
    COMMA           reduce using rule 55 (relational-expression -> shift-expression .)
    BLOCK_END       reduce using rule 55 (relational-expression -> shift-expression .)
    DELIM           reduce using rule 55 (relational-expression -> shift-expression .)
    CLOSE_BRACKET   reduce using rule 55 (relational-expression -> shift-expression .)
    CLOSE_PAREN     reduce using rule 55 (relational-expression -> shift-expression .)
    COLON           reduce using rule 55 (relational-expression -> shift-expression .)
    LSHIFT          shift and go to state 174
    RSHIFT          shift and go to state 173


state 96

    (48) exclusive-or-expression -> and-expression .
    (51) and-expression -> and-expression . BITAND equality-expression

    BITXOR          reduce using rule 48 (exclusive-or-expression -> and-expression .)
    BITOR           reduce using rule 48 (exclusive-or-expression -> and-expression .)
    LOGAND          reduce using rule 48 (exclusive-or-expression -> and-expression .)
    CONDOP          reduce using rule 48 (exclusive-or-expression -> and-expression .)
    LOGOR           reduce using rule 48 (exclusive-or-expression -> and-expression .)
    COLON           reduce using rule 48 (exclusive-or-expression -> and-expression .)
    COMMA           reduce using rule 48 (exclusive-or-expression -> and-expression .)
    DELIM           reduce using rule 48 (exclusive-or-expression -> and-expression .)
    CLOSE_BRACKET   reduce using rule 48 (exclusive-or-expression -> and-expression .)
    CLOSE_PAREN     reduce using rule 48 (exclusive-or-expression -> and-expression .)
    BLOCK_END       reduce using rule 48 (exclusive-or-expression -> and-expression .)
    BITAND          shift and go to state 175


state 97

    (63) additive-expression -> multiplicative-expression .
    (67) multiplicative-expression -> multiplicative-expression . TIMES unary-expression
    (68) multiplicative-expression -> multiplicative-expression . DIV unary-expression
    (69) multiplicative-expression -> multiplicative-expression . MOD unary-expression

    PLUS            reduce using rule 63 (additive-expression -> multiplicative-expression .)
    MINUS           reduce using rule 63 (additive-expression -> multiplicative-expression .)
    LSHIFT          reduce using rule 63 (additive-expression -> multiplicative-expression .)
    RSHIFT          reduce using rule 63 (additive-expression -> multiplicative-expression .)
    LT              reduce using rule 63 (additive-expression -> multiplicative-expression .)
    GT              reduce using rule 63 (additive-expression -> multiplicative-expression .)
    LE              reduce using rule 63 (additive-expression -> multiplicative-expression .)
    GE              reduce using rule 63 (additive-expression -> multiplicative-expression .)
    EQ              reduce using rule 63 (additive-expression -> multiplicative-expression .)
    NE              reduce using rule 63 (additive-expression -> multiplicative-expression .)
    BITAND          reduce using rule 63 (additive-expression -> multiplicative-expression .)
    BITXOR          reduce using rule 63 (additive-expression -> multiplicative-expression .)
    BITOR           reduce using rule 63 (additive-expression -> multiplicative-expression .)
    LOGAND          reduce using rule 63 (additive-expression -> multiplicative-expression .)
    CONDOP          reduce using rule 63 (additive-expression -> multiplicative-expression .)
    LOGOR           reduce using rule 63 (additive-expression -> multiplicative-expression .)
    DELIM           reduce using rule 63 (additive-expression -> multiplicative-expression .)
    CLOSE_BRACKET   reduce using rule 63 (additive-expression -> multiplicative-expression .)
    COMMA           reduce using rule 63 (additive-expression -> multiplicative-expression .)
    CLOSE_PAREN     reduce using rule 63 (additive-expression -> multiplicative-expression .)
    COLON           reduce using rule 63 (additive-expression -> multiplicative-expression .)
    BLOCK_END       reduce using rule 63 (additive-expression -> multiplicative-expression .)
    TIMES           shift and go to state 178
    DIV             shift and go to state 176
    MOD             shift and go to state 177


state 98

    (214) expression-opt -> expression .

    DELIM           reduce using rule 214 (expression-opt -> expression .)


state 99

    (73) unary-expression -> BITNOT . unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . parenthesized-expression
    (91) primary-no-array-creation-expression -> . member-access
    (92) primary-no-array-creation-expression -> . invocation-expression
    (93) primary-no-array-creation-expression -> . element-access
    (94) primary-no-array-creation-expression -> . object-creation-expression
    (223) literal -> . ICONST
    (224) literal -> . DCONST
    (225) literal -> . TRUE
    (226) literal -> . FALSE
    (95) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (96) member-access -> . prim-expression DOT IDENTIFIER
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (102) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (103) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (107) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (104) prim-expression -> . IDENTIFIER
    (105) prim-expression -> . member-access
    (106) prim-expression -> . element-access

    PLUS            shift and go to state 82
    MINUS           shift and go to state 74
    BITNOT          shift and go to state 99
    BITCOMP         shift and go to state 77
    TIMES           shift and go to state 87
    NEW             shift and go to state 72
    IDENTIFIER      shift and go to state 163
    ICONST          shift and go to state 89
    DCONST          shift and go to state 100
    TRUE            shift and go to state 94
    FALSE           shift and go to state 93
    OPEN_PAREN      shift and go to state 79

    primary-no-array-creation-expression shift and go to state 88
    member-access                  shift and go to state 160
    prim-expression                shift and go to state 159
    unary-expression               shift and go to state 179
    element-access                 shift and go to state 162
    literal                        shift and go to state 86
    array-creation-expression      shift and go to state 71
    object-creation-expression     shift and go to state 90
    primary-expression             shift and go to state 101
    invocation-expression          shift and go to state 102
    parenthesized-expression       shift and go to state 104

state 100

    (224) literal -> DCONST .

    TIMES           reduce using rule 224 (literal -> DCONST .)
    DIV             reduce using rule 224 (literal -> DCONST .)
    MOD             reduce using rule 224 (literal -> DCONST .)
    PLUS            reduce using rule 224 (literal -> DCONST .)
    MINUS           reduce using rule 224 (literal -> DCONST .)
    LSHIFT          reduce using rule 224 (literal -> DCONST .)
    RSHIFT          reduce using rule 224 (literal -> DCONST .)
    LT              reduce using rule 224 (literal -> DCONST .)
    GT              reduce using rule 224 (literal -> DCONST .)
    LE              reduce using rule 224 (literal -> DCONST .)
    GE              reduce using rule 224 (literal -> DCONST .)
    EQ              reduce using rule 224 (literal -> DCONST .)
    NE              reduce using rule 224 (literal -> DCONST .)
    BITAND          reduce using rule 224 (literal -> DCONST .)
    BITXOR          reduce using rule 224 (literal -> DCONST .)
    BITOR           reduce using rule 224 (literal -> DCONST .)
    LOGAND          reduce using rule 224 (literal -> DCONST .)
    CONDOP          reduce using rule 224 (literal -> DCONST .)
    LOGOR           reduce using rule 224 (literal -> DCONST .)
    DELIM           reduce using rule 224 (literal -> DCONST .)
    CLOSE_BRACKET   reduce using rule 224 (literal -> DCONST .)
    COMMA           reduce using rule 224 (literal -> DCONST .)
    CLOSE_PAREN     reduce using rule 224 (literal -> DCONST .)
    COLON           reduce using rule 224 (literal -> DCONST .)
    BLOCK_END       reduce using rule 224 (literal -> DCONST .)


state 101

    (70) unary-expression -> primary-expression .

    TIMES           reduce using rule 70 (unary-expression -> primary-expression .)
    DIV             reduce using rule 70 (unary-expression -> primary-expression .)
    MOD             reduce using rule 70 (unary-expression -> primary-expression .)
    PLUS            reduce using rule 70 (unary-expression -> primary-expression .)
    MINUS           reduce using rule 70 (unary-expression -> primary-expression .)
    LSHIFT          reduce using rule 70 (unary-expression -> primary-expression .)
    RSHIFT          reduce using rule 70 (unary-expression -> primary-expression .)
    LT              reduce using rule 70 (unary-expression -> primary-expression .)
    GT              reduce using rule 70 (unary-expression -> primary-expression .)
    LE              reduce using rule 70 (unary-expression -> primary-expression .)
    GE              reduce using rule 70 (unary-expression -> primary-expression .)
    EQ              reduce using rule 70 (unary-expression -> primary-expression .)
    NE              reduce using rule 70 (unary-expression -> primary-expression .)
    BITAND          reduce using rule 70 (unary-expression -> primary-expression .)
    BITXOR          reduce using rule 70 (unary-expression -> primary-expression .)
    BITOR           reduce using rule 70 (unary-expression -> primary-expression .)
    LOGAND          reduce using rule 70 (unary-expression -> primary-expression .)
    CONDOP          reduce using rule 70 (unary-expression -> primary-expression .)
    LOGOR           reduce using rule 70 (unary-expression -> primary-expression .)
    DELIM           reduce using rule 70 (unary-expression -> primary-expression .)
    CLOSE_BRACKET   reduce using rule 70 (unary-expression -> primary-expression .)
    COMMA           reduce using rule 70 (unary-expression -> primary-expression .)
    CLOSE_PAREN     reduce using rule 70 (unary-expression -> primary-expression .)
    COLON           reduce using rule 70 (unary-expression -> primary-expression .)
    BLOCK_END       reduce using rule 70 (unary-expression -> primary-expression .)


state 102

    (92) primary-no-array-creation-expression -> invocation-expression .

    TIMES           reduce using rule 92 (primary-no-array-creation-expression -> invocation-expression .)
    DIV             reduce using rule 92 (primary-no-array-creation-expression -> invocation-expression .)
    MOD             reduce using rule 92 (primary-no-array-creation-expression -> invocation-expression .)
    PLUS            reduce using rule 92 (primary-no-array-creation-expression -> invocation-expression .)
    MINUS           reduce using rule 92 (primary-no-array-creation-expression -> invocation-expression .)
    LSHIFT          reduce using rule 92 (primary-no-array-creation-expression -> invocation-expression .)
    RSHIFT          reduce using rule 92 (primary-no-array-creation-expression -> invocation-expression .)
    LT              reduce using rule 92 (primary-no-array-creation-expression -> invocation-expression .)
    GT              reduce using rule 92 (primary-no-array-creation-expression -> invocation-expression .)
    LE              reduce using rule 92 (primary-no-array-creation-expression -> invocation-expression .)
    GE              reduce using rule 92 (primary-no-array-creation-expression -> invocation-expression .)
    EQ              reduce using rule 92 (primary-no-array-creation-expression -> invocation-expression .)
    NE              reduce using rule 92 (primary-no-array-creation-expression -> invocation-expression .)
    BITAND          reduce using rule 92 (primary-no-array-creation-expression -> invocation-expression .)
    BITXOR          reduce using rule 92 (primary-no-array-creation-expression -> invocation-expression .)
    BITOR           reduce using rule 92 (primary-no-array-creation-expression -> invocation-expression .)
    LOGAND          reduce using rule 92 (primary-no-array-creation-expression -> invocation-expression .)
    CONDOP          reduce using rule 92 (primary-no-array-creation-expression -> invocation-expression .)
    LOGOR           reduce using rule 92 (primary-no-array-creation-expression -> invocation-expression .)
    DELIM           reduce using rule 92 (primary-no-array-creation-expression -> invocation-expression .)
    CLOSE_BRACKET   reduce using rule 92 (primary-no-array-creation-expression -> invocation-expression .)
    COMMA           reduce using rule 92 (primary-no-array-creation-expression -> invocation-expression .)
    CLOSE_PAREN     reduce using rule 92 (primary-no-array-creation-expression -> invocation-expression .)
    COLON           reduce using rule 92 (primary-no-array-creation-expression -> invocation-expression .)
    BLOCK_END       reduce using rule 92 (primary-no-array-creation-expression -> invocation-expression .)


state 103

    (40) conditional-expression -> conditional-or-expression .
    (41) conditional-expression -> conditional-or-expression . CONDOP expression COLON expression
    (43) conditional-or-expression -> conditional-or-expression . LOGOR conditional-and-expression

    CLOSE_PAREN     reduce using rule 40 (conditional-expression -> conditional-or-expression .)
    COLON           reduce using rule 40 (conditional-expression -> conditional-or-expression .)
    COMMA           reduce using rule 40 (conditional-expression -> conditional-or-expression .)
    CLOSE_BRACKET   reduce using rule 40 (conditional-expression -> conditional-or-expression .)
    DELIM           reduce using rule 40 (conditional-expression -> conditional-or-expression .)
    BLOCK_END       reduce using rule 40 (conditional-expression -> conditional-or-expression .)
    CONDOP          shift and go to state 181
    LOGOR           shift and go to state 180


state 104

    (90) primary-no-array-creation-expression -> parenthesized-expression .

    TIMES           reduce using rule 90 (primary-no-array-creation-expression -> parenthesized-expression .)
    DIV             reduce using rule 90 (primary-no-array-creation-expression -> parenthesized-expression .)
    MOD             reduce using rule 90 (primary-no-array-creation-expression -> parenthesized-expression .)
    PLUS            reduce using rule 90 (primary-no-array-creation-expression -> parenthesized-expression .)
    MINUS           reduce using rule 90 (primary-no-array-creation-expression -> parenthesized-expression .)
    LSHIFT          reduce using rule 90 (primary-no-array-creation-expression -> parenthesized-expression .)
    RSHIFT          reduce using rule 90 (primary-no-array-creation-expression -> parenthesized-expression .)
    LT              reduce using rule 90 (primary-no-array-creation-expression -> parenthesized-expression .)
    GT              reduce using rule 90 (primary-no-array-creation-expression -> parenthesized-expression .)
    LE              reduce using rule 90 (primary-no-array-creation-expression -> parenthesized-expression .)
    GE              reduce using rule 90 (primary-no-array-creation-expression -> parenthesized-expression .)
    EQ              reduce using rule 90 (primary-no-array-creation-expression -> parenthesized-expression .)
    NE              reduce using rule 90 (primary-no-array-creation-expression -> parenthesized-expression .)
    BITAND          reduce using rule 90 (primary-no-array-creation-expression -> parenthesized-expression .)
    BITXOR          reduce using rule 90 (primary-no-array-creation-expression -> parenthesized-expression .)
    BITOR           reduce using rule 90 (primary-no-array-creation-expression -> parenthesized-expression .)
    LOGAND          reduce using rule 90 (primary-no-array-creation-expression -> parenthesized-expression .)
    CONDOP          reduce using rule 90 (primary-no-array-creation-expression -> parenthesized-expression .)
    LOGOR           reduce using rule 90 (primary-no-array-creation-expression -> parenthesized-expression .)
    DELIM           reduce using rule 90 (primary-no-array-creation-expression -> parenthesized-expression .)
    CLOSE_BRACKET   reduce using rule 90 (primary-no-array-creation-expression -> parenthesized-expression .)
    COMMA           reduce using rule 90 (primary-no-array-creation-expression -> parenthesized-expression .)
    CLOSE_PAREN     reduce using rule 90 (primary-no-array-creation-expression -> parenthesized-expression .)
    COLON           reduce using rule 90 (primary-no-array-creation-expression -> parenthesized-expression .)
    BLOCK_END       reduce using rule 90 (primary-no-array-creation-expression -> parenthesized-expression .)


state 105

    (34) array-type -> simple-type OPEN_BRACKET . ICONST CLOSE_BRACKET

    ICONST          shift and go to state 182


state 106

    (164) declaration-statement -> local-constant-declaration DELIM .

    IDENTIFIER      reduce using rule 164 (declaration-statement -> local-constant-declaration DELIM .)
    BLOCK_BEGIN     reduce using rule 164 (declaration-statement -> local-constant-declaration DELIM .)
    DELIM           reduce using rule 164 (declaration-statement -> local-constant-declaration DELIM .)
    CONSOLE         reduce using rule 164 (declaration-statement -> local-constant-declaration DELIM .)
    CONST           reduce using rule 164 (declaration-statement -> local-constant-declaration DELIM .)
    IF              reduce using rule 164 (declaration-statement -> local-constant-declaration DELIM .)
    SWITCH          reduce using rule 164 (declaration-statement -> local-constant-declaration DELIM .)
    WHILE           reduce using rule 164 (declaration-statement -> local-constant-declaration DELIM .)
    FOR             reduce using rule 164 (declaration-statement -> local-constant-declaration DELIM .)
    DO              reduce using rule 164 (declaration-statement -> local-constant-declaration DELIM .)
    BREAK           reduce using rule 164 (declaration-statement -> local-constant-declaration DELIM .)
    CONTINUE        reduce using rule 164 (declaration-statement -> local-constant-declaration DELIM .)
    GOTO            reduce using rule 164 (declaration-statement -> local-constant-declaration DELIM .)
    RETURN          reduce using rule 164 (declaration-statement -> local-constant-declaration DELIM .)
    NEW             reduce using rule 164 (declaration-statement -> local-constant-declaration DELIM .)
    BOOL            reduce using rule 164 (declaration-statement -> local-constant-declaration DELIM .)
    INT             reduce using rule 164 (declaration-statement -> local-constant-declaration DELIM .)
    UINT            reduce using rule 164 (declaration-statement -> local-constant-declaration DELIM .)
    CHAR            reduce using rule 164 (declaration-statement -> local-constant-declaration DELIM .)
    DOUBLE          reduce using rule 164 (declaration-statement -> local-constant-declaration DELIM .)
    $end            reduce using rule 164 (declaration-statement -> local-constant-declaration DELIM .)
    BLOCK_END       reduce using rule 164 (declaration-statement -> local-constant-declaration DELIM .)
    CASE            reduce using rule 164 (declaration-statement -> local-constant-declaration DELIM .)
    DEFAULT         reduce using rule 164 (declaration-statement -> local-constant-declaration DELIM .)


state 107

    (192) iteration-statement -> do-statement M_quad .

    IDENTIFIER      reduce using rule 192 (iteration-statement -> do-statement M_quad .)
    BLOCK_BEGIN     reduce using rule 192 (iteration-statement -> do-statement M_quad .)
    DELIM           reduce using rule 192 (iteration-statement -> do-statement M_quad .)
    CONSOLE         reduce using rule 192 (iteration-statement -> do-statement M_quad .)
    CONST           reduce using rule 192 (iteration-statement -> do-statement M_quad .)
    IF              reduce using rule 192 (iteration-statement -> do-statement M_quad .)
    SWITCH          reduce using rule 192 (iteration-statement -> do-statement M_quad .)
    WHILE           reduce using rule 192 (iteration-statement -> do-statement M_quad .)
    FOR             reduce using rule 192 (iteration-statement -> do-statement M_quad .)
    DO              reduce using rule 192 (iteration-statement -> do-statement M_quad .)
    BREAK           reduce using rule 192 (iteration-statement -> do-statement M_quad .)
    CONTINUE        reduce using rule 192 (iteration-statement -> do-statement M_quad .)
    GOTO            reduce using rule 192 (iteration-statement -> do-statement M_quad .)
    RETURN          reduce using rule 192 (iteration-statement -> do-statement M_quad .)
    NEW             reduce using rule 192 (iteration-statement -> do-statement M_quad .)
    BOOL            reduce using rule 192 (iteration-statement -> do-statement M_quad .)
    INT             reduce using rule 192 (iteration-statement -> do-statement M_quad .)
    UINT            reduce using rule 192 (iteration-statement -> do-statement M_quad .)
    CHAR            reduce using rule 192 (iteration-statement -> do-statement M_quad .)
    DOUBLE          reduce using rule 192 (iteration-statement -> do-statement M_quad .)
    $end            reduce using rule 192 (iteration-statement -> do-statement M_quad .)
    BLOCK_END       reduce using rule 192 (iteration-statement -> do-statement M_quad .)
    CASE            reduce using rule 192 (iteration-statement -> do-statement M_quad .)
    DEFAULT         reduce using rule 192 (iteration-statement -> do-statement M_quad .)


state 108

    (196) for-statement -> FOR OPEN_PAREN . for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block
    (197) for-initializer-opt -> . for-initializer
    (198) for-initializer-opt -> . empty
    (199) for-initializer -> . statement-expression-list
    (227) empty -> .
    (204) statement-expression-list -> . statement-expression
    (205) statement-expression-list -> . statement-expression-list COMMA statement-expression
    (169) statement-expression -> . invocation-expression
    (170) statement-expression -> . object-creation-expression
    (171) statement-expression -> . assignment
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (107) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (108) assignment -> . prim-expression assignment-operator expression
    (96) member-access -> . prim-expression DOT IDENTIFIER
    (104) prim-expression -> . IDENTIFIER
    (105) prim-expression -> . member-access
    (106) prim-expression -> . element-access
    (102) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (103) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET

    DELIM           reduce using rule 227 (empty -> .)
    IDENTIFIER      shift and go to state 186
    NEW             shift and go to state 33

    for-initializer                shift and go to state 183
    assignment                     shift and go to state 55
    prim-expression                shift and go to state 51
    member-access                  shift and go to state 2
    element-access                 shift and go to state 18
    statement-expression           shift and go to state 184
    empty                          shift and go to state 187
    object-creation-expression     shift and go to state 58
    invocation-expression          shift and go to state 13
    statement-expression-list      shift and go to state 185
    for-initializer-opt            shift and go to state 188

state 109

    (163) declaration-statement -> local-variable-declaration DELIM .

    IDENTIFIER      reduce using rule 163 (declaration-statement -> local-variable-declaration DELIM .)
    BLOCK_BEGIN     reduce using rule 163 (declaration-statement -> local-variable-declaration DELIM .)
    DELIM           reduce using rule 163 (declaration-statement -> local-variable-declaration DELIM .)
    CONSOLE         reduce using rule 163 (declaration-statement -> local-variable-declaration DELIM .)
    CONST           reduce using rule 163 (declaration-statement -> local-variable-declaration DELIM .)
    IF              reduce using rule 163 (declaration-statement -> local-variable-declaration DELIM .)
    SWITCH          reduce using rule 163 (declaration-statement -> local-variable-declaration DELIM .)
    WHILE           reduce using rule 163 (declaration-statement -> local-variable-declaration DELIM .)
    FOR             reduce using rule 163 (declaration-statement -> local-variable-declaration DELIM .)
    DO              reduce using rule 163 (declaration-statement -> local-variable-declaration DELIM .)
    BREAK           reduce using rule 163 (declaration-statement -> local-variable-declaration DELIM .)
    CONTINUE        reduce using rule 163 (declaration-statement -> local-variable-declaration DELIM .)
    GOTO            reduce using rule 163 (declaration-statement -> local-variable-declaration DELIM .)
    RETURN          reduce using rule 163 (declaration-statement -> local-variable-declaration DELIM .)
    NEW             reduce using rule 163 (declaration-statement -> local-variable-declaration DELIM .)
    BOOL            reduce using rule 163 (declaration-statement -> local-variable-declaration DELIM .)
    INT             reduce using rule 163 (declaration-statement -> local-variable-declaration DELIM .)
    UINT            reduce using rule 163 (declaration-statement -> local-variable-declaration DELIM .)
    CHAR            reduce using rule 163 (declaration-statement -> local-variable-declaration DELIM .)
    DOUBLE          reduce using rule 163 (declaration-statement -> local-variable-declaration DELIM .)
    $end            reduce using rule 163 (declaration-statement -> local-variable-declaration DELIM .)
    BLOCK_END       reduce using rule 163 (declaration-statement -> local-variable-declaration DELIM .)
    CASE            reduce using rule 163 (declaration-statement -> local-variable-declaration DELIM .)
    DEFAULT         reduce using rule 163 (declaration-statement -> local-variable-declaration DELIM .)


state 110

    (172) selection-statement -> if-statement M_quad .

    IDENTIFIER      reduce using rule 172 (selection-statement -> if-statement M_quad .)
    BLOCK_BEGIN     reduce using rule 172 (selection-statement -> if-statement M_quad .)
    DELIM           reduce using rule 172 (selection-statement -> if-statement M_quad .)
    CONSOLE         reduce using rule 172 (selection-statement -> if-statement M_quad .)
    CONST           reduce using rule 172 (selection-statement -> if-statement M_quad .)
    IF              reduce using rule 172 (selection-statement -> if-statement M_quad .)
    SWITCH          reduce using rule 172 (selection-statement -> if-statement M_quad .)
    WHILE           reduce using rule 172 (selection-statement -> if-statement M_quad .)
    FOR             reduce using rule 172 (selection-statement -> if-statement M_quad .)
    DO              reduce using rule 172 (selection-statement -> if-statement M_quad .)
    BREAK           reduce using rule 172 (selection-statement -> if-statement M_quad .)
    CONTINUE        reduce using rule 172 (selection-statement -> if-statement M_quad .)
    GOTO            reduce using rule 172 (selection-statement -> if-statement M_quad .)
    RETURN          reduce using rule 172 (selection-statement -> if-statement M_quad .)
    NEW             reduce using rule 172 (selection-statement -> if-statement M_quad .)
    BOOL            reduce using rule 172 (selection-statement -> if-statement M_quad .)
    INT             reduce using rule 172 (selection-statement -> if-statement M_quad .)
    UINT            reduce using rule 172 (selection-statement -> if-statement M_quad .)
    CHAR            reduce using rule 172 (selection-statement -> if-statement M_quad .)
    DOUBLE          reduce using rule 172 (selection-statement -> if-statement M_quad .)
    BLOCK_END       reduce using rule 172 (selection-statement -> if-statement M_quad .)
    CASE            reduce using rule 172 (selection-statement -> if-statement M_quad .)
    DEFAULT         reduce using rule 172 (selection-statement -> if-statement M_quad .)
    $end            reduce using rule 172 (selection-statement -> if-statement M_quad .)


state 111

    (211) continue-statement -> CONTINUE DELIM .

    IDENTIFIER      reduce using rule 211 (continue-statement -> CONTINUE DELIM .)
    BLOCK_BEGIN     reduce using rule 211 (continue-statement -> CONTINUE DELIM .)
    DELIM           reduce using rule 211 (continue-statement -> CONTINUE DELIM .)
    CONSOLE         reduce using rule 211 (continue-statement -> CONTINUE DELIM .)
    CONST           reduce using rule 211 (continue-statement -> CONTINUE DELIM .)
    IF              reduce using rule 211 (continue-statement -> CONTINUE DELIM .)
    SWITCH          reduce using rule 211 (continue-statement -> CONTINUE DELIM .)
    WHILE           reduce using rule 211 (continue-statement -> CONTINUE DELIM .)
    FOR             reduce using rule 211 (continue-statement -> CONTINUE DELIM .)
    DO              reduce using rule 211 (continue-statement -> CONTINUE DELIM .)
    BREAK           reduce using rule 211 (continue-statement -> CONTINUE DELIM .)
    CONTINUE        reduce using rule 211 (continue-statement -> CONTINUE DELIM .)
    GOTO            reduce using rule 211 (continue-statement -> CONTINUE DELIM .)
    RETURN          reduce using rule 211 (continue-statement -> CONTINUE DELIM .)
    NEW             reduce using rule 211 (continue-statement -> CONTINUE DELIM .)
    BOOL            reduce using rule 211 (continue-statement -> CONTINUE DELIM .)
    INT             reduce using rule 211 (continue-statement -> CONTINUE DELIM .)
    UINT            reduce using rule 211 (continue-statement -> CONTINUE DELIM .)
    CHAR            reduce using rule 211 (continue-statement -> CONTINUE DELIM .)
    DOUBLE          reduce using rule 211 (continue-statement -> CONTINUE DELIM .)
    $end            reduce using rule 211 (continue-statement -> CONTINUE DELIM .)
    BLOCK_END       reduce using rule 211 (continue-statement -> CONTINUE DELIM .)
    CASE            reduce using rule 211 (continue-statement -> CONTINUE DELIM .)
    DEFAULT         reduce using rule 211 (continue-statement -> CONTINUE DELIM .)


state 112

    (193) while-statement -> WHILE M_quad . OPEN_PAREN expression CLOSE_PAREN M_while block

    OPEN_PAREN      shift and go to state 189


state 113

    (13) class-type -> IDENTIFIER .

    OPEN_PAREN      reduce using rule 13 (class-type -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 13 (class-type -> IDENTIFIER .)
    BLOCK_BEGIN     reduce using rule 13 (class-type -> IDENTIFIER .)


state 114

    (107) object-creation-expression -> NEW type . OPEN_PAREN argument-list-opt CLOSE_PAREN

    OPEN_PAREN      shift and go to state 190


state 115

    (179) switch-statement -> SWITCH OPEN_PAREN . expression CLOSE_PAREN switch-block
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (108) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (104) prim-expression -> . IDENTIFIER
    (105) prim-expression -> . member-access
    (106) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (96) member-access -> . prim-expression DOT IDENTIFIER
    (102) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (103) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . parenthesized-expression
    (91) primary-no-array-creation-expression -> . member-access
    (92) primary-no-array-creation-expression -> . invocation-expression
    (93) primary-no-array-creation-expression -> . element-access
    (94) primary-no-array-creation-expression -> . object-creation-expression
    (223) literal -> . ICONST
    (224) literal -> . DCONST
    (225) literal -> . TRUE
    (226) literal -> . FALSE
    (95) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (107) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 83
    PLUS            shift and go to state 82
    MINUS           shift and go to state 74
    BITNOT          shift and go to state 99
    BITCOMP         shift and go to state 77
    TIMES           shift and go to state 87
    NEW             shift and go to state 72
    ICONST          shift and go to state 89
    DCONST          shift and go to state 100
    TRUE            shift and go to state 94
    FALSE           shift and go to state 93
    OPEN_PAREN      shift and go to state 79

    unary-expression               shift and go to state 91
    exclusive-or-expression        shift and go to state 68
    member-access                  shift and go to state 69
    relational-expression          shift and go to state 70
    additive-expression            shift and go to state 73
    primary-no-array-creation-expression shift and go to state 88
    inclusive-or-expression        shift and go to state 75
    prim-expression                shift and go to state 51
    element-access                 shift and go to state 78
    literal                        shift and go to state 86
    conditional-expression         shift and go to state 80
    conditional-and-expression     shift and go to state 81
    array-creation-expression      shift and go to state 71
    assignment                     shift and go to state 85
    object-creation-expression     shift and go to state 90
    equality-expression            shift and go to state 76
    shift-expression               shift and go to state 95
    and-expression                 shift and go to state 96
    multiplicative-expression      shift and go to state 97
    conditional-or-expression      shift and go to state 103
    primary-expression             shift and go to state 101
    invocation-expression          shift and go to state 102
    expression                     shift and go to state 191
    parenthesized-expression       shift and go to state 104

state 116

    (102) element-access -> IDENTIFIER OPEN_BRACKET . expression-list CLOSE_BRACKET
    (81) expression-list -> . expression
    (82) expression-list -> . expression-list COMMA expression
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (108) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (104) prim-expression -> . IDENTIFIER
    (105) prim-expression -> . member-access
    (106) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (96) member-access -> . prim-expression DOT IDENTIFIER
    (102) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (103) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . parenthesized-expression
    (91) primary-no-array-creation-expression -> . member-access
    (92) primary-no-array-creation-expression -> . invocation-expression
    (93) primary-no-array-creation-expression -> . element-access
    (94) primary-no-array-creation-expression -> . object-creation-expression
    (223) literal -> . ICONST
    (224) literal -> . DCONST
    (225) literal -> . TRUE
    (226) literal -> . FALSE
    (95) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (107) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 83
    PLUS            shift and go to state 82
    MINUS           shift and go to state 74
    BITNOT          shift and go to state 99
    BITCOMP         shift and go to state 77
    TIMES           shift and go to state 87
    NEW             shift and go to state 72
    ICONST          shift and go to state 89
    DCONST          shift and go to state 100
    TRUE            shift and go to state 94
    FALSE           shift and go to state 93
    OPEN_PAREN      shift and go to state 79

    unary-expression               shift and go to state 91
    exclusive-or-expression        shift and go to state 68
    member-access                  shift and go to state 69
    relational-expression          shift and go to state 70
    additive-expression            shift and go to state 73
    primary-no-array-creation-expression shift and go to state 88
    inclusive-or-expression        shift and go to state 75
    equality-expression            shift and go to state 76
    prim-expression                shift and go to state 51
    element-access                 shift and go to state 78
    literal                        shift and go to state 86
    conditional-expression         shift and go to state 80
    conditional-and-expression     shift and go to state 81
    array-creation-expression      shift and go to state 71
    assignment                     shift and go to state 85
    object-creation-expression     shift and go to state 90
    expression-list                shift and go to state 192
    shift-expression               shift and go to state 95
    and-expression                 shift and go to state 96
    multiplicative-expression      shift and go to state 97
    expression                     shift and go to state 146
    primary-expression             shift and go to state 101
    invocation-expression          shift and go to state 102
    conditional-or-expression      shift and go to state 103
    parenthesized-expression       shift and go to state 104

state 117

    (97) invocation-expression -> IDENTIFIER OPEN_PAREN . argument-list-opt CLOSE_PAREN
    (99) argument-list-opt -> . expression-list
    (100) argument-list-opt -> . empty
    (81) expression-list -> . expression
    (82) expression-list -> . expression-list COMMA expression
    (227) empty -> .
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (108) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (104) prim-expression -> . IDENTIFIER
    (105) prim-expression -> . member-access
    (106) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (96) member-access -> . prim-expression DOT IDENTIFIER
    (102) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (103) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . parenthesized-expression
    (91) primary-no-array-creation-expression -> . member-access
    (92) primary-no-array-creation-expression -> . invocation-expression
    (93) primary-no-array-creation-expression -> . element-access
    (94) primary-no-array-creation-expression -> . object-creation-expression
    (223) literal -> . ICONST
    (224) literal -> . DCONST
    (225) literal -> . TRUE
    (226) literal -> . FALSE
    (95) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (107) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    CLOSE_PAREN     reduce using rule 227 (empty -> .)
    IDENTIFIER      shift and go to state 83
    PLUS            shift and go to state 82
    MINUS           shift and go to state 74
    BITNOT          shift and go to state 99
    BITCOMP         shift and go to state 77
    TIMES           shift and go to state 87
    NEW             shift and go to state 72
    ICONST          shift and go to state 89
    DCONST          shift and go to state 100
    TRUE            shift and go to state 94
    FALSE           shift and go to state 93
    OPEN_PAREN      shift and go to state 79

    argument-list-opt              shift and go to state 193
    unary-expression               shift and go to state 91
    exclusive-or-expression        shift and go to state 68
    member-access                  shift and go to state 69
    relational-expression          shift and go to state 70
    additive-expression            shift and go to state 73
    primary-no-array-creation-expression shift and go to state 88
    inclusive-or-expression        shift and go to state 75
    equality-expression            shift and go to state 76
    prim-expression                shift and go to state 51
    element-access                 shift and go to state 78
    literal                        shift and go to state 86
    conditional-expression         shift and go to state 80
    conditional-and-expression     shift and go to state 81
    empty                          shift and go to state 148
    array-creation-expression      shift and go to state 71
    assignment                     shift and go to state 85
    object-creation-expression     shift and go to state 90
    expression-list                shift and go to state 149
    shift-expression               shift and go to state 95
    and-expression                 shift and go to state 96
    multiplicative-expression      shift and go to state 97
    expression                     shift and go to state 146
    primary-expression             shift and go to state 101
    invocation-expression          shift and go to state 102
    conditional-or-expression      shift and go to state 103
    parenthesized-expression       shift and go to state 104

state 118

    (162) labeled-statement -> IDENTIFIER COLON . statement
    (148) statement -> . labeled-statement
    (149) statement -> . declaration-statement
    (150) statement -> . block
    (151) statement -> . empty-statement
    (152) statement -> . expression-statement
    (153) statement -> . selection-statement
    (154) statement -> . iteration-statement
    (155) statement -> . jump-statement
    (156) statement -> . write-statement
    (157) statement -> . read-statement
    (162) labeled-statement -> . IDENTIFIER COLON statement
    (163) declaration-statement -> . local-variable-declaration DELIM
    (164) declaration-statement -> . local-constant-declaration DELIM
    (142) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END
    (167) empty-statement -> . DELIM
    (168) expression-statement -> . statement-expression DELIM
    (172) selection-statement -> . if-statement M_quad
    (173) selection-statement -> . switch-statement
    (190) iteration-statement -> . while-statement M_quad
    (191) iteration-statement -> . for-statement M_quad
    (192) iteration-statement -> . do-statement M_quad
    (206) jump-statement -> . break-statement
    (207) jump-statement -> . continue-statement
    (208) jump-statement -> . goto-statement
    (209) jump-statement -> . return-statement
    (158) write-statement -> . CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM
    (161) read-statement -> . CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM
    (165) local-variable-declaration -> . type variable-declarators
    (166) local-constant-declaration -> . CONST type constant-declarators
    (169) statement-expression -> . invocation-expression
    (170) statement-expression -> . object-creation-expression
    (171) statement-expression -> . assignment
    (174) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block
    (175) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block
    (179) switch-statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block
    (193) while-statement -> . WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block
    (196) for-statement -> . FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block
    (195) do-statement -> . DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM
    (210) break-statement -> . BREAK DELIM
    (211) continue-statement -> . CONTINUE DELIM
    (212) goto-statement -> . GOTO IDENTIFIER DELIM
    (213) return-statement -> . RETURN expression-opt DELIM
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (107) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (108) assignment -> . prim-expression assignment-operator expression
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE
    (13) class-type -> . IDENTIFIER
    (34) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET
    (96) member-access -> . prim-expression DOT IDENTIFIER
    (104) prim-expression -> . IDENTIFIER
    (105) prim-expression -> . member-access
    (106) prim-expression -> . element-access
    (102) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (103) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET

    IDENTIFIER      shift and go to state 37
    BLOCK_BEGIN     shift and go to state 50
    DELIM           shift and go to state 4
    CONSOLE         shift and go to state 54
    CONST           shift and go to state 49
    IF              shift and go to state 59
    SWITCH          shift and go to state 35
    WHILE           shift and go to state 31
    FOR             shift and go to state 21
    DO              shift and go to state 48
    BREAK           shift and go to state 43
    CONTINUE        shift and go to state 27
    GOTO            shift and go to state 7
    RETURN          shift and go to state 14
    NEW             shift and go to state 33
    BOOL            shift and go to state 44
    INT             shift and go to state 24
    UINT            shift and go to state 57
    CHAR            shift and go to state 30
    DOUBLE          shift and go to state 12

    return-statement               shift and go to state 16
    write-statement                shift and go to state 1
    member-access                  shift and go to state 2
    selection-statement            shift and go to state 29
    empty-statement                shift and go to state 32
    expression-statement           shift and go to state 3
    break-statement                shift and go to state 34
    prim-expression                shift and go to state 51
    element-access                 shift and go to state 18
    statement-expression           shift and go to state 5
    local-constant-declaration     shift and go to state 19
    statement                      shift and go to state 194
    assignment                     shift and go to state 55
    for-statement                  shift and go to state 6
    type                           shift and go to state 38
    read-statement                 shift and go to state 53
    do-statement                   shift and go to state 20
    array-type                     shift and go to state 40
    continue-statement             shift and go to state 22
    invocation-expression          shift and go to state 13
    labeled-statement              shift and go to state 8
    declaration-statement          shift and go to state 41
    object-creation-expression     shift and go to state 58
    switch-statement               shift and go to state 9
    iteration-statement            shift and go to state 42
    jump-statement                 shift and go to state 10
    local-variable-declaration     shift and go to state 23
    goto-statement                 shift and go to state 25
    if-statement                   shift and go to state 26
    class-type                     shift and go to state 60
    while-statement                shift and go to state 46
    simple-type                    shift and go to state 15
    block                          shift and go to state 28

state 119

    (124) variable-declarators -> variable-declarator .

    COMMA           reduce using rule 124 (variable-declarators -> variable-declarator .)
    DELIM           reduce using rule 124 (variable-declarators -> variable-declarator .)


state 120

    (165) local-variable-declaration -> type variable-declarators .
    (125) variable-declarators -> variable-declarators . COMMA variable-declarator

    DELIM           reduce using rule 165 (local-variable-declaration -> type variable-declarators .)
    COMMA           shift and go to state 195


state 121

    (126) variable-declarator -> IDENTIFIER .
    (127) variable-declarator -> IDENTIFIER . ASSIGN variable-initializer

    COMMA           reduce using rule 126 (variable-declarator -> IDENTIFIER .)
    DELIM           reduce using rule 126 (variable-declarator -> IDENTIFIER .)
    ASSIGN          shift and go to state 196


state 122

    (210) break-statement -> BREAK DELIM .

    IDENTIFIER      reduce using rule 210 (break-statement -> BREAK DELIM .)
    BLOCK_BEGIN     reduce using rule 210 (break-statement -> BREAK DELIM .)
    DELIM           reduce using rule 210 (break-statement -> BREAK DELIM .)
    CONSOLE         reduce using rule 210 (break-statement -> BREAK DELIM .)
    CONST           reduce using rule 210 (break-statement -> BREAK DELIM .)
    IF              reduce using rule 210 (break-statement -> BREAK DELIM .)
    SWITCH          reduce using rule 210 (break-statement -> BREAK DELIM .)
    WHILE           reduce using rule 210 (break-statement -> BREAK DELIM .)
    FOR             reduce using rule 210 (break-statement -> BREAK DELIM .)
    DO              reduce using rule 210 (break-statement -> BREAK DELIM .)
    BREAK           reduce using rule 210 (break-statement -> BREAK DELIM .)
    CONTINUE        reduce using rule 210 (break-statement -> BREAK DELIM .)
    GOTO            reduce using rule 210 (break-statement -> BREAK DELIM .)
    RETURN          reduce using rule 210 (break-statement -> BREAK DELIM .)
    NEW             reduce using rule 210 (break-statement -> BREAK DELIM .)
    BOOL            reduce using rule 210 (break-statement -> BREAK DELIM .)
    INT             reduce using rule 210 (break-statement -> BREAK DELIM .)
    UINT            reduce using rule 210 (break-statement -> BREAK DELIM .)
    CHAR            reduce using rule 210 (break-statement -> BREAK DELIM .)
    DOUBLE          reduce using rule 210 (break-statement -> BREAK DELIM .)
    BLOCK_END       reduce using rule 210 (break-statement -> BREAK DELIM .)
    $end            reduce using rule 210 (break-statement -> BREAK DELIM .)
    CASE            reduce using rule 210 (break-statement -> BREAK DELIM .)
    DEFAULT         reduce using rule 210 (break-statement -> BREAK DELIM .)


state 123

    (147) statement-list -> statement-list statement .

    IDENTIFIER      reduce using rule 147 (statement-list -> statement-list statement .)
    BLOCK_BEGIN     reduce using rule 147 (statement-list -> statement-list statement .)
    DELIM           reduce using rule 147 (statement-list -> statement-list statement .)
    CONSOLE         reduce using rule 147 (statement-list -> statement-list statement .)
    CONST           reduce using rule 147 (statement-list -> statement-list statement .)
    IF              reduce using rule 147 (statement-list -> statement-list statement .)
    SWITCH          reduce using rule 147 (statement-list -> statement-list statement .)
    WHILE           reduce using rule 147 (statement-list -> statement-list statement .)
    FOR             reduce using rule 147 (statement-list -> statement-list statement .)
    DO              reduce using rule 147 (statement-list -> statement-list statement .)
    BREAK           reduce using rule 147 (statement-list -> statement-list statement .)
    CONTINUE        reduce using rule 147 (statement-list -> statement-list statement .)
    GOTO            reduce using rule 147 (statement-list -> statement-list statement .)
    RETURN          reduce using rule 147 (statement-list -> statement-list statement .)
    NEW             reduce using rule 147 (statement-list -> statement-list statement .)
    BOOL            reduce using rule 147 (statement-list -> statement-list statement .)
    INT             reduce using rule 147 (statement-list -> statement-list statement .)
    UINT            reduce using rule 147 (statement-list -> statement-list statement .)
    CHAR            reduce using rule 147 (statement-list -> statement-list statement .)
    DOUBLE          reduce using rule 147 (statement-list -> statement-list statement .)
    BLOCK_END       reduce using rule 147 (statement-list -> statement-list statement .)
    $end            reduce using rule 147 (statement-list -> statement-list statement .)
    CASE            reduce using rule 147 (statement-list -> statement-list statement .)
    DEFAULT         reduce using rule 147 (statement-list -> statement-list statement .)


state 124

    (190) iteration-statement -> while-statement M_quad .

    IDENTIFIER      reduce using rule 190 (iteration-statement -> while-statement M_quad .)
    BLOCK_BEGIN     reduce using rule 190 (iteration-statement -> while-statement M_quad .)
    DELIM           reduce using rule 190 (iteration-statement -> while-statement M_quad .)
    CONSOLE         reduce using rule 190 (iteration-statement -> while-statement M_quad .)
    CONST           reduce using rule 190 (iteration-statement -> while-statement M_quad .)
    IF              reduce using rule 190 (iteration-statement -> while-statement M_quad .)
    SWITCH          reduce using rule 190 (iteration-statement -> while-statement M_quad .)
    WHILE           reduce using rule 190 (iteration-statement -> while-statement M_quad .)
    FOR             reduce using rule 190 (iteration-statement -> while-statement M_quad .)
    DO              reduce using rule 190 (iteration-statement -> while-statement M_quad .)
    BREAK           reduce using rule 190 (iteration-statement -> while-statement M_quad .)
    CONTINUE        reduce using rule 190 (iteration-statement -> while-statement M_quad .)
    GOTO            reduce using rule 190 (iteration-statement -> while-statement M_quad .)
    RETURN          reduce using rule 190 (iteration-statement -> while-statement M_quad .)
    NEW             reduce using rule 190 (iteration-statement -> while-statement M_quad .)
    BOOL            reduce using rule 190 (iteration-statement -> while-statement M_quad .)
    INT             reduce using rule 190 (iteration-statement -> while-statement M_quad .)
    UINT            reduce using rule 190 (iteration-statement -> while-statement M_quad .)
    CHAR            reduce using rule 190 (iteration-statement -> while-statement M_quad .)
    DOUBLE          reduce using rule 190 (iteration-statement -> while-statement M_quad .)
    $end            reduce using rule 190 (iteration-statement -> while-statement M_quad .)
    BLOCK_END       reduce using rule 190 (iteration-statement -> while-statement M_quad .)
    CASE            reduce using rule 190 (iteration-statement -> while-statement M_quad .)
    DEFAULT         reduce using rule 190 (iteration-statement -> while-statement M_quad .)


state 125

    (195) do-statement -> DO M_quad . block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM
    (142) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END

    BLOCK_BEGIN     shift and go to state 50

    block                          shift and go to state 197

state 126

    (166) local-constant-declaration -> CONST type . constant-declarators
    (35) constant-declarators -> . constant-declarator
    (36) constant-declarators -> . constant-declarators COMMA constant-declarator
    (37) constant-declarator -> . IDENTIFIER ASSIGN expression

    IDENTIFIER      shift and go to state 199

    constant-declarators           shift and go to state 198
    constant-declarator            shift and go to state 200

state 127

    (142) block -> BLOCK_BEGIN M_bstart . statement-list-opt BLOCK_END
    (144) statement-list-opt -> . statement-list
    (145) statement-list-opt -> . empty
    (146) statement-list -> . statement
    (147) statement-list -> . statement-list statement
    (227) empty -> .
    (148) statement -> . labeled-statement
    (149) statement -> . declaration-statement
    (150) statement -> . block
    (151) statement -> . empty-statement
    (152) statement -> . expression-statement
    (153) statement -> . selection-statement
    (154) statement -> . iteration-statement
    (155) statement -> . jump-statement
    (156) statement -> . write-statement
    (157) statement -> . read-statement
    (162) labeled-statement -> . IDENTIFIER COLON statement
    (163) declaration-statement -> . local-variable-declaration DELIM
    (164) declaration-statement -> . local-constant-declaration DELIM
    (142) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END
    (167) empty-statement -> . DELIM
    (168) expression-statement -> . statement-expression DELIM
    (172) selection-statement -> . if-statement M_quad
    (173) selection-statement -> . switch-statement
    (190) iteration-statement -> . while-statement M_quad
    (191) iteration-statement -> . for-statement M_quad
    (192) iteration-statement -> . do-statement M_quad
    (206) jump-statement -> . break-statement
    (207) jump-statement -> . continue-statement
    (208) jump-statement -> . goto-statement
    (209) jump-statement -> . return-statement
    (158) write-statement -> . CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM
    (161) read-statement -> . CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM
    (165) local-variable-declaration -> . type variable-declarators
    (166) local-constant-declaration -> . CONST type constant-declarators
    (169) statement-expression -> . invocation-expression
    (170) statement-expression -> . object-creation-expression
    (171) statement-expression -> . assignment
    (174) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block
    (175) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block
    (179) switch-statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block
    (193) while-statement -> . WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block
    (196) for-statement -> . FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block
    (195) do-statement -> . DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM
    (210) break-statement -> . BREAK DELIM
    (211) continue-statement -> . CONTINUE DELIM
    (212) goto-statement -> . GOTO IDENTIFIER DELIM
    (213) return-statement -> . RETURN expression-opt DELIM
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (107) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (108) assignment -> . prim-expression assignment-operator expression
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE
    (13) class-type -> . IDENTIFIER
    (34) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET
    (96) member-access -> . prim-expression DOT IDENTIFIER
    (104) prim-expression -> . IDENTIFIER
    (105) prim-expression -> . member-access
    (106) prim-expression -> . element-access
    (102) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (103) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET

    BLOCK_END       reduce using rule 227 (empty -> .)
    IDENTIFIER      shift and go to state 37
    BLOCK_BEGIN     shift and go to state 50
    DELIM           shift and go to state 4
    CONSOLE         shift and go to state 54
    CONST           shift and go to state 49
    IF              shift and go to state 59
    SWITCH          shift and go to state 35
    WHILE           shift and go to state 31
    FOR             shift and go to state 21
    DO              shift and go to state 48
    BREAK           shift and go to state 43
    CONTINUE        shift and go to state 27
    GOTO            shift and go to state 7
    RETURN          shift and go to state 14
    NEW             shift and go to state 33
    BOOL            shift and go to state 44
    INT             shift and go to state 24
    UINT            shift and go to state 57
    CHAR            shift and go to state 30
    DOUBLE          shift and go to state 12

    return-statement               shift and go to state 16
    write-statement                shift and go to state 1
    member-access                  shift and go to state 2
    selection-statement            shift and go to state 29
    empty-statement                shift and go to state 32
    statement-list-opt             shift and go to state 201
    expression-statement           shift and go to state 3
    break-statement                shift and go to state 34
    prim-expression                shift and go to state 51
    element-access                 shift and go to state 18
    statement-expression           shift and go to state 5
    local-constant-declaration     shift and go to state 19
    statement                      shift and go to state 36
    assignment                     shift and go to state 55
    for-statement                  shift and go to state 6
    type                           shift and go to state 38
    read-statement                 shift and go to state 53
    do-statement                   shift and go to state 20
    array-type                     shift and go to state 40
    continue-statement             shift and go to state 22
    invocation-expression          shift and go to state 13
    labeled-statement              shift and go to state 8
    declaration-statement          shift and go to state 41
    object-creation-expression     shift and go to state 58
    switch-statement               shift and go to state 9
    iteration-statement            shift and go to state 42
    jump-statement                 shift and go to state 10
    local-variable-declaration     shift and go to state 23
    goto-statement                 shift and go to state 25
    if-statement                   shift and go to state 26
    empty                          shift and go to state 202
    statement-list                 shift and go to state 203
    class-type                     shift and go to state 60
    while-statement                shift and go to state 46
    simple-type                    shift and go to state 15
    block                          shift and go to state 28

state 128

    (143) M_bstart -> empty .

    IDENTIFIER      reduce using rule 143 (M_bstart -> empty .)
    BLOCK_BEGIN     reduce using rule 143 (M_bstart -> empty .)
    DELIM           reduce using rule 143 (M_bstart -> empty .)
    CONSOLE         reduce using rule 143 (M_bstart -> empty .)
    CONST           reduce using rule 143 (M_bstart -> empty .)
    IF              reduce using rule 143 (M_bstart -> empty .)
    SWITCH          reduce using rule 143 (M_bstart -> empty .)
    WHILE           reduce using rule 143 (M_bstart -> empty .)
    FOR             reduce using rule 143 (M_bstart -> empty .)
    DO              reduce using rule 143 (M_bstart -> empty .)
    BREAK           reduce using rule 143 (M_bstart -> empty .)
    CONTINUE        reduce using rule 143 (M_bstart -> empty .)
    GOTO            reduce using rule 143 (M_bstart -> empty .)
    RETURN          reduce using rule 143 (M_bstart -> empty .)
    NEW             reduce using rule 143 (M_bstart -> empty .)
    BOOL            reduce using rule 143 (M_bstart -> empty .)
    INT             reduce using rule 143 (M_bstart -> empty .)
    UINT            reduce using rule 143 (M_bstart -> empty .)
    CHAR            reduce using rule 143 (M_bstart -> empty .)
    DOUBLE          reduce using rule 143 (M_bstart -> empty .)
    BLOCK_END       reduce using rule 143 (M_bstart -> empty .)


state 129

    (113) assignment-operator -> DIVEQUAL .

    IDENTIFIER      reduce using rule 113 (assignment-operator -> DIVEQUAL .)
    PLUS            reduce using rule 113 (assignment-operator -> DIVEQUAL .)
    MINUS           reduce using rule 113 (assignment-operator -> DIVEQUAL .)
    BITNOT          reduce using rule 113 (assignment-operator -> DIVEQUAL .)
    BITCOMP         reduce using rule 113 (assignment-operator -> DIVEQUAL .)
    TIMES           reduce using rule 113 (assignment-operator -> DIVEQUAL .)
    NEW             reduce using rule 113 (assignment-operator -> DIVEQUAL .)
    ICONST          reduce using rule 113 (assignment-operator -> DIVEQUAL .)
    DCONST          reduce using rule 113 (assignment-operator -> DIVEQUAL .)
    TRUE            reduce using rule 113 (assignment-operator -> DIVEQUAL .)
    FALSE           reduce using rule 113 (assignment-operator -> DIVEQUAL .)
    OPEN_PAREN      reduce using rule 113 (assignment-operator -> DIVEQUAL .)


state 130

    (119) assignment-operator -> RSHIFTEQUAL .

    IDENTIFIER      reduce using rule 119 (assignment-operator -> RSHIFTEQUAL .)
    PLUS            reduce using rule 119 (assignment-operator -> RSHIFTEQUAL .)
    MINUS           reduce using rule 119 (assignment-operator -> RSHIFTEQUAL .)
    BITNOT          reduce using rule 119 (assignment-operator -> RSHIFTEQUAL .)
    BITCOMP         reduce using rule 119 (assignment-operator -> RSHIFTEQUAL .)
    TIMES           reduce using rule 119 (assignment-operator -> RSHIFTEQUAL .)
    NEW             reduce using rule 119 (assignment-operator -> RSHIFTEQUAL .)
    ICONST          reduce using rule 119 (assignment-operator -> RSHIFTEQUAL .)
    DCONST          reduce using rule 119 (assignment-operator -> RSHIFTEQUAL .)
    TRUE            reduce using rule 119 (assignment-operator -> RSHIFTEQUAL .)
    FALSE           reduce using rule 119 (assignment-operator -> RSHIFTEQUAL .)
    OPEN_PAREN      reduce using rule 119 (assignment-operator -> RSHIFTEQUAL .)


state 131

    (108) assignment -> prim-expression assignment-operator . expression
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (108) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (104) prim-expression -> . IDENTIFIER
    (105) prim-expression -> . member-access
    (106) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (96) member-access -> . prim-expression DOT IDENTIFIER
    (102) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (103) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . parenthesized-expression
    (91) primary-no-array-creation-expression -> . member-access
    (92) primary-no-array-creation-expression -> . invocation-expression
    (93) primary-no-array-creation-expression -> . element-access
    (94) primary-no-array-creation-expression -> . object-creation-expression
    (223) literal -> . ICONST
    (224) literal -> . DCONST
    (225) literal -> . TRUE
    (226) literal -> . FALSE
    (95) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (107) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 83
    PLUS            shift and go to state 82
    MINUS           shift and go to state 74
    BITNOT          shift and go to state 99
    BITCOMP         shift and go to state 77
    TIMES           shift and go to state 87
    NEW             shift and go to state 72
    ICONST          shift and go to state 89
    DCONST          shift and go to state 100
    TRUE            shift and go to state 94
    FALSE           shift and go to state 93
    OPEN_PAREN      shift and go to state 79

    unary-expression               shift and go to state 91
    exclusive-or-expression        shift and go to state 68
    member-access                  shift and go to state 69
    relational-expression          shift and go to state 70
    additive-expression            shift and go to state 73
    primary-no-array-creation-expression shift and go to state 88
    inclusive-or-expression        shift and go to state 75
    prim-expression                shift and go to state 51
    element-access                 shift and go to state 78
    literal                        shift and go to state 86
    conditional-expression         shift and go to state 80
    conditional-and-expression     shift and go to state 81
    array-creation-expression      shift and go to state 71
    assignment                     shift and go to state 85
    object-creation-expression     shift and go to state 90
    equality-expression            shift and go to state 76
    shift-expression               shift and go to state 95
    and-expression                 shift and go to state 96
    multiplicative-expression      shift and go to state 97
    conditional-or-expression      shift and go to state 103
    primary-expression             shift and go to state 101
    invocation-expression          shift and go to state 102
    expression                     shift and go to state 204
    parenthesized-expression       shift and go to state 104

state 132

    (112) assignment-operator -> TIMESEQUAL .

    IDENTIFIER      reduce using rule 112 (assignment-operator -> TIMESEQUAL .)
    PLUS            reduce using rule 112 (assignment-operator -> TIMESEQUAL .)
    MINUS           reduce using rule 112 (assignment-operator -> TIMESEQUAL .)
    BITNOT          reduce using rule 112 (assignment-operator -> TIMESEQUAL .)
    BITCOMP         reduce using rule 112 (assignment-operator -> TIMESEQUAL .)
    TIMES           reduce using rule 112 (assignment-operator -> TIMESEQUAL .)
    NEW             reduce using rule 112 (assignment-operator -> TIMESEQUAL .)
    ICONST          reduce using rule 112 (assignment-operator -> TIMESEQUAL .)
    DCONST          reduce using rule 112 (assignment-operator -> TIMESEQUAL .)
    TRUE            reduce using rule 112 (assignment-operator -> TIMESEQUAL .)
    FALSE           reduce using rule 112 (assignment-operator -> TIMESEQUAL .)
    OPEN_PAREN      reduce using rule 112 (assignment-operator -> TIMESEQUAL .)


state 133

    (111) assignment-operator -> MINUSEQUAL .

    IDENTIFIER      reduce using rule 111 (assignment-operator -> MINUSEQUAL .)
    PLUS            reduce using rule 111 (assignment-operator -> MINUSEQUAL .)
    MINUS           reduce using rule 111 (assignment-operator -> MINUSEQUAL .)
    BITNOT          reduce using rule 111 (assignment-operator -> MINUSEQUAL .)
    BITCOMP         reduce using rule 111 (assignment-operator -> MINUSEQUAL .)
    TIMES           reduce using rule 111 (assignment-operator -> MINUSEQUAL .)
    NEW             reduce using rule 111 (assignment-operator -> MINUSEQUAL .)
    ICONST          reduce using rule 111 (assignment-operator -> MINUSEQUAL .)
    DCONST          reduce using rule 111 (assignment-operator -> MINUSEQUAL .)
    TRUE            reduce using rule 111 (assignment-operator -> MINUSEQUAL .)
    FALSE           reduce using rule 111 (assignment-operator -> MINUSEQUAL .)
    OPEN_PAREN      reduce using rule 111 (assignment-operator -> MINUSEQUAL .)


state 134

    (116) assignment-operator -> BITOREQUAL .

    IDENTIFIER      reduce using rule 116 (assignment-operator -> BITOREQUAL .)
    PLUS            reduce using rule 116 (assignment-operator -> BITOREQUAL .)
    MINUS           reduce using rule 116 (assignment-operator -> BITOREQUAL .)
    BITNOT          reduce using rule 116 (assignment-operator -> BITOREQUAL .)
    BITCOMP         reduce using rule 116 (assignment-operator -> BITOREQUAL .)
    TIMES           reduce using rule 116 (assignment-operator -> BITOREQUAL .)
    NEW             reduce using rule 116 (assignment-operator -> BITOREQUAL .)
    ICONST          reduce using rule 116 (assignment-operator -> BITOREQUAL .)
    DCONST          reduce using rule 116 (assignment-operator -> BITOREQUAL .)
    TRUE            reduce using rule 116 (assignment-operator -> BITOREQUAL .)
    FALSE           reduce using rule 116 (assignment-operator -> BITOREQUAL .)
    OPEN_PAREN      reduce using rule 116 (assignment-operator -> BITOREQUAL .)


state 135

    (110) assignment-operator -> PLUSEQUAL .

    IDENTIFIER      reduce using rule 110 (assignment-operator -> PLUSEQUAL .)
    PLUS            reduce using rule 110 (assignment-operator -> PLUSEQUAL .)
    MINUS           reduce using rule 110 (assignment-operator -> PLUSEQUAL .)
    BITNOT          reduce using rule 110 (assignment-operator -> PLUSEQUAL .)
    BITCOMP         reduce using rule 110 (assignment-operator -> PLUSEQUAL .)
    TIMES           reduce using rule 110 (assignment-operator -> PLUSEQUAL .)
    NEW             reduce using rule 110 (assignment-operator -> PLUSEQUAL .)
    ICONST          reduce using rule 110 (assignment-operator -> PLUSEQUAL .)
    DCONST          reduce using rule 110 (assignment-operator -> PLUSEQUAL .)
    TRUE            reduce using rule 110 (assignment-operator -> PLUSEQUAL .)
    FALSE           reduce using rule 110 (assignment-operator -> PLUSEQUAL .)
    OPEN_PAREN      reduce using rule 110 (assignment-operator -> PLUSEQUAL .)


state 136

    (117) assignment-operator -> BITXOREQUAL .

    IDENTIFIER      reduce using rule 117 (assignment-operator -> BITXOREQUAL .)
    PLUS            reduce using rule 117 (assignment-operator -> BITXOREQUAL .)
    MINUS           reduce using rule 117 (assignment-operator -> BITXOREQUAL .)
    BITNOT          reduce using rule 117 (assignment-operator -> BITXOREQUAL .)
    BITCOMP         reduce using rule 117 (assignment-operator -> BITXOREQUAL .)
    TIMES           reduce using rule 117 (assignment-operator -> BITXOREQUAL .)
    NEW             reduce using rule 117 (assignment-operator -> BITXOREQUAL .)
    ICONST          reduce using rule 117 (assignment-operator -> BITXOREQUAL .)
    DCONST          reduce using rule 117 (assignment-operator -> BITXOREQUAL .)
    TRUE            reduce using rule 117 (assignment-operator -> BITXOREQUAL .)
    FALSE           reduce using rule 117 (assignment-operator -> BITXOREQUAL .)
    OPEN_PAREN      reduce using rule 117 (assignment-operator -> BITXOREQUAL .)


state 137

    (115) assignment-operator -> BITANDEQUAL .

    IDENTIFIER      reduce using rule 115 (assignment-operator -> BITANDEQUAL .)
    PLUS            reduce using rule 115 (assignment-operator -> BITANDEQUAL .)
    MINUS           reduce using rule 115 (assignment-operator -> BITANDEQUAL .)
    BITNOT          reduce using rule 115 (assignment-operator -> BITANDEQUAL .)
    BITCOMP         reduce using rule 115 (assignment-operator -> BITANDEQUAL .)
    TIMES           reduce using rule 115 (assignment-operator -> BITANDEQUAL .)
    NEW             reduce using rule 115 (assignment-operator -> BITANDEQUAL .)
    ICONST          reduce using rule 115 (assignment-operator -> BITANDEQUAL .)
    DCONST          reduce using rule 115 (assignment-operator -> BITANDEQUAL .)
    TRUE            reduce using rule 115 (assignment-operator -> BITANDEQUAL .)
    FALSE           reduce using rule 115 (assignment-operator -> BITANDEQUAL .)
    OPEN_PAREN      reduce using rule 115 (assignment-operator -> BITANDEQUAL .)


state 138

    (118) assignment-operator -> LSHIFTEQUAL .

    IDENTIFIER      reduce using rule 118 (assignment-operator -> LSHIFTEQUAL .)
    PLUS            reduce using rule 118 (assignment-operator -> LSHIFTEQUAL .)
    MINUS           reduce using rule 118 (assignment-operator -> LSHIFTEQUAL .)
    BITNOT          reduce using rule 118 (assignment-operator -> LSHIFTEQUAL .)
    BITCOMP         reduce using rule 118 (assignment-operator -> LSHIFTEQUAL .)
    TIMES           reduce using rule 118 (assignment-operator -> LSHIFTEQUAL .)
    NEW             reduce using rule 118 (assignment-operator -> LSHIFTEQUAL .)
    ICONST          reduce using rule 118 (assignment-operator -> LSHIFTEQUAL .)
    DCONST          reduce using rule 118 (assignment-operator -> LSHIFTEQUAL .)
    TRUE            reduce using rule 118 (assignment-operator -> LSHIFTEQUAL .)
    FALSE           reduce using rule 118 (assignment-operator -> LSHIFTEQUAL .)
    OPEN_PAREN      reduce using rule 118 (assignment-operator -> LSHIFTEQUAL .)


state 139

    (109) assignment-operator -> ASSIGN .

    IDENTIFIER      reduce using rule 109 (assignment-operator -> ASSIGN .)
    PLUS            reduce using rule 109 (assignment-operator -> ASSIGN .)
    MINUS           reduce using rule 109 (assignment-operator -> ASSIGN .)
    BITNOT          reduce using rule 109 (assignment-operator -> ASSIGN .)
    BITCOMP         reduce using rule 109 (assignment-operator -> ASSIGN .)
    TIMES           reduce using rule 109 (assignment-operator -> ASSIGN .)
    NEW             reduce using rule 109 (assignment-operator -> ASSIGN .)
    ICONST          reduce using rule 109 (assignment-operator -> ASSIGN .)
    DCONST          reduce using rule 109 (assignment-operator -> ASSIGN .)
    TRUE            reduce using rule 109 (assignment-operator -> ASSIGN .)
    FALSE           reduce using rule 109 (assignment-operator -> ASSIGN .)
    OPEN_PAREN      reduce using rule 109 (assignment-operator -> ASSIGN .)


state 140

    (96) member-access -> prim-expression DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 205


state 141

    (114) assignment-operator -> MODEQUAL .

    IDENTIFIER      reduce using rule 114 (assignment-operator -> MODEQUAL .)
    PLUS            reduce using rule 114 (assignment-operator -> MODEQUAL .)
    MINUS           reduce using rule 114 (assignment-operator -> MODEQUAL .)
    BITNOT          reduce using rule 114 (assignment-operator -> MODEQUAL .)
    BITCOMP         reduce using rule 114 (assignment-operator -> MODEQUAL .)
    TIMES           reduce using rule 114 (assignment-operator -> MODEQUAL .)
    NEW             reduce using rule 114 (assignment-operator -> MODEQUAL .)
    ICONST          reduce using rule 114 (assignment-operator -> MODEQUAL .)
    DCONST          reduce using rule 114 (assignment-operator -> MODEQUAL .)
    TRUE            reduce using rule 114 (assignment-operator -> MODEQUAL .)
    FALSE           reduce using rule 114 (assignment-operator -> MODEQUAL .)
    OPEN_PAREN      reduce using rule 114 (assignment-operator -> MODEQUAL .)


state 142

    (9) class-declaration -> CLASS IDENTIFIER . class-base-opt class-body semi-opt
    (10) class-base-opt -> . class-base
    (11) class-base-opt -> . empty
    (12) class-base -> . COLON class-type
    (227) empty -> .

    COLON           shift and go to state 208
    BLOCK_BEGIN     reduce using rule 227 (empty -> .)

    class-base-opt                 shift and go to state 206
    class-base                     shift and go to state 207
    empty                          shift and go to state 209

state 143

    (158) write-statement -> CONSOLE DOT . WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM
    (161) read-statement -> CONSOLE DOT . READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM

    WRITELINE       shift and go to state 210
    READLINE        shift and go to state 211


state 144

    (174) if-statement -> IF OPEN_PAREN . expression CLOSE_PAREN M_if block
    (175) if-statement -> IF OPEN_PAREN . expression CLOSE_PAREN M_if block ELSE M_else block
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (108) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (104) prim-expression -> . IDENTIFIER
    (105) prim-expression -> . member-access
    (106) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (96) member-access -> . prim-expression DOT IDENTIFIER
    (102) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (103) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . parenthesized-expression
    (91) primary-no-array-creation-expression -> . member-access
    (92) primary-no-array-creation-expression -> . invocation-expression
    (93) primary-no-array-creation-expression -> . element-access
    (94) primary-no-array-creation-expression -> . object-creation-expression
    (223) literal -> . ICONST
    (224) literal -> . DCONST
    (225) literal -> . TRUE
    (226) literal -> . FALSE
    (95) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (107) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 83
    PLUS            shift and go to state 82
    MINUS           shift and go to state 74
    BITNOT          shift and go to state 99
    BITCOMP         shift and go to state 77
    TIMES           shift and go to state 87
    NEW             shift and go to state 72
    ICONST          shift and go to state 89
    DCONST          shift and go to state 100
    TRUE            shift and go to state 94
    FALSE           shift and go to state 93
    OPEN_PAREN      shift and go to state 79

    unary-expression               shift and go to state 91
    exclusive-or-expression        shift and go to state 68
    member-access                  shift and go to state 69
    relational-expression          shift and go to state 70
    additive-expression            shift and go to state 73
    primary-no-array-creation-expression shift and go to state 88
    inclusive-or-expression        shift and go to state 75
    prim-expression                shift and go to state 51
    element-access                 shift and go to state 78
    literal                        shift and go to state 86
    conditional-expression         shift and go to state 80
    conditional-and-expression     shift and go to state 81
    array-creation-expression      shift and go to state 71
    assignment                     shift and go to state 85
    object-creation-expression     shift and go to state 90
    equality-expression            shift and go to state 76
    shift-expression               shift and go to state 95
    and-expression                 shift and go to state 96
    multiplicative-expression      shift and go to state 97
    expression                     shift and go to state 212
    primary-expression             shift and go to state 101
    invocation-expression          shift and go to state 102
    conditional-or-expression      shift and go to state 103
    parenthesized-expression       shift and go to state 104

state 145

    (103) element-access -> member-access OPEN_BRACKET expression-list . CLOSE_BRACKET
    (82) expression-list -> expression-list . COMMA expression

    CLOSE_BRACKET   shift and go to state 213
    COMMA           shift and go to state 214


state 146

    (81) expression-list -> expression .

    COMMA           reduce using rule 81 (expression-list -> expression .)
    CLOSE_PAREN     reduce using rule 81 (expression-list -> expression .)
    CLOSE_BRACKET   reduce using rule 81 (expression-list -> expression .)
    BLOCK_END       reduce using rule 81 (expression-list -> expression .)


state 147

    (98) invocation-expression -> member-access OPEN_PAREN argument-list-opt . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 215


state 148

    (100) argument-list-opt -> empty .

    CLOSE_PAREN     reduce using rule 100 (argument-list-opt -> empty .)


state 149

    (99) argument-list-opt -> expression-list .
    (82) expression-list -> expression-list . COMMA expression

    CLOSE_PAREN     reduce using rule 99 (argument-list-opt -> expression-list .)
    COMMA           shift and go to state 214


state 150

    (212) goto-statement -> GOTO IDENTIFIER DELIM .

    IDENTIFIER      reduce using rule 212 (goto-statement -> GOTO IDENTIFIER DELIM .)
    BLOCK_BEGIN     reduce using rule 212 (goto-statement -> GOTO IDENTIFIER DELIM .)
    DELIM           reduce using rule 212 (goto-statement -> GOTO IDENTIFIER DELIM .)
    CONSOLE         reduce using rule 212 (goto-statement -> GOTO IDENTIFIER DELIM .)
    CONST           reduce using rule 212 (goto-statement -> GOTO IDENTIFIER DELIM .)
    IF              reduce using rule 212 (goto-statement -> GOTO IDENTIFIER DELIM .)
    SWITCH          reduce using rule 212 (goto-statement -> GOTO IDENTIFIER DELIM .)
    WHILE           reduce using rule 212 (goto-statement -> GOTO IDENTIFIER DELIM .)
    FOR             reduce using rule 212 (goto-statement -> GOTO IDENTIFIER DELIM .)
    DO              reduce using rule 212 (goto-statement -> GOTO IDENTIFIER DELIM .)
    BREAK           reduce using rule 212 (goto-statement -> GOTO IDENTIFIER DELIM .)
    CONTINUE        reduce using rule 212 (goto-statement -> GOTO IDENTIFIER DELIM .)
    GOTO            reduce using rule 212 (goto-statement -> GOTO IDENTIFIER DELIM .)
    RETURN          reduce using rule 212 (goto-statement -> GOTO IDENTIFIER DELIM .)
    NEW             reduce using rule 212 (goto-statement -> GOTO IDENTIFIER DELIM .)
    BOOL            reduce using rule 212 (goto-statement -> GOTO IDENTIFIER DELIM .)
    INT             reduce using rule 212 (goto-statement -> GOTO IDENTIFIER DELIM .)
    UINT            reduce using rule 212 (goto-statement -> GOTO IDENTIFIER DELIM .)
    CHAR            reduce using rule 212 (goto-statement -> GOTO IDENTIFIER DELIM .)
    DOUBLE          reduce using rule 212 (goto-statement -> GOTO IDENTIFIER DELIM .)
    $end            reduce using rule 212 (goto-statement -> GOTO IDENTIFIER DELIM .)
    BLOCK_END       reduce using rule 212 (goto-statement -> GOTO IDENTIFIER DELIM .)
    CASE            reduce using rule 212 (goto-statement -> GOTO IDENTIFIER DELIM .)
    DEFAULT         reduce using rule 212 (goto-statement -> GOTO IDENTIFIER DELIM .)


state 151

    (49) exclusive-or-expression -> exclusive-or-expression BITXOR . and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . parenthesized-expression
    (91) primary-no-array-creation-expression -> . member-access
    (92) primary-no-array-creation-expression -> . invocation-expression
    (93) primary-no-array-creation-expression -> . element-access
    (94) primary-no-array-creation-expression -> . object-creation-expression
    (223) literal -> . ICONST
    (224) literal -> . DCONST
    (225) literal -> . TRUE
    (226) literal -> . FALSE
    (95) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (96) member-access -> . prim-expression DOT IDENTIFIER
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (102) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (103) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (107) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (104) prim-expression -> . IDENTIFIER
    (105) prim-expression -> . member-access
    (106) prim-expression -> . element-access

    PLUS            shift and go to state 82
    MINUS           shift and go to state 74
    BITNOT          shift and go to state 99
    BITCOMP         shift and go to state 77
    TIMES           shift and go to state 87
    NEW             shift and go to state 72
    IDENTIFIER      shift and go to state 163
    ICONST          shift and go to state 89
    DCONST          shift and go to state 100
    TRUE            shift and go to state 94
    FALSE           shift and go to state 93
    OPEN_PAREN      shift and go to state 79

    unary-expression               shift and go to state 91
    member-access                  shift and go to state 160
    relational-expression          shift and go to state 70
    additive-expression            shift and go to state 73
    primary-no-array-creation-expression shift and go to state 88
    prim-expression                shift and go to state 159
    element-access                 shift and go to state 162
    literal                        shift and go to state 86
    array-creation-expression      shift and go to state 71
    object-creation-expression     shift and go to state 90
    equality-expression            shift and go to state 76
    shift-expression               shift and go to state 95
    and-expression                 shift and go to state 216
    multiplicative-expression      shift and go to state 97
    primary-expression             shift and go to state 101
    invocation-expression          shift and go to state 102
    parenthesized-expression       shift and go to state 104

state 152

    (58) relational-expression -> relational-expression LE . shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . parenthesized-expression
    (91) primary-no-array-creation-expression -> . member-access
    (92) primary-no-array-creation-expression -> . invocation-expression
    (93) primary-no-array-creation-expression -> . element-access
    (94) primary-no-array-creation-expression -> . object-creation-expression
    (223) literal -> . ICONST
    (224) literal -> . DCONST
    (225) literal -> . TRUE
    (226) literal -> . FALSE
    (95) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (96) member-access -> . prim-expression DOT IDENTIFIER
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (102) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (103) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (107) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (104) prim-expression -> . IDENTIFIER
    (105) prim-expression -> . member-access
    (106) prim-expression -> . element-access

    PLUS            shift and go to state 82
    MINUS           shift and go to state 74
    BITNOT          shift and go to state 99
    BITCOMP         shift and go to state 77
    TIMES           shift and go to state 87
    NEW             shift and go to state 72
    IDENTIFIER      shift and go to state 163
    ICONST          shift and go to state 89
    DCONST          shift and go to state 100
    TRUE            shift and go to state 94
    FALSE           shift and go to state 93
    OPEN_PAREN      shift and go to state 79

    array-creation-expression      shift and go to state 71
    multiplicative-expression      shift and go to state 97
    member-access                  shift and go to state 160
    prim-expression                shift and go to state 159
    unary-expression               shift and go to state 91
    element-access                 shift and go to state 162
    literal                        shift and go to state 86
    primary-no-array-creation-expression shift and go to state 88
    object-creation-expression     shift and go to state 90
    primary-expression             shift and go to state 101
    invocation-expression          shift and go to state 102
    additive-expression            shift and go to state 73
    parenthesized-expression       shift and go to state 104
    shift-expression               shift and go to state 217

state 153

    (59) relational-expression -> relational-expression GE . shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . parenthesized-expression
    (91) primary-no-array-creation-expression -> . member-access
    (92) primary-no-array-creation-expression -> . invocation-expression
    (93) primary-no-array-creation-expression -> . element-access
    (94) primary-no-array-creation-expression -> . object-creation-expression
    (223) literal -> . ICONST
    (224) literal -> . DCONST
    (225) literal -> . TRUE
    (226) literal -> . FALSE
    (95) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (96) member-access -> . prim-expression DOT IDENTIFIER
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (102) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (103) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (107) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (104) prim-expression -> . IDENTIFIER
    (105) prim-expression -> . member-access
    (106) prim-expression -> . element-access

    PLUS            shift and go to state 82
    MINUS           shift and go to state 74
    BITNOT          shift and go to state 99
    BITCOMP         shift and go to state 77
    TIMES           shift and go to state 87
    NEW             shift and go to state 72
    IDENTIFIER      shift and go to state 163
    ICONST          shift and go to state 89
    DCONST          shift and go to state 100
    TRUE            shift and go to state 94
    FALSE           shift and go to state 93
    OPEN_PAREN      shift and go to state 79

    array-creation-expression      shift and go to state 71
    multiplicative-expression      shift and go to state 97
    member-access                  shift and go to state 160
    prim-expression                shift and go to state 159
    unary-expression               shift and go to state 91
    element-access                 shift and go to state 162
    literal                        shift and go to state 86
    primary-no-array-creation-expression shift and go to state 88
    object-creation-expression     shift and go to state 90
    primary-expression             shift and go to state 101
    invocation-expression          shift and go to state 102
    additive-expression            shift and go to state 73
    parenthesized-expression       shift and go to state 104
    shift-expression               shift and go to state 218

state 154

    (56) relational-expression -> relational-expression LT . shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . parenthesized-expression
    (91) primary-no-array-creation-expression -> . member-access
    (92) primary-no-array-creation-expression -> . invocation-expression
    (93) primary-no-array-creation-expression -> . element-access
    (94) primary-no-array-creation-expression -> . object-creation-expression
    (223) literal -> . ICONST
    (224) literal -> . DCONST
    (225) literal -> . TRUE
    (226) literal -> . FALSE
    (95) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (96) member-access -> . prim-expression DOT IDENTIFIER
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (102) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (103) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (107) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (104) prim-expression -> . IDENTIFIER
    (105) prim-expression -> . member-access
    (106) prim-expression -> . element-access

    PLUS            shift and go to state 82
    MINUS           shift and go to state 74
    BITNOT          shift and go to state 99
    BITCOMP         shift and go to state 77
    TIMES           shift and go to state 87
    NEW             shift and go to state 72
    IDENTIFIER      shift and go to state 163
    ICONST          shift and go to state 89
    DCONST          shift and go to state 100
    TRUE            shift and go to state 94
    FALSE           shift and go to state 93
    OPEN_PAREN      shift and go to state 79

    array-creation-expression      shift and go to state 71
    multiplicative-expression      shift and go to state 97
    member-access                  shift and go to state 160
    prim-expression                shift and go to state 159
    unary-expression               shift and go to state 91
    element-access                 shift and go to state 162
    literal                        shift and go to state 86
    primary-no-array-creation-expression shift and go to state 88
    object-creation-expression     shift and go to state 90
    primary-expression             shift and go to state 101
    invocation-expression          shift and go to state 102
    additive-expression            shift and go to state 73
    parenthesized-expression       shift and go to state 104
    shift-expression               shift and go to state 219

state 155

    (57) relational-expression -> relational-expression GT . shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . parenthesized-expression
    (91) primary-no-array-creation-expression -> . member-access
    (92) primary-no-array-creation-expression -> . invocation-expression
    (93) primary-no-array-creation-expression -> . element-access
    (94) primary-no-array-creation-expression -> . object-creation-expression
    (223) literal -> . ICONST
    (224) literal -> . DCONST
    (225) literal -> . TRUE
    (226) literal -> . FALSE
    (95) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (96) member-access -> . prim-expression DOT IDENTIFIER
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (102) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (103) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (107) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (104) prim-expression -> . IDENTIFIER
    (105) prim-expression -> . member-access
    (106) prim-expression -> . element-access

    PLUS            shift and go to state 82
    MINUS           shift and go to state 74
    BITNOT          shift and go to state 99
    BITCOMP         shift and go to state 77
    TIMES           shift and go to state 87
    NEW             shift and go to state 72
    IDENTIFIER      shift and go to state 163
    ICONST          shift and go to state 89
    DCONST          shift and go to state 100
    TRUE            shift and go to state 94
    FALSE           shift and go to state 93
    OPEN_PAREN      shift and go to state 79

    array-creation-expression      shift and go to state 71
    multiplicative-expression      shift and go to state 97
    member-access                  shift and go to state 160
    prim-expression                shift and go to state 159
    unary-expression               shift and go to state 91
    element-access                 shift and go to state 162
    literal                        shift and go to state 86
    primary-no-array-creation-expression shift and go to state 88
    object-creation-expression     shift and go to state 90
    primary-expression             shift and go to state 101
    invocation-expression          shift and go to state 102
    additive-expression            shift and go to state 73
    parenthesized-expression       shift and go to state 104
    shift-expression               shift and go to state 220

state 156

    (78) array-creation-expression -> NEW simple-type . OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (26) type -> simple-type .
    (34) array-type -> simple-type . OPEN_BRACKET ICONST CLOSE_BRACKET

    OPEN_BRACKET    shift and go to state 221
    OPEN_PAREN      reduce using rule 26 (type -> simple-type .)


state 157

    (64) additive-expression -> additive-expression PLUS . multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . parenthesized-expression
    (91) primary-no-array-creation-expression -> . member-access
    (92) primary-no-array-creation-expression -> . invocation-expression
    (93) primary-no-array-creation-expression -> . element-access
    (94) primary-no-array-creation-expression -> . object-creation-expression
    (223) literal -> . ICONST
    (224) literal -> . DCONST
    (225) literal -> . TRUE
    (226) literal -> . FALSE
    (95) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (96) member-access -> . prim-expression DOT IDENTIFIER
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (102) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (103) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (107) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (104) prim-expression -> . IDENTIFIER
    (105) prim-expression -> . member-access
    (106) prim-expression -> . element-access

    PLUS            shift and go to state 82
    MINUS           shift and go to state 74
    BITNOT          shift and go to state 99
    BITCOMP         shift and go to state 77
    TIMES           shift and go to state 87
    NEW             shift and go to state 72
    IDENTIFIER      shift and go to state 163
    ICONST          shift and go to state 89
    DCONST          shift and go to state 100
    TRUE            shift and go to state 94
    FALSE           shift and go to state 93
    OPEN_PAREN      shift and go to state 79

    array-creation-expression      shift and go to state 71
    multiplicative-expression      shift and go to state 222
    member-access                  shift and go to state 160
    prim-expression                shift and go to state 159
    unary-expression               shift and go to state 91
    element-access                 shift and go to state 162
    literal                        shift and go to state 86
    primary-no-array-creation-expression shift and go to state 88
    object-creation-expression     shift and go to state 90
    primary-expression             shift and go to state 101
    invocation-expression          shift and go to state 102
    parenthesized-expression       shift and go to state 104

state 158

    (65) additive-expression -> additive-expression MINUS . multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . parenthesized-expression
    (91) primary-no-array-creation-expression -> . member-access
    (92) primary-no-array-creation-expression -> . invocation-expression
    (93) primary-no-array-creation-expression -> . element-access
    (94) primary-no-array-creation-expression -> . object-creation-expression
    (223) literal -> . ICONST
    (224) literal -> . DCONST
    (225) literal -> . TRUE
    (226) literal -> . FALSE
    (95) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (96) member-access -> . prim-expression DOT IDENTIFIER
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (102) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (103) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (107) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (104) prim-expression -> . IDENTIFIER
    (105) prim-expression -> . member-access
    (106) prim-expression -> . element-access

    PLUS            shift and go to state 82
    MINUS           shift and go to state 74
    BITNOT          shift and go to state 99
    BITCOMP         shift and go to state 77
    TIMES           shift and go to state 87
    NEW             shift and go to state 72
    IDENTIFIER      shift and go to state 163
    ICONST          shift and go to state 89
    DCONST          shift and go to state 100
    TRUE            shift and go to state 94
    FALSE           shift and go to state 93
    OPEN_PAREN      shift and go to state 79

    array-creation-expression      shift and go to state 71
    multiplicative-expression      shift and go to state 223
    member-access                  shift and go to state 160
    prim-expression                shift and go to state 159
    unary-expression               shift and go to state 91
    element-access                 shift and go to state 162
    literal                        shift and go to state 86
    primary-no-array-creation-expression shift and go to state 88
    object-creation-expression     shift and go to state 90
    primary-expression             shift and go to state 101
    invocation-expression          shift and go to state 102
    parenthesized-expression       shift and go to state 104

state 159

    (96) member-access -> prim-expression . DOT IDENTIFIER

    DOT             shift and go to state 140


state 160

    (91) primary-no-array-creation-expression -> member-access .
    (98) invocation-expression -> member-access . OPEN_PAREN argument-list-opt CLOSE_PAREN
    (103) element-access -> member-access . OPEN_BRACKET expression-list CLOSE_BRACKET
    (105) prim-expression -> member-access .

    TIMES           reduce using rule 91 (primary-no-array-creation-expression -> member-access .)
    DIV             reduce using rule 91 (primary-no-array-creation-expression -> member-access .)
    MOD             reduce using rule 91 (primary-no-array-creation-expression -> member-access .)
    PLUS            reduce using rule 91 (primary-no-array-creation-expression -> member-access .)
    MINUS           reduce using rule 91 (primary-no-array-creation-expression -> member-access .)
    LSHIFT          reduce using rule 91 (primary-no-array-creation-expression -> member-access .)
    RSHIFT          reduce using rule 91 (primary-no-array-creation-expression -> member-access .)
    LT              reduce using rule 91 (primary-no-array-creation-expression -> member-access .)
    GT              reduce using rule 91 (primary-no-array-creation-expression -> member-access .)
    LE              reduce using rule 91 (primary-no-array-creation-expression -> member-access .)
    GE              reduce using rule 91 (primary-no-array-creation-expression -> member-access .)
    EQ              reduce using rule 91 (primary-no-array-creation-expression -> member-access .)
    NE              reduce using rule 91 (primary-no-array-creation-expression -> member-access .)
    BITAND          reduce using rule 91 (primary-no-array-creation-expression -> member-access .)
    BITXOR          reduce using rule 91 (primary-no-array-creation-expression -> member-access .)
    BITOR           reduce using rule 91 (primary-no-array-creation-expression -> member-access .)
    LOGAND          reduce using rule 91 (primary-no-array-creation-expression -> member-access .)
    CONDOP          reduce using rule 91 (primary-no-array-creation-expression -> member-access .)
    LOGOR           reduce using rule 91 (primary-no-array-creation-expression -> member-access .)
    DELIM           reduce using rule 91 (primary-no-array-creation-expression -> member-access .)
    CLOSE_BRACKET   reduce using rule 91 (primary-no-array-creation-expression -> member-access .)
    COMMA           reduce using rule 91 (primary-no-array-creation-expression -> member-access .)
    CLOSE_PAREN     reduce using rule 91 (primary-no-array-creation-expression -> member-access .)
    COLON           reduce using rule 91 (primary-no-array-creation-expression -> member-access .)
    BLOCK_END       reduce using rule 91 (primary-no-array-creation-expression -> member-access .)
    OPEN_PAREN      shift and go to state 62
    OPEN_BRACKET    shift and go to state 61
    DOT             reduce using rule 105 (prim-expression -> member-access .)


state 161

    (72) unary-expression -> MINUS unary-expression .

    TIMES           reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    DIV             reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    MOD             reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    PLUS            reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    MINUS           reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    LSHIFT          reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    RSHIFT          reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    LT              reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    GT              reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    LE              reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    GE              reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    EQ              reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    NE              reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    BITAND          reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    BITXOR          reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    BITOR           reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    LOGAND          reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    CONDOP          reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    LOGOR           reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    DELIM           reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    CLOSE_BRACKET   reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    COMMA           reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    CLOSE_PAREN     reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    COLON           reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    BLOCK_END       reduce using rule 72 (unary-expression -> MINUS unary-expression .)


state 162

    (93) primary-no-array-creation-expression -> element-access .
    (106) prim-expression -> element-access .

    TIMES           reduce using rule 93 (primary-no-array-creation-expression -> element-access .)
    DIV             reduce using rule 93 (primary-no-array-creation-expression -> element-access .)
    MOD             reduce using rule 93 (primary-no-array-creation-expression -> element-access .)
    PLUS            reduce using rule 93 (primary-no-array-creation-expression -> element-access .)
    MINUS           reduce using rule 93 (primary-no-array-creation-expression -> element-access .)
    LSHIFT          reduce using rule 93 (primary-no-array-creation-expression -> element-access .)
    RSHIFT          reduce using rule 93 (primary-no-array-creation-expression -> element-access .)
    LT              reduce using rule 93 (primary-no-array-creation-expression -> element-access .)
    GT              reduce using rule 93 (primary-no-array-creation-expression -> element-access .)
    LE              reduce using rule 93 (primary-no-array-creation-expression -> element-access .)
    GE              reduce using rule 93 (primary-no-array-creation-expression -> element-access .)
    EQ              reduce using rule 93 (primary-no-array-creation-expression -> element-access .)
    NE              reduce using rule 93 (primary-no-array-creation-expression -> element-access .)
    BITAND          reduce using rule 93 (primary-no-array-creation-expression -> element-access .)
    BITXOR          reduce using rule 93 (primary-no-array-creation-expression -> element-access .)
    BITOR           reduce using rule 93 (primary-no-array-creation-expression -> element-access .)
    LOGAND          reduce using rule 93 (primary-no-array-creation-expression -> element-access .)
    CONDOP          reduce using rule 93 (primary-no-array-creation-expression -> element-access .)
    LOGOR           reduce using rule 93 (primary-no-array-creation-expression -> element-access .)
    DELIM           reduce using rule 93 (primary-no-array-creation-expression -> element-access .)
    CLOSE_BRACKET   reduce using rule 93 (primary-no-array-creation-expression -> element-access .)
    COMMA           reduce using rule 93 (primary-no-array-creation-expression -> element-access .)
    CLOSE_PAREN     reduce using rule 93 (primary-no-array-creation-expression -> element-access .)
    COLON           reduce using rule 93 (primary-no-array-creation-expression -> element-access .)
    BLOCK_END       reduce using rule 93 (primary-no-array-creation-expression -> element-access .)
    DOT             reduce using rule 106 (prim-expression -> element-access .)


state 163

    (89) primary-no-array-creation-expression -> IDENTIFIER .
    (97) invocation-expression -> IDENTIFIER . OPEN_PAREN argument-list-opt CLOSE_PAREN
    (102) element-access -> IDENTIFIER . OPEN_BRACKET expression-list CLOSE_BRACKET
    (104) prim-expression -> IDENTIFIER .

    TIMES           reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    DIV             reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    MOD             reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    PLUS            reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    MINUS           reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    LSHIFT          reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    RSHIFT          reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    LT              reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    GT              reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    LE              reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    GE              reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    EQ              reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    NE              reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    BITAND          reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    BITXOR          reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    BITOR           reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    LOGAND          reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    CONDOP          reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    LOGOR           reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    DELIM           reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    COMMA           reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    COLON           reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    BLOCK_END       reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    OPEN_PAREN      shift and go to state 117
    OPEN_BRACKET    shift and go to state 116
    DOT             reduce using rule 104 (prim-expression -> IDENTIFIER .)


state 164

    (47) inclusive-or-expression -> inclusive-or-expression BITOR . exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . parenthesized-expression
    (91) primary-no-array-creation-expression -> . member-access
    (92) primary-no-array-creation-expression -> . invocation-expression
    (93) primary-no-array-creation-expression -> . element-access
    (94) primary-no-array-creation-expression -> . object-creation-expression
    (223) literal -> . ICONST
    (224) literal -> . DCONST
    (225) literal -> . TRUE
    (226) literal -> . FALSE
    (95) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (96) member-access -> . prim-expression DOT IDENTIFIER
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (102) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (103) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (107) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (104) prim-expression -> . IDENTIFIER
    (105) prim-expression -> . member-access
    (106) prim-expression -> . element-access

    PLUS            shift and go to state 82
    MINUS           shift and go to state 74
    BITNOT          shift and go to state 99
    BITCOMP         shift and go to state 77
    TIMES           shift and go to state 87
    NEW             shift and go to state 72
    IDENTIFIER      shift and go to state 163
    ICONST          shift and go to state 89
    DCONST          shift and go to state 100
    TRUE            shift and go to state 94
    FALSE           shift and go to state 93
    OPEN_PAREN      shift and go to state 79

    unary-expression               shift and go to state 91
    exclusive-or-expression        shift and go to state 224
    member-access                  shift and go to state 160
    relational-expression          shift and go to state 70
    additive-expression            shift and go to state 73
    primary-no-array-creation-expression shift and go to state 88
    prim-expression                shift and go to state 159
    element-access                 shift and go to state 162
    literal                        shift and go to state 86
    array-creation-expression      shift and go to state 71
    object-creation-expression     shift and go to state 90
    equality-expression            shift and go to state 76
    shift-expression               shift and go to state 95
    and-expression                 shift and go to state 96
    multiplicative-expression      shift and go to state 97
    primary-expression             shift and go to state 101
    invocation-expression          shift and go to state 102
    parenthesized-expression       shift and go to state 104

state 165

    (53) equality-expression -> equality-expression EQ . relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . parenthesized-expression
    (91) primary-no-array-creation-expression -> . member-access
    (92) primary-no-array-creation-expression -> . invocation-expression
    (93) primary-no-array-creation-expression -> . element-access
    (94) primary-no-array-creation-expression -> . object-creation-expression
    (223) literal -> . ICONST
    (224) literal -> . DCONST
    (225) literal -> . TRUE
    (226) literal -> . FALSE
    (95) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (96) member-access -> . prim-expression DOT IDENTIFIER
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (102) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (103) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (107) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (104) prim-expression -> . IDENTIFIER
    (105) prim-expression -> . member-access
    (106) prim-expression -> . element-access

    PLUS            shift and go to state 82
    MINUS           shift and go to state 74
    BITNOT          shift and go to state 99
    BITCOMP         shift and go to state 77
    TIMES           shift and go to state 87
    NEW             shift and go to state 72
    IDENTIFIER      shift and go to state 163
    ICONST          shift and go to state 89
    DCONST          shift and go to state 100
    TRUE            shift and go to state 94
    FALSE           shift and go to state 93
    OPEN_PAREN      shift and go to state 79

    unary-expression               shift and go to state 91
    member-access                  shift and go to state 160
    relational-expression          shift and go to state 225
    additive-expression            shift and go to state 73
    primary-no-array-creation-expression shift and go to state 88
    prim-expression                shift and go to state 159
    element-access                 shift and go to state 162
    literal                        shift and go to state 86
    array-creation-expression      shift and go to state 71
    object-creation-expression     shift and go to state 90
    shift-expression               shift and go to state 95
    multiplicative-expression      shift and go to state 97
    primary-expression             shift and go to state 101
    invocation-expression          shift and go to state 102
    parenthesized-expression       shift and go to state 104

state 166

    (54) equality-expression -> equality-expression NE . relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . parenthesized-expression
    (91) primary-no-array-creation-expression -> . member-access
    (92) primary-no-array-creation-expression -> . invocation-expression
    (93) primary-no-array-creation-expression -> . element-access
    (94) primary-no-array-creation-expression -> . object-creation-expression
    (223) literal -> . ICONST
    (224) literal -> . DCONST
    (225) literal -> . TRUE
    (226) literal -> . FALSE
    (95) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (96) member-access -> . prim-expression DOT IDENTIFIER
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (102) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (103) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (107) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (104) prim-expression -> . IDENTIFIER
    (105) prim-expression -> . member-access
    (106) prim-expression -> . element-access

    PLUS            shift and go to state 82
    MINUS           shift and go to state 74
    BITNOT          shift and go to state 99
    BITCOMP         shift and go to state 77
    TIMES           shift and go to state 87
    NEW             shift and go to state 72
    IDENTIFIER      shift and go to state 163
    ICONST          shift and go to state 89
    DCONST          shift and go to state 100
    TRUE            shift and go to state 94
    FALSE           shift and go to state 93
    OPEN_PAREN      shift and go to state 79

    unary-expression               shift and go to state 91
    member-access                  shift and go to state 160
    relational-expression          shift and go to state 226
    additive-expression            shift and go to state 73
    primary-no-array-creation-expression shift and go to state 88
    prim-expression                shift and go to state 159
    element-access                 shift and go to state 162
    literal                        shift and go to state 86
    array-creation-expression      shift and go to state 71
    object-creation-expression     shift and go to state 90
    shift-expression               shift and go to state 95
    multiplicative-expression      shift and go to state 97
    primary-expression             shift and go to state 101
    invocation-expression          shift and go to state 102
    parenthesized-expression       shift and go to state 104

state 167

    (74) unary-expression -> BITCOMP unary-expression .

    TIMES           reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    DIV             reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    MOD             reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    PLUS            reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    MINUS           reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    LSHIFT          reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    RSHIFT          reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    LT              reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    GT              reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    LE              reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    GE              reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    EQ              reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    NE              reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    BITAND          reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    BITXOR          reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    BITOR           reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    LOGAND          reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    CONDOP          reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    LOGOR           reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    DELIM           reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    CLOSE_BRACKET   reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    COMMA           reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    CLOSE_PAREN     reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    COLON           reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    BLOCK_END       reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)


state 168

    (95) parenthesized-expression -> OPEN_PAREN expression . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 227


state 169

    (45) conditional-and-expression -> conditional-and-expression LOGAND . inclusive-or-expression
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . parenthesized-expression
    (91) primary-no-array-creation-expression -> . member-access
    (92) primary-no-array-creation-expression -> . invocation-expression
    (93) primary-no-array-creation-expression -> . element-access
    (94) primary-no-array-creation-expression -> . object-creation-expression
    (223) literal -> . ICONST
    (224) literal -> . DCONST
    (225) literal -> . TRUE
    (226) literal -> . FALSE
    (95) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (96) member-access -> . prim-expression DOT IDENTIFIER
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (102) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (103) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (107) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (104) prim-expression -> . IDENTIFIER
    (105) prim-expression -> . member-access
    (106) prim-expression -> . element-access

    PLUS            shift and go to state 82
    MINUS           shift and go to state 74
    BITNOT          shift and go to state 99
    BITCOMP         shift and go to state 77
    TIMES           shift and go to state 87
    NEW             shift and go to state 72
    IDENTIFIER      shift and go to state 163
    ICONST          shift and go to state 89
    DCONST          shift and go to state 100
    TRUE            shift and go to state 94
    FALSE           shift and go to state 93
    OPEN_PAREN      shift and go to state 79

    prim-expression                shift and go to state 159
    exclusive-or-expression        shift and go to state 68
    member-access                  shift and go to state 160
    relational-expression          shift and go to state 70
    additive-expression            shift and go to state 73
    primary-no-array-creation-expression shift and go to state 88
    inclusive-or-expression        shift and go to state 228
    unary-expression               shift and go to state 91
    element-access                 shift and go to state 162
    literal                        shift and go to state 86
    array-creation-expression      shift and go to state 71
    object-creation-expression     shift and go to state 90
    equality-expression            shift and go to state 76
    shift-expression               shift and go to state 95
    and-expression                 shift and go to state 96
    multiplicative-expression      shift and go to state 97
    primary-expression             shift and go to state 101
    invocation-expression          shift and go to state 102
    parenthesized-expression       shift and go to state 104

state 170

    (71) unary-expression -> PLUS unary-expression .

    TIMES           reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    DIV             reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    MOD             reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    PLUS            reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    MINUS           reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    LSHIFT          reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    RSHIFT          reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    LT              reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    GT              reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    LE              reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    GE              reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    EQ              reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    NE              reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    BITAND          reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    BITXOR          reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    BITOR           reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    LOGAND          reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    CONDOP          reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    LOGOR           reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    DELIM           reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    CLOSE_BRACKET   reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    COMMA           reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    CLOSE_PAREN     reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    COLON           reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    BLOCK_END       reduce using rule 71 (unary-expression -> PLUS unary-expression .)


state 171

    (75) unary-expression -> TIMES unary-expression .

    TIMES           reduce using rule 75 (unary-expression -> TIMES unary-expression .)
    DIV             reduce using rule 75 (unary-expression -> TIMES unary-expression .)
    MOD             reduce using rule 75 (unary-expression -> TIMES unary-expression .)
    PLUS            reduce using rule 75 (unary-expression -> TIMES unary-expression .)
    MINUS           reduce using rule 75 (unary-expression -> TIMES unary-expression .)
    LSHIFT          reduce using rule 75 (unary-expression -> TIMES unary-expression .)
    RSHIFT          reduce using rule 75 (unary-expression -> TIMES unary-expression .)
    LT              reduce using rule 75 (unary-expression -> TIMES unary-expression .)
    GT              reduce using rule 75 (unary-expression -> TIMES unary-expression .)
    LE              reduce using rule 75 (unary-expression -> TIMES unary-expression .)
    GE              reduce using rule 75 (unary-expression -> TIMES unary-expression .)
    EQ              reduce using rule 75 (unary-expression -> TIMES unary-expression .)
    NE              reduce using rule 75 (unary-expression -> TIMES unary-expression .)
    BITAND          reduce using rule 75 (unary-expression -> TIMES unary-expression .)
    BITXOR          reduce using rule 75 (unary-expression -> TIMES unary-expression .)
    BITOR           reduce using rule 75 (unary-expression -> TIMES unary-expression .)
    LOGAND          reduce using rule 75 (unary-expression -> TIMES unary-expression .)
    CONDOP          reduce using rule 75 (unary-expression -> TIMES unary-expression .)
    LOGOR           reduce using rule 75 (unary-expression -> TIMES unary-expression .)
    DELIM           reduce using rule 75 (unary-expression -> TIMES unary-expression .)
    CLOSE_BRACKET   reduce using rule 75 (unary-expression -> TIMES unary-expression .)
    COMMA           reduce using rule 75 (unary-expression -> TIMES unary-expression .)
    CLOSE_PAREN     reduce using rule 75 (unary-expression -> TIMES unary-expression .)
    COLON           reduce using rule 75 (unary-expression -> TIMES unary-expression .)
    BLOCK_END       reduce using rule 75 (unary-expression -> TIMES unary-expression .)


state 172

    (213) return-statement -> RETURN expression-opt DELIM .

    IDENTIFIER      reduce using rule 213 (return-statement -> RETURN expression-opt DELIM .)
    BLOCK_BEGIN     reduce using rule 213 (return-statement -> RETURN expression-opt DELIM .)
    DELIM           reduce using rule 213 (return-statement -> RETURN expression-opt DELIM .)
    CONSOLE         reduce using rule 213 (return-statement -> RETURN expression-opt DELIM .)
    CONST           reduce using rule 213 (return-statement -> RETURN expression-opt DELIM .)
    IF              reduce using rule 213 (return-statement -> RETURN expression-opt DELIM .)
    SWITCH          reduce using rule 213 (return-statement -> RETURN expression-opt DELIM .)
    WHILE           reduce using rule 213 (return-statement -> RETURN expression-opt DELIM .)
    FOR             reduce using rule 213 (return-statement -> RETURN expression-opt DELIM .)
    DO              reduce using rule 213 (return-statement -> RETURN expression-opt DELIM .)
    BREAK           reduce using rule 213 (return-statement -> RETURN expression-opt DELIM .)
    CONTINUE        reduce using rule 213 (return-statement -> RETURN expression-opt DELIM .)
    GOTO            reduce using rule 213 (return-statement -> RETURN expression-opt DELIM .)
    RETURN          reduce using rule 213 (return-statement -> RETURN expression-opt DELIM .)
    NEW             reduce using rule 213 (return-statement -> RETURN expression-opt DELIM .)
    BOOL            reduce using rule 213 (return-statement -> RETURN expression-opt DELIM .)
    INT             reduce using rule 213 (return-statement -> RETURN expression-opt DELIM .)
    UINT            reduce using rule 213 (return-statement -> RETURN expression-opt DELIM .)
    CHAR            reduce using rule 213 (return-statement -> RETURN expression-opt DELIM .)
    DOUBLE          reduce using rule 213 (return-statement -> RETURN expression-opt DELIM .)
    BLOCK_END       reduce using rule 213 (return-statement -> RETURN expression-opt DELIM .)
    $end            reduce using rule 213 (return-statement -> RETURN expression-opt DELIM .)
    CASE            reduce using rule 213 (return-statement -> RETURN expression-opt DELIM .)
    DEFAULT         reduce using rule 213 (return-statement -> RETURN expression-opt DELIM .)


state 173

    (62) shift-expression -> shift-expression RSHIFT . additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . parenthesized-expression
    (91) primary-no-array-creation-expression -> . member-access
    (92) primary-no-array-creation-expression -> . invocation-expression
    (93) primary-no-array-creation-expression -> . element-access
    (94) primary-no-array-creation-expression -> . object-creation-expression
    (223) literal -> . ICONST
    (224) literal -> . DCONST
    (225) literal -> . TRUE
    (226) literal -> . FALSE
    (95) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (96) member-access -> . prim-expression DOT IDENTIFIER
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (102) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (103) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (107) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (104) prim-expression -> . IDENTIFIER
    (105) prim-expression -> . member-access
    (106) prim-expression -> . element-access

    PLUS            shift and go to state 82
    MINUS           shift and go to state 74
    BITNOT          shift and go to state 99
    BITCOMP         shift and go to state 77
    TIMES           shift and go to state 87
    NEW             shift and go to state 72
    IDENTIFIER      shift and go to state 163
    ICONST          shift and go to state 89
    DCONST          shift and go to state 100
    TRUE            shift and go to state 94
    FALSE           shift and go to state 93
    OPEN_PAREN      shift and go to state 79

    array-creation-expression      shift and go to state 71
    multiplicative-expression      shift and go to state 97
    member-access                  shift and go to state 160
    prim-expression                shift and go to state 159
    unary-expression               shift and go to state 91
    element-access                 shift and go to state 162
    literal                        shift and go to state 86
    primary-no-array-creation-expression shift and go to state 88
    object-creation-expression     shift and go to state 90
    primary-expression             shift and go to state 101
    invocation-expression          shift and go to state 102
    additive-expression            shift and go to state 229
    parenthesized-expression       shift and go to state 104

state 174

    (61) shift-expression -> shift-expression LSHIFT . additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . parenthesized-expression
    (91) primary-no-array-creation-expression -> . member-access
    (92) primary-no-array-creation-expression -> . invocation-expression
    (93) primary-no-array-creation-expression -> . element-access
    (94) primary-no-array-creation-expression -> . object-creation-expression
    (223) literal -> . ICONST
    (224) literal -> . DCONST
    (225) literal -> . TRUE
    (226) literal -> . FALSE
    (95) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (96) member-access -> . prim-expression DOT IDENTIFIER
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (102) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (103) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (107) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (104) prim-expression -> . IDENTIFIER
    (105) prim-expression -> . member-access
    (106) prim-expression -> . element-access

    PLUS            shift and go to state 82
    MINUS           shift and go to state 74
    BITNOT          shift and go to state 99
    BITCOMP         shift and go to state 77
    TIMES           shift and go to state 87
    NEW             shift and go to state 72
    IDENTIFIER      shift and go to state 163
    ICONST          shift and go to state 89
    DCONST          shift and go to state 100
    TRUE            shift and go to state 94
    FALSE           shift and go to state 93
    OPEN_PAREN      shift and go to state 79

    array-creation-expression      shift and go to state 71
    multiplicative-expression      shift and go to state 97
    member-access                  shift and go to state 160
    prim-expression                shift and go to state 159
    unary-expression               shift and go to state 91
    element-access                 shift and go to state 162
    literal                        shift and go to state 86
    primary-no-array-creation-expression shift and go to state 88
    object-creation-expression     shift and go to state 90
    primary-expression             shift and go to state 101
    invocation-expression          shift and go to state 102
    additive-expression            shift and go to state 230
    parenthesized-expression       shift and go to state 104

state 175

    (51) and-expression -> and-expression BITAND . equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . parenthesized-expression
    (91) primary-no-array-creation-expression -> . member-access
    (92) primary-no-array-creation-expression -> . invocation-expression
    (93) primary-no-array-creation-expression -> . element-access
    (94) primary-no-array-creation-expression -> . object-creation-expression
    (223) literal -> . ICONST
    (224) literal -> . DCONST
    (225) literal -> . TRUE
    (226) literal -> . FALSE
    (95) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (96) member-access -> . prim-expression DOT IDENTIFIER
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (102) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (103) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (107) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (104) prim-expression -> . IDENTIFIER
    (105) prim-expression -> . member-access
    (106) prim-expression -> . element-access

    PLUS            shift and go to state 82
    MINUS           shift and go to state 74
    BITNOT          shift and go to state 99
    BITCOMP         shift and go to state 77
    TIMES           shift and go to state 87
    NEW             shift and go to state 72
    IDENTIFIER      shift and go to state 163
    ICONST          shift and go to state 89
    DCONST          shift and go to state 100
    TRUE            shift and go to state 94
    FALSE           shift and go to state 93
    OPEN_PAREN      shift and go to state 79

    unary-expression               shift and go to state 91
    member-access                  shift and go to state 160
    relational-expression          shift and go to state 70
    additive-expression            shift and go to state 73
    primary-no-array-creation-expression shift and go to state 88
    equality-expression            shift and go to state 231
    prim-expression                shift and go to state 159
    element-access                 shift and go to state 162
    literal                        shift and go to state 86
    array-creation-expression      shift and go to state 71
    object-creation-expression     shift and go to state 90
    shift-expression               shift and go to state 95
    multiplicative-expression      shift and go to state 97
    primary-expression             shift and go to state 101
    invocation-expression          shift and go to state 102
    parenthesized-expression       shift and go to state 104

state 176

    (68) multiplicative-expression -> multiplicative-expression DIV . unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . parenthesized-expression
    (91) primary-no-array-creation-expression -> . member-access
    (92) primary-no-array-creation-expression -> . invocation-expression
    (93) primary-no-array-creation-expression -> . element-access
    (94) primary-no-array-creation-expression -> . object-creation-expression
    (223) literal -> . ICONST
    (224) literal -> . DCONST
    (225) literal -> . TRUE
    (226) literal -> . FALSE
    (95) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (96) member-access -> . prim-expression DOT IDENTIFIER
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (102) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (103) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (107) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (104) prim-expression -> . IDENTIFIER
    (105) prim-expression -> . member-access
    (106) prim-expression -> . element-access

    PLUS            shift and go to state 82
    MINUS           shift and go to state 74
    BITNOT          shift and go to state 99
    BITCOMP         shift and go to state 77
    TIMES           shift and go to state 87
    NEW             shift and go to state 72
    IDENTIFIER      shift and go to state 163
    ICONST          shift and go to state 89
    DCONST          shift and go to state 100
    TRUE            shift and go to state 94
    FALSE           shift and go to state 93
    OPEN_PAREN      shift and go to state 79

    primary-no-array-creation-expression shift and go to state 88
    member-access                  shift and go to state 160
    prim-expression                shift and go to state 159
    unary-expression               shift and go to state 232
    element-access                 shift and go to state 162
    literal                        shift and go to state 86
    array-creation-expression      shift and go to state 71
    object-creation-expression     shift and go to state 90
    primary-expression             shift and go to state 101
    invocation-expression          shift and go to state 102
    parenthesized-expression       shift and go to state 104

state 177

    (69) multiplicative-expression -> multiplicative-expression MOD . unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . parenthesized-expression
    (91) primary-no-array-creation-expression -> . member-access
    (92) primary-no-array-creation-expression -> . invocation-expression
    (93) primary-no-array-creation-expression -> . element-access
    (94) primary-no-array-creation-expression -> . object-creation-expression
    (223) literal -> . ICONST
    (224) literal -> . DCONST
    (225) literal -> . TRUE
    (226) literal -> . FALSE
    (95) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (96) member-access -> . prim-expression DOT IDENTIFIER
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (102) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (103) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (107) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (104) prim-expression -> . IDENTIFIER
    (105) prim-expression -> . member-access
    (106) prim-expression -> . element-access

    PLUS            shift and go to state 82
    MINUS           shift and go to state 74
    BITNOT          shift and go to state 99
    BITCOMP         shift and go to state 77
    TIMES           shift and go to state 87
    NEW             shift and go to state 72
    IDENTIFIER      shift and go to state 163
    ICONST          shift and go to state 89
    DCONST          shift and go to state 100
    TRUE            shift and go to state 94
    FALSE           shift and go to state 93
    OPEN_PAREN      shift and go to state 79

    primary-no-array-creation-expression shift and go to state 88
    member-access                  shift and go to state 160
    prim-expression                shift and go to state 159
    unary-expression               shift and go to state 233
    element-access                 shift and go to state 162
    literal                        shift and go to state 86
    array-creation-expression      shift and go to state 71
    object-creation-expression     shift and go to state 90
    primary-expression             shift and go to state 101
    invocation-expression          shift and go to state 102
    parenthesized-expression       shift and go to state 104

state 178

    (67) multiplicative-expression -> multiplicative-expression TIMES . unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . parenthesized-expression
    (91) primary-no-array-creation-expression -> . member-access
    (92) primary-no-array-creation-expression -> . invocation-expression
    (93) primary-no-array-creation-expression -> . element-access
    (94) primary-no-array-creation-expression -> . object-creation-expression
    (223) literal -> . ICONST
    (224) literal -> . DCONST
    (225) literal -> . TRUE
    (226) literal -> . FALSE
    (95) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (96) member-access -> . prim-expression DOT IDENTIFIER
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (102) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (103) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (107) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (104) prim-expression -> . IDENTIFIER
    (105) prim-expression -> . member-access
    (106) prim-expression -> . element-access

    PLUS            shift and go to state 82
    MINUS           shift and go to state 74
    BITNOT          shift and go to state 99
    BITCOMP         shift and go to state 77
    TIMES           shift and go to state 87
    NEW             shift and go to state 72
    IDENTIFIER      shift and go to state 163
    ICONST          shift and go to state 89
    DCONST          shift and go to state 100
    TRUE            shift and go to state 94
    FALSE           shift and go to state 93
    OPEN_PAREN      shift and go to state 79

    primary-no-array-creation-expression shift and go to state 88
    member-access                  shift and go to state 160
    prim-expression                shift and go to state 159
    unary-expression               shift and go to state 234
    element-access                 shift and go to state 162
    literal                        shift and go to state 86
    array-creation-expression      shift and go to state 71
    object-creation-expression     shift and go to state 90
    primary-expression             shift and go to state 101
    invocation-expression          shift and go to state 102
    parenthesized-expression       shift and go to state 104

state 179

    (73) unary-expression -> BITNOT unary-expression .

    TIMES           reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    DIV             reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    MOD             reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    PLUS            reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    MINUS           reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    LSHIFT          reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    RSHIFT          reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    LT              reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    GT              reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    LE              reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    GE              reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    EQ              reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    NE              reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    BITAND          reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    BITXOR          reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    BITOR           reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    LOGAND          reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    CONDOP          reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    LOGOR           reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    DELIM           reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    CLOSE_BRACKET   reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    COMMA           reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    CLOSE_PAREN     reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    COLON           reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    BLOCK_END       reduce using rule 73 (unary-expression -> BITNOT unary-expression .)


state 180

    (43) conditional-or-expression -> conditional-or-expression LOGOR . conditional-and-expression
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . parenthesized-expression
    (91) primary-no-array-creation-expression -> . member-access
    (92) primary-no-array-creation-expression -> . invocation-expression
    (93) primary-no-array-creation-expression -> . element-access
    (94) primary-no-array-creation-expression -> . object-creation-expression
    (223) literal -> . ICONST
    (224) literal -> . DCONST
    (225) literal -> . TRUE
    (226) literal -> . FALSE
    (95) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (96) member-access -> . prim-expression DOT IDENTIFIER
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (102) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (103) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (107) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (104) prim-expression -> . IDENTIFIER
    (105) prim-expression -> . member-access
    (106) prim-expression -> . element-access

    PLUS            shift and go to state 82
    MINUS           shift and go to state 74
    BITNOT          shift and go to state 99
    BITCOMP         shift and go to state 77
    TIMES           shift and go to state 87
    NEW             shift and go to state 72
    IDENTIFIER      shift and go to state 163
    ICONST          shift and go to state 89
    DCONST          shift and go to state 100
    TRUE            shift and go to state 94
    FALSE           shift and go to state 93
    OPEN_PAREN      shift and go to state 79

    prim-expression                shift and go to state 159
    exclusive-or-expression        shift and go to state 68
    member-access                  shift and go to state 160
    relational-expression          shift and go to state 70
    additive-expression            shift and go to state 73
    primary-no-array-creation-expression shift and go to state 88
    inclusive-or-expression        shift and go to state 75
    unary-expression               shift and go to state 91
    element-access                 shift and go to state 162
    literal                        shift and go to state 86
    array-creation-expression      shift and go to state 71
    conditional-and-expression     shift and go to state 235
    object-creation-expression     shift and go to state 90
    equality-expression            shift and go to state 76
    shift-expression               shift and go to state 95
    and-expression                 shift and go to state 96
    multiplicative-expression      shift and go to state 97
    primary-expression             shift and go to state 101
    invocation-expression          shift and go to state 102
    parenthesized-expression       shift and go to state 104

state 181

    (41) conditional-expression -> conditional-or-expression CONDOP . expression COLON expression
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (108) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (104) prim-expression -> . IDENTIFIER
    (105) prim-expression -> . member-access
    (106) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (96) member-access -> . prim-expression DOT IDENTIFIER
    (102) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (103) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . parenthesized-expression
    (91) primary-no-array-creation-expression -> . member-access
    (92) primary-no-array-creation-expression -> . invocation-expression
    (93) primary-no-array-creation-expression -> . element-access
    (94) primary-no-array-creation-expression -> . object-creation-expression
    (223) literal -> . ICONST
    (224) literal -> . DCONST
    (225) literal -> . TRUE
    (226) literal -> . FALSE
    (95) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (107) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 83
    PLUS            shift and go to state 82
    MINUS           shift and go to state 74
    BITNOT          shift and go to state 99
    BITCOMP         shift and go to state 77
    TIMES           shift and go to state 87
    NEW             shift and go to state 72
    ICONST          shift and go to state 89
    DCONST          shift and go to state 100
    TRUE            shift and go to state 94
    FALSE           shift and go to state 93
    OPEN_PAREN      shift and go to state 79

    unary-expression               shift and go to state 91
    exclusive-or-expression        shift and go to state 68
    member-access                  shift and go to state 69
    relational-expression          shift and go to state 70
    additive-expression            shift and go to state 73
    primary-no-array-creation-expression shift and go to state 88
    inclusive-or-expression        shift and go to state 75
    prim-expression                shift and go to state 51
    element-access                 shift and go to state 78
    literal                        shift and go to state 86
    conditional-expression         shift and go to state 80
    conditional-and-expression     shift and go to state 81
    array-creation-expression      shift and go to state 71
    assignment                     shift and go to state 85
    object-creation-expression     shift and go to state 90
    equality-expression            shift and go to state 76
    shift-expression               shift and go to state 95
    and-expression                 shift and go to state 96
    multiplicative-expression      shift and go to state 97
    expression                     shift and go to state 236
    primary-expression             shift and go to state 101
    invocation-expression          shift and go to state 102
    conditional-or-expression      shift and go to state 103
    parenthesized-expression       shift and go to state 104

state 182

    (34) array-type -> simple-type OPEN_BRACKET ICONST . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 237


state 183

    (197) for-initializer-opt -> for-initializer .

    DELIM           reduce using rule 197 (for-initializer-opt -> for-initializer .)


state 184

    (204) statement-expression-list -> statement-expression .

    COMMA           reduce using rule 204 (statement-expression-list -> statement-expression .)
    DELIM           reduce using rule 204 (statement-expression-list -> statement-expression .)
    CLOSE_PAREN     reduce using rule 204 (statement-expression-list -> statement-expression .)


state 185

    (199) for-initializer -> statement-expression-list .
    (205) statement-expression-list -> statement-expression-list . COMMA statement-expression

    DELIM           reduce using rule 199 (for-initializer -> statement-expression-list .)
    COMMA           shift and go to state 238


state 186

    (97) invocation-expression -> IDENTIFIER . OPEN_PAREN argument-list-opt CLOSE_PAREN
    (104) prim-expression -> IDENTIFIER .
    (102) element-access -> IDENTIFIER . OPEN_BRACKET expression-list CLOSE_BRACKET

    OPEN_PAREN      shift and go to state 117
    DOT             reduce using rule 104 (prim-expression -> IDENTIFIER .)
    ASSIGN          reduce using rule 104 (prim-expression -> IDENTIFIER .)
    PLUSEQUAL       reduce using rule 104 (prim-expression -> IDENTIFIER .)
    MINUSEQUAL      reduce using rule 104 (prim-expression -> IDENTIFIER .)
    TIMESEQUAL      reduce using rule 104 (prim-expression -> IDENTIFIER .)
    DIVEQUAL        reduce using rule 104 (prim-expression -> IDENTIFIER .)
    MODEQUAL        reduce using rule 104 (prim-expression -> IDENTIFIER .)
    BITANDEQUAL     reduce using rule 104 (prim-expression -> IDENTIFIER .)
    BITOREQUAL      reduce using rule 104 (prim-expression -> IDENTIFIER .)
    BITXOREQUAL     reduce using rule 104 (prim-expression -> IDENTIFIER .)
    LSHIFTEQUAL     reduce using rule 104 (prim-expression -> IDENTIFIER .)
    RSHIFTEQUAL     reduce using rule 104 (prim-expression -> IDENTIFIER .)
    OPEN_BRACKET    shift and go to state 116


state 187

    (198) for-initializer-opt -> empty .

    DELIM           reduce using rule 198 (for-initializer-opt -> empty .)


state 188

    (196) for-statement -> FOR OPEN_PAREN for-initializer-opt . DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block

    DELIM           shift and go to state 239


state 189

    (193) while-statement -> WHILE M_quad OPEN_PAREN . expression CLOSE_PAREN M_while block
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (108) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (104) prim-expression -> . IDENTIFIER
    (105) prim-expression -> . member-access
    (106) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (96) member-access -> . prim-expression DOT IDENTIFIER
    (102) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (103) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . parenthesized-expression
    (91) primary-no-array-creation-expression -> . member-access
    (92) primary-no-array-creation-expression -> . invocation-expression
    (93) primary-no-array-creation-expression -> . element-access
    (94) primary-no-array-creation-expression -> . object-creation-expression
    (223) literal -> . ICONST
    (224) literal -> . DCONST
    (225) literal -> . TRUE
    (226) literal -> . FALSE
    (95) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (107) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 83
    PLUS            shift and go to state 82
    MINUS           shift and go to state 74
    BITNOT          shift and go to state 99
    BITCOMP         shift and go to state 77
    TIMES           shift and go to state 87
    NEW             shift and go to state 72
    ICONST          shift and go to state 89
    DCONST          shift and go to state 100
    TRUE            shift and go to state 94
    FALSE           shift and go to state 93
    OPEN_PAREN      shift and go to state 79

    unary-expression               shift and go to state 91
    exclusive-or-expression        shift and go to state 68
    member-access                  shift and go to state 69
    relational-expression          shift and go to state 70
    additive-expression            shift and go to state 73
    primary-no-array-creation-expression shift and go to state 88
    inclusive-or-expression        shift and go to state 75
    prim-expression                shift and go to state 51
    element-access                 shift and go to state 78
    literal                        shift and go to state 86
    conditional-expression         shift and go to state 80
    conditional-and-expression     shift and go to state 81
    array-creation-expression      shift and go to state 71
    assignment                     shift and go to state 85
    object-creation-expression     shift and go to state 90
    equality-expression            shift and go to state 76
    shift-expression               shift and go to state 95
    and-expression                 shift and go to state 96
    multiplicative-expression      shift and go to state 97
    expression                     shift and go to state 240
    primary-expression             shift and go to state 101
    invocation-expression          shift and go to state 102
    conditional-or-expression      shift and go to state 103
    parenthesized-expression       shift and go to state 104

state 190

    (107) object-creation-expression -> NEW type OPEN_PAREN . argument-list-opt CLOSE_PAREN
    (99) argument-list-opt -> . expression-list
    (100) argument-list-opt -> . empty
    (81) expression-list -> . expression
    (82) expression-list -> . expression-list COMMA expression
    (227) empty -> .
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (108) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (104) prim-expression -> . IDENTIFIER
    (105) prim-expression -> . member-access
    (106) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (96) member-access -> . prim-expression DOT IDENTIFIER
    (102) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (103) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . parenthesized-expression
    (91) primary-no-array-creation-expression -> . member-access
    (92) primary-no-array-creation-expression -> . invocation-expression
    (93) primary-no-array-creation-expression -> . element-access
    (94) primary-no-array-creation-expression -> . object-creation-expression
    (223) literal -> . ICONST
    (224) literal -> . DCONST
    (225) literal -> . TRUE
    (226) literal -> . FALSE
    (95) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (107) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    CLOSE_PAREN     reduce using rule 227 (empty -> .)
    IDENTIFIER      shift and go to state 83
    PLUS            shift and go to state 82
    MINUS           shift and go to state 74
    BITNOT          shift and go to state 99
    BITCOMP         shift and go to state 77
    TIMES           shift and go to state 87
    NEW             shift and go to state 72
    ICONST          shift and go to state 89
    DCONST          shift and go to state 100
    TRUE            shift and go to state 94
    FALSE           shift and go to state 93
    OPEN_PAREN      shift and go to state 79

    argument-list-opt              shift and go to state 241
    unary-expression               shift and go to state 91
    exclusive-or-expression        shift and go to state 68
    member-access                  shift and go to state 69
    relational-expression          shift and go to state 70
    additive-expression            shift and go to state 73
    primary-no-array-creation-expression shift and go to state 88
    inclusive-or-expression        shift and go to state 75
    expression-list                shift and go to state 149
    prim-expression                shift and go to state 51
    element-access                 shift and go to state 78
    literal                        shift and go to state 86
    conditional-expression         shift and go to state 80
    assignment                     shift and go to state 85
    empty                          shift and go to state 148
    array-creation-expression      shift and go to state 71
    conditional-and-expression     shift and go to state 81
    object-creation-expression     shift and go to state 90
    equality-expression            shift and go to state 76
    shift-expression               shift and go to state 95
    and-expression                 shift and go to state 96
    multiplicative-expression      shift and go to state 97
    conditional-or-expression      shift and go to state 103
    primary-expression             shift and go to state 101
    invocation-expression          shift and go to state 102
    expression                     shift and go to state 146
    parenthesized-expression       shift and go to state 104

state 191

    (179) switch-statement -> SWITCH OPEN_PAREN expression . CLOSE_PAREN switch-block

    CLOSE_PAREN     shift and go to state 242


state 192

    (102) element-access -> IDENTIFIER OPEN_BRACKET expression-list . CLOSE_BRACKET
    (82) expression-list -> expression-list . COMMA expression

    CLOSE_BRACKET   shift and go to state 243
    COMMA           shift and go to state 214


state 193

    (97) invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 244


state 194

    (162) labeled-statement -> IDENTIFIER COLON statement .

    IDENTIFIER      reduce using rule 162 (labeled-statement -> IDENTIFIER COLON statement .)
    BLOCK_BEGIN     reduce using rule 162 (labeled-statement -> IDENTIFIER COLON statement .)
    DELIM           reduce using rule 162 (labeled-statement -> IDENTIFIER COLON statement .)
    CONSOLE         reduce using rule 162 (labeled-statement -> IDENTIFIER COLON statement .)
    CONST           reduce using rule 162 (labeled-statement -> IDENTIFIER COLON statement .)
    IF              reduce using rule 162 (labeled-statement -> IDENTIFIER COLON statement .)
    SWITCH          reduce using rule 162 (labeled-statement -> IDENTIFIER COLON statement .)
    WHILE           reduce using rule 162 (labeled-statement -> IDENTIFIER COLON statement .)
    FOR             reduce using rule 162 (labeled-statement -> IDENTIFIER COLON statement .)
    DO              reduce using rule 162 (labeled-statement -> IDENTIFIER COLON statement .)
    BREAK           reduce using rule 162 (labeled-statement -> IDENTIFIER COLON statement .)
    CONTINUE        reduce using rule 162 (labeled-statement -> IDENTIFIER COLON statement .)
    GOTO            reduce using rule 162 (labeled-statement -> IDENTIFIER COLON statement .)
    RETURN          reduce using rule 162 (labeled-statement -> IDENTIFIER COLON statement .)
    NEW             reduce using rule 162 (labeled-statement -> IDENTIFIER COLON statement .)
    BOOL            reduce using rule 162 (labeled-statement -> IDENTIFIER COLON statement .)
    INT             reduce using rule 162 (labeled-statement -> IDENTIFIER COLON statement .)
    UINT            reduce using rule 162 (labeled-statement -> IDENTIFIER COLON statement .)
    CHAR            reduce using rule 162 (labeled-statement -> IDENTIFIER COLON statement .)
    DOUBLE          reduce using rule 162 (labeled-statement -> IDENTIFIER COLON statement .)
    $end            reduce using rule 162 (labeled-statement -> IDENTIFIER COLON statement .)
    BLOCK_END       reduce using rule 162 (labeled-statement -> IDENTIFIER COLON statement .)
    CASE            reduce using rule 162 (labeled-statement -> IDENTIFIER COLON statement .)
    DEFAULT         reduce using rule 162 (labeled-statement -> IDENTIFIER COLON statement .)


state 195

    (125) variable-declarators -> variable-declarators COMMA . variable-declarator
    (126) variable-declarator -> . IDENTIFIER
    (127) variable-declarator -> . IDENTIFIER ASSIGN variable-initializer

    IDENTIFIER      shift and go to state 121

    variable-declarator            shift and go to state 245

state 196

    (127) variable-declarator -> IDENTIFIER ASSIGN . variable-initializer
    (86) variable-initializer -> . expression
    (87) variable-initializer -> . array-initializer
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (83) array-initializer -> . BLOCK_BEGIN variable-initializer-list-opt BLOCK_END
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (108) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (104) prim-expression -> . IDENTIFIER
    (105) prim-expression -> . member-access
    (106) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (96) member-access -> . prim-expression DOT IDENTIFIER
    (102) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (103) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . parenthesized-expression
    (91) primary-no-array-creation-expression -> . member-access
    (92) primary-no-array-creation-expression -> . invocation-expression
    (93) primary-no-array-creation-expression -> . element-access
    (94) primary-no-array-creation-expression -> . object-creation-expression
    (223) literal -> . ICONST
    (224) literal -> . DCONST
    (225) literal -> . TRUE
    (226) literal -> . FALSE
    (95) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (107) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    BLOCK_BEGIN     shift and go to state 246
    IDENTIFIER      shift and go to state 83
    PLUS            shift and go to state 82
    MINUS           shift and go to state 74
    BITNOT          shift and go to state 99
    BITCOMP         shift and go to state 77
    TIMES           shift and go to state 87
    NEW             shift and go to state 72
    ICONST          shift and go to state 89
    DCONST          shift and go to state 100
    TRUE            shift and go to state 94
    FALSE           shift and go to state 93
    OPEN_PAREN      shift and go to state 79

    unary-expression               shift and go to state 91
    exclusive-or-expression        shift and go to state 68
    member-access                  shift and go to state 69
    relational-expression          shift and go to state 70
    additive-expression            shift and go to state 73
    primary-no-array-creation-expression shift and go to state 88
    array-initializer              shift and go to state 247
    inclusive-or-expression        shift and go to state 75
    prim-expression                shift and go to state 51
    element-access                 shift and go to state 78
    literal                        shift and go to state 86
    conditional-expression         shift and go to state 80
    conditional-and-expression     shift and go to state 81
    array-creation-expression      shift and go to state 71
    assignment                     shift and go to state 85
    variable-initializer           shift and go to state 248
    object-creation-expression     shift and go to state 90
    equality-expression            shift and go to state 76
    shift-expression               shift and go to state 95
    and-expression                 shift and go to state 96
    multiplicative-expression      shift and go to state 97
    expression                     shift and go to state 249
    primary-expression             shift and go to state 101
    invocation-expression          shift and go to state 102
    conditional-or-expression      shift and go to state 103
    parenthesized-expression       shift and go to state 104

state 197

    (195) do-statement -> DO M_quad block . WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM

    WHILE           shift and go to state 250


state 198

    (166) local-constant-declaration -> CONST type constant-declarators .
    (36) constant-declarators -> constant-declarators . COMMA constant-declarator

    DELIM           reduce using rule 166 (local-constant-declaration -> CONST type constant-declarators .)
    COMMA           shift and go to state 251


state 199

    (37) constant-declarator -> IDENTIFIER . ASSIGN expression

    ASSIGN          shift and go to state 252


state 200

    (35) constant-declarators -> constant-declarator .

    DELIM           reduce using rule 35 (constant-declarators -> constant-declarator .)
    COMMA           reduce using rule 35 (constant-declarators -> constant-declarator .)


state 201

    (142) block -> BLOCK_BEGIN M_bstart statement-list-opt . BLOCK_END

    BLOCK_END       shift and go to state 253


state 202

    (145) statement-list-opt -> empty .

    BLOCK_END       reduce using rule 145 (statement-list-opt -> empty .)


state 203

    (144) statement-list-opt -> statement-list .
    (147) statement-list -> statement-list . statement
    (148) statement -> . labeled-statement
    (149) statement -> . declaration-statement
    (150) statement -> . block
    (151) statement -> . empty-statement
    (152) statement -> . expression-statement
    (153) statement -> . selection-statement
    (154) statement -> . iteration-statement
    (155) statement -> . jump-statement
    (156) statement -> . write-statement
    (157) statement -> . read-statement
    (162) labeled-statement -> . IDENTIFIER COLON statement
    (163) declaration-statement -> . local-variable-declaration DELIM
    (164) declaration-statement -> . local-constant-declaration DELIM
    (142) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END
    (167) empty-statement -> . DELIM
    (168) expression-statement -> . statement-expression DELIM
    (172) selection-statement -> . if-statement M_quad
    (173) selection-statement -> . switch-statement
    (190) iteration-statement -> . while-statement M_quad
    (191) iteration-statement -> . for-statement M_quad
    (192) iteration-statement -> . do-statement M_quad
    (206) jump-statement -> . break-statement
    (207) jump-statement -> . continue-statement
    (208) jump-statement -> . goto-statement
    (209) jump-statement -> . return-statement
    (158) write-statement -> . CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM
    (161) read-statement -> . CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM
    (165) local-variable-declaration -> . type variable-declarators
    (166) local-constant-declaration -> . CONST type constant-declarators
    (169) statement-expression -> . invocation-expression
    (170) statement-expression -> . object-creation-expression
    (171) statement-expression -> . assignment
    (174) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block
    (175) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block
    (179) switch-statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block
    (193) while-statement -> . WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block
    (196) for-statement -> . FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block
    (195) do-statement -> . DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM
    (210) break-statement -> . BREAK DELIM
    (211) continue-statement -> . CONTINUE DELIM
    (212) goto-statement -> . GOTO IDENTIFIER DELIM
    (213) return-statement -> . RETURN expression-opt DELIM
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (107) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (108) assignment -> . prim-expression assignment-operator expression
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE
    (13) class-type -> . IDENTIFIER
    (34) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET
    (96) member-access -> . prim-expression DOT IDENTIFIER
    (104) prim-expression -> . IDENTIFIER
    (105) prim-expression -> . member-access
    (106) prim-expression -> . element-access
    (102) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (103) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET

    BLOCK_END       reduce using rule 144 (statement-list-opt -> statement-list .)
    IDENTIFIER      shift and go to state 37
    BLOCK_BEGIN     shift and go to state 50
    DELIM           shift and go to state 4
    CONSOLE         shift and go to state 54
    CONST           shift and go to state 49
    IF              shift and go to state 59
    SWITCH          shift and go to state 35
    WHILE           shift and go to state 31
    FOR             shift and go to state 21
    DO              shift and go to state 48
    BREAK           shift and go to state 43
    CONTINUE        shift and go to state 27
    GOTO            shift and go to state 7
    RETURN          shift and go to state 14
    NEW             shift and go to state 33
    BOOL            shift and go to state 44
    INT             shift and go to state 24
    UINT            shift and go to state 57
    CHAR            shift and go to state 30
    DOUBLE          shift and go to state 12

    return-statement               shift and go to state 16
    write-statement                shift and go to state 1
    member-access                  shift and go to state 2
    selection-statement            shift and go to state 29
    empty-statement                shift and go to state 32
    expression-statement           shift and go to state 3
    break-statement                shift and go to state 34
    prim-expression                shift and go to state 51
    element-access                 shift and go to state 18
    statement-expression           shift and go to state 5
    local-constant-declaration     shift and go to state 19
    statement                      shift and go to state 123
    assignment                     shift and go to state 55
    for-statement                  shift and go to state 6
    type                           shift and go to state 38
    read-statement                 shift and go to state 53
    do-statement                   shift and go to state 20
    array-type                     shift and go to state 40
    continue-statement             shift and go to state 22
    invocation-expression          shift and go to state 13
    labeled-statement              shift and go to state 8
    declaration-statement          shift and go to state 41
    object-creation-expression     shift and go to state 58
    switch-statement               shift and go to state 9
    jump-statement                 shift and go to state 10
    iteration-statement            shift and go to state 42
    local-variable-declaration     shift and go to state 23
    goto-statement                 shift and go to state 25
    if-statement                   shift and go to state 26
    class-type                     shift and go to state 60
    while-statement                shift and go to state 46
    simple-type                    shift and go to state 15
    block                          shift and go to state 28

state 204

    (108) assignment -> prim-expression assignment-operator expression .

    CLOSE_BRACKET   reduce using rule 108 (assignment -> prim-expression assignment-operator expression .)
    COMMA           reduce using rule 108 (assignment -> prim-expression assignment-operator expression .)
    CLOSE_PAREN     reduce using rule 108 (assignment -> prim-expression assignment-operator expression .)
    BLOCK_END       reduce using rule 108 (assignment -> prim-expression assignment-operator expression .)
    DELIM           reduce using rule 108 (assignment -> prim-expression assignment-operator expression .)
    COLON           reduce using rule 108 (assignment -> prim-expression assignment-operator expression .)


state 205

    (96) member-access -> prim-expression DOT IDENTIFIER .

    OPEN_PAREN      reduce using rule 96 (member-access -> prim-expression DOT IDENTIFIER .)
    OPEN_BRACKET    reduce using rule 96 (member-access -> prim-expression DOT IDENTIFIER .)
    TIMES           reduce using rule 96 (member-access -> prim-expression DOT IDENTIFIER .)
    DIV             reduce using rule 96 (member-access -> prim-expression DOT IDENTIFIER .)
    MOD             reduce using rule 96 (member-access -> prim-expression DOT IDENTIFIER .)
    PLUS            reduce using rule 96 (member-access -> prim-expression DOT IDENTIFIER .)
    MINUS           reduce using rule 96 (member-access -> prim-expression DOT IDENTIFIER .)
    LSHIFT          reduce using rule 96 (member-access -> prim-expression DOT IDENTIFIER .)
    RSHIFT          reduce using rule 96 (member-access -> prim-expression DOT IDENTIFIER .)
    LT              reduce using rule 96 (member-access -> prim-expression DOT IDENTIFIER .)
    GT              reduce using rule 96 (member-access -> prim-expression DOT IDENTIFIER .)
    LE              reduce using rule 96 (member-access -> prim-expression DOT IDENTIFIER .)
    GE              reduce using rule 96 (member-access -> prim-expression DOT IDENTIFIER .)
    EQ              reduce using rule 96 (member-access -> prim-expression DOT IDENTIFIER .)
    NE              reduce using rule 96 (member-access -> prim-expression DOT IDENTIFIER .)
    BITAND          reduce using rule 96 (member-access -> prim-expression DOT IDENTIFIER .)
    BITXOR          reduce using rule 96 (member-access -> prim-expression DOT IDENTIFIER .)
    BITOR           reduce using rule 96 (member-access -> prim-expression DOT IDENTIFIER .)
    LOGAND          reduce using rule 96 (member-access -> prim-expression DOT IDENTIFIER .)
    CONDOP          reduce using rule 96 (member-access -> prim-expression DOT IDENTIFIER .)
    LOGOR           reduce using rule 96 (member-access -> prim-expression DOT IDENTIFIER .)
    DELIM           reduce using rule 96 (member-access -> prim-expression DOT IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 96 (member-access -> prim-expression DOT IDENTIFIER .)
    COMMA           reduce using rule 96 (member-access -> prim-expression DOT IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 96 (member-access -> prim-expression DOT IDENTIFIER .)
    COLON           reduce using rule 96 (member-access -> prim-expression DOT IDENTIFIER .)
    BLOCK_END       reduce using rule 96 (member-access -> prim-expression DOT IDENTIFIER .)
    DOT             reduce using rule 96 (member-access -> prim-expression DOT IDENTIFIER .)
    ASSIGN          reduce using rule 96 (member-access -> prim-expression DOT IDENTIFIER .)
    PLUSEQUAL       reduce using rule 96 (member-access -> prim-expression DOT IDENTIFIER .)
    MINUSEQUAL      reduce using rule 96 (member-access -> prim-expression DOT IDENTIFIER .)
    TIMESEQUAL      reduce using rule 96 (member-access -> prim-expression DOT IDENTIFIER .)
    DIVEQUAL        reduce using rule 96 (member-access -> prim-expression DOT IDENTIFIER .)
    MODEQUAL        reduce using rule 96 (member-access -> prim-expression DOT IDENTIFIER .)
    BITANDEQUAL     reduce using rule 96 (member-access -> prim-expression DOT IDENTIFIER .)
    BITOREQUAL      reduce using rule 96 (member-access -> prim-expression DOT IDENTIFIER .)
    BITXOREQUAL     reduce using rule 96 (member-access -> prim-expression DOT IDENTIFIER .)
    LSHIFTEQUAL     reduce using rule 96 (member-access -> prim-expression DOT IDENTIFIER .)
    RSHIFTEQUAL     reduce using rule 96 (member-access -> prim-expression DOT IDENTIFIER .)


state 206

    (9) class-declaration -> CLASS IDENTIFIER class-base-opt . class-body semi-opt
    (14) class-body -> . BLOCK_BEGIN class-member-declarations-opt BLOCK_END

    BLOCK_BEGIN     shift and go to state 255

    class-body                     shift and go to state 254

state 207

    (10) class-base-opt -> class-base .

    BLOCK_BEGIN     reduce using rule 10 (class-base-opt -> class-base .)


state 208

    (12) class-base -> COLON . class-type
    (13) class-type -> . IDENTIFIER

    IDENTIFIER      shift and go to state 113

    class-type                     shift and go to state 256

state 209

    (11) class-base-opt -> empty .

    BLOCK_BEGIN     reduce using rule 11 (class-base-opt -> empty .)


state 210

    (158) write-statement -> CONSOLE DOT WRITELINE . OPEN_PAREN print-list CLOSE_PAREN DELIM

    OPEN_PAREN      shift and go to state 257


state 211

    (161) read-statement -> CONSOLE DOT READLINE . OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM

    OPEN_PAREN      shift and go to state 258


state 212

    (174) if-statement -> IF OPEN_PAREN expression . CLOSE_PAREN M_if block
    (175) if-statement -> IF OPEN_PAREN expression . CLOSE_PAREN M_if block ELSE M_else block

    CLOSE_PAREN     shift and go to state 259


state 213

    (103) element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .

    DOT             reduce using rule 103 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    ASSIGN          reduce using rule 103 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    PLUSEQUAL       reduce using rule 103 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    MINUSEQUAL      reduce using rule 103 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    TIMESEQUAL      reduce using rule 103 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    DIVEQUAL        reduce using rule 103 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    MODEQUAL        reduce using rule 103 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    BITANDEQUAL     reduce using rule 103 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    BITOREQUAL      reduce using rule 103 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    BITXOREQUAL     reduce using rule 103 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    LSHIFTEQUAL     reduce using rule 103 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    RSHIFTEQUAL     reduce using rule 103 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    TIMES           reduce using rule 103 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    DIV             reduce using rule 103 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    MOD             reduce using rule 103 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    PLUS            reduce using rule 103 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    MINUS           reduce using rule 103 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    LSHIFT          reduce using rule 103 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    RSHIFT          reduce using rule 103 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    LT              reduce using rule 103 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    GT              reduce using rule 103 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    LE              reduce using rule 103 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    GE              reduce using rule 103 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    EQ              reduce using rule 103 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    NE              reduce using rule 103 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    BITAND          reduce using rule 103 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    BITXOR          reduce using rule 103 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    BITOR           reduce using rule 103 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    LOGAND          reduce using rule 103 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    CONDOP          reduce using rule 103 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    LOGOR           reduce using rule 103 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    COMMA           reduce using rule 103 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    CLOSE_PAREN     reduce using rule 103 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    DELIM           reduce using rule 103 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 103 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    COLON           reduce using rule 103 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    BLOCK_END       reduce using rule 103 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)


state 214

    (82) expression-list -> expression-list COMMA . expression
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (108) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (104) prim-expression -> . IDENTIFIER
    (105) prim-expression -> . member-access
    (106) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (96) member-access -> . prim-expression DOT IDENTIFIER
    (102) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (103) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . parenthesized-expression
    (91) primary-no-array-creation-expression -> . member-access
    (92) primary-no-array-creation-expression -> . invocation-expression
    (93) primary-no-array-creation-expression -> . element-access
    (94) primary-no-array-creation-expression -> . object-creation-expression
    (223) literal -> . ICONST
    (224) literal -> . DCONST
    (225) literal -> . TRUE
    (226) literal -> . FALSE
    (95) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (107) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 83
    PLUS            shift and go to state 82
    MINUS           shift and go to state 74
    BITNOT          shift and go to state 99
    BITCOMP         shift and go to state 77
    TIMES           shift and go to state 87
    NEW             shift and go to state 72
    ICONST          shift and go to state 89
    DCONST          shift and go to state 100
    TRUE            shift and go to state 94
    FALSE           shift and go to state 93
    OPEN_PAREN      shift and go to state 79

    unary-expression               shift and go to state 91
    exclusive-or-expression        shift and go to state 68
    member-access                  shift and go to state 69
    relational-expression          shift and go to state 70
    additive-expression            shift and go to state 73
    primary-no-array-creation-expression shift and go to state 88
    inclusive-or-expression        shift and go to state 75
    equality-expression            shift and go to state 76
    prim-expression                shift and go to state 51
    element-access                 shift and go to state 78
    literal                        shift and go to state 86
    conditional-expression         shift and go to state 80
    conditional-and-expression     shift and go to state 81
    array-creation-expression      shift and go to state 71
    assignment                     shift and go to state 85
    object-creation-expression     shift and go to state 90
    shift-expression               shift and go to state 95
    and-expression                 shift and go to state 96
    multiplicative-expression      shift and go to state 97
    expression                     shift and go to state 260
    primary-expression             shift and go to state 101
    invocation-expression          shift and go to state 102
    conditional-or-expression      shift and go to state 103
    parenthesized-expression       shift and go to state 104

state 215

    (98) invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .

    TIMES           reduce using rule 98 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    DIV             reduce using rule 98 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    MOD             reduce using rule 98 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    PLUS            reduce using rule 98 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    MINUS           reduce using rule 98 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LSHIFT          reduce using rule 98 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    RSHIFT          reduce using rule 98 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LT              reduce using rule 98 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    GT              reduce using rule 98 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LE              reduce using rule 98 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    GE              reduce using rule 98 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    EQ              reduce using rule 98 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    NE              reduce using rule 98 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITAND          reduce using rule 98 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITXOR          reduce using rule 98 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITOR           reduce using rule 98 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LOGAND          reduce using rule 98 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    CONDOP          reduce using rule 98 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LOGOR           reduce using rule 98 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    DELIM           reduce using rule 98 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    CLOSE_BRACKET   reduce using rule 98 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    COMMA           reduce using rule 98 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 98 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    COLON           reduce using rule 98 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BLOCK_END       reduce using rule 98 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)


state 216

    (49) exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .
    (51) and-expression -> and-expression . BITAND equality-expression

    BITXOR          reduce using rule 49 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    BITOR           reduce using rule 49 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    LOGAND          reduce using rule 49 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    CONDOP          reduce using rule 49 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    LOGOR           reduce using rule 49 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    COLON           reduce using rule 49 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    COMMA           reduce using rule 49 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    DELIM           reduce using rule 49 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    CLOSE_BRACKET   reduce using rule 49 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    CLOSE_PAREN     reduce using rule 49 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    BLOCK_END       reduce using rule 49 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    BITAND          shift and go to state 175


state 217

    (58) relational-expression -> relational-expression LE shift-expression .
    (61) shift-expression -> shift-expression . LSHIFT additive-expression
    (62) shift-expression -> shift-expression . RSHIFT additive-expression

    LT              reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    GT              reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    LE              reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    GE              reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    EQ              reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    NE              reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    BITAND          reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    BITXOR          reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    BITOR           reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    LOGAND          reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    CONDOP          reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    LOGOR           reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    COMMA           reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    BLOCK_END       reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    DELIM           reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    CLOSE_BRACKET   reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    CLOSE_PAREN     reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    COLON           reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    LSHIFT          shift and go to state 174
    RSHIFT          shift and go to state 173


state 218

    (59) relational-expression -> relational-expression GE shift-expression .
    (61) shift-expression -> shift-expression . LSHIFT additive-expression
    (62) shift-expression -> shift-expression . RSHIFT additive-expression

    LT              reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    GT              reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    LE              reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    GE              reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    EQ              reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    NE              reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    BITAND          reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    BITXOR          reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    BITOR           reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    LOGAND          reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    CONDOP          reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    LOGOR           reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    COMMA           reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    BLOCK_END       reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    DELIM           reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    CLOSE_BRACKET   reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    CLOSE_PAREN     reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    COLON           reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    LSHIFT          shift and go to state 174
    RSHIFT          shift and go to state 173


state 219

    (56) relational-expression -> relational-expression LT shift-expression .
    (61) shift-expression -> shift-expression . LSHIFT additive-expression
    (62) shift-expression -> shift-expression . RSHIFT additive-expression

    LT              reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    GT              reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    LE              reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    GE              reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    EQ              reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    NE              reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    BITAND          reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    BITXOR          reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    BITOR           reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    LOGAND          reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    CONDOP          reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    LOGOR           reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    COMMA           reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    BLOCK_END       reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    DELIM           reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    CLOSE_BRACKET   reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    CLOSE_PAREN     reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    COLON           reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    LSHIFT          shift and go to state 174
    RSHIFT          shift and go to state 173


state 220

    (57) relational-expression -> relational-expression GT shift-expression .
    (61) shift-expression -> shift-expression . LSHIFT additive-expression
    (62) shift-expression -> shift-expression . RSHIFT additive-expression

    LT              reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    GT              reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    LE              reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    GE              reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    EQ              reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    NE              reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    BITAND          reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    BITXOR          reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    BITOR           reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    LOGAND          reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    CONDOP          reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    LOGOR           reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    COMMA           reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    BLOCK_END       reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    DELIM           reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    CLOSE_BRACKET   reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    CLOSE_PAREN     reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    COLON           reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    LSHIFT          shift and go to state 174
    RSHIFT          shift and go to state 173


state 221

    (78) array-creation-expression -> NEW simple-type OPEN_BRACKET . ICONST CLOSE_BRACKET array-initializer-opt
    (34) array-type -> simple-type OPEN_BRACKET . ICONST CLOSE_BRACKET

    ICONST          shift and go to state 261


state 222

    (64) additive-expression -> additive-expression PLUS multiplicative-expression .
    (67) multiplicative-expression -> multiplicative-expression . TIMES unary-expression
    (68) multiplicative-expression -> multiplicative-expression . DIV unary-expression
    (69) multiplicative-expression -> multiplicative-expression . MOD unary-expression

    PLUS            reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    MINUS           reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    LSHIFT          reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    RSHIFT          reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    LT              reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    GT              reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    LE              reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    GE              reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    EQ              reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    NE              reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    BITAND          reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    BITXOR          reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    BITOR           reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    LOGAND          reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    CONDOP          reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    LOGOR           reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    DELIM           reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    CLOSE_BRACKET   reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    COMMA           reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    CLOSE_PAREN     reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    COLON           reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    BLOCK_END       reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    TIMES           shift and go to state 178
    DIV             shift and go to state 176
    MOD             shift and go to state 177


state 223

    (65) additive-expression -> additive-expression MINUS multiplicative-expression .
    (67) multiplicative-expression -> multiplicative-expression . TIMES unary-expression
    (68) multiplicative-expression -> multiplicative-expression . DIV unary-expression
    (69) multiplicative-expression -> multiplicative-expression . MOD unary-expression

    PLUS            reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    MINUS           reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    LSHIFT          reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    RSHIFT          reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    LT              reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    GT              reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    LE              reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    GE              reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    EQ              reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    NE              reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    BITAND          reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    BITXOR          reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    BITOR           reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    LOGAND          reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    CONDOP          reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    LOGOR           reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    DELIM           reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    CLOSE_BRACKET   reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    COMMA           reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    CLOSE_PAREN     reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    COLON           reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    BLOCK_END       reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    TIMES           shift and go to state 178
    DIV             shift and go to state 176
    MOD             shift and go to state 177


state 224

    (47) inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .
    (49) exclusive-or-expression -> exclusive-or-expression . BITXOR and-expression

    BITOR           reduce using rule 47 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    LOGAND          reduce using rule 47 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    CONDOP          reduce using rule 47 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    LOGOR           reduce using rule 47 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    COMMA           reduce using rule 47 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    CLOSE_PAREN     reduce using rule 47 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    DELIM           reduce using rule 47 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    CLOSE_BRACKET   reduce using rule 47 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    COLON           reduce using rule 47 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    BLOCK_END       reduce using rule 47 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    BITXOR          shift and go to state 151


state 225

    (53) equality-expression -> equality-expression EQ relational-expression .
    (56) relational-expression -> relational-expression . LT shift-expression
    (57) relational-expression -> relational-expression . GT shift-expression
    (58) relational-expression -> relational-expression . LE shift-expression
    (59) relational-expression -> relational-expression . GE shift-expression

    EQ              reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    NE              reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    BITAND          reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    BITXOR          reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    BITOR           reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    LOGAND          reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    CONDOP          reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    LOGOR           reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    COMMA           reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    BLOCK_END       reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    CLOSE_PAREN     reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    DELIM           reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    CLOSE_BRACKET   reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    COLON           reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    LT              shift and go to state 154
    GT              shift and go to state 155
    LE              shift and go to state 152
    GE              shift and go to state 153


state 226

    (54) equality-expression -> equality-expression NE relational-expression .
    (56) relational-expression -> relational-expression . LT shift-expression
    (57) relational-expression -> relational-expression . GT shift-expression
    (58) relational-expression -> relational-expression . LE shift-expression
    (59) relational-expression -> relational-expression . GE shift-expression

    EQ              reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    NE              reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    BITAND          reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    BITXOR          reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    BITOR           reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    LOGAND          reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    CONDOP          reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    LOGOR           reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    COMMA           reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    BLOCK_END       reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    CLOSE_PAREN     reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    DELIM           reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    CLOSE_BRACKET   reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    COLON           reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    LT              shift and go to state 154
    GT              shift and go to state 155
    LE              shift and go to state 152
    GE              shift and go to state 153


state 227

    (95) parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .

    TIMES           reduce using rule 95 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    DIV             reduce using rule 95 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    MOD             reduce using rule 95 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    PLUS            reduce using rule 95 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    MINUS           reduce using rule 95 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    LSHIFT          reduce using rule 95 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    RSHIFT          reduce using rule 95 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    LT              reduce using rule 95 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    GT              reduce using rule 95 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    LE              reduce using rule 95 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    GE              reduce using rule 95 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    EQ              reduce using rule 95 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    NE              reduce using rule 95 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    BITAND          reduce using rule 95 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    BITXOR          reduce using rule 95 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    BITOR           reduce using rule 95 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    LOGAND          reduce using rule 95 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    CONDOP          reduce using rule 95 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    LOGOR           reduce using rule 95 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 95 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    DELIM           reduce using rule 95 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    CLOSE_BRACKET   reduce using rule 95 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    COMMA           reduce using rule 95 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    COLON           reduce using rule 95 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    BLOCK_END       reduce using rule 95 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)


state 228

    (45) conditional-and-expression -> conditional-and-expression LOGAND inclusive-or-expression .
    (47) inclusive-or-expression -> inclusive-or-expression . BITOR exclusive-or-expression

    LOGAND          reduce using rule 45 (conditional-and-expression -> conditional-and-expression LOGAND inclusive-or-expression .)
    CONDOP          reduce using rule 45 (conditional-and-expression -> conditional-and-expression LOGAND inclusive-or-expression .)
    LOGOR           reduce using rule 45 (conditional-and-expression -> conditional-and-expression LOGAND inclusive-or-expression .)
    COMMA           reduce using rule 45 (conditional-and-expression -> conditional-and-expression LOGAND inclusive-or-expression .)
    CLOSE_PAREN     reduce using rule 45 (conditional-and-expression -> conditional-and-expression LOGAND inclusive-or-expression .)
    COLON           reduce using rule 45 (conditional-and-expression -> conditional-and-expression LOGAND inclusive-or-expression .)
    DELIM           reduce using rule 45 (conditional-and-expression -> conditional-and-expression LOGAND inclusive-or-expression .)
    CLOSE_BRACKET   reduce using rule 45 (conditional-and-expression -> conditional-and-expression LOGAND inclusive-or-expression .)
    BLOCK_END       reduce using rule 45 (conditional-and-expression -> conditional-and-expression LOGAND inclusive-or-expression .)
    BITOR           shift and go to state 164


state 229

    (62) shift-expression -> shift-expression RSHIFT additive-expression .
    (64) additive-expression -> additive-expression . PLUS multiplicative-expression
    (65) additive-expression -> additive-expression . MINUS multiplicative-expression

    LSHIFT          reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    RSHIFT          reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    LT              reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    GT              reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    LE              reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    GE              reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    EQ              reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    NE              reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    BITAND          reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    BITXOR          reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    BITOR           reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    LOGAND          reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    CONDOP          reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    LOGOR           reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    CLOSE_PAREN     reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    DELIM           reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    CLOSE_BRACKET   reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    COMMA           reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    COLON           reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    BLOCK_END       reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    PLUS            shift and go to state 157
    MINUS           shift and go to state 158


state 230

    (61) shift-expression -> shift-expression LSHIFT additive-expression .
    (64) additive-expression -> additive-expression . PLUS multiplicative-expression
    (65) additive-expression -> additive-expression . MINUS multiplicative-expression

    LSHIFT          reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    RSHIFT          reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    LT              reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    GT              reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    LE              reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    GE              reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    EQ              reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    NE              reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    BITAND          reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    BITXOR          reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    BITOR           reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    LOGAND          reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    CONDOP          reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    LOGOR           reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    CLOSE_PAREN     reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    DELIM           reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    CLOSE_BRACKET   reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    COMMA           reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    COLON           reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    BLOCK_END       reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    PLUS            shift and go to state 157
    MINUS           shift and go to state 158


state 231

    (51) and-expression -> and-expression BITAND equality-expression .
    (53) equality-expression -> equality-expression . EQ relational-expression
    (54) equality-expression -> equality-expression . NE relational-expression

    BITAND          reduce using rule 51 (and-expression -> and-expression BITAND equality-expression .)
    BITXOR          reduce using rule 51 (and-expression -> and-expression BITAND equality-expression .)
    BITOR           reduce using rule 51 (and-expression -> and-expression BITAND equality-expression .)
    LOGAND          reduce using rule 51 (and-expression -> and-expression BITAND equality-expression .)
    CONDOP          reduce using rule 51 (and-expression -> and-expression BITAND equality-expression .)
    LOGOR           reduce using rule 51 (and-expression -> and-expression BITAND equality-expression .)
    DELIM           reduce using rule 51 (and-expression -> and-expression BITAND equality-expression .)
    CLOSE_BRACKET   reduce using rule 51 (and-expression -> and-expression BITAND equality-expression .)
    COMMA           reduce using rule 51 (and-expression -> and-expression BITAND equality-expression .)
    CLOSE_PAREN     reduce using rule 51 (and-expression -> and-expression BITAND equality-expression .)
    COLON           reduce using rule 51 (and-expression -> and-expression BITAND equality-expression .)
    BLOCK_END       reduce using rule 51 (and-expression -> and-expression BITAND equality-expression .)
    EQ              shift and go to state 165
    NE              shift and go to state 166


state 232

    (68) multiplicative-expression -> multiplicative-expression DIV unary-expression .

    TIMES           reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    DIV             reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    MOD             reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    PLUS            reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    MINUS           reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    LSHIFT          reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    RSHIFT          reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    LT              reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    GT              reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    LE              reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    GE              reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    EQ              reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    NE              reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    BITAND          reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    BITXOR          reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    BITOR           reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    LOGAND          reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    CONDOP          reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    LOGOR           reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    DELIM           reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    CLOSE_BRACKET   reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    COMMA           reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    CLOSE_PAREN     reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    COLON           reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    BLOCK_END       reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)


state 233

    (69) multiplicative-expression -> multiplicative-expression MOD unary-expression .

    TIMES           reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    DIV             reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    MOD             reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    PLUS            reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    MINUS           reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    LSHIFT          reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    RSHIFT          reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    LT              reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    GT              reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    LE              reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    GE              reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    EQ              reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    NE              reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    BITAND          reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    BITXOR          reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    BITOR           reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    LOGAND          reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    CONDOP          reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    LOGOR           reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    DELIM           reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    CLOSE_BRACKET   reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    COMMA           reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    CLOSE_PAREN     reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    COLON           reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    BLOCK_END       reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)


state 234

    (67) multiplicative-expression -> multiplicative-expression TIMES unary-expression .

    TIMES           reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    DIV             reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    MOD             reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    PLUS            reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    MINUS           reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    LSHIFT          reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    RSHIFT          reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    LT              reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    GT              reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    LE              reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    GE              reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    EQ              reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    NE              reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    BITAND          reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    BITXOR          reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    BITOR           reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    LOGAND          reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    CONDOP          reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    LOGOR           reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    DELIM           reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    CLOSE_BRACKET   reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    COMMA           reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    CLOSE_PAREN     reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    COLON           reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    BLOCK_END       reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)


state 235

    (43) conditional-or-expression -> conditional-or-expression LOGOR conditional-and-expression .
    (45) conditional-and-expression -> conditional-and-expression . LOGAND inclusive-or-expression

    CONDOP          reduce using rule 43 (conditional-or-expression -> conditional-or-expression LOGOR conditional-and-expression .)
    LOGOR           reduce using rule 43 (conditional-or-expression -> conditional-or-expression LOGOR conditional-and-expression .)
    COMMA           reduce using rule 43 (conditional-or-expression -> conditional-or-expression LOGOR conditional-and-expression .)
    BLOCK_END       reduce using rule 43 (conditional-or-expression -> conditional-or-expression LOGOR conditional-and-expression .)
    DELIM           reduce using rule 43 (conditional-or-expression -> conditional-or-expression LOGOR conditional-and-expression .)
    CLOSE_PAREN     reduce using rule 43 (conditional-or-expression -> conditional-or-expression LOGOR conditional-and-expression .)
    CLOSE_BRACKET   reduce using rule 43 (conditional-or-expression -> conditional-or-expression LOGOR conditional-and-expression .)
    COLON           reduce using rule 43 (conditional-or-expression -> conditional-or-expression LOGOR conditional-and-expression .)
    LOGAND          shift and go to state 169


state 236

    (41) conditional-expression -> conditional-or-expression CONDOP expression . COLON expression

    COLON           shift and go to state 262


state 237

    (34) array-type -> simple-type OPEN_BRACKET ICONST CLOSE_BRACKET .

    IDENTIFIER      reduce using rule 34 (array-type -> simple-type OPEN_BRACKET ICONST CLOSE_BRACKET .)
    OPEN_PAREN      reduce using rule 34 (array-type -> simple-type OPEN_BRACKET ICONST CLOSE_BRACKET .)


state 238

    (205) statement-expression-list -> statement-expression-list COMMA . statement-expression
    (169) statement-expression -> . invocation-expression
    (170) statement-expression -> . object-creation-expression
    (171) statement-expression -> . assignment
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (107) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (108) assignment -> . prim-expression assignment-operator expression
    (96) member-access -> . prim-expression DOT IDENTIFIER
    (104) prim-expression -> . IDENTIFIER
    (105) prim-expression -> . member-access
    (106) prim-expression -> . element-access
    (102) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (103) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET

    IDENTIFIER      shift and go to state 186
    NEW             shift and go to state 33

    assignment                     shift and go to state 55
    prim-expression                shift and go to state 51
    member-access                  shift and go to state 2
    element-access                 shift and go to state 18
    statement-expression           shift and go to state 263
    object-creation-expression     shift and go to state 58
    invocation-expression          shift and go to state 13

state 239

    (196) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM . M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block
    (178) M_quad -> . empty
    (227) empty -> .

    IDENTIFIER      reduce using rule 227 (empty -> .)
    PLUS            reduce using rule 227 (empty -> .)
    MINUS           reduce using rule 227 (empty -> .)
    BITNOT          reduce using rule 227 (empty -> .)
    BITCOMP         reduce using rule 227 (empty -> .)
    TIMES           reduce using rule 227 (empty -> .)
    NEW             reduce using rule 227 (empty -> .)
    ICONST          reduce using rule 227 (empty -> .)
    DCONST          reduce using rule 227 (empty -> .)
    TRUE            reduce using rule 227 (empty -> .)
    FALSE           reduce using rule 227 (empty -> .)
    OPEN_PAREN      reduce using rule 227 (empty -> .)

    M_quad                         shift and go to state 264
    empty                          shift and go to state 65

state 240

    (193) while-statement -> WHILE M_quad OPEN_PAREN expression . CLOSE_PAREN M_while block

    CLOSE_PAREN     shift and go to state 265


state 241

    (107) object-creation-expression -> NEW type OPEN_PAREN argument-list-opt . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 266


state 242

    (179) switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN . switch-block
    (180) switch-block -> . BLOCK_BEGIN switch-sections-opt BLOCK_END

    BLOCK_BEGIN     shift and go to state 267

    switch-block                   shift and go to state 268

state 243

    (102) element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .

    DOT             reduce using rule 102 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    ASSIGN          reduce using rule 102 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    PLUSEQUAL       reduce using rule 102 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    MINUSEQUAL      reduce using rule 102 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    TIMESEQUAL      reduce using rule 102 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    DIVEQUAL        reduce using rule 102 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    MODEQUAL        reduce using rule 102 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    BITANDEQUAL     reduce using rule 102 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    BITOREQUAL      reduce using rule 102 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    BITXOREQUAL     reduce using rule 102 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    LSHIFTEQUAL     reduce using rule 102 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    RSHIFTEQUAL     reduce using rule 102 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    TIMES           reduce using rule 102 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    DIV             reduce using rule 102 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    MOD             reduce using rule 102 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    PLUS            reduce using rule 102 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    MINUS           reduce using rule 102 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    LSHIFT          reduce using rule 102 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    RSHIFT          reduce using rule 102 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    LT              reduce using rule 102 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    GT              reduce using rule 102 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    LE              reduce using rule 102 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    GE              reduce using rule 102 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    EQ              reduce using rule 102 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    NE              reduce using rule 102 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    BITAND          reduce using rule 102 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    BITXOR          reduce using rule 102 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    BITOR           reduce using rule 102 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    LOGAND          reduce using rule 102 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    CONDOP          reduce using rule 102 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    LOGOR           reduce using rule 102 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    COMMA           reduce using rule 102 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    CLOSE_PAREN     reduce using rule 102 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    DELIM           reduce using rule 102 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 102 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    COLON           reduce using rule 102 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    BLOCK_END       reduce using rule 102 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)


state 244

    (97) invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .

    TIMES           reduce using rule 97 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    DIV             reduce using rule 97 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    MOD             reduce using rule 97 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    PLUS            reduce using rule 97 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    MINUS           reduce using rule 97 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LSHIFT          reduce using rule 97 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    RSHIFT          reduce using rule 97 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LT              reduce using rule 97 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    GT              reduce using rule 97 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LE              reduce using rule 97 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    GE              reduce using rule 97 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    EQ              reduce using rule 97 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    NE              reduce using rule 97 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITAND          reduce using rule 97 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITXOR          reduce using rule 97 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITOR           reduce using rule 97 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LOGAND          reduce using rule 97 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    CONDOP          reduce using rule 97 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LOGOR           reduce using rule 97 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    DELIM           reduce using rule 97 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    CLOSE_BRACKET   reduce using rule 97 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    COMMA           reduce using rule 97 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 97 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    COLON           reduce using rule 97 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BLOCK_END       reduce using rule 97 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)


state 245

    (125) variable-declarators -> variable-declarators COMMA variable-declarator .

    COMMA           reduce using rule 125 (variable-declarators -> variable-declarators COMMA variable-declarator .)
    DELIM           reduce using rule 125 (variable-declarators -> variable-declarators COMMA variable-declarator .)


state 246

    (83) array-initializer -> BLOCK_BEGIN . variable-initializer-list-opt BLOCK_END
    (84) variable-initializer-list-opt -> . expression-list
    (85) variable-initializer-list-opt -> . empty
    (81) expression-list -> . expression
    (82) expression-list -> . expression-list COMMA expression
    (227) empty -> .
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (108) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (104) prim-expression -> . IDENTIFIER
    (105) prim-expression -> . member-access
    (106) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (96) member-access -> . prim-expression DOT IDENTIFIER
    (102) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (103) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . parenthesized-expression
    (91) primary-no-array-creation-expression -> . member-access
    (92) primary-no-array-creation-expression -> . invocation-expression
    (93) primary-no-array-creation-expression -> . element-access
    (94) primary-no-array-creation-expression -> . object-creation-expression
    (223) literal -> . ICONST
    (224) literal -> . DCONST
    (225) literal -> . TRUE
    (226) literal -> . FALSE
    (95) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (107) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    BLOCK_END       reduce using rule 227 (empty -> .)
    IDENTIFIER      shift and go to state 83
    PLUS            shift and go to state 82
    MINUS           shift and go to state 74
    BITNOT          shift and go to state 99
    BITCOMP         shift and go to state 77
    TIMES           shift and go to state 87
    NEW             shift and go to state 72
    ICONST          shift and go to state 89
    DCONST          shift and go to state 100
    TRUE            shift and go to state 94
    FALSE           shift and go to state 93
    OPEN_PAREN      shift and go to state 79

    unary-expression               shift and go to state 91
    exclusive-or-expression        shift and go to state 68
    member-access                  shift and go to state 69
    relational-expression          shift and go to state 70
    additive-expression            shift and go to state 73
    primary-no-array-creation-expression shift and go to state 88
    inclusive-or-expression        shift and go to state 75
    expression-list                shift and go to state 271
    prim-expression                shift and go to state 51
    element-access                 shift and go to state 78
    literal                        shift and go to state 86
    conditional-expression         shift and go to state 80
    conditional-and-expression     shift and go to state 81
    variable-initializer-list-opt  shift and go to state 270
    empty                          shift and go to state 269
    array-creation-expression      shift and go to state 71
    assignment                     shift and go to state 85
    object-creation-expression     shift and go to state 90
    equality-expression            shift and go to state 76
    shift-expression               shift and go to state 95
    and-expression                 shift and go to state 96
    multiplicative-expression      shift and go to state 97
    expression                     shift and go to state 146
    primary-expression             shift and go to state 101
    invocation-expression          shift and go to state 102
    conditional-or-expression      shift and go to state 103
    parenthesized-expression       shift and go to state 104

state 247

    (87) variable-initializer -> array-initializer .

    COMMA           reduce using rule 87 (variable-initializer -> array-initializer .)
    DELIM           reduce using rule 87 (variable-initializer -> array-initializer .)


state 248

    (127) variable-declarator -> IDENTIFIER ASSIGN variable-initializer .

    DELIM           reduce using rule 127 (variable-declarator -> IDENTIFIER ASSIGN variable-initializer .)
    COMMA           reduce using rule 127 (variable-declarator -> IDENTIFIER ASSIGN variable-initializer .)


state 249

    (86) variable-initializer -> expression .

    COMMA           reduce using rule 86 (variable-initializer -> expression .)
    DELIM           reduce using rule 86 (variable-initializer -> expression .)


state 250

    (195) do-statement -> DO M_quad block WHILE . OPEN_PAREN M_quad expression CLOSE_PAREN DELIM

    OPEN_PAREN      shift and go to state 272


state 251

    (36) constant-declarators -> constant-declarators COMMA . constant-declarator
    (37) constant-declarator -> . IDENTIFIER ASSIGN expression

    IDENTIFIER      shift and go to state 199

    constant-declarator            shift and go to state 273

state 252

    (37) constant-declarator -> IDENTIFIER ASSIGN . expression
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (108) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (104) prim-expression -> . IDENTIFIER
    (105) prim-expression -> . member-access
    (106) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (96) member-access -> . prim-expression DOT IDENTIFIER
    (102) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (103) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . parenthesized-expression
    (91) primary-no-array-creation-expression -> . member-access
    (92) primary-no-array-creation-expression -> . invocation-expression
    (93) primary-no-array-creation-expression -> . element-access
    (94) primary-no-array-creation-expression -> . object-creation-expression
    (223) literal -> . ICONST
    (224) literal -> . DCONST
    (225) literal -> . TRUE
    (226) literal -> . FALSE
    (95) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (107) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 83
    PLUS            shift and go to state 82
    MINUS           shift and go to state 74
    BITNOT          shift and go to state 99
    BITCOMP         shift and go to state 77
    TIMES           shift and go to state 87
    NEW             shift and go to state 72
    ICONST          shift and go to state 89
    DCONST          shift and go to state 100
    TRUE            shift and go to state 94
    FALSE           shift and go to state 93
    OPEN_PAREN      shift and go to state 79

    unary-expression               shift and go to state 91
    exclusive-or-expression        shift and go to state 68
    member-access                  shift and go to state 69
    relational-expression          shift and go to state 70
    additive-expression            shift and go to state 73
    primary-no-array-creation-expression shift and go to state 88
    inclusive-or-expression        shift and go to state 75
    prim-expression                shift and go to state 51
    element-access                 shift and go to state 78
    literal                        shift and go to state 86
    conditional-expression         shift and go to state 80
    conditional-and-expression     shift and go to state 81
    array-creation-expression      shift and go to state 71
    assignment                     shift and go to state 85
    object-creation-expression     shift and go to state 90
    equality-expression            shift and go to state 76
    shift-expression               shift and go to state 95
    and-expression                 shift and go to state 96
    multiplicative-expression      shift and go to state 97
    conditional-or-expression      shift and go to state 103
    primary-expression             shift and go to state 101
    invocation-expression          shift and go to state 102
    expression                     shift and go to state 274
    parenthesized-expression       shift and go to state 104

state 253

    (142) block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .

    IDENTIFIER      reduce using rule 142 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    BLOCK_BEGIN     reduce using rule 142 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    DELIM           reduce using rule 142 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    CONSOLE         reduce using rule 142 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    CONST           reduce using rule 142 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    IF              reduce using rule 142 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    SWITCH          reduce using rule 142 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    WHILE           reduce using rule 142 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    FOR             reduce using rule 142 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    DO              reduce using rule 142 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    BREAK           reduce using rule 142 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    CONTINUE        reduce using rule 142 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    GOTO            reduce using rule 142 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    RETURN          reduce using rule 142 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    NEW             reduce using rule 142 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    BOOL            reduce using rule 142 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    INT             reduce using rule 142 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    UINT            reduce using rule 142 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    CHAR            reduce using rule 142 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    DOUBLE          reduce using rule 142 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    $end            reduce using rule 142 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    BLOCK_END       reduce using rule 142 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    CASE            reduce using rule 142 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    DEFAULT         reduce using rule 142 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    BITCOMP         reduce using rule 142 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    PUBLIC          reduce using rule 142 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    PRIVATE         reduce using rule 142 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    VOID            reduce using rule 142 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    ELSE            reduce using rule 142 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)


state 254

    (9) class-declaration -> CLASS IDENTIFIER class-base-opt class-body . semi-opt
    (3) semi-opt -> . DELIM
    (4) semi-opt -> . empty
    (227) empty -> .

    DELIM           shift and go to state 275
    CLASS           reduce using rule 227 (empty -> .)
    $end            reduce using rule 227 (empty -> .)

    semi-opt                       shift and go to state 276
    empty                          shift and go to state 277

state 255

    (14) class-body -> BLOCK_BEGIN . class-member-declarations-opt BLOCK_END
    (15) class-member-declarations-opt -> . class-member-declarations
    (16) class-member-declarations-opt -> . empty
    (17) class-member-declarations -> . class-member-declaration
    (18) class-member-declarations -> . class-member-declarations class-member-declaration
    (227) empty -> .
    (19) class-member-declaration -> . constant-declaration
    (20) class-member-declaration -> . field-declaration
    (21) class-member-declaration -> . method-declaration
    (22) class-member-declaration -> . constructor-declaration
    (23) class-member-declaration -> . destructor-declaration
    (24) constant-declaration -> . modifier CONST simple-type constant-declarators DELIM
    (25) constant-declaration -> . CONST simple-type constant-declarators DELIM
    (120) field-declaration -> . modifier type variable-declarators DELIM
    (121) field-declaration -> . type variable-declarators DELIM
    (128) method-declaration -> . method-header method-body
    (216) constructor-declaration -> . constructor-declarator constructor-body
    (220) destructor-declaration -> . BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body
    (122) modifier -> . PUBLIC
    (123) modifier -> . PRIVATE
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (129) method-header -> . modifier type member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (130) method-header -> . modifier VOID member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (131) method-header -> . type member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (132) method-header -> . VOID member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (217) constructor-declarator -> . IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE
    (13) class-type -> . IDENTIFIER
    (34) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET

    BLOCK_END       reduce using rule 227 (empty -> .)
    CONST           shift and go to state 280
    BITCOMP         shift and go to state 282
    PUBLIC          shift and go to state 296
    PRIVATE         shift and go to state 281
    VOID            shift and go to state 279
    IDENTIFIER      shift and go to state 291
    BOOL            shift and go to state 44
    INT             shift and go to state 24
    UINT            shift and go to state 57
    CHAR            shift and go to state 30
    DOUBLE          shift and go to state 12

    method-header                  shift and go to state 278
    class-member-declaration       shift and go to state 294
    method-declaration             shift and go to state 283
    class-member-declarations-opt  shift and go to state 288
    type                           shift and go to state 286
    empty                          shift and go to state 287
    array-type                     shift and go to state 40
    field-declaration              shift and go to state 284
    constructor-declaration        shift and go to state 289
    class-member-declarations      shift and go to state 290
    constant-declaration           shift and go to state 285
    destructor-declaration         shift and go to state 292
    constructor-declarator         shift and go to state 293
    class-type                     shift and go to state 60
    simple-type                    shift and go to state 15
    modifier                       shift and go to state 295

state 256

    (12) class-base -> COLON class-type .

    BLOCK_BEGIN     reduce using rule 12 (class-base -> COLON class-type .)


state 257

    (158) write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN . print-list CLOSE_PAREN DELIM
    (159) print-list -> . expression
    (160) print-list -> . expression COMMA print-list
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (108) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (104) prim-expression -> . IDENTIFIER
    (105) prim-expression -> . member-access
    (106) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (96) member-access -> . prim-expression DOT IDENTIFIER
    (102) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (103) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . parenthesized-expression
    (91) primary-no-array-creation-expression -> . member-access
    (92) primary-no-array-creation-expression -> . invocation-expression
    (93) primary-no-array-creation-expression -> . element-access
    (94) primary-no-array-creation-expression -> . object-creation-expression
    (223) literal -> . ICONST
    (224) literal -> . DCONST
    (225) literal -> . TRUE
    (226) literal -> . FALSE
    (95) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (107) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 83
    PLUS            shift and go to state 82
    MINUS           shift and go to state 74
    BITNOT          shift and go to state 99
    BITCOMP         shift and go to state 77
    TIMES           shift and go to state 87
    NEW             shift and go to state 72
    ICONST          shift and go to state 89
    DCONST          shift and go to state 100
    TRUE            shift and go to state 94
    FALSE           shift and go to state 93
    OPEN_PAREN      shift and go to state 79

    unary-expression               shift and go to state 91
    exclusive-or-expression        shift and go to state 68
    member-access                  shift and go to state 69
    relational-expression          shift and go to state 70
    additive-expression            shift and go to state 73
    primary-no-array-creation-expression shift and go to state 88
    inclusive-or-expression        shift and go to state 75
    prim-expression                shift and go to state 51
    element-access                 shift and go to state 78
    literal                        shift and go to state 86
    conditional-expression         shift and go to state 80
    conditional-and-expression     shift and go to state 81
    array-creation-expression      shift and go to state 71
    assignment                     shift and go to state 85
    object-creation-expression     shift and go to state 90
    and-expression                 shift and go to state 96
    equality-expression            shift and go to state 76
    shift-expression               shift and go to state 95
    print-list                     shift and go to state 297
    multiplicative-expression      shift and go to state 97
    expression                     shift and go to state 298
    primary-expression             shift and go to state 101
    invocation-expression          shift and go to state 102
    conditional-or-expression      shift and go to state 103
    parenthesized-expression       shift and go to state 104

state 258

    (161) read-statement -> CONSOLE DOT READLINE OPEN_PAREN . IDENTIFIER CLOSE_PAREN DELIM

    IDENTIFIER      shift and go to state 299


state 259

    (174) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN . M_if block
    (175) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN . M_if block ELSE M_else block
    (176) M_if -> . empty
    (227) empty -> .

    BLOCK_BEGIN     reduce using rule 227 (empty -> .)

    M_if                           shift and go to state 300
    empty                          shift and go to state 301

state 260

    (82) expression-list -> expression-list COMMA expression .

    COMMA           reduce using rule 82 (expression-list -> expression-list COMMA expression .)
    CLOSE_PAREN     reduce using rule 82 (expression-list -> expression-list COMMA expression .)
    CLOSE_BRACKET   reduce using rule 82 (expression-list -> expression-list COMMA expression .)
    BLOCK_END       reduce using rule 82 (expression-list -> expression-list COMMA expression .)


state 261

    (78) array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST . CLOSE_BRACKET array-initializer-opt
    (34) array-type -> simple-type OPEN_BRACKET ICONST . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 302


state 262

    (41) conditional-expression -> conditional-or-expression CONDOP expression COLON . expression
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (108) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (104) prim-expression -> . IDENTIFIER
    (105) prim-expression -> . member-access
    (106) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (96) member-access -> . prim-expression DOT IDENTIFIER
    (102) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (103) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . parenthesized-expression
    (91) primary-no-array-creation-expression -> . member-access
    (92) primary-no-array-creation-expression -> . invocation-expression
    (93) primary-no-array-creation-expression -> . element-access
    (94) primary-no-array-creation-expression -> . object-creation-expression
    (223) literal -> . ICONST
    (224) literal -> . DCONST
    (225) literal -> . TRUE
    (226) literal -> . FALSE
    (95) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (107) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 83
    PLUS            shift and go to state 82
    MINUS           shift and go to state 74
    BITNOT          shift and go to state 99
    BITCOMP         shift and go to state 77
    TIMES           shift and go to state 87
    NEW             shift and go to state 72
    ICONST          shift and go to state 89
    DCONST          shift and go to state 100
    TRUE            shift and go to state 94
    FALSE           shift and go to state 93
    OPEN_PAREN      shift and go to state 79

    unary-expression               shift and go to state 91
    exclusive-or-expression        shift and go to state 68
    member-access                  shift and go to state 69
    relational-expression          shift and go to state 70
    additive-expression            shift and go to state 73
    primary-no-array-creation-expression shift and go to state 88
    inclusive-or-expression        shift and go to state 75
    prim-expression                shift and go to state 51
    element-access                 shift and go to state 78
    literal                        shift and go to state 86
    conditional-expression         shift and go to state 80
    conditional-and-expression     shift and go to state 81
    array-creation-expression      shift and go to state 71
    assignment                     shift and go to state 85
    object-creation-expression     shift and go to state 90
    equality-expression            shift and go to state 76
    shift-expression               shift and go to state 95
    and-expression                 shift and go to state 96
    multiplicative-expression      shift and go to state 97
    expression                     shift and go to state 303
    primary-expression             shift and go to state 101
    invocation-expression          shift and go to state 102
    conditional-or-expression      shift and go to state 103
    parenthesized-expression       shift and go to state 104

state 263

    (205) statement-expression-list -> statement-expression-list COMMA statement-expression .

    COMMA           reduce using rule 205 (statement-expression-list -> statement-expression-list COMMA statement-expression .)
    DELIM           reduce using rule 205 (statement-expression-list -> statement-expression-list COMMA statement-expression .)
    CLOSE_PAREN     reduce using rule 205 (statement-expression-list -> statement-expression-list COMMA statement-expression .)


state 264

    (196) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad . for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block
    (200) for-condition -> . expression
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (108) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (104) prim-expression -> . IDENTIFIER
    (105) prim-expression -> . member-access
    (106) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (96) member-access -> . prim-expression DOT IDENTIFIER
    (102) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (103) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . parenthesized-expression
    (91) primary-no-array-creation-expression -> . member-access
    (92) primary-no-array-creation-expression -> . invocation-expression
    (93) primary-no-array-creation-expression -> . element-access
    (94) primary-no-array-creation-expression -> . object-creation-expression
    (223) literal -> . ICONST
    (224) literal -> . DCONST
    (225) literal -> . TRUE
    (226) literal -> . FALSE
    (95) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (107) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 83
    PLUS            shift and go to state 82
    MINUS           shift and go to state 74
    BITNOT          shift and go to state 99
    BITCOMP         shift and go to state 77
    TIMES           shift and go to state 87
    NEW             shift and go to state 72
    ICONST          shift and go to state 89
    DCONST          shift and go to state 100
    TRUE            shift and go to state 94
    FALSE           shift and go to state 93
    OPEN_PAREN      shift and go to state 79

    unary-expression               shift and go to state 91
    exclusive-or-expression        shift and go to state 68
    member-access                  shift and go to state 69
    relational-expression          shift and go to state 70
    additive-expression            shift and go to state 73
    primary-no-array-creation-expression shift and go to state 88
    for-condition                  shift and go to state 304
    prim-expression                shift and go to state 51
    element-access                 shift and go to state 78
    literal                        shift and go to state 86
    conditional-expression         shift and go to state 80
    assignment                     shift and go to state 85
    array-creation-expression      shift and go to state 71
    conditional-and-expression     shift and go to state 81
    object-creation-expression     shift and go to state 90
    equality-expression            shift and go to state 76
    shift-expression               shift and go to state 95
    and-expression                 shift and go to state 96
    multiplicative-expression      shift and go to state 97
    expression                     shift and go to state 305
    parenthesized-expression       shift and go to state 104
    inclusive-or-expression        shift and go to state 75
    primary-expression             shift and go to state 101
    invocation-expression          shift and go to state 102
    conditional-or-expression      shift and go to state 103

state 265

    (193) while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN . M_while block
    (194) M_while -> . empty
    (227) empty -> .

    BLOCK_BEGIN     reduce using rule 227 (empty -> .)

    M_while                        shift and go to state 306
    empty                          shift and go to state 307

state 266

    (107) object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .

    TIMES           reduce using rule 107 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    DIV             reduce using rule 107 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    MOD             reduce using rule 107 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    PLUS            reduce using rule 107 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    MINUS           reduce using rule 107 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LSHIFT          reduce using rule 107 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    RSHIFT          reduce using rule 107 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LT              reduce using rule 107 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    GT              reduce using rule 107 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LE              reduce using rule 107 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    GE              reduce using rule 107 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    EQ              reduce using rule 107 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    NE              reduce using rule 107 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITAND          reduce using rule 107 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITXOR          reduce using rule 107 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITOR           reduce using rule 107 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LOGAND          reduce using rule 107 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    CONDOP          reduce using rule 107 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LOGOR           reduce using rule 107 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    DELIM           reduce using rule 107 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    CLOSE_BRACKET   reduce using rule 107 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    COMMA           reduce using rule 107 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 107 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    COLON           reduce using rule 107 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BLOCK_END       reduce using rule 107 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)


state 267

    (180) switch-block -> BLOCK_BEGIN . switch-sections-opt BLOCK_END
    (181) switch-sections-opt -> . switch-sections
    (182) switch-sections-opt -> . empty
    (183) switch-sections -> . switch-section
    (184) switch-sections -> . switch-sections switch-section
    (227) empty -> .
    (185) switch-section -> . switch-labels statement-list
    (186) switch-labels -> . switch-label
    (187) switch-labels -> . switch-labels switch-label
    (188) switch-label -> . CASE expression COLON
    (189) switch-label -> . DEFAULT COLON

    BLOCK_END       reduce using rule 227 (empty -> .)
    CASE            shift and go to state 308
    DEFAULT         shift and go to state 309

    switch-sections-opt            shift and go to state 312
    switch-section                 shift and go to state 310
    switch-labels                  shift and go to state 311
    switch-sections                shift and go to state 313
    empty                          shift and go to state 314
    switch-label                   shift and go to state 315

state 268

    (179) switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .

    IDENTIFIER      reduce using rule 179 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    BLOCK_BEGIN     reduce using rule 179 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    DELIM           reduce using rule 179 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    CONSOLE         reduce using rule 179 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    CONST           reduce using rule 179 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    IF              reduce using rule 179 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    SWITCH          reduce using rule 179 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    WHILE           reduce using rule 179 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    FOR             reduce using rule 179 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    DO              reduce using rule 179 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    BREAK           reduce using rule 179 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    CONTINUE        reduce using rule 179 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    GOTO            reduce using rule 179 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    RETURN          reduce using rule 179 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    NEW             reduce using rule 179 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    BOOL            reduce using rule 179 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    INT             reduce using rule 179 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    UINT            reduce using rule 179 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    CHAR            reduce using rule 179 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    DOUBLE          reduce using rule 179 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    $end            reduce using rule 179 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    CASE            reduce using rule 179 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    DEFAULT         reduce using rule 179 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    BLOCK_END       reduce using rule 179 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)


state 269

    (85) variable-initializer-list-opt -> empty .

    BLOCK_END       reduce using rule 85 (variable-initializer-list-opt -> empty .)


state 270

    (83) array-initializer -> BLOCK_BEGIN variable-initializer-list-opt . BLOCK_END

    BLOCK_END       shift and go to state 316


state 271

    (84) variable-initializer-list-opt -> expression-list .
    (82) expression-list -> expression-list . COMMA expression

    BLOCK_END       reduce using rule 84 (variable-initializer-list-opt -> expression-list .)
    COMMA           shift and go to state 214


state 272

    (195) do-statement -> DO M_quad block WHILE OPEN_PAREN . M_quad expression CLOSE_PAREN DELIM
    (178) M_quad -> . empty
    (227) empty -> .

    IDENTIFIER      reduce using rule 227 (empty -> .)
    PLUS            reduce using rule 227 (empty -> .)
    MINUS           reduce using rule 227 (empty -> .)
    BITNOT          reduce using rule 227 (empty -> .)
    BITCOMP         reduce using rule 227 (empty -> .)
    TIMES           reduce using rule 227 (empty -> .)
    NEW             reduce using rule 227 (empty -> .)
    ICONST          reduce using rule 227 (empty -> .)
    DCONST          reduce using rule 227 (empty -> .)
    TRUE            reduce using rule 227 (empty -> .)
    FALSE           reduce using rule 227 (empty -> .)
    OPEN_PAREN      reduce using rule 227 (empty -> .)

    M_quad                         shift and go to state 317
    empty                          shift and go to state 65

state 273

    (36) constant-declarators -> constant-declarators COMMA constant-declarator .

    DELIM           reduce using rule 36 (constant-declarators -> constant-declarators COMMA constant-declarator .)
    COMMA           reduce using rule 36 (constant-declarators -> constant-declarators COMMA constant-declarator .)


state 274

    (37) constant-declarator -> IDENTIFIER ASSIGN expression .

    DELIM           reduce using rule 37 (constant-declarator -> IDENTIFIER ASSIGN expression .)
    COMMA           reduce using rule 37 (constant-declarator -> IDENTIFIER ASSIGN expression .)


state 275

    (3) semi-opt -> DELIM .

    CLASS           reduce using rule 3 (semi-opt -> DELIM .)
    $end            reduce using rule 3 (semi-opt -> DELIM .)


state 276

    (9) class-declaration -> CLASS IDENTIFIER class-base-opt class-body semi-opt .

    CLASS           reduce using rule 9 (class-declaration -> CLASS IDENTIFIER class-base-opt class-body semi-opt .)
    $end            reduce using rule 9 (class-declaration -> CLASS IDENTIFIER class-base-opt class-body semi-opt .)


state 277

    (4) semi-opt -> empty .

    CLASS           reduce using rule 4 (semi-opt -> empty .)
    $end            reduce using rule 4 (semi-opt -> empty .)


state 278

    (128) method-declaration -> method-header . method-body
    (140) method-body -> . block
    (141) method-body -> . DELIM
    (142) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END

    DELIM           shift and go to state 318
    BLOCK_BEGIN     shift and go to state 50

    method-body                    shift and go to state 319
    block                          shift and go to state 320

state 279

    (132) method-header -> VOID . member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (135) member-name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 322

    member-name                    shift and go to state 321

state 280

    (25) constant-declaration -> CONST . simple-type constant-declarators DELIM
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE

    BOOL            shift and go to state 44
    INT             shift and go to state 24
    UINT            shift and go to state 57
    CHAR            shift and go to state 30
    DOUBLE          shift and go to state 12

    simple-type                    shift and go to state 323

state 281

    (123) modifier -> PRIVATE .

    CONST           reduce using rule 123 (modifier -> PRIVATE .)
    VOID            reduce using rule 123 (modifier -> PRIVATE .)
    BOOL            reduce using rule 123 (modifier -> PRIVATE .)
    INT             reduce using rule 123 (modifier -> PRIVATE .)
    UINT            reduce using rule 123 (modifier -> PRIVATE .)
    CHAR            reduce using rule 123 (modifier -> PRIVATE .)
    DOUBLE          reduce using rule 123 (modifier -> PRIVATE .)
    IDENTIFIER      reduce using rule 123 (modifier -> PRIVATE .)


state 282

    (220) destructor-declaration -> BITCOMP . IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body

    IDENTIFIER      shift and go to state 324


state 283

    (21) class-member-declaration -> method-declaration .

    CONST           reduce using rule 21 (class-member-declaration -> method-declaration .)
    BITCOMP         reduce using rule 21 (class-member-declaration -> method-declaration .)
    PUBLIC          reduce using rule 21 (class-member-declaration -> method-declaration .)
    PRIVATE         reduce using rule 21 (class-member-declaration -> method-declaration .)
    VOID            reduce using rule 21 (class-member-declaration -> method-declaration .)
    IDENTIFIER      reduce using rule 21 (class-member-declaration -> method-declaration .)
    BOOL            reduce using rule 21 (class-member-declaration -> method-declaration .)
    INT             reduce using rule 21 (class-member-declaration -> method-declaration .)
    UINT            reduce using rule 21 (class-member-declaration -> method-declaration .)
    CHAR            reduce using rule 21 (class-member-declaration -> method-declaration .)
    DOUBLE          reduce using rule 21 (class-member-declaration -> method-declaration .)
    BLOCK_END       reduce using rule 21 (class-member-declaration -> method-declaration .)


state 284

    (20) class-member-declaration -> field-declaration .

    CONST           reduce using rule 20 (class-member-declaration -> field-declaration .)
    BITCOMP         reduce using rule 20 (class-member-declaration -> field-declaration .)
    PUBLIC          reduce using rule 20 (class-member-declaration -> field-declaration .)
    PRIVATE         reduce using rule 20 (class-member-declaration -> field-declaration .)
    VOID            reduce using rule 20 (class-member-declaration -> field-declaration .)
    IDENTIFIER      reduce using rule 20 (class-member-declaration -> field-declaration .)
    BOOL            reduce using rule 20 (class-member-declaration -> field-declaration .)
    INT             reduce using rule 20 (class-member-declaration -> field-declaration .)
    UINT            reduce using rule 20 (class-member-declaration -> field-declaration .)
    CHAR            reduce using rule 20 (class-member-declaration -> field-declaration .)
    DOUBLE          reduce using rule 20 (class-member-declaration -> field-declaration .)
    BLOCK_END       reduce using rule 20 (class-member-declaration -> field-declaration .)


state 285

    (19) class-member-declaration -> constant-declaration .

    CONST           reduce using rule 19 (class-member-declaration -> constant-declaration .)
    BITCOMP         reduce using rule 19 (class-member-declaration -> constant-declaration .)
    PUBLIC          reduce using rule 19 (class-member-declaration -> constant-declaration .)
    PRIVATE         reduce using rule 19 (class-member-declaration -> constant-declaration .)
    VOID            reduce using rule 19 (class-member-declaration -> constant-declaration .)
    IDENTIFIER      reduce using rule 19 (class-member-declaration -> constant-declaration .)
    BOOL            reduce using rule 19 (class-member-declaration -> constant-declaration .)
    INT             reduce using rule 19 (class-member-declaration -> constant-declaration .)
    UINT            reduce using rule 19 (class-member-declaration -> constant-declaration .)
    CHAR            reduce using rule 19 (class-member-declaration -> constant-declaration .)
    DOUBLE          reduce using rule 19 (class-member-declaration -> constant-declaration .)
    BLOCK_END       reduce using rule 19 (class-member-declaration -> constant-declaration .)


state 286

    (121) field-declaration -> type . variable-declarators DELIM
    (131) method-header -> type . member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (124) variable-declarators -> . variable-declarator
    (125) variable-declarators -> . variable-declarators COMMA variable-declarator
    (135) member-name -> . IDENTIFIER
    (126) variable-declarator -> . IDENTIFIER
    (127) variable-declarator -> . IDENTIFIER ASSIGN variable-initializer

    IDENTIFIER      shift and go to state 327

    variable-declarator            shift and go to state 119
    variable-declarators           shift and go to state 325
    member-name                    shift and go to state 326

state 287

    (16) class-member-declarations-opt -> empty .

    BLOCK_END       reduce using rule 16 (class-member-declarations-opt -> empty .)


state 288

    (14) class-body -> BLOCK_BEGIN class-member-declarations-opt . BLOCK_END

    BLOCK_END       shift and go to state 328


state 289

    (22) class-member-declaration -> constructor-declaration .

    CONST           reduce using rule 22 (class-member-declaration -> constructor-declaration .)
    BITCOMP         reduce using rule 22 (class-member-declaration -> constructor-declaration .)
    PUBLIC          reduce using rule 22 (class-member-declaration -> constructor-declaration .)
    PRIVATE         reduce using rule 22 (class-member-declaration -> constructor-declaration .)
    VOID            reduce using rule 22 (class-member-declaration -> constructor-declaration .)
    IDENTIFIER      reduce using rule 22 (class-member-declaration -> constructor-declaration .)
    BOOL            reduce using rule 22 (class-member-declaration -> constructor-declaration .)
    INT             reduce using rule 22 (class-member-declaration -> constructor-declaration .)
    UINT            reduce using rule 22 (class-member-declaration -> constructor-declaration .)
    CHAR            reduce using rule 22 (class-member-declaration -> constructor-declaration .)
    DOUBLE          reduce using rule 22 (class-member-declaration -> constructor-declaration .)
    BLOCK_END       reduce using rule 22 (class-member-declaration -> constructor-declaration .)


state 290

    (15) class-member-declarations-opt -> class-member-declarations .
    (18) class-member-declarations -> class-member-declarations . class-member-declaration
    (19) class-member-declaration -> . constant-declaration
    (20) class-member-declaration -> . field-declaration
    (21) class-member-declaration -> . method-declaration
    (22) class-member-declaration -> . constructor-declaration
    (23) class-member-declaration -> . destructor-declaration
    (24) constant-declaration -> . modifier CONST simple-type constant-declarators DELIM
    (25) constant-declaration -> . CONST simple-type constant-declarators DELIM
    (120) field-declaration -> . modifier type variable-declarators DELIM
    (121) field-declaration -> . type variable-declarators DELIM
    (128) method-declaration -> . method-header method-body
    (216) constructor-declaration -> . constructor-declarator constructor-body
    (220) destructor-declaration -> . BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body
    (122) modifier -> . PUBLIC
    (123) modifier -> . PRIVATE
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (129) method-header -> . modifier type member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (130) method-header -> . modifier VOID member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (131) method-header -> . type member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (132) method-header -> . VOID member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (217) constructor-declarator -> . IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE
    (13) class-type -> . IDENTIFIER
    (34) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET

    BLOCK_END       reduce using rule 15 (class-member-declarations-opt -> class-member-declarations .)
    CONST           shift and go to state 280
    BITCOMP         shift and go to state 282
    PUBLIC          shift and go to state 296
    PRIVATE         shift and go to state 281
    VOID            shift and go to state 279
    IDENTIFIER      shift and go to state 291
    BOOL            shift and go to state 44
    INT             shift and go to state 24
    UINT            shift and go to state 57
    CHAR            shift and go to state 30
    DOUBLE          shift and go to state 12

    array-type                     shift and go to state 40
    modifier                       shift and go to state 295
    method-header                  shift and go to state 278
    constructor-declaration        shift and go to state 289
    type                           shift and go to state 286
    constructor-declarator         shift and go to state 293
    method-declaration             shift and go to state 283
    class-member-declaration       shift and go to state 329
    field-declaration              shift and go to state 284
    class-type                     shift and go to state 60
    simple-type                    shift and go to state 15
    constant-declaration           shift and go to state 285
    destructor-declaration         shift and go to state 292

state 291

    (217) constructor-declarator -> IDENTIFIER . OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (13) class-type -> IDENTIFIER .

    OPEN_PAREN      shift and go to state 330
    IDENTIFIER      reduce using rule 13 (class-type -> IDENTIFIER .)


state 292

    (23) class-member-declaration -> destructor-declaration .

    CONST           reduce using rule 23 (class-member-declaration -> destructor-declaration .)
    BITCOMP         reduce using rule 23 (class-member-declaration -> destructor-declaration .)
    PUBLIC          reduce using rule 23 (class-member-declaration -> destructor-declaration .)
    PRIVATE         reduce using rule 23 (class-member-declaration -> destructor-declaration .)
    VOID            reduce using rule 23 (class-member-declaration -> destructor-declaration .)
    IDENTIFIER      reduce using rule 23 (class-member-declaration -> destructor-declaration .)
    BOOL            reduce using rule 23 (class-member-declaration -> destructor-declaration .)
    INT             reduce using rule 23 (class-member-declaration -> destructor-declaration .)
    UINT            reduce using rule 23 (class-member-declaration -> destructor-declaration .)
    CHAR            reduce using rule 23 (class-member-declaration -> destructor-declaration .)
    DOUBLE          reduce using rule 23 (class-member-declaration -> destructor-declaration .)
    BLOCK_END       reduce using rule 23 (class-member-declaration -> destructor-declaration .)


state 293

    (216) constructor-declaration -> constructor-declarator . constructor-body
    (218) constructor-body -> . block
    (219) constructor-body -> . DELIM
    (142) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END

    DELIM           shift and go to state 332
    BLOCK_BEGIN     shift and go to state 50

    constructor-body               shift and go to state 331
    block                          shift and go to state 333

state 294

    (17) class-member-declarations -> class-member-declaration .

    CONST           reduce using rule 17 (class-member-declarations -> class-member-declaration .)
    BITCOMP         reduce using rule 17 (class-member-declarations -> class-member-declaration .)
    PUBLIC          reduce using rule 17 (class-member-declarations -> class-member-declaration .)
    PRIVATE         reduce using rule 17 (class-member-declarations -> class-member-declaration .)
    VOID            reduce using rule 17 (class-member-declarations -> class-member-declaration .)
    IDENTIFIER      reduce using rule 17 (class-member-declarations -> class-member-declaration .)
    BOOL            reduce using rule 17 (class-member-declarations -> class-member-declaration .)
    INT             reduce using rule 17 (class-member-declarations -> class-member-declaration .)
    UINT            reduce using rule 17 (class-member-declarations -> class-member-declaration .)
    CHAR            reduce using rule 17 (class-member-declarations -> class-member-declaration .)
    DOUBLE          reduce using rule 17 (class-member-declarations -> class-member-declaration .)
    BLOCK_END       reduce using rule 17 (class-member-declarations -> class-member-declaration .)


state 295

    (24) constant-declaration -> modifier . CONST simple-type constant-declarators DELIM
    (120) field-declaration -> modifier . type variable-declarators DELIM
    (129) method-header -> modifier . type member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (130) method-header -> modifier . VOID member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE
    (13) class-type -> . IDENTIFIER
    (34) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET

    CONST           shift and go to state 334
    VOID            shift and go to state 335
    BOOL            shift and go to state 44
    INT             shift and go to state 24
    UINT            shift and go to state 57
    CHAR            shift and go to state 30
    DOUBLE          shift and go to state 12
    IDENTIFIER      shift and go to state 113

    array-type                     shift and go to state 40
    simple-type                    shift and go to state 15
    class-type                     shift and go to state 60
    type                           shift and go to state 336

state 296

    (122) modifier -> PUBLIC .

    CONST           reduce using rule 122 (modifier -> PUBLIC .)
    VOID            reduce using rule 122 (modifier -> PUBLIC .)
    BOOL            reduce using rule 122 (modifier -> PUBLIC .)
    INT             reduce using rule 122 (modifier -> PUBLIC .)
    UINT            reduce using rule 122 (modifier -> PUBLIC .)
    CHAR            reduce using rule 122 (modifier -> PUBLIC .)
    DOUBLE          reduce using rule 122 (modifier -> PUBLIC .)
    IDENTIFIER      reduce using rule 122 (modifier -> PUBLIC .)


state 297

    (158) write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list . CLOSE_PAREN DELIM

    CLOSE_PAREN     shift and go to state 337


state 298

    (159) print-list -> expression .
    (160) print-list -> expression . COMMA print-list

    CLOSE_PAREN     reduce using rule 159 (print-list -> expression .)
    COMMA           shift and go to state 338


state 299

    (161) read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER . CLOSE_PAREN DELIM

    CLOSE_PAREN     shift and go to state 339


state 300

    (174) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if . block
    (175) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if . block ELSE M_else block
    (142) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END

    BLOCK_BEGIN     shift and go to state 50

    block                          shift and go to state 340

state 301

    (176) M_if -> empty .

    BLOCK_BEGIN     reduce using rule 176 (M_if -> empty .)


state 302

    (78) array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET . array-initializer-opt
    (34) array-type -> simple-type OPEN_BRACKET ICONST CLOSE_BRACKET .
    (79) array-initializer-opt -> . array-initializer
    (80) array-initializer-opt -> . empty
    (83) array-initializer -> . BLOCK_BEGIN variable-initializer-list-opt BLOCK_END
    (227) empty -> .

    OPEN_PAREN      reduce using rule 34 (array-type -> simple-type OPEN_BRACKET ICONST CLOSE_BRACKET .)
    BLOCK_BEGIN     shift and go to state 246
    TIMES           reduce using rule 227 (empty -> .)
    DIV             reduce using rule 227 (empty -> .)
    MOD             reduce using rule 227 (empty -> .)
    PLUS            reduce using rule 227 (empty -> .)
    MINUS           reduce using rule 227 (empty -> .)
    LSHIFT          reduce using rule 227 (empty -> .)
    RSHIFT          reduce using rule 227 (empty -> .)
    LT              reduce using rule 227 (empty -> .)
    GT              reduce using rule 227 (empty -> .)
    LE              reduce using rule 227 (empty -> .)
    GE              reduce using rule 227 (empty -> .)
    EQ              reduce using rule 227 (empty -> .)
    NE              reduce using rule 227 (empty -> .)
    BITAND          reduce using rule 227 (empty -> .)
    BITXOR          reduce using rule 227 (empty -> .)
    BITOR           reduce using rule 227 (empty -> .)
    LOGAND          reduce using rule 227 (empty -> .)
    CONDOP          reduce using rule 227 (empty -> .)
    LOGOR           reduce using rule 227 (empty -> .)
    DELIM           reduce using rule 227 (empty -> .)
    CLOSE_BRACKET   reduce using rule 227 (empty -> .)
    COMMA           reduce using rule 227 (empty -> .)
    CLOSE_PAREN     reduce using rule 227 (empty -> .)
    COLON           reduce using rule 227 (empty -> .)
    BLOCK_END       reduce using rule 227 (empty -> .)

    array-initializer-opt          shift and go to state 342
    empty                          shift and go to state 343
    array-initializer              shift and go to state 341

state 303

    (41) conditional-expression -> conditional-or-expression CONDOP expression COLON expression .

    CLOSE_PAREN     reduce using rule 41 (conditional-expression -> conditional-or-expression CONDOP expression COLON expression .)
    COLON           reduce using rule 41 (conditional-expression -> conditional-or-expression CONDOP expression COLON expression .)
    COMMA           reduce using rule 41 (conditional-expression -> conditional-or-expression CONDOP expression COLON expression .)
    CLOSE_BRACKET   reduce using rule 41 (conditional-expression -> conditional-or-expression CONDOP expression COLON expression .)
    DELIM           reduce using rule 41 (conditional-expression -> conditional-or-expression CONDOP expression COLON expression .)
    BLOCK_END       reduce using rule 41 (conditional-expression -> conditional-or-expression CONDOP expression COLON expression .)


state 304

    (196) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition . DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block

    DELIM           shift and go to state 344


state 305

    (200) for-condition -> expression .

    DELIM           reduce using rule 200 (for-condition -> expression .)


state 306

    (193) while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while . block
    (142) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END

    BLOCK_BEGIN     shift and go to state 50

    block                          shift and go to state 345

state 307

    (194) M_while -> empty .

    BLOCK_BEGIN     reduce using rule 194 (M_while -> empty .)


state 308

    (188) switch-label -> CASE . expression COLON
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (108) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (104) prim-expression -> . IDENTIFIER
    (105) prim-expression -> . member-access
    (106) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (96) member-access -> . prim-expression DOT IDENTIFIER
    (102) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (103) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . parenthesized-expression
    (91) primary-no-array-creation-expression -> . member-access
    (92) primary-no-array-creation-expression -> . invocation-expression
    (93) primary-no-array-creation-expression -> . element-access
    (94) primary-no-array-creation-expression -> . object-creation-expression
    (223) literal -> . ICONST
    (224) literal -> . DCONST
    (225) literal -> . TRUE
    (226) literal -> . FALSE
    (95) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (107) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 83
    PLUS            shift and go to state 82
    MINUS           shift and go to state 74
    BITNOT          shift and go to state 99
    BITCOMP         shift and go to state 77
    TIMES           shift and go to state 87
    NEW             shift and go to state 72
    ICONST          shift and go to state 89
    DCONST          shift and go to state 100
    TRUE            shift and go to state 94
    FALSE           shift and go to state 93
    OPEN_PAREN      shift and go to state 79

    unary-expression               shift and go to state 91
    exclusive-or-expression        shift and go to state 68
    member-access                  shift and go to state 69
    relational-expression          shift and go to state 70
    additive-expression            shift and go to state 73
    primary-no-array-creation-expression shift and go to state 88
    inclusive-or-expression        shift and go to state 75
    prim-expression                shift and go to state 51
    element-access                 shift and go to state 78
    literal                        shift and go to state 86
    conditional-expression         shift and go to state 80
    conditional-and-expression     shift and go to state 81
    array-creation-expression      shift and go to state 71
    assignment                     shift and go to state 85
    object-creation-expression     shift and go to state 90
    equality-expression            shift and go to state 76
    shift-expression               shift and go to state 95
    and-expression                 shift and go to state 96
    multiplicative-expression      shift and go to state 97
    conditional-or-expression      shift and go to state 103
    primary-expression             shift and go to state 101
    invocation-expression          shift and go to state 102
    expression                     shift and go to state 346
    parenthesized-expression       shift and go to state 104

state 309

    (189) switch-label -> DEFAULT . COLON

    COLON           shift and go to state 347


state 310

    (183) switch-sections -> switch-section .

    CASE            reduce using rule 183 (switch-sections -> switch-section .)
    DEFAULT         reduce using rule 183 (switch-sections -> switch-section .)
    BLOCK_END       reduce using rule 183 (switch-sections -> switch-section .)


state 311

    (185) switch-section -> switch-labels . statement-list
    (187) switch-labels -> switch-labels . switch-label
    (146) statement-list -> . statement
    (147) statement-list -> . statement-list statement
    (188) switch-label -> . CASE expression COLON
    (189) switch-label -> . DEFAULT COLON
    (148) statement -> . labeled-statement
    (149) statement -> . declaration-statement
    (150) statement -> . block
    (151) statement -> . empty-statement
    (152) statement -> . expression-statement
    (153) statement -> . selection-statement
    (154) statement -> . iteration-statement
    (155) statement -> . jump-statement
    (156) statement -> . write-statement
    (157) statement -> . read-statement
    (162) labeled-statement -> . IDENTIFIER COLON statement
    (163) declaration-statement -> . local-variable-declaration DELIM
    (164) declaration-statement -> . local-constant-declaration DELIM
    (142) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END
    (167) empty-statement -> . DELIM
    (168) expression-statement -> . statement-expression DELIM
    (172) selection-statement -> . if-statement M_quad
    (173) selection-statement -> . switch-statement
    (190) iteration-statement -> . while-statement M_quad
    (191) iteration-statement -> . for-statement M_quad
    (192) iteration-statement -> . do-statement M_quad
    (206) jump-statement -> . break-statement
    (207) jump-statement -> . continue-statement
    (208) jump-statement -> . goto-statement
    (209) jump-statement -> . return-statement
    (158) write-statement -> . CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM
    (161) read-statement -> . CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM
    (165) local-variable-declaration -> . type variable-declarators
    (166) local-constant-declaration -> . CONST type constant-declarators
    (169) statement-expression -> . invocation-expression
    (170) statement-expression -> . object-creation-expression
    (171) statement-expression -> . assignment
    (174) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block
    (175) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block
    (179) switch-statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block
    (193) while-statement -> . WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block
    (196) for-statement -> . FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block
    (195) do-statement -> . DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM
    (210) break-statement -> . BREAK DELIM
    (211) continue-statement -> . CONTINUE DELIM
    (212) goto-statement -> . GOTO IDENTIFIER DELIM
    (213) return-statement -> . RETURN expression-opt DELIM
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (107) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (108) assignment -> . prim-expression assignment-operator expression
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE
    (13) class-type -> . IDENTIFIER
    (34) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET
    (96) member-access -> . prim-expression DOT IDENTIFIER
    (104) prim-expression -> . IDENTIFIER
    (105) prim-expression -> . member-access
    (106) prim-expression -> . element-access
    (102) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (103) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET

    CASE            shift and go to state 308
    DEFAULT         shift and go to state 309
    IDENTIFIER      shift and go to state 37
    BLOCK_BEGIN     shift and go to state 50
    DELIM           shift and go to state 4
    CONSOLE         shift and go to state 54
    CONST           shift and go to state 49
    IF              shift and go to state 59
    SWITCH          shift and go to state 35
    WHILE           shift and go to state 31
    FOR             shift and go to state 21
    DO              shift and go to state 48
    BREAK           shift and go to state 43
    CONTINUE        shift and go to state 27
    GOTO            shift and go to state 7
    RETURN          shift and go to state 14
    NEW             shift and go to state 33
    BOOL            shift and go to state 44
    INT             shift and go to state 24
    UINT            shift and go to state 57
    CHAR            shift and go to state 30
    DOUBLE          shift and go to state 12

    return-statement               shift and go to state 16
    write-statement                shift and go to state 1
    member-access                  shift and go to state 2
    selection-statement            shift and go to state 29
    empty-statement                shift and go to state 32
    expression-statement           shift and go to state 3
    break-statement                shift and go to state 34
    prim-expression                shift and go to state 51
    element-access                 shift and go to state 18
    statement-expression           shift and go to state 5
    local-constant-declaration     shift and go to state 19
    switch-label                   shift and go to state 348
    statement                      shift and go to state 36
    assignment                     shift and go to state 55
    for-statement                  shift and go to state 6
    type                           shift and go to state 38
    read-statement                 shift and go to state 53
    do-statement                   shift and go to state 20
    array-type                     shift and go to state 40
    continue-statement             shift and go to state 22
    invocation-expression          shift and go to state 13
    labeled-statement              shift and go to state 8
    declaration-statement          shift and go to state 41
    object-creation-expression     shift and go to state 58
    switch-statement               shift and go to state 9
    iteration-statement            shift and go to state 42
    jump-statement                 shift and go to state 10
    local-variable-declaration     shift and go to state 23
    goto-statement                 shift and go to state 25
    if-statement                   shift and go to state 26
    statement-list                 shift and go to state 349
    class-type                     shift and go to state 60
    while-statement                shift and go to state 46
    simple-type                    shift and go to state 15
    block                          shift and go to state 28

state 312

    (180) switch-block -> BLOCK_BEGIN switch-sections-opt . BLOCK_END

    BLOCK_END       shift and go to state 350


state 313

    (181) switch-sections-opt -> switch-sections .
    (184) switch-sections -> switch-sections . switch-section
    (185) switch-section -> . switch-labels statement-list
    (186) switch-labels -> . switch-label
    (187) switch-labels -> . switch-labels switch-label
    (188) switch-label -> . CASE expression COLON
    (189) switch-label -> . DEFAULT COLON

    BLOCK_END       reduce using rule 181 (switch-sections-opt -> switch-sections .)
    CASE            shift and go to state 308
    DEFAULT         shift and go to state 309

    switch-section                 shift and go to state 351
    switch-labels                  shift and go to state 311
    switch-label                   shift and go to state 315

state 314

    (182) switch-sections-opt -> empty .

    BLOCK_END       reduce using rule 182 (switch-sections-opt -> empty .)


state 315

    (186) switch-labels -> switch-label .

    CASE            reduce using rule 186 (switch-labels -> switch-label .)
    DEFAULT         reduce using rule 186 (switch-labels -> switch-label .)
    IDENTIFIER      reduce using rule 186 (switch-labels -> switch-label .)
    BLOCK_BEGIN     reduce using rule 186 (switch-labels -> switch-label .)
    DELIM           reduce using rule 186 (switch-labels -> switch-label .)
    CONSOLE         reduce using rule 186 (switch-labels -> switch-label .)
    CONST           reduce using rule 186 (switch-labels -> switch-label .)
    IF              reduce using rule 186 (switch-labels -> switch-label .)
    SWITCH          reduce using rule 186 (switch-labels -> switch-label .)
    WHILE           reduce using rule 186 (switch-labels -> switch-label .)
    FOR             reduce using rule 186 (switch-labels -> switch-label .)
    DO              reduce using rule 186 (switch-labels -> switch-label .)
    BREAK           reduce using rule 186 (switch-labels -> switch-label .)
    CONTINUE        reduce using rule 186 (switch-labels -> switch-label .)
    GOTO            reduce using rule 186 (switch-labels -> switch-label .)
    RETURN          reduce using rule 186 (switch-labels -> switch-label .)
    NEW             reduce using rule 186 (switch-labels -> switch-label .)
    BOOL            reduce using rule 186 (switch-labels -> switch-label .)
    INT             reduce using rule 186 (switch-labels -> switch-label .)
    UINT            reduce using rule 186 (switch-labels -> switch-label .)
    CHAR            reduce using rule 186 (switch-labels -> switch-label .)
    DOUBLE          reduce using rule 186 (switch-labels -> switch-label .)


state 316

    (83) array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .

    COMMA           reduce using rule 83 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    DELIM           reduce using rule 83 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    TIMES           reduce using rule 83 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    DIV             reduce using rule 83 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    MOD             reduce using rule 83 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    PLUS            reduce using rule 83 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    MINUS           reduce using rule 83 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    LSHIFT          reduce using rule 83 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    RSHIFT          reduce using rule 83 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    LT              reduce using rule 83 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    GT              reduce using rule 83 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    LE              reduce using rule 83 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    GE              reduce using rule 83 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    EQ              reduce using rule 83 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    NE              reduce using rule 83 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    BITAND          reduce using rule 83 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    BITXOR          reduce using rule 83 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    BITOR           reduce using rule 83 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    LOGAND          reduce using rule 83 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    CONDOP          reduce using rule 83 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    LOGOR           reduce using rule 83 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    CLOSE_BRACKET   reduce using rule 83 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    CLOSE_PAREN     reduce using rule 83 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    COLON           reduce using rule 83 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    BLOCK_END       reduce using rule 83 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)


state 317

    (195) do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad . expression CLOSE_PAREN DELIM
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (108) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (104) prim-expression -> . IDENTIFIER
    (105) prim-expression -> . member-access
    (106) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (96) member-access -> . prim-expression DOT IDENTIFIER
    (102) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (103) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . parenthesized-expression
    (91) primary-no-array-creation-expression -> . member-access
    (92) primary-no-array-creation-expression -> . invocation-expression
    (93) primary-no-array-creation-expression -> . element-access
    (94) primary-no-array-creation-expression -> . object-creation-expression
    (223) literal -> . ICONST
    (224) literal -> . DCONST
    (225) literal -> . TRUE
    (226) literal -> . FALSE
    (95) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (107) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 83
    PLUS            shift and go to state 82
    MINUS           shift and go to state 74
    BITNOT          shift and go to state 99
    BITCOMP         shift and go to state 77
    TIMES           shift and go to state 87
    NEW             shift and go to state 72
    ICONST          shift and go to state 89
    DCONST          shift and go to state 100
    TRUE            shift and go to state 94
    FALSE           shift and go to state 93
    OPEN_PAREN      shift and go to state 79

    unary-expression               shift and go to state 91
    exclusive-or-expression        shift and go to state 68
    member-access                  shift and go to state 69
    relational-expression          shift and go to state 70
    additive-expression            shift and go to state 73
    primary-no-array-creation-expression shift and go to state 88
    inclusive-or-expression        shift and go to state 75
    prim-expression                shift and go to state 51
    element-access                 shift and go to state 78
    literal                        shift and go to state 86
    conditional-expression         shift and go to state 80
    conditional-and-expression     shift and go to state 81
    array-creation-expression      shift and go to state 71
    assignment                     shift and go to state 85
    object-creation-expression     shift and go to state 90
    equality-expression            shift and go to state 76
    shift-expression               shift and go to state 95
    and-expression                 shift and go to state 96
    multiplicative-expression      shift and go to state 97
    conditional-or-expression      shift and go to state 103
    primary-expression             shift and go to state 101
    invocation-expression          shift and go to state 102
    expression                     shift and go to state 352
    parenthesized-expression       shift and go to state 104

state 318

    (141) method-body -> DELIM .

    CONST           reduce using rule 141 (method-body -> DELIM .)
    BITCOMP         reduce using rule 141 (method-body -> DELIM .)
    PUBLIC          reduce using rule 141 (method-body -> DELIM .)
    PRIVATE         reduce using rule 141 (method-body -> DELIM .)
    VOID            reduce using rule 141 (method-body -> DELIM .)
    IDENTIFIER      reduce using rule 141 (method-body -> DELIM .)
    BOOL            reduce using rule 141 (method-body -> DELIM .)
    INT             reduce using rule 141 (method-body -> DELIM .)
    UINT            reduce using rule 141 (method-body -> DELIM .)
    CHAR            reduce using rule 141 (method-body -> DELIM .)
    DOUBLE          reduce using rule 141 (method-body -> DELIM .)
    BLOCK_END       reduce using rule 141 (method-body -> DELIM .)


state 319

    (128) method-declaration -> method-header method-body .

    CONST           reduce using rule 128 (method-declaration -> method-header method-body .)
    BITCOMP         reduce using rule 128 (method-declaration -> method-header method-body .)
    PUBLIC          reduce using rule 128 (method-declaration -> method-header method-body .)
    PRIVATE         reduce using rule 128 (method-declaration -> method-header method-body .)
    VOID            reduce using rule 128 (method-declaration -> method-header method-body .)
    IDENTIFIER      reduce using rule 128 (method-declaration -> method-header method-body .)
    BOOL            reduce using rule 128 (method-declaration -> method-header method-body .)
    INT             reduce using rule 128 (method-declaration -> method-header method-body .)
    UINT            reduce using rule 128 (method-declaration -> method-header method-body .)
    CHAR            reduce using rule 128 (method-declaration -> method-header method-body .)
    DOUBLE          reduce using rule 128 (method-declaration -> method-header method-body .)
    BLOCK_END       reduce using rule 128 (method-declaration -> method-header method-body .)


state 320

    (140) method-body -> block .

    CONST           reduce using rule 140 (method-body -> block .)
    BITCOMP         reduce using rule 140 (method-body -> block .)
    PUBLIC          reduce using rule 140 (method-body -> block .)
    PRIVATE         reduce using rule 140 (method-body -> block .)
    VOID            reduce using rule 140 (method-body -> block .)
    IDENTIFIER      reduce using rule 140 (method-body -> block .)
    BOOL            reduce using rule 140 (method-body -> block .)
    INT             reduce using rule 140 (method-body -> block .)
    UINT            reduce using rule 140 (method-body -> block .)
    CHAR            reduce using rule 140 (method-body -> block .)
    DOUBLE          reduce using rule 140 (method-body -> block .)
    BLOCK_END       reduce using rule 140 (method-body -> block .)


state 321

    (132) method-header -> VOID member-name . OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN

    OPEN_PAREN      shift and go to state 353


state 322

    (135) member-name -> IDENTIFIER .

    OPEN_PAREN      reduce using rule 135 (member-name -> IDENTIFIER .)


state 323

    (25) constant-declaration -> CONST simple-type . constant-declarators DELIM
    (35) constant-declarators -> . constant-declarator
    (36) constant-declarators -> . constant-declarators COMMA constant-declarator
    (37) constant-declarator -> . IDENTIFIER ASSIGN expression

    IDENTIFIER      shift and go to state 199

    constant-declarators           shift and go to state 354
    constant-declarator            shift and go to state 200

state 324

    (220) destructor-declaration -> BITCOMP IDENTIFIER . OPEN_PAREN CLOSE_PAREN destructor-body

    OPEN_PAREN      shift and go to state 355


state 325

    (121) field-declaration -> type variable-declarators . DELIM
    (125) variable-declarators -> variable-declarators . COMMA variable-declarator

    DELIM           shift and go to state 356
    COMMA           shift and go to state 195


state 326

    (131) method-header -> type member-name . OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN

    OPEN_PAREN      shift and go to state 357


state 327

    (135) member-name -> IDENTIFIER .
    (126) variable-declarator -> IDENTIFIER .
    (127) variable-declarator -> IDENTIFIER . ASSIGN variable-initializer

    OPEN_PAREN      reduce using rule 135 (member-name -> IDENTIFIER .)
    DELIM           reduce using rule 126 (variable-declarator -> IDENTIFIER .)
    COMMA           reduce using rule 126 (variable-declarator -> IDENTIFIER .)
    ASSIGN          shift and go to state 196


state 328

    (14) class-body -> BLOCK_BEGIN class-member-declarations-opt BLOCK_END .

    DELIM           reduce using rule 14 (class-body -> BLOCK_BEGIN class-member-declarations-opt BLOCK_END .)
    CLASS           reduce using rule 14 (class-body -> BLOCK_BEGIN class-member-declarations-opt BLOCK_END .)
    $end            reduce using rule 14 (class-body -> BLOCK_BEGIN class-member-declarations-opt BLOCK_END .)


state 329

    (18) class-member-declarations -> class-member-declarations class-member-declaration .

    CONST           reduce using rule 18 (class-member-declarations -> class-member-declarations class-member-declaration .)
    BITCOMP         reduce using rule 18 (class-member-declarations -> class-member-declarations class-member-declaration .)
    PUBLIC          reduce using rule 18 (class-member-declarations -> class-member-declarations class-member-declaration .)
    PRIVATE         reduce using rule 18 (class-member-declarations -> class-member-declarations class-member-declaration .)
    VOID            reduce using rule 18 (class-member-declarations -> class-member-declarations class-member-declaration .)
    IDENTIFIER      reduce using rule 18 (class-member-declarations -> class-member-declarations class-member-declaration .)
    BOOL            reduce using rule 18 (class-member-declarations -> class-member-declarations class-member-declaration .)
    INT             reduce using rule 18 (class-member-declarations -> class-member-declarations class-member-declaration .)
    UINT            reduce using rule 18 (class-member-declarations -> class-member-declarations class-member-declaration .)
    CHAR            reduce using rule 18 (class-member-declarations -> class-member-declarations class-member-declaration .)
    DOUBLE          reduce using rule 18 (class-member-declarations -> class-member-declarations class-member-declaration .)
    BLOCK_END       reduce using rule 18 (class-member-declarations -> class-member-declarations class-member-declaration .)


state 330

    (217) constructor-declarator -> IDENTIFIER OPEN_PAREN . formal-parameter-list-opt CLOSE_PAREN
    (133) formal-parameter-list-opt -> . formal-parameter-list
    (134) formal-parameter-list-opt -> . empty
    (136) formal-parameter-list -> . fixed-parameters
    (227) empty -> .
    (137) fixed-parameters -> . fixed-parameter
    (138) fixed-parameters -> . fixed-parameters COMMA fixed-parameter
    (139) fixed-parameter -> . type IDENTIFIER
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE
    (13) class-type -> . IDENTIFIER
    (34) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET

    CLOSE_PAREN     reduce using rule 227 (empty -> .)
    BOOL            shift and go to state 44
    INT             shift and go to state 24
    UINT            shift and go to state 57
    CHAR            shift and go to state 30
    DOUBLE          shift and go to state 12
    IDENTIFIER      shift and go to state 113

    array-type                     shift and go to state 40
    fixed-parameters               shift and go to state 359
    simple-type                    shift and go to state 15
    formal-parameter-list-opt      shift and go to state 360
    class-type                     shift and go to state 60
    formal-parameter-list          shift and go to state 363
    type                           shift and go to state 358
    empty                          shift and go to state 362
    fixed-parameter                shift and go to state 361

state 331

    (216) constructor-declaration -> constructor-declarator constructor-body .

    CONST           reduce using rule 216 (constructor-declaration -> constructor-declarator constructor-body .)
    BITCOMP         reduce using rule 216 (constructor-declaration -> constructor-declarator constructor-body .)
    PUBLIC          reduce using rule 216 (constructor-declaration -> constructor-declarator constructor-body .)
    PRIVATE         reduce using rule 216 (constructor-declaration -> constructor-declarator constructor-body .)
    VOID            reduce using rule 216 (constructor-declaration -> constructor-declarator constructor-body .)
    IDENTIFIER      reduce using rule 216 (constructor-declaration -> constructor-declarator constructor-body .)
    BOOL            reduce using rule 216 (constructor-declaration -> constructor-declarator constructor-body .)
    INT             reduce using rule 216 (constructor-declaration -> constructor-declarator constructor-body .)
    UINT            reduce using rule 216 (constructor-declaration -> constructor-declarator constructor-body .)
    CHAR            reduce using rule 216 (constructor-declaration -> constructor-declarator constructor-body .)
    DOUBLE          reduce using rule 216 (constructor-declaration -> constructor-declarator constructor-body .)
    BLOCK_END       reduce using rule 216 (constructor-declaration -> constructor-declarator constructor-body .)


state 332

    (219) constructor-body -> DELIM .

    CONST           reduce using rule 219 (constructor-body -> DELIM .)
    BITCOMP         reduce using rule 219 (constructor-body -> DELIM .)
    PUBLIC          reduce using rule 219 (constructor-body -> DELIM .)
    PRIVATE         reduce using rule 219 (constructor-body -> DELIM .)
    VOID            reduce using rule 219 (constructor-body -> DELIM .)
    IDENTIFIER      reduce using rule 219 (constructor-body -> DELIM .)
    BOOL            reduce using rule 219 (constructor-body -> DELIM .)
    INT             reduce using rule 219 (constructor-body -> DELIM .)
    UINT            reduce using rule 219 (constructor-body -> DELIM .)
    CHAR            reduce using rule 219 (constructor-body -> DELIM .)
    DOUBLE          reduce using rule 219 (constructor-body -> DELIM .)
    BLOCK_END       reduce using rule 219 (constructor-body -> DELIM .)


state 333

    (218) constructor-body -> block .

    CONST           reduce using rule 218 (constructor-body -> block .)
    BITCOMP         reduce using rule 218 (constructor-body -> block .)
    PUBLIC          reduce using rule 218 (constructor-body -> block .)
    PRIVATE         reduce using rule 218 (constructor-body -> block .)
    VOID            reduce using rule 218 (constructor-body -> block .)
    IDENTIFIER      reduce using rule 218 (constructor-body -> block .)
    BOOL            reduce using rule 218 (constructor-body -> block .)
    INT             reduce using rule 218 (constructor-body -> block .)
    UINT            reduce using rule 218 (constructor-body -> block .)
    CHAR            reduce using rule 218 (constructor-body -> block .)
    DOUBLE          reduce using rule 218 (constructor-body -> block .)
    BLOCK_END       reduce using rule 218 (constructor-body -> block .)


state 334

    (24) constant-declaration -> modifier CONST . simple-type constant-declarators DELIM
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE

    BOOL            shift and go to state 44
    INT             shift and go to state 24
    UINT            shift and go to state 57
    CHAR            shift and go to state 30
    DOUBLE          shift and go to state 12

    simple-type                    shift and go to state 364

state 335

    (130) method-header -> modifier VOID . member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (135) member-name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 322

    member-name                    shift and go to state 365

state 336

    (120) field-declaration -> modifier type . variable-declarators DELIM
    (129) method-header -> modifier type . member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (124) variable-declarators -> . variable-declarator
    (125) variable-declarators -> . variable-declarators COMMA variable-declarator
    (135) member-name -> . IDENTIFIER
    (126) variable-declarator -> . IDENTIFIER
    (127) variable-declarator -> . IDENTIFIER ASSIGN variable-initializer

    IDENTIFIER      shift and go to state 327

    variable-declarator            shift and go to state 119
    variable-declarators           shift and go to state 366
    member-name                    shift and go to state 367

state 337

    (158) write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN . DELIM

    DELIM           shift and go to state 368


state 338

    (160) print-list -> expression COMMA . print-list
    (159) print-list -> . expression
    (160) print-list -> . expression COMMA print-list
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (108) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (104) prim-expression -> . IDENTIFIER
    (105) prim-expression -> . member-access
    (106) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (96) member-access -> . prim-expression DOT IDENTIFIER
    (102) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (103) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . parenthesized-expression
    (91) primary-no-array-creation-expression -> . member-access
    (92) primary-no-array-creation-expression -> . invocation-expression
    (93) primary-no-array-creation-expression -> . element-access
    (94) primary-no-array-creation-expression -> . object-creation-expression
    (223) literal -> . ICONST
    (224) literal -> . DCONST
    (225) literal -> . TRUE
    (226) literal -> . FALSE
    (95) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (107) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 83
    PLUS            shift and go to state 82
    MINUS           shift and go to state 74
    BITNOT          shift and go to state 99
    BITCOMP         shift and go to state 77
    TIMES           shift and go to state 87
    NEW             shift and go to state 72
    ICONST          shift and go to state 89
    DCONST          shift and go to state 100
    TRUE            shift and go to state 94
    FALSE           shift and go to state 93
    OPEN_PAREN      shift and go to state 79

    unary-expression               shift and go to state 91
    exclusive-or-expression        shift and go to state 68
    member-access                  shift and go to state 69
    relational-expression          shift and go to state 70
    additive-expression            shift and go to state 73
    primary-no-array-creation-expression shift and go to state 88
    inclusive-or-expression        shift and go to state 75
    prim-expression                shift and go to state 51
    element-access                 shift and go to state 78
    literal                        shift and go to state 86
    conditional-expression         shift and go to state 80
    conditional-and-expression     shift and go to state 81
    array-creation-expression      shift and go to state 71
    assignment                     shift and go to state 85
    object-creation-expression     shift and go to state 90
    and-expression                 shift and go to state 96
    equality-expression            shift and go to state 76
    shift-expression               shift and go to state 95
    print-list                     shift and go to state 369
    multiplicative-expression      shift and go to state 97
    conditional-or-expression      shift and go to state 103
    primary-expression             shift and go to state 101
    invocation-expression          shift and go to state 102
    expression                     shift and go to state 298
    parenthesized-expression       shift and go to state 104

state 339

    (161) read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN . DELIM

    DELIM           shift and go to state 370


state 340

    (174) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .
    (175) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block . ELSE M_else block

    IDENTIFIER      reduce using rule 174 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    BLOCK_BEGIN     reduce using rule 174 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    DELIM           reduce using rule 174 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    CONSOLE         reduce using rule 174 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    CONST           reduce using rule 174 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    IF              reduce using rule 174 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    SWITCH          reduce using rule 174 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    WHILE           reduce using rule 174 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    FOR             reduce using rule 174 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    DO              reduce using rule 174 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    BREAK           reduce using rule 174 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    CONTINUE        reduce using rule 174 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    GOTO            reduce using rule 174 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    RETURN          reduce using rule 174 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    NEW             reduce using rule 174 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    BOOL            reduce using rule 174 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    INT             reduce using rule 174 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    UINT            reduce using rule 174 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    CHAR            reduce using rule 174 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    DOUBLE          reduce using rule 174 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    $end            reduce using rule 174 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    BLOCK_END       reduce using rule 174 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    CASE            reduce using rule 174 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    DEFAULT         reduce using rule 174 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    ELSE            shift and go to state 371


state 341

    (79) array-initializer-opt -> array-initializer .

    TIMES           reduce using rule 79 (array-initializer-opt -> array-initializer .)
    DIV             reduce using rule 79 (array-initializer-opt -> array-initializer .)
    MOD             reduce using rule 79 (array-initializer-opt -> array-initializer .)
    PLUS            reduce using rule 79 (array-initializer-opt -> array-initializer .)
    MINUS           reduce using rule 79 (array-initializer-opt -> array-initializer .)
    LSHIFT          reduce using rule 79 (array-initializer-opt -> array-initializer .)
    RSHIFT          reduce using rule 79 (array-initializer-opt -> array-initializer .)
    LT              reduce using rule 79 (array-initializer-opt -> array-initializer .)
    GT              reduce using rule 79 (array-initializer-opt -> array-initializer .)
    LE              reduce using rule 79 (array-initializer-opt -> array-initializer .)
    GE              reduce using rule 79 (array-initializer-opt -> array-initializer .)
    EQ              reduce using rule 79 (array-initializer-opt -> array-initializer .)
    NE              reduce using rule 79 (array-initializer-opt -> array-initializer .)
    BITAND          reduce using rule 79 (array-initializer-opt -> array-initializer .)
    BITXOR          reduce using rule 79 (array-initializer-opt -> array-initializer .)
    BITOR           reduce using rule 79 (array-initializer-opt -> array-initializer .)
    LOGAND          reduce using rule 79 (array-initializer-opt -> array-initializer .)
    CONDOP          reduce using rule 79 (array-initializer-opt -> array-initializer .)
    LOGOR           reduce using rule 79 (array-initializer-opt -> array-initializer .)
    DELIM           reduce using rule 79 (array-initializer-opt -> array-initializer .)
    CLOSE_BRACKET   reduce using rule 79 (array-initializer-opt -> array-initializer .)
    COMMA           reduce using rule 79 (array-initializer-opt -> array-initializer .)
    CLOSE_PAREN     reduce using rule 79 (array-initializer-opt -> array-initializer .)
    COLON           reduce using rule 79 (array-initializer-opt -> array-initializer .)
    BLOCK_END       reduce using rule 79 (array-initializer-opt -> array-initializer .)


state 342

    (78) array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .

    TIMES           reduce using rule 78 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    DIV             reduce using rule 78 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    MOD             reduce using rule 78 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    PLUS            reduce using rule 78 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    MINUS           reduce using rule 78 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    LSHIFT          reduce using rule 78 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    RSHIFT          reduce using rule 78 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    LT              reduce using rule 78 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    GT              reduce using rule 78 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    LE              reduce using rule 78 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    GE              reduce using rule 78 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    EQ              reduce using rule 78 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    NE              reduce using rule 78 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    BITAND          reduce using rule 78 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    BITXOR          reduce using rule 78 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    BITOR           reduce using rule 78 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    LOGAND          reduce using rule 78 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    CONDOP          reduce using rule 78 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    LOGOR           reduce using rule 78 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    COMMA           reduce using rule 78 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    DELIM           reduce using rule 78 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    CLOSE_BRACKET   reduce using rule 78 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    CLOSE_PAREN     reduce using rule 78 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    COLON           reduce using rule 78 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    BLOCK_END       reduce using rule 78 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)


state 343

    (80) array-initializer-opt -> empty .

    TIMES           reduce using rule 80 (array-initializer-opt -> empty .)
    DIV             reduce using rule 80 (array-initializer-opt -> empty .)
    MOD             reduce using rule 80 (array-initializer-opt -> empty .)
    PLUS            reduce using rule 80 (array-initializer-opt -> empty .)
    MINUS           reduce using rule 80 (array-initializer-opt -> empty .)
    LSHIFT          reduce using rule 80 (array-initializer-opt -> empty .)
    RSHIFT          reduce using rule 80 (array-initializer-opt -> empty .)
    LT              reduce using rule 80 (array-initializer-opt -> empty .)
    GT              reduce using rule 80 (array-initializer-opt -> empty .)
    LE              reduce using rule 80 (array-initializer-opt -> empty .)
    GE              reduce using rule 80 (array-initializer-opt -> empty .)
    EQ              reduce using rule 80 (array-initializer-opt -> empty .)
    NE              reduce using rule 80 (array-initializer-opt -> empty .)
    BITAND          reduce using rule 80 (array-initializer-opt -> empty .)
    BITXOR          reduce using rule 80 (array-initializer-opt -> empty .)
    BITOR           reduce using rule 80 (array-initializer-opt -> empty .)
    LOGAND          reduce using rule 80 (array-initializer-opt -> empty .)
    CONDOP          reduce using rule 80 (array-initializer-opt -> empty .)
    LOGOR           reduce using rule 80 (array-initializer-opt -> empty .)
    DELIM           reduce using rule 80 (array-initializer-opt -> empty .)
    CLOSE_BRACKET   reduce using rule 80 (array-initializer-opt -> empty .)
    COMMA           reduce using rule 80 (array-initializer-opt -> empty .)
    CLOSE_PAREN     reduce using rule 80 (array-initializer-opt -> empty .)
    COLON           reduce using rule 80 (array-initializer-opt -> empty .)
    BLOCK_END       reduce using rule 80 (array-initializer-opt -> empty .)


state 344

    (196) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM . M_quad for-iterator-opt CLOSE_PAREN M_quad block
    (178) M_quad -> . empty
    (227) empty -> .

    IDENTIFIER      reduce using rule 227 (empty -> .)
    NEW             reduce using rule 227 (empty -> .)
    CLOSE_PAREN     reduce using rule 227 (empty -> .)

    M_quad                         shift and go to state 372
    empty                          shift and go to state 65

state 345

    (193) while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .

    IDENTIFIER      reduce using rule 193 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    BLOCK_BEGIN     reduce using rule 193 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    DELIM           reduce using rule 193 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    CONSOLE         reduce using rule 193 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    CONST           reduce using rule 193 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    IF              reduce using rule 193 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    SWITCH          reduce using rule 193 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    WHILE           reduce using rule 193 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    FOR             reduce using rule 193 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    DO              reduce using rule 193 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    BREAK           reduce using rule 193 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    CONTINUE        reduce using rule 193 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    GOTO            reduce using rule 193 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    RETURN          reduce using rule 193 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    NEW             reduce using rule 193 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    BOOL            reduce using rule 193 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    INT             reduce using rule 193 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    UINT            reduce using rule 193 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    CHAR            reduce using rule 193 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    DOUBLE          reduce using rule 193 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    $end            reduce using rule 193 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    BLOCK_END       reduce using rule 193 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    CASE            reduce using rule 193 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    DEFAULT         reduce using rule 193 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)


state 346

    (188) switch-label -> CASE expression . COLON

    COLON           shift and go to state 373


state 347

    (189) switch-label -> DEFAULT COLON .

    CASE            reduce using rule 189 (switch-label -> DEFAULT COLON .)
    DEFAULT         reduce using rule 189 (switch-label -> DEFAULT COLON .)
    IDENTIFIER      reduce using rule 189 (switch-label -> DEFAULT COLON .)
    BLOCK_BEGIN     reduce using rule 189 (switch-label -> DEFAULT COLON .)
    DELIM           reduce using rule 189 (switch-label -> DEFAULT COLON .)
    CONSOLE         reduce using rule 189 (switch-label -> DEFAULT COLON .)
    CONST           reduce using rule 189 (switch-label -> DEFAULT COLON .)
    IF              reduce using rule 189 (switch-label -> DEFAULT COLON .)
    SWITCH          reduce using rule 189 (switch-label -> DEFAULT COLON .)
    WHILE           reduce using rule 189 (switch-label -> DEFAULT COLON .)
    FOR             reduce using rule 189 (switch-label -> DEFAULT COLON .)
    DO              reduce using rule 189 (switch-label -> DEFAULT COLON .)
    BREAK           reduce using rule 189 (switch-label -> DEFAULT COLON .)
    CONTINUE        reduce using rule 189 (switch-label -> DEFAULT COLON .)
    GOTO            reduce using rule 189 (switch-label -> DEFAULT COLON .)
    RETURN          reduce using rule 189 (switch-label -> DEFAULT COLON .)
    NEW             reduce using rule 189 (switch-label -> DEFAULT COLON .)
    BOOL            reduce using rule 189 (switch-label -> DEFAULT COLON .)
    INT             reduce using rule 189 (switch-label -> DEFAULT COLON .)
    UINT            reduce using rule 189 (switch-label -> DEFAULT COLON .)
    CHAR            reduce using rule 189 (switch-label -> DEFAULT COLON .)
    DOUBLE          reduce using rule 189 (switch-label -> DEFAULT COLON .)


state 348

    (187) switch-labels -> switch-labels switch-label .

    CASE            reduce using rule 187 (switch-labels -> switch-labels switch-label .)
    DEFAULT         reduce using rule 187 (switch-labels -> switch-labels switch-label .)
    IDENTIFIER      reduce using rule 187 (switch-labels -> switch-labels switch-label .)
    BLOCK_BEGIN     reduce using rule 187 (switch-labels -> switch-labels switch-label .)
    DELIM           reduce using rule 187 (switch-labels -> switch-labels switch-label .)
    CONSOLE         reduce using rule 187 (switch-labels -> switch-labels switch-label .)
    CONST           reduce using rule 187 (switch-labels -> switch-labels switch-label .)
    IF              reduce using rule 187 (switch-labels -> switch-labels switch-label .)
    SWITCH          reduce using rule 187 (switch-labels -> switch-labels switch-label .)
    WHILE           reduce using rule 187 (switch-labels -> switch-labels switch-label .)
    FOR             reduce using rule 187 (switch-labels -> switch-labels switch-label .)
    DO              reduce using rule 187 (switch-labels -> switch-labels switch-label .)
    BREAK           reduce using rule 187 (switch-labels -> switch-labels switch-label .)
    CONTINUE        reduce using rule 187 (switch-labels -> switch-labels switch-label .)
    GOTO            reduce using rule 187 (switch-labels -> switch-labels switch-label .)
    RETURN          reduce using rule 187 (switch-labels -> switch-labels switch-label .)
    NEW             reduce using rule 187 (switch-labels -> switch-labels switch-label .)
    BOOL            reduce using rule 187 (switch-labels -> switch-labels switch-label .)
    INT             reduce using rule 187 (switch-labels -> switch-labels switch-label .)
    UINT            reduce using rule 187 (switch-labels -> switch-labels switch-label .)
    CHAR            reduce using rule 187 (switch-labels -> switch-labels switch-label .)
    DOUBLE          reduce using rule 187 (switch-labels -> switch-labels switch-label .)


state 349

    (185) switch-section -> switch-labels statement-list .
    (147) statement-list -> statement-list . statement
    (148) statement -> . labeled-statement
    (149) statement -> . declaration-statement
    (150) statement -> . block
    (151) statement -> . empty-statement
    (152) statement -> . expression-statement
    (153) statement -> . selection-statement
    (154) statement -> . iteration-statement
    (155) statement -> . jump-statement
    (156) statement -> . write-statement
    (157) statement -> . read-statement
    (162) labeled-statement -> . IDENTIFIER COLON statement
    (163) declaration-statement -> . local-variable-declaration DELIM
    (164) declaration-statement -> . local-constant-declaration DELIM
    (142) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END
    (167) empty-statement -> . DELIM
    (168) expression-statement -> . statement-expression DELIM
    (172) selection-statement -> . if-statement M_quad
    (173) selection-statement -> . switch-statement
    (190) iteration-statement -> . while-statement M_quad
    (191) iteration-statement -> . for-statement M_quad
    (192) iteration-statement -> . do-statement M_quad
    (206) jump-statement -> . break-statement
    (207) jump-statement -> . continue-statement
    (208) jump-statement -> . goto-statement
    (209) jump-statement -> . return-statement
    (158) write-statement -> . CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM
    (161) read-statement -> . CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM
    (165) local-variable-declaration -> . type variable-declarators
    (166) local-constant-declaration -> . CONST type constant-declarators
    (169) statement-expression -> . invocation-expression
    (170) statement-expression -> . object-creation-expression
    (171) statement-expression -> . assignment
    (174) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block
    (175) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block
    (179) switch-statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block
    (193) while-statement -> . WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block
    (196) for-statement -> . FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block
    (195) do-statement -> . DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM
    (210) break-statement -> . BREAK DELIM
    (211) continue-statement -> . CONTINUE DELIM
    (212) goto-statement -> . GOTO IDENTIFIER DELIM
    (213) return-statement -> . RETURN expression-opt DELIM
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (107) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (108) assignment -> . prim-expression assignment-operator expression
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE
    (13) class-type -> . IDENTIFIER
    (34) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET
    (96) member-access -> . prim-expression DOT IDENTIFIER
    (104) prim-expression -> . IDENTIFIER
    (105) prim-expression -> . member-access
    (106) prim-expression -> . element-access
    (102) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (103) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET

    CASE            reduce using rule 185 (switch-section -> switch-labels statement-list .)
    DEFAULT         reduce using rule 185 (switch-section -> switch-labels statement-list .)
    BLOCK_END       reduce using rule 185 (switch-section -> switch-labels statement-list .)
    IDENTIFIER      shift and go to state 37
    BLOCK_BEGIN     shift and go to state 50
    DELIM           shift and go to state 4
    CONSOLE         shift and go to state 54
    CONST           shift and go to state 49
    IF              shift and go to state 59
    SWITCH          shift and go to state 35
    WHILE           shift and go to state 31
    FOR             shift and go to state 21
    DO              shift and go to state 48
    BREAK           shift and go to state 43
    CONTINUE        shift and go to state 27
    GOTO            shift and go to state 7
    RETURN          shift and go to state 14
    NEW             shift and go to state 33
    BOOL            shift and go to state 44
    INT             shift and go to state 24
    UINT            shift and go to state 57
    CHAR            shift and go to state 30
    DOUBLE          shift and go to state 12

    return-statement               shift and go to state 16
    write-statement                shift and go to state 1
    member-access                  shift and go to state 2
    selection-statement            shift and go to state 29
    empty-statement                shift and go to state 32
    expression-statement           shift and go to state 3
    break-statement                shift and go to state 34
    prim-expression                shift and go to state 51
    element-access                 shift and go to state 18
    statement-expression           shift and go to state 5
    local-constant-declaration     shift and go to state 19
    statement                      shift and go to state 123
    assignment                     shift and go to state 55
    for-statement                  shift and go to state 6
    type                           shift and go to state 38
    read-statement                 shift and go to state 53
    do-statement                   shift and go to state 20
    array-type                     shift and go to state 40
    continue-statement             shift and go to state 22
    invocation-expression          shift and go to state 13
    labeled-statement              shift and go to state 8
    declaration-statement          shift and go to state 41
    object-creation-expression     shift and go to state 58
    switch-statement               shift and go to state 9
    jump-statement                 shift and go to state 10
    iteration-statement            shift and go to state 42
    local-variable-declaration     shift and go to state 23
    goto-statement                 shift and go to state 25
    if-statement                   shift and go to state 26
    class-type                     shift and go to state 60
    while-statement                shift and go to state 46
    simple-type                    shift and go to state 15
    block                          shift and go to state 28

state 350

    (180) switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .

    IDENTIFIER      reduce using rule 180 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    BLOCK_BEGIN     reduce using rule 180 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    DELIM           reduce using rule 180 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    CONSOLE         reduce using rule 180 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    CONST           reduce using rule 180 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    IF              reduce using rule 180 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    SWITCH          reduce using rule 180 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    WHILE           reduce using rule 180 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    FOR             reduce using rule 180 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    DO              reduce using rule 180 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    BREAK           reduce using rule 180 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    CONTINUE        reduce using rule 180 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    GOTO            reduce using rule 180 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    RETURN          reduce using rule 180 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    NEW             reduce using rule 180 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    BOOL            reduce using rule 180 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    INT             reduce using rule 180 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    UINT            reduce using rule 180 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    CHAR            reduce using rule 180 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    DOUBLE          reduce using rule 180 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    $end            reduce using rule 180 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    BLOCK_END       reduce using rule 180 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    CASE            reduce using rule 180 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    DEFAULT         reduce using rule 180 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)


state 351

    (184) switch-sections -> switch-sections switch-section .

    CASE            reduce using rule 184 (switch-sections -> switch-sections switch-section .)
    DEFAULT         reduce using rule 184 (switch-sections -> switch-sections switch-section .)
    BLOCK_END       reduce using rule 184 (switch-sections -> switch-sections switch-section .)


state 352

    (195) do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression . CLOSE_PAREN DELIM

    CLOSE_PAREN     shift and go to state 374


state 353

    (132) method-header -> VOID member-name OPEN_PAREN . formal-parameter-list-opt CLOSE_PAREN
    (133) formal-parameter-list-opt -> . formal-parameter-list
    (134) formal-parameter-list-opt -> . empty
    (136) formal-parameter-list -> . fixed-parameters
    (227) empty -> .
    (137) fixed-parameters -> . fixed-parameter
    (138) fixed-parameters -> . fixed-parameters COMMA fixed-parameter
    (139) fixed-parameter -> . type IDENTIFIER
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE
    (13) class-type -> . IDENTIFIER
    (34) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET

    CLOSE_PAREN     reduce using rule 227 (empty -> .)
    BOOL            shift and go to state 44
    INT             shift and go to state 24
    UINT            shift and go to state 57
    CHAR            shift and go to state 30
    DOUBLE          shift and go to state 12
    IDENTIFIER      shift and go to state 113

    array-type                     shift and go to state 40
    fixed-parameters               shift and go to state 359
    simple-type                    shift and go to state 15
    formal-parameter-list-opt      shift and go to state 375
    class-type                     shift and go to state 60
    formal-parameter-list          shift and go to state 363
    type                           shift and go to state 358
    empty                          shift and go to state 362
    fixed-parameter                shift and go to state 361

state 354

    (25) constant-declaration -> CONST simple-type constant-declarators . DELIM
    (36) constant-declarators -> constant-declarators . COMMA constant-declarator

    DELIM           shift and go to state 376
    COMMA           shift and go to state 251


state 355

    (220) destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN . CLOSE_PAREN destructor-body

    CLOSE_PAREN     shift and go to state 377


state 356

    (121) field-declaration -> type variable-declarators DELIM .

    CONST           reduce using rule 121 (field-declaration -> type variable-declarators DELIM .)
    BITCOMP         reduce using rule 121 (field-declaration -> type variable-declarators DELIM .)
    PUBLIC          reduce using rule 121 (field-declaration -> type variable-declarators DELIM .)
    PRIVATE         reduce using rule 121 (field-declaration -> type variable-declarators DELIM .)
    VOID            reduce using rule 121 (field-declaration -> type variable-declarators DELIM .)
    IDENTIFIER      reduce using rule 121 (field-declaration -> type variable-declarators DELIM .)
    BOOL            reduce using rule 121 (field-declaration -> type variable-declarators DELIM .)
    INT             reduce using rule 121 (field-declaration -> type variable-declarators DELIM .)
    UINT            reduce using rule 121 (field-declaration -> type variable-declarators DELIM .)
    CHAR            reduce using rule 121 (field-declaration -> type variable-declarators DELIM .)
    DOUBLE          reduce using rule 121 (field-declaration -> type variable-declarators DELIM .)
    BLOCK_END       reduce using rule 121 (field-declaration -> type variable-declarators DELIM .)


state 357

    (131) method-header -> type member-name OPEN_PAREN . formal-parameter-list-opt CLOSE_PAREN
    (133) formal-parameter-list-opt -> . formal-parameter-list
    (134) formal-parameter-list-opt -> . empty
    (136) formal-parameter-list -> . fixed-parameters
    (227) empty -> .
    (137) fixed-parameters -> . fixed-parameter
    (138) fixed-parameters -> . fixed-parameters COMMA fixed-parameter
    (139) fixed-parameter -> . type IDENTIFIER
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE
    (13) class-type -> . IDENTIFIER
    (34) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET

    CLOSE_PAREN     reduce using rule 227 (empty -> .)
    BOOL            shift and go to state 44
    INT             shift and go to state 24
    UINT            shift and go to state 57
    CHAR            shift and go to state 30
    DOUBLE          shift and go to state 12
    IDENTIFIER      shift and go to state 113

    array-type                     shift and go to state 40
    fixed-parameters               shift and go to state 359
    simple-type                    shift and go to state 15
    formal-parameter-list-opt      shift and go to state 378
    class-type                     shift and go to state 60
    fixed-parameter                shift and go to state 361
    type                           shift and go to state 358
    empty                          shift and go to state 362
    formal-parameter-list          shift and go to state 363

state 358

    (139) fixed-parameter -> type . IDENTIFIER

    IDENTIFIER      shift and go to state 379


state 359

    (136) formal-parameter-list -> fixed-parameters .
    (138) fixed-parameters -> fixed-parameters . COMMA fixed-parameter

    CLOSE_PAREN     reduce using rule 136 (formal-parameter-list -> fixed-parameters .)
    COMMA           shift and go to state 380


state 360

    (217) constructor-declarator -> IDENTIFIER OPEN_PAREN formal-parameter-list-opt . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 381


state 361

    (137) fixed-parameters -> fixed-parameter .

    COMMA           reduce using rule 137 (fixed-parameters -> fixed-parameter .)
    CLOSE_PAREN     reduce using rule 137 (fixed-parameters -> fixed-parameter .)


state 362

    (134) formal-parameter-list-opt -> empty .

    CLOSE_PAREN     reduce using rule 134 (formal-parameter-list-opt -> empty .)


state 363

    (133) formal-parameter-list-opt -> formal-parameter-list .

    CLOSE_PAREN     reduce using rule 133 (formal-parameter-list-opt -> formal-parameter-list .)


state 364

    (24) constant-declaration -> modifier CONST simple-type . constant-declarators DELIM
    (35) constant-declarators -> . constant-declarator
    (36) constant-declarators -> . constant-declarators COMMA constant-declarator
    (37) constant-declarator -> . IDENTIFIER ASSIGN expression

    IDENTIFIER      shift and go to state 199

    constant-declarators           shift and go to state 382
    constant-declarator            shift and go to state 200

state 365

    (130) method-header -> modifier VOID member-name . OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN

    OPEN_PAREN      shift and go to state 383


state 366

    (120) field-declaration -> modifier type variable-declarators . DELIM
    (125) variable-declarators -> variable-declarators . COMMA variable-declarator

    DELIM           shift and go to state 384
    COMMA           shift and go to state 195


state 367

    (129) method-header -> modifier type member-name . OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN

    OPEN_PAREN      shift and go to state 385


state 368

    (158) write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .

    IDENTIFIER      reduce using rule 158 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    BLOCK_BEGIN     reduce using rule 158 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    DELIM           reduce using rule 158 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    CONSOLE         reduce using rule 158 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    CONST           reduce using rule 158 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    IF              reduce using rule 158 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    SWITCH          reduce using rule 158 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    WHILE           reduce using rule 158 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    FOR             reduce using rule 158 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    DO              reduce using rule 158 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    BREAK           reduce using rule 158 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    CONTINUE        reduce using rule 158 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    GOTO            reduce using rule 158 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    RETURN          reduce using rule 158 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    NEW             reduce using rule 158 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    BOOL            reduce using rule 158 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    INT             reduce using rule 158 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    UINT            reduce using rule 158 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    CHAR            reduce using rule 158 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    DOUBLE          reduce using rule 158 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    $end            reduce using rule 158 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    BLOCK_END       reduce using rule 158 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    CASE            reduce using rule 158 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    DEFAULT         reduce using rule 158 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)


state 369

    (160) print-list -> expression COMMA print-list .

    CLOSE_PAREN     reduce using rule 160 (print-list -> expression COMMA print-list .)


state 370

    (161) read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .

    IDENTIFIER      reduce using rule 161 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    BLOCK_BEGIN     reduce using rule 161 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    DELIM           reduce using rule 161 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    CONSOLE         reduce using rule 161 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    CONST           reduce using rule 161 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    IF              reduce using rule 161 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    SWITCH          reduce using rule 161 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    WHILE           reduce using rule 161 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    FOR             reduce using rule 161 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    DO              reduce using rule 161 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    BREAK           reduce using rule 161 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    CONTINUE        reduce using rule 161 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    GOTO            reduce using rule 161 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    RETURN          reduce using rule 161 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    NEW             reduce using rule 161 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    BOOL            reduce using rule 161 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    INT             reduce using rule 161 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    UINT            reduce using rule 161 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    CHAR            reduce using rule 161 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    DOUBLE          reduce using rule 161 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    BLOCK_END       reduce using rule 161 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    $end            reduce using rule 161 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    CASE            reduce using rule 161 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    DEFAULT         reduce using rule 161 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)


state 371

    (175) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE . M_else block
    (177) M_else -> . empty
    (227) empty -> .

    BLOCK_BEGIN     reduce using rule 227 (empty -> .)

    empty                          shift and go to state 387
    M_else                         shift and go to state 386

state 372

    (196) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad . for-iterator-opt CLOSE_PAREN M_quad block
    (201) for-iterator-opt -> . for-iterator
    (202) for-iterator-opt -> . empty
    (203) for-iterator -> . statement-expression-list
    (227) empty -> .
    (204) statement-expression-list -> . statement-expression
    (205) statement-expression-list -> . statement-expression-list COMMA statement-expression
    (169) statement-expression -> . invocation-expression
    (170) statement-expression -> . object-creation-expression
    (171) statement-expression -> . assignment
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (107) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (108) assignment -> . prim-expression assignment-operator expression
    (96) member-access -> . prim-expression DOT IDENTIFIER
    (104) prim-expression -> . IDENTIFIER
    (105) prim-expression -> . member-access
    (106) prim-expression -> . element-access
    (102) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (103) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET

    CLOSE_PAREN     reduce using rule 227 (empty -> .)
    IDENTIFIER      shift and go to state 186
    NEW             shift and go to state 33

    for-iterator-opt               shift and go to state 388
    assignment                     shift and go to state 55
    prim-expression                shift and go to state 51
    member-access                  shift and go to state 2
    element-access                 shift and go to state 18
    invocation-expression          shift and go to state 13
    statement-expression           shift and go to state 184
    empty                          shift and go to state 391
    object-creation-expression     shift and go to state 58
    for-iterator                   shift and go to state 389
    statement-expression-list      shift and go to state 390

state 373

    (188) switch-label -> CASE expression COLON .

    CASE            reduce using rule 188 (switch-label -> CASE expression COLON .)
    DEFAULT         reduce using rule 188 (switch-label -> CASE expression COLON .)
    IDENTIFIER      reduce using rule 188 (switch-label -> CASE expression COLON .)
    BLOCK_BEGIN     reduce using rule 188 (switch-label -> CASE expression COLON .)
    DELIM           reduce using rule 188 (switch-label -> CASE expression COLON .)
    CONSOLE         reduce using rule 188 (switch-label -> CASE expression COLON .)
    CONST           reduce using rule 188 (switch-label -> CASE expression COLON .)
    IF              reduce using rule 188 (switch-label -> CASE expression COLON .)
    SWITCH          reduce using rule 188 (switch-label -> CASE expression COLON .)
    WHILE           reduce using rule 188 (switch-label -> CASE expression COLON .)
    FOR             reduce using rule 188 (switch-label -> CASE expression COLON .)
    DO              reduce using rule 188 (switch-label -> CASE expression COLON .)
    BREAK           reduce using rule 188 (switch-label -> CASE expression COLON .)
    CONTINUE        reduce using rule 188 (switch-label -> CASE expression COLON .)
    GOTO            reduce using rule 188 (switch-label -> CASE expression COLON .)
    RETURN          reduce using rule 188 (switch-label -> CASE expression COLON .)
    NEW             reduce using rule 188 (switch-label -> CASE expression COLON .)
    BOOL            reduce using rule 188 (switch-label -> CASE expression COLON .)
    INT             reduce using rule 188 (switch-label -> CASE expression COLON .)
    UINT            reduce using rule 188 (switch-label -> CASE expression COLON .)
    CHAR            reduce using rule 188 (switch-label -> CASE expression COLON .)
    DOUBLE          reduce using rule 188 (switch-label -> CASE expression COLON .)


state 374

    (195) do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN . DELIM

    DELIM           shift and go to state 392


state 375

    (132) method-header -> VOID member-name OPEN_PAREN formal-parameter-list-opt . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 393


state 376

    (25) constant-declaration -> CONST simple-type constant-declarators DELIM .

    CONST           reduce using rule 25 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    BITCOMP         reduce using rule 25 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    PUBLIC          reduce using rule 25 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    PRIVATE         reduce using rule 25 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    VOID            reduce using rule 25 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    IDENTIFIER      reduce using rule 25 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    BOOL            reduce using rule 25 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    INT             reduce using rule 25 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    UINT            reduce using rule 25 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    CHAR            reduce using rule 25 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    DOUBLE          reduce using rule 25 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    BLOCK_END       reduce using rule 25 (constant-declaration -> CONST simple-type constant-declarators DELIM .)


state 377

    (220) destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN . destructor-body
    (221) destructor-body -> . block
    (222) destructor-body -> . DELIM
    (142) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END

    DELIM           shift and go to state 394
    BLOCK_BEGIN     shift and go to state 50

    destructor-body                shift and go to state 395
    block                          shift and go to state 396

state 378

    (131) method-header -> type member-name OPEN_PAREN formal-parameter-list-opt . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 397


state 379

    (139) fixed-parameter -> type IDENTIFIER .

    COMMA           reduce using rule 139 (fixed-parameter -> type IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 139 (fixed-parameter -> type IDENTIFIER .)


state 380

    (138) fixed-parameters -> fixed-parameters COMMA . fixed-parameter
    (139) fixed-parameter -> . type IDENTIFIER
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE
    (13) class-type -> . IDENTIFIER
    (34) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET

    BOOL            shift and go to state 44
    INT             shift and go to state 24
    UINT            shift and go to state 57
    CHAR            shift and go to state 30
    DOUBLE          shift and go to state 12
    IDENTIFIER      shift and go to state 113

    array-type                     shift and go to state 40
    simple-type                    shift and go to state 15
    class-type                     shift and go to state 60
    type                           shift and go to state 358
    fixed-parameter                shift and go to state 398

state 381

    (217) constructor-declarator -> IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .

    DELIM           reduce using rule 217 (constructor-declarator -> IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)
    BLOCK_BEGIN     reduce using rule 217 (constructor-declarator -> IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)


state 382

    (24) constant-declaration -> modifier CONST simple-type constant-declarators . DELIM
    (36) constant-declarators -> constant-declarators . COMMA constant-declarator

    DELIM           shift and go to state 399
    COMMA           shift and go to state 251


state 383

    (130) method-header -> modifier VOID member-name OPEN_PAREN . formal-parameter-list-opt CLOSE_PAREN
    (133) formal-parameter-list-opt -> . formal-parameter-list
    (134) formal-parameter-list-opt -> . empty
    (136) formal-parameter-list -> . fixed-parameters
    (227) empty -> .
    (137) fixed-parameters -> . fixed-parameter
    (138) fixed-parameters -> . fixed-parameters COMMA fixed-parameter
    (139) fixed-parameter -> . type IDENTIFIER
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE
    (13) class-type -> . IDENTIFIER
    (34) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET

    CLOSE_PAREN     reduce using rule 227 (empty -> .)
    BOOL            shift and go to state 44
    INT             shift and go to state 24
    UINT            shift and go to state 57
    CHAR            shift and go to state 30
    DOUBLE          shift and go to state 12
    IDENTIFIER      shift and go to state 113

    array-type                     shift and go to state 40
    class-type                     shift and go to state 60
    fixed-parameters               shift and go to state 359
    simple-type                    shift and go to state 15
    formal-parameter-list-opt      shift and go to state 400
    fixed-parameter                shift and go to state 361
    type                           shift and go to state 358
    empty                          shift and go to state 362
    formal-parameter-list          shift and go to state 363

state 384

    (120) field-declaration -> modifier type variable-declarators DELIM .

    CONST           reduce using rule 120 (field-declaration -> modifier type variable-declarators DELIM .)
    BITCOMP         reduce using rule 120 (field-declaration -> modifier type variable-declarators DELIM .)
    PUBLIC          reduce using rule 120 (field-declaration -> modifier type variable-declarators DELIM .)
    PRIVATE         reduce using rule 120 (field-declaration -> modifier type variable-declarators DELIM .)
    VOID            reduce using rule 120 (field-declaration -> modifier type variable-declarators DELIM .)
    IDENTIFIER      reduce using rule 120 (field-declaration -> modifier type variable-declarators DELIM .)
    BOOL            reduce using rule 120 (field-declaration -> modifier type variable-declarators DELIM .)
    INT             reduce using rule 120 (field-declaration -> modifier type variable-declarators DELIM .)
    UINT            reduce using rule 120 (field-declaration -> modifier type variable-declarators DELIM .)
    CHAR            reduce using rule 120 (field-declaration -> modifier type variable-declarators DELIM .)
    DOUBLE          reduce using rule 120 (field-declaration -> modifier type variable-declarators DELIM .)
    BLOCK_END       reduce using rule 120 (field-declaration -> modifier type variable-declarators DELIM .)


state 385

    (129) method-header -> modifier type member-name OPEN_PAREN . formal-parameter-list-opt CLOSE_PAREN
    (133) formal-parameter-list-opt -> . formal-parameter-list
    (134) formal-parameter-list-opt -> . empty
    (136) formal-parameter-list -> . fixed-parameters
    (227) empty -> .
    (137) fixed-parameters -> . fixed-parameter
    (138) fixed-parameters -> . fixed-parameters COMMA fixed-parameter
    (139) fixed-parameter -> . type IDENTIFIER
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE
    (13) class-type -> . IDENTIFIER
    (34) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET

    CLOSE_PAREN     reduce using rule 227 (empty -> .)
    BOOL            shift and go to state 44
    INT             shift and go to state 24
    UINT            shift and go to state 57
    CHAR            shift and go to state 30
    DOUBLE          shift and go to state 12
    IDENTIFIER      shift and go to state 113

    array-type                     shift and go to state 40
    class-type                     shift and go to state 60
    fixed-parameters               shift and go to state 359
    simple-type                    shift and go to state 15
    formal-parameter-list-opt      shift and go to state 401
    fixed-parameter                shift and go to state 361
    type                           shift and go to state 358
    empty                          shift and go to state 362
    formal-parameter-list          shift and go to state 363

state 386

    (175) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else . block
    (142) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END

    BLOCK_BEGIN     shift and go to state 50

    block                          shift and go to state 402

state 387

    (177) M_else -> empty .

    BLOCK_BEGIN     reduce using rule 177 (M_else -> empty .)


state 388

    (196) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt . CLOSE_PAREN M_quad block

    CLOSE_PAREN     shift and go to state 403


state 389

    (201) for-iterator-opt -> for-iterator .

    CLOSE_PAREN     reduce using rule 201 (for-iterator-opt -> for-iterator .)


state 390

    (203) for-iterator -> statement-expression-list .
    (205) statement-expression-list -> statement-expression-list . COMMA statement-expression

    CLOSE_PAREN     reduce using rule 203 (for-iterator -> statement-expression-list .)
    COMMA           shift and go to state 238


state 391

    (202) for-iterator-opt -> empty .

    CLOSE_PAREN     reduce using rule 202 (for-iterator-opt -> empty .)


state 392

    (195) do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .

    IDENTIFIER      reduce using rule 195 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    BLOCK_BEGIN     reduce using rule 195 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    DELIM           reduce using rule 195 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    CONSOLE         reduce using rule 195 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    CONST           reduce using rule 195 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    IF              reduce using rule 195 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    SWITCH          reduce using rule 195 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    WHILE           reduce using rule 195 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    FOR             reduce using rule 195 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    DO              reduce using rule 195 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    BREAK           reduce using rule 195 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    CONTINUE        reduce using rule 195 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    GOTO            reduce using rule 195 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    RETURN          reduce using rule 195 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    NEW             reduce using rule 195 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    BOOL            reduce using rule 195 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    INT             reduce using rule 195 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    UINT            reduce using rule 195 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    CHAR            reduce using rule 195 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    DOUBLE          reduce using rule 195 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    BLOCK_END       reduce using rule 195 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    $end            reduce using rule 195 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    CASE            reduce using rule 195 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    DEFAULT         reduce using rule 195 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)


state 393

    (132) method-header -> VOID member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .

    DELIM           reduce using rule 132 (method-header -> VOID member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)
    BLOCK_BEGIN     reduce using rule 132 (method-header -> VOID member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)


state 394

    (222) destructor-body -> DELIM .

    CONST           reduce using rule 222 (destructor-body -> DELIM .)
    BITCOMP         reduce using rule 222 (destructor-body -> DELIM .)
    PUBLIC          reduce using rule 222 (destructor-body -> DELIM .)
    PRIVATE         reduce using rule 222 (destructor-body -> DELIM .)
    VOID            reduce using rule 222 (destructor-body -> DELIM .)
    IDENTIFIER      reduce using rule 222 (destructor-body -> DELIM .)
    BOOL            reduce using rule 222 (destructor-body -> DELIM .)
    INT             reduce using rule 222 (destructor-body -> DELIM .)
    UINT            reduce using rule 222 (destructor-body -> DELIM .)
    CHAR            reduce using rule 222 (destructor-body -> DELIM .)
    DOUBLE          reduce using rule 222 (destructor-body -> DELIM .)
    BLOCK_END       reduce using rule 222 (destructor-body -> DELIM .)


state 395

    (220) destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .

    CONST           reduce using rule 220 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    BITCOMP         reduce using rule 220 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    PUBLIC          reduce using rule 220 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    PRIVATE         reduce using rule 220 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    VOID            reduce using rule 220 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    IDENTIFIER      reduce using rule 220 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    BOOL            reduce using rule 220 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    INT             reduce using rule 220 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    UINT            reduce using rule 220 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    CHAR            reduce using rule 220 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    DOUBLE          reduce using rule 220 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    BLOCK_END       reduce using rule 220 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)


state 396

    (221) destructor-body -> block .

    CONST           reduce using rule 221 (destructor-body -> block .)
    BITCOMP         reduce using rule 221 (destructor-body -> block .)
    PUBLIC          reduce using rule 221 (destructor-body -> block .)
    PRIVATE         reduce using rule 221 (destructor-body -> block .)
    VOID            reduce using rule 221 (destructor-body -> block .)
    IDENTIFIER      reduce using rule 221 (destructor-body -> block .)
    BOOL            reduce using rule 221 (destructor-body -> block .)
    INT             reduce using rule 221 (destructor-body -> block .)
    UINT            reduce using rule 221 (destructor-body -> block .)
    CHAR            reduce using rule 221 (destructor-body -> block .)
    DOUBLE          reduce using rule 221 (destructor-body -> block .)
    BLOCK_END       reduce using rule 221 (destructor-body -> block .)


state 397

    (131) method-header -> type member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .

    DELIM           reduce using rule 131 (method-header -> type member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)
    BLOCK_BEGIN     reduce using rule 131 (method-header -> type member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)


state 398

    (138) fixed-parameters -> fixed-parameters COMMA fixed-parameter .

    COMMA           reduce using rule 138 (fixed-parameters -> fixed-parameters COMMA fixed-parameter .)
    CLOSE_PAREN     reduce using rule 138 (fixed-parameters -> fixed-parameters COMMA fixed-parameter .)


state 399

    (24) constant-declaration -> modifier CONST simple-type constant-declarators DELIM .

    CONST           reduce using rule 24 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    BITCOMP         reduce using rule 24 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    PUBLIC          reduce using rule 24 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    PRIVATE         reduce using rule 24 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    VOID            reduce using rule 24 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    IDENTIFIER      reduce using rule 24 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    BOOL            reduce using rule 24 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    INT             reduce using rule 24 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    UINT            reduce using rule 24 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    CHAR            reduce using rule 24 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    DOUBLE          reduce using rule 24 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    BLOCK_END       reduce using rule 24 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)


state 400

    (130) method-header -> modifier VOID member-name OPEN_PAREN formal-parameter-list-opt . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 404


state 401

    (129) method-header -> modifier type member-name OPEN_PAREN formal-parameter-list-opt . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 405


state 402

    (175) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .

    IDENTIFIER      reduce using rule 175 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    BLOCK_BEGIN     reduce using rule 175 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    DELIM           reduce using rule 175 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    CONSOLE         reduce using rule 175 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    CONST           reduce using rule 175 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    IF              reduce using rule 175 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    SWITCH          reduce using rule 175 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    WHILE           reduce using rule 175 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    FOR             reduce using rule 175 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    DO              reduce using rule 175 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    BREAK           reduce using rule 175 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    CONTINUE        reduce using rule 175 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    GOTO            reduce using rule 175 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    RETURN          reduce using rule 175 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    NEW             reduce using rule 175 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    BOOL            reduce using rule 175 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    INT             reduce using rule 175 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    UINT            reduce using rule 175 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    CHAR            reduce using rule 175 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    DOUBLE          reduce using rule 175 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    $end            reduce using rule 175 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    BLOCK_END       reduce using rule 175 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    CASE            reduce using rule 175 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    DEFAULT         reduce using rule 175 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)


state 403

    (196) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN . M_quad block
    (178) M_quad -> . empty
    (227) empty -> .

    BLOCK_BEGIN     reduce using rule 227 (empty -> .)

    M_quad                         shift and go to state 406
    empty                          shift and go to state 65

state 404

    (130) method-header -> modifier VOID member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .

    DELIM           reduce using rule 130 (method-header -> modifier VOID member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)
    BLOCK_BEGIN     reduce using rule 130 (method-header -> modifier VOID member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)


state 405

    (129) method-header -> modifier type member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .

    DELIM           reduce using rule 129 (method-header -> modifier type member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)
    BLOCK_BEGIN     reduce using rule 129 (method-header -> modifier type member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)


state 406

    (196) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad . block
    (142) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END

    BLOCK_BEGIN     shift and go to state 50

    block                          shift and go to state 407

state 407

    (196) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .

    IDENTIFIER      reduce using rule 196 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    BLOCK_BEGIN     reduce using rule 196 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    DELIM           reduce using rule 196 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    CONSOLE         reduce using rule 196 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    CONST           reduce using rule 196 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    IF              reduce using rule 196 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    SWITCH          reduce using rule 196 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    WHILE           reduce using rule 196 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    FOR             reduce using rule 196 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    DO              reduce using rule 196 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    BREAK           reduce using rule 196 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    CONTINUE        reduce using rule 196 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    GOTO            reduce using rule 196 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    RETURN          reduce using rule 196 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    NEW             reduce using rule 196 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    BOOL            reduce using rule 196 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    INT             reduce using rule 196 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    UINT            reduce using rule 196 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    CHAR            reduce using rule 196 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    DOUBLE          reduce using rule 196 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    BLOCK_END       reduce using rule 196 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    $end            reduce using rule 196 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    CASE            reduce using rule 196 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    DEFAULT         reduce using rule 196 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)

