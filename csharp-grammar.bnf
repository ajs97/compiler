compilation-unit:
        namespace-member-declarations?
namespace-member-declarations:
        namespace-member-declaration
        namespace-member-declarations namespace-member-declaration
namespace-member-declaration:
        namespace-declaration
        type-declaration
namespace-declaration:
        "namespace" identifier namespace-body ";"?
namespace-body:
        "{" namespace-member-declarations? "}"
type-declaration:
        class-declaration
        struct-declaration
        enum-declaration
class-declaration:
        "class" identifier class-base? class-body ";"?
class-base:
        ":" class-type
class-type:
        type-name
        "object"
        "string"
type-name:
        identifier
class-body:
        "{" class-member-declarations? "}"
class-member-declarations:
        class-member-declaration
        class-member-declarations class-member-declaration
class-member-declaration:
        constant-declaration
        field-declaration
        method-declaration
        constructor-declaration
        destructor-declaration
        type-declaration
constant-declaration:
        constant-modifiers? "const" type constant-declarators ";"
constant-modifiers:
        constant-modifier
        constant-modifiers constant-modifier
constant-modifier:
        "new"
        "public"
        "protected"
        "internal"
        "private"
type:
        value-type
        reference-type
value-type:
        struct-type
        enum-type
struct-type:
        type-name
        simple-type
simple-type:
        numeric-type
        "bool"
numeric-type:
        integral-type
        floating-point-type
        "decimal"
integral-type:
        "sbyte"
        "byte"
        "short"
        "ushort"
        "int"
        "uint"
        "long"
        "ulong"
        "char"
floating-point-type:
        "float"
        "double"
enum-type:
        type-name
reference-type:
        class-type
        array-type
array-type:
        non-array-type rank-specifiers
non-array-type:
        type
rank-specifiers:
        rank-specifier
        rank-specifiers rank-specifier
rank-specifier:
        "[" dim-separators? "]"
dim-separators:
        ","
        dim-separators ","
constant-declarators:
        constant-declarator
        constant-declarators "," constant-declarator
constant-declarator:
        identifier "=" constant-expression
constant-expression:
        expression
expression:
        conditional-expression
        assignment
conditional-expression:
        conditional-or-expression
        conditional-or-expression "?" expression ":" expression
conditional-or-expression:
        conditional-and-expression
        conditional-or-expression "||" conditional-and-expression
conditional-and-expression:
        inclusive-or-expression
        conditional-and-expression "&&" inclusive-or-expression
inclusive-or-expression:
        exclusive-or-expression
        inclusive-or-expression "|" exclusive-or-expression
exclusive-or-expression:
        and-expression
        exclusive-or-expression "^" and-expression
and-expression:
        equality-expression
        and-expression "&" equality-expression
equality-expression:
        relational-expression
        equality-expression "==" relational-expression
        equality-expression "!=" relational-expression
relational-expression:
        shift-expression
        relational-expression "<" shift-expression
        relational-expression ">" shift-expression
        relational-expression "<=" shift-expression
        relational-expression ">=" shift-expression
shift-expression:
        additive-expression
        shift-expression "<<" additive-expression
        shift-expression ">>" additive-expression
additive-expression:
        multiplicative-expression
        additive-expression "+" multiplicative-expression
        additive-expression "-" multiplicative-expression
multiplicative-expression:
        unary-expression
        multiplicative-expression "*" unary-expression
        multiplicative-expression "/" unary-expression
        multiplicative-expression "%" unary-expression
unary-expression:
        primary-expression
        "+" unary-expression
        "-" unary-expression
        "!" unary-expression
        "~" unary-expression
        "*" unary-expression
        pre-increment-expression
        pre-decrement-expression
        cast-expression
primary-expression:
        array-creation-expression
        primary-no-array-creation-expression
array-creation-expression:
        "new" non-array-type "[" expression-list "]" rank-specifiers? array-initializer?
        "new" array-type array-initializer
expression-list:
        expression
        expression-list "," expression
array-initializer:
        "{" variable-initializer-list? "}"
        "{" variable-initializer-list "," "}"
variable-initializer-list:
        variable-initializer
        variable-initializer-list "," variable-initializer
variable-initializer:
        expression
        array-initializer
primary-no-array-creation-expression:
        literal
        simple-name
        parenthesized-expression
        member-access
        invocation-expression
        element-access
        this-access
        base-access
        post-increment-expression
        post-decrement-expression
        object-creation-expression
        typeof-expression
        checked-expression
        unchecked-expression
simple-name:
        identifier
parenthesized-expression:
        "(" expression ")"
member-access:
        primary-expression "." identifier
        predefined-type "." identifier
predefined-type:
        "bool"
        "byte"
        "char"
        "decimal"
        "double"
        "float"
        "int"
        "long"
        "object"
        "sbyte"
        "short"
        "string"
        "uint"
        "ulong"
        "ushort"
invocation-expression:
        primary-expression "(" argument-list? ")"
argument-list:
        argument
        argument-list "," argument
argument:
        expression
        "ref" variable-reference
        "out" variable-reference
variable-reference:
        expression
element-access:
        primary-no-array-creation-expression "[" expression-list "]"
this-access:
        "this"
base-access:
        "base" "." identifier
        "base" "[" expression-list "]"
post-increment-expression:
        primary-expression "++"
post-decrement-expression:
        primary-expression "--"
object-creation-expression:
        "new" type "(" argument-list? ")"
typeof-expression:
        "typeof" "(" type ")"
        "typeof" "(" "void" ")"
checked-expression:
        "checked" "(" expression ")"
unchecked-expression:
        "unchecked" "(" expression ")"
pre-increment-expression:
        "++" unary-expression
pre-decrement-expression:
        "--" unary-expression
cast-expression:
        "(" type ")" unary-expression
assignment:
        unary-expression assignment-operator expression
assignment-operator:
        "="
        "+="
        "-="
        "*="
        "/="
        "%="
        "&="
        "|="
        "^="
        "<<="
        ">>="
field-declaration:
        field-modifiers? type variable-declarators ";"
field-modifiers:
        field-modifier
        field-modifiers field-modifier
field-modifier:
        "new"
        "public"
        "protected"
        "internal"
        "private"
        "static"
        "readonly"
        "volatile"
variable-declarators:
        variable-declarator
        variable-declarators "," variable-declarator
variable-declarator:
        identifier
        identifier "=" variable-initializer
method-declaration:
        method-header method-body
method-header:
        method-modifiers? return-type member-name "(" formal-parameter-list? ")"
method-modifiers:
        method-modifier
        method-modifiers method-modifier
method-modifier:
        "new"
        "public"
        "protected"
        "internal"
        "private"
        "static"
        "virtual"
        "sealed"
        "override"
        "abstract"
        "extern"
return-type:
        type
        "void"
member-name:
        identifier
formal-parameter-list:
        fixed-parameters
fixed-parameters:
        fixed-parameter
        fixed-parameters "," fixed-parameter
fixed-parameter:
        parameter-modifier? type identifier
parameter-modifier:
        "ref"
        "out"
method-body:
        block
        ";"
block:
        "{" statement-list? "}"
statement-list:
        statement
        statement-list statement
statement:
        labeled-statement
        declaration-statement
        embedded-statement
labeled-statement:
        identifier ":" statement
declaration-statement:
        local-variable-declaration ";"
        local-constant-declaration ";"
local-variable-declaration:
        type local-variable-declarators
local-variable-declarators:
        local-variable-declarator
        local-variable-declarators "," local-variable-declarator
local-variable-declarator:
        identifier
        identifier "=" local-variable-initializer
local-variable-initializer:
        expression
        array-initializer
local-constant-declaration:
        "const" type constant-declarators
embedded-statement:
        block
        empty-statement
        expression-statement
        selection-statement
        iteration-statement
        jump-statement
empty-statement:
        ";"
expression-statement:
        statement-expression ";"
statement-expression:
        invocation-expression
        object-creation-expression
        assignment
        post-increment-expression
        post-decrement-expression
        pre-increment-expression
        pre-decrement-expression
selection-statement:
        if-statement
        switch-statement
if-statement:
        "if" "(" boolean-expression ")" embedded-statement
        "if" "(" boolean-expression ")" embedded-statement "else" embedded-statement
boolean-expression:
        expression
switch-statement:
        "switch" "(" expression ")" switch-block
switch-block:
        "{" switch-sections? "}"
switch-sections:
        switch-section
        switch-sections switch-section
switch-section:
        switch-labels statement-list
switch-labels:
        switch-label
        switch-labels switch-label
switch-label:
        "case" constant-expression ":"
        "default" ":"
iteration-statement:
        while-statement
        for-statement
        foreach-statement
while-statement:
        "while" "(" boolean-expression ")" embedded-statement
for-statement:
        "for" "(" for-initializer? ";" for-condition? ";" for-iterator? ")" embedded-statement
for-initializer:
        local-variable-declaration
        statement-expression-list
for-condition:
        boolean-expression
for-iterator:
        statement-expression-list
statement-expression-list:
        statement-expression
        statement-expression-list "," statement-expression
foreach-statement:
        "foreach" "(" type identifier "in" expression ")" embedded-statement
jump-statement:
        break-statement
        continue-statement
        goto-statement
        return-statement
break-statement:
        "break" ";"
continue-statement:
        "continue" ";"
goto-statement:
        "goto" identifier ";"
return-statement:
        "return" expression? ";"
constructor-declaration:
        constructor-modifiers? constructor-declarator constructor-body
constructor-modifiers:
        constructor-modifier
        constructor-modifiers constructor-modifier
constructor-modifier:
        "public"
        "protected"
        "internal"
        "private"
        "extern"
constructor-declarator:
        identifier "(" formal-parameter-list? ")" 
constructor-body:
        block
        ";"
destructor-declaration:
        "extern"? "~" identifier "(" ")" destructor-body
destructor-body:
        block
        ";"
struct-declaration:
        struct-modifiers? "struct" identifier struct-body ";"?
struct-modifiers:
        struct-modifier
        struct-modifiers struct-modifier
struct-modifier:
        "new"
        "public"
        "protected"
        "internal"
        "private"
struct-body:
        "{" struct-member-declarations? "}"
struct-member-declarations:
        struct-member-declaration
        struct-member-declarations struct-member-declaration
struct-member-declaration:
        constant-declaration
        field-declaration
        method-declaration
        constructor-declaration
        type-declaration
enum-declaration:
        enum-modifiers? "enum" identifier enum-body ";"?
enum-body:
        "{" enum-member-declarations? "}"
        "{" enum-member-declarations "," "}"
enum-modifiers:
        enum-modifier
        enum-modifiers enum-modifier
enum-modifier:
        "new"
        "public"
        "protected"
        "internal"
        "private"
enum-member-declarations:
        enum-member-declaration
        enum-member-declarations "," enum-member-declaration
enum-member-declaration:
        identifier
        identifier "=" constant-expression
