Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    LICONST
    LONG
    BASE
    THIS
    FCONST
    ULONG
    MCONST
    VSCONST
    SCONST
    UICONST
    CCONST
    FLOAT
    ULICONST

Grammar

Rule 0     S' -> compilation-unit
Rule 1     compilation-unit -> class-declarations-opt
Rule 2     compilation-unit -> statement-list
Rule 3     semi-opt -> DELIM
Rule 4     semi-opt -> empty
Rule 5     class-declarations-opt -> class-declarations
Rule 6     class-declarations-opt -> empty
Rule 7     class-declarations -> class-declaration
Rule 8     class-declarations -> class-declarations class-declaration
Rule 9     class-declaration -> CLASS IDENTIFIER class-base-opt class-body semi-opt
Rule 10    class-base-opt -> class-base
Rule 11    class-base-opt -> empty
Rule 12    class-base -> COLON class-type
Rule 13    class-type -> IDENTIFIER
Rule 14    class-body -> BLOCK_BEGIN class-member-declarations-opt BLOCK_END
Rule 15    class-member-declarations-opt -> class-member-declarations
Rule 16    class-member-declarations-opt -> empty
Rule 17    class-member-declarations -> class-member-declaration
Rule 18    class-member-declarations -> class-member-declarations class-member-declaration
Rule 19    class-member-declaration -> constant-declaration
Rule 20    class-member-declaration -> field-declaration
Rule 21    class-member-declaration -> method-declaration
Rule 22    class-member-declaration -> constructor-declaration
Rule 23    class-member-declaration -> destructor-declaration
Rule 24    constant-declaration -> modifier CONST simple-type constant-declarators DELIM
Rule 25    constant-declaration -> CONST simple-type constant-declarators DELIM
Rule 26    type -> simple-type
Rule 27    type -> class-type
Rule 28    type -> array-type
Rule 29    simple-type -> BOOL
Rule 30    simple-type -> INT
Rule 31    simple-type -> UINT
Rule 32    simple-type -> CHAR
Rule 33    simple-type -> DOUBLE
Rule 34    array-type -> simple-type OPEN_BRACKET CLOSE_BRACKET
Rule 35    constant-declarators -> constant-declarator
Rule 36    constant-declarators -> constant-declarators COMMA constant-declarator
Rule 37    constant-declarator -> IDENTIFIER ASSIGN expression
Rule 38    expression -> conditional-expression
Rule 39    expression -> assignment
Rule 40    conditional-expression -> conditional-or-expression
Rule 41    conditional-expression -> conditional-or-expression CONDOP expression COLON expression
Rule 42    conditional-or-expression -> conditional-and-expression
Rule 43    conditional-or-expression -> conditional-or-expression LOGOR conditional-and-expression
Rule 44    conditional-and-expression -> inclusive-or-expression
Rule 45    conditional-and-expression -> conditional-and-expression LOGAND inclusive-or-expression
Rule 46    inclusive-or-expression -> exclusive-or-expression
Rule 47    inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression
Rule 48    exclusive-or-expression -> and-expression
Rule 49    exclusive-or-expression -> exclusive-or-expression BITXOR and-expression
Rule 50    and-expression -> equality-expression
Rule 51    and-expression -> and-expression BITAND equality-expression
Rule 52    equality-expression -> relational-expression
Rule 53    equality-expression -> equality-expression EQ relational-expression
Rule 54    equality-expression -> equality-expression NE relational-expression
Rule 55    relational-expression -> shift-expression
Rule 56    relational-expression -> relational-expression LT shift-expression
Rule 57    relational-expression -> relational-expression GT shift-expression
Rule 58    relational-expression -> relational-expression LE shift-expression
Rule 59    relational-expression -> relational-expression GE shift-expression
Rule 60    shift-expression -> additive-expression
Rule 61    shift-expression -> shift-expression LSHIFT additive-expression
Rule 62    shift-expression -> shift-expression RSHIFT additive-expression
Rule 63    additive-expression -> multiplicative-expression
Rule 64    additive-expression -> additive-expression PLUS multiplicative-expression
Rule 65    additive-expression -> additive-expression MINUS multiplicative-expression
Rule 66    multiplicative-expression -> unary-expression
Rule 67    multiplicative-expression -> multiplicative-expression TIMES unary-expression
Rule 68    multiplicative-expression -> multiplicative-expression DIV unary-expression
Rule 69    multiplicative-expression -> multiplicative-expression MOD unary-expression
Rule 70    unary-expression -> primary-expression
Rule 71    unary-expression -> PLUS unary-expression
Rule 72    unary-expression -> MINUS unary-expression
Rule 73    unary-expression -> BITNOT unary-expression
Rule 74    unary-expression -> BITCOMP unary-expression
Rule 75    unary-expression -> TIMES unary-expression
Rule 76    unary-expression -> pre-increment-expression
Rule 77    unary-expression -> pre-decrement-expression
Rule 78    primary-expression -> array-creation-expression
Rule 79    primary-expression -> primary-no-array-creation-expression
Rule 80    array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
Rule 81    array-initializer-opt -> array-initializer
Rule 82    array-initializer-opt -> empty
Rule 83    expression-list -> expression
Rule 84    expression-list -> expression-list COMMA expression
Rule 85    array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END
Rule 86    variable-initializer-list-opt -> expression-list
Rule 87    variable-initializer-list-opt -> empty
Rule 88    variable-initializer -> expression
Rule 89    variable-initializer -> array-initializer
Rule 90    primary-no-array-creation-expression -> literal
Rule 91    primary-no-array-creation-expression -> parenthesized-expression
Rule 92    primary-no-array-creation-expression -> member-access
Rule 93    primary-no-array-creation-expression -> invocation-expression
Rule 94    primary-no-array-creation-expression -> element-access
Rule 95    primary-no-array-creation-expression -> post-increment-expression
Rule 96    primary-no-array-creation-expression -> post-decrement-expression
Rule 97    primary-no-array-creation-expression -> object-creation-expression
Rule 98    parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN
Rule 99    member-access -> prim-expression DOT IDENTIFIER
Rule 100   invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
Rule 101   invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
Rule 102   argument-list-opt -> argument-list
Rule 103   argument-list-opt -> empty
Rule 104   argument-list -> argument
Rule 105   argument-list -> argument-list COMMA argument
Rule 106   argument -> expression
Rule 107   argument -> OUT variable-reference
Rule 108   variable-reference -> expression
Rule 109   element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
Rule 110   element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET
Rule 111   prim-expression -> IDENTIFIER
Rule 112   prim-expression -> member-access
Rule 113   prim-expression -> element-access
Rule 114   post-increment-expression -> prim-expression INCRE
Rule 115   post-decrement-expression -> prim-expression DECRE
Rule 116   object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
Rule 117   pre-increment-expression -> INCRE prim-expression
Rule 118   pre-decrement-expression -> DECRE prim-expression
Rule 119   assignment -> prim-expression assignment-operator expression
Rule 120   assignment-operator -> ASSIGN
Rule 121   assignment-operator -> PLUSEQUAL
Rule 122   assignment-operator -> MINUSEQUAL
Rule 123   assignment-operator -> TIMESEQUAL
Rule 124   assignment-operator -> DIVEQUAL
Rule 125   assignment-operator -> MODEQUAL
Rule 126   assignment-operator -> BITANDEQUAL
Rule 127   assignment-operator -> BITOREQUAL
Rule 128   assignment-operator -> BITXOREQUAL
Rule 129   assignment-operator -> LSHIFTEQUAL
Rule 130   assignment-operator -> RSHIFTEQUAL
Rule 131   field-declaration -> modifier type variable-declarators DELIM
Rule 132   field-declaration -> type variable-declarators DELIM
Rule 133   modifier -> PUBLIC
Rule 134   modifier -> PRIVATE
Rule 135   variable-declarators -> variable-declarator
Rule 136   variable-declarators -> variable-declarators COMMA variable-declarator
Rule 137   variable-declarator -> IDENTIFIER
Rule 138   variable-declarator -> IDENTIFIER ASSIGN variable-initializer
Rule 139   method-declaration -> method-header method-body
Rule 140   method-header -> modifier type member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
Rule 141   method-header -> modifier VOID member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
Rule 142   method-header -> type member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
Rule 143   method-header -> VOID member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
Rule 144   formal-parameter-list-opt -> formal-parameter-list
Rule 145   formal-parameter-list-opt -> empty
Rule 146   member-name -> IDENTIFIER
Rule 147   formal-parameter-list -> fixed-parameters
Rule 148   fixed-parameters -> fixed-parameter
Rule 149   fixed-parameters -> fixed-parameters COMMA fixed-parameter
Rule 150   fixed-parameter -> parameter-modifier-opt type IDENTIFIER
Rule 151   parameter-modifier-opt -> parameter-modifier
Rule 152   parameter-modifier-opt -> empty
Rule 153   parameter-modifier -> OUT
Rule 154   method-body -> block
Rule 155   method-body -> DELIM
Rule 156   block -> BLOCK_BEGIN statement-list-opt BLOCK_END
Rule 157   statement-list-opt -> statement-list
Rule 158   statement-list-opt -> empty
Rule 159   statement-list -> statement
Rule 160   statement-list -> statement-list statement
Rule 161   statement -> labeled-statement
Rule 162   statement -> declaration-statement
Rule 163   statement -> block
Rule 164   statement -> empty-statement
Rule 165   statement -> expression-statement
Rule 166   statement -> selection-statement
Rule 167   statement -> iteration-statement
Rule 168   statement -> jump-statement
Rule 169   statement -> write-statement
Rule 170   statement -> read-statement
Rule 171   write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN
Rule 172   print-list -> expression
Rule 173   print-list -> expression COMMA print-list
Rule 174   read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN
Rule 175   labeled-statement -> IDENTIFIER COLON statement
Rule 176   declaration-statement -> local-variable-declaration DELIM
Rule 177   declaration-statement -> local-constant-declaration DELIM
Rule 178   local-variable-declaration -> type variable-declarators
Rule 179   local-constant-declaration -> CONST type constant-declarators
Rule 180   empty-statement -> DELIM
Rule 181   expression-statement -> statement-expression DELIM
Rule 182   statement-expression -> invocation-expression
Rule 183   statement-expression -> object-creation-expression
Rule 184   statement-expression -> assignment
Rule 185   statement-expression -> post-increment-expression
Rule 186   statement-expression -> post-decrement-expression
Rule 187   statement-expression -> pre-increment-expression
Rule 188   statement-expression -> pre-decrement-expression
Rule 189   selection-statement -> if-statement
Rule 190   selection-statement -> switch-statement
Rule 191   if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block
Rule 192   if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block ELSE block
Rule 193   switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block
Rule 194   switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END
Rule 195   switch-sections-opt -> switch-sections
Rule 196   switch-sections-opt -> empty
Rule 197   switch-sections -> switch-section
Rule 198   switch-sections -> switch-sections switch-section
Rule 199   switch-section -> switch-labels statement-list
Rule 200   switch-labels -> switch-label
Rule 201   switch-labels -> switch-labels switch-label
Rule 202   switch-label -> CASE expression COLON
Rule 203   switch-label -> DEFAULT COLON
Rule 204   iteration-statement -> while-statement
Rule 205   iteration-statement -> for-statement
Rule 206   iteration-statement -> foreach-statement
Rule 207   iteration-statement -> do-statement
Rule 208   while-statement -> WHILE OPEN_PAREN expression CLOSE_PAREN block
Rule 209   do-statement -> DO block WHILE OPEN_PAREN expression CLOSE_PAREN DELIM
Rule 210   for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN block
Rule 211   for-initializer-opt -> for-initializer
Rule 212   for-initializer-opt -> empty
Rule 213   for-initializer -> local-variable-declaration
Rule 214   for-initializer -> statement-expression-list
Rule 215   for-condition-opt -> for-condition
Rule 216   for-condition-opt -> empty
Rule 217   for-condition -> expression
Rule 218   for-iterator-opt -> for-iterator
Rule 219   for-iterator-opt -> empty
Rule 220   for-iterator -> statement-expression-list
Rule 221   statement-expression-list -> statement-expression
Rule 222   statement-expression-list -> statement-expression-list COMMA statement-expression
Rule 223   foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN block
Rule 224   jump-statement -> break-statement
Rule 225   jump-statement -> continue-statement
Rule 226   jump-statement -> goto-statement
Rule 227   jump-statement -> return-statement
Rule 228   break-statement -> BREAK DELIM
Rule 229   continue-statement -> CONTINUE DELIM
Rule 230   goto-statement -> GOTO IDENTIFIER DELIM
Rule 231   return-statement -> RETURN expression-opt DELIM
Rule 232   expression-opt -> expression
Rule 233   expression-opt -> empty
Rule 234   constructor-declaration -> constructor-declarator constructor-body
Rule 235   constructor-declarator -> IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
Rule 236   constructor-body -> block
Rule 237   constructor-body -> DELIM
Rule 238   destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body
Rule 239   destructor-body -> block
Rule 240   destructor-body -> DELIM
Rule 241   literal -> ICONST
Rule 242   literal -> DCONST
Rule 243   literal -> TRUE
Rule 244   literal -> FALSE
Rule 245   empty -> <empty>

Terminals, with rules where they appear

ASSIGN               : 37 120 138
BASE                 : 
BITAND               : 51
BITANDEQUAL          : 126
BITCOMP              : 74 238
BITNOT               : 73
BITOR                : 47
BITOREQUAL           : 127
BITXOR               : 49
BITXOREQUAL          : 128
BLOCK_BEGIN          : 14 85 156 194
BLOCK_END            : 14 85 156 194
BOOL                 : 29
BREAK                : 228
CASE                 : 202
CCONST               : 
CHAR                 : 32
CLASS                : 9
CLOSE_BRACKET        : 34 80 109 110
CLOSE_PAREN          : 98 100 101 116 140 141 142 143 171 174 191 192 193 208 209 210 223 235 238
COLON                : 12 41 175 202 203
COMMA                : 36 84 105 136 149 173 222
CONDOP               : 41
CONSOLE              : 171 174
CONST                : 24 25 179
CONTINUE             : 229
DCONST               : 242
DECRE                : 115 118
DEFAULT              : 203
DELIM                : 3 24 25 131 132 155 176 177 180 181 209 210 210 228 229 230 231 237 240
DIV                  : 68
DIVEQUAL             : 124
DO                   : 209
DOT                  : 99 171 174
DOUBLE               : 33
ELSE                 : 192
EQ                   : 53
FALSE                : 244
FCONST               : 
FLOAT                : 
FOR                  : 210
FOREACH              : 223
GE                   : 59
GOTO                 : 230
GT                   : 57
ICONST               : 241
IDENTIFIER           : 9 13 37 99 100 109 111 137 138 146 150 174 175 223 230 235 238
IF                   : 191 192
IN                   : 223
INCRE                : 114 117
INT                  : 30
LE                   : 58
LICONST              : 
LOGAND               : 45
LOGOR                : 43
LONG                 : 
LSHIFT               : 61
LSHIFTEQUAL          : 129
LT                   : 56
MCONST               : 
MINUS                : 65 72
MINUSEQUAL           : 122
MOD                  : 69
MODEQUAL             : 125
NE                   : 54
NEW                  : 80 116
OPEN_BRACKET         : 34 80 109 110
OPEN_PAREN           : 98 100 101 116 140 141 142 143 171 174 191 192 193 208 209 210 223 235 238
OUT                  : 107 153
PLUS                 : 64 71
PLUSEQUAL            : 121
PRIVATE              : 134
PUBLIC               : 133
READLINE             : 174
RETURN               : 231
RSHIFT               : 62
RSHIFTEQUAL          : 130
SCONST               : 
SWITCH               : 193
THIS                 : 
TIMES                : 67 75
TIMESEQUAL           : 123
TRUE                 : 243
UICONST              : 
UINT                 : 31
ULICONST             : 
ULONG                : 
VOID                 : 141 143
VSCONST              : 
WHILE                : 208 209
WRITELINE            : 171
error                : 

Nonterminals, with rules where they appear

additive-expression  : 60 61 62 64 65
and-expression       : 48 49 51
argument             : 104 105
argument-list        : 102 105
argument-list-opt    : 100 101 116
array-creation-expression : 78
array-initializer    : 81 89
array-initializer-opt : 80
array-type           : 28
assignment           : 39 184
assignment-operator  : 119
block                : 154 163 191 192 192 208 209 210 223 236 239
break-statement      : 224
class-base           : 10
class-base-opt       : 9
class-body           : 9
class-declaration    : 7 8
class-declarations   : 5 8
class-declarations-opt : 1
class-member-declaration : 17 18
class-member-declarations : 15 18
class-member-declarations-opt : 14
class-type           : 12 27
compilation-unit     : 0
conditional-and-expression : 42 43 45
conditional-expression : 38
conditional-or-expression : 40 41 43
constant-declaration : 19
constant-declarator  : 35 36
constant-declarators : 24 25 36 179
constructor-body     : 234
constructor-declaration : 22
constructor-declarator : 234
continue-statement   : 225
declaration-statement : 162
destructor-body      : 238
destructor-declaration : 23
do-statement         : 207
element-access       : 94 113
empty                : 4 6 11 16 82 87 103 145 152 158 196 212 216 219 233
empty-statement      : 164
equality-expression  : 50 51 53 54
exclusive-or-expression : 46 47 49
expression           : 37 41 41 83 84 88 98 106 108 119 172 173 191 192 193 202 208 209 217 223 232
expression-list      : 80 84 86 109 110
expression-opt       : 231
expression-statement : 165
field-declaration    : 20
fixed-parameter      : 148 149
fixed-parameters     : 147 149
for-condition        : 215
for-condition-opt    : 210
for-initializer      : 211
for-initializer-opt  : 210
for-iterator         : 218
for-iterator-opt     : 210
for-statement        : 205
foreach-statement    : 206
formal-parameter-list : 144
formal-parameter-list-opt : 140 141 142 143 235
goto-statement       : 226
if-statement         : 189
inclusive-or-expression : 44 45 47
invocation-expression : 93 182
iteration-statement  : 167
jump-statement       : 168
labeled-statement    : 161
literal              : 90
local-constant-declaration : 177
local-variable-declaration : 176 213
member-access        : 92 101 110 112
member-name          : 140 141 142 143
method-body          : 139
method-declaration   : 21
method-header        : 139
modifier             : 24 131 140 141
multiplicative-expression : 63 64 65 67 68 69
object-creation-expression : 97 183
parameter-modifier   : 151
parameter-modifier-opt : 150
parenthesized-expression : 91
post-decrement-expression : 96 186
post-increment-expression : 95 185
pre-decrement-expression : 77 188
pre-increment-expression : 76 187
prim-expression      : 99 114 115 117 118 119
primary-expression   : 70
primary-no-array-creation-expression : 79
print-list           : 171 173
read-statement       : 170
relational-expression : 52 53 54 56 57 58 59
return-statement     : 227
selection-statement  : 166
semi-opt             : 9
shift-expression     : 55 56 57 58 59 61 62
simple-type          : 24 25 26 34 80
statement            : 159 160 175
statement-expression : 181 221 222
statement-expression-list : 214 220 222
statement-list       : 2 157 160 199
statement-list-opt   : 156
switch-block         : 193
switch-label         : 200 201
switch-labels        : 199 201
switch-section       : 197 198
switch-sections      : 195 198
switch-sections-opt  : 194
switch-statement     : 190
type                 : 116 131 132 140 142 150 178 179 223
unary-expression     : 66 67 68 69 71 72 73 74 75
variable-declarator  : 135 136
variable-declarators : 131 132 136 178
variable-initializer : 138
variable-initializer-list-opt : 85
variable-reference   : 107
while-statement      : 204
write-statement      : 169

Parsing method: LALR

state 0

    (0) S' -> . compilation-unit
    (1) compilation-unit -> . class-declarations-opt
    (2) compilation-unit -> . statement-list
    (5) class-declarations-opt -> . class-declarations
    (6) class-declarations-opt -> . empty
    (159) statement-list -> . statement
    (160) statement-list -> . statement-list statement
    (7) class-declarations -> . class-declaration
    (8) class-declarations -> . class-declarations class-declaration
    (245) empty -> .
    (161) statement -> . labeled-statement
    (162) statement -> . declaration-statement
    (163) statement -> . block
    (164) statement -> . empty-statement
    (165) statement -> . expression-statement
    (166) statement -> . selection-statement
    (167) statement -> . iteration-statement
    (168) statement -> . jump-statement
    (169) statement -> . write-statement
    (170) statement -> . read-statement
    (9) class-declaration -> . CLASS IDENTIFIER class-base-opt class-body semi-opt
    (175) labeled-statement -> . IDENTIFIER COLON statement
    (176) declaration-statement -> . local-variable-declaration DELIM
    (177) declaration-statement -> . local-constant-declaration DELIM
    (156) block -> . BLOCK_BEGIN statement-list-opt BLOCK_END
    (180) empty-statement -> . DELIM
    (181) expression-statement -> . statement-expression DELIM
    (189) selection-statement -> . if-statement
    (190) selection-statement -> . switch-statement
    (204) iteration-statement -> . while-statement
    (205) iteration-statement -> . for-statement
    (206) iteration-statement -> . foreach-statement
    (207) iteration-statement -> . do-statement
    (224) jump-statement -> . break-statement
    (225) jump-statement -> . continue-statement
    (226) jump-statement -> . goto-statement
    (227) jump-statement -> . return-statement
    (171) write-statement -> . CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN
    (174) read-statement -> . CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN
    (178) local-variable-declaration -> . type variable-declarators
    (179) local-constant-declaration -> . CONST type constant-declarators
    (182) statement-expression -> . invocation-expression
    (183) statement-expression -> . object-creation-expression
    (184) statement-expression -> . assignment
    (185) statement-expression -> . post-increment-expression
    (186) statement-expression -> . post-decrement-expression
    (187) statement-expression -> . pre-increment-expression
    (188) statement-expression -> . pre-decrement-expression
    (191) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN block
    (192) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN block ELSE block
    (193) switch-statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block
    (208) while-statement -> . WHILE OPEN_PAREN expression CLOSE_PAREN block
    (210) for-statement -> . FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN block
    (223) foreach-statement -> . FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN block
    (209) do-statement -> . DO block WHILE OPEN_PAREN expression CLOSE_PAREN DELIM
    (228) break-statement -> . BREAK DELIM
    (229) continue-statement -> . CONTINUE DELIM
    (230) goto-statement -> . GOTO IDENTIFIER DELIM
    (231) return-statement -> . RETURN expression-opt DELIM
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (119) assignment -> . prim-expression assignment-operator expression
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE
    (13) class-type -> . IDENTIFIER
    (34) array-type -> . simple-type OPEN_BRACKET CLOSE_BRACKET
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET

    $end            reduce using rule 245 (empty -> .)
    CLASS           shift and go to state 59
    IDENTIFIER      shift and go to state 42
    BLOCK_BEGIN     shift and go to state 57
    DELIM           shift and go to state 31
    CONSOLE         shift and go to state 61
    CONST           shift and go to state 56
    IF              shift and go to state 67
    SWITCH          shift and go to state 40
    WHILE           shift and go to state 35
    FOR             shift and go to state 23
    FOREACH         shift and go to state 9
    DO              shift and go to state 55
    BREAK           shift and go to state 49
    CONTINUE        shift and go to state 29
    GOTO            shift and go to state 7
    RETURN          shift and go to state 15
    NEW             shift and go to state 37
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    BOOL            shift and go to state 51
    INT             shift and go to state 50
    UINT            shift and go to state 64
    CHAR            shift and go to state 34
    DOUBLE          shift and go to state 13

    return-statement               shift and go to state 17
    prim-expression                shift and go to state 58
    write-statement                shift and go to state 1
    member-access                  shift and go to state 2
    selection-statement            shift and go to state 32
    simple-type                    shift and go to state 54
    compilation-unit               shift and go to state 16
    expression-statement           shift and go to state 3
    pre-decrement-expression       shift and go to state 25
    class-declarations-opt         shift and go to state 18
    if-statement                   shift and go to state 28
    break-statement                shift and go to state 38
    post-increment-expression      shift and go to state 4
    element-access                 shift and go to state 20
    statement-expression           shift and go to state 39
    local-constant-declaration     shift and go to state 21
    statement                      shift and go to state 41
    assignment                     shift and go to state 62
    for-statement                  shift and go to state 6
    type                           shift and go to state 43
    read-statement                 shift and go to state 60
    do-statement                   shift and go to state 22
    array-type                     shift and go to state 45
    continue-statement             shift and go to state 24
    invocation-expression          shift and go to state 14
    class-declaration              shift and go to state 63
    labeled-statement              shift and go to state 8
    declaration-statement          shift and go to state 47
    object-creation-expression     shift and go to state 65
    post-decrement-expression      shift and go to state 46
    switch-statement               shift and go to state 10
    pre-increment-expression       shift and go to state 66
    jump-statement                 shift and go to state 11
    iteration-statement            shift and go to state 48
    local-variable-declaration     shift and go to state 26
    class-declarations             shift and go to state 12
    foreach-statement              shift and go to state 19
    goto-statement                 shift and go to state 27
    empty                          shift and go to state 44
    statement-list                 shift and go to state 52
    class-type                     shift and go to state 68
    while-statement                shift and go to state 53
    empty-statement                shift and go to state 36
    block                          shift and go to state 30

state 1

    (169) statement -> write-statement .

    IDENTIFIER      reduce using rule 169 (statement -> write-statement .)
    BLOCK_BEGIN     reduce using rule 169 (statement -> write-statement .)
    DELIM           reduce using rule 169 (statement -> write-statement .)
    CONSOLE         reduce using rule 169 (statement -> write-statement .)
    CONST           reduce using rule 169 (statement -> write-statement .)
    IF              reduce using rule 169 (statement -> write-statement .)
    SWITCH          reduce using rule 169 (statement -> write-statement .)
    WHILE           reduce using rule 169 (statement -> write-statement .)
    FOR             reduce using rule 169 (statement -> write-statement .)
    FOREACH         reduce using rule 169 (statement -> write-statement .)
    DO              reduce using rule 169 (statement -> write-statement .)
    BREAK           reduce using rule 169 (statement -> write-statement .)
    CONTINUE        reduce using rule 169 (statement -> write-statement .)
    GOTO            reduce using rule 169 (statement -> write-statement .)
    RETURN          reduce using rule 169 (statement -> write-statement .)
    NEW             reduce using rule 169 (statement -> write-statement .)
    INCRE           reduce using rule 169 (statement -> write-statement .)
    DECRE           reduce using rule 169 (statement -> write-statement .)
    BOOL            reduce using rule 169 (statement -> write-statement .)
    INT             reduce using rule 169 (statement -> write-statement .)
    UINT            reduce using rule 169 (statement -> write-statement .)
    CHAR            reduce using rule 169 (statement -> write-statement .)
    DOUBLE          reduce using rule 169 (statement -> write-statement .)
    CASE            reduce using rule 169 (statement -> write-statement .)
    DEFAULT         reduce using rule 169 (statement -> write-statement .)
    BLOCK_END       reduce using rule 169 (statement -> write-statement .)
    $end            reduce using rule 169 (statement -> write-statement .)


state 2

    (101) invocation-expression -> member-access . OPEN_PAREN argument-list-opt CLOSE_PAREN
    (112) prim-expression -> member-access .
    (110) element-access -> member-access . OPEN_BRACKET expression-list CLOSE_BRACKET

    OPEN_PAREN      shift and go to state 70
    INCRE           reduce using rule 112 (prim-expression -> member-access .)
    DECRE           reduce using rule 112 (prim-expression -> member-access .)
    DOT             reduce using rule 112 (prim-expression -> member-access .)
    ASSIGN          reduce using rule 112 (prim-expression -> member-access .)
    PLUSEQUAL       reduce using rule 112 (prim-expression -> member-access .)
    MINUSEQUAL      reduce using rule 112 (prim-expression -> member-access .)
    TIMESEQUAL      reduce using rule 112 (prim-expression -> member-access .)
    DIVEQUAL        reduce using rule 112 (prim-expression -> member-access .)
    MODEQUAL        reduce using rule 112 (prim-expression -> member-access .)
    BITANDEQUAL     reduce using rule 112 (prim-expression -> member-access .)
    BITOREQUAL      reduce using rule 112 (prim-expression -> member-access .)
    BITXOREQUAL     reduce using rule 112 (prim-expression -> member-access .)
    LSHIFTEQUAL     reduce using rule 112 (prim-expression -> member-access .)
    RSHIFTEQUAL     reduce using rule 112 (prim-expression -> member-access .)
    OPEN_BRACKET    shift and go to state 69


state 3

    (165) statement -> expression-statement .

    IDENTIFIER      reduce using rule 165 (statement -> expression-statement .)
    BLOCK_BEGIN     reduce using rule 165 (statement -> expression-statement .)
    DELIM           reduce using rule 165 (statement -> expression-statement .)
    CONSOLE         reduce using rule 165 (statement -> expression-statement .)
    CONST           reduce using rule 165 (statement -> expression-statement .)
    IF              reduce using rule 165 (statement -> expression-statement .)
    SWITCH          reduce using rule 165 (statement -> expression-statement .)
    WHILE           reduce using rule 165 (statement -> expression-statement .)
    FOR             reduce using rule 165 (statement -> expression-statement .)
    FOREACH         reduce using rule 165 (statement -> expression-statement .)
    DO              reduce using rule 165 (statement -> expression-statement .)
    BREAK           reduce using rule 165 (statement -> expression-statement .)
    CONTINUE        reduce using rule 165 (statement -> expression-statement .)
    GOTO            reduce using rule 165 (statement -> expression-statement .)
    RETURN          reduce using rule 165 (statement -> expression-statement .)
    NEW             reduce using rule 165 (statement -> expression-statement .)
    INCRE           reduce using rule 165 (statement -> expression-statement .)
    DECRE           reduce using rule 165 (statement -> expression-statement .)
    BOOL            reduce using rule 165 (statement -> expression-statement .)
    INT             reduce using rule 165 (statement -> expression-statement .)
    UINT            reduce using rule 165 (statement -> expression-statement .)
    CHAR            reduce using rule 165 (statement -> expression-statement .)
    DOUBLE          reduce using rule 165 (statement -> expression-statement .)
    CASE            reduce using rule 165 (statement -> expression-statement .)
    DEFAULT         reduce using rule 165 (statement -> expression-statement .)
    BLOCK_END       reduce using rule 165 (statement -> expression-statement .)
    $end            reduce using rule 165 (statement -> expression-statement .)


state 4

    (185) statement-expression -> post-increment-expression .

    COMMA           reduce using rule 185 (statement-expression -> post-increment-expression .)
    CLOSE_PAREN     reduce using rule 185 (statement-expression -> post-increment-expression .)
    DELIM           reduce using rule 185 (statement-expression -> post-increment-expression .)


state 5

    (117) pre-increment-expression -> INCRE . prim-expression
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET

    IDENTIFIER      shift and go to state 73

    member-access                  shift and go to state 72
    prim-expression                shift and go to state 71
    element-access                 shift and go to state 20

state 6

    (205) iteration-statement -> for-statement .

    IDENTIFIER      reduce using rule 205 (iteration-statement -> for-statement .)
    BLOCK_BEGIN     reduce using rule 205 (iteration-statement -> for-statement .)
    DELIM           reduce using rule 205 (iteration-statement -> for-statement .)
    CONSOLE         reduce using rule 205 (iteration-statement -> for-statement .)
    CONST           reduce using rule 205 (iteration-statement -> for-statement .)
    IF              reduce using rule 205 (iteration-statement -> for-statement .)
    SWITCH          reduce using rule 205 (iteration-statement -> for-statement .)
    WHILE           reduce using rule 205 (iteration-statement -> for-statement .)
    FOR             reduce using rule 205 (iteration-statement -> for-statement .)
    FOREACH         reduce using rule 205 (iteration-statement -> for-statement .)
    DO              reduce using rule 205 (iteration-statement -> for-statement .)
    BREAK           reduce using rule 205 (iteration-statement -> for-statement .)
    CONTINUE        reduce using rule 205 (iteration-statement -> for-statement .)
    GOTO            reduce using rule 205 (iteration-statement -> for-statement .)
    RETURN          reduce using rule 205 (iteration-statement -> for-statement .)
    NEW             reduce using rule 205 (iteration-statement -> for-statement .)
    INCRE           reduce using rule 205 (iteration-statement -> for-statement .)
    DECRE           reduce using rule 205 (iteration-statement -> for-statement .)
    BOOL            reduce using rule 205 (iteration-statement -> for-statement .)
    INT             reduce using rule 205 (iteration-statement -> for-statement .)
    UINT            reduce using rule 205 (iteration-statement -> for-statement .)
    CHAR            reduce using rule 205 (iteration-statement -> for-statement .)
    DOUBLE          reduce using rule 205 (iteration-statement -> for-statement .)
    CASE            reduce using rule 205 (iteration-statement -> for-statement .)
    DEFAULT         reduce using rule 205 (iteration-statement -> for-statement .)
    BLOCK_END       reduce using rule 205 (iteration-statement -> for-statement .)
    $end            reduce using rule 205 (iteration-statement -> for-statement .)


state 7

    (230) goto-statement -> GOTO . IDENTIFIER DELIM

    IDENTIFIER      shift and go to state 74


state 8

    (161) statement -> labeled-statement .

    IDENTIFIER      reduce using rule 161 (statement -> labeled-statement .)
    BLOCK_BEGIN     reduce using rule 161 (statement -> labeled-statement .)
    DELIM           reduce using rule 161 (statement -> labeled-statement .)
    CONSOLE         reduce using rule 161 (statement -> labeled-statement .)
    CONST           reduce using rule 161 (statement -> labeled-statement .)
    IF              reduce using rule 161 (statement -> labeled-statement .)
    SWITCH          reduce using rule 161 (statement -> labeled-statement .)
    WHILE           reduce using rule 161 (statement -> labeled-statement .)
    FOR             reduce using rule 161 (statement -> labeled-statement .)
    FOREACH         reduce using rule 161 (statement -> labeled-statement .)
    DO              reduce using rule 161 (statement -> labeled-statement .)
    BREAK           reduce using rule 161 (statement -> labeled-statement .)
    CONTINUE        reduce using rule 161 (statement -> labeled-statement .)
    GOTO            reduce using rule 161 (statement -> labeled-statement .)
    RETURN          reduce using rule 161 (statement -> labeled-statement .)
    NEW             reduce using rule 161 (statement -> labeled-statement .)
    INCRE           reduce using rule 161 (statement -> labeled-statement .)
    DECRE           reduce using rule 161 (statement -> labeled-statement .)
    BOOL            reduce using rule 161 (statement -> labeled-statement .)
    INT             reduce using rule 161 (statement -> labeled-statement .)
    UINT            reduce using rule 161 (statement -> labeled-statement .)
    CHAR            reduce using rule 161 (statement -> labeled-statement .)
    DOUBLE          reduce using rule 161 (statement -> labeled-statement .)
    CASE            reduce using rule 161 (statement -> labeled-statement .)
    DEFAULT         reduce using rule 161 (statement -> labeled-statement .)
    BLOCK_END       reduce using rule 161 (statement -> labeled-statement .)
    $end            reduce using rule 161 (statement -> labeled-statement .)


state 9

    (223) foreach-statement -> FOREACH . OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN block

    OPEN_PAREN      shift and go to state 75


state 10

    (190) selection-statement -> switch-statement .

    IDENTIFIER      reduce using rule 190 (selection-statement -> switch-statement .)
    BLOCK_BEGIN     reduce using rule 190 (selection-statement -> switch-statement .)
    DELIM           reduce using rule 190 (selection-statement -> switch-statement .)
    CONSOLE         reduce using rule 190 (selection-statement -> switch-statement .)
    CONST           reduce using rule 190 (selection-statement -> switch-statement .)
    IF              reduce using rule 190 (selection-statement -> switch-statement .)
    SWITCH          reduce using rule 190 (selection-statement -> switch-statement .)
    WHILE           reduce using rule 190 (selection-statement -> switch-statement .)
    FOR             reduce using rule 190 (selection-statement -> switch-statement .)
    FOREACH         reduce using rule 190 (selection-statement -> switch-statement .)
    DO              reduce using rule 190 (selection-statement -> switch-statement .)
    BREAK           reduce using rule 190 (selection-statement -> switch-statement .)
    CONTINUE        reduce using rule 190 (selection-statement -> switch-statement .)
    GOTO            reduce using rule 190 (selection-statement -> switch-statement .)
    RETURN          reduce using rule 190 (selection-statement -> switch-statement .)
    NEW             reduce using rule 190 (selection-statement -> switch-statement .)
    INCRE           reduce using rule 190 (selection-statement -> switch-statement .)
    DECRE           reduce using rule 190 (selection-statement -> switch-statement .)
    BOOL            reduce using rule 190 (selection-statement -> switch-statement .)
    INT             reduce using rule 190 (selection-statement -> switch-statement .)
    UINT            reduce using rule 190 (selection-statement -> switch-statement .)
    CHAR            reduce using rule 190 (selection-statement -> switch-statement .)
    DOUBLE          reduce using rule 190 (selection-statement -> switch-statement .)
    $end            reduce using rule 190 (selection-statement -> switch-statement .)
    CASE            reduce using rule 190 (selection-statement -> switch-statement .)
    DEFAULT         reduce using rule 190 (selection-statement -> switch-statement .)
    BLOCK_END       reduce using rule 190 (selection-statement -> switch-statement .)


state 11

    (168) statement -> jump-statement .

    IDENTIFIER      reduce using rule 168 (statement -> jump-statement .)
    BLOCK_BEGIN     reduce using rule 168 (statement -> jump-statement .)
    DELIM           reduce using rule 168 (statement -> jump-statement .)
    CONSOLE         reduce using rule 168 (statement -> jump-statement .)
    CONST           reduce using rule 168 (statement -> jump-statement .)
    IF              reduce using rule 168 (statement -> jump-statement .)
    SWITCH          reduce using rule 168 (statement -> jump-statement .)
    WHILE           reduce using rule 168 (statement -> jump-statement .)
    FOR             reduce using rule 168 (statement -> jump-statement .)
    FOREACH         reduce using rule 168 (statement -> jump-statement .)
    DO              reduce using rule 168 (statement -> jump-statement .)
    BREAK           reduce using rule 168 (statement -> jump-statement .)
    CONTINUE        reduce using rule 168 (statement -> jump-statement .)
    GOTO            reduce using rule 168 (statement -> jump-statement .)
    RETURN          reduce using rule 168 (statement -> jump-statement .)
    NEW             reduce using rule 168 (statement -> jump-statement .)
    INCRE           reduce using rule 168 (statement -> jump-statement .)
    DECRE           reduce using rule 168 (statement -> jump-statement .)
    BOOL            reduce using rule 168 (statement -> jump-statement .)
    INT             reduce using rule 168 (statement -> jump-statement .)
    UINT            reduce using rule 168 (statement -> jump-statement .)
    CHAR            reduce using rule 168 (statement -> jump-statement .)
    DOUBLE          reduce using rule 168 (statement -> jump-statement .)
    CASE            reduce using rule 168 (statement -> jump-statement .)
    DEFAULT         reduce using rule 168 (statement -> jump-statement .)
    BLOCK_END       reduce using rule 168 (statement -> jump-statement .)
    $end            reduce using rule 168 (statement -> jump-statement .)


state 12

    (5) class-declarations-opt -> class-declarations .
    (8) class-declarations -> class-declarations . class-declaration
    (9) class-declaration -> . CLASS IDENTIFIER class-base-opt class-body semi-opt

    $end            reduce using rule 5 (class-declarations-opt -> class-declarations .)
    CLASS           shift and go to state 59

    class-declaration              shift and go to state 76

state 13

    (33) simple-type -> DOUBLE .

    OPEN_BRACKET    reduce using rule 33 (simple-type -> DOUBLE .)
    IDENTIFIER      reduce using rule 33 (simple-type -> DOUBLE .)
    OPEN_PAREN      reduce using rule 33 (simple-type -> DOUBLE .)


state 14

    (182) statement-expression -> invocation-expression .

    COMMA           reduce using rule 182 (statement-expression -> invocation-expression .)
    CLOSE_PAREN     reduce using rule 182 (statement-expression -> invocation-expression .)
    DELIM           reduce using rule 182 (statement-expression -> invocation-expression .)


state 15

    (231) return-statement -> RETURN . expression-opt DELIM
    (232) expression-opt -> . expression
    (233) expression-opt -> . empty
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (245) empty -> .
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (119) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) unary-expression -> . pre-increment-expression
    (77) unary-expression -> . pre-decrement-expression
    (78) primary-expression -> . array-creation-expression
    (79) primary-expression -> . primary-no-array-creation-expression
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (80) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (90) primary-no-array-creation-expression -> . literal
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (94) primary-no-array-creation-expression -> . element-access
    (95) primary-no-array-creation-expression -> . post-increment-expression
    (96) primary-no-array-creation-expression -> . post-decrement-expression
    (97) primary-no-array-creation-expression -> . object-creation-expression
    (241) literal -> . ICONST
    (242) literal -> . DCONST
    (243) literal -> . TRUE
    (244) literal -> . FALSE
    (98) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    DELIM           reduce using rule 245 (empty -> .)
    IDENTIFIER      shift and go to state 94
    PLUS            shift and go to state 93
    MINUS           shift and go to state 84
    BITNOT          shift and go to state 113
    BITCOMP         shift and go to state 88
    TIMES           shift and go to state 99
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    NEW             shift and go to state 82
    ICONST          shift and go to state 101
    DCONST          shift and go to state 114
    TRUE            shift and go to state 107
    FALSE           shift and go to state 105
    OPEN_PAREN      shift and go to state 96

    unary-expression               shift and go to state 103
    exclusive-or-expression        shift and go to state 78
    member-access                  shift and go to state 79
    relational-expression          shift and go to state 80
    additive-expression            shift and go to state 83
    primary-no-array-creation-expression shift and go to state 100
    inclusive-or-expression        shift and go to state 86
    prim-expression                shift and go to state 77
    element-access                 shift and go to state 89
    literal                        shift and go to state 98
    conditional-expression         shift and go to state 90
    conditional-and-expression     shift and go to state 91
    post-decrement-expression      shift and go to state 92
    empty                          shift and go to state 95
    array-creation-expression      shift and go to state 81
    assignment                     shift and go to state 97
    post-increment-expression      shift and go to state 85
    object-creation-expression     shift and go to state 102
    expression-opt                 shift and go to state 104
    pre-increment-expression       shift and go to state 106
    equality-expression            shift and go to state 87
    shift-expression               shift and go to state 108
    and-expression                 shift and go to state 109
    pre-decrement-expression       shift and go to state 110
    multiplicative-expression      shift and go to state 111
    conditional-or-expression      shift and go to state 117
    primary-expression             shift and go to state 115
    invocation-expression          shift and go to state 116
    expression                     shift and go to state 112
    parenthesized-expression       shift and go to state 118

state 16

    (0) S' -> compilation-unit .



state 17

    (227) jump-statement -> return-statement .

    IDENTIFIER      reduce using rule 227 (jump-statement -> return-statement .)
    BLOCK_BEGIN     reduce using rule 227 (jump-statement -> return-statement .)
    DELIM           reduce using rule 227 (jump-statement -> return-statement .)
    CONSOLE         reduce using rule 227 (jump-statement -> return-statement .)
    CONST           reduce using rule 227 (jump-statement -> return-statement .)
    IF              reduce using rule 227 (jump-statement -> return-statement .)
    SWITCH          reduce using rule 227 (jump-statement -> return-statement .)
    WHILE           reduce using rule 227 (jump-statement -> return-statement .)
    FOR             reduce using rule 227 (jump-statement -> return-statement .)
    FOREACH         reduce using rule 227 (jump-statement -> return-statement .)
    DO              reduce using rule 227 (jump-statement -> return-statement .)
    BREAK           reduce using rule 227 (jump-statement -> return-statement .)
    CONTINUE        reduce using rule 227 (jump-statement -> return-statement .)
    GOTO            reduce using rule 227 (jump-statement -> return-statement .)
    RETURN          reduce using rule 227 (jump-statement -> return-statement .)
    NEW             reduce using rule 227 (jump-statement -> return-statement .)
    INCRE           reduce using rule 227 (jump-statement -> return-statement .)
    DECRE           reduce using rule 227 (jump-statement -> return-statement .)
    BOOL            reduce using rule 227 (jump-statement -> return-statement .)
    INT             reduce using rule 227 (jump-statement -> return-statement .)
    UINT            reduce using rule 227 (jump-statement -> return-statement .)
    CHAR            reduce using rule 227 (jump-statement -> return-statement .)
    DOUBLE          reduce using rule 227 (jump-statement -> return-statement .)
    $end            reduce using rule 227 (jump-statement -> return-statement .)
    CASE            reduce using rule 227 (jump-statement -> return-statement .)
    DEFAULT         reduce using rule 227 (jump-statement -> return-statement .)
    BLOCK_END       reduce using rule 227 (jump-statement -> return-statement .)


state 18

    (1) compilation-unit -> class-declarations-opt .

    $end            reduce using rule 1 (compilation-unit -> class-declarations-opt .)


state 19

    (206) iteration-statement -> foreach-statement .

    IDENTIFIER      reduce using rule 206 (iteration-statement -> foreach-statement .)
    BLOCK_BEGIN     reduce using rule 206 (iteration-statement -> foreach-statement .)
    DELIM           reduce using rule 206 (iteration-statement -> foreach-statement .)
    CONSOLE         reduce using rule 206 (iteration-statement -> foreach-statement .)
    CONST           reduce using rule 206 (iteration-statement -> foreach-statement .)
    IF              reduce using rule 206 (iteration-statement -> foreach-statement .)
    SWITCH          reduce using rule 206 (iteration-statement -> foreach-statement .)
    WHILE           reduce using rule 206 (iteration-statement -> foreach-statement .)
    FOR             reduce using rule 206 (iteration-statement -> foreach-statement .)
    FOREACH         reduce using rule 206 (iteration-statement -> foreach-statement .)
    DO              reduce using rule 206 (iteration-statement -> foreach-statement .)
    BREAK           reduce using rule 206 (iteration-statement -> foreach-statement .)
    CONTINUE        reduce using rule 206 (iteration-statement -> foreach-statement .)
    GOTO            reduce using rule 206 (iteration-statement -> foreach-statement .)
    RETURN          reduce using rule 206 (iteration-statement -> foreach-statement .)
    NEW             reduce using rule 206 (iteration-statement -> foreach-statement .)
    INCRE           reduce using rule 206 (iteration-statement -> foreach-statement .)
    DECRE           reduce using rule 206 (iteration-statement -> foreach-statement .)
    BOOL            reduce using rule 206 (iteration-statement -> foreach-statement .)
    INT             reduce using rule 206 (iteration-statement -> foreach-statement .)
    UINT            reduce using rule 206 (iteration-statement -> foreach-statement .)
    CHAR            reduce using rule 206 (iteration-statement -> foreach-statement .)
    DOUBLE          reduce using rule 206 (iteration-statement -> foreach-statement .)
    CASE            reduce using rule 206 (iteration-statement -> foreach-statement .)
    DEFAULT         reduce using rule 206 (iteration-statement -> foreach-statement .)
    BLOCK_END       reduce using rule 206 (iteration-statement -> foreach-statement .)
    $end            reduce using rule 206 (iteration-statement -> foreach-statement .)


state 20

    (113) prim-expression -> element-access .

    INCRE           reduce using rule 113 (prim-expression -> element-access .)
    DECRE           reduce using rule 113 (prim-expression -> element-access .)
    DOT             reduce using rule 113 (prim-expression -> element-access .)
    ASSIGN          reduce using rule 113 (prim-expression -> element-access .)
    PLUSEQUAL       reduce using rule 113 (prim-expression -> element-access .)
    MINUSEQUAL      reduce using rule 113 (prim-expression -> element-access .)
    TIMESEQUAL      reduce using rule 113 (prim-expression -> element-access .)
    DIVEQUAL        reduce using rule 113 (prim-expression -> element-access .)
    MODEQUAL        reduce using rule 113 (prim-expression -> element-access .)
    BITANDEQUAL     reduce using rule 113 (prim-expression -> element-access .)
    BITOREQUAL      reduce using rule 113 (prim-expression -> element-access .)
    BITXOREQUAL     reduce using rule 113 (prim-expression -> element-access .)
    LSHIFTEQUAL     reduce using rule 113 (prim-expression -> element-access .)
    RSHIFTEQUAL     reduce using rule 113 (prim-expression -> element-access .)
    DELIM           reduce using rule 113 (prim-expression -> element-access .)
    TIMES           reduce using rule 113 (prim-expression -> element-access .)
    DIV             reduce using rule 113 (prim-expression -> element-access .)
    MOD             reduce using rule 113 (prim-expression -> element-access .)
    PLUS            reduce using rule 113 (prim-expression -> element-access .)
    MINUS           reduce using rule 113 (prim-expression -> element-access .)
    LSHIFT          reduce using rule 113 (prim-expression -> element-access .)
    RSHIFT          reduce using rule 113 (prim-expression -> element-access .)
    LT              reduce using rule 113 (prim-expression -> element-access .)
    GT              reduce using rule 113 (prim-expression -> element-access .)
    LE              reduce using rule 113 (prim-expression -> element-access .)
    GE              reduce using rule 113 (prim-expression -> element-access .)
    EQ              reduce using rule 113 (prim-expression -> element-access .)
    NE              reduce using rule 113 (prim-expression -> element-access .)
    BITAND          reduce using rule 113 (prim-expression -> element-access .)
    BITXOR          reduce using rule 113 (prim-expression -> element-access .)
    BITOR           reduce using rule 113 (prim-expression -> element-access .)
    LOGAND          reduce using rule 113 (prim-expression -> element-access .)
    CONDOP          reduce using rule 113 (prim-expression -> element-access .)
    LOGOR           reduce using rule 113 (prim-expression -> element-access .)
    CLOSE_BRACKET   reduce using rule 113 (prim-expression -> element-access .)
    COMMA           reduce using rule 113 (prim-expression -> element-access .)
    CLOSE_PAREN     reduce using rule 113 (prim-expression -> element-access .)
    COLON           reduce using rule 113 (prim-expression -> element-access .)
    BLOCK_END       reduce using rule 113 (prim-expression -> element-access .)


state 21

    (177) declaration-statement -> local-constant-declaration . DELIM

    DELIM           shift and go to state 119


state 22

    (207) iteration-statement -> do-statement .

    IDENTIFIER      reduce using rule 207 (iteration-statement -> do-statement .)
    BLOCK_BEGIN     reduce using rule 207 (iteration-statement -> do-statement .)
    DELIM           reduce using rule 207 (iteration-statement -> do-statement .)
    CONSOLE         reduce using rule 207 (iteration-statement -> do-statement .)
    CONST           reduce using rule 207 (iteration-statement -> do-statement .)
    IF              reduce using rule 207 (iteration-statement -> do-statement .)
    SWITCH          reduce using rule 207 (iteration-statement -> do-statement .)
    WHILE           reduce using rule 207 (iteration-statement -> do-statement .)
    FOR             reduce using rule 207 (iteration-statement -> do-statement .)
    FOREACH         reduce using rule 207 (iteration-statement -> do-statement .)
    DO              reduce using rule 207 (iteration-statement -> do-statement .)
    BREAK           reduce using rule 207 (iteration-statement -> do-statement .)
    CONTINUE        reduce using rule 207 (iteration-statement -> do-statement .)
    GOTO            reduce using rule 207 (iteration-statement -> do-statement .)
    RETURN          reduce using rule 207 (iteration-statement -> do-statement .)
    NEW             reduce using rule 207 (iteration-statement -> do-statement .)
    INCRE           reduce using rule 207 (iteration-statement -> do-statement .)
    DECRE           reduce using rule 207 (iteration-statement -> do-statement .)
    BOOL            reduce using rule 207 (iteration-statement -> do-statement .)
    INT             reduce using rule 207 (iteration-statement -> do-statement .)
    UINT            reduce using rule 207 (iteration-statement -> do-statement .)
    CHAR            reduce using rule 207 (iteration-statement -> do-statement .)
    DOUBLE          reduce using rule 207 (iteration-statement -> do-statement .)
    CASE            reduce using rule 207 (iteration-statement -> do-statement .)
    DEFAULT         reduce using rule 207 (iteration-statement -> do-statement .)
    BLOCK_END       reduce using rule 207 (iteration-statement -> do-statement .)
    $end            reduce using rule 207 (iteration-statement -> do-statement .)


state 23

    (210) for-statement -> FOR . OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN block

    OPEN_PAREN      shift and go to state 120


state 24

    (225) jump-statement -> continue-statement .

    IDENTIFIER      reduce using rule 225 (jump-statement -> continue-statement .)
    BLOCK_BEGIN     reduce using rule 225 (jump-statement -> continue-statement .)
    DELIM           reduce using rule 225 (jump-statement -> continue-statement .)
    CONSOLE         reduce using rule 225 (jump-statement -> continue-statement .)
    CONST           reduce using rule 225 (jump-statement -> continue-statement .)
    IF              reduce using rule 225 (jump-statement -> continue-statement .)
    SWITCH          reduce using rule 225 (jump-statement -> continue-statement .)
    WHILE           reduce using rule 225 (jump-statement -> continue-statement .)
    FOR             reduce using rule 225 (jump-statement -> continue-statement .)
    FOREACH         reduce using rule 225 (jump-statement -> continue-statement .)
    DO              reduce using rule 225 (jump-statement -> continue-statement .)
    BREAK           reduce using rule 225 (jump-statement -> continue-statement .)
    CONTINUE        reduce using rule 225 (jump-statement -> continue-statement .)
    GOTO            reduce using rule 225 (jump-statement -> continue-statement .)
    RETURN          reduce using rule 225 (jump-statement -> continue-statement .)
    NEW             reduce using rule 225 (jump-statement -> continue-statement .)
    INCRE           reduce using rule 225 (jump-statement -> continue-statement .)
    DECRE           reduce using rule 225 (jump-statement -> continue-statement .)
    BOOL            reduce using rule 225 (jump-statement -> continue-statement .)
    INT             reduce using rule 225 (jump-statement -> continue-statement .)
    UINT            reduce using rule 225 (jump-statement -> continue-statement .)
    CHAR            reduce using rule 225 (jump-statement -> continue-statement .)
    DOUBLE          reduce using rule 225 (jump-statement -> continue-statement .)
    $end            reduce using rule 225 (jump-statement -> continue-statement .)
    CASE            reduce using rule 225 (jump-statement -> continue-statement .)
    DEFAULT         reduce using rule 225 (jump-statement -> continue-statement .)
    BLOCK_END       reduce using rule 225 (jump-statement -> continue-statement .)


state 25

    (188) statement-expression -> pre-decrement-expression .

    COMMA           reduce using rule 188 (statement-expression -> pre-decrement-expression .)
    CLOSE_PAREN     reduce using rule 188 (statement-expression -> pre-decrement-expression .)
    DELIM           reduce using rule 188 (statement-expression -> pre-decrement-expression .)


state 26

    (176) declaration-statement -> local-variable-declaration . DELIM

    DELIM           shift and go to state 121


state 27

    (226) jump-statement -> goto-statement .

    IDENTIFIER      reduce using rule 226 (jump-statement -> goto-statement .)
    BLOCK_BEGIN     reduce using rule 226 (jump-statement -> goto-statement .)
    DELIM           reduce using rule 226 (jump-statement -> goto-statement .)
    CONSOLE         reduce using rule 226 (jump-statement -> goto-statement .)
    CONST           reduce using rule 226 (jump-statement -> goto-statement .)
    IF              reduce using rule 226 (jump-statement -> goto-statement .)
    SWITCH          reduce using rule 226 (jump-statement -> goto-statement .)
    WHILE           reduce using rule 226 (jump-statement -> goto-statement .)
    FOR             reduce using rule 226 (jump-statement -> goto-statement .)
    FOREACH         reduce using rule 226 (jump-statement -> goto-statement .)
    DO              reduce using rule 226 (jump-statement -> goto-statement .)
    BREAK           reduce using rule 226 (jump-statement -> goto-statement .)
    CONTINUE        reduce using rule 226 (jump-statement -> goto-statement .)
    GOTO            reduce using rule 226 (jump-statement -> goto-statement .)
    RETURN          reduce using rule 226 (jump-statement -> goto-statement .)
    NEW             reduce using rule 226 (jump-statement -> goto-statement .)
    INCRE           reduce using rule 226 (jump-statement -> goto-statement .)
    DECRE           reduce using rule 226 (jump-statement -> goto-statement .)
    BOOL            reduce using rule 226 (jump-statement -> goto-statement .)
    INT             reduce using rule 226 (jump-statement -> goto-statement .)
    UINT            reduce using rule 226 (jump-statement -> goto-statement .)
    CHAR            reduce using rule 226 (jump-statement -> goto-statement .)
    DOUBLE          reduce using rule 226 (jump-statement -> goto-statement .)
    $end            reduce using rule 226 (jump-statement -> goto-statement .)
    CASE            reduce using rule 226 (jump-statement -> goto-statement .)
    DEFAULT         reduce using rule 226 (jump-statement -> goto-statement .)
    BLOCK_END       reduce using rule 226 (jump-statement -> goto-statement .)


state 28

    (189) selection-statement -> if-statement .

    IDENTIFIER      reduce using rule 189 (selection-statement -> if-statement .)
    BLOCK_BEGIN     reduce using rule 189 (selection-statement -> if-statement .)
    DELIM           reduce using rule 189 (selection-statement -> if-statement .)
    CONSOLE         reduce using rule 189 (selection-statement -> if-statement .)
    CONST           reduce using rule 189 (selection-statement -> if-statement .)
    IF              reduce using rule 189 (selection-statement -> if-statement .)
    SWITCH          reduce using rule 189 (selection-statement -> if-statement .)
    WHILE           reduce using rule 189 (selection-statement -> if-statement .)
    FOR             reduce using rule 189 (selection-statement -> if-statement .)
    FOREACH         reduce using rule 189 (selection-statement -> if-statement .)
    DO              reduce using rule 189 (selection-statement -> if-statement .)
    BREAK           reduce using rule 189 (selection-statement -> if-statement .)
    CONTINUE        reduce using rule 189 (selection-statement -> if-statement .)
    GOTO            reduce using rule 189 (selection-statement -> if-statement .)
    RETURN          reduce using rule 189 (selection-statement -> if-statement .)
    NEW             reduce using rule 189 (selection-statement -> if-statement .)
    INCRE           reduce using rule 189 (selection-statement -> if-statement .)
    DECRE           reduce using rule 189 (selection-statement -> if-statement .)
    BOOL            reduce using rule 189 (selection-statement -> if-statement .)
    INT             reduce using rule 189 (selection-statement -> if-statement .)
    UINT            reduce using rule 189 (selection-statement -> if-statement .)
    CHAR            reduce using rule 189 (selection-statement -> if-statement .)
    DOUBLE          reduce using rule 189 (selection-statement -> if-statement .)
    $end            reduce using rule 189 (selection-statement -> if-statement .)
    CASE            reduce using rule 189 (selection-statement -> if-statement .)
    DEFAULT         reduce using rule 189 (selection-statement -> if-statement .)
    BLOCK_END       reduce using rule 189 (selection-statement -> if-statement .)


state 29

    (229) continue-statement -> CONTINUE . DELIM

    DELIM           shift and go to state 122


state 30

    (163) statement -> block .

    IDENTIFIER      reduce using rule 163 (statement -> block .)
    BLOCK_BEGIN     reduce using rule 163 (statement -> block .)
    DELIM           reduce using rule 163 (statement -> block .)
    CONSOLE         reduce using rule 163 (statement -> block .)
    CONST           reduce using rule 163 (statement -> block .)
    IF              reduce using rule 163 (statement -> block .)
    SWITCH          reduce using rule 163 (statement -> block .)
    WHILE           reduce using rule 163 (statement -> block .)
    FOR             reduce using rule 163 (statement -> block .)
    FOREACH         reduce using rule 163 (statement -> block .)
    DO              reduce using rule 163 (statement -> block .)
    BREAK           reduce using rule 163 (statement -> block .)
    CONTINUE        reduce using rule 163 (statement -> block .)
    GOTO            reduce using rule 163 (statement -> block .)
    RETURN          reduce using rule 163 (statement -> block .)
    NEW             reduce using rule 163 (statement -> block .)
    INCRE           reduce using rule 163 (statement -> block .)
    DECRE           reduce using rule 163 (statement -> block .)
    BOOL            reduce using rule 163 (statement -> block .)
    INT             reduce using rule 163 (statement -> block .)
    UINT            reduce using rule 163 (statement -> block .)
    CHAR            reduce using rule 163 (statement -> block .)
    DOUBLE          reduce using rule 163 (statement -> block .)
    CASE            reduce using rule 163 (statement -> block .)
    DEFAULT         reduce using rule 163 (statement -> block .)
    BLOCK_END       reduce using rule 163 (statement -> block .)
    $end            reduce using rule 163 (statement -> block .)


state 31

    (180) empty-statement -> DELIM .

    IDENTIFIER      reduce using rule 180 (empty-statement -> DELIM .)
    BLOCK_BEGIN     reduce using rule 180 (empty-statement -> DELIM .)
    DELIM           reduce using rule 180 (empty-statement -> DELIM .)
    CONSOLE         reduce using rule 180 (empty-statement -> DELIM .)
    CONST           reduce using rule 180 (empty-statement -> DELIM .)
    IF              reduce using rule 180 (empty-statement -> DELIM .)
    SWITCH          reduce using rule 180 (empty-statement -> DELIM .)
    WHILE           reduce using rule 180 (empty-statement -> DELIM .)
    FOR             reduce using rule 180 (empty-statement -> DELIM .)
    FOREACH         reduce using rule 180 (empty-statement -> DELIM .)
    DO              reduce using rule 180 (empty-statement -> DELIM .)
    BREAK           reduce using rule 180 (empty-statement -> DELIM .)
    CONTINUE        reduce using rule 180 (empty-statement -> DELIM .)
    GOTO            reduce using rule 180 (empty-statement -> DELIM .)
    RETURN          reduce using rule 180 (empty-statement -> DELIM .)
    NEW             reduce using rule 180 (empty-statement -> DELIM .)
    INCRE           reduce using rule 180 (empty-statement -> DELIM .)
    DECRE           reduce using rule 180 (empty-statement -> DELIM .)
    BOOL            reduce using rule 180 (empty-statement -> DELIM .)
    INT             reduce using rule 180 (empty-statement -> DELIM .)
    UINT            reduce using rule 180 (empty-statement -> DELIM .)
    CHAR            reduce using rule 180 (empty-statement -> DELIM .)
    DOUBLE          reduce using rule 180 (empty-statement -> DELIM .)
    BLOCK_END       reduce using rule 180 (empty-statement -> DELIM .)
    $end            reduce using rule 180 (empty-statement -> DELIM .)
    CASE            reduce using rule 180 (empty-statement -> DELIM .)
    DEFAULT         reduce using rule 180 (empty-statement -> DELIM .)


state 32

    (166) statement -> selection-statement .

    IDENTIFIER      reduce using rule 166 (statement -> selection-statement .)
    BLOCK_BEGIN     reduce using rule 166 (statement -> selection-statement .)
    DELIM           reduce using rule 166 (statement -> selection-statement .)
    CONSOLE         reduce using rule 166 (statement -> selection-statement .)
    CONST           reduce using rule 166 (statement -> selection-statement .)
    IF              reduce using rule 166 (statement -> selection-statement .)
    SWITCH          reduce using rule 166 (statement -> selection-statement .)
    WHILE           reduce using rule 166 (statement -> selection-statement .)
    FOR             reduce using rule 166 (statement -> selection-statement .)
    FOREACH         reduce using rule 166 (statement -> selection-statement .)
    DO              reduce using rule 166 (statement -> selection-statement .)
    BREAK           reduce using rule 166 (statement -> selection-statement .)
    CONTINUE        reduce using rule 166 (statement -> selection-statement .)
    GOTO            reduce using rule 166 (statement -> selection-statement .)
    RETURN          reduce using rule 166 (statement -> selection-statement .)
    NEW             reduce using rule 166 (statement -> selection-statement .)
    INCRE           reduce using rule 166 (statement -> selection-statement .)
    DECRE           reduce using rule 166 (statement -> selection-statement .)
    BOOL            reduce using rule 166 (statement -> selection-statement .)
    INT             reduce using rule 166 (statement -> selection-statement .)
    UINT            reduce using rule 166 (statement -> selection-statement .)
    CHAR            reduce using rule 166 (statement -> selection-statement .)
    DOUBLE          reduce using rule 166 (statement -> selection-statement .)
    CASE            reduce using rule 166 (statement -> selection-statement .)
    DEFAULT         reduce using rule 166 (statement -> selection-statement .)
    BLOCK_END       reduce using rule 166 (statement -> selection-statement .)
    $end            reduce using rule 166 (statement -> selection-statement .)


state 33

    (118) pre-decrement-expression -> DECRE . prim-expression
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET

    IDENTIFIER      shift and go to state 73

    member-access                  shift and go to state 72
    prim-expression                shift and go to state 123
    element-access                 shift and go to state 20

state 34

    (32) simple-type -> CHAR .

    OPEN_BRACKET    reduce using rule 32 (simple-type -> CHAR .)
    IDENTIFIER      reduce using rule 32 (simple-type -> CHAR .)
    OPEN_PAREN      reduce using rule 32 (simple-type -> CHAR .)


state 35

    (208) while-statement -> WHILE . OPEN_PAREN expression CLOSE_PAREN block

    OPEN_PAREN      shift and go to state 124


state 36

    (164) statement -> empty-statement .

    IDENTIFIER      reduce using rule 164 (statement -> empty-statement .)
    BLOCK_BEGIN     reduce using rule 164 (statement -> empty-statement .)
    DELIM           reduce using rule 164 (statement -> empty-statement .)
    CONSOLE         reduce using rule 164 (statement -> empty-statement .)
    CONST           reduce using rule 164 (statement -> empty-statement .)
    IF              reduce using rule 164 (statement -> empty-statement .)
    SWITCH          reduce using rule 164 (statement -> empty-statement .)
    WHILE           reduce using rule 164 (statement -> empty-statement .)
    FOR             reduce using rule 164 (statement -> empty-statement .)
    FOREACH         reduce using rule 164 (statement -> empty-statement .)
    DO              reduce using rule 164 (statement -> empty-statement .)
    BREAK           reduce using rule 164 (statement -> empty-statement .)
    CONTINUE        reduce using rule 164 (statement -> empty-statement .)
    GOTO            reduce using rule 164 (statement -> empty-statement .)
    RETURN          reduce using rule 164 (statement -> empty-statement .)
    NEW             reduce using rule 164 (statement -> empty-statement .)
    INCRE           reduce using rule 164 (statement -> empty-statement .)
    DECRE           reduce using rule 164 (statement -> empty-statement .)
    BOOL            reduce using rule 164 (statement -> empty-statement .)
    INT             reduce using rule 164 (statement -> empty-statement .)
    UINT            reduce using rule 164 (statement -> empty-statement .)
    CHAR            reduce using rule 164 (statement -> empty-statement .)
    DOUBLE          reduce using rule 164 (statement -> empty-statement .)
    CASE            reduce using rule 164 (statement -> empty-statement .)
    DEFAULT         reduce using rule 164 (statement -> empty-statement .)
    BLOCK_END       reduce using rule 164 (statement -> empty-statement .)
    $end            reduce using rule 164 (statement -> empty-statement .)


state 37

    (116) object-creation-expression -> NEW . type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE
    (13) class-type -> . IDENTIFIER
    (34) array-type -> . simple-type OPEN_BRACKET CLOSE_BRACKET

    BOOL            shift and go to state 51
    INT             shift and go to state 50
    UINT            shift and go to state 64
    CHAR            shift and go to state 34
    DOUBLE          shift and go to state 13
    IDENTIFIER      shift and go to state 125

    simple-type                    shift and go to state 54
    array-type                     shift and go to state 45
    class-type                     shift and go to state 68
    type                           shift and go to state 126

state 38

    (224) jump-statement -> break-statement .

    IDENTIFIER      reduce using rule 224 (jump-statement -> break-statement .)
    BLOCK_BEGIN     reduce using rule 224 (jump-statement -> break-statement .)
    DELIM           reduce using rule 224 (jump-statement -> break-statement .)
    CONSOLE         reduce using rule 224 (jump-statement -> break-statement .)
    CONST           reduce using rule 224 (jump-statement -> break-statement .)
    IF              reduce using rule 224 (jump-statement -> break-statement .)
    SWITCH          reduce using rule 224 (jump-statement -> break-statement .)
    WHILE           reduce using rule 224 (jump-statement -> break-statement .)
    FOR             reduce using rule 224 (jump-statement -> break-statement .)
    FOREACH         reduce using rule 224 (jump-statement -> break-statement .)
    DO              reduce using rule 224 (jump-statement -> break-statement .)
    BREAK           reduce using rule 224 (jump-statement -> break-statement .)
    CONTINUE        reduce using rule 224 (jump-statement -> break-statement .)
    GOTO            reduce using rule 224 (jump-statement -> break-statement .)
    RETURN          reduce using rule 224 (jump-statement -> break-statement .)
    NEW             reduce using rule 224 (jump-statement -> break-statement .)
    INCRE           reduce using rule 224 (jump-statement -> break-statement .)
    DECRE           reduce using rule 224 (jump-statement -> break-statement .)
    BOOL            reduce using rule 224 (jump-statement -> break-statement .)
    INT             reduce using rule 224 (jump-statement -> break-statement .)
    UINT            reduce using rule 224 (jump-statement -> break-statement .)
    CHAR            reduce using rule 224 (jump-statement -> break-statement .)
    DOUBLE          reduce using rule 224 (jump-statement -> break-statement .)
    $end            reduce using rule 224 (jump-statement -> break-statement .)
    CASE            reduce using rule 224 (jump-statement -> break-statement .)
    DEFAULT         reduce using rule 224 (jump-statement -> break-statement .)
    BLOCK_END       reduce using rule 224 (jump-statement -> break-statement .)


state 39

    (181) expression-statement -> statement-expression . DELIM

    DELIM           shift and go to state 127


state 40

    (193) switch-statement -> SWITCH . OPEN_PAREN expression CLOSE_PAREN switch-block

    OPEN_PAREN      shift and go to state 128


state 41

    (159) statement-list -> statement .

    IDENTIFIER      reduce using rule 159 (statement-list -> statement .)
    BLOCK_BEGIN     reduce using rule 159 (statement-list -> statement .)
    DELIM           reduce using rule 159 (statement-list -> statement .)
    CONSOLE         reduce using rule 159 (statement-list -> statement .)
    CONST           reduce using rule 159 (statement-list -> statement .)
    IF              reduce using rule 159 (statement-list -> statement .)
    SWITCH          reduce using rule 159 (statement-list -> statement .)
    WHILE           reduce using rule 159 (statement-list -> statement .)
    FOR             reduce using rule 159 (statement-list -> statement .)
    FOREACH         reduce using rule 159 (statement-list -> statement .)
    DO              reduce using rule 159 (statement-list -> statement .)
    BREAK           reduce using rule 159 (statement-list -> statement .)
    CONTINUE        reduce using rule 159 (statement-list -> statement .)
    GOTO            reduce using rule 159 (statement-list -> statement .)
    RETURN          reduce using rule 159 (statement-list -> statement .)
    NEW             reduce using rule 159 (statement-list -> statement .)
    INCRE           reduce using rule 159 (statement-list -> statement .)
    DECRE           reduce using rule 159 (statement-list -> statement .)
    BOOL            reduce using rule 159 (statement-list -> statement .)
    INT             reduce using rule 159 (statement-list -> statement .)
    UINT            reduce using rule 159 (statement-list -> statement .)
    CHAR            reduce using rule 159 (statement-list -> statement .)
    DOUBLE          reduce using rule 159 (statement-list -> statement .)
    BLOCK_END       reduce using rule 159 (statement-list -> statement .)
    $end            reduce using rule 159 (statement-list -> statement .)
    CASE            reduce using rule 159 (statement-list -> statement .)
    DEFAULT         reduce using rule 159 (statement-list -> statement .)


state 42

    (175) labeled-statement -> IDENTIFIER . COLON statement
    (100) invocation-expression -> IDENTIFIER . OPEN_PAREN argument-list-opt CLOSE_PAREN
    (13) class-type -> IDENTIFIER .
    (111) prim-expression -> IDENTIFIER .
    (109) element-access -> IDENTIFIER . OPEN_BRACKET expression-list CLOSE_BRACKET

    COLON           shift and go to state 131
    OPEN_PAREN      shift and go to state 130
    IDENTIFIER      reduce using rule 13 (class-type -> IDENTIFIER .)
    INCRE           reduce using rule 111 (prim-expression -> IDENTIFIER .)
    DECRE           reduce using rule 111 (prim-expression -> IDENTIFIER .)
    DOT             reduce using rule 111 (prim-expression -> IDENTIFIER .)
    ASSIGN          reduce using rule 111 (prim-expression -> IDENTIFIER .)
    PLUSEQUAL       reduce using rule 111 (prim-expression -> IDENTIFIER .)
    MINUSEQUAL      reduce using rule 111 (prim-expression -> IDENTIFIER .)
    TIMESEQUAL      reduce using rule 111 (prim-expression -> IDENTIFIER .)
    DIVEQUAL        reduce using rule 111 (prim-expression -> IDENTIFIER .)
    MODEQUAL        reduce using rule 111 (prim-expression -> IDENTIFIER .)
    BITANDEQUAL     reduce using rule 111 (prim-expression -> IDENTIFIER .)
    BITOREQUAL      reduce using rule 111 (prim-expression -> IDENTIFIER .)
    BITXOREQUAL     reduce using rule 111 (prim-expression -> IDENTIFIER .)
    LSHIFTEQUAL     reduce using rule 111 (prim-expression -> IDENTIFIER .)
    RSHIFTEQUAL     reduce using rule 111 (prim-expression -> IDENTIFIER .)
    OPEN_BRACKET    shift and go to state 129


state 43

    (178) local-variable-declaration -> type . variable-declarators
    (135) variable-declarators -> . variable-declarator
    (136) variable-declarators -> . variable-declarators COMMA variable-declarator
    (137) variable-declarator -> . IDENTIFIER
    (138) variable-declarator -> . IDENTIFIER ASSIGN variable-initializer

    IDENTIFIER      shift and go to state 134

    variable-declarator            shift and go to state 132
    variable-declarators           shift and go to state 133

state 44

    (6) class-declarations-opt -> empty .

    $end            reduce using rule 6 (class-declarations-opt -> empty .)


state 45

    (28) type -> array-type .

    IDENTIFIER      reduce using rule 28 (type -> array-type .)
    OPEN_PAREN      reduce using rule 28 (type -> array-type .)


state 46

    (186) statement-expression -> post-decrement-expression .

    COMMA           reduce using rule 186 (statement-expression -> post-decrement-expression .)
    CLOSE_PAREN     reduce using rule 186 (statement-expression -> post-decrement-expression .)
    DELIM           reduce using rule 186 (statement-expression -> post-decrement-expression .)


state 47

    (162) statement -> declaration-statement .

    IDENTIFIER      reduce using rule 162 (statement -> declaration-statement .)
    BLOCK_BEGIN     reduce using rule 162 (statement -> declaration-statement .)
    DELIM           reduce using rule 162 (statement -> declaration-statement .)
    CONSOLE         reduce using rule 162 (statement -> declaration-statement .)
    CONST           reduce using rule 162 (statement -> declaration-statement .)
    IF              reduce using rule 162 (statement -> declaration-statement .)
    SWITCH          reduce using rule 162 (statement -> declaration-statement .)
    WHILE           reduce using rule 162 (statement -> declaration-statement .)
    FOR             reduce using rule 162 (statement -> declaration-statement .)
    FOREACH         reduce using rule 162 (statement -> declaration-statement .)
    DO              reduce using rule 162 (statement -> declaration-statement .)
    BREAK           reduce using rule 162 (statement -> declaration-statement .)
    CONTINUE        reduce using rule 162 (statement -> declaration-statement .)
    GOTO            reduce using rule 162 (statement -> declaration-statement .)
    RETURN          reduce using rule 162 (statement -> declaration-statement .)
    NEW             reduce using rule 162 (statement -> declaration-statement .)
    INCRE           reduce using rule 162 (statement -> declaration-statement .)
    DECRE           reduce using rule 162 (statement -> declaration-statement .)
    BOOL            reduce using rule 162 (statement -> declaration-statement .)
    INT             reduce using rule 162 (statement -> declaration-statement .)
    UINT            reduce using rule 162 (statement -> declaration-statement .)
    CHAR            reduce using rule 162 (statement -> declaration-statement .)
    DOUBLE          reduce using rule 162 (statement -> declaration-statement .)
    CASE            reduce using rule 162 (statement -> declaration-statement .)
    DEFAULT         reduce using rule 162 (statement -> declaration-statement .)
    BLOCK_END       reduce using rule 162 (statement -> declaration-statement .)
    $end            reduce using rule 162 (statement -> declaration-statement .)


state 48

    (167) statement -> iteration-statement .

    IDENTIFIER      reduce using rule 167 (statement -> iteration-statement .)
    BLOCK_BEGIN     reduce using rule 167 (statement -> iteration-statement .)
    DELIM           reduce using rule 167 (statement -> iteration-statement .)
    CONSOLE         reduce using rule 167 (statement -> iteration-statement .)
    CONST           reduce using rule 167 (statement -> iteration-statement .)
    IF              reduce using rule 167 (statement -> iteration-statement .)
    SWITCH          reduce using rule 167 (statement -> iteration-statement .)
    WHILE           reduce using rule 167 (statement -> iteration-statement .)
    FOR             reduce using rule 167 (statement -> iteration-statement .)
    FOREACH         reduce using rule 167 (statement -> iteration-statement .)
    DO              reduce using rule 167 (statement -> iteration-statement .)
    BREAK           reduce using rule 167 (statement -> iteration-statement .)
    CONTINUE        reduce using rule 167 (statement -> iteration-statement .)
    GOTO            reduce using rule 167 (statement -> iteration-statement .)
    RETURN          reduce using rule 167 (statement -> iteration-statement .)
    NEW             reduce using rule 167 (statement -> iteration-statement .)
    INCRE           reduce using rule 167 (statement -> iteration-statement .)
    DECRE           reduce using rule 167 (statement -> iteration-statement .)
    BOOL            reduce using rule 167 (statement -> iteration-statement .)
    INT             reduce using rule 167 (statement -> iteration-statement .)
    UINT            reduce using rule 167 (statement -> iteration-statement .)
    CHAR            reduce using rule 167 (statement -> iteration-statement .)
    DOUBLE          reduce using rule 167 (statement -> iteration-statement .)
    CASE            reduce using rule 167 (statement -> iteration-statement .)
    DEFAULT         reduce using rule 167 (statement -> iteration-statement .)
    BLOCK_END       reduce using rule 167 (statement -> iteration-statement .)
    $end            reduce using rule 167 (statement -> iteration-statement .)


state 49

    (228) break-statement -> BREAK . DELIM

    DELIM           shift and go to state 135


state 50

    (30) simple-type -> INT .

    OPEN_BRACKET    reduce using rule 30 (simple-type -> INT .)
    IDENTIFIER      reduce using rule 30 (simple-type -> INT .)
    OPEN_PAREN      reduce using rule 30 (simple-type -> INT .)


state 51

    (29) simple-type -> BOOL .

    OPEN_BRACKET    reduce using rule 29 (simple-type -> BOOL .)
    IDENTIFIER      reduce using rule 29 (simple-type -> BOOL .)
    OPEN_PAREN      reduce using rule 29 (simple-type -> BOOL .)


state 52

    (2) compilation-unit -> statement-list .
    (160) statement-list -> statement-list . statement
    (161) statement -> . labeled-statement
    (162) statement -> . declaration-statement
    (163) statement -> . block
    (164) statement -> . empty-statement
    (165) statement -> . expression-statement
    (166) statement -> . selection-statement
    (167) statement -> . iteration-statement
    (168) statement -> . jump-statement
    (169) statement -> . write-statement
    (170) statement -> . read-statement
    (175) labeled-statement -> . IDENTIFIER COLON statement
    (176) declaration-statement -> . local-variable-declaration DELIM
    (177) declaration-statement -> . local-constant-declaration DELIM
    (156) block -> . BLOCK_BEGIN statement-list-opt BLOCK_END
    (180) empty-statement -> . DELIM
    (181) expression-statement -> . statement-expression DELIM
    (189) selection-statement -> . if-statement
    (190) selection-statement -> . switch-statement
    (204) iteration-statement -> . while-statement
    (205) iteration-statement -> . for-statement
    (206) iteration-statement -> . foreach-statement
    (207) iteration-statement -> . do-statement
    (224) jump-statement -> . break-statement
    (225) jump-statement -> . continue-statement
    (226) jump-statement -> . goto-statement
    (227) jump-statement -> . return-statement
    (171) write-statement -> . CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN
    (174) read-statement -> . CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN
    (178) local-variable-declaration -> . type variable-declarators
    (179) local-constant-declaration -> . CONST type constant-declarators
    (182) statement-expression -> . invocation-expression
    (183) statement-expression -> . object-creation-expression
    (184) statement-expression -> . assignment
    (185) statement-expression -> . post-increment-expression
    (186) statement-expression -> . post-decrement-expression
    (187) statement-expression -> . pre-increment-expression
    (188) statement-expression -> . pre-decrement-expression
    (191) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN block
    (192) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN block ELSE block
    (193) switch-statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block
    (208) while-statement -> . WHILE OPEN_PAREN expression CLOSE_PAREN block
    (210) for-statement -> . FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN block
    (223) foreach-statement -> . FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN block
    (209) do-statement -> . DO block WHILE OPEN_PAREN expression CLOSE_PAREN DELIM
    (228) break-statement -> . BREAK DELIM
    (229) continue-statement -> . CONTINUE DELIM
    (230) goto-statement -> . GOTO IDENTIFIER DELIM
    (231) return-statement -> . RETURN expression-opt DELIM
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (119) assignment -> . prim-expression assignment-operator expression
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE
    (13) class-type -> . IDENTIFIER
    (34) array-type -> . simple-type OPEN_BRACKET CLOSE_BRACKET
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET

    $end            reduce using rule 2 (compilation-unit -> statement-list .)
    IDENTIFIER      shift and go to state 42
    BLOCK_BEGIN     shift and go to state 57
    DELIM           shift and go to state 31
    CONSOLE         shift and go to state 61
    CONST           shift and go to state 56
    IF              shift and go to state 67
    SWITCH          shift and go to state 40
    WHILE           shift and go to state 35
    FOR             shift and go to state 23
    FOREACH         shift and go to state 9
    DO              shift and go to state 55
    BREAK           shift and go to state 49
    CONTINUE        shift and go to state 29
    GOTO            shift and go to state 7
    RETURN          shift and go to state 15
    NEW             shift and go to state 37
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    BOOL            shift and go to state 51
    INT             shift and go to state 50
    UINT            shift and go to state 64
    CHAR            shift and go to state 34
    DOUBLE          shift and go to state 13

    return-statement               shift and go to state 17
    prim-expression                shift and go to state 58
    write-statement                shift and go to state 1
    member-access                  shift and go to state 2
    selection-statement            shift and go to state 32
    empty-statement                shift and go to state 36
    expression-statement           shift and go to state 3
    pre-decrement-expression       shift and go to state 25
    foreach-statement              shift and go to state 19
    break-statement                shift and go to state 38
    post-increment-expression      shift and go to state 4
    element-access                 shift and go to state 20
    statement-expression           shift and go to state 39
    local-constant-declaration     shift and go to state 21
    statement                      shift and go to state 136
    assignment                     shift and go to state 62
    for-statement                  shift and go to state 6
    type                           shift and go to state 43
    read-statement                 shift and go to state 60
    do-statement                   shift and go to state 22
    array-type                     shift and go to state 45
    continue-statement             shift and go to state 24
    invocation-expression          shift and go to state 14
    labeled-statement              shift and go to state 8
    declaration-statement          shift and go to state 47
    object-creation-expression     shift and go to state 65
    post-decrement-expression      shift and go to state 46
    switch-statement               shift and go to state 10
    pre-increment-expression       shift and go to state 66
    jump-statement                 shift and go to state 11
    iteration-statement            shift and go to state 48
    local-variable-declaration     shift and go to state 26
    goto-statement                 shift and go to state 27
    if-statement                   shift and go to state 28
    class-type                     shift and go to state 68
    while-statement                shift and go to state 53
    simple-type                    shift and go to state 54
    block                          shift and go to state 30

state 53

    (204) iteration-statement -> while-statement .

    IDENTIFIER      reduce using rule 204 (iteration-statement -> while-statement .)
    BLOCK_BEGIN     reduce using rule 204 (iteration-statement -> while-statement .)
    DELIM           reduce using rule 204 (iteration-statement -> while-statement .)
    CONSOLE         reduce using rule 204 (iteration-statement -> while-statement .)
    CONST           reduce using rule 204 (iteration-statement -> while-statement .)
    IF              reduce using rule 204 (iteration-statement -> while-statement .)
    SWITCH          reduce using rule 204 (iteration-statement -> while-statement .)
    WHILE           reduce using rule 204 (iteration-statement -> while-statement .)
    FOR             reduce using rule 204 (iteration-statement -> while-statement .)
    FOREACH         reduce using rule 204 (iteration-statement -> while-statement .)
    DO              reduce using rule 204 (iteration-statement -> while-statement .)
    BREAK           reduce using rule 204 (iteration-statement -> while-statement .)
    CONTINUE        reduce using rule 204 (iteration-statement -> while-statement .)
    GOTO            reduce using rule 204 (iteration-statement -> while-statement .)
    RETURN          reduce using rule 204 (iteration-statement -> while-statement .)
    NEW             reduce using rule 204 (iteration-statement -> while-statement .)
    INCRE           reduce using rule 204 (iteration-statement -> while-statement .)
    DECRE           reduce using rule 204 (iteration-statement -> while-statement .)
    BOOL            reduce using rule 204 (iteration-statement -> while-statement .)
    INT             reduce using rule 204 (iteration-statement -> while-statement .)
    UINT            reduce using rule 204 (iteration-statement -> while-statement .)
    CHAR            reduce using rule 204 (iteration-statement -> while-statement .)
    DOUBLE          reduce using rule 204 (iteration-statement -> while-statement .)
    CASE            reduce using rule 204 (iteration-statement -> while-statement .)
    DEFAULT         reduce using rule 204 (iteration-statement -> while-statement .)
    BLOCK_END       reduce using rule 204 (iteration-statement -> while-statement .)
    $end            reduce using rule 204 (iteration-statement -> while-statement .)


state 54

    (26) type -> simple-type .
    (34) array-type -> simple-type . OPEN_BRACKET CLOSE_BRACKET

    IDENTIFIER      reduce using rule 26 (type -> simple-type .)
    OPEN_PAREN      reduce using rule 26 (type -> simple-type .)
    OPEN_BRACKET    shift and go to state 137


state 55

    (209) do-statement -> DO . block WHILE OPEN_PAREN expression CLOSE_PAREN DELIM
    (156) block -> . BLOCK_BEGIN statement-list-opt BLOCK_END

    BLOCK_BEGIN     shift and go to state 57

    block                          shift and go to state 138

state 56

    (179) local-constant-declaration -> CONST . type constant-declarators
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE
    (13) class-type -> . IDENTIFIER
    (34) array-type -> . simple-type OPEN_BRACKET CLOSE_BRACKET

    BOOL            shift and go to state 51
    INT             shift and go to state 50
    UINT            shift and go to state 64
    CHAR            shift and go to state 34
    DOUBLE          shift and go to state 13
    IDENTIFIER      shift and go to state 125

    simple-type                    shift and go to state 54
    array-type                     shift and go to state 45
    type                           shift and go to state 139
    class-type                     shift and go to state 68

state 57

    (156) block -> BLOCK_BEGIN . statement-list-opt BLOCK_END
    (157) statement-list-opt -> . statement-list
    (158) statement-list-opt -> . empty
    (159) statement-list -> . statement
    (160) statement-list -> . statement-list statement
    (245) empty -> .
    (161) statement -> . labeled-statement
    (162) statement -> . declaration-statement
    (163) statement -> . block
    (164) statement -> . empty-statement
    (165) statement -> . expression-statement
    (166) statement -> . selection-statement
    (167) statement -> . iteration-statement
    (168) statement -> . jump-statement
    (169) statement -> . write-statement
    (170) statement -> . read-statement
    (175) labeled-statement -> . IDENTIFIER COLON statement
    (176) declaration-statement -> . local-variable-declaration DELIM
    (177) declaration-statement -> . local-constant-declaration DELIM
    (156) block -> . BLOCK_BEGIN statement-list-opt BLOCK_END
    (180) empty-statement -> . DELIM
    (181) expression-statement -> . statement-expression DELIM
    (189) selection-statement -> . if-statement
    (190) selection-statement -> . switch-statement
    (204) iteration-statement -> . while-statement
    (205) iteration-statement -> . for-statement
    (206) iteration-statement -> . foreach-statement
    (207) iteration-statement -> . do-statement
    (224) jump-statement -> . break-statement
    (225) jump-statement -> . continue-statement
    (226) jump-statement -> . goto-statement
    (227) jump-statement -> . return-statement
    (171) write-statement -> . CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN
    (174) read-statement -> . CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN
    (178) local-variable-declaration -> . type variable-declarators
    (179) local-constant-declaration -> . CONST type constant-declarators
    (182) statement-expression -> . invocation-expression
    (183) statement-expression -> . object-creation-expression
    (184) statement-expression -> . assignment
    (185) statement-expression -> . post-increment-expression
    (186) statement-expression -> . post-decrement-expression
    (187) statement-expression -> . pre-increment-expression
    (188) statement-expression -> . pre-decrement-expression
    (191) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN block
    (192) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN block ELSE block
    (193) switch-statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block
    (208) while-statement -> . WHILE OPEN_PAREN expression CLOSE_PAREN block
    (210) for-statement -> . FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN block
    (223) foreach-statement -> . FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN block
    (209) do-statement -> . DO block WHILE OPEN_PAREN expression CLOSE_PAREN DELIM
    (228) break-statement -> . BREAK DELIM
    (229) continue-statement -> . CONTINUE DELIM
    (230) goto-statement -> . GOTO IDENTIFIER DELIM
    (231) return-statement -> . RETURN expression-opt DELIM
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (119) assignment -> . prim-expression assignment-operator expression
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE
    (13) class-type -> . IDENTIFIER
    (34) array-type -> . simple-type OPEN_BRACKET CLOSE_BRACKET
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET

    BLOCK_END       reduce using rule 245 (empty -> .)
    IDENTIFIER      shift and go to state 42
    BLOCK_BEGIN     shift and go to state 57
    DELIM           shift and go to state 31
    CONSOLE         shift and go to state 61
    CONST           shift and go to state 56
    IF              shift and go to state 67
    SWITCH          shift and go to state 40
    WHILE           shift and go to state 35
    FOR             shift and go to state 23
    FOREACH         shift and go to state 9
    DO              shift and go to state 55
    BREAK           shift and go to state 49
    CONTINUE        shift and go to state 29
    GOTO            shift and go to state 7
    RETURN          shift and go to state 15
    NEW             shift and go to state 37
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    BOOL            shift and go to state 51
    INT             shift and go to state 50
    UINT            shift and go to state 64
    CHAR            shift and go to state 34
    DOUBLE          shift and go to state 13

    return-statement               shift and go to state 17
    prim-expression                shift and go to state 58
    write-statement                shift and go to state 1
    member-access                  shift and go to state 2
    selection-statement            shift and go to state 32
    empty-statement                shift and go to state 36
    statement-list-opt             shift and go to state 142
    expression-statement           shift and go to state 3
    pre-decrement-expression       shift and go to state 25
    foreach-statement              shift and go to state 19
    break-statement                shift and go to state 38
    post-increment-expression      shift and go to state 4
    element-access                 shift and go to state 20
    statement-expression           shift and go to state 39
    local-constant-declaration     shift and go to state 21
    statement                      shift and go to state 41
    assignment                     shift and go to state 62
    for-statement                  shift and go to state 6
    type                           shift and go to state 43
    read-statement                 shift and go to state 60
    do-statement                   shift and go to state 22
    array-type                     shift and go to state 45
    continue-statement             shift and go to state 24
    invocation-expression          shift and go to state 14
    labeled-statement              shift and go to state 8
    declaration-statement          shift and go to state 47
    object-creation-expression     shift and go to state 65
    post-decrement-expression      shift and go to state 46
    switch-statement               shift and go to state 10
    pre-increment-expression       shift and go to state 66
    iteration-statement            shift and go to state 48
    jump-statement                 shift and go to state 11
    local-variable-declaration     shift and go to state 26
    goto-statement                 shift and go to state 27
    if-statement                   shift and go to state 28
    empty                          shift and go to state 140
    statement-list                 shift and go to state 141
    class-type                     shift and go to state 68
    while-statement                shift and go to state 53
    simple-type                    shift and go to state 54
    block                          shift and go to state 30

state 58

    (119) assignment -> prim-expression . assignment-operator expression
    (114) post-increment-expression -> prim-expression . INCRE
    (115) post-decrement-expression -> prim-expression . DECRE
    (99) member-access -> prim-expression . DOT IDENTIFIER
    (120) assignment-operator -> . ASSIGN
    (121) assignment-operator -> . PLUSEQUAL
    (122) assignment-operator -> . MINUSEQUAL
    (123) assignment-operator -> . TIMESEQUAL
    (124) assignment-operator -> . DIVEQUAL
    (125) assignment-operator -> . MODEQUAL
    (126) assignment-operator -> . BITANDEQUAL
    (127) assignment-operator -> . BITOREQUAL
    (128) assignment-operator -> . BITXOREQUAL
    (129) assignment-operator -> . LSHIFTEQUAL
    (130) assignment-operator -> . RSHIFTEQUAL

    INCRE           shift and go to state 151
    DECRE           shift and go to state 148
    DOT             shift and go to state 156
    ASSIGN          shift and go to state 155
    PLUSEQUAL       shift and go to state 150
    MINUSEQUAL      shift and go to state 147
    TIMESEQUAL      shift and go to state 146
    DIVEQUAL        shift and go to state 143
    MODEQUAL        shift and go to state 157
    BITANDEQUAL     shift and go to state 153
    BITOREQUAL      shift and go to state 149
    BITXOREQUAL     shift and go to state 152
    LSHIFTEQUAL     shift and go to state 154
    RSHIFTEQUAL     shift and go to state 144

    assignment-operator            shift and go to state 145

state 59

    (9) class-declaration -> CLASS . IDENTIFIER class-base-opt class-body semi-opt

    IDENTIFIER      shift and go to state 158


state 60

    (170) statement -> read-statement .

    IDENTIFIER      reduce using rule 170 (statement -> read-statement .)
    BLOCK_BEGIN     reduce using rule 170 (statement -> read-statement .)
    DELIM           reduce using rule 170 (statement -> read-statement .)
    CONSOLE         reduce using rule 170 (statement -> read-statement .)
    CONST           reduce using rule 170 (statement -> read-statement .)
    IF              reduce using rule 170 (statement -> read-statement .)
    SWITCH          reduce using rule 170 (statement -> read-statement .)
    WHILE           reduce using rule 170 (statement -> read-statement .)
    FOR             reduce using rule 170 (statement -> read-statement .)
    FOREACH         reduce using rule 170 (statement -> read-statement .)
    DO              reduce using rule 170 (statement -> read-statement .)
    BREAK           reduce using rule 170 (statement -> read-statement .)
    CONTINUE        reduce using rule 170 (statement -> read-statement .)
    GOTO            reduce using rule 170 (statement -> read-statement .)
    RETURN          reduce using rule 170 (statement -> read-statement .)
    NEW             reduce using rule 170 (statement -> read-statement .)
    INCRE           reduce using rule 170 (statement -> read-statement .)
    DECRE           reduce using rule 170 (statement -> read-statement .)
    BOOL            reduce using rule 170 (statement -> read-statement .)
    INT             reduce using rule 170 (statement -> read-statement .)
    UINT            reduce using rule 170 (statement -> read-statement .)
    CHAR            reduce using rule 170 (statement -> read-statement .)
    DOUBLE          reduce using rule 170 (statement -> read-statement .)
    CASE            reduce using rule 170 (statement -> read-statement .)
    DEFAULT         reduce using rule 170 (statement -> read-statement .)
    BLOCK_END       reduce using rule 170 (statement -> read-statement .)
    $end            reduce using rule 170 (statement -> read-statement .)


state 61

    (171) write-statement -> CONSOLE . DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN
    (174) read-statement -> CONSOLE . DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN

    DOT             shift and go to state 159


state 62

    (184) statement-expression -> assignment .

    COMMA           reduce using rule 184 (statement-expression -> assignment .)
    CLOSE_PAREN     reduce using rule 184 (statement-expression -> assignment .)
    DELIM           reduce using rule 184 (statement-expression -> assignment .)


state 63

    (7) class-declarations -> class-declaration .

    CLASS           reduce using rule 7 (class-declarations -> class-declaration .)
    $end            reduce using rule 7 (class-declarations -> class-declaration .)


state 64

    (31) simple-type -> UINT .

    OPEN_BRACKET    reduce using rule 31 (simple-type -> UINT .)
    IDENTIFIER      reduce using rule 31 (simple-type -> UINT .)
    OPEN_PAREN      reduce using rule 31 (simple-type -> UINT .)


state 65

    (183) statement-expression -> object-creation-expression .

    COMMA           reduce using rule 183 (statement-expression -> object-creation-expression .)
    CLOSE_PAREN     reduce using rule 183 (statement-expression -> object-creation-expression .)
    DELIM           reduce using rule 183 (statement-expression -> object-creation-expression .)


state 66

    (187) statement-expression -> pre-increment-expression .

    COMMA           reduce using rule 187 (statement-expression -> pre-increment-expression .)
    CLOSE_PAREN     reduce using rule 187 (statement-expression -> pre-increment-expression .)
    DELIM           reduce using rule 187 (statement-expression -> pre-increment-expression .)


state 67

    (191) if-statement -> IF . OPEN_PAREN expression CLOSE_PAREN block
    (192) if-statement -> IF . OPEN_PAREN expression CLOSE_PAREN block ELSE block

    OPEN_PAREN      shift and go to state 160


state 68

    (27) type -> class-type .

    IDENTIFIER      reduce using rule 27 (type -> class-type .)
    OPEN_PAREN      reduce using rule 27 (type -> class-type .)


state 69

    (110) element-access -> member-access OPEN_BRACKET . expression-list CLOSE_BRACKET
    (83) expression-list -> . expression
    (84) expression-list -> . expression-list COMMA expression
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (119) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) unary-expression -> . pre-increment-expression
    (77) unary-expression -> . pre-decrement-expression
    (78) primary-expression -> . array-creation-expression
    (79) primary-expression -> . primary-no-array-creation-expression
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (80) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (90) primary-no-array-creation-expression -> . literal
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (94) primary-no-array-creation-expression -> . element-access
    (95) primary-no-array-creation-expression -> . post-increment-expression
    (96) primary-no-array-creation-expression -> . post-decrement-expression
    (97) primary-no-array-creation-expression -> . object-creation-expression
    (241) literal -> . ICONST
    (242) literal -> . DCONST
    (243) literal -> . TRUE
    (244) literal -> . FALSE
    (98) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 94
    PLUS            shift and go to state 93
    MINUS           shift and go to state 84
    BITNOT          shift and go to state 113
    BITCOMP         shift and go to state 88
    TIMES           shift and go to state 99
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    NEW             shift and go to state 82
    ICONST          shift and go to state 101
    DCONST          shift and go to state 114
    TRUE            shift and go to state 107
    FALSE           shift and go to state 105
    OPEN_PAREN      shift and go to state 96

    unary-expression               shift and go to state 103
    exclusive-or-expression        shift and go to state 78
    member-access                  shift and go to state 79
    relational-expression          shift and go to state 80
    additive-expression            shift and go to state 83
    primary-no-array-creation-expression shift and go to state 100
    inclusive-or-expression        shift and go to state 86
    equality-expression            shift and go to state 87
    prim-expression                shift and go to state 77
    element-access                 shift and go to state 89
    literal                        shift and go to state 98
    conditional-expression         shift and go to state 90
    conditional-and-expression     shift and go to state 91
    post-decrement-expression      shift and go to state 92
    array-creation-expression      shift and go to state 81
    assignment                     shift and go to state 97
    post-increment-expression      shift and go to state 85
    object-creation-expression     shift and go to state 102
    pre-increment-expression       shift and go to state 106
    expression-list                shift and go to state 161
    shift-expression               shift and go to state 108
    and-expression                 shift and go to state 109
    pre-decrement-expression       shift and go to state 110
    multiplicative-expression      shift and go to state 111
    conditional-or-expression      shift and go to state 117
    primary-expression             shift and go to state 115
    invocation-expression          shift and go to state 116
    expression                     shift and go to state 162
    parenthesized-expression       shift and go to state 118

state 70

    (101) invocation-expression -> member-access OPEN_PAREN . argument-list-opt CLOSE_PAREN
    (102) argument-list-opt -> . argument-list
    (103) argument-list-opt -> . empty
    (104) argument-list -> . argument
    (105) argument-list -> . argument-list COMMA argument
    (245) empty -> .
    (106) argument -> . expression
    (107) argument -> . OUT variable-reference
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (119) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) unary-expression -> . pre-increment-expression
    (77) unary-expression -> . pre-decrement-expression
    (78) primary-expression -> . array-creation-expression
    (79) primary-expression -> . primary-no-array-creation-expression
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (80) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (90) primary-no-array-creation-expression -> . literal
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (94) primary-no-array-creation-expression -> . element-access
    (95) primary-no-array-creation-expression -> . post-increment-expression
    (96) primary-no-array-creation-expression -> . post-decrement-expression
    (97) primary-no-array-creation-expression -> . object-creation-expression
    (241) literal -> . ICONST
    (242) literal -> . DCONST
    (243) literal -> . TRUE
    (244) literal -> . FALSE
    (98) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    CLOSE_PAREN     reduce using rule 245 (empty -> .)
    OUT             shift and go to state 166
    IDENTIFIER      shift and go to state 94
    PLUS            shift and go to state 93
    MINUS           shift and go to state 84
    BITNOT          shift and go to state 113
    BITCOMP         shift and go to state 88
    TIMES           shift and go to state 99
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    NEW             shift and go to state 82
    ICONST          shift and go to state 101
    DCONST          shift and go to state 114
    TRUE            shift and go to state 107
    FALSE           shift and go to state 105
    OPEN_PAREN      shift and go to state 96

    argument-list-opt              shift and go to state 163
    unary-expression               shift and go to state 103
    exclusive-or-expression        shift and go to state 78
    member-access                  shift and go to state 79
    argument                       shift and go to state 164
    relational-expression          shift and go to state 80
    additive-expression            shift and go to state 83
    primary-no-array-creation-expression shift and go to state 100
    inclusive-or-expression        shift and go to state 86
    equality-expression            shift and go to state 87
    prim-expression                shift and go to state 77
    element-access                 shift and go to state 89
    literal                        shift and go to state 98
    conditional-expression         shift and go to state 90
    conditional-and-expression     shift and go to state 91
    post-decrement-expression      shift and go to state 92
    argument-list                  shift and go to state 167
    empty                          shift and go to state 165
    array-creation-expression      shift and go to state 81
    assignment                     shift and go to state 97
    post-increment-expression      shift and go to state 85
    object-creation-expression     shift and go to state 102
    pre-increment-expression       shift and go to state 106
    shift-expression               shift and go to state 108
    and-expression                 shift and go to state 109
    pre-decrement-expression       shift and go to state 110
    multiplicative-expression      shift and go to state 111
    expression                     shift and go to state 168
    primary-expression             shift and go to state 115
    invocation-expression          shift and go to state 116
    conditional-or-expression      shift and go to state 117
    parenthesized-expression       shift and go to state 118

state 71

    (117) pre-increment-expression -> INCRE prim-expression .
    (99) member-access -> prim-expression . DOT IDENTIFIER

    TIMES           reduce using rule 117 (pre-increment-expression -> INCRE prim-expression .)
    DIV             reduce using rule 117 (pre-increment-expression -> INCRE prim-expression .)
    MOD             reduce using rule 117 (pre-increment-expression -> INCRE prim-expression .)
    PLUS            reduce using rule 117 (pre-increment-expression -> INCRE prim-expression .)
    MINUS           reduce using rule 117 (pre-increment-expression -> INCRE prim-expression .)
    LSHIFT          reduce using rule 117 (pre-increment-expression -> INCRE prim-expression .)
    RSHIFT          reduce using rule 117 (pre-increment-expression -> INCRE prim-expression .)
    LT              reduce using rule 117 (pre-increment-expression -> INCRE prim-expression .)
    GT              reduce using rule 117 (pre-increment-expression -> INCRE prim-expression .)
    LE              reduce using rule 117 (pre-increment-expression -> INCRE prim-expression .)
    GE              reduce using rule 117 (pre-increment-expression -> INCRE prim-expression .)
    EQ              reduce using rule 117 (pre-increment-expression -> INCRE prim-expression .)
    NE              reduce using rule 117 (pre-increment-expression -> INCRE prim-expression .)
    BITAND          reduce using rule 117 (pre-increment-expression -> INCRE prim-expression .)
    BITXOR          reduce using rule 117 (pre-increment-expression -> INCRE prim-expression .)
    BITOR           reduce using rule 117 (pre-increment-expression -> INCRE prim-expression .)
    LOGAND          reduce using rule 117 (pre-increment-expression -> INCRE prim-expression .)
    CONDOP          reduce using rule 117 (pre-increment-expression -> INCRE prim-expression .)
    LOGOR           reduce using rule 117 (pre-increment-expression -> INCRE prim-expression .)
    DELIM           reduce using rule 117 (pre-increment-expression -> INCRE prim-expression .)
    CLOSE_BRACKET   reduce using rule 117 (pre-increment-expression -> INCRE prim-expression .)
    COMMA           reduce using rule 117 (pre-increment-expression -> INCRE prim-expression .)
    CLOSE_PAREN     reduce using rule 117 (pre-increment-expression -> INCRE prim-expression .)
    COLON           reduce using rule 117 (pre-increment-expression -> INCRE prim-expression .)
    BLOCK_END       reduce using rule 117 (pre-increment-expression -> INCRE prim-expression .)
    DOT             shift and go to state 156


state 72

    (112) prim-expression -> member-access .
    (110) element-access -> member-access . OPEN_BRACKET expression-list CLOSE_BRACKET

    DOT             reduce using rule 112 (prim-expression -> member-access .)
    DELIM           reduce using rule 112 (prim-expression -> member-access .)
    TIMES           reduce using rule 112 (prim-expression -> member-access .)
    DIV             reduce using rule 112 (prim-expression -> member-access .)
    MOD             reduce using rule 112 (prim-expression -> member-access .)
    PLUS            reduce using rule 112 (prim-expression -> member-access .)
    MINUS           reduce using rule 112 (prim-expression -> member-access .)
    LSHIFT          reduce using rule 112 (prim-expression -> member-access .)
    RSHIFT          reduce using rule 112 (prim-expression -> member-access .)
    LT              reduce using rule 112 (prim-expression -> member-access .)
    GT              reduce using rule 112 (prim-expression -> member-access .)
    LE              reduce using rule 112 (prim-expression -> member-access .)
    GE              reduce using rule 112 (prim-expression -> member-access .)
    EQ              reduce using rule 112 (prim-expression -> member-access .)
    NE              reduce using rule 112 (prim-expression -> member-access .)
    BITAND          reduce using rule 112 (prim-expression -> member-access .)
    BITXOR          reduce using rule 112 (prim-expression -> member-access .)
    BITOR           reduce using rule 112 (prim-expression -> member-access .)
    LOGAND          reduce using rule 112 (prim-expression -> member-access .)
    CONDOP          reduce using rule 112 (prim-expression -> member-access .)
    LOGOR           reduce using rule 112 (prim-expression -> member-access .)
    CLOSE_BRACKET   reduce using rule 112 (prim-expression -> member-access .)
    COMMA           reduce using rule 112 (prim-expression -> member-access .)
    CLOSE_PAREN     reduce using rule 112 (prim-expression -> member-access .)
    COLON           reduce using rule 112 (prim-expression -> member-access .)
    BLOCK_END       reduce using rule 112 (prim-expression -> member-access .)
    OPEN_BRACKET    shift and go to state 69


state 73

    (111) prim-expression -> IDENTIFIER .
    (109) element-access -> IDENTIFIER . OPEN_BRACKET expression-list CLOSE_BRACKET

    DOT             reduce using rule 111 (prim-expression -> IDENTIFIER .)
    DELIM           reduce using rule 111 (prim-expression -> IDENTIFIER .)
    TIMES           reduce using rule 111 (prim-expression -> IDENTIFIER .)
    DIV             reduce using rule 111 (prim-expression -> IDENTIFIER .)
    MOD             reduce using rule 111 (prim-expression -> IDENTIFIER .)
    PLUS            reduce using rule 111 (prim-expression -> IDENTIFIER .)
    MINUS           reduce using rule 111 (prim-expression -> IDENTIFIER .)
    LSHIFT          reduce using rule 111 (prim-expression -> IDENTIFIER .)
    RSHIFT          reduce using rule 111 (prim-expression -> IDENTIFIER .)
    LT              reduce using rule 111 (prim-expression -> IDENTIFIER .)
    GT              reduce using rule 111 (prim-expression -> IDENTIFIER .)
    LE              reduce using rule 111 (prim-expression -> IDENTIFIER .)
    GE              reduce using rule 111 (prim-expression -> IDENTIFIER .)
    EQ              reduce using rule 111 (prim-expression -> IDENTIFIER .)
    NE              reduce using rule 111 (prim-expression -> IDENTIFIER .)
    BITAND          reduce using rule 111 (prim-expression -> IDENTIFIER .)
    BITXOR          reduce using rule 111 (prim-expression -> IDENTIFIER .)
    BITOR           reduce using rule 111 (prim-expression -> IDENTIFIER .)
    LOGAND          reduce using rule 111 (prim-expression -> IDENTIFIER .)
    CONDOP          reduce using rule 111 (prim-expression -> IDENTIFIER .)
    LOGOR           reduce using rule 111 (prim-expression -> IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 111 (prim-expression -> IDENTIFIER .)
    COMMA           reduce using rule 111 (prim-expression -> IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 111 (prim-expression -> IDENTIFIER .)
    COLON           reduce using rule 111 (prim-expression -> IDENTIFIER .)
    BLOCK_END       reduce using rule 111 (prim-expression -> IDENTIFIER .)
    OPEN_BRACKET    shift and go to state 129


state 74

    (230) goto-statement -> GOTO IDENTIFIER . DELIM

    DELIM           shift and go to state 169


state 75

    (223) foreach-statement -> FOREACH OPEN_PAREN . type IDENTIFIER IN expression CLOSE_PAREN block
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE
    (13) class-type -> . IDENTIFIER
    (34) array-type -> . simple-type OPEN_BRACKET CLOSE_BRACKET

    BOOL            shift and go to state 51
    INT             shift and go to state 50
    UINT            shift and go to state 64
    CHAR            shift and go to state 34
    DOUBLE          shift and go to state 13
    IDENTIFIER      shift and go to state 125

    array-type                     shift and go to state 45
    type                           shift and go to state 170
    simple-type                    shift and go to state 54
    class-type                     shift and go to state 68

state 76

    (8) class-declarations -> class-declarations class-declaration .

    CLASS           reduce using rule 8 (class-declarations -> class-declarations class-declaration .)
    $end            reduce using rule 8 (class-declarations -> class-declarations class-declaration .)


state 77

    (119) assignment -> prim-expression . assignment-operator expression
    (99) member-access -> prim-expression . DOT IDENTIFIER
    (114) post-increment-expression -> prim-expression . INCRE
    (115) post-decrement-expression -> prim-expression . DECRE
    (120) assignment-operator -> . ASSIGN
    (121) assignment-operator -> . PLUSEQUAL
    (122) assignment-operator -> . MINUSEQUAL
    (123) assignment-operator -> . TIMESEQUAL
    (124) assignment-operator -> . DIVEQUAL
    (125) assignment-operator -> . MODEQUAL
    (126) assignment-operator -> . BITANDEQUAL
    (127) assignment-operator -> . BITOREQUAL
    (128) assignment-operator -> . BITXOREQUAL
    (129) assignment-operator -> . LSHIFTEQUAL
    (130) assignment-operator -> . RSHIFTEQUAL

    DOT             shift and go to state 156
    INCRE           shift and go to state 151
    DECRE           shift and go to state 148
    ASSIGN          shift and go to state 155
    PLUSEQUAL       shift and go to state 150
    MINUSEQUAL      shift and go to state 147
    TIMESEQUAL      shift and go to state 146
    DIVEQUAL        shift and go to state 143
    MODEQUAL        shift and go to state 157
    BITANDEQUAL     shift and go to state 153
    BITOREQUAL      shift and go to state 149
    BITXOREQUAL     shift and go to state 152
    LSHIFTEQUAL     shift and go to state 154
    RSHIFTEQUAL     shift and go to state 144

    assignment-operator            shift and go to state 145

state 78

    (46) inclusive-or-expression -> exclusive-or-expression .
    (49) exclusive-or-expression -> exclusive-or-expression . BITXOR and-expression

    BITOR           reduce using rule 46 (inclusive-or-expression -> exclusive-or-expression .)
    LOGAND          reduce using rule 46 (inclusive-or-expression -> exclusive-or-expression .)
    CONDOP          reduce using rule 46 (inclusive-or-expression -> exclusive-or-expression .)
    LOGOR           reduce using rule 46 (inclusive-or-expression -> exclusive-or-expression .)
    DELIM           reduce using rule 46 (inclusive-or-expression -> exclusive-or-expression .)
    CLOSE_BRACKET   reduce using rule 46 (inclusive-or-expression -> exclusive-or-expression .)
    COMMA           reduce using rule 46 (inclusive-or-expression -> exclusive-or-expression .)
    CLOSE_PAREN     reduce using rule 46 (inclusive-or-expression -> exclusive-or-expression .)
    COLON           reduce using rule 46 (inclusive-or-expression -> exclusive-or-expression .)
    BLOCK_END       reduce using rule 46 (inclusive-or-expression -> exclusive-or-expression .)
    BITXOR          shift and go to state 171


state 79

    (112) prim-expression -> member-access .
    (110) element-access -> member-access . OPEN_BRACKET expression-list CLOSE_BRACKET
    (92) primary-no-array-creation-expression -> member-access .
    (101) invocation-expression -> member-access . OPEN_PAREN argument-list-opt CLOSE_PAREN

    DOT             reduce using rule 112 (prim-expression -> member-access .)
    INCRE           reduce using rule 112 (prim-expression -> member-access .)
    DECRE           reduce using rule 112 (prim-expression -> member-access .)
    ASSIGN          reduce using rule 112 (prim-expression -> member-access .)
    PLUSEQUAL       reduce using rule 112 (prim-expression -> member-access .)
    MINUSEQUAL      reduce using rule 112 (prim-expression -> member-access .)
    TIMESEQUAL      reduce using rule 112 (prim-expression -> member-access .)
    DIVEQUAL        reduce using rule 112 (prim-expression -> member-access .)
    MODEQUAL        reduce using rule 112 (prim-expression -> member-access .)
    BITANDEQUAL     reduce using rule 112 (prim-expression -> member-access .)
    BITOREQUAL      reduce using rule 112 (prim-expression -> member-access .)
    BITXOREQUAL     reduce using rule 112 (prim-expression -> member-access .)
    LSHIFTEQUAL     reduce using rule 112 (prim-expression -> member-access .)
    RSHIFTEQUAL     reduce using rule 112 (prim-expression -> member-access .)
    OPEN_BRACKET    shift and go to state 69
    TIMES           reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    DIV             reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    MOD             reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    PLUS            reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    MINUS           reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    LSHIFT          reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    RSHIFT          reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    LT              reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    GT              reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    LE              reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    GE              reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    EQ              reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    NE              reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    BITAND          reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    BITXOR          reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    BITOR           reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    LOGAND          reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    CONDOP          reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    LOGOR           reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    CLOSE_BRACKET   reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    COMMA           reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    CLOSE_PAREN     reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    BLOCK_END       reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    COLON           reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    DELIM           reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    OPEN_PAREN      shift and go to state 70


state 80

    (52) equality-expression -> relational-expression .
    (56) relational-expression -> relational-expression . LT shift-expression
    (57) relational-expression -> relational-expression . GT shift-expression
    (58) relational-expression -> relational-expression . LE shift-expression
    (59) relational-expression -> relational-expression . GE shift-expression

    EQ              reduce using rule 52 (equality-expression -> relational-expression .)
    NE              reduce using rule 52 (equality-expression -> relational-expression .)
    BITAND          reduce using rule 52 (equality-expression -> relational-expression .)
    BITXOR          reduce using rule 52 (equality-expression -> relational-expression .)
    BITOR           reduce using rule 52 (equality-expression -> relational-expression .)
    LOGAND          reduce using rule 52 (equality-expression -> relational-expression .)
    CONDOP          reduce using rule 52 (equality-expression -> relational-expression .)
    LOGOR           reduce using rule 52 (equality-expression -> relational-expression .)
    COLON           reduce using rule 52 (equality-expression -> relational-expression .)
    COMMA           reduce using rule 52 (equality-expression -> relational-expression .)
    CLOSE_PAREN     reduce using rule 52 (equality-expression -> relational-expression .)
    DELIM           reduce using rule 52 (equality-expression -> relational-expression .)
    CLOSE_BRACKET   reduce using rule 52 (equality-expression -> relational-expression .)
    BLOCK_END       reduce using rule 52 (equality-expression -> relational-expression .)
    LT              shift and go to state 174
    GT              shift and go to state 175
    LE              shift and go to state 172
    GE              shift and go to state 173


state 81

    (78) primary-expression -> array-creation-expression .

    TIMES           reduce using rule 78 (primary-expression -> array-creation-expression .)
    DIV             reduce using rule 78 (primary-expression -> array-creation-expression .)
    MOD             reduce using rule 78 (primary-expression -> array-creation-expression .)
    PLUS            reduce using rule 78 (primary-expression -> array-creation-expression .)
    MINUS           reduce using rule 78 (primary-expression -> array-creation-expression .)
    LSHIFT          reduce using rule 78 (primary-expression -> array-creation-expression .)
    RSHIFT          reduce using rule 78 (primary-expression -> array-creation-expression .)
    LT              reduce using rule 78 (primary-expression -> array-creation-expression .)
    GT              reduce using rule 78 (primary-expression -> array-creation-expression .)
    LE              reduce using rule 78 (primary-expression -> array-creation-expression .)
    GE              reduce using rule 78 (primary-expression -> array-creation-expression .)
    EQ              reduce using rule 78 (primary-expression -> array-creation-expression .)
    NE              reduce using rule 78 (primary-expression -> array-creation-expression .)
    BITAND          reduce using rule 78 (primary-expression -> array-creation-expression .)
    BITXOR          reduce using rule 78 (primary-expression -> array-creation-expression .)
    BITOR           reduce using rule 78 (primary-expression -> array-creation-expression .)
    LOGAND          reduce using rule 78 (primary-expression -> array-creation-expression .)
    CONDOP          reduce using rule 78 (primary-expression -> array-creation-expression .)
    LOGOR           reduce using rule 78 (primary-expression -> array-creation-expression .)
    DELIM           reduce using rule 78 (primary-expression -> array-creation-expression .)
    CLOSE_BRACKET   reduce using rule 78 (primary-expression -> array-creation-expression .)
    COMMA           reduce using rule 78 (primary-expression -> array-creation-expression .)
    CLOSE_PAREN     reduce using rule 78 (primary-expression -> array-creation-expression .)
    COLON           reduce using rule 78 (primary-expression -> array-creation-expression .)
    BLOCK_END       reduce using rule 78 (primary-expression -> array-creation-expression .)


state 82

    (80) array-creation-expression -> NEW . simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (116) object-creation-expression -> NEW . type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (13) class-type -> . IDENTIFIER
    (34) array-type -> . simple-type OPEN_BRACKET CLOSE_BRACKET

    BOOL            shift and go to state 51
    INT             shift and go to state 50
    UINT            shift and go to state 64
    CHAR            shift and go to state 34
    DOUBLE          shift and go to state 13
    IDENTIFIER      shift and go to state 125

    array-type                     shift and go to state 45
    type                           shift and go to state 126
    simple-type                    shift and go to state 176
    class-type                     shift and go to state 68

state 83

    (60) shift-expression -> additive-expression .
    (64) additive-expression -> additive-expression . PLUS multiplicative-expression
    (65) additive-expression -> additive-expression . MINUS multiplicative-expression

    LSHIFT          reduce using rule 60 (shift-expression -> additive-expression .)
    RSHIFT          reduce using rule 60 (shift-expression -> additive-expression .)
    LT              reduce using rule 60 (shift-expression -> additive-expression .)
    GT              reduce using rule 60 (shift-expression -> additive-expression .)
    LE              reduce using rule 60 (shift-expression -> additive-expression .)
    GE              reduce using rule 60 (shift-expression -> additive-expression .)
    EQ              reduce using rule 60 (shift-expression -> additive-expression .)
    NE              reduce using rule 60 (shift-expression -> additive-expression .)
    BITAND          reduce using rule 60 (shift-expression -> additive-expression .)
    BITXOR          reduce using rule 60 (shift-expression -> additive-expression .)
    BITOR           reduce using rule 60 (shift-expression -> additive-expression .)
    LOGAND          reduce using rule 60 (shift-expression -> additive-expression .)
    CONDOP          reduce using rule 60 (shift-expression -> additive-expression .)
    LOGOR           reduce using rule 60 (shift-expression -> additive-expression .)
    CLOSE_BRACKET   reduce using rule 60 (shift-expression -> additive-expression .)
    COMMA           reduce using rule 60 (shift-expression -> additive-expression .)
    CLOSE_PAREN     reduce using rule 60 (shift-expression -> additive-expression .)
    BLOCK_END       reduce using rule 60 (shift-expression -> additive-expression .)
    DELIM           reduce using rule 60 (shift-expression -> additive-expression .)
    COLON           reduce using rule 60 (shift-expression -> additive-expression .)
    PLUS            shift and go to state 177
    MINUS           shift and go to state 178


state 84

    (72) unary-expression -> MINUS . unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) unary-expression -> . pre-increment-expression
    (77) unary-expression -> . pre-decrement-expression
    (78) primary-expression -> . array-creation-expression
    (79) primary-expression -> . primary-no-array-creation-expression
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (80) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (90) primary-no-array-creation-expression -> . literal
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (94) primary-no-array-creation-expression -> . element-access
    (95) primary-no-array-creation-expression -> . post-increment-expression
    (96) primary-no-array-creation-expression -> . post-decrement-expression
    (97) primary-no-array-creation-expression -> . object-creation-expression
    (241) literal -> . ICONST
    (242) literal -> . DCONST
    (243) literal -> . TRUE
    (244) literal -> . FALSE
    (98) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access

    PLUS            shift and go to state 93
    MINUS           shift and go to state 84
    BITNOT          shift and go to state 113
    BITCOMP         shift and go to state 88
    TIMES           shift and go to state 99
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    NEW             shift and go to state 82
    ICONST          shift and go to state 101
    DCONST          shift and go to state 114
    TRUE            shift and go to state 107
    FALSE           shift and go to state 105
    OPEN_PAREN      shift and go to state 96
    IDENTIFIER      shift and go to state 183

    post-decrement-expression      shift and go to state 92
    primary-no-array-creation-expression shift and go to state 100
    pre-decrement-expression       shift and go to state 110
    prim-expression                shift and go to state 181
    unary-expression               shift and go to state 179
    post-increment-expression      shift and go to state 85
    element-access                 shift and go to state 182
    literal                        shift and go to state 98
    array-creation-expression      shift and go to state 81
    object-creation-expression     shift and go to state 102
    primary-expression             shift and go to state 115
    invocation-expression          shift and go to state 116
    pre-increment-expression       shift and go to state 106
    parenthesized-expression       shift and go to state 118
    member-access                  shift and go to state 180

state 85

    (95) primary-no-array-creation-expression -> post-increment-expression .

    TIMES           reduce using rule 95 (primary-no-array-creation-expression -> post-increment-expression .)
    DIV             reduce using rule 95 (primary-no-array-creation-expression -> post-increment-expression .)
    MOD             reduce using rule 95 (primary-no-array-creation-expression -> post-increment-expression .)
    PLUS            reduce using rule 95 (primary-no-array-creation-expression -> post-increment-expression .)
    MINUS           reduce using rule 95 (primary-no-array-creation-expression -> post-increment-expression .)
    LSHIFT          reduce using rule 95 (primary-no-array-creation-expression -> post-increment-expression .)
    RSHIFT          reduce using rule 95 (primary-no-array-creation-expression -> post-increment-expression .)
    LT              reduce using rule 95 (primary-no-array-creation-expression -> post-increment-expression .)
    GT              reduce using rule 95 (primary-no-array-creation-expression -> post-increment-expression .)
    LE              reduce using rule 95 (primary-no-array-creation-expression -> post-increment-expression .)
    GE              reduce using rule 95 (primary-no-array-creation-expression -> post-increment-expression .)
    EQ              reduce using rule 95 (primary-no-array-creation-expression -> post-increment-expression .)
    NE              reduce using rule 95 (primary-no-array-creation-expression -> post-increment-expression .)
    BITAND          reduce using rule 95 (primary-no-array-creation-expression -> post-increment-expression .)
    BITXOR          reduce using rule 95 (primary-no-array-creation-expression -> post-increment-expression .)
    BITOR           reduce using rule 95 (primary-no-array-creation-expression -> post-increment-expression .)
    LOGAND          reduce using rule 95 (primary-no-array-creation-expression -> post-increment-expression .)
    CONDOP          reduce using rule 95 (primary-no-array-creation-expression -> post-increment-expression .)
    LOGOR           reduce using rule 95 (primary-no-array-creation-expression -> post-increment-expression .)
    DELIM           reduce using rule 95 (primary-no-array-creation-expression -> post-increment-expression .)
    CLOSE_BRACKET   reduce using rule 95 (primary-no-array-creation-expression -> post-increment-expression .)
    COMMA           reduce using rule 95 (primary-no-array-creation-expression -> post-increment-expression .)
    CLOSE_PAREN     reduce using rule 95 (primary-no-array-creation-expression -> post-increment-expression .)
    COLON           reduce using rule 95 (primary-no-array-creation-expression -> post-increment-expression .)
    BLOCK_END       reduce using rule 95 (primary-no-array-creation-expression -> post-increment-expression .)


state 86

    (44) conditional-and-expression -> inclusive-or-expression .
    (47) inclusive-or-expression -> inclusive-or-expression . BITOR exclusive-or-expression

    LOGAND          reduce using rule 44 (conditional-and-expression -> inclusive-or-expression .)
    CONDOP          reduce using rule 44 (conditional-and-expression -> inclusive-or-expression .)
    LOGOR           reduce using rule 44 (conditional-and-expression -> inclusive-or-expression .)
    CLOSE_PAREN     reduce using rule 44 (conditional-and-expression -> inclusive-or-expression .)
    COMMA           reduce using rule 44 (conditional-and-expression -> inclusive-or-expression .)
    CLOSE_BRACKET   reduce using rule 44 (conditional-and-expression -> inclusive-or-expression .)
    BLOCK_END       reduce using rule 44 (conditional-and-expression -> inclusive-or-expression .)
    DELIM           reduce using rule 44 (conditional-and-expression -> inclusive-or-expression .)
    COLON           reduce using rule 44 (conditional-and-expression -> inclusive-or-expression .)
    BITOR           shift and go to state 184


state 87

    (50) and-expression -> equality-expression .
    (53) equality-expression -> equality-expression . EQ relational-expression
    (54) equality-expression -> equality-expression . NE relational-expression

    BITAND          reduce using rule 50 (and-expression -> equality-expression .)
    BITXOR          reduce using rule 50 (and-expression -> equality-expression .)
    BITOR           reduce using rule 50 (and-expression -> equality-expression .)
    LOGAND          reduce using rule 50 (and-expression -> equality-expression .)
    CONDOP          reduce using rule 50 (and-expression -> equality-expression .)
    LOGOR           reduce using rule 50 (and-expression -> equality-expression .)
    COLON           reduce using rule 50 (and-expression -> equality-expression .)
    DELIM           reduce using rule 50 (and-expression -> equality-expression .)
    CLOSE_BRACKET   reduce using rule 50 (and-expression -> equality-expression .)
    COMMA           reduce using rule 50 (and-expression -> equality-expression .)
    CLOSE_PAREN     reduce using rule 50 (and-expression -> equality-expression .)
    BLOCK_END       reduce using rule 50 (and-expression -> equality-expression .)
    EQ              shift and go to state 185
    NE              shift and go to state 186


state 88

    (74) unary-expression -> BITCOMP . unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) unary-expression -> . pre-increment-expression
    (77) unary-expression -> . pre-decrement-expression
    (78) primary-expression -> . array-creation-expression
    (79) primary-expression -> . primary-no-array-creation-expression
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (80) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (90) primary-no-array-creation-expression -> . literal
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (94) primary-no-array-creation-expression -> . element-access
    (95) primary-no-array-creation-expression -> . post-increment-expression
    (96) primary-no-array-creation-expression -> . post-decrement-expression
    (97) primary-no-array-creation-expression -> . object-creation-expression
    (241) literal -> . ICONST
    (242) literal -> . DCONST
    (243) literal -> . TRUE
    (244) literal -> . FALSE
    (98) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access

    PLUS            shift and go to state 93
    MINUS           shift and go to state 84
    BITNOT          shift and go to state 113
    BITCOMP         shift and go to state 88
    TIMES           shift and go to state 99
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    NEW             shift and go to state 82
    ICONST          shift and go to state 101
    DCONST          shift and go to state 114
    TRUE            shift and go to state 107
    FALSE           shift and go to state 105
    OPEN_PAREN      shift and go to state 96
    IDENTIFIER      shift and go to state 183

    post-decrement-expression      shift and go to state 92
    primary-no-array-creation-expression shift and go to state 100
    pre-decrement-expression       shift and go to state 110
    prim-expression                shift and go to state 181
    unary-expression               shift and go to state 187
    post-increment-expression      shift and go to state 85
    element-access                 shift and go to state 182
    literal                        shift and go to state 98
    array-creation-expression      shift and go to state 81
    object-creation-expression     shift and go to state 102
    primary-expression             shift and go to state 115
    invocation-expression          shift and go to state 116
    pre-increment-expression       shift and go to state 106
    parenthesized-expression       shift and go to state 118
    member-access                  shift and go to state 180

state 89

    (113) prim-expression -> element-access .
    (94) primary-no-array-creation-expression -> element-access .

    DOT             reduce using rule 113 (prim-expression -> element-access .)
    INCRE           reduce using rule 113 (prim-expression -> element-access .)
    DECRE           reduce using rule 113 (prim-expression -> element-access .)
    ASSIGN          reduce using rule 113 (prim-expression -> element-access .)
    PLUSEQUAL       reduce using rule 113 (prim-expression -> element-access .)
    MINUSEQUAL      reduce using rule 113 (prim-expression -> element-access .)
    TIMESEQUAL      reduce using rule 113 (prim-expression -> element-access .)
    DIVEQUAL        reduce using rule 113 (prim-expression -> element-access .)
    MODEQUAL        reduce using rule 113 (prim-expression -> element-access .)
    BITANDEQUAL     reduce using rule 113 (prim-expression -> element-access .)
    BITOREQUAL      reduce using rule 113 (prim-expression -> element-access .)
    BITXOREQUAL     reduce using rule 113 (prim-expression -> element-access .)
    LSHIFTEQUAL     reduce using rule 113 (prim-expression -> element-access .)
    RSHIFTEQUAL     reduce using rule 113 (prim-expression -> element-access .)
    TIMES           reduce using rule 94 (primary-no-array-creation-expression -> element-access .)
    DIV             reduce using rule 94 (primary-no-array-creation-expression -> element-access .)
    MOD             reduce using rule 94 (primary-no-array-creation-expression -> element-access .)
    PLUS            reduce using rule 94 (primary-no-array-creation-expression -> element-access .)
    MINUS           reduce using rule 94 (primary-no-array-creation-expression -> element-access .)
    LSHIFT          reduce using rule 94 (primary-no-array-creation-expression -> element-access .)
    RSHIFT          reduce using rule 94 (primary-no-array-creation-expression -> element-access .)
    LT              reduce using rule 94 (primary-no-array-creation-expression -> element-access .)
    GT              reduce using rule 94 (primary-no-array-creation-expression -> element-access .)
    LE              reduce using rule 94 (primary-no-array-creation-expression -> element-access .)
    GE              reduce using rule 94 (primary-no-array-creation-expression -> element-access .)
    EQ              reduce using rule 94 (primary-no-array-creation-expression -> element-access .)
    NE              reduce using rule 94 (primary-no-array-creation-expression -> element-access .)
    BITAND          reduce using rule 94 (primary-no-array-creation-expression -> element-access .)
    BITXOR          reduce using rule 94 (primary-no-array-creation-expression -> element-access .)
    BITOR           reduce using rule 94 (primary-no-array-creation-expression -> element-access .)
    LOGAND          reduce using rule 94 (primary-no-array-creation-expression -> element-access .)
    CONDOP          reduce using rule 94 (primary-no-array-creation-expression -> element-access .)
    LOGOR           reduce using rule 94 (primary-no-array-creation-expression -> element-access .)
    CLOSE_BRACKET   reduce using rule 94 (primary-no-array-creation-expression -> element-access .)
    COMMA           reduce using rule 94 (primary-no-array-creation-expression -> element-access .)
    CLOSE_PAREN     reduce using rule 94 (primary-no-array-creation-expression -> element-access .)
    BLOCK_END       reduce using rule 94 (primary-no-array-creation-expression -> element-access .)
    COLON           reduce using rule 94 (primary-no-array-creation-expression -> element-access .)
    DELIM           reduce using rule 94 (primary-no-array-creation-expression -> element-access .)


state 90

    (38) expression -> conditional-expression .

    COMMA           reduce using rule 38 (expression -> conditional-expression .)
    CLOSE_PAREN     reduce using rule 38 (expression -> conditional-expression .)
    DELIM           reduce using rule 38 (expression -> conditional-expression .)
    CLOSE_BRACKET   reduce using rule 38 (expression -> conditional-expression .)
    COLON           reduce using rule 38 (expression -> conditional-expression .)
    BLOCK_END       reduce using rule 38 (expression -> conditional-expression .)


state 91

    (42) conditional-or-expression -> conditional-and-expression .
    (45) conditional-and-expression -> conditional-and-expression . LOGAND inclusive-or-expression

    CONDOP          reduce using rule 42 (conditional-or-expression -> conditional-and-expression .)
    LOGOR           reduce using rule 42 (conditional-or-expression -> conditional-and-expression .)
    COMMA           reduce using rule 42 (conditional-or-expression -> conditional-and-expression .)
    CLOSE_PAREN     reduce using rule 42 (conditional-or-expression -> conditional-and-expression .)
    CLOSE_BRACKET   reduce using rule 42 (conditional-or-expression -> conditional-and-expression .)
    BLOCK_END       reduce using rule 42 (conditional-or-expression -> conditional-and-expression .)
    COLON           reduce using rule 42 (conditional-or-expression -> conditional-and-expression .)
    DELIM           reduce using rule 42 (conditional-or-expression -> conditional-and-expression .)
    LOGAND          shift and go to state 188


state 92

    (96) primary-no-array-creation-expression -> post-decrement-expression .

    TIMES           reduce using rule 96 (primary-no-array-creation-expression -> post-decrement-expression .)
    DIV             reduce using rule 96 (primary-no-array-creation-expression -> post-decrement-expression .)
    MOD             reduce using rule 96 (primary-no-array-creation-expression -> post-decrement-expression .)
    PLUS            reduce using rule 96 (primary-no-array-creation-expression -> post-decrement-expression .)
    MINUS           reduce using rule 96 (primary-no-array-creation-expression -> post-decrement-expression .)
    LSHIFT          reduce using rule 96 (primary-no-array-creation-expression -> post-decrement-expression .)
    RSHIFT          reduce using rule 96 (primary-no-array-creation-expression -> post-decrement-expression .)
    LT              reduce using rule 96 (primary-no-array-creation-expression -> post-decrement-expression .)
    GT              reduce using rule 96 (primary-no-array-creation-expression -> post-decrement-expression .)
    LE              reduce using rule 96 (primary-no-array-creation-expression -> post-decrement-expression .)
    GE              reduce using rule 96 (primary-no-array-creation-expression -> post-decrement-expression .)
    EQ              reduce using rule 96 (primary-no-array-creation-expression -> post-decrement-expression .)
    NE              reduce using rule 96 (primary-no-array-creation-expression -> post-decrement-expression .)
    BITAND          reduce using rule 96 (primary-no-array-creation-expression -> post-decrement-expression .)
    BITXOR          reduce using rule 96 (primary-no-array-creation-expression -> post-decrement-expression .)
    BITOR           reduce using rule 96 (primary-no-array-creation-expression -> post-decrement-expression .)
    LOGAND          reduce using rule 96 (primary-no-array-creation-expression -> post-decrement-expression .)
    CONDOP          reduce using rule 96 (primary-no-array-creation-expression -> post-decrement-expression .)
    LOGOR           reduce using rule 96 (primary-no-array-creation-expression -> post-decrement-expression .)
    DELIM           reduce using rule 96 (primary-no-array-creation-expression -> post-decrement-expression .)
    CLOSE_BRACKET   reduce using rule 96 (primary-no-array-creation-expression -> post-decrement-expression .)
    COMMA           reduce using rule 96 (primary-no-array-creation-expression -> post-decrement-expression .)
    CLOSE_PAREN     reduce using rule 96 (primary-no-array-creation-expression -> post-decrement-expression .)
    COLON           reduce using rule 96 (primary-no-array-creation-expression -> post-decrement-expression .)
    BLOCK_END       reduce using rule 96 (primary-no-array-creation-expression -> post-decrement-expression .)


state 93

    (71) unary-expression -> PLUS . unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) unary-expression -> . pre-increment-expression
    (77) unary-expression -> . pre-decrement-expression
    (78) primary-expression -> . array-creation-expression
    (79) primary-expression -> . primary-no-array-creation-expression
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (80) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (90) primary-no-array-creation-expression -> . literal
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (94) primary-no-array-creation-expression -> . element-access
    (95) primary-no-array-creation-expression -> . post-increment-expression
    (96) primary-no-array-creation-expression -> . post-decrement-expression
    (97) primary-no-array-creation-expression -> . object-creation-expression
    (241) literal -> . ICONST
    (242) literal -> . DCONST
    (243) literal -> . TRUE
    (244) literal -> . FALSE
    (98) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access

    PLUS            shift and go to state 93
    MINUS           shift and go to state 84
    BITNOT          shift and go to state 113
    BITCOMP         shift and go to state 88
    TIMES           shift and go to state 99
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    NEW             shift and go to state 82
    ICONST          shift and go to state 101
    DCONST          shift and go to state 114
    TRUE            shift and go to state 107
    FALSE           shift and go to state 105
    OPEN_PAREN      shift and go to state 96
    IDENTIFIER      shift and go to state 183

    post-decrement-expression      shift and go to state 92
    primary-no-array-creation-expression shift and go to state 100
    pre-decrement-expression       shift and go to state 110
    prim-expression                shift and go to state 181
    unary-expression               shift and go to state 189
    post-increment-expression      shift and go to state 85
    element-access                 shift and go to state 182
    literal                        shift and go to state 98
    array-creation-expression      shift and go to state 81
    object-creation-expression     shift and go to state 102
    primary-expression             shift and go to state 115
    invocation-expression          shift and go to state 116
    pre-increment-expression       shift and go to state 106
    parenthesized-expression       shift and go to state 118
    member-access                  shift and go to state 180

state 94

    (111) prim-expression -> IDENTIFIER .
    (109) element-access -> IDENTIFIER . OPEN_BRACKET expression-list CLOSE_BRACKET
    (100) invocation-expression -> IDENTIFIER . OPEN_PAREN argument-list-opt CLOSE_PAREN

    DOT             reduce using rule 111 (prim-expression -> IDENTIFIER .)
    INCRE           reduce using rule 111 (prim-expression -> IDENTIFIER .)
    DECRE           reduce using rule 111 (prim-expression -> IDENTIFIER .)
    ASSIGN          reduce using rule 111 (prim-expression -> IDENTIFIER .)
    PLUSEQUAL       reduce using rule 111 (prim-expression -> IDENTIFIER .)
    MINUSEQUAL      reduce using rule 111 (prim-expression -> IDENTIFIER .)
    TIMESEQUAL      reduce using rule 111 (prim-expression -> IDENTIFIER .)
    DIVEQUAL        reduce using rule 111 (prim-expression -> IDENTIFIER .)
    MODEQUAL        reduce using rule 111 (prim-expression -> IDENTIFIER .)
    BITANDEQUAL     reduce using rule 111 (prim-expression -> IDENTIFIER .)
    BITOREQUAL      reduce using rule 111 (prim-expression -> IDENTIFIER .)
    BITXOREQUAL     reduce using rule 111 (prim-expression -> IDENTIFIER .)
    LSHIFTEQUAL     reduce using rule 111 (prim-expression -> IDENTIFIER .)
    RSHIFTEQUAL     reduce using rule 111 (prim-expression -> IDENTIFIER .)
    OPEN_BRACKET    shift and go to state 129
    OPEN_PAREN      shift and go to state 130


state 95

    (233) expression-opt -> empty .

    DELIM           reduce using rule 233 (expression-opt -> empty .)


state 96

    (98) parenthesized-expression -> OPEN_PAREN . expression CLOSE_PAREN
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (119) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) unary-expression -> . pre-increment-expression
    (77) unary-expression -> . pre-decrement-expression
    (78) primary-expression -> . array-creation-expression
    (79) primary-expression -> . primary-no-array-creation-expression
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (80) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (90) primary-no-array-creation-expression -> . literal
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (94) primary-no-array-creation-expression -> . element-access
    (95) primary-no-array-creation-expression -> . post-increment-expression
    (96) primary-no-array-creation-expression -> . post-decrement-expression
    (97) primary-no-array-creation-expression -> . object-creation-expression
    (241) literal -> . ICONST
    (242) literal -> . DCONST
    (243) literal -> . TRUE
    (244) literal -> . FALSE
    (98) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 94
    PLUS            shift and go to state 93
    MINUS           shift and go to state 84
    BITNOT          shift and go to state 113
    BITCOMP         shift and go to state 88
    TIMES           shift and go to state 99
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    NEW             shift and go to state 82
    ICONST          shift and go to state 101
    DCONST          shift and go to state 114
    TRUE            shift and go to state 107
    FALSE           shift and go to state 105
    OPEN_PAREN      shift and go to state 96

    unary-expression               shift and go to state 103
    exclusive-or-expression        shift and go to state 78
    member-access                  shift and go to state 79
    relational-expression          shift and go to state 80
    additive-expression            shift and go to state 83
    primary-no-array-creation-expression shift and go to state 100
    inclusive-or-expression        shift and go to state 86
    prim-expression                shift and go to state 77
    element-access                 shift and go to state 89
    literal                        shift and go to state 98
    conditional-expression         shift and go to state 90
    conditional-and-expression     shift and go to state 91
    post-decrement-expression      shift and go to state 92
    array-creation-expression      shift and go to state 81
    assignment                     shift and go to state 97
    post-increment-expression      shift and go to state 85
    object-creation-expression     shift and go to state 102
    pre-increment-expression       shift and go to state 106
    equality-expression            shift and go to state 87
    shift-expression               shift and go to state 108
    and-expression                 shift and go to state 109
    pre-decrement-expression       shift and go to state 110
    multiplicative-expression      shift and go to state 111
    conditional-or-expression      shift and go to state 117
    primary-expression             shift and go to state 115
    invocation-expression          shift and go to state 116
    expression                     shift and go to state 190
    parenthesized-expression       shift and go to state 118

state 97

    (39) expression -> assignment .

    COMMA           reduce using rule 39 (expression -> assignment .)
    CLOSE_PAREN     reduce using rule 39 (expression -> assignment .)
    DELIM           reduce using rule 39 (expression -> assignment .)
    CLOSE_BRACKET   reduce using rule 39 (expression -> assignment .)
    COLON           reduce using rule 39 (expression -> assignment .)
    BLOCK_END       reduce using rule 39 (expression -> assignment .)


state 98

    (90) primary-no-array-creation-expression -> literal .

    TIMES           reduce using rule 90 (primary-no-array-creation-expression -> literal .)
    DIV             reduce using rule 90 (primary-no-array-creation-expression -> literal .)
    MOD             reduce using rule 90 (primary-no-array-creation-expression -> literal .)
    PLUS            reduce using rule 90 (primary-no-array-creation-expression -> literal .)
    MINUS           reduce using rule 90 (primary-no-array-creation-expression -> literal .)
    LSHIFT          reduce using rule 90 (primary-no-array-creation-expression -> literal .)
    RSHIFT          reduce using rule 90 (primary-no-array-creation-expression -> literal .)
    LT              reduce using rule 90 (primary-no-array-creation-expression -> literal .)
    GT              reduce using rule 90 (primary-no-array-creation-expression -> literal .)
    LE              reduce using rule 90 (primary-no-array-creation-expression -> literal .)
    GE              reduce using rule 90 (primary-no-array-creation-expression -> literal .)
    EQ              reduce using rule 90 (primary-no-array-creation-expression -> literal .)
    NE              reduce using rule 90 (primary-no-array-creation-expression -> literal .)
    BITAND          reduce using rule 90 (primary-no-array-creation-expression -> literal .)
    BITXOR          reduce using rule 90 (primary-no-array-creation-expression -> literal .)
    BITOR           reduce using rule 90 (primary-no-array-creation-expression -> literal .)
    LOGAND          reduce using rule 90 (primary-no-array-creation-expression -> literal .)
    CONDOP          reduce using rule 90 (primary-no-array-creation-expression -> literal .)
    LOGOR           reduce using rule 90 (primary-no-array-creation-expression -> literal .)
    DELIM           reduce using rule 90 (primary-no-array-creation-expression -> literal .)
    CLOSE_BRACKET   reduce using rule 90 (primary-no-array-creation-expression -> literal .)
    COMMA           reduce using rule 90 (primary-no-array-creation-expression -> literal .)
    CLOSE_PAREN     reduce using rule 90 (primary-no-array-creation-expression -> literal .)
    COLON           reduce using rule 90 (primary-no-array-creation-expression -> literal .)
    BLOCK_END       reduce using rule 90 (primary-no-array-creation-expression -> literal .)


state 99

    (75) unary-expression -> TIMES . unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) unary-expression -> . pre-increment-expression
    (77) unary-expression -> . pre-decrement-expression
    (78) primary-expression -> . array-creation-expression
    (79) primary-expression -> . primary-no-array-creation-expression
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (80) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (90) primary-no-array-creation-expression -> . literal
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (94) primary-no-array-creation-expression -> . element-access
    (95) primary-no-array-creation-expression -> . post-increment-expression
    (96) primary-no-array-creation-expression -> . post-decrement-expression
    (97) primary-no-array-creation-expression -> . object-creation-expression
    (241) literal -> . ICONST
    (242) literal -> . DCONST
    (243) literal -> . TRUE
    (244) literal -> . FALSE
    (98) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access

    PLUS            shift and go to state 93
    MINUS           shift and go to state 84
    BITNOT          shift and go to state 113
    BITCOMP         shift and go to state 88
    TIMES           shift and go to state 99
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    NEW             shift and go to state 82
    ICONST          shift and go to state 101
    DCONST          shift and go to state 114
    TRUE            shift and go to state 107
    FALSE           shift and go to state 105
    OPEN_PAREN      shift and go to state 96
    IDENTIFIER      shift and go to state 183

    post-decrement-expression      shift and go to state 92
    primary-no-array-creation-expression shift and go to state 100
    pre-decrement-expression       shift and go to state 110
    prim-expression                shift and go to state 181
    unary-expression               shift and go to state 191
    post-increment-expression      shift and go to state 85
    element-access                 shift and go to state 182
    literal                        shift and go to state 98
    array-creation-expression      shift and go to state 81
    object-creation-expression     shift and go to state 102
    primary-expression             shift and go to state 115
    invocation-expression          shift and go to state 116
    pre-increment-expression       shift and go to state 106
    parenthesized-expression       shift and go to state 118
    member-access                  shift and go to state 180

state 100

    (79) primary-expression -> primary-no-array-creation-expression .

    TIMES           reduce using rule 79 (primary-expression -> primary-no-array-creation-expression .)
    DIV             reduce using rule 79 (primary-expression -> primary-no-array-creation-expression .)
    MOD             reduce using rule 79 (primary-expression -> primary-no-array-creation-expression .)
    PLUS            reduce using rule 79 (primary-expression -> primary-no-array-creation-expression .)
    MINUS           reduce using rule 79 (primary-expression -> primary-no-array-creation-expression .)
    LSHIFT          reduce using rule 79 (primary-expression -> primary-no-array-creation-expression .)
    RSHIFT          reduce using rule 79 (primary-expression -> primary-no-array-creation-expression .)
    LT              reduce using rule 79 (primary-expression -> primary-no-array-creation-expression .)
    GT              reduce using rule 79 (primary-expression -> primary-no-array-creation-expression .)
    LE              reduce using rule 79 (primary-expression -> primary-no-array-creation-expression .)
    GE              reduce using rule 79 (primary-expression -> primary-no-array-creation-expression .)
    EQ              reduce using rule 79 (primary-expression -> primary-no-array-creation-expression .)
    NE              reduce using rule 79 (primary-expression -> primary-no-array-creation-expression .)
    BITAND          reduce using rule 79 (primary-expression -> primary-no-array-creation-expression .)
    BITXOR          reduce using rule 79 (primary-expression -> primary-no-array-creation-expression .)
    BITOR           reduce using rule 79 (primary-expression -> primary-no-array-creation-expression .)
    LOGAND          reduce using rule 79 (primary-expression -> primary-no-array-creation-expression .)
    CONDOP          reduce using rule 79 (primary-expression -> primary-no-array-creation-expression .)
    LOGOR           reduce using rule 79 (primary-expression -> primary-no-array-creation-expression .)
    DELIM           reduce using rule 79 (primary-expression -> primary-no-array-creation-expression .)
    CLOSE_BRACKET   reduce using rule 79 (primary-expression -> primary-no-array-creation-expression .)
    COMMA           reduce using rule 79 (primary-expression -> primary-no-array-creation-expression .)
    CLOSE_PAREN     reduce using rule 79 (primary-expression -> primary-no-array-creation-expression .)
    COLON           reduce using rule 79 (primary-expression -> primary-no-array-creation-expression .)
    BLOCK_END       reduce using rule 79 (primary-expression -> primary-no-array-creation-expression .)


state 101

    (241) literal -> ICONST .

    TIMES           reduce using rule 241 (literal -> ICONST .)
    DIV             reduce using rule 241 (literal -> ICONST .)
    MOD             reduce using rule 241 (literal -> ICONST .)
    PLUS            reduce using rule 241 (literal -> ICONST .)
    MINUS           reduce using rule 241 (literal -> ICONST .)
    LSHIFT          reduce using rule 241 (literal -> ICONST .)
    RSHIFT          reduce using rule 241 (literal -> ICONST .)
    LT              reduce using rule 241 (literal -> ICONST .)
    GT              reduce using rule 241 (literal -> ICONST .)
    LE              reduce using rule 241 (literal -> ICONST .)
    GE              reduce using rule 241 (literal -> ICONST .)
    EQ              reduce using rule 241 (literal -> ICONST .)
    NE              reduce using rule 241 (literal -> ICONST .)
    BITAND          reduce using rule 241 (literal -> ICONST .)
    BITXOR          reduce using rule 241 (literal -> ICONST .)
    BITOR           reduce using rule 241 (literal -> ICONST .)
    LOGAND          reduce using rule 241 (literal -> ICONST .)
    CONDOP          reduce using rule 241 (literal -> ICONST .)
    LOGOR           reduce using rule 241 (literal -> ICONST .)
    DELIM           reduce using rule 241 (literal -> ICONST .)
    CLOSE_BRACKET   reduce using rule 241 (literal -> ICONST .)
    COMMA           reduce using rule 241 (literal -> ICONST .)
    CLOSE_PAREN     reduce using rule 241 (literal -> ICONST .)
    COLON           reduce using rule 241 (literal -> ICONST .)
    BLOCK_END       reduce using rule 241 (literal -> ICONST .)


state 102

    (97) primary-no-array-creation-expression -> object-creation-expression .

    TIMES           reduce using rule 97 (primary-no-array-creation-expression -> object-creation-expression .)
    DIV             reduce using rule 97 (primary-no-array-creation-expression -> object-creation-expression .)
    MOD             reduce using rule 97 (primary-no-array-creation-expression -> object-creation-expression .)
    PLUS            reduce using rule 97 (primary-no-array-creation-expression -> object-creation-expression .)
    MINUS           reduce using rule 97 (primary-no-array-creation-expression -> object-creation-expression .)
    LSHIFT          reduce using rule 97 (primary-no-array-creation-expression -> object-creation-expression .)
    RSHIFT          reduce using rule 97 (primary-no-array-creation-expression -> object-creation-expression .)
    LT              reduce using rule 97 (primary-no-array-creation-expression -> object-creation-expression .)
    GT              reduce using rule 97 (primary-no-array-creation-expression -> object-creation-expression .)
    LE              reduce using rule 97 (primary-no-array-creation-expression -> object-creation-expression .)
    GE              reduce using rule 97 (primary-no-array-creation-expression -> object-creation-expression .)
    EQ              reduce using rule 97 (primary-no-array-creation-expression -> object-creation-expression .)
    NE              reduce using rule 97 (primary-no-array-creation-expression -> object-creation-expression .)
    BITAND          reduce using rule 97 (primary-no-array-creation-expression -> object-creation-expression .)
    BITXOR          reduce using rule 97 (primary-no-array-creation-expression -> object-creation-expression .)
    BITOR           reduce using rule 97 (primary-no-array-creation-expression -> object-creation-expression .)
    LOGAND          reduce using rule 97 (primary-no-array-creation-expression -> object-creation-expression .)
    CONDOP          reduce using rule 97 (primary-no-array-creation-expression -> object-creation-expression .)
    LOGOR           reduce using rule 97 (primary-no-array-creation-expression -> object-creation-expression .)
    DELIM           reduce using rule 97 (primary-no-array-creation-expression -> object-creation-expression .)
    CLOSE_BRACKET   reduce using rule 97 (primary-no-array-creation-expression -> object-creation-expression .)
    COMMA           reduce using rule 97 (primary-no-array-creation-expression -> object-creation-expression .)
    CLOSE_PAREN     reduce using rule 97 (primary-no-array-creation-expression -> object-creation-expression .)
    COLON           reduce using rule 97 (primary-no-array-creation-expression -> object-creation-expression .)
    BLOCK_END       reduce using rule 97 (primary-no-array-creation-expression -> object-creation-expression .)


state 103

    (66) multiplicative-expression -> unary-expression .

    TIMES           reduce using rule 66 (multiplicative-expression -> unary-expression .)
    DIV             reduce using rule 66 (multiplicative-expression -> unary-expression .)
    MOD             reduce using rule 66 (multiplicative-expression -> unary-expression .)
    PLUS            reduce using rule 66 (multiplicative-expression -> unary-expression .)
    MINUS           reduce using rule 66 (multiplicative-expression -> unary-expression .)
    LSHIFT          reduce using rule 66 (multiplicative-expression -> unary-expression .)
    RSHIFT          reduce using rule 66 (multiplicative-expression -> unary-expression .)
    LT              reduce using rule 66 (multiplicative-expression -> unary-expression .)
    GT              reduce using rule 66 (multiplicative-expression -> unary-expression .)
    LE              reduce using rule 66 (multiplicative-expression -> unary-expression .)
    GE              reduce using rule 66 (multiplicative-expression -> unary-expression .)
    EQ              reduce using rule 66 (multiplicative-expression -> unary-expression .)
    NE              reduce using rule 66 (multiplicative-expression -> unary-expression .)
    BITAND          reduce using rule 66 (multiplicative-expression -> unary-expression .)
    BITXOR          reduce using rule 66 (multiplicative-expression -> unary-expression .)
    BITOR           reduce using rule 66 (multiplicative-expression -> unary-expression .)
    LOGAND          reduce using rule 66 (multiplicative-expression -> unary-expression .)
    CONDOP          reduce using rule 66 (multiplicative-expression -> unary-expression .)
    LOGOR           reduce using rule 66 (multiplicative-expression -> unary-expression .)
    DELIM           reduce using rule 66 (multiplicative-expression -> unary-expression .)
    CLOSE_BRACKET   reduce using rule 66 (multiplicative-expression -> unary-expression .)
    COMMA           reduce using rule 66 (multiplicative-expression -> unary-expression .)
    CLOSE_PAREN     reduce using rule 66 (multiplicative-expression -> unary-expression .)
    COLON           reduce using rule 66 (multiplicative-expression -> unary-expression .)
    BLOCK_END       reduce using rule 66 (multiplicative-expression -> unary-expression .)


state 104

    (231) return-statement -> RETURN expression-opt . DELIM

    DELIM           shift and go to state 192


state 105

    (244) literal -> FALSE .

    TIMES           reduce using rule 244 (literal -> FALSE .)
    DIV             reduce using rule 244 (literal -> FALSE .)
    MOD             reduce using rule 244 (literal -> FALSE .)
    PLUS            reduce using rule 244 (literal -> FALSE .)
    MINUS           reduce using rule 244 (literal -> FALSE .)
    LSHIFT          reduce using rule 244 (literal -> FALSE .)
    RSHIFT          reduce using rule 244 (literal -> FALSE .)
    LT              reduce using rule 244 (literal -> FALSE .)
    GT              reduce using rule 244 (literal -> FALSE .)
    LE              reduce using rule 244 (literal -> FALSE .)
    GE              reduce using rule 244 (literal -> FALSE .)
    EQ              reduce using rule 244 (literal -> FALSE .)
    NE              reduce using rule 244 (literal -> FALSE .)
    BITAND          reduce using rule 244 (literal -> FALSE .)
    BITXOR          reduce using rule 244 (literal -> FALSE .)
    BITOR           reduce using rule 244 (literal -> FALSE .)
    LOGAND          reduce using rule 244 (literal -> FALSE .)
    CONDOP          reduce using rule 244 (literal -> FALSE .)
    LOGOR           reduce using rule 244 (literal -> FALSE .)
    DELIM           reduce using rule 244 (literal -> FALSE .)
    CLOSE_BRACKET   reduce using rule 244 (literal -> FALSE .)
    COMMA           reduce using rule 244 (literal -> FALSE .)
    CLOSE_PAREN     reduce using rule 244 (literal -> FALSE .)
    COLON           reduce using rule 244 (literal -> FALSE .)
    BLOCK_END       reduce using rule 244 (literal -> FALSE .)


state 106

    (76) unary-expression -> pre-increment-expression .

    TIMES           reduce using rule 76 (unary-expression -> pre-increment-expression .)
    DIV             reduce using rule 76 (unary-expression -> pre-increment-expression .)
    MOD             reduce using rule 76 (unary-expression -> pre-increment-expression .)
    PLUS            reduce using rule 76 (unary-expression -> pre-increment-expression .)
    MINUS           reduce using rule 76 (unary-expression -> pre-increment-expression .)
    LSHIFT          reduce using rule 76 (unary-expression -> pre-increment-expression .)
    RSHIFT          reduce using rule 76 (unary-expression -> pre-increment-expression .)
    LT              reduce using rule 76 (unary-expression -> pre-increment-expression .)
    GT              reduce using rule 76 (unary-expression -> pre-increment-expression .)
    LE              reduce using rule 76 (unary-expression -> pre-increment-expression .)
    GE              reduce using rule 76 (unary-expression -> pre-increment-expression .)
    EQ              reduce using rule 76 (unary-expression -> pre-increment-expression .)
    NE              reduce using rule 76 (unary-expression -> pre-increment-expression .)
    BITAND          reduce using rule 76 (unary-expression -> pre-increment-expression .)
    BITXOR          reduce using rule 76 (unary-expression -> pre-increment-expression .)
    BITOR           reduce using rule 76 (unary-expression -> pre-increment-expression .)
    LOGAND          reduce using rule 76 (unary-expression -> pre-increment-expression .)
    CONDOP          reduce using rule 76 (unary-expression -> pre-increment-expression .)
    LOGOR           reduce using rule 76 (unary-expression -> pre-increment-expression .)
    COMMA           reduce using rule 76 (unary-expression -> pre-increment-expression .)
    DELIM           reduce using rule 76 (unary-expression -> pre-increment-expression .)
    CLOSE_PAREN     reduce using rule 76 (unary-expression -> pre-increment-expression .)
    CLOSE_BRACKET   reduce using rule 76 (unary-expression -> pre-increment-expression .)
    COLON           reduce using rule 76 (unary-expression -> pre-increment-expression .)
    BLOCK_END       reduce using rule 76 (unary-expression -> pre-increment-expression .)


state 107

    (243) literal -> TRUE .

    TIMES           reduce using rule 243 (literal -> TRUE .)
    DIV             reduce using rule 243 (literal -> TRUE .)
    MOD             reduce using rule 243 (literal -> TRUE .)
    PLUS            reduce using rule 243 (literal -> TRUE .)
    MINUS           reduce using rule 243 (literal -> TRUE .)
    LSHIFT          reduce using rule 243 (literal -> TRUE .)
    RSHIFT          reduce using rule 243 (literal -> TRUE .)
    LT              reduce using rule 243 (literal -> TRUE .)
    GT              reduce using rule 243 (literal -> TRUE .)
    LE              reduce using rule 243 (literal -> TRUE .)
    GE              reduce using rule 243 (literal -> TRUE .)
    EQ              reduce using rule 243 (literal -> TRUE .)
    NE              reduce using rule 243 (literal -> TRUE .)
    BITAND          reduce using rule 243 (literal -> TRUE .)
    BITXOR          reduce using rule 243 (literal -> TRUE .)
    BITOR           reduce using rule 243 (literal -> TRUE .)
    LOGAND          reduce using rule 243 (literal -> TRUE .)
    CONDOP          reduce using rule 243 (literal -> TRUE .)
    LOGOR           reduce using rule 243 (literal -> TRUE .)
    DELIM           reduce using rule 243 (literal -> TRUE .)
    CLOSE_BRACKET   reduce using rule 243 (literal -> TRUE .)
    COMMA           reduce using rule 243 (literal -> TRUE .)
    CLOSE_PAREN     reduce using rule 243 (literal -> TRUE .)
    COLON           reduce using rule 243 (literal -> TRUE .)
    BLOCK_END       reduce using rule 243 (literal -> TRUE .)


state 108

    (55) relational-expression -> shift-expression .
    (61) shift-expression -> shift-expression . LSHIFT additive-expression
    (62) shift-expression -> shift-expression . RSHIFT additive-expression

    LT              reduce using rule 55 (relational-expression -> shift-expression .)
    GT              reduce using rule 55 (relational-expression -> shift-expression .)
    LE              reduce using rule 55 (relational-expression -> shift-expression .)
    GE              reduce using rule 55 (relational-expression -> shift-expression .)
    EQ              reduce using rule 55 (relational-expression -> shift-expression .)
    NE              reduce using rule 55 (relational-expression -> shift-expression .)
    BITAND          reduce using rule 55 (relational-expression -> shift-expression .)
    BITXOR          reduce using rule 55 (relational-expression -> shift-expression .)
    BITOR           reduce using rule 55 (relational-expression -> shift-expression .)
    LOGAND          reduce using rule 55 (relational-expression -> shift-expression .)
    CONDOP          reduce using rule 55 (relational-expression -> shift-expression .)
    LOGOR           reduce using rule 55 (relational-expression -> shift-expression .)
    CLOSE_BRACKET   reduce using rule 55 (relational-expression -> shift-expression .)
    COMMA           reduce using rule 55 (relational-expression -> shift-expression .)
    DELIM           reduce using rule 55 (relational-expression -> shift-expression .)
    CLOSE_PAREN     reduce using rule 55 (relational-expression -> shift-expression .)
    COLON           reduce using rule 55 (relational-expression -> shift-expression .)
    BLOCK_END       reduce using rule 55 (relational-expression -> shift-expression .)
    LSHIFT          shift and go to state 194
    RSHIFT          shift and go to state 193


state 109

    (48) exclusive-or-expression -> and-expression .
    (51) and-expression -> and-expression . BITAND equality-expression

    BITXOR          reduce using rule 48 (exclusive-or-expression -> and-expression .)
    BITOR           reduce using rule 48 (exclusive-or-expression -> and-expression .)
    LOGAND          reduce using rule 48 (exclusive-or-expression -> and-expression .)
    CONDOP          reduce using rule 48 (exclusive-or-expression -> and-expression .)
    LOGOR           reduce using rule 48 (exclusive-or-expression -> and-expression .)
    CLOSE_PAREN     reduce using rule 48 (exclusive-or-expression -> and-expression .)
    DELIM           reduce using rule 48 (exclusive-or-expression -> and-expression .)
    CLOSE_BRACKET   reduce using rule 48 (exclusive-or-expression -> and-expression .)
    COMMA           reduce using rule 48 (exclusive-or-expression -> and-expression .)
    COLON           reduce using rule 48 (exclusive-or-expression -> and-expression .)
    BLOCK_END       reduce using rule 48 (exclusive-or-expression -> and-expression .)
    BITAND          shift and go to state 195


state 110

    (77) unary-expression -> pre-decrement-expression .

    TIMES           reduce using rule 77 (unary-expression -> pre-decrement-expression .)
    DIV             reduce using rule 77 (unary-expression -> pre-decrement-expression .)
    MOD             reduce using rule 77 (unary-expression -> pre-decrement-expression .)
    PLUS            reduce using rule 77 (unary-expression -> pre-decrement-expression .)
    MINUS           reduce using rule 77 (unary-expression -> pre-decrement-expression .)
    LSHIFT          reduce using rule 77 (unary-expression -> pre-decrement-expression .)
    RSHIFT          reduce using rule 77 (unary-expression -> pre-decrement-expression .)
    LT              reduce using rule 77 (unary-expression -> pre-decrement-expression .)
    GT              reduce using rule 77 (unary-expression -> pre-decrement-expression .)
    LE              reduce using rule 77 (unary-expression -> pre-decrement-expression .)
    GE              reduce using rule 77 (unary-expression -> pre-decrement-expression .)
    EQ              reduce using rule 77 (unary-expression -> pre-decrement-expression .)
    NE              reduce using rule 77 (unary-expression -> pre-decrement-expression .)
    BITAND          reduce using rule 77 (unary-expression -> pre-decrement-expression .)
    BITXOR          reduce using rule 77 (unary-expression -> pre-decrement-expression .)
    BITOR           reduce using rule 77 (unary-expression -> pre-decrement-expression .)
    LOGAND          reduce using rule 77 (unary-expression -> pre-decrement-expression .)
    CONDOP          reduce using rule 77 (unary-expression -> pre-decrement-expression .)
    LOGOR           reduce using rule 77 (unary-expression -> pre-decrement-expression .)
    COMMA           reduce using rule 77 (unary-expression -> pre-decrement-expression .)
    DELIM           reduce using rule 77 (unary-expression -> pre-decrement-expression .)
    CLOSE_PAREN     reduce using rule 77 (unary-expression -> pre-decrement-expression .)
    CLOSE_BRACKET   reduce using rule 77 (unary-expression -> pre-decrement-expression .)
    COLON           reduce using rule 77 (unary-expression -> pre-decrement-expression .)
    BLOCK_END       reduce using rule 77 (unary-expression -> pre-decrement-expression .)


state 111

    (63) additive-expression -> multiplicative-expression .
    (67) multiplicative-expression -> multiplicative-expression . TIMES unary-expression
    (68) multiplicative-expression -> multiplicative-expression . DIV unary-expression
    (69) multiplicative-expression -> multiplicative-expression . MOD unary-expression

    PLUS            reduce using rule 63 (additive-expression -> multiplicative-expression .)
    MINUS           reduce using rule 63 (additive-expression -> multiplicative-expression .)
    LSHIFT          reduce using rule 63 (additive-expression -> multiplicative-expression .)
    RSHIFT          reduce using rule 63 (additive-expression -> multiplicative-expression .)
    LT              reduce using rule 63 (additive-expression -> multiplicative-expression .)
    GT              reduce using rule 63 (additive-expression -> multiplicative-expression .)
    LE              reduce using rule 63 (additive-expression -> multiplicative-expression .)
    GE              reduce using rule 63 (additive-expression -> multiplicative-expression .)
    EQ              reduce using rule 63 (additive-expression -> multiplicative-expression .)
    NE              reduce using rule 63 (additive-expression -> multiplicative-expression .)
    BITAND          reduce using rule 63 (additive-expression -> multiplicative-expression .)
    BITXOR          reduce using rule 63 (additive-expression -> multiplicative-expression .)
    BITOR           reduce using rule 63 (additive-expression -> multiplicative-expression .)
    LOGAND          reduce using rule 63 (additive-expression -> multiplicative-expression .)
    CONDOP          reduce using rule 63 (additive-expression -> multiplicative-expression .)
    LOGOR           reduce using rule 63 (additive-expression -> multiplicative-expression .)
    DELIM           reduce using rule 63 (additive-expression -> multiplicative-expression .)
    CLOSE_BRACKET   reduce using rule 63 (additive-expression -> multiplicative-expression .)
    COMMA           reduce using rule 63 (additive-expression -> multiplicative-expression .)
    CLOSE_PAREN     reduce using rule 63 (additive-expression -> multiplicative-expression .)
    COLON           reduce using rule 63 (additive-expression -> multiplicative-expression .)
    BLOCK_END       reduce using rule 63 (additive-expression -> multiplicative-expression .)
    TIMES           shift and go to state 198
    DIV             shift and go to state 196
    MOD             shift and go to state 197


state 112

    (232) expression-opt -> expression .

    DELIM           reduce using rule 232 (expression-opt -> expression .)


state 113

    (73) unary-expression -> BITNOT . unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) unary-expression -> . pre-increment-expression
    (77) unary-expression -> . pre-decrement-expression
    (78) primary-expression -> . array-creation-expression
    (79) primary-expression -> . primary-no-array-creation-expression
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (80) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (90) primary-no-array-creation-expression -> . literal
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (94) primary-no-array-creation-expression -> . element-access
    (95) primary-no-array-creation-expression -> . post-increment-expression
    (96) primary-no-array-creation-expression -> . post-decrement-expression
    (97) primary-no-array-creation-expression -> . object-creation-expression
    (241) literal -> . ICONST
    (242) literal -> . DCONST
    (243) literal -> . TRUE
    (244) literal -> . FALSE
    (98) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access

    PLUS            shift and go to state 93
    MINUS           shift and go to state 84
    BITNOT          shift and go to state 113
    BITCOMP         shift and go to state 88
    TIMES           shift and go to state 99
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    NEW             shift and go to state 82
    ICONST          shift and go to state 101
    DCONST          shift and go to state 114
    TRUE            shift and go to state 107
    FALSE           shift and go to state 105
    OPEN_PAREN      shift and go to state 96
    IDENTIFIER      shift and go to state 183

    post-decrement-expression      shift and go to state 92
    primary-no-array-creation-expression shift and go to state 100
    pre-decrement-expression       shift and go to state 110
    prim-expression                shift and go to state 181
    unary-expression               shift and go to state 199
    post-increment-expression      shift and go to state 85
    element-access                 shift and go to state 182
    literal                        shift and go to state 98
    array-creation-expression      shift and go to state 81
    object-creation-expression     shift and go to state 102
    primary-expression             shift and go to state 115
    invocation-expression          shift and go to state 116
    pre-increment-expression       shift and go to state 106
    parenthesized-expression       shift and go to state 118
    member-access                  shift and go to state 180

state 114

    (242) literal -> DCONST .

    TIMES           reduce using rule 242 (literal -> DCONST .)
    DIV             reduce using rule 242 (literal -> DCONST .)
    MOD             reduce using rule 242 (literal -> DCONST .)
    PLUS            reduce using rule 242 (literal -> DCONST .)
    MINUS           reduce using rule 242 (literal -> DCONST .)
    LSHIFT          reduce using rule 242 (literal -> DCONST .)
    RSHIFT          reduce using rule 242 (literal -> DCONST .)
    LT              reduce using rule 242 (literal -> DCONST .)
    GT              reduce using rule 242 (literal -> DCONST .)
    LE              reduce using rule 242 (literal -> DCONST .)
    GE              reduce using rule 242 (literal -> DCONST .)
    EQ              reduce using rule 242 (literal -> DCONST .)
    NE              reduce using rule 242 (literal -> DCONST .)
    BITAND          reduce using rule 242 (literal -> DCONST .)
    BITXOR          reduce using rule 242 (literal -> DCONST .)
    BITOR           reduce using rule 242 (literal -> DCONST .)
    LOGAND          reduce using rule 242 (literal -> DCONST .)
    CONDOP          reduce using rule 242 (literal -> DCONST .)
    LOGOR           reduce using rule 242 (literal -> DCONST .)
    DELIM           reduce using rule 242 (literal -> DCONST .)
    CLOSE_BRACKET   reduce using rule 242 (literal -> DCONST .)
    COMMA           reduce using rule 242 (literal -> DCONST .)
    CLOSE_PAREN     reduce using rule 242 (literal -> DCONST .)
    COLON           reduce using rule 242 (literal -> DCONST .)
    BLOCK_END       reduce using rule 242 (literal -> DCONST .)


state 115

    (70) unary-expression -> primary-expression .

    TIMES           reduce using rule 70 (unary-expression -> primary-expression .)
    DIV             reduce using rule 70 (unary-expression -> primary-expression .)
    MOD             reduce using rule 70 (unary-expression -> primary-expression .)
    PLUS            reduce using rule 70 (unary-expression -> primary-expression .)
    MINUS           reduce using rule 70 (unary-expression -> primary-expression .)
    LSHIFT          reduce using rule 70 (unary-expression -> primary-expression .)
    RSHIFT          reduce using rule 70 (unary-expression -> primary-expression .)
    LT              reduce using rule 70 (unary-expression -> primary-expression .)
    GT              reduce using rule 70 (unary-expression -> primary-expression .)
    LE              reduce using rule 70 (unary-expression -> primary-expression .)
    GE              reduce using rule 70 (unary-expression -> primary-expression .)
    EQ              reduce using rule 70 (unary-expression -> primary-expression .)
    NE              reduce using rule 70 (unary-expression -> primary-expression .)
    BITAND          reduce using rule 70 (unary-expression -> primary-expression .)
    BITXOR          reduce using rule 70 (unary-expression -> primary-expression .)
    BITOR           reduce using rule 70 (unary-expression -> primary-expression .)
    LOGAND          reduce using rule 70 (unary-expression -> primary-expression .)
    CONDOP          reduce using rule 70 (unary-expression -> primary-expression .)
    LOGOR           reduce using rule 70 (unary-expression -> primary-expression .)
    COMMA           reduce using rule 70 (unary-expression -> primary-expression .)
    DELIM           reduce using rule 70 (unary-expression -> primary-expression .)
    CLOSE_PAREN     reduce using rule 70 (unary-expression -> primary-expression .)
    CLOSE_BRACKET   reduce using rule 70 (unary-expression -> primary-expression .)
    COLON           reduce using rule 70 (unary-expression -> primary-expression .)
    BLOCK_END       reduce using rule 70 (unary-expression -> primary-expression .)


state 116

    (93) primary-no-array-creation-expression -> invocation-expression .

    TIMES           reduce using rule 93 (primary-no-array-creation-expression -> invocation-expression .)
    DIV             reduce using rule 93 (primary-no-array-creation-expression -> invocation-expression .)
    MOD             reduce using rule 93 (primary-no-array-creation-expression -> invocation-expression .)
    PLUS            reduce using rule 93 (primary-no-array-creation-expression -> invocation-expression .)
    MINUS           reduce using rule 93 (primary-no-array-creation-expression -> invocation-expression .)
    LSHIFT          reduce using rule 93 (primary-no-array-creation-expression -> invocation-expression .)
    RSHIFT          reduce using rule 93 (primary-no-array-creation-expression -> invocation-expression .)
    LT              reduce using rule 93 (primary-no-array-creation-expression -> invocation-expression .)
    GT              reduce using rule 93 (primary-no-array-creation-expression -> invocation-expression .)
    LE              reduce using rule 93 (primary-no-array-creation-expression -> invocation-expression .)
    GE              reduce using rule 93 (primary-no-array-creation-expression -> invocation-expression .)
    EQ              reduce using rule 93 (primary-no-array-creation-expression -> invocation-expression .)
    NE              reduce using rule 93 (primary-no-array-creation-expression -> invocation-expression .)
    BITAND          reduce using rule 93 (primary-no-array-creation-expression -> invocation-expression .)
    BITXOR          reduce using rule 93 (primary-no-array-creation-expression -> invocation-expression .)
    BITOR           reduce using rule 93 (primary-no-array-creation-expression -> invocation-expression .)
    LOGAND          reduce using rule 93 (primary-no-array-creation-expression -> invocation-expression .)
    CONDOP          reduce using rule 93 (primary-no-array-creation-expression -> invocation-expression .)
    LOGOR           reduce using rule 93 (primary-no-array-creation-expression -> invocation-expression .)
    DELIM           reduce using rule 93 (primary-no-array-creation-expression -> invocation-expression .)
    CLOSE_BRACKET   reduce using rule 93 (primary-no-array-creation-expression -> invocation-expression .)
    COMMA           reduce using rule 93 (primary-no-array-creation-expression -> invocation-expression .)
    CLOSE_PAREN     reduce using rule 93 (primary-no-array-creation-expression -> invocation-expression .)
    COLON           reduce using rule 93 (primary-no-array-creation-expression -> invocation-expression .)
    BLOCK_END       reduce using rule 93 (primary-no-array-creation-expression -> invocation-expression .)


state 117

    (40) conditional-expression -> conditional-or-expression .
    (41) conditional-expression -> conditional-or-expression . CONDOP expression COLON expression
    (43) conditional-or-expression -> conditional-or-expression . LOGOR conditional-and-expression

    COMMA           reduce using rule 40 (conditional-expression -> conditional-or-expression .)
    DELIM           reduce using rule 40 (conditional-expression -> conditional-or-expression .)
    BLOCK_END       reduce using rule 40 (conditional-expression -> conditional-or-expression .)
    CLOSE_PAREN     reduce using rule 40 (conditional-expression -> conditional-or-expression .)
    CLOSE_BRACKET   reduce using rule 40 (conditional-expression -> conditional-or-expression .)
    COLON           reduce using rule 40 (conditional-expression -> conditional-or-expression .)
    CONDOP          shift and go to state 201
    LOGOR           shift and go to state 200


state 118

    (91) primary-no-array-creation-expression -> parenthesized-expression .

    TIMES           reduce using rule 91 (primary-no-array-creation-expression -> parenthesized-expression .)
    DIV             reduce using rule 91 (primary-no-array-creation-expression -> parenthesized-expression .)
    MOD             reduce using rule 91 (primary-no-array-creation-expression -> parenthesized-expression .)
    PLUS            reduce using rule 91 (primary-no-array-creation-expression -> parenthesized-expression .)
    MINUS           reduce using rule 91 (primary-no-array-creation-expression -> parenthesized-expression .)
    LSHIFT          reduce using rule 91 (primary-no-array-creation-expression -> parenthesized-expression .)
    RSHIFT          reduce using rule 91 (primary-no-array-creation-expression -> parenthesized-expression .)
    LT              reduce using rule 91 (primary-no-array-creation-expression -> parenthesized-expression .)
    GT              reduce using rule 91 (primary-no-array-creation-expression -> parenthesized-expression .)
    LE              reduce using rule 91 (primary-no-array-creation-expression -> parenthesized-expression .)
    GE              reduce using rule 91 (primary-no-array-creation-expression -> parenthesized-expression .)
    EQ              reduce using rule 91 (primary-no-array-creation-expression -> parenthesized-expression .)
    NE              reduce using rule 91 (primary-no-array-creation-expression -> parenthesized-expression .)
    BITAND          reduce using rule 91 (primary-no-array-creation-expression -> parenthesized-expression .)
    BITXOR          reduce using rule 91 (primary-no-array-creation-expression -> parenthesized-expression .)
    BITOR           reduce using rule 91 (primary-no-array-creation-expression -> parenthesized-expression .)
    LOGAND          reduce using rule 91 (primary-no-array-creation-expression -> parenthesized-expression .)
    CONDOP          reduce using rule 91 (primary-no-array-creation-expression -> parenthesized-expression .)
    LOGOR           reduce using rule 91 (primary-no-array-creation-expression -> parenthesized-expression .)
    DELIM           reduce using rule 91 (primary-no-array-creation-expression -> parenthesized-expression .)
    CLOSE_BRACKET   reduce using rule 91 (primary-no-array-creation-expression -> parenthesized-expression .)
    COMMA           reduce using rule 91 (primary-no-array-creation-expression -> parenthesized-expression .)
    CLOSE_PAREN     reduce using rule 91 (primary-no-array-creation-expression -> parenthesized-expression .)
    COLON           reduce using rule 91 (primary-no-array-creation-expression -> parenthesized-expression .)
    BLOCK_END       reduce using rule 91 (primary-no-array-creation-expression -> parenthesized-expression .)


state 119

    (177) declaration-statement -> local-constant-declaration DELIM .

    IDENTIFIER      reduce using rule 177 (declaration-statement -> local-constant-declaration DELIM .)
    BLOCK_BEGIN     reduce using rule 177 (declaration-statement -> local-constant-declaration DELIM .)
    DELIM           reduce using rule 177 (declaration-statement -> local-constant-declaration DELIM .)
    CONSOLE         reduce using rule 177 (declaration-statement -> local-constant-declaration DELIM .)
    CONST           reduce using rule 177 (declaration-statement -> local-constant-declaration DELIM .)
    IF              reduce using rule 177 (declaration-statement -> local-constant-declaration DELIM .)
    SWITCH          reduce using rule 177 (declaration-statement -> local-constant-declaration DELIM .)
    WHILE           reduce using rule 177 (declaration-statement -> local-constant-declaration DELIM .)
    FOR             reduce using rule 177 (declaration-statement -> local-constant-declaration DELIM .)
    FOREACH         reduce using rule 177 (declaration-statement -> local-constant-declaration DELIM .)
    DO              reduce using rule 177 (declaration-statement -> local-constant-declaration DELIM .)
    BREAK           reduce using rule 177 (declaration-statement -> local-constant-declaration DELIM .)
    CONTINUE        reduce using rule 177 (declaration-statement -> local-constant-declaration DELIM .)
    GOTO            reduce using rule 177 (declaration-statement -> local-constant-declaration DELIM .)
    RETURN          reduce using rule 177 (declaration-statement -> local-constant-declaration DELIM .)
    NEW             reduce using rule 177 (declaration-statement -> local-constant-declaration DELIM .)
    INCRE           reduce using rule 177 (declaration-statement -> local-constant-declaration DELIM .)
    DECRE           reduce using rule 177 (declaration-statement -> local-constant-declaration DELIM .)
    BOOL            reduce using rule 177 (declaration-statement -> local-constant-declaration DELIM .)
    INT             reduce using rule 177 (declaration-statement -> local-constant-declaration DELIM .)
    UINT            reduce using rule 177 (declaration-statement -> local-constant-declaration DELIM .)
    CHAR            reduce using rule 177 (declaration-statement -> local-constant-declaration DELIM .)
    DOUBLE          reduce using rule 177 (declaration-statement -> local-constant-declaration DELIM .)
    $end            reduce using rule 177 (declaration-statement -> local-constant-declaration DELIM .)
    BLOCK_END       reduce using rule 177 (declaration-statement -> local-constant-declaration DELIM .)
    CASE            reduce using rule 177 (declaration-statement -> local-constant-declaration DELIM .)
    DEFAULT         reduce using rule 177 (declaration-statement -> local-constant-declaration DELIM .)


state 120

    (210) for-statement -> FOR OPEN_PAREN . for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN block
    (211) for-initializer-opt -> . for-initializer
    (212) for-initializer-opt -> . empty
    (213) for-initializer -> . local-variable-declaration
    (214) for-initializer -> . statement-expression-list
    (245) empty -> .
    (178) local-variable-declaration -> . type variable-declarators
    (221) statement-expression-list -> . statement-expression
    (222) statement-expression-list -> . statement-expression-list COMMA statement-expression
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (182) statement-expression -> . invocation-expression
    (183) statement-expression -> . object-creation-expression
    (184) statement-expression -> . assignment
    (185) statement-expression -> . post-increment-expression
    (186) statement-expression -> . post-decrement-expression
    (187) statement-expression -> . pre-increment-expression
    (188) statement-expression -> . pre-decrement-expression
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE
    (13) class-type -> . IDENTIFIER
    (34) array-type -> . simple-type OPEN_BRACKET CLOSE_BRACKET
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (119) assignment -> . prim-expression assignment-operator expression
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET

    DELIM           reduce using rule 245 (empty -> .)
    BOOL            shift and go to state 51
    INT             shift and go to state 50
    UINT            shift and go to state 64
    CHAR            shift and go to state 34
    DOUBLE          shift and go to state 13
    IDENTIFIER      shift and go to state 205
    NEW             shift and go to state 37
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33

    for-initializer                shift and go to state 202
    prim-expression                shift and go to state 58
    member-access                  shift and go to state 2
    simple-type                    shift and go to state 54
    post-increment-expression      shift and go to state 4
    element-access                 shift and go to state 20
    statement-expression           shift and go to state 203
    post-decrement-expression      shift and go to state 46
    statement-expression-list      shift and go to state 204
    type                           shift and go to state 43
    empty                          shift and go to state 206
    array-type                     shift and go to state 45
    assignment                     shift and go to state 62
    object-creation-expression     shift and go to state 65
    pre-increment-expression       shift and go to state 66
    pre-decrement-expression       shift and go to state 25
    local-variable-declaration     shift and go to state 207
    class-type                     shift and go to state 68
    invocation-expression          shift and go to state 14
    for-initializer-opt            shift and go to state 208

state 121

    (176) declaration-statement -> local-variable-declaration DELIM .

    IDENTIFIER      reduce using rule 176 (declaration-statement -> local-variable-declaration DELIM .)
    BLOCK_BEGIN     reduce using rule 176 (declaration-statement -> local-variable-declaration DELIM .)
    DELIM           reduce using rule 176 (declaration-statement -> local-variable-declaration DELIM .)
    CONSOLE         reduce using rule 176 (declaration-statement -> local-variable-declaration DELIM .)
    CONST           reduce using rule 176 (declaration-statement -> local-variable-declaration DELIM .)
    IF              reduce using rule 176 (declaration-statement -> local-variable-declaration DELIM .)
    SWITCH          reduce using rule 176 (declaration-statement -> local-variable-declaration DELIM .)
    WHILE           reduce using rule 176 (declaration-statement -> local-variable-declaration DELIM .)
    FOR             reduce using rule 176 (declaration-statement -> local-variable-declaration DELIM .)
    FOREACH         reduce using rule 176 (declaration-statement -> local-variable-declaration DELIM .)
    DO              reduce using rule 176 (declaration-statement -> local-variable-declaration DELIM .)
    BREAK           reduce using rule 176 (declaration-statement -> local-variable-declaration DELIM .)
    CONTINUE        reduce using rule 176 (declaration-statement -> local-variable-declaration DELIM .)
    GOTO            reduce using rule 176 (declaration-statement -> local-variable-declaration DELIM .)
    RETURN          reduce using rule 176 (declaration-statement -> local-variable-declaration DELIM .)
    NEW             reduce using rule 176 (declaration-statement -> local-variable-declaration DELIM .)
    INCRE           reduce using rule 176 (declaration-statement -> local-variable-declaration DELIM .)
    DECRE           reduce using rule 176 (declaration-statement -> local-variable-declaration DELIM .)
    BOOL            reduce using rule 176 (declaration-statement -> local-variable-declaration DELIM .)
    INT             reduce using rule 176 (declaration-statement -> local-variable-declaration DELIM .)
    UINT            reduce using rule 176 (declaration-statement -> local-variable-declaration DELIM .)
    CHAR            reduce using rule 176 (declaration-statement -> local-variable-declaration DELIM .)
    DOUBLE          reduce using rule 176 (declaration-statement -> local-variable-declaration DELIM .)
    $end            reduce using rule 176 (declaration-statement -> local-variable-declaration DELIM .)
    BLOCK_END       reduce using rule 176 (declaration-statement -> local-variable-declaration DELIM .)
    CASE            reduce using rule 176 (declaration-statement -> local-variable-declaration DELIM .)
    DEFAULT         reduce using rule 176 (declaration-statement -> local-variable-declaration DELIM .)


state 122

    (229) continue-statement -> CONTINUE DELIM .

    IDENTIFIER      reduce using rule 229 (continue-statement -> CONTINUE DELIM .)
    BLOCK_BEGIN     reduce using rule 229 (continue-statement -> CONTINUE DELIM .)
    DELIM           reduce using rule 229 (continue-statement -> CONTINUE DELIM .)
    CONSOLE         reduce using rule 229 (continue-statement -> CONTINUE DELIM .)
    CONST           reduce using rule 229 (continue-statement -> CONTINUE DELIM .)
    IF              reduce using rule 229 (continue-statement -> CONTINUE DELIM .)
    SWITCH          reduce using rule 229 (continue-statement -> CONTINUE DELIM .)
    WHILE           reduce using rule 229 (continue-statement -> CONTINUE DELIM .)
    FOR             reduce using rule 229 (continue-statement -> CONTINUE DELIM .)
    FOREACH         reduce using rule 229 (continue-statement -> CONTINUE DELIM .)
    DO              reduce using rule 229 (continue-statement -> CONTINUE DELIM .)
    BREAK           reduce using rule 229 (continue-statement -> CONTINUE DELIM .)
    CONTINUE        reduce using rule 229 (continue-statement -> CONTINUE DELIM .)
    GOTO            reduce using rule 229 (continue-statement -> CONTINUE DELIM .)
    RETURN          reduce using rule 229 (continue-statement -> CONTINUE DELIM .)
    NEW             reduce using rule 229 (continue-statement -> CONTINUE DELIM .)
    INCRE           reduce using rule 229 (continue-statement -> CONTINUE DELIM .)
    DECRE           reduce using rule 229 (continue-statement -> CONTINUE DELIM .)
    BOOL            reduce using rule 229 (continue-statement -> CONTINUE DELIM .)
    INT             reduce using rule 229 (continue-statement -> CONTINUE DELIM .)
    UINT            reduce using rule 229 (continue-statement -> CONTINUE DELIM .)
    CHAR            reduce using rule 229 (continue-statement -> CONTINUE DELIM .)
    DOUBLE          reduce using rule 229 (continue-statement -> CONTINUE DELIM .)
    $end            reduce using rule 229 (continue-statement -> CONTINUE DELIM .)
    BLOCK_END       reduce using rule 229 (continue-statement -> CONTINUE DELIM .)
    CASE            reduce using rule 229 (continue-statement -> CONTINUE DELIM .)
    DEFAULT         reduce using rule 229 (continue-statement -> CONTINUE DELIM .)


state 123

    (118) pre-decrement-expression -> DECRE prim-expression .
    (99) member-access -> prim-expression . DOT IDENTIFIER

    TIMES           reduce using rule 118 (pre-decrement-expression -> DECRE prim-expression .)
    DIV             reduce using rule 118 (pre-decrement-expression -> DECRE prim-expression .)
    MOD             reduce using rule 118 (pre-decrement-expression -> DECRE prim-expression .)
    PLUS            reduce using rule 118 (pre-decrement-expression -> DECRE prim-expression .)
    MINUS           reduce using rule 118 (pre-decrement-expression -> DECRE prim-expression .)
    LSHIFT          reduce using rule 118 (pre-decrement-expression -> DECRE prim-expression .)
    RSHIFT          reduce using rule 118 (pre-decrement-expression -> DECRE prim-expression .)
    LT              reduce using rule 118 (pre-decrement-expression -> DECRE prim-expression .)
    GT              reduce using rule 118 (pre-decrement-expression -> DECRE prim-expression .)
    LE              reduce using rule 118 (pre-decrement-expression -> DECRE prim-expression .)
    GE              reduce using rule 118 (pre-decrement-expression -> DECRE prim-expression .)
    EQ              reduce using rule 118 (pre-decrement-expression -> DECRE prim-expression .)
    NE              reduce using rule 118 (pre-decrement-expression -> DECRE prim-expression .)
    BITAND          reduce using rule 118 (pre-decrement-expression -> DECRE prim-expression .)
    BITXOR          reduce using rule 118 (pre-decrement-expression -> DECRE prim-expression .)
    BITOR           reduce using rule 118 (pre-decrement-expression -> DECRE prim-expression .)
    LOGAND          reduce using rule 118 (pre-decrement-expression -> DECRE prim-expression .)
    CONDOP          reduce using rule 118 (pre-decrement-expression -> DECRE prim-expression .)
    LOGOR           reduce using rule 118 (pre-decrement-expression -> DECRE prim-expression .)
    DELIM           reduce using rule 118 (pre-decrement-expression -> DECRE prim-expression .)
    CLOSE_BRACKET   reduce using rule 118 (pre-decrement-expression -> DECRE prim-expression .)
    COMMA           reduce using rule 118 (pre-decrement-expression -> DECRE prim-expression .)
    CLOSE_PAREN     reduce using rule 118 (pre-decrement-expression -> DECRE prim-expression .)
    COLON           reduce using rule 118 (pre-decrement-expression -> DECRE prim-expression .)
    BLOCK_END       reduce using rule 118 (pre-decrement-expression -> DECRE prim-expression .)
    DOT             shift and go to state 156


state 124

    (208) while-statement -> WHILE OPEN_PAREN . expression CLOSE_PAREN block
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (119) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) unary-expression -> . pre-increment-expression
    (77) unary-expression -> . pre-decrement-expression
    (78) primary-expression -> . array-creation-expression
    (79) primary-expression -> . primary-no-array-creation-expression
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (80) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (90) primary-no-array-creation-expression -> . literal
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (94) primary-no-array-creation-expression -> . element-access
    (95) primary-no-array-creation-expression -> . post-increment-expression
    (96) primary-no-array-creation-expression -> . post-decrement-expression
    (97) primary-no-array-creation-expression -> . object-creation-expression
    (241) literal -> . ICONST
    (242) literal -> . DCONST
    (243) literal -> . TRUE
    (244) literal -> . FALSE
    (98) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 94
    PLUS            shift and go to state 93
    MINUS           shift and go to state 84
    BITNOT          shift and go to state 113
    BITCOMP         shift and go to state 88
    TIMES           shift and go to state 99
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    NEW             shift and go to state 82
    ICONST          shift and go to state 101
    DCONST          shift and go to state 114
    TRUE            shift and go to state 107
    FALSE           shift and go to state 105
    OPEN_PAREN      shift and go to state 96

    unary-expression               shift and go to state 103
    exclusive-or-expression        shift and go to state 78
    member-access                  shift and go to state 79
    relational-expression          shift and go to state 80
    additive-expression            shift and go to state 83
    primary-no-array-creation-expression shift and go to state 100
    inclusive-or-expression        shift and go to state 86
    prim-expression                shift and go to state 77
    element-access                 shift and go to state 89
    literal                        shift and go to state 98
    conditional-expression         shift and go to state 90
    conditional-and-expression     shift and go to state 91
    post-decrement-expression      shift and go to state 92
    array-creation-expression      shift and go to state 81
    assignment                     shift and go to state 97
    post-increment-expression      shift and go to state 85
    object-creation-expression     shift and go to state 102
    pre-increment-expression       shift and go to state 106
    equality-expression            shift and go to state 87
    shift-expression               shift and go to state 108
    and-expression                 shift and go to state 109
    pre-decrement-expression       shift and go to state 110
    multiplicative-expression      shift and go to state 111
    conditional-or-expression      shift and go to state 117
    primary-expression             shift and go to state 115
    invocation-expression          shift and go to state 116
    expression                     shift and go to state 209
    parenthesized-expression       shift and go to state 118

state 125

    (13) class-type -> IDENTIFIER .

    IDENTIFIER      reduce using rule 13 (class-type -> IDENTIFIER .)
    BLOCK_BEGIN     reduce using rule 13 (class-type -> IDENTIFIER .)
    OPEN_PAREN      reduce using rule 13 (class-type -> IDENTIFIER .)


state 126

    (116) object-creation-expression -> NEW type . OPEN_PAREN argument-list-opt CLOSE_PAREN

    OPEN_PAREN      shift and go to state 210


state 127

    (181) expression-statement -> statement-expression DELIM .

    IDENTIFIER      reduce using rule 181 (expression-statement -> statement-expression DELIM .)
    BLOCK_BEGIN     reduce using rule 181 (expression-statement -> statement-expression DELIM .)
    DELIM           reduce using rule 181 (expression-statement -> statement-expression DELIM .)
    CONSOLE         reduce using rule 181 (expression-statement -> statement-expression DELIM .)
    CONST           reduce using rule 181 (expression-statement -> statement-expression DELIM .)
    IF              reduce using rule 181 (expression-statement -> statement-expression DELIM .)
    SWITCH          reduce using rule 181 (expression-statement -> statement-expression DELIM .)
    WHILE           reduce using rule 181 (expression-statement -> statement-expression DELIM .)
    FOR             reduce using rule 181 (expression-statement -> statement-expression DELIM .)
    FOREACH         reduce using rule 181 (expression-statement -> statement-expression DELIM .)
    DO              reduce using rule 181 (expression-statement -> statement-expression DELIM .)
    BREAK           reduce using rule 181 (expression-statement -> statement-expression DELIM .)
    CONTINUE        reduce using rule 181 (expression-statement -> statement-expression DELIM .)
    GOTO            reduce using rule 181 (expression-statement -> statement-expression DELIM .)
    RETURN          reduce using rule 181 (expression-statement -> statement-expression DELIM .)
    NEW             reduce using rule 181 (expression-statement -> statement-expression DELIM .)
    INCRE           reduce using rule 181 (expression-statement -> statement-expression DELIM .)
    DECRE           reduce using rule 181 (expression-statement -> statement-expression DELIM .)
    BOOL            reduce using rule 181 (expression-statement -> statement-expression DELIM .)
    INT             reduce using rule 181 (expression-statement -> statement-expression DELIM .)
    UINT            reduce using rule 181 (expression-statement -> statement-expression DELIM .)
    CHAR            reduce using rule 181 (expression-statement -> statement-expression DELIM .)
    DOUBLE          reduce using rule 181 (expression-statement -> statement-expression DELIM .)
    CASE            reduce using rule 181 (expression-statement -> statement-expression DELIM .)
    DEFAULT         reduce using rule 181 (expression-statement -> statement-expression DELIM .)
    BLOCK_END       reduce using rule 181 (expression-statement -> statement-expression DELIM .)
    $end            reduce using rule 181 (expression-statement -> statement-expression DELIM .)


state 128

    (193) switch-statement -> SWITCH OPEN_PAREN . expression CLOSE_PAREN switch-block
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (119) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) unary-expression -> . pre-increment-expression
    (77) unary-expression -> . pre-decrement-expression
    (78) primary-expression -> . array-creation-expression
    (79) primary-expression -> . primary-no-array-creation-expression
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (80) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (90) primary-no-array-creation-expression -> . literal
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (94) primary-no-array-creation-expression -> . element-access
    (95) primary-no-array-creation-expression -> . post-increment-expression
    (96) primary-no-array-creation-expression -> . post-decrement-expression
    (97) primary-no-array-creation-expression -> . object-creation-expression
    (241) literal -> . ICONST
    (242) literal -> . DCONST
    (243) literal -> . TRUE
    (244) literal -> . FALSE
    (98) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 94
    PLUS            shift and go to state 93
    MINUS           shift and go to state 84
    BITNOT          shift and go to state 113
    BITCOMP         shift and go to state 88
    TIMES           shift and go to state 99
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    NEW             shift and go to state 82
    ICONST          shift and go to state 101
    DCONST          shift and go to state 114
    TRUE            shift and go to state 107
    FALSE           shift and go to state 105
    OPEN_PAREN      shift and go to state 96

    unary-expression               shift and go to state 103
    exclusive-or-expression        shift and go to state 78
    member-access                  shift and go to state 79
    relational-expression          shift and go to state 80
    additive-expression            shift and go to state 83
    primary-no-array-creation-expression shift and go to state 100
    inclusive-or-expression        shift and go to state 86
    prim-expression                shift and go to state 77
    element-access                 shift and go to state 89
    literal                        shift and go to state 98
    conditional-expression         shift and go to state 90
    conditional-and-expression     shift and go to state 91
    post-decrement-expression      shift and go to state 92
    array-creation-expression      shift and go to state 81
    assignment                     shift and go to state 97
    post-increment-expression      shift and go to state 85
    object-creation-expression     shift and go to state 102
    pre-increment-expression       shift and go to state 106
    equality-expression            shift and go to state 87
    shift-expression               shift and go to state 108
    and-expression                 shift and go to state 109
    pre-decrement-expression       shift and go to state 110
    multiplicative-expression      shift and go to state 111
    conditional-or-expression      shift and go to state 117
    primary-expression             shift and go to state 115
    invocation-expression          shift and go to state 116
    expression                     shift and go to state 211
    parenthesized-expression       shift and go to state 118

state 129

    (109) element-access -> IDENTIFIER OPEN_BRACKET . expression-list CLOSE_BRACKET
    (83) expression-list -> . expression
    (84) expression-list -> . expression-list COMMA expression
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (119) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) unary-expression -> . pre-increment-expression
    (77) unary-expression -> . pre-decrement-expression
    (78) primary-expression -> . array-creation-expression
    (79) primary-expression -> . primary-no-array-creation-expression
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (80) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (90) primary-no-array-creation-expression -> . literal
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (94) primary-no-array-creation-expression -> . element-access
    (95) primary-no-array-creation-expression -> . post-increment-expression
    (96) primary-no-array-creation-expression -> . post-decrement-expression
    (97) primary-no-array-creation-expression -> . object-creation-expression
    (241) literal -> . ICONST
    (242) literal -> . DCONST
    (243) literal -> . TRUE
    (244) literal -> . FALSE
    (98) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 94
    PLUS            shift and go to state 93
    MINUS           shift and go to state 84
    BITNOT          shift and go to state 113
    BITCOMP         shift and go to state 88
    TIMES           shift and go to state 99
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    NEW             shift and go to state 82
    ICONST          shift and go to state 101
    DCONST          shift and go to state 114
    TRUE            shift and go to state 107
    FALSE           shift and go to state 105
    OPEN_PAREN      shift and go to state 96

    unary-expression               shift and go to state 103
    exclusive-or-expression        shift and go to state 78
    member-access                  shift and go to state 79
    relational-expression          shift and go to state 80
    additive-expression            shift and go to state 83
    primary-no-array-creation-expression shift and go to state 100
    inclusive-or-expression        shift and go to state 86
    equality-expression            shift and go to state 87
    prim-expression                shift and go to state 77
    element-access                 shift and go to state 89
    literal                        shift and go to state 98
    conditional-expression         shift and go to state 90
    conditional-and-expression     shift and go to state 91
    post-decrement-expression      shift and go to state 92
    array-creation-expression      shift and go to state 81
    assignment                     shift and go to state 97
    post-increment-expression      shift and go to state 85
    object-creation-expression     shift and go to state 102
    pre-increment-expression       shift and go to state 106
    expression-list                shift and go to state 212
    shift-expression               shift and go to state 108
    and-expression                 shift and go to state 109
    pre-decrement-expression       shift and go to state 110
    multiplicative-expression      shift and go to state 111
    expression                     shift and go to state 162
    primary-expression             shift and go to state 115
    invocation-expression          shift and go to state 116
    conditional-or-expression      shift and go to state 117
    parenthesized-expression       shift and go to state 118

state 130

    (100) invocation-expression -> IDENTIFIER OPEN_PAREN . argument-list-opt CLOSE_PAREN
    (102) argument-list-opt -> . argument-list
    (103) argument-list-opt -> . empty
    (104) argument-list -> . argument
    (105) argument-list -> . argument-list COMMA argument
    (245) empty -> .
    (106) argument -> . expression
    (107) argument -> . OUT variable-reference
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (119) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) unary-expression -> . pre-increment-expression
    (77) unary-expression -> . pre-decrement-expression
    (78) primary-expression -> . array-creation-expression
    (79) primary-expression -> . primary-no-array-creation-expression
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (80) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (90) primary-no-array-creation-expression -> . literal
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (94) primary-no-array-creation-expression -> . element-access
    (95) primary-no-array-creation-expression -> . post-increment-expression
    (96) primary-no-array-creation-expression -> . post-decrement-expression
    (97) primary-no-array-creation-expression -> . object-creation-expression
    (241) literal -> . ICONST
    (242) literal -> . DCONST
    (243) literal -> . TRUE
    (244) literal -> . FALSE
    (98) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    CLOSE_PAREN     reduce using rule 245 (empty -> .)
    OUT             shift and go to state 166
    IDENTIFIER      shift and go to state 94
    PLUS            shift and go to state 93
    MINUS           shift and go to state 84
    BITNOT          shift and go to state 113
    BITCOMP         shift and go to state 88
    TIMES           shift and go to state 99
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    NEW             shift and go to state 82
    ICONST          shift and go to state 101
    DCONST          shift and go to state 114
    TRUE            shift and go to state 107
    FALSE           shift and go to state 105
    OPEN_PAREN      shift and go to state 96

    argument-list-opt              shift and go to state 213
    unary-expression               shift and go to state 103
    exclusive-or-expression        shift and go to state 78
    member-access                  shift and go to state 79
    argument                       shift and go to state 164
    relational-expression          shift and go to state 80
    additive-expression            shift and go to state 83
    primary-no-array-creation-expression shift and go to state 100
    inclusive-or-expression        shift and go to state 86
    equality-expression            shift and go to state 87
    prim-expression                shift and go to state 77
    element-access                 shift and go to state 89
    literal                        shift and go to state 98
    conditional-expression         shift and go to state 90
    conditional-and-expression     shift and go to state 91
    post-decrement-expression      shift and go to state 92
    argument-list                  shift and go to state 167
    empty                          shift and go to state 165
    array-creation-expression      shift and go to state 81
    assignment                     shift and go to state 97
    post-increment-expression      shift and go to state 85
    object-creation-expression     shift and go to state 102
    pre-increment-expression       shift and go to state 106
    shift-expression               shift and go to state 108
    and-expression                 shift and go to state 109
    pre-decrement-expression       shift and go to state 110
    multiplicative-expression      shift and go to state 111
    expression                     shift and go to state 168
    primary-expression             shift and go to state 115
    invocation-expression          shift and go to state 116
    conditional-or-expression      shift and go to state 117
    parenthesized-expression       shift and go to state 118

state 131

    (175) labeled-statement -> IDENTIFIER COLON . statement
    (161) statement -> . labeled-statement
    (162) statement -> . declaration-statement
    (163) statement -> . block
    (164) statement -> . empty-statement
    (165) statement -> . expression-statement
    (166) statement -> . selection-statement
    (167) statement -> . iteration-statement
    (168) statement -> . jump-statement
    (169) statement -> . write-statement
    (170) statement -> . read-statement
    (175) labeled-statement -> . IDENTIFIER COLON statement
    (176) declaration-statement -> . local-variable-declaration DELIM
    (177) declaration-statement -> . local-constant-declaration DELIM
    (156) block -> . BLOCK_BEGIN statement-list-opt BLOCK_END
    (180) empty-statement -> . DELIM
    (181) expression-statement -> . statement-expression DELIM
    (189) selection-statement -> . if-statement
    (190) selection-statement -> . switch-statement
    (204) iteration-statement -> . while-statement
    (205) iteration-statement -> . for-statement
    (206) iteration-statement -> . foreach-statement
    (207) iteration-statement -> . do-statement
    (224) jump-statement -> . break-statement
    (225) jump-statement -> . continue-statement
    (226) jump-statement -> . goto-statement
    (227) jump-statement -> . return-statement
    (171) write-statement -> . CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN
    (174) read-statement -> . CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN
    (178) local-variable-declaration -> . type variable-declarators
    (179) local-constant-declaration -> . CONST type constant-declarators
    (182) statement-expression -> . invocation-expression
    (183) statement-expression -> . object-creation-expression
    (184) statement-expression -> . assignment
    (185) statement-expression -> . post-increment-expression
    (186) statement-expression -> . post-decrement-expression
    (187) statement-expression -> . pre-increment-expression
    (188) statement-expression -> . pre-decrement-expression
    (191) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN block
    (192) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN block ELSE block
    (193) switch-statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block
    (208) while-statement -> . WHILE OPEN_PAREN expression CLOSE_PAREN block
    (210) for-statement -> . FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN block
    (223) foreach-statement -> . FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN block
    (209) do-statement -> . DO block WHILE OPEN_PAREN expression CLOSE_PAREN DELIM
    (228) break-statement -> . BREAK DELIM
    (229) continue-statement -> . CONTINUE DELIM
    (230) goto-statement -> . GOTO IDENTIFIER DELIM
    (231) return-statement -> . RETURN expression-opt DELIM
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (119) assignment -> . prim-expression assignment-operator expression
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE
    (13) class-type -> . IDENTIFIER
    (34) array-type -> . simple-type OPEN_BRACKET CLOSE_BRACKET
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET

    IDENTIFIER      shift and go to state 42
    BLOCK_BEGIN     shift and go to state 57
    DELIM           shift and go to state 31
    CONSOLE         shift and go to state 61
    CONST           shift and go to state 56
    IF              shift and go to state 67
    SWITCH          shift and go to state 40
    WHILE           shift and go to state 35
    FOR             shift and go to state 23
    FOREACH         shift and go to state 9
    DO              shift and go to state 55
    BREAK           shift and go to state 49
    CONTINUE        shift and go to state 29
    GOTO            shift and go to state 7
    RETURN          shift and go to state 15
    NEW             shift and go to state 37
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    BOOL            shift and go to state 51
    INT             shift and go to state 50
    UINT            shift and go to state 64
    CHAR            shift and go to state 34
    DOUBLE          shift and go to state 13

    return-statement               shift and go to state 17
    prim-expression                shift and go to state 58
    write-statement                shift and go to state 1
    member-access                  shift and go to state 2
    selection-statement            shift and go to state 32
    empty-statement                shift and go to state 36
    expression-statement           shift and go to state 3
    pre-decrement-expression       shift and go to state 25
    foreach-statement              shift and go to state 19
    break-statement                shift and go to state 38
    post-increment-expression      shift and go to state 4
    element-access                 shift and go to state 20
    statement-expression           shift and go to state 39
    local-constant-declaration     shift and go to state 21
    statement                      shift and go to state 214
    assignment                     shift and go to state 62
    for-statement                  shift and go to state 6
    type                           shift and go to state 43
    read-statement                 shift and go to state 60
    do-statement                   shift and go to state 22
    array-type                     shift and go to state 45
    continue-statement             shift and go to state 24
    invocation-expression          shift and go to state 14
    labeled-statement              shift and go to state 8
    declaration-statement          shift and go to state 47
    object-creation-expression     shift and go to state 65
    post-decrement-expression      shift and go to state 46
    switch-statement               shift and go to state 10
    pre-increment-expression       shift and go to state 66
    iteration-statement            shift and go to state 48
    jump-statement                 shift and go to state 11
    local-variable-declaration     shift and go to state 26
    goto-statement                 shift and go to state 27
    if-statement                   shift and go to state 28
    class-type                     shift and go to state 68
    while-statement                shift and go to state 53
    simple-type                    shift and go to state 54
    block                          shift and go to state 30

state 132

    (135) variable-declarators -> variable-declarator .

    DELIM           reduce using rule 135 (variable-declarators -> variable-declarator .)
    COMMA           reduce using rule 135 (variable-declarators -> variable-declarator .)


state 133

    (178) local-variable-declaration -> type variable-declarators .
    (136) variable-declarators -> variable-declarators . COMMA variable-declarator

    DELIM           reduce using rule 178 (local-variable-declaration -> type variable-declarators .)
    COMMA           shift and go to state 215


state 134

    (137) variable-declarator -> IDENTIFIER .
    (138) variable-declarator -> IDENTIFIER . ASSIGN variable-initializer

    COMMA           reduce using rule 137 (variable-declarator -> IDENTIFIER .)
    DELIM           reduce using rule 137 (variable-declarator -> IDENTIFIER .)
    ASSIGN          shift and go to state 216


state 135

    (228) break-statement -> BREAK DELIM .

    IDENTIFIER      reduce using rule 228 (break-statement -> BREAK DELIM .)
    BLOCK_BEGIN     reduce using rule 228 (break-statement -> BREAK DELIM .)
    DELIM           reduce using rule 228 (break-statement -> BREAK DELIM .)
    CONSOLE         reduce using rule 228 (break-statement -> BREAK DELIM .)
    CONST           reduce using rule 228 (break-statement -> BREAK DELIM .)
    IF              reduce using rule 228 (break-statement -> BREAK DELIM .)
    SWITCH          reduce using rule 228 (break-statement -> BREAK DELIM .)
    WHILE           reduce using rule 228 (break-statement -> BREAK DELIM .)
    FOR             reduce using rule 228 (break-statement -> BREAK DELIM .)
    FOREACH         reduce using rule 228 (break-statement -> BREAK DELIM .)
    DO              reduce using rule 228 (break-statement -> BREAK DELIM .)
    BREAK           reduce using rule 228 (break-statement -> BREAK DELIM .)
    CONTINUE        reduce using rule 228 (break-statement -> BREAK DELIM .)
    GOTO            reduce using rule 228 (break-statement -> BREAK DELIM .)
    RETURN          reduce using rule 228 (break-statement -> BREAK DELIM .)
    NEW             reduce using rule 228 (break-statement -> BREAK DELIM .)
    INCRE           reduce using rule 228 (break-statement -> BREAK DELIM .)
    DECRE           reduce using rule 228 (break-statement -> BREAK DELIM .)
    BOOL            reduce using rule 228 (break-statement -> BREAK DELIM .)
    INT             reduce using rule 228 (break-statement -> BREAK DELIM .)
    UINT            reduce using rule 228 (break-statement -> BREAK DELIM .)
    CHAR            reduce using rule 228 (break-statement -> BREAK DELIM .)
    DOUBLE          reduce using rule 228 (break-statement -> BREAK DELIM .)
    BLOCK_END       reduce using rule 228 (break-statement -> BREAK DELIM .)
    $end            reduce using rule 228 (break-statement -> BREAK DELIM .)
    CASE            reduce using rule 228 (break-statement -> BREAK DELIM .)
    DEFAULT         reduce using rule 228 (break-statement -> BREAK DELIM .)


state 136

    (160) statement-list -> statement-list statement .

    IDENTIFIER      reduce using rule 160 (statement-list -> statement-list statement .)
    BLOCK_BEGIN     reduce using rule 160 (statement-list -> statement-list statement .)
    DELIM           reduce using rule 160 (statement-list -> statement-list statement .)
    CONSOLE         reduce using rule 160 (statement-list -> statement-list statement .)
    CONST           reduce using rule 160 (statement-list -> statement-list statement .)
    IF              reduce using rule 160 (statement-list -> statement-list statement .)
    SWITCH          reduce using rule 160 (statement-list -> statement-list statement .)
    WHILE           reduce using rule 160 (statement-list -> statement-list statement .)
    FOR             reduce using rule 160 (statement-list -> statement-list statement .)
    FOREACH         reduce using rule 160 (statement-list -> statement-list statement .)
    DO              reduce using rule 160 (statement-list -> statement-list statement .)
    BREAK           reduce using rule 160 (statement-list -> statement-list statement .)
    CONTINUE        reduce using rule 160 (statement-list -> statement-list statement .)
    GOTO            reduce using rule 160 (statement-list -> statement-list statement .)
    RETURN          reduce using rule 160 (statement-list -> statement-list statement .)
    NEW             reduce using rule 160 (statement-list -> statement-list statement .)
    INCRE           reduce using rule 160 (statement-list -> statement-list statement .)
    DECRE           reduce using rule 160 (statement-list -> statement-list statement .)
    BOOL            reduce using rule 160 (statement-list -> statement-list statement .)
    INT             reduce using rule 160 (statement-list -> statement-list statement .)
    UINT            reduce using rule 160 (statement-list -> statement-list statement .)
    CHAR            reduce using rule 160 (statement-list -> statement-list statement .)
    DOUBLE          reduce using rule 160 (statement-list -> statement-list statement .)
    BLOCK_END       reduce using rule 160 (statement-list -> statement-list statement .)
    $end            reduce using rule 160 (statement-list -> statement-list statement .)
    CASE            reduce using rule 160 (statement-list -> statement-list statement .)
    DEFAULT         reduce using rule 160 (statement-list -> statement-list statement .)


state 137

    (34) array-type -> simple-type OPEN_BRACKET . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 217


state 138

    (209) do-statement -> DO block . WHILE OPEN_PAREN expression CLOSE_PAREN DELIM

    WHILE           shift and go to state 218


state 139

    (179) local-constant-declaration -> CONST type . constant-declarators
    (35) constant-declarators -> . constant-declarator
    (36) constant-declarators -> . constant-declarators COMMA constant-declarator
    (37) constant-declarator -> . IDENTIFIER ASSIGN expression

    IDENTIFIER      shift and go to state 220

    constant-declarators           shift and go to state 219
    constant-declarator            shift and go to state 221

state 140

    (158) statement-list-opt -> empty .

    BLOCK_END       reduce using rule 158 (statement-list-opt -> empty .)


state 141

    (157) statement-list-opt -> statement-list .
    (160) statement-list -> statement-list . statement
    (161) statement -> . labeled-statement
    (162) statement -> . declaration-statement
    (163) statement -> . block
    (164) statement -> . empty-statement
    (165) statement -> . expression-statement
    (166) statement -> . selection-statement
    (167) statement -> . iteration-statement
    (168) statement -> . jump-statement
    (169) statement -> . write-statement
    (170) statement -> . read-statement
    (175) labeled-statement -> . IDENTIFIER COLON statement
    (176) declaration-statement -> . local-variable-declaration DELIM
    (177) declaration-statement -> . local-constant-declaration DELIM
    (156) block -> . BLOCK_BEGIN statement-list-opt BLOCK_END
    (180) empty-statement -> . DELIM
    (181) expression-statement -> . statement-expression DELIM
    (189) selection-statement -> . if-statement
    (190) selection-statement -> . switch-statement
    (204) iteration-statement -> . while-statement
    (205) iteration-statement -> . for-statement
    (206) iteration-statement -> . foreach-statement
    (207) iteration-statement -> . do-statement
    (224) jump-statement -> . break-statement
    (225) jump-statement -> . continue-statement
    (226) jump-statement -> . goto-statement
    (227) jump-statement -> . return-statement
    (171) write-statement -> . CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN
    (174) read-statement -> . CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN
    (178) local-variable-declaration -> . type variable-declarators
    (179) local-constant-declaration -> . CONST type constant-declarators
    (182) statement-expression -> . invocation-expression
    (183) statement-expression -> . object-creation-expression
    (184) statement-expression -> . assignment
    (185) statement-expression -> . post-increment-expression
    (186) statement-expression -> . post-decrement-expression
    (187) statement-expression -> . pre-increment-expression
    (188) statement-expression -> . pre-decrement-expression
    (191) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN block
    (192) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN block ELSE block
    (193) switch-statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block
    (208) while-statement -> . WHILE OPEN_PAREN expression CLOSE_PAREN block
    (210) for-statement -> . FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN block
    (223) foreach-statement -> . FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN block
    (209) do-statement -> . DO block WHILE OPEN_PAREN expression CLOSE_PAREN DELIM
    (228) break-statement -> . BREAK DELIM
    (229) continue-statement -> . CONTINUE DELIM
    (230) goto-statement -> . GOTO IDENTIFIER DELIM
    (231) return-statement -> . RETURN expression-opt DELIM
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (119) assignment -> . prim-expression assignment-operator expression
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE
    (13) class-type -> . IDENTIFIER
    (34) array-type -> . simple-type OPEN_BRACKET CLOSE_BRACKET
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET

    BLOCK_END       reduce using rule 157 (statement-list-opt -> statement-list .)
    IDENTIFIER      shift and go to state 42
    BLOCK_BEGIN     shift and go to state 57
    DELIM           shift and go to state 31
    CONSOLE         shift and go to state 61
    CONST           shift and go to state 56
    IF              shift and go to state 67
    SWITCH          shift and go to state 40
    WHILE           shift and go to state 35
    FOR             shift and go to state 23
    FOREACH         shift and go to state 9
    DO              shift and go to state 55
    BREAK           shift and go to state 49
    CONTINUE        shift and go to state 29
    GOTO            shift and go to state 7
    RETURN          shift and go to state 15
    NEW             shift and go to state 37
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    BOOL            shift and go to state 51
    INT             shift and go to state 50
    UINT            shift and go to state 64
    CHAR            shift and go to state 34
    DOUBLE          shift and go to state 13

    return-statement               shift and go to state 17
    prim-expression                shift and go to state 58
    write-statement                shift and go to state 1
    member-access                  shift and go to state 2
    selection-statement            shift and go to state 32
    empty-statement                shift and go to state 36
    expression-statement           shift and go to state 3
    pre-decrement-expression       shift and go to state 25
    foreach-statement              shift and go to state 19
    break-statement                shift and go to state 38
    post-increment-expression      shift and go to state 4
    element-access                 shift and go to state 20
    statement-expression           shift and go to state 39
    local-constant-declaration     shift and go to state 21
    statement                      shift and go to state 136
    assignment                     shift and go to state 62
    for-statement                  shift and go to state 6
    type                           shift and go to state 43
    read-statement                 shift and go to state 60
    do-statement                   shift and go to state 22
    array-type                     shift and go to state 45
    continue-statement             shift and go to state 24
    invocation-expression          shift and go to state 14
    labeled-statement              shift and go to state 8
    declaration-statement          shift and go to state 47
    object-creation-expression     shift and go to state 65
    post-decrement-expression      shift and go to state 46
    switch-statement               shift and go to state 10
    pre-increment-expression       shift and go to state 66
    jump-statement                 shift and go to state 11
    iteration-statement            shift and go to state 48
    local-variable-declaration     shift and go to state 26
    goto-statement                 shift and go to state 27
    if-statement                   shift and go to state 28
    class-type                     shift and go to state 68
    while-statement                shift and go to state 53
    simple-type                    shift and go to state 54
    block                          shift and go to state 30

state 142

    (156) block -> BLOCK_BEGIN statement-list-opt . BLOCK_END

    BLOCK_END       shift and go to state 222


state 143

    (124) assignment-operator -> DIVEQUAL .

    IDENTIFIER      reduce using rule 124 (assignment-operator -> DIVEQUAL .)
    PLUS            reduce using rule 124 (assignment-operator -> DIVEQUAL .)
    MINUS           reduce using rule 124 (assignment-operator -> DIVEQUAL .)
    BITNOT          reduce using rule 124 (assignment-operator -> DIVEQUAL .)
    BITCOMP         reduce using rule 124 (assignment-operator -> DIVEQUAL .)
    TIMES           reduce using rule 124 (assignment-operator -> DIVEQUAL .)
    INCRE           reduce using rule 124 (assignment-operator -> DIVEQUAL .)
    DECRE           reduce using rule 124 (assignment-operator -> DIVEQUAL .)
    NEW             reduce using rule 124 (assignment-operator -> DIVEQUAL .)
    ICONST          reduce using rule 124 (assignment-operator -> DIVEQUAL .)
    DCONST          reduce using rule 124 (assignment-operator -> DIVEQUAL .)
    TRUE            reduce using rule 124 (assignment-operator -> DIVEQUAL .)
    FALSE           reduce using rule 124 (assignment-operator -> DIVEQUAL .)
    OPEN_PAREN      reduce using rule 124 (assignment-operator -> DIVEQUAL .)


state 144

    (130) assignment-operator -> RSHIFTEQUAL .

    IDENTIFIER      reduce using rule 130 (assignment-operator -> RSHIFTEQUAL .)
    PLUS            reduce using rule 130 (assignment-operator -> RSHIFTEQUAL .)
    MINUS           reduce using rule 130 (assignment-operator -> RSHIFTEQUAL .)
    BITNOT          reduce using rule 130 (assignment-operator -> RSHIFTEQUAL .)
    BITCOMP         reduce using rule 130 (assignment-operator -> RSHIFTEQUAL .)
    TIMES           reduce using rule 130 (assignment-operator -> RSHIFTEQUAL .)
    INCRE           reduce using rule 130 (assignment-operator -> RSHIFTEQUAL .)
    DECRE           reduce using rule 130 (assignment-operator -> RSHIFTEQUAL .)
    NEW             reduce using rule 130 (assignment-operator -> RSHIFTEQUAL .)
    ICONST          reduce using rule 130 (assignment-operator -> RSHIFTEQUAL .)
    DCONST          reduce using rule 130 (assignment-operator -> RSHIFTEQUAL .)
    TRUE            reduce using rule 130 (assignment-operator -> RSHIFTEQUAL .)
    FALSE           reduce using rule 130 (assignment-operator -> RSHIFTEQUAL .)
    OPEN_PAREN      reduce using rule 130 (assignment-operator -> RSHIFTEQUAL .)


state 145

    (119) assignment -> prim-expression assignment-operator . expression
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (119) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) unary-expression -> . pre-increment-expression
    (77) unary-expression -> . pre-decrement-expression
    (78) primary-expression -> . array-creation-expression
    (79) primary-expression -> . primary-no-array-creation-expression
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (80) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (90) primary-no-array-creation-expression -> . literal
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (94) primary-no-array-creation-expression -> . element-access
    (95) primary-no-array-creation-expression -> . post-increment-expression
    (96) primary-no-array-creation-expression -> . post-decrement-expression
    (97) primary-no-array-creation-expression -> . object-creation-expression
    (241) literal -> . ICONST
    (242) literal -> . DCONST
    (243) literal -> . TRUE
    (244) literal -> . FALSE
    (98) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 94
    PLUS            shift and go to state 93
    MINUS           shift and go to state 84
    BITNOT          shift and go to state 113
    BITCOMP         shift and go to state 88
    TIMES           shift and go to state 99
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    NEW             shift and go to state 82
    ICONST          shift and go to state 101
    DCONST          shift and go to state 114
    TRUE            shift and go to state 107
    FALSE           shift and go to state 105
    OPEN_PAREN      shift and go to state 96

    unary-expression               shift and go to state 103
    exclusive-or-expression        shift and go to state 78
    member-access                  shift and go to state 79
    relational-expression          shift and go to state 80
    additive-expression            shift and go to state 83
    primary-no-array-creation-expression shift and go to state 100
    inclusive-or-expression        shift and go to state 86
    prim-expression                shift and go to state 77
    element-access                 shift and go to state 89
    literal                        shift and go to state 98
    conditional-expression         shift and go to state 90
    conditional-and-expression     shift and go to state 91
    post-decrement-expression      shift and go to state 92
    array-creation-expression      shift and go to state 81
    assignment                     shift and go to state 97
    post-increment-expression      shift and go to state 85
    object-creation-expression     shift and go to state 102
    pre-increment-expression       shift and go to state 106
    equality-expression            shift and go to state 87
    shift-expression               shift and go to state 108
    and-expression                 shift and go to state 109
    pre-decrement-expression       shift and go to state 110
    multiplicative-expression      shift and go to state 111
    conditional-or-expression      shift and go to state 117
    primary-expression             shift and go to state 115
    invocation-expression          shift and go to state 116
    expression                     shift and go to state 223
    parenthesized-expression       shift and go to state 118

state 146

    (123) assignment-operator -> TIMESEQUAL .

    IDENTIFIER      reduce using rule 123 (assignment-operator -> TIMESEQUAL .)
    PLUS            reduce using rule 123 (assignment-operator -> TIMESEQUAL .)
    MINUS           reduce using rule 123 (assignment-operator -> TIMESEQUAL .)
    BITNOT          reduce using rule 123 (assignment-operator -> TIMESEQUAL .)
    BITCOMP         reduce using rule 123 (assignment-operator -> TIMESEQUAL .)
    TIMES           reduce using rule 123 (assignment-operator -> TIMESEQUAL .)
    INCRE           reduce using rule 123 (assignment-operator -> TIMESEQUAL .)
    DECRE           reduce using rule 123 (assignment-operator -> TIMESEQUAL .)
    NEW             reduce using rule 123 (assignment-operator -> TIMESEQUAL .)
    ICONST          reduce using rule 123 (assignment-operator -> TIMESEQUAL .)
    DCONST          reduce using rule 123 (assignment-operator -> TIMESEQUAL .)
    TRUE            reduce using rule 123 (assignment-operator -> TIMESEQUAL .)
    FALSE           reduce using rule 123 (assignment-operator -> TIMESEQUAL .)
    OPEN_PAREN      reduce using rule 123 (assignment-operator -> TIMESEQUAL .)


state 147

    (122) assignment-operator -> MINUSEQUAL .

    IDENTIFIER      reduce using rule 122 (assignment-operator -> MINUSEQUAL .)
    PLUS            reduce using rule 122 (assignment-operator -> MINUSEQUAL .)
    MINUS           reduce using rule 122 (assignment-operator -> MINUSEQUAL .)
    BITNOT          reduce using rule 122 (assignment-operator -> MINUSEQUAL .)
    BITCOMP         reduce using rule 122 (assignment-operator -> MINUSEQUAL .)
    TIMES           reduce using rule 122 (assignment-operator -> MINUSEQUAL .)
    INCRE           reduce using rule 122 (assignment-operator -> MINUSEQUAL .)
    DECRE           reduce using rule 122 (assignment-operator -> MINUSEQUAL .)
    NEW             reduce using rule 122 (assignment-operator -> MINUSEQUAL .)
    ICONST          reduce using rule 122 (assignment-operator -> MINUSEQUAL .)
    DCONST          reduce using rule 122 (assignment-operator -> MINUSEQUAL .)
    TRUE            reduce using rule 122 (assignment-operator -> MINUSEQUAL .)
    FALSE           reduce using rule 122 (assignment-operator -> MINUSEQUAL .)
    OPEN_PAREN      reduce using rule 122 (assignment-operator -> MINUSEQUAL .)


state 148

    (115) post-decrement-expression -> prim-expression DECRE .

    TIMES           reduce using rule 115 (post-decrement-expression -> prim-expression DECRE .)
    DIV             reduce using rule 115 (post-decrement-expression -> prim-expression DECRE .)
    MOD             reduce using rule 115 (post-decrement-expression -> prim-expression DECRE .)
    PLUS            reduce using rule 115 (post-decrement-expression -> prim-expression DECRE .)
    MINUS           reduce using rule 115 (post-decrement-expression -> prim-expression DECRE .)
    LSHIFT          reduce using rule 115 (post-decrement-expression -> prim-expression DECRE .)
    RSHIFT          reduce using rule 115 (post-decrement-expression -> prim-expression DECRE .)
    LT              reduce using rule 115 (post-decrement-expression -> prim-expression DECRE .)
    GT              reduce using rule 115 (post-decrement-expression -> prim-expression DECRE .)
    LE              reduce using rule 115 (post-decrement-expression -> prim-expression DECRE .)
    GE              reduce using rule 115 (post-decrement-expression -> prim-expression DECRE .)
    EQ              reduce using rule 115 (post-decrement-expression -> prim-expression DECRE .)
    NE              reduce using rule 115 (post-decrement-expression -> prim-expression DECRE .)
    BITAND          reduce using rule 115 (post-decrement-expression -> prim-expression DECRE .)
    BITXOR          reduce using rule 115 (post-decrement-expression -> prim-expression DECRE .)
    BITOR           reduce using rule 115 (post-decrement-expression -> prim-expression DECRE .)
    LOGAND          reduce using rule 115 (post-decrement-expression -> prim-expression DECRE .)
    CONDOP          reduce using rule 115 (post-decrement-expression -> prim-expression DECRE .)
    LOGOR           reduce using rule 115 (post-decrement-expression -> prim-expression DECRE .)
    CLOSE_PAREN     reduce using rule 115 (post-decrement-expression -> prim-expression DECRE .)
    COMMA           reduce using rule 115 (post-decrement-expression -> prim-expression DECRE .)
    DELIM           reduce using rule 115 (post-decrement-expression -> prim-expression DECRE .)
    CLOSE_BRACKET   reduce using rule 115 (post-decrement-expression -> prim-expression DECRE .)
    COLON           reduce using rule 115 (post-decrement-expression -> prim-expression DECRE .)
    BLOCK_END       reduce using rule 115 (post-decrement-expression -> prim-expression DECRE .)


state 149

    (127) assignment-operator -> BITOREQUAL .

    IDENTIFIER      reduce using rule 127 (assignment-operator -> BITOREQUAL .)
    PLUS            reduce using rule 127 (assignment-operator -> BITOREQUAL .)
    MINUS           reduce using rule 127 (assignment-operator -> BITOREQUAL .)
    BITNOT          reduce using rule 127 (assignment-operator -> BITOREQUAL .)
    BITCOMP         reduce using rule 127 (assignment-operator -> BITOREQUAL .)
    TIMES           reduce using rule 127 (assignment-operator -> BITOREQUAL .)
    INCRE           reduce using rule 127 (assignment-operator -> BITOREQUAL .)
    DECRE           reduce using rule 127 (assignment-operator -> BITOREQUAL .)
    NEW             reduce using rule 127 (assignment-operator -> BITOREQUAL .)
    ICONST          reduce using rule 127 (assignment-operator -> BITOREQUAL .)
    DCONST          reduce using rule 127 (assignment-operator -> BITOREQUAL .)
    TRUE            reduce using rule 127 (assignment-operator -> BITOREQUAL .)
    FALSE           reduce using rule 127 (assignment-operator -> BITOREQUAL .)
    OPEN_PAREN      reduce using rule 127 (assignment-operator -> BITOREQUAL .)


state 150

    (121) assignment-operator -> PLUSEQUAL .

    IDENTIFIER      reduce using rule 121 (assignment-operator -> PLUSEQUAL .)
    PLUS            reduce using rule 121 (assignment-operator -> PLUSEQUAL .)
    MINUS           reduce using rule 121 (assignment-operator -> PLUSEQUAL .)
    BITNOT          reduce using rule 121 (assignment-operator -> PLUSEQUAL .)
    BITCOMP         reduce using rule 121 (assignment-operator -> PLUSEQUAL .)
    TIMES           reduce using rule 121 (assignment-operator -> PLUSEQUAL .)
    INCRE           reduce using rule 121 (assignment-operator -> PLUSEQUAL .)
    DECRE           reduce using rule 121 (assignment-operator -> PLUSEQUAL .)
    NEW             reduce using rule 121 (assignment-operator -> PLUSEQUAL .)
    ICONST          reduce using rule 121 (assignment-operator -> PLUSEQUAL .)
    DCONST          reduce using rule 121 (assignment-operator -> PLUSEQUAL .)
    TRUE            reduce using rule 121 (assignment-operator -> PLUSEQUAL .)
    FALSE           reduce using rule 121 (assignment-operator -> PLUSEQUAL .)
    OPEN_PAREN      reduce using rule 121 (assignment-operator -> PLUSEQUAL .)


state 151

    (114) post-increment-expression -> prim-expression INCRE .

    DELIM           reduce using rule 114 (post-increment-expression -> prim-expression INCRE .)
    TIMES           reduce using rule 114 (post-increment-expression -> prim-expression INCRE .)
    DIV             reduce using rule 114 (post-increment-expression -> prim-expression INCRE .)
    MOD             reduce using rule 114 (post-increment-expression -> prim-expression INCRE .)
    PLUS            reduce using rule 114 (post-increment-expression -> prim-expression INCRE .)
    MINUS           reduce using rule 114 (post-increment-expression -> prim-expression INCRE .)
    LSHIFT          reduce using rule 114 (post-increment-expression -> prim-expression INCRE .)
    RSHIFT          reduce using rule 114 (post-increment-expression -> prim-expression INCRE .)
    LT              reduce using rule 114 (post-increment-expression -> prim-expression INCRE .)
    GT              reduce using rule 114 (post-increment-expression -> prim-expression INCRE .)
    LE              reduce using rule 114 (post-increment-expression -> prim-expression INCRE .)
    GE              reduce using rule 114 (post-increment-expression -> prim-expression INCRE .)
    EQ              reduce using rule 114 (post-increment-expression -> prim-expression INCRE .)
    NE              reduce using rule 114 (post-increment-expression -> prim-expression INCRE .)
    BITAND          reduce using rule 114 (post-increment-expression -> prim-expression INCRE .)
    BITXOR          reduce using rule 114 (post-increment-expression -> prim-expression INCRE .)
    BITOR           reduce using rule 114 (post-increment-expression -> prim-expression INCRE .)
    LOGAND          reduce using rule 114 (post-increment-expression -> prim-expression INCRE .)
    CONDOP          reduce using rule 114 (post-increment-expression -> prim-expression INCRE .)
    LOGOR           reduce using rule 114 (post-increment-expression -> prim-expression INCRE .)
    CLOSE_BRACKET   reduce using rule 114 (post-increment-expression -> prim-expression INCRE .)
    COMMA           reduce using rule 114 (post-increment-expression -> prim-expression INCRE .)
    CLOSE_PAREN     reduce using rule 114 (post-increment-expression -> prim-expression INCRE .)
    COLON           reduce using rule 114 (post-increment-expression -> prim-expression INCRE .)
    BLOCK_END       reduce using rule 114 (post-increment-expression -> prim-expression INCRE .)


state 152

    (128) assignment-operator -> BITXOREQUAL .

    IDENTIFIER      reduce using rule 128 (assignment-operator -> BITXOREQUAL .)
    PLUS            reduce using rule 128 (assignment-operator -> BITXOREQUAL .)
    MINUS           reduce using rule 128 (assignment-operator -> BITXOREQUAL .)
    BITNOT          reduce using rule 128 (assignment-operator -> BITXOREQUAL .)
    BITCOMP         reduce using rule 128 (assignment-operator -> BITXOREQUAL .)
    TIMES           reduce using rule 128 (assignment-operator -> BITXOREQUAL .)
    INCRE           reduce using rule 128 (assignment-operator -> BITXOREQUAL .)
    DECRE           reduce using rule 128 (assignment-operator -> BITXOREQUAL .)
    NEW             reduce using rule 128 (assignment-operator -> BITXOREQUAL .)
    ICONST          reduce using rule 128 (assignment-operator -> BITXOREQUAL .)
    DCONST          reduce using rule 128 (assignment-operator -> BITXOREQUAL .)
    TRUE            reduce using rule 128 (assignment-operator -> BITXOREQUAL .)
    FALSE           reduce using rule 128 (assignment-operator -> BITXOREQUAL .)
    OPEN_PAREN      reduce using rule 128 (assignment-operator -> BITXOREQUAL .)


state 153

    (126) assignment-operator -> BITANDEQUAL .

    IDENTIFIER      reduce using rule 126 (assignment-operator -> BITANDEQUAL .)
    PLUS            reduce using rule 126 (assignment-operator -> BITANDEQUAL .)
    MINUS           reduce using rule 126 (assignment-operator -> BITANDEQUAL .)
    BITNOT          reduce using rule 126 (assignment-operator -> BITANDEQUAL .)
    BITCOMP         reduce using rule 126 (assignment-operator -> BITANDEQUAL .)
    TIMES           reduce using rule 126 (assignment-operator -> BITANDEQUAL .)
    INCRE           reduce using rule 126 (assignment-operator -> BITANDEQUAL .)
    DECRE           reduce using rule 126 (assignment-operator -> BITANDEQUAL .)
    NEW             reduce using rule 126 (assignment-operator -> BITANDEQUAL .)
    ICONST          reduce using rule 126 (assignment-operator -> BITANDEQUAL .)
    DCONST          reduce using rule 126 (assignment-operator -> BITANDEQUAL .)
    TRUE            reduce using rule 126 (assignment-operator -> BITANDEQUAL .)
    FALSE           reduce using rule 126 (assignment-operator -> BITANDEQUAL .)
    OPEN_PAREN      reduce using rule 126 (assignment-operator -> BITANDEQUAL .)


state 154

    (129) assignment-operator -> LSHIFTEQUAL .

    IDENTIFIER      reduce using rule 129 (assignment-operator -> LSHIFTEQUAL .)
    PLUS            reduce using rule 129 (assignment-operator -> LSHIFTEQUAL .)
    MINUS           reduce using rule 129 (assignment-operator -> LSHIFTEQUAL .)
    BITNOT          reduce using rule 129 (assignment-operator -> LSHIFTEQUAL .)
    BITCOMP         reduce using rule 129 (assignment-operator -> LSHIFTEQUAL .)
    TIMES           reduce using rule 129 (assignment-operator -> LSHIFTEQUAL .)
    INCRE           reduce using rule 129 (assignment-operator -> LSHIFTEQUAL .)
    DECRE           reduce using rule 129 (assignment-operator -> LSHIFTEQUAL .)
    NEW             reduce using rule 129 (assignment-operator -> LSHIFTEQUAL .)
    ICONST          reduce using rule 129 (assignment-operator -> LSHIFTEQUAL .)
    DCONST          reduce using rule 129 (assignment-operator -> LSHIFTEQUAL .)
    TRUE            reduce using rule 129 (assignment-operator -> LSHIFTEQUAL .)
    FALSE           reduce using rule 129 (assignment-operator -> LSHIFTEQUAL .)
    OPEN_PAREN      reduce using rule 129 (assignment-operator -> LSHIFTEQUAL .)


state 155

    (120) assignment-operator -> ASSIGN .

    IDENTIFIER      reduce using rule 120 (assignment-operator -> ASSIGN .)
    PLUS            reduce using rule 120 (assignment-operator -> ASSIGN .)
    MINUS           reduce using rule 120 (assignment-operator -> ASSIGN .)
    BITNOT          reduce using rule 120 (assignment-operator -> ASSIGN .)
    BITCOMP         reduce using rule 120 (assignment-operator -> ASSIGN .)
    TIMES           reduce using rule 120 (assignment-operator -> ASSIGN .)
    INCRE           reduce using rule 120 (assignment-operator -> ASSIGN .)
    DECRE           reduce using rule 120 (assignment-operator -> ASSIGN .)
    NEW             reduce using rule 120 (assignment-operator -> ASSIGN .)
    ICONST          reduce using rule 120 (assignment-operator -> ASSIGN .)
    DCONST          reduce using rule 120 (assignment-operator -> ASSIGN .)
    TRUE            reduce using rule 120 (assignment-operator -> ASSIGN .)
    FALSE           reduce using rule 120 (assignment-operator -> ASSIGN .)
    OPEN_PAREN      reduce using rule 120 (assignment-operator -> ASSIGN .)


state 156

    (99) member-access -> prim-expression DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 224


state 157

    (125) assignment-operator -> MODEQUAL .

    IDENTIFIER      reduce using rule 125 (assignment-operator -> MODEQUAL .)
    PLUS            reduce using rule 125 (assignment-operator -> MODEQUAL .)
    MINUS           reduce using rule 125 (assignment-operator -> MODEQUAL .)
    BITNOT          reduce using rule 125 (assignment-operator -> MODEQUAL .)
    BITCOMP         reduce using rule 125 (assignment-operator -> MODEQUAL .)
    TIMES           reduce using rule 125 (assignment-operator -> MODEQUAL .)
    INCRE           reduce using rule 125 (assignment-operator -> MODEQUAL .)
    DECRE           reduce using rule 125 (assignment-operator -> MODEQUAL .)
    NEW             reduce using rule 125 (assignment-operator -> MODEQUAL .)
    ICONST          reduce using rule 125 (assignment-operator -> MODEQUAL .)
    DCONST          reduce using rule 125 (assignment-operator -> MODEQUAL .)
    TRUE            reduce using rule 125 (assignment-operator -> MODEQUAL .)
    FALSE           reduce using rule 125 (assignment-operator -> MODEQUAL .)
    OPEN_PAREN      reduce using rule 125 (assignment-operator -> MODEQUAL .)


state 158

    (9) class-declaration -> CLASS IDENTIFIER . class-base-opt class-body semi-opt
    (10) class-base-opt -> . class-base
    (11) class-base-opt -> . empty
    (12) class-base -> . COLON class-type
    (245) empty -> .

    COLON           shift and go to state 227
    BLOCK_BEGIN     reduce using rule 245 (empty -> .)

    class-base-opt                 shift and go to state 225
    class-base                     shift and go to state 226
    empty                          shift and go to state 228

state 159

    (171) write-statement -> CONSOLE DOT . WRITELINE OPEN_PAREN print-list CLOSE_PAREN
    (174) read-statement -> CONSOLE DOT . READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN

    WRITELINE       shift and go to state 229
    READLINE        shift and go to state 230


state 160

    (191) if-statement -> IF OPEN_PAREN . expression CLOSE_PAREN block
    (192) if-statement -> IF OPEN_PAREN . expression CLOSE_PAREN block ELSE block
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (119) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) unary-expression -> . pre-increment-expression
    (77) unary-expression -> . pre-decrement-expression
    (78) primary-expression -> . array-creation-expression
    (79) primary-expression -> . primary-no-array-creation-expression
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (80) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (90) primary-no-array-creation-expression -> . literal
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (94) primary-no-array-creation-expression -> . element-access
    (95) primary-no-array-creation-expression -> . post-increment-expression
    (96) primary-no-array-creation-expression -> . post-decrement-expression
    (97) primary-no-array-creation-expression -> . object-creation-expression
    (241) literal -> . ICONST
    (242) literal -> . DCONST
    (243) literal -> . TRUE
    (244) literal -> . FALSE
    (98) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 94
    PLUS            shift and go to state 93
    MINUS           shift and go to state 84
    BITNOT          shift and go to state 113
    BITCOMP         shift and go to state 88
    TIMES           shift and go to state 99
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    NEW             shift and go to state 82
    ICONST          shift and go to state 101
    DCONST          shift and go to state 114
    TRUE            shift and go to state 107
    FALSE           shift and go to state 105
    OPEN_PAREN      shift and go to state 96

    unary-expression               shift and go to state 103
    exclusive-or-expression        shift and go to state 78
    member-access                  shift and go to state 79
    relational-expression          shift and go to state 80
    additive-expression            shift and go to state 83
    primary-no-array-creation-expression shift and go to state 100
    inclusive-or-expression        shift and go to state 86
    prim-expression                shift and go to state 77
    element-access                 shift and go to state 89
    literal                        shift and go to state 98
    conditional-expression         shift and go to state 90
    conditional-and-expression     shift and go to state 91
    post-decrement-expression      shift and go to state 92
    array-creation-expression      shift and go to state 81
    assignment                     shift and go to state 97
    post-increment-expression      shift and go to state 85
    object-creation-expression     shift and go to state 102
    pre-increment-expression       shift and go to state 106
    equality-expression            shift and go to state 87
    shift-expression               shift and go to state 108
    and-expression                 shift and go to state 109
    pre-decrement-expression       shift and go to state 110
    multiplicative-expression      shift and go to state 111
    conditional-or-expression      shift and go to state 117
    primary-expression             shift and go to state 115
    invocation-expression          shift and go to state 116
    expression                     shift and go to state 231
    parenthesized-expression       shift and go to state 118

state 161

    (110) element-access -> member-access OPEN_BRACKET expression-list . CLOSE_BRACKET
    (84) expression-list -> expression-list . COMMA expression

    CLOSE_BRACKET   shift and go to state 232
    COMMA           shift and go to state 233


state 162

    (83) expression-list -> expression .

    CLOSE_BRACKET   reduce using rule 83 (expression-list -> expression .)
    COMMA           reduce using rule 83 (expression-list -> expression .)
    BLOCK_END       reduce using rule 83 (expression-list -> expression .)


state 163

    (101) invocation-expression -> member-access OPEN_PAREN argument-list-opt . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 234


state 164

    (104) argument-list -> argument .

    COMMA           reduce using rule 104 (argument-list -> argument .)
    CLOSE_PAREN     reduce using rule 104 (argument-list -> argument .)


state 165

    (103) argument-list-opt -> empty .

    CLOSE_PAREN     reduce using rule 103 (argument-list-opt -> empty .)


state 166

    (107) argument -> OUT . variable-reference
    (108) variable-reference -> . expression
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (119) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) unary-expression -> . pre-increment-expression
    (77) unary-expression -> . pre-decrement-expression
    (78) primary-expression -> . array-creation-expression
    (79) primary-expression -> . primary-no-array-creation-expression
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (80) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (90) primary-no-array-creation-expression -> . literal
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (94) primary-no-array-creation-expression -> . element-access
    (95) primary-no-array-creation-expression -> . post-increment-expression
    (96) primary-no-array-creation-expression -> . post-decrement-expression
    (97) primary-no-array-creation-expression -> . object-creation-expression
    (241) literal -> . ICONST
    (242) literal -> . DCONST
    (243) literal -> . TRUE
    (244) literal -> . FALSE
    (98) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 94
    PLUS            shift and go to state 93
    MINUS           shift and go to state 84
    BITNOT          shift and go to state 113
    BITCOMP         shift and go to state 88
    TIMES           shift and go to state 99
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    NEW             shift and go to state 82
    ICONST          shift and go to state 101
    DCONST          shift and go to state 114
    TRUE            shift and go to state 107
    FALSE           shift and go to state 105
    OPEN_PAREN      shift and go to state 96

    unary-expression               shift and go to state 103
    exclusive-or-expression        shift and go to state 78
    member-access                  shift and go to state 79
    relational-expression          shift and go to state 80
    additive-expression            shift and go to state 83
    primary-no-array-creation-expression shift and go to state 100
    inclusive-or-expression        shift and go to state 86
    prim-expression                shift and go to state 77
    element-access                 shift and go to state 89
    literal                        shift and go to state 98
    conditional-expression         shift and go to state 90
    conditional-and-expression     shift and go to state 91
    post-decrement-expression      shift and go to state 92
    array-creation-expression      shift and go to state 81
    assignment                     shift and go to state 97
    post-increment-expression      shift and go to state 85
    object-creation-expression     shift and go to state 102
    pre-increment-expression       shift and go to state 106
    equality-expression            shift and go to state 87
    shift-expression               shift and go to state 108
    and-expression                 shift and go to state 109
    pre-decrement-expression       shift and go to state 110
    multiplicative-expression      shift and go to state 111
    conditional-or-expression      shift and go to state 117
    primary-expression             shift and go to state 115
    invocation-expression          shift and go to state 116
    expression                     shift and go to state 235
    parenthesized-expression       shift and go to state 118
    variable-reference             shift and go to state 236

state 167

    (102) argument-list-opt -> argument-list .
    (105) argument-list -> argument-list . COMMA argument

    CLOSE_PAREN     reduce using rule 102 (argument-list-opt -> argument-list .)
    COMMA           shift and go to state 237


state 168

    (106) argument -> expression .

    COMMA           reduce using rule 106 (argument -> expression .)
    CLOSE_PAREN     reduce using rule 106 (argument -> expression .)


state 169

    (230) goto-statement -> GOTO IDENTIFIER DELIM .

    IDENTIFIER      reduce using rule 230 (goto-statement -> GOTO IDENTIFIER DELIM .)
    BLOCK_BEGIN     reduce using rule 230 (goto-statement -> GOTO IDENTIFIER DELIM .)
    DELIM           reduce using rule 230 (goto-statement -> GOTO IDENTIFIER DELIM .)
    CONSOLE         reduce using rule 230 (goto-statement -> GOTO IDENTIFIER DELIM .)
    CONST           reduce using rule 230 (goto-statement -> GOTO IDENTIFIER DELIM .)
    IF              reduce using rule 230 (goto-statement -> GOTO IDENTIFIER DELIM .)
    SWITCH          reduce using rule 230 (goto-statement -> GOTO IDENTIFIER DELIM .)
    WHILE           reduce using rule 230 (goto-statement -> GOTO IDENTIFIER DELIM .)
    FOR             reduce using rule 230 (goto-statement -> GOTO IDENTIFIER DELIM .)
    FOREACH         reduce using rule 230 (goto-statement -> GOTO IDENTIFIER DELIM .)
    DO              reduce using rule 230 (goto-statement -> GOTO IDENTIFIER DELIM .)
    BREAK           reduce using rule 230 (goto-statement -> GOTO IDENTIFIER DELIM .)
    CONTINUE        reduce using rule 230 (goto-statement -> GOTO IDENTIFIER DELIM .)
    GOTO            reduce using rule 230 (goto-statement -> GOTO IDENTIFIER DELIM .)
    RETURN          reduce using rule 230 (goto-statement -> GOTO IDENTIFIER DELIM .)
    NEW             reduce using rule 230 (goto-statement -> GOTO IDENTIFIER DELIM .)
    INCRE           reduce using rule 230 (goto-statement -> GOTO IDENTIFIER DELIM .)
    DECRE           reduce using rule 230 (goto-statement -> GOTO IDENTIFIER DELIM .)
    BOOL            reduce using rule 230 (goto-statement -> GOTO IDENTIFIER DELIM .)
    INT             reduce using rule 230 (goto-statement -> GOTO IDENTIFIER DELIM .)
    UINT            reduce using rule 230 (goto-statement -> GOTO IDENTIFIER DELIM .)
    CHAR            reduce using rule 230 (goto-statement -> GOTO IDENTIFIER DELIM .)
    DOUBLE          reduce using rule 230 (goto-statement -> GOTO IDENTIFIER DELIM .)
    CASE            reduce using rule 230 (goto-statement -> GOTO IDENTIFIER DELIM .)
    DEFAULT         reduce using rule 230 (goto-statement -> GOTO IDENTIFIER DELIM .)
    BLOCK_END       reduce using rule 230 (goto-statement -> GOTO IDENTIFIER DELIM .)
    $end            reduce using rule 230 (goto-statement -> GOTO IDENTIFIER DELIM .)


state 170

    (223) foreach-statement -> FOREACH OPEN_PAREN type . IDENTIFIER IN expression CLOSE_PAREN block

    IDENTIFIER      shift and go to state 238


state 171

    (49) exclusive-or-expression -> exclusive-or-expression BITXOR . and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) unary-expression -> . pre-increment-expression
    (77) unary-expression -> . pre-decrement-expression
    (78) primary-expression -> . array-creation-expression
    (79) primary-expression -> . primary-no-array-creation-expression
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (80) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (90) primary-no-array-creation-expression -> . literal
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (94) primary-no-array-creation-expression -> . element-access
    (95) primary-no-array-creation-expression -> . post-increment-expression
    (96) primary-no-array-creation-expression -> . post-decrement-expression
    (97) primary-no-array-creation-expression -> . object-creation-expression
    (241) literal -> . ICONST
    (242) literal -> . DCONST
    (243) literal -> . TRUE
    (244) literal -> . FALSE
    (98) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access

    PLUS            shift and go to state 93
    MINUS           shift and go to state 84
    BITNOT          shift and go to state 113
    BITCOMP         shift and go to state 88
    TIMES           shift and go to state 99
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    NEW             shift and go to state 82
    ICONST          shift and go to state 101
    DCONST          shift and go to state 114
    TRUE            shift and go to state 107
    FALSE           shift and go to state 105
    OPEN_PAREN      shift and go to state 96
    IDENTIFIER      shift and go to state 183

    unary-expression               shift and go to state 103
    member-access                  shift and go to state 180
    relational-expression          shift and go to state 80
    additive-expression            shift and go to state 83
    primary-no-array-creation-expression shift and go to state 100
    prim-expression                shift and go to state 181
    element-access                 shift and go to state 182
    literal                        shift and go to state 98
    post-decrement-expression      shift and go to state 92
    array-creation-expression      shift and go to state 81
    post-increment-expression      shift and go to state 85
    object-creation-expression     shift and go to state 102
    pre-increment-expression       shift and go to state 106
    equality-expression            shift and go to state 87
    shift-expression               shift and go to state 108
    and-expression                 shift and go to state 239
    pre-decrement-expression       shift and go to state 110
    multiplicative-expression      shift and go to state 111
    primary-expression             shift and go to state 115
    invocation-expression          shift and go to state 116
    parenthesized-expression       shift and go to state 118

state 172

    (58) relational-expression -> relational-expression LE . shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) unary-expression -> . pre-increment-expression
    (77) unary-expression -> . pre-decrement-expression
    (78) primary-expression -> . array-creation-expression
    (79) primary-expression -> . primary-no-array-creation-expression
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (80) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (90) primary-no-array-creation-expression -> . literal
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (94) primary-no-array-creation-expression -> . element-access
    (95) primary-no-array-creation-expression -> . post-increment-expression
    (96) primary-no-array-creation-expression -> . post-decrement-expression
    (97) primary-no-array-creation-expression -> . object-creation-expression
    (241) literal -> . ICONST
    (242) literal -> . DCONST
    (243) literal -> . TRUE
    (244) literal -> . FALSE
    (98) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access

    PLUS            shift and go to state 93
    MINUS           shift and go to state 84
    BITNOT          shift and go to state 113
    BITCOMP         shift and go to state 88
    TIMES           shift and go to state 99
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    NEW             shift and go to state 82
    ICONST          shift and go to state 101
    DCONST          shift and go to state 114
    TRUE            shift and go to state 107
    FALSE           shift and go to state 105
    OPEN_PAREN      shift and go to state 96
    IDENTIFIER      shift and go to state 183

    prim-expression                shift and go to state 181
    member-access                  shift and go to state 180
    additive-expression            shift and go to state 83
    primary-no-array-creation-expression shift and go to state 100
    post-increment-expression      shift and go to state 85
    element-access                 shift and go to state 182
    literal                        shift and go to state 98
    post-decrement-expression      shift and go to state 92
    array-creation-expression      shift and go to state 81
    object-creation-expression     shift and go to state 102
    unary-expression               shift and go to state 103
    pre-increment-expression       shift and go to state 106
    shift-expression               shift and go to state 240
    pre-decrement-expression       shift and go to state 110
    multiplicative-expression      shift and go to state 111
    primary-expression             shift and go to state 115
    invocation-expression          shift and go to state 116
    parenthesized-expression       shift and go to state 118

state 173

    (59) relational-expression -> relational-expression GE . shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) unary-expression -> . pre-increment-expression
    (77) unary-expression -> . pre-decrement-expression
    (78) primary-expression -> . array-creation-expression
    (79) primary-expression -> . primary-no-array-creation-expression
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (80) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (90) primary-no-array-creation-expression -> . literal
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (94) primary-no-array-creation-expression -> . element-access
    (95) primary-no-array-creation-expression -> . post-increment-expression
    (96) primary-no-array-creation-expression -> . post-decrement-expression
    (97) primary-no-array-creation-expression -> . object-creation-expression
    (241) literal -> . ICONST
    (242) literal -> . DCONST
    (243) literal -> . TRUE
    (244) literal -> . FALSE
    (98) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access

    PLUS            shift and go to state 93
    MINUS           shift and go to state 84
    BITNOT          shift and go to state 113
    BITCOMP         shift and go to state 88
    TIMES           shift and go to state 99
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    NEW             shift and go to state 82
    ICONST          shift and go to state 101
    DCONST          shift and go to state 114
    TRUE            shift and go to state 107
    FALSE           shift and go to state 105
    OPEN_PAREN      shift and go to state 96
    IDENTIFIER      shift and go to state 183

    prim-expression                shift and go to state 181
    member-access                  shift and go to state 180
    additive-expression            shift and go to state 83
    primary-no-array-creation-expression shift and go to state 100
    post-increment-expression      shift and go to state 85
    element-access                 shift and go to state 182
    literal                        shift and go to state 98
    post-decrement-expression      shift and go to state 92
    array-creation-expression      shift and go to state 81
    object-creation-expression     shift and go to state 102
    unary-expression               shift and go to state 103
    pre-increment-expression       shift and go to state 106
    shift-expression               shift and go to state 241
    pre-decrement-expression       shift and go to state 110
    multiplicative-expression      shift and go to state 111
    primary-expression             shift and go to state 115
    invocation-expression          shift and go to state 116
    parenthesized-expression       shift and go to state 118

state 174

    (56) relational-expression -> relational-expression LT . shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) unary-expression -> . pre-increment-expression
    (77) unary-expression -> . pre-decrement-expression
    (78) primary-expression -> . array-creation-expression
    (79) primary-expression -> . primary-no-array-creation-expression
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (80) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (90) primary-no-array-creation-expression -> . literal
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (94) primary-no-array-creation-expression -> . element-access
    (95) primary-no-array-creation-expression -> . post-increment-expression
    (96) primary-no-array-creation-expression -> . post-decrement-expression
    (97) primary-no-array-creation-expression -> . object-creation-expression
    (241) literal -> . ICONST
    (242) literal -> . DCONST
    (243) literal -> . TRUE
    (244) literal -> . FALSE
    (98) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access

    PLUS            shift and go to state 93
    MINUS           shift and go to state 84
    BITNOT          shift and go to state 113
    BITCOMP         shift and go to state 88
    TIMES           shift and go to state 99
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    NEW             shift and go to state 82
    ICONST          shift and go to state 101
    DCONST          shift and go to state 114
    TRUE            shift and go to state 107
    FALSE           shift and go to state 105
    OPEN_PAREN      shift and go to state 96
    IDENTIFIER      shift and go to state 183

    prim-expression                shift and go to state 181
    member-access                  shift and go to state 180
    additive-expression            shift and go to state 83
    primary-no-array-creation-expression shift and go to state 100
    post-increment-expression      shift and go to state 85
    element-access                 shift and go to state 182
    literal                        shift and go to state 98
    post-decrement-expression      shift and go to state 92
    array-creation-expression      shift and go to state 81
    object-creation-expression     shift and go to state 102
    unary-expression               shift and go to state 103
    pre-increment-expression       shift and go to state 106
    shift-expression               shift and go to state 242
    pre-decrement-expression       shift and go to state 110
    multiplicative-expression      shift and go to state 111
    primary-expression             shift and go to state 115
    invocation-expression          shift and go to state 116
    parenthesized-expression       shift and go to state 118

state 175

    (57) relational-expression -> relational-expression GT . shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) unary-expression -> . pre-increment-expression
    (77) unary-expression -> . pre-decrement-expression
    (78) primary-expression -> . array-creation-expression
    (79) primary-expression -> . primary-no-array-creation-expression
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (80) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (90) primary-no-array-creation-expression -> . literal
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (94) primary-no-array-creation-expression -> . element-access
    (95) primary-no-array-creation-expression -> . post-increment-expression
    (96) primary-no-array-creation-expression -> . post-decrement-expression
    (97) primary-no-array-creation-expression -> . object-creation-expression
    (241) literal -> . ICONST
    (242) literal -> . DCONST
    (243) literal -> . TRUE
    (244) literal -> . FALSE
    (98) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access

    PLUS            shift and go to state 93
    MINUS           shift and go to state 84
    BITNOT          shift and go to state 113
    BITCOMP         shift and go to state 88
    TIMES           shift and go to state 99
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    NEW             shift and go to state 82
    ICONST          shift and go to state 101
    DCONST          shift and go to state 114
    TRUE            shift and go to state 107
    FALSE           shift and go to state 105
    OPEN_PAREN      shift and go to state 96
    IDENTIFIER      shift and go to state 183

    prim-expression                shift and go to state 181
    member-access                  shift and go to state 180
    additive-expression            shift and go to state 83
    primary-no-array-creation-expression shift and go to state 100
    post-increment-expression      shift and go to state 85
    element-access                 shift and go to state 182
    literal                        shift and go to state 98
    post-decrement-expression      shift and go to state 92
    array-creation-expression      shift and go to state 81
    object-creation-expression     shift and go to state 102
    unary-expression               shift and go to state 103
    pre-increment-expression       shift and go to state 106
    shift-expression               shift and go to state 243
    pre-decrement-expression       shift and go to state 110
    multiplicative-expression      shift and go to state 111
    primary-expression             shift and go to state 115
    invocation-expression          shift and go to state 116
    parenthesized-expression       shift and go to state 118

state 176

    (80) array-creation-expression -> NEW simple-type . OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (26) type -> simple-type .
    (34) array-type -> simple-type . OPEN_BRACKET CLOSE_BRACKET

    OPEN_BRACKET    shift and go to state 244
    OPEN_PAREN      reduce using rule 26 (type -> simple-type .)


state 177

    (64) additive-expression -> additive-expression PLUS . multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) unary-expression -> . pre-increment-expression
    (77) unary-expression -> . pre-decrement-expression
    (78) primary-expression -> . array-creation-expression
    (79) primary-expression -> . primary-no-array-creation-expression
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (80) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (90) primary-no-array-creation-expression -> . literal
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (94) primary-no-array-creation-expression -> . element-access
    (95) primary-no-array-creation-expression -> . post-increment-expression
    (96) primary-no-array-creation-expression -> . post-decrement-expression
    (97) primary-no-array-creation-expression -> . object-creation-expression
    (241) literal -> . ICONST
    (242) literal -> . DCONST
    (243) literal -> . TRUE
    (244) literal -> . FALSE
    (98) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access

    PLUS            shift and go to state 93
    MINUS           shift and go to state 84
    BITNOT          shift and go to state 113
    BITCOMP         shift and go to state 88
    TIMES           shift and go to state 99
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    NEW             shift and go to state 82
    ICONST          shift and go to state 101
    DCONST          shift and go to state 114
    TRUE            shift and go to state 107
    FALSE           shift and go to state 105
    OPEN_PAREN      shift and go to state 96
    IDENTIFIER      shift and go to state 183

    unary-expression               shift and go to state 103
    member-access                  shift and go to state 180
    primary-no-array-creation-expression shift and go to state 100
    prim-expression                shift and go to state 181
    element-access                 shift and go to state 182
    literal                        shift and go to state 98
    post-decrement-expression      shift and go to state 92
    array-creation-expression      shift and go to state 81
    post-increment-expression      shift and go to state 85
    object-creation-expression     shift and go to state 102
    pre-increment-expression       shift and go to state 106
    pre-decrement-expression       shift and go to state 110
    multiplicative-expression      shift and go to state 245
    primary-expression             shift and go to state 115
    invocation-expression          shift and go to state 116
    parenthesized-expression       shift and go to state 118

state 178

    (65) additive-expression -> additive-expression MINUS . multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) unary-expression -> . pre-increment-expression
    (77) unary-expression -> . pre-decrement-expression
    (78) primary-expression -> . array-creation-expression
    (79) primary-expression -> . primary-no-array-creation-expression
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (80) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (90) primary-no-array-creation-expression -> . literal
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (94) primary-no-array-creation-expression -> . element-access
    (95) primary-no-array-creation-expression -> . post-increment-expression
    (96) primary-no-array-creation-expression -> . post-decrement-expression
    (97) primary-no-array-creation-expression -> . object-creation-expression
    (241) literal -> . ICONST
    (242) literal -> . DCONST
    (243) literal -> . TRUE
    (244) literal -> . FALSE
    (98) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access

    PLUS            shift and go to state 93
    MINUS           shift and go to state 84
    BITNOT          shift and go to state 113
    BITCOMP         shift and go to state 88
    TIMES           shift and go to state 99
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    NEW             shift and go to state 82
    ICONST          shift and go to state 101
    DCONST          shift and go to state 114
    TRUE            shift and go to state 107
    FALSE           shift and go to state 105
    OPEN_PAREN      shift and go to state 96
    IDENTIFIER      shift and go to state 183

    unary-expression               shift and go to state 103
    member-access                  shift and go to state 180
    primary-no-array-creation-expression shift and go to state 100
    prim-expression                shift and go to state 181
    element-access                 shift and go to state 182
    literal                        shift and go to state 98
    post-decrement-expression      shift and go to state 92
    array-creation-expression      shift and go to state 81
    post-increment-expression      shift and go to state 85
    object-creation-expression     shift and go to state 102
    pre-increment-expression       shift and go to state 106
    pre-decrement-expression       shift and go to state 110
    multiplicative-expression      shift and go to state 246
    primary-expression             shift and go to state 115
    invocation-expression          shift and go to state 116
    parenthesized-expression       shift and go to state 118

state 179

    (72) unary-expression -> MINUS unary-expression .

    TIMES           reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    DIV             reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    MOD             reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    PLUS            reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    MINUS           reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    LSHIFT          reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    RSHIFT          reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    LT              reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    GT              reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    LE              reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    GE              reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    EQ              reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    NE              reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    BITAND          reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    BITXOR          reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    BITOR           reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    LOGAND          reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    CONDOP          reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    LOGOR           reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    COMMA           reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    DELIM           reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    CLOSE_PAREN     reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    CLOSE_BRACKET   reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    COLON           reduce using rule 72 (unary-expression -> MINUS unary-expression .)
    BLOCK_END       reduce using rule 72 (unary-expression -> MINUS unary-expression .)


state 180

    (92) primary-no-array-creation-expression -> member-access .
    (101) invocation-expression -> member-access . OPEN_PAREN argument-list-opt CLOSE_PAREN
    (110) element-access -> member-access . OPEN_BRACKET expression-list CLOSE_BRACKET
    (112) prim-expression -> member-access .

    TIMES           reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    DIV             reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    MOD             reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    PLUS            reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    MINUS           reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    LSHIFT          reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    RSHIFT          reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    LT              reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    GT              reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    LE              reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    GE              reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    EQ              reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    NE              reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    BITAND          reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    BITXOR          reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    BITOR           reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    LOGAND          reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    CONDOP          reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    LOGOR           reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    DELIM           reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    CLOSE_BRACKET   reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    COMMA           reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    CLOSE_PAREN     reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    COLON           reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    BLOCK_END       reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    OPEN_PAREN      shift and go to state 70
    OPEN_BRACKET    shift and go to state 69
    DOT             reduce using rule 112 (prim-expression -> member-access .)
    INCRE           reduce using rule 112 (prim-expression -> member-access .)
    DECRE           reduce using rule 112 (prim-expression -> member-access .)


state 181

    (99) member-access -> prim-expression . DOT IDENTIFIER
    (114) post-increment-expression -> prim-expression . INCRE
    (115) post-decrement-expression -> prim-expression . DECRE

    DOT             shift and go to state 156
    INCRE           shift and go to state 151
    DECRE           shift and go to state 148


state 182

    (94) primary-no-array-creation-expression -> element-access .
    (113) prim-expression -> element-access .

    TIMES           reduce using rule 94 (primary-no-array-creation-expression -> element-access .)
    DIV             reduce using rule 94 (primary-no-array-creation-expression -> element-access .)
    MOD             reduce using rule 94 (primary-no-array-creation-expression -> element-access .)
    PLUS            reduce using rule 94 (primary-no-array-creation-expression -> element-access .)
    MINUS           reduce using rule 94 (primary-no-array-creation-expression -> element-access .)
    LSHIFT          reduce using rule 94 (primary-no-array-creation-expression -> element-access .)
    RSHIFT          reduce using rule 94 (primary-no-array-creation-expression -> element-access .)
    LT              reduce using rule 94 (primary-no-array-creation-expression -> element-access .)
    GT              reduce using rule 94 (primary-no-array-creation-expression -> element-access .)
    LE              reduce using rule 94 (primary-no-array-creation-expression -> element-access .)
    GE              reduce using rule 94 (primary-no-array-creation-expression -> element-access .)
    EQ              reduce using rule 94 (primary-no-array-creation-expression -> element-access .)
    NE              reduce using rule 94 (primary-no-array-creation-expression -> element-access .)
    BITAND          reduce using rule 94 (primary-no-array-creation-expression -> element-access .)
    BITXOR          reduce using rule 94 (primary-no-array-creation-expression -> element-access .)
    BITOR           reduce using rule 94 (primary-no-array-creation-expression -> element-access .)
    LOGAND          reduce using rule 94 (primary-no-array-creation-expression -> element-access .)
    CONDOP          reduce using rule 94 (primary-no-array-creation-expression -> element-access .)
    LOGOR           reduce using rule 94 (primary-no-array-creation-expression -> element-access .)
    DELIM           reduce using rule 94 (primary-no-array-creation-expression -> element-access .)
    CLOSE_BRACKET   reduce using rule 94 (primary-no-array-creation-expression -> element-access .)
    COMMA           reduce using rule 94 (primary-no-array-creation-expression -> element-access .)
    CLOSE_PAREN     reduce using rule 94 (primary-no-array-creation-expression -> element-access .)
    COLON           reduce using rule 94 (primary-no-array-creation-expression -> element-access .)
    BLOCK_END       reduce using rule 94 (primary-no-array-creation-expression -> element-access .)
    DOT             reduce using rule 113 (prim-expression -> element-access .)
    INCRE           reduce using rule 113 (prim-expression -> element-access .)
    DECRE           reduce using rule 113 (prim-expression -> element-access .)


state 183

    (100) invocation-expression -> IDENTIFIER . OPEN_PAREN argument-list-opt CLOSE_PAREN
    (109) element-access -> IDENTIFIER . OPEN_BRACKET expression-list CLOSE_BRACKET
    (111) prim-expression -> IDENTIFIER .

    OPEN_PAREN      shift and go to state 130
    OPEN_BRACKET    shift and go to state 129
    DOT             reduce using rule 111 (prim-expression -> IDENTIFIER .)
    INCRE           reduce using rule 111 (prim-expression -> IDENTIFIER .)
    DECRE           reduce using rule 111 (prim-expression -> IDENTIFIER .)


state 184

    (47) inclusive-or-expression -> inclusive-or-expression BITOR . exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) unary-expression -> . pre-increment-expression
    (77) unary-expression -> . pre-decrement-expression
    (78) primary-expression -> . array-creation-expression
    (79) primary-expression -> . primary-no-array-creation-expression
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (80) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (90) primary-no-array-creation-expression -> . literal
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (94) primary-no-array-creation-expression -> . element-access
    (95) primary-no-array-creation-expression -> . post-increment-expression
    (96) primary-no-array-creation-expression -> . post-decrement-expression
    (97) primary-no-array-creation-expression -> . object-creation-expression
    (241) literal -> . ICONST
    (242) literal -> . DCONST
    (243) literal -> . TRUE
    (244) literal -> . FALSE
    (98) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access

    PLUS            shift and go to state 93
    MINUS           shift and go to state 84
    BITNOT          shift and go to state 113
    BITCOMP         shift and go to state 88
    TIMES           shift and go to state 99
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    NEW             shift and go to state 82
    ICONST          shift and go to state 101
    DCONST          shift and go to state 114
    TRUE            shift and go to state 107
    FALSE           shift and go to state 105
    OPEN_PAREN      shift and go to state 96
    IDENTIFIER      shift and go to state 183

    unary-expression               shift and go to state 103
    exclusive-or-expression        shift and go to state 247
    member-access                  shift and go to state 180
    relational-expression          shift and go to state 80
    additive-expression            shift and go to state 83
    primary-no-array-creation-expression shift and go to state 100
    equality-expression            shift and go to state 87
    prim-expression                shift and go to state 181
    element-access                 shift and go to state 182
    literal                        shift and go to state 98
    post-decrement-expression      shift and go to state 92
    array-creation-expression      shift and go to state 81
    post-increment-expression      shift and go to state 85
    object-creation-expression     shift and go to state 102
    pre-increment-expression       shift and go to state 106
    shift-expression               shift and go to state 108
    and-expression                 shift and go to state 109
    pre-decrement-expression       shift and go to state 110
    multiplicative-expression      shift and go to state 111
    primary-expression             shift and go to state 115
    invocation-expression          shift and go to state 116
    parenthesized-expression       shift and go to state 118

state 185

    (53) equality-expression -> equality-expression EQ . relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) unary-expression -> . pre-increment-expression
    (77) unary-expression -> . pre-decrement-expression
    (78) primary-expression -> . array-creation-expression
    (79) primary-expression -> . primary-no-array-creation-expression
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (80) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (90) primary-no-array-creation-expression -> . literal
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (94) primary-no-array-creation-expression -> . element-access
    (95) primary-no-array-creation-expression -> . post-increment-expression
    (96) primary-no-array-creation-expression -> . post-decrement-expression
    (97) primary-no-array-creation-expression -> . object-creation-expression
    (241) literal -> . ICONST
    (242) literal -> . DCONST
    (243) literal -> . TRUE
    (244) literal -> . FALSE
    (98) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access

    PLUS            shift and go to state 93
    MINUS           shift and go to state 84
    BITNOT          shift and go to state 113
    BITCOMP         shift and go to state 88
    TIMES           shift and go to state 99
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    NEW             shift and go to state 82
    ICONST          shift and go to state 101
    DCONST          shift and go to state 114
    TRUE            shift and go to state 107
    FALSE           shift and go to state 105
    OPEN_PAREN      shift and go to state 96
    IDENTIFIER      shift and go to state 183

    prim-expression                shift and go to state 181
    member-access                  shift and go to state 180
    relational-expression          shift and go to state 248
    additive-expression            shift and go to state 83
    primary-no-array-creation-expression shift and go to state 100
    post-increment-expression      shift and go to state 85
    element-access                 shift and go to state 182
    literal                        shift and go to state 98
    post-decrement-expression      shift and go to state 92
    array-creation-expression      shift and go to state 81
    object-creation-expression     shift and go to state 102
    unary-expression               shift and go to state 103
    pre-increment-expression       shift and go to state 106
    shift-expression               shift and go to state 108
    pre-decrement-expression       shift and go to state 110
    multiplicative-expression      shift and go to state 111
    primary-expression             shift and go to state 115
    invocation-expression          shift and go to state 116
    parenthesized-expression       shift and go to state 118

state 186

    (54) equality-expression -> equality-expression NE . relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) unary-expression -> . pre-increment-expression
    (77) unary-expression -> . pre-decrement-expression
    (78) primary-expression -> . array-creation-expression
    (79) primary-expression -> . primary-no-array-creation-expression
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (80) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (90) primary-no-array-creation-expression -> . literal
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (94) primary-no-array-creation-expression -> . element-access
    (95) primary-no-array-creation-expression -> . post-increment-expression
    (96) primary-no-array-creation-expression -> . post-decrement-expression
    (97) primary-no-array-creation-expression -> . object-creation-expression
    (241) literal -> . ICONST
    (242) literal -> . DCONST
    (243) literal -> . TRUE
    (244) literal -> . FALSE
    (98) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access

    PLUS            shift and go to state 93
    MINUS           shift and go to state 84
    BITNOT          shift and go to state 113
    BITCOMP         shift and go to state 88
    TIMES           shift and go to state 99
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    NEW             shift and go to state 82
    ICONST          shift and go to state 101
    DCONST          shift and go to state 114
    TRUE            shift and go to state 107
    FALSE           shift and go to state 105
    OPEN_PAREN      shift and go to state 96
    IDENTIFIER      shift and go to state 183

    prim-expression                shift and go to state 181
    member-access                  shift and go to state 180
    relational-expression          shift and go to state 249
    additive-expression            shift and go to state 83
    primary-no-array-creation-expression shift and go to state 100
    post-increment-expression      shift and go to state 85
    element-access                 shift and go to state 182
    literal                        shift and go to state 98
    post-decrement-expression      shift and go to state 92
    array-creation-expression      shift and go to state 81
    object-creation-expression     shift and go to state 102
    unary-expression               shift and go to state 103
    pre-increment-expression       shift and go to state 106
    shift-expression               shift and go to state 108
    pre-decrement-expression       shift and go to state 110
    multiplicative-expression      shift and go to state 111
    primary-expression             shift and go to state 115
    invocation-expression          shift and go to state 116
    parenthesized-expression       shift and go to state 118

state 187

    (74) unary-expression -> BITCOMP unary-expression .

    TIMES           reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    DIV             reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    MOD             reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    PLUS            reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    MINUS           reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    LSHIFT          reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    RSHIFT          reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    LT              reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    GT              reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    LE              reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    GE              reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    EQ              reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    NE              reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    BITAND          reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    BITXOR          reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    BITOR           reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    LOGAND          reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    CONDOP          reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    LOGOR           reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    COMMA           reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    DELIM           reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    CLOSE_PAREN     reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    CLOSE_BRACKET   reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    COLON           reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)
    BLOCK_END       reduce using rule 74 (unary-expression -> BITCOMP unary-expression .)


state 188

    (45) conditional-and-expression -> conditional-and-expression LOGAND . inclusive-or-expression
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) unary-expression -> . pre-increment-expression
    (77) unary-expression -> . pre-decrement-expression
    (78) primary-expression -> . array-creation-expression
    (79) primary-expression -> . primary-no-array-creation-expression
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (80) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (90) primary-no-array-creation-expression -> . literal
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (94) primary-no-array-creation-expression -> . element-access
    (95) primary-no-array-creation-expression -> . post-increment-expression
    (96) primary-no-array-creation-expression -> . post-decrement-expression
    (97) primary-no-array-creation-expression -> . object-creation-expression
    (241) literal -> . ICONST
    (242) literal -> . DCONST
    (243) literal -> . TRUE
    (244) literal -> . FALSE
    (98) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access

    PLUS            shift and go to state 93
    MINUS           shift and go to state 84
    BITNOT          shift and go to state 113
    BITCOMP         shift and go to state 88
    TIMES           shift and go to state 99
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    NEW             shift and go to state 82
    ICONST          shift and go to state 101
    DCONST          shift and go to state 114
    TRUE            shift and go to state 107
    FALSE           shift and go to state 105
    OPEN_PAREN      shift and go to state 96
    IDENTIFIER      shift and go to state 183

    unary-expression               shift and go to state 103
    exclusive-or-expression        shift and go to state 78
    member-access                  shift and go to state 180
    relational-expression          shift and go to state 80
    additive-expression            shift and go to state 83
    primary-no-array-creation-expression shift and go to state 100
    inclusive-or-expression        shift and go to state 250
    equality-expression            shift and go to state 87
    prim-expression                shift and go to state 181
    element-access                 shift and go to state 182
    literal                        shift and go to state 98
    post-decrement-expression      shift and go to state 92
    array-creation-expression      shift and go to state 81
    post-increment-expression      shift and go to state 85
    object-creation-expression     shift and go to state 102
    pre-increment-expression       shift and go to state 106
    shift-expression               shift and go to state 108
    and-expression                 shift and go to state 109
    pre-decrement-expression       shift and go to state 110
    multiplicative-expression      shift and go to state 111
    primary-expression             shift and go to state 115
    invocation-expression          shift and go to state 116
    parenthesized-expression       shift and go to state 118

state 189

    (71) unary-expression -> PLUS unary-expression .

    TIMES           reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    DIV             reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    MOD             reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    PLUS            reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    MINUS           reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    LSHIFT          reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    RSHIFT          reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    LT              reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    GT              reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    LE              reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    GE              reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    EQ              reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    NE              reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    BITAND          reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    BITXOR          reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    BITOR           reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    LOGAND          reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    CONDOP          reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    LOGOR           reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    COMMA           reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    DELIM           reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    CLOSE_PAREN     reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    CLOSE_BRACKET   reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    COLON           reduce using rule 71 (unary-expression -> PLUS unary-expression .)
    BLOCK_END       reduce using rule 71 (unary-expression -> PLUS unary-expression .)


state 190

    (98) parenthesized-expression -> OPEN_PAREN expression . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 251


state 191

    (75) unary-expression -> TIMES unary-expression .

    TIMES           reduce using rule 75 (unary-expression -> TIMES unary-expression .)
    DIV             reduce using rule 75 (unary-expression -> TIMES unary-expression .)
    MOD             reduce using rule 75 (unary-expression -> TIMES unary-expression .)
    PLUS            reduce using rule 75 (unary-expression -> TIMES unary-expression .)
    MINUS           reduce using rule 75 (unary-expression -> TIMES unary-expression .)
    LSHIFT          reduce using rule 75 (unary-expression -> TIMES unary-expression .)
    RSHIFT          reduce using rule 75 (unary-expression -> TIMES unary-expression .)
    LT              reduce using rule 75 (unary-expression -> TIMES unary-expression .)
    GT              reduce using rule 75 (unary-expression -> TIMES unary-expression .)
    LE              reduce using rule 75 (unary-expression -> TIMES unary-expression .)
    GE              reduce using rule 75 (unary-expression -> TIMES unary-expression .)
    EQ              reduce using rule 75 (unary-expression -> TIMES unary-expression .)
    NE              reduce using rule 75 (unary-expression -> TIMES unary-expression .)
    BITAND          reduce using rule 75 (unary-expression -> TIMES unary-expression .)
    BITXOR          reduce using rule 75 (unary-expression -> TIMES unary-expression .)
    BITOR           reduce using rule 75 (unary-expression -> TIMES unary-expression .)
    LOGAND          reduce using rule 75 (unary-expression -> TIMES unary-expression .)
    CONDOP          reduce using rule 75 (unary-expression -> TIMES unary-expression .)
    LOGOR           reduce using rule 75 (unary-expression -> TIMES unary-expression .)
    COMMA           reduce using rule 75 (unary-expression -> TIMES unary-expression .)
    DELIM           reduce using rule 75 (unary-expression -> TIMES unary-expression .)
    CLOSE_PAREN     reduce using rule 75 (unary-expression -> TIMES unary-expression .)
    CLOSE_BRACKET   reduce using rule 75 (unary-expression -> TIMES unary-expression .)
    COLON           reduce using rule 75 (unary-expression -> TIMES unary-expression .)
    BLOCK_END       reduce using rule 75 (unary-expression -> TIMES unary-expression .)


state 192

    (231) return-statement -> RETURN expression-opt DELIM .

    IDENTIFIER      reduce using rule 231 (return-statement -> RETURN expression-opt DELIM .)
    BLOCK_BEGIN     reduce using rule 231 (return-statement -> RETURN expression-opt DELIM .)
    DELIM           reduce using rule 231 (return-statement -> RETURN expression-opt DELIM .)
    CONSOLE         reduce using rule 231 (return-statement -> RETURN expression-opt DELIM .)
    CONST           reduce using rule 231 (return-statement -> RETURN expression-opt DELIM .)
    IF              reduce using rule 231 (return-statement -> RETURN expression-opt DELIM .)
    SWITCH          reduce using rule 231 (return-statement -> RETURN expression-opt DELIM .)
    WHILE           reduce using rule 231 (return-statement -> RETURN expression-opt DELIM .)
    FOR             reduce using rule 231 (return-statement -> RETURN expression-opt DELIM .)
    FOREACH         reduce using rule 231 (return-statement -> RETURN expression-opt DELIM .)
    DO              reduce using rule 231 (return-statement -> RETURN expression-opt DELIM .)
    BREAK           reduce using rule 231 (return-statement -> RETURN expression-opt DELIM .)
    CONTINUE        reduce using rule 231 (return-statement -> RETURN expression-opt DELIM .)
    GOTO            reduce using rule 231 (return-statement -> RETURN expression-opt DELIM .)
    RETURN          reduce using rule 231 (return-statement -> RETURN expression-opt DELIM .)
    NEW             reduce using rule 231 (return-statement -> RETURN expression-opt DELIM .)
    INCRE           reduce using rule 231 (return-statement -> RETURN expression-opt DELIM .)
    DECRE           reduce using rule 231 (return-statement -> RETURN expression-opt DELIM .)
    BOOL            reduce using rule 231 (return-statement -> RETURN expression-opt DELIM .)
    INT             reduce using rule 231 (return-statement -> RETURN expression-opt DELIM .)
    UINT            reduce using rule 231 (return-statement -> RETURN expression-opt DELIM .)
    CHAR            reduce using rule 231 (return-statement -> RETURN expression-opt DELIM .)
    DOUBLE          reduce using rule 231 (return-statement -> RETURN expression-opt DELIM .)
    $end            reduce using rule 231 (return-statement -> RETURN expression-opt DELIM .)
    CASE            reduce using rule 231 (return-statement -> RETURN expression-opt DELIM .)
    DEFAULT         reduce using rule 231 (return-statement -> RETURN expression-opt DELIM .)
    BLOCK_END       reduce using rule 231 (return-statement -> RETURN expression-opt DELIM .)


state 193

    (62) shift-expression -> shift-expression RSHIFT . additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) unary-expression -> . pre-increment-expression
    (77) unary-expression -> . pre-decrement-expression
    (78) primary-expression -> . array-creation-expression
    (79) primary-expression -> . primary-no-array-creation-expression
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (80) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (90) primary-no-array-creation-expression -> . literal
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (94) primary-no-array-creation-expression -> . element-access
    (95) primary-no-array-creation-expression -> . post-increment-expression
    (96) primary-no-array-creation-expression -> . post-decrement-expression
    (97) primary-no-array-creation-expression -> . object-creation-expression
    (241) literal -> . ICONST
    (242) literal -> . DCONST
    (243) literal -> . TRUE
    (244) literal -> . FALSE
    (98) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access

    PLUS            shift and go to state 93
    MINUS           shift and go to state 84
    BITNOT          shift and go to state 113
    BITCOMP         shift and go to state 88
    TIMES           shift and go to state 99
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    NEW             shift and go to state 82
    ICONST          shift and go to state 101
    DCONST          shift and go to state 114
    TRUE            shift and go to state 107
    FALSE           shift and go to state 105
    OPEN_PAREN      shift and go to state 96
    IDENTIFIER      shift and go to state 183

    unary-expression               shift and go to state 103
    member-access                  shift and go to state 180
    additive-expression            shift and go to state 252
    primary-no-array-creation-expression shift and go to state 100
    prim-expression                shift and go to state 181
    element-access                 shift and go to state 182
    literal                        shift and go to state 98
    post-decrement-expression      shift and go to state 92
    array-creation-expression      shift and go to state 81
    post-increment-expression      shift and go to state 85
    object-creation-expression     shift and go to state 102
    pre-increment-expression       shift and go to state 106
    pre-decrement-expression       shift and go to state 110
    multiplicative-expression      shift and go to state 111
    primary-expression             shift and go to state 115
    invocation-expression          shift and go to state 116
    parenthesized-expression       shift and go to state 118

state 194

    (61) shift-expression -> shift-expression LSHIFT . additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) unary-expression -> . pre-increment-expression
    (77) unary-expression -> . pre-decrement-expression
    (78) primary-expression -> . array-creation-expression
    (79) primary-expression -> . primary-no-array-creation-expression
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (80) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (90) primary-no-array-creation-expression -> . literal
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (94) primary-no-array-creation-expression -> . element-access
    (95) primary-no-array-creation-expression -> . post-increment-expression
    (96) primary-no-array-creation-expression -> . post-decrement-expression
    (97) primary-no-array-creation-expression -> . object-creation-expression
    (241) literal -> . ICONST
    (242) literal -> . DCONST
    (243) literal -> . TRUE
    (244) literal -> . FALSE
    (98) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access

    PLUS            shift and go to state 93
    MINUS           shift and go to state 84
    BITNOT          shift and go to state 113
    BITCOMP         shift and go to state 88
    TIMES           shift and go to state 99
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    NEW             shift and go to state 82
    ICONST          shift and go to state 101
    DCONST          shift and go to state 114
    TRUE            shift and go to state 107
    FALSE           shift and go to state 105
    OPEN_PAREN      shift and go to state 96
    IDENTIFIER      shift and go to state 183

    unary-expression               shift and go to state 103
    member-access                  shift and go to state 180
    additive-expression            shift and go to state 253
    primary-no-array-creation-expression shift and go to state 100
    prim-expression                shift and go to state 181
    element-access                 shift and go to state 182
    literal                        shift and go to state 98
    post-decrement-expression      shift and go to state 92
    array-creation-expression      shift and go to state 81
    post-increment-expression      shift and go to state 85
    object-creation-expression     shift and go to state 102
    pre-increment-expression       shift and go to state 106
    pre-decrement-expression       shift and go to state 110
    multiplicative-expression      shift and go to state 111
    primary-expression             shift and go to state 115
    invocation-expression          shift and go to state 116
    parenthesized-expression       shift and go to state 118

state 195

    (51) and-expression -> and-expression BITAND . equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) unary-expression -> . pre-increment-expression
    (77) unary-expression -> . pre-decrement-expression
    (78) primary-expression -> . array-creation-expression
    (79) primary-expression -> . primary-no-array-creation-expression
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (80) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (90) primary-no-array-creation-expression -> . literal
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (94) primary-no-array-creation-expression -> . element-access
    (95) primary-no-array-creation-expression -> . post-increment-expression
    (96) primary-no-array-creation-expression -> . post-decrement-expression
    (97) primary-no-array-creation-expression -> . object-creation-expression
    (241) literal -> . ICONST
    (242) literal -> . DCONST
    (243) literal -> . TRUE
    (244) literal -> . FALSE
    (98) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access

    PLUS            shift and go to state 93
    MINUS           shift and go to state 84
    BITNOT          shift and go to state 113
    BITCOMP         shift and go to state 88
    TIMES           shift and go to state 99
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    NEW             shift and go to state 82
    ICONST          shift and go to state 101
    DCONST          shift and go to state 114
    TRUE            shift and go to state 107
    FALSE           shift and go to state 105
    OPEN_PAREN      shift and go to state 96
    IDENTIFIER      shift and go to state 183

    prim-expression                shift and go to state 181
    member-access                  shift and go to state 180
    relational-expression          shift and go to state 80
    additive-expression            shift and go to state 83
    primary-no-array-creation-expression shift and go to state 100
    equality-expression            shift and go to state 254
    post-increment-expression      shift and go to state 85
    element-access                 shift and go to state 182
    literal                        shift and go to state 98
    post-decrement-expression      shift and go to state 92
    array-creation-expression      shift and go to state 81
    object-creation-expression     shift and go to state 102
    unary-expression               shift and go to state 103
    pre-increment-expression       shift and go to state 106
    shift-expression               shift and go to state 108
    pre-decrement-expression       shift and go to state 110
    multiplicative-expression      shift and go to state 111
    primary-expression             shift and go to state 115
    invocation-expression          shift and go to state 116
    parenthesized-expression       shift and go to state 118

state 196

    (68) multiplicative-expression -> multiplicative-expression DIV . unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) unary-expression -> . pre-increment-expression
    (77) unary-expression -> . pre-decrement-expression
    (78) primary-expression -> . array-creation-expression
    (79) primary-expression -> . primary-no-array-creation-expression
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (80) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (90) primary-no-array-creation-expression -> . literal
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (94) primary-no-array-creation-expression -> . element-access
    (95) primary-no-array-creation-expression -> . post-increment-expression
    (96) primary-no-array-creation-expression -> . post-decrement-expression
    (97) primary-no-array-creation-expression -> . object-creation-expression
    (241) literal -> . ICONST
    (242) literal -> . DCONST
    (243) literal -> . TRUE
    (244) literal -> . FALSE
    (98) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access

    PLUS            shift and go to state 93
    MINUS           shift and go to state 84
    BITNOT          shift and go to state 113
    BITCOMP         shift and go to state 88
    TIMES           shift and go to state 99
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    NEW             shift and go to state 82
    ICONST          shift and go to state 101
    DCONST          shift and go to state 114
    TRUE            shift and go to state 107
    FALSE           shift and go to state 105
    OPEN_PAREN      shift and go to state 96
    IDENTIFIER      shift and go to state 183

    unary-expression               shift and go to state 255
    member-access                  shift and go to state 180
    primary-no-array-creation-expression shift and go to state 100
    prim-expression                shift and go to state 181
    element-access                 shift and go to state 182
    literal                        shift and go to state 98
    post-decrement-expression      shift and go to state 92
    array-creation-expression      shift and go to state 81
    post-increment-expression      shift and go to state 85
    object-creation-expression     shift and go to state 102
    pre-increment-expression       shift and go to state 106
    pre-decrement-expression       shift and go to state 110
    primary-expression             shift and go to state 115
    invocation-expression          shift and go to state 116
    parenthesized-expression       shift and go to state 118

state 197

    (69) multiplicative-expression -> multiplicative-expression MOD . unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) unary-expression -> . pre-increment-expression
    (77) unary-expression -> . pre-decrement-expression
    (78) primary-expression -> . array-creation-expression
    (79) primary-expression -> . primary-no-array-creation-expression
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (80) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (90) primary-no-array-creation-expression -> . literal
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (94) primary-no-array-creation-expression -> . element-access
    (95) primary-no-array-creation-expression -> . post-increment-expression
    (96) primary-no-array-creation-expression -> . post-decrement-expression
    (97) primary-no-array-creation-expression -> . object-creation-expression
    (241) literal -> . ICONST
    (242) literal -> . DCONST
    (243) literal -> . TRUE
    (244) literal -> . FALSE
    (98) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access

    PLUS            shift and go to state 93
    MINUS           shift and go to state 84
    BITNOT          shift and go to state 113
    BITCOMP         shift and go to state 88
    TIMES           shift and go to state 99
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    NEW             shift and go to state 82
    ICONST          shift and go to state 101
    DCONST          shift and go to state 114
    TRUE            shift and go to state 107
    FALSE           shift and go to state 105
    OPEN_PAREN      shift and go to state 96
    IDENTIFIER      shift and go to state 183

    unary-expression               shift and go to state 256
    member-access                  shift and go to state 180
    primary-no-array-creation-expression shift and go to state 100
    prim-expression                shift and go to state 181
    element-access                 shift and go to state 182
    literal                        shift and go to state 98
    post-decrement-expression      shift and go to state 92
    array-creation-expression      shift and go to state 81
    post-increment-expression      shift and go to state 85
    object-creation-expression     shift and go to state 102
    pre-increment-expression       shift and go to state 106
    pre-decrement-expression       shift and go to state 110
    primary-expression             shift and go to state 115
    invocation-expression          shift and go to state 116
    parenthesized-expression       shift and go to state 118

state 198

    (67) multiplicative-expression -> multiplicative-expression TIMES . unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) unary-expression -> . pre-increment-expression
    (77) unary-expression -> . pre-decrement-expression
    (78) primary-expression -> . array-creation-expression
    (79) primary-expression -> . primary-no-array-creation-expression
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (80) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (90) primary-no-array-creation-expression -> . literal
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (94) primary-no-array-creation-expression -> . element-access
    (95) primary-no-array-creation-expression -> . post-increment-expression
    (96) primary-no-array-creation-expression -> . post-decrement-expression
    (97) primary-no-array-creation-expression -> . object-creation-expression
    (241) literal -> . ICONST
    (242) literal -> . DCONST
    (243) literal -> . TRUE
    (244) literal -> . FALSE
    (98) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access

    PLUS            shift and go to state 93
    MINUS           shift and go to state 84
    BITNOT          shift and go to state 113
    BITCOMP         shift and go to state 88
    TIMES           shift and go to state 99
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    NEW             shift and go to state 82
    ICONST          shift and go to state 101
    DCONST          shift and go to state 114
    TRUE            shift and go to state 107
    FALSE           shift and go to state 105
    OPEN_PAREN      shift and go to state 96
    IDENTIFIER      shift and go to state 183

    unary-expression               shift and go to state 257
    member-access                  shift and go to state 180
    primary-no-array-creation-expression shift and go to state 100
    prim-expression                shift and go to state 181
    element-access                 shift and go to state 182
    literal                        shift and go to state 98
    post-decrement-expression      shift and go to state 92
    array-creation-expression      shift and go to state 81
    post-increment-expression      shift and go to state 85
    object-creation-expression     shift and go to state 102
    pre-increment-expression       shift and go to state 106
    pre-decrement-expression       shift and go to state 110
    primary-expression             shift and go to state 115
    invocation-expression          shift and go to state 116
    parenthesized-expression       shift and go to state 118

state 199

    (73) unary-expression -> BITNOT unary-expression .

    TIMES           reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    DIV             reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    MOD             reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    PLUS            reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    MINUS           reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    LSHIFT          reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    RSHIFT          reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    LT              reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    GT              reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    LE              reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    GE              reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    EQ              reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    NE              reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    BITAND          reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    BITXOR          reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    BITOR           reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    LOGAND          reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    CONDOP          reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    LOGOR           reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    COMMA           reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    DELIM           reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    CLOSE_PAREN     reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    CLOSE_BRACKET   reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    COLON           reduce using rule 73 (unary-expression -> BITNOT unary-expression .)
    BLOCK_END       reduce using rule 73 (unary-expression -> BITNOT unary-expression .)


state 200

    (43) conditional-or-expression -> conditional-or-expression LOGOR . conditional-and-expression
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) unary-expression -> . pre-increment-expression
    (77) unary-expression -> . pre-decrement-expression
    (78) primary-expression -> . array-creation-expression
    (79) primary-expression -> . primary-no-array-creation-expression
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (80) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (90) primary-no-array-creation-expression -> . literal
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (94) primary-no-array-creation-expression -> . element-access
    (95) primary-no-array-creation-expression -> . post-increment-expression
    (96) primary-no-array-creation-expression -> . post-decrement-expression
    (97) primary-no-array-creation-expression -> . object-creation-expression
    (241) literal -> . ICONST
    (242) literal -> . DCONST
    (243) literal -> . TRUE
    (244) literal -> . FALSE
    (98) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access

    PLUS            shift and go to state 93
    MINUS           shift and go to state 84
    BITNOT          shift and go to state 113
    BITCOMP         shift and go to state 88
    TIMES           shift and go to state 99
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    NEW             shift and go to state 82
    ICONST          shift and go to state 101
    DCONST          shift and go to state 114
    TRUE            shift and go to state 107
    FALSE           shift and go to state 105
    OPEN_PAREN      shift and go to state 96
    IDENTIFIER      shift and go to state 183

    unary-expression               shift and go to state 103
    exclusive-or-expression        shift and go to state 78
    member-access                  shift and go to state 180
    relational-expression          shift and go to state 80
    additive-expression            shift and go to state 83
    primary-no-array-creation-expression shift and go to state 100
    inclusive-or-expression        shift and go to state 86
    prim-expression                shift and go to state 181
    element-access                 shift and go to state 182
    literal                        shift and go to state 98
    post-decrement-expression      shift and go to state 92
    array-creation-expression      shift and go to state 81
    conditional-and-expression     shift and go to state 258
    post-increment-expression      shift and go to state 85
    object-creation-expression     shift and go to state 102
    pre-increment-expression       shift and go to state 106
    equality-expression            shift and go to state 87
    shift-expression               shift and go to state 108
    and-expression                 shift and go to state 109
    pre-decrement-expression       shift and go to state 110
    multiplicative-expression      shift and go to state 111
    primary-expression             shift and go to state 115
    invocation-expression          shift and go to state 116
    parenthesized-expression       shift and go to state 118

state 201

    (41) conditional-expression -> conditional-or-expression CONDOP . expression COLON expression
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (119) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) unary-expression -> . pre-increment-expression
    (77) unary-expression -> . pre-decrement-expression
    (78) primary-expression -> . array-creation-expression
    (79) primary-expression -> . primary-no-array-creation-expression
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (80) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (90) primary-no-array-creation-expression -> . literal
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (94) primary-no-array-creation-expression -> . element-access
    (95) primary-no-array-creation-expression -> . post-increment-expression
    (96) primary-no-array-creation-expression -> . post-decrement-expression
    (97) primary-no-array-creation-expression -> . object-creation-expression
    (241) literal -> . ICONST
    (242) literal -> . DCONST
    (243) literal -> . TRUE
    (244) literal -> . FALSE
    (98) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 94
    PLUS            shift and go to state 93
    MINUS           shift and go to state 84
    BITNOT          shift and go to state 113
    BITCOMP         shift and go to state 88
    TIMES           shift and go to state 99
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    NEW             shift and go to state 82
    ICONST          shift and go to state 101
    DCONST          shift and go to state 114
    TRUE            shift and go to state 107
    FALSE           shift and go to state 105
    OPEN_PAREN      shift and go to state 96

    unary-expression               shift and go to state 103
    exclusive-or-expression        shift and go to state 78
    member-access                  shift and go to state 79
    relational-expression          shift and go to state 80
    additive-expression            shift and go to state 83
    primary-no-array-creation-expression shift and go to state 100
    inclusive-or-expression        shift and go to state 86
    prim-expression                shift and go to state 77
    element-access                 shift and go to state 89
    literal                        shift and go to state 98
    conditional-expression         shift and go to state 90
    conditional-and-expression     shift and go to state 91
    post-decrement-expression      shift and go to state 92
    array-creation-expression      shift and go to state 81
    assignment                     shift and go to state 97
    post-increment-expression      shift and go to state 85
    object-creation-expression     shift and go to state 102
    pre-increment-expression       shift and go to state 106
    equality-expression            shift and go to state 87
    shift-expression               shift and go to state 108
    and-expression                 shift and go to state 109
    pre-decrement-expression       shift and go to state 110
    multiplicative-expression      shift and go to state 111
    expression                     shift and go to state 259
    primary-expression             shift and go to state 115
    invocation-expression          shift and go to state 116
    conditional-or-expression      shift and go to state 117
    parenthesized-expression       shift and go to state 118

state 202

    (211) for-initializer-opt -> for-initializer .

    DELIM           reduce using rule 211 (for-initializer-opt -> for-initializer .)


state 203

    (221) statement-expression-list -> statement-expression .

    COMMA           reduce using rule 221 (statement-expression-list -> statement-expression .)
    DELIM           reduce using rule 221 (statement-expression-list -> statement-expression .)
    CLOSE_PAREN     reduce using rule 221 (statement-expression-list -> statement-expression .)


state 204

    (214) for-initializer -> statement-expression-list .
    (222) statement-expression-list -> statement-expression-list . COMMA statement-expression

    DELIM           reduce using rule 214 (for-initializer -> statement-expression-list .)
    COMMA           shift and go to state 260


state 205

    (13) class-type -> IDENTIFIER .
    (100) invocation-expression -> IDENTIFIER . OPEN_PAREN argument-list-opt CLOSE_PAREN
    (111) prim-expression -> IDENTIFIER .
    (109) element-access -> IDENTIFIER . OPEN_BRACKET expression-list CLOSE_BRACKET

    IDENTIFIER      reduce using rule 13 (class-type -> IDENTIFIER .)
    OPEN_PAREN      shift and go to state 130
    INCRE           reduce using rule 111 (prim-expression -> IDENTIFIER .)
    DECRE           reduce using rule 111 (prim-expression -> IDENTIFIER .)
    DOT             reduce using rule 111 (prim-expression -> IDENTIFIER .)
    ASSIGN          reduce using rule 111 (prim-expression -> IDENTIFIER .)
    PLUSEQUAL       reduce using rule 111 (prim-expression -> IDENTIFIER .)
    MINUSEQUAL      reduce using rule 111 (prim-expression -> IDENTIFIER .)
    TIMESEQUAL      reduce using rule 111 (prim-expression -> IDENTIFIER .)
    DIVEQUAL        reduce using rule 111 (prim-expression -> IDENTIFIER .)
    MODEQUAL        reduce using rule 111 (prim-expression -> IDENTIFIER .)
    BITANDEQUAL     reduce using rule 111 (prim-expression -> IDENTIFIER .)
    BITOREQUAL      reduce using rule 111 (prim-expression -> IDENTIFIER .)
    BITXOREQUAL     reduce using rule 111 (prim-expression -> IDENTIFIER .)
    LSHIFTEQUAL     reduce using rule 111 (prim-expression -> IDENTIFIER .)
    RSHIFTEQUAL     reduce using rule 111 (prim-expression -> IDENTIFIER .)
    OPEN_BRACKET    shift and go to state 129


state 206

    (212) for-initializer-opt -> empty .

    DELIM           reduce using rule 212 (for-initializer-opt -> empty .)


state 207

    (213) for-initializer -> local-variable-declaration .

    DELIM           reduce using rule 213 (for-initializer -> local-variable-declaration .)


state 208

    (210) for-statement -> FOR OPEN_PAREN for-initializer-opt . DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN block

    DELIM           shift and go to state 261


state 209

    (208) while-statement -> WHILE OPEN_PAREN expression . CLOSE_PAREN block

    CLOSE_PAREN     shift and go to state 262


state 210

    (116) object-creation-expression -> NEW type OPEN_PAREN . argument-list-opt CLOSE_PAREN
    (102) argument-list-opt -> . argument-list
    (103) argument-list-opt -> . empty
    (104) argument-list -> . argument
    (105) argument-list -> . argument-list COMMA argument
    (245) empty -> .
    (106) argument -> . expression
    (107) argument -> . OUT variable-reference
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (119) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) unary-expression -> . pre-increment-expression
    (77) unary-expression -> . pre-decrement-expression
    (78) primary-expression -> . array-creation-expression
    (79) primary-expression -> . primary-no-array-creation-expression
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (80) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (90) primary-no-array-creation-expression -> . literal
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (94) primary-no-array-creation-expression -> . element-access
    (95) primary-no-array-creation-expression -> . post-increment-expression
    (96) primary-no-array-creation-expression -> . post-decrement-expression
    (97) primary-no-array-creation-expression -> . object-creation-expression
    (241) literal -> . ICONST
    (242) literal -> . DCONST
    (243) literal -> . TRUE
    (244) literal -> . FALSE
    (98) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    CLOSE_PAREN     reduce using rule 245 (empty -> .)
    OUT             shift and go to state 166
    IDENTIFIER      shift and go to state 94
    PLUS            shift and go to state 93
    MINUS           shift and go to state 84
    BITNOT          shift and go to state 113
    BITCOMP         shift and go to state 88
    TIMES           shift and go to state 99
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    NEW             shift and go to state 82
    ICONST          shift and go to state 101
    DCONST          shift and go to state 114
    TRUE            shift and go to state 107
    FALSE           shift and go to state 105
    OPEN_PAREN      shift and go to state 96

    argument-list-opt              shift and go to state 263
    unary-expression               shift and go to state 103
    exclusive-or-expression        shift and go to state 78
    member-access                  shift and go to state 79
    argument                       shift and go to state 164
    relational-expression          shift and go to state 80
    additive-expression            shift and go to state 83
    primary-no-array-creation-expression shift and go to state 100
    inclusive-or-expression        shift and go to state 86
    equality-expression            shift and go to state 87
    prim-expression                shift and go to state 77
    element-access                 shift and go to state 89
    literal                        shift and go to state 98
    conditional-expression         shift and go to state 90
    assignment                     shift and go to state 97
    post-decrement-expression      shift and go to state 92
    argument-list                  shift and go to state 167
    empty                          shift and go to state 165
    array-creation-expression      shift and go to state 81
    conditional-and-expression     shift and go to state 91
    post-increment-expression      shift and go to state 85
    object-creation-expression     shift and go to state 102
    pre-increment-expression       shift and go to state 106
    shift-expression               shift and go to state 108
    and-expression                 shift and go to state 109
    pre-decrement-expression       shift and go to state 110
    multiplicative-expression      shift and go to state 111
    expression                     shift and go to state 168
    primary-expression             shift and go to state 115
    invocation-expression          shift and go to state 116
    conditional-or-expression      shift and go to state 117
    parenthesized-expression       shift and go to state 118

state 211

    (193) switch-statement -> SWITCH OPEN_PAREN expression . CLOSE_PAREN switch-block

    CLOSE_PAREN     shift and go to state 264


state 212

    (109) element-access -> IDENTIFIER OPEN_BRACKET expression-list . CLOSE_BRACKET
    (84) expression-list -> expression-list . COMMA expression

    CLOSE_BRACKET   shift and go to state 265
    COMMA           shift and go to state 233


state 213

    (100) invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 266


state 214

    (175) labeled-statement -> IDENTIFIER COLON statement .

    IDENTIFIER      reduce using rule 175 (labeled-statement -> IDENTIFIER COLON statement .)
    BLOCK_BEGIN     reduce using rule 175 (labeled-statement -> IDENTIFIER COLON statement .)
    DELIM           reduce using rule 175 (labeled-statement -> IDENTIFIER COLON statement .)
    CONSOLE         reduce using rule 175 (labeled-statement -> IDENTIFIER COLON statement .)
    CONST           reduce using rule 175 (labeled-statement -> IDENTIFIER COLON statement .)
    IF              reduce using rule 175 (labeled-statement -> IDENTIFIER COLON statement .)
    SWITCH          reduce using rule 175 (labeled-statement -> IDENTIFIER COLON statement .)
    WHILE           reduce using rule 175 (labeled-statement -> IDENTIFIER COLON statement .)
    FOR             reduce using rule 175 (labeled-statement -> IDENTIFIER COLON statement .)
    FOREACH         reduce using rule 175 (labeled-statement -> IDENTIFIER COLON statement .)
    DO              reduce using rule 175 (labeled-statement -> IDENTIFIER COLON statement .)
    BREAK           reduce using rule 175 (labeled-statement -> IDENTIFIER COLON statement .)
    CONTINUE        reduce using rule 175 (labeled-statement -> IDENTIFIER COLON statement .)
    GOTO            reduce using rule 175 (labeled-statement -> IDENTIFIER COLON statement .)
    RETURN          reduce using rule 175 (labeled-statement -> IDENTIFIER COLON statement .)
    NEW             reduce using rule 175 (labeled-statement -> IDENTIFIER COLON statement .)
    INCRE           reduce using rule 175 (labeled-statement -> IDENTIFIER COLON statement .)
    DECRE           reduce using rule 175 (labeled-statement -> IDENTIFIER COLON statement .)
    BOOL            reduce using rule 175 (labeled-statement -> IDENTIFIER COLON statement .)
    INT             reduce using rule 175 (labeled-statement -> IDENTIFIER COLON statement .)
    UINT            reduce using rule 175 (labeled-statement -> IDENTIFIER COLON statement .)
    CHAR            reduce using rule 175 (labeled-statement -> IDENTIFIER COLON statement .)
    DOUBLE          reduce using rule 175 (labeled-statement -> IDENTIFIER COLON statement .)
    $end            reduce using rule 175 (labeled-statement -> IDENTIFIER COLON statement .)
    CASE            reduce using rule 175 (labeled-statement -> IDENTIFIER COLON statement .)
    DEFAULT         reduce using rule 175 (labeled-statement -> IDENTIFIER COLON statement .)
    BLOCK_END       reduce using rule 175 (labeled-statement -> IDENTIFIER COLON statement .)


state 215

    (136) variable-declarators -> variable-declarators COMMA . variable-declarator
    (137) variable-declarator -> . IDENTIFIER
    (138) variable-declarator -> . IDENTIFIER ASSIGN variable-initializer

    IDENTIFIER      shift and go to state 134

    variable-declarator            shift and go to state 267

state 216

    (138) variable-declarator -> IDENTIFIER ASSIGN . variable-initializer
    (88) variable-initializer -> . expression
    (89) variable-initializer -> . array-initializer
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (85) array-initializer -> . BLOCK_BEGIN variable-initializer-list-opt BLOCK_END
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (119) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) unary-expression -> . pre-increment-expression
    (77) unary-expression -> . pre-decrement-expression
    (78) primary-expression -> . array-creation-expression
    (79) primary-expression -> . primary-no-array-creation-expression
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (80) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (90) primary-no-array-creation-expression -> . literal
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (94) primary-no-array-creation-expression -> . element-access
    (95) primary-no-array-creation-expression -> . post-increment-expression
    (96) primary-no-array-creation-expression -> . post-decrement-expression
    (97) primary-no-array-creation-expression -> . object-creation-expression
    (241) literal -> . ICONST
    (242) literal -> . DCONST
    (243) literal -> . TRUE
    (244) literal -> . FALSE
    (98) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    BLOCK_BEGIN     shift and go to state 268
    IDENTIFIER      shift and go to state 94
    PLUS            shift and go to state 93
    MINUS           shift and go to state 84
    BITNOT          shift and go to state 113
    BITCOMP         shift and go to state 88
    TIMES           shift and go to state 99
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    NEW             shift and go to state 82
    ICONST          shift and go to state 101
    DCONST          shift and go to state 114
    TRUE            shift and go to state 107
    FALSE           shift and go to state 105
    OPEN_PAREN      shift and go to state 96

    unary-expression               shift and go to state 103
    exclusive-or-expression        shift and go to state 78
    member-access                  shift and go to state 79
    relational-expression          shift and go to state 80
    additive-expression            shift and go to state 83
    primary-no-array-creation-expression shift and go to state 100
    array-initializer              shift and go to state 269
    inclusive-or-expression        shift and go to state 86
    prim-expression                shift and go to state 77
    element-access                 shift and go to state 89
    literal                        shift and go to state 98
    conditional-expression         shift and go to state 90
    conditional-and-expression     shift and go to state 91
    post-decrement-expression      shift and go to state 92
    array-creation-expression      shift and go to state 81
    assignment                     shift and go to state 97
    variable-initializer           shift and go to state 270
    post-increment-expression      shift and go to state 85
    object-creation-expression     shift and go to state 102
    pre-increment-expression       shift and go to state 106
    equality-expression            shift and go to state 87
    shift-expression               shift and go to state 108
    and-expression                 shift and go to state 109
    pre-decrement-expression       shift and go to state 110
    multiplicative-expression      shift and go to state 111
    expression                     shift and go to state 271
    primary-expression             shift and go to state 115
    invocation-expression          shift and go to state 116
    conditional-or-expression      shift and go to state 117
    parenthesized-expression       shift and go to state 118

state 217

    (34) array-type -> simple-type OPEN_BRACKET CLOSE_BRACKET .

    IDENTIFIER      reduce using rule 34 (array-type -> simple-type OPEN_BRACKET CLOSE_BRACKET .)
    OPEN_PAREN      reduce using rule 34 (array-type -> simple-type OPEN_BRACKET CLOSE_BRACKET .)


state 218

    (209) do-statement -> DO block WHILE . OPEN_PAREN expression CLOSE_PAREN DELIM

    OPEN_PAREN      shift and go to state 272


state 219

    (179) local-constant-declaration -> CONST type constant-declarators .
    (36) constant-declarators -> constant-declarators . COMMA constant-declarator

    DELIM           reduce using rule 179 (local-constant-declaration -> CONST type constant-declarators .)
    COMMA           shift and go to state 273


state 220

    (37) constant-declarator -> IDENTIFIER . ASSIGN expression

    ASSIGN          shift and go to state 274


state 221

    (35) constant-declarators -> constant-declarator .

    DELIM           reduce using rule 35 (constant-declarators -> constant-declarator .)
    COMMA           reduce using rule 35 (constant-declarators -> constant-declarator .)


state 222

    (156) block -> BLOCK_BEGIN statement-list-opt BLOCK_END .

    IDENTIFIER      reduce using rule 156 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    BLOCK_BEGIN     reduce using rule 156 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    DELIM           reduce using rule 156 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    CONSOLE         reduce using rule 156 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    CONST           reduce using rule 156 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    IF              reduce using rule 156 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    SWITCH          reduce using rule 156 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    WHILE           reduce using rule 156 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    FOR             reduce using rule 156 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    FOREACH         reduce using rule 156 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    DO              reduce using rule 156 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    BREAK           reduce using rule 156 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    CONTINUE        reduce using rule 156 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    GOTO            reduce using rule 156 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    RETURN          reduce using rule 156 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    NEW             reduce using rule 156 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    INCRE           reduce using rule 156 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    DECRE           reduce using rule 156 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    BOOL            reduce using rule 156 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    INT             reduce using rule 156 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    UINT            reduce using rule 156 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    CHAR            reduce using rule 156 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    DOUBLE          reduce using rule 156 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    $end            reduce using rule 156 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    BLOCK_END       reduce using rule 156 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    CASE            reduce using rule 156 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    DEFAULT         reduce using rule 156 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    BITCOMP         reduce using rule 156 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    PUBLIC          reduce using rule 156 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    PRIVATE         reduce using rule 156 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    VOID            reduce using rule 156 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    ELSE            reduce using rule 156 (block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)


state 223

    (119) assignment -> prim-expression assignment-operator expression .

    COMMA           reduce using rule 119 (assignment -> prim-expression assignment-operator expression .)
    DELIM           reduce using rule 119 (assignment -> prim-expression assignment-operator expression .)
    CLOSE_PAREN     reduce using rule 119 (assignment -> prim-expression assignment-operator expression .)
    CLOSE_BRACKET   reduce using rule 119 (assignment -> prim-expression assignment-operator expression .)
    COLON           reduce using rule 119 (assignment -> prim-expression assignment-operator expression .)
    BLOCK_END       reduce using rule 119 (assignment -> prim-expression assignment-operator expression .)


state 224

    (99) member-access -> prim-expression DOT IDENTIFIER .

    OPEN_BRACKET    reduce using rule 99 (member-access -> prim-expression DOT IDENTIFIER .)
    OPEN_PAREN      reduce using rule 99 (member-access -> prim-expression DOT IDENTIFIER .)
    DOT             reduce using rule 99 (member-access -> prim-expression DOT IDENTIFIER .)
    INCRE           reduce using rule 99 (member-access -> prim-expression DOT IDENTIFIER .)
    DECRE           reduce using rule 99 (member-access -> prim-expression DOT IDENTIFIER .)
    ASSIGN          reduce using rule 99 (member-access -> prim-expression DOT IDENTIFIER .)
    PLUSEQUAL       reduce using rule 99 (member-access -> prim-expression DOT IDENTIFIER .)
    MINUSEQUAL      reduce using rule 99 (member-access -> prim-expression DOT IDENTIFIER .)
    TIMESEQUAL      reduce using rule 99 (member-access -> prim-expression DOT IDENTIFIER .)
    DIVEQUAL        reduce using rule 99 (member-access -> prim-expression DOT IDENTIFIER .)
    MODEQUAL        reduce using rule 99 (member-access -> prim-expression DOT IDENTIFIER .)
    BITANDEQUAL     reduce using rule 99 (member-access -> prim-expression DOT IDENTIFIER .)
    BITOREQUAL      reduce using rule 99 (member-access -> prim-expression DOT IDENTIFIER .)
    BITXOREQUAL     reduce using rule 99 (member-access -> prim-expression DOT IDENTIFIER .)
    LSHIFTEQUAL     reduce using rule 99 (member-access -> prim-expression DOT IDENTIFIER .)
    RSHIFTEQUAL     reduce using rule 99 (member-access -> prim-expression DOT IDENTIFIER .)
    TIMES           reduce using rule 99 (member-access -> prim-expression DOT IDENTIFIER .)
    DIV             reduce using rule 99 (member-access -> prim-expression DOT IDENTIFIER .)
    MOD             reduce using rule 99 (member-access -> prim-expression DOT IDENTIFIER .)
    PLUS            reduce using rule 99 (member-access -> prim-expression DOT IDENTIFIER .)
    MINUS           reduce using rule 99 (member-access -> prim-expression DOT IDENTIFIER .)
    LSHIFT          reduce using rule 99 (member-access -> prim-expression DOT IDENTIFIER .)
    RSHIFT          reduce using rule 99 (member-access -> prim-expression DOT IDENTIFIER .)
    LT              reduce using rule 99 (member-access -> prim-expression DOT IDENTIFIER .)
    GT              reduce using rule 99 (member-access -> prim-expression DOT IDENTIFIER .)
    LE              reduce using rule 99 (member-access -> prim-expression DOT IDENTIFIER .)
    GE              reduce using rule 99 (member-access -> prim-expression DOT IDENTIFIER .)
    EQ              reduce using rule 99 (member-access -> prim-expression DOT IDENTIFIER .)
    NE              reduce using rule 99 (member-access -> prim-expression DOT IDENTIFIER .)
    BITAND          reduce using rule 99 (member-access -> prim-expression DOT IDENTIFIER .)
    BITXOR          reduce using rule 99 (member-access -> prim-expression DOT IDENTIFIER .)
    BITOR           reduce using rule 99 (member-access -> prim-expression DOT IDENTIFIER .)
    LOGAND          reduce using rule 99 (member-access -> prim-expression DOT IDENTIFIER .)
    CONDOP          reduce using rule 99 (member-access -> prim-expression DOT IDENTIFIER .)
    LOGOR           reduce using rule 99 (member-access -> prim-expression DOT IDENTIFIER .)
    DELIM           reduce using rule 99 (member-access -> prim-expression DOT IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 99 (member-access -> prim-expression DOT IDENTIFIER .)
    COMMA           reduce using rule 99 (member-access -> prim-expression DOT IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 99 (member-access -> prim-expression DOT IDENTIFIER .)
    COLON           reduce using rule 99 (member-access -> prim-expression DOT IDENTIFIER .)
    BLOCK_END       reduce using rule 99 (member-access -> prim-expression DOT IDENTIFIER .)


state 225

    (9) class-declaration -> CLASS IDENTIFIER class-base-opt . class-body semi-opt
    (14) class-body -> . BLOCK_BEGIN class-member-declarations-opt BLOCK_END

    BLOCK_BEGIN     shift and go to state 276

    class-body                     shift and go to state 275

state 226

    (10) class-base-opt -> class-base .

    BLOCK_BEGIN     reduce using rule 10 (class-base-opt -> class-base .)


state 227

    (12) class-base -> COLON . class-type
    (13) class-type -> . IDENTIFIER

    IDENTIFIER      shift and go to state 125

    class-type                     shift and go to state 277

state 228

    (11) class-base-opt -> empty .

    BLOCK_BEGIN     reduce using rule 11 (class-base-opt -> empty .)


state 229

    (171) write-statement -> CONSOLE DOT WRITELINE . OPEN_PAREN print-list CLOSE_PAREN

    OPEN_PAREN      shift and go to state 278


state 230

    (174) read-statement -> CONSOLE DOT READLINE . OPEN_PAREN IDENTIFIER CLOSE_PAREN

    OPEN_PAREN      shift and go to state 279


state 231

    (191) if-statement -> IF OPEN_PAREN expression . CLOSE_PAREN block
    (192) if-statement -> IF OPEN_PAREN expression . CLOSE_PAREN block ELSE block

    CLOSE_PAREN     shift and go to state 280


state 232

    (110) element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .

    TIMES           reduce using rule 110 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    DIV             reduce using rule 110 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    MOD             reduce using rule 110 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    PLUS            reduce using rule 110 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    MINUS           reduce using rule 110 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    LSHIFT          reduce using rule 110 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    RSHIFT          reduce using rule 110 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    LT              reduce using rule 110 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    GT              reduce using rule 110 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    LE              reduce using rule 110 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    GE              reduce using rule 110 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    EQ              reduce using rule 110 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    NE              reduce using rule 110 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    BITAND          reduce using rule 110 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    BITXOR          reduce using rule 110 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    BITOR           reduce using rule 110 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    LOGAND          reduce using rule 110 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    CONDOP          reduce using rule 110 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    LOGOR           reduce using rule 110 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    DELIM           reduce using rule 110 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 110 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    COMMA           reduce using rule 110 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    CLOSE_PAREN     reduce using rule 110 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    COLON           reduce using rule 110 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    BLOCK_END       reduce using rule 110 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    DOT             reduce using rule 110 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    INCRE           reduce using rule 110 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    DECRE           reduce using rule 110 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    ASSIGN          reduce using rule 110 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    PLUSEQUAL       reduce using rule 110 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    MINUSEQUAL      reduce using rule 110 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    TIMESEQUAL      reduce using rule 110 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    DIVEQUAL        reduce using rule 110 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    MODEQUAL        reduce using rule 110 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    BITANDEQUAL     reduce using rule 110 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    BITOREQUAL      reduce using rule 110 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    BITXOREQUAL     reduce using rule 110 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    LSHIFTEQUAL     reduce using rule 110 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)
    RSHIFTEQUAL     reduce using rule 110 (element-access -> member-access OPEN_BRACKET expression-list CLOSE_BRACKET .)


state 233

    (84) expression-list -> expression-list COMMA . expression
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (119) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) unary-expression -> . pre-increment-expression
    (77) unary-expression -> . pre-decrement-expression
    (78) primary-expression -> . array-creation-expression
    (79) primary-expression -> . primary-no-array-creation-expression
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (80) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (90) primary-no-array-creation-expression -> . literal
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (94) primary-no-array-creation-expression -> . element-access
    (95) primary-no-array-creation-expression -> . post-increment-expression
    (96) primary-no-array-creation-expression -> . post-decrement-expression
    (97) primary-no-array-creation-expression -> . object-creation-expression
    (241) literal -> . ICONST
    (242) literal -> . DCONST
    (243) literal -> . TRUE
    (244) literal -> . FALSE
    (98) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 94
    PLUS            shift and go to state 93
    MINUS           shift and go to state 84
    BITNOT          shift and go to state 113
    BITCOMP         shift and go to state 88
    TIMES           shift and go to state 99
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    NEW             shift and go to state 82
    ICONST          shift and go to state 101
    DCONST          shift and go to state 114
    TRUE            shift and go to state 107
    FALSE           shift and go to state 105
    OPEN_PAREN      shift and go to state 96

    unary-expression               shift and go to state 103
    exclusive-or-expression        shift and go to state 78
    member-access                  shift and go to state 79
    relational-expression          shift and go to state 80
    additive-expression            shift and go to state 83
    primary-no-array-creation-expression shift and go to state 100
    inclusive-or-expression        shift and go to state 86
    equality-expression            shift and go to state 87
    prim-expression                shift and go to state 77
    element-access                 shift and go to state 89
    literal                        shift and go to state 98
    conditional-expression         shift and go to state 90
    conditional-and-expression     shift and go to state 91
    post-decrement-expression      shift and go to state 92
    array-creation-expression      shift and go to state 81
    assignment                     shift and go to state 97
    post-increment-expression      shift and go to state 85
    object-creation-expression     shift and go to state 102
    pre-increment-expression       shift and go to state 106
    shift-expression               shift and go to state 108
    and-expression                 shift and go to state 109
    pre-decrement-expression       shift and go to state 110
    multiplicative-expression      shift and go to state 111
    expression                     shift and go to state 281
    primary-expression             shift and go to state 115
    invocation-expression          shift and go to state 116
    conditional-or-expression      shift and go to state 117
    parenthesized-expression       shift and go to state 118

state 234

    (101) invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .

    TIMES           reduce using rule 101 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    DIV             reduce using rule 101 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    MOD             reduce using rule 101 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    PLUS            reduce using rule 101 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    MINUS           reduce using rule 101 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LSHIFT          reduce using rule 101 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    RSHIFT          reduce using rule 101 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LT              reduce using rule 101 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    GT              reduce using rule 101 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LE              reduce using rule 101 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    GE              reduce using rule 101 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    EQ              reduce using rule 101 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    NE              reduce using rule 101 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITAND          reduce using rule 101 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITXOR          reduce using rule 101 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITOR           reduce using rule 101 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LOGAND          reduce using rule 101 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    CONDOP          reduce using rule 101 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LOGOR           reduce using rule 101 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 101 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    DELIM           reduce using rule 101 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    CLOSE_BRACKET   reduce using rule 101 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    COMMA           reduce using rule 101 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    COLON           reduce using rule 101 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BLOCK_END       reduce using rule 101 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)


state 235

    (108) variable-reference -> expression .

    COMMA           reduce using rule 108 (variable-reference -> expression .)
    CLOSE_PAREN     reduce using rule 108 (variable-reference -> expression .)


state 236

    (107) argument -> OUT variable-reference .

    COMMA           reduce using rule 107 (argument -> OUT variable-reference .)
    CLOSE_PAREN     reduce using rule 107 (argument -> OUT variable-reference .)


state 237

    (105) argument-list -> argument-list COMMA . argument
    (106) argument -> . expression
    (107) argument -> . OUT variable-reference
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (119) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) unary-expression -> . pre-increment-expression
    (77) unary-expression -> . pre-decrement-expression
    (78) primary-expression -> . array-creation-expression
    (79) primary-expression -> . primary-no-array-creation-expression
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (80) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (90) primary-no-array-creation-expression -> . literal
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (94) primary-no-array-creation-expression -> . element-access
    (95) primary-no-array-creation-expression -> . post-increment-expression
    (96) primary-no-array-creation-expression -> . post-decrement-expression
    (97) primary-no-array-creation-expression -> . object-creation-expression
    (241) literal -> . ICONST
    (242) literal -> . DCONST
    (243) literal -> . TRUE
    (244) literal -> . FALSE
    (98) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    OUT             shift and go to state 166
    IDENTIFIER      shift and go to state 94
    PLUS            shift and go to state 93
    MINUS           shift and go to state 84
    BITNOT          shift and go to state 113
    BITCOMP         shift and go to state 88
    TIMES           shift and go to state 99
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    NEW             shift and go to state 82
    ICONST          shift and go to state 101
    DCONST          shift and go to state 114
    TRUE            shift and go to state 107
    FALSE           shift and go to state 105
    OPEN_PAREN      shift and go to state 96

    unary-expression               shift and go to state 103
    exclusive-or-expression        shift and go to state 78
    member-access                  shift and go to state 79
    argument                       shift and go to state 282
    relational-expression          shift and go to state 80
    additive-expression            shift and go to state 83
    primary-no-array-creation-expression shift and go to state 100
    inclusive-or-expression        shift and go to state 86
    equality-expression            shift and go to state 87
    prim-expression                shift and go to state 77
    element-access                 shift and go to state 89
    literal                        shift and go to state 98
    conditional-expression         shift and go to state 90
    conditional-and-expression     shift and go to state 91
    post-decrement-expression      shift and go to state 92
    array-creation-expression      shift and go to state 81
    assignment                     shift and go to state 97
    post-increment-expression      shift and go to state 85
    object-creation-expression     shift and go to state 102
    pre-increment-expression       shift and go to state 106
    shift-expression               shift and go to state 108
    and-expression                 shift and go to state 109
    pre-decrement-expression       shift and go to state 110
    multiplicative-expression      shift and go to state 111
    expression                     shift and go to state 168
    primary-expression             shift and go to state 115
    invocation-expression          shift and go to state 116
    conditional-or-expression      shift and go to state 117
    parenthesized-expression       shift and go to state 118

state 238

    (223) foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER . IN expression CLOSE_PAREN block

    IN              shift and go to state 283


state 239

    (49) exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .
    (51) and-expression -> and-expression . BITAND equality-expression

    BITXOR          reduce using rule 49 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    BITOR           reduce using rule 49 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    LOGAND          reduce using rule 49 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    CONDOP          reduce using rule 49 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    LOGOR           reduce using rule 49 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    CLOSE_PAREN     reduce using rule 49 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    DELIM           reduce using rule 49 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    CLOSE_BRACKET   reduce using rule 49 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    COMMA           reduce using rule 49 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    COLON           reduce using rule 49 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    BLOCK_END       reduce using rule 49 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    BITAND          shift and go to state 195


state 240

    (58) relational-expression -> relational-expression LE shift-expression .
    (61) shift-expression -> shift-expression . LSHIFT additive-expression
    (62) shift-expression -> shift-expression . RSHIFT additive-expression

    LT              reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    GT              reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    LE              reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    GE              reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    EQ              reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    NE              reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    BITAND          reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    BITXOR          reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    BITOR           reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    LOGAND          reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    CONDOP          reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    LOGOR           reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    CLOSE_BRACKET   reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    COMMA           reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    DELIM           reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    CLOSE_PAREN     reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    COLON           reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    BLOCK_END       reduce using rule 58 (relational-expression -> relational-expression LE shift-expression .)
    LSHIFT          shift and go to state 194
    RSHIFT          shift and go to state 193


state 241

    (59) relational-expression -> relational-expression GE shift-expression .
    (61) shift-expression -> shift-expression . LSHIFT additive-expression
    (62) shift-expression -> shift-expression . RSHIFT additive-expression

    LT              reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    GT              reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    LE              reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    GE              reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    EQ              reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    NE              reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    BITAND          reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    BITXOR          reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    BITOR           reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    LOGAND          reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    CONDOP          reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    LOGOR           reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    CLOSE_BRACKET   reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    COMMA           reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    DELIM           reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    CLOSE_PAREN     reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    COLON           reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    BLOCK_END       reduce using rule 59 (relational-expression -> relational-expression GE shift-expression .)
    LSHIFT          shift and go to state 194
    RSHIFT          shift and go to state 193


state 242

    (56) relational-expression -> relational-expression LT shift-expression .
    (61) shift-expression -> shift-expression . LSHIFT additive-expression
    (62) shift-expression -> shift-expression . RSHIFT additive-expression

    LT              reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    GT              reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    LE              reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    GE              reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    EQ              reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    NE              reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    BITAND          reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    BITXOR          reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    BITOR           reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    LOGAND          reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    CONDOP          reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    LOGOR           reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    CLOSE_BRACKET   reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    COMMA           reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    DELIM           reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    CLOSE_PAREN     reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    COLON           reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    BLOCK_END       reduce using rule 56 (relational-expression -> relational-expression LT shift-expression .)
    LSHIFT          shift and go to state 194
    RSHIFT          shift and go to state 193


state 243

    (57) relational-expression -> relational-expression GT shift-expression .
    (61) shift-expression -> shift-expression . LSHIFT additive-expression
    (62) shift-expression -> shift-expression . RSHIFT additive-expression

    LT              reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    GT              reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    LE              reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    GE              reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    EQ              reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    NE              reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    BITAND          reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    BITXOR          reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    BITOR           reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    LOGAND          reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    CONDOP          reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    LOGOR           reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    CLOSE_BRACKET   reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    COMMA           reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    DELIM           reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    CLOSE_PAREN     reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    COLON           reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    BLOCK_END       reduce using rule 57 (relational-expression -> relational-expression GT shift-expression .)
    LSHIFT          shift and go to state 194
    RSHIFT          shift and go to state 193


state 244

    (80) array-creation-expression -> NEW simple-type OPEN_BRACKET . expression-list CLOSE_BRACKET array-initializer-opt
    (34) array-type -> simple-type OPEN_BRACKET . CLOSE_BRACKET
    (83) expression-list -> . expression
    (84) expression-list -> . expression-list COMMA expression
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (119) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) unary-expression -> . pre-increment-expression
    (77) unary-expression -> . pre-decrement-expression
    (78) primary-expression -> . array-creation-expression
    (79) primary-expression -> . primary-no-array-creation-expression
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (80) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (90) primary-no-array-creation-expression -> . literal
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (94) primary-no-array-creation-expression -> . element-access
    (95) primary-no-array-creation-expression -> . post-increment-expression
    (96) primary-no-array-creation-expression -> . post-decrement-expression
    (97) primary-no-array-creation-expression -> . object-creation-expression
    (241) literal -> . ICONST
    (242) literal -> . DCONST
    (243) literal -> . TRUE
    (244) literal -> . FALSE
    (98) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    CLOSE_BRACKET   shift and go to state 217
    IDENTIFIER      shift and go to state 94
    PLUS            shift and go to state 93
    MINUS           shift and go to state 84
    BITNOT          shift and go to state 113
    BITCOMP         shift and go to state 88
    TIMES           shift and go to state 99
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    NEW             shift and go to state 82
    ICONST          shift and go to state 101
    DCONST          shift and go to state 114
    TRUE            shift and go to state 107
    FALSE           shift and go to state 105
    OPEN_PAREN      shift and go to state 96

    unary-expression               shift and go to state 103
    exclusive-or-expression        shift and go to state 78
    member-access                  shift and go to state 79
    relational-expression          shift and go to state 80
    additive-expression            shift and go to state 83
    primary-no-array-creation-expression shift and go to state 100
    inclusive-or-expression        shift and go to state 86
    expression-list                shift and go to state 284
    prim-expression                shift and go to state 77
    element-access                 shift and go to state 89
    literal                        shift and go to state 98
    conditional-expression         shift and go to state 90
    conditional-and-expression     shift and go to state 91
    post-decrement-expression      shift and go to state 92
    array-creation-expression      shift and go to state 81
    assignment                     shift and go to state 97
    post-increment-expression      shift and go to state 85
    object-creation-expression     shift and go to state 102
    pre-increment-expression       shift and go to state 106
    equality-expression            shift and go to state 87
    shift-expression               shift and go to state 108
    and-expression                 shift and go to state 109
    pre-decrement-expression       shift and go to state 110
    multiplicative-expression      shift and go to state 111
    expression                     shift and go to state 162
    primary-expression             shift and go to state 115
    invocation-expression          shift and go to state 116
    conditional-or-expression      shift and go to state 117
    parenthesized-expression       shift and go to state 118

state 245

    (64) additive-expression -> additive-expression PLUS multiplicative-expression .
    (67) multiplicative-expression -> multiplicative-expression . TIMES unary-expression
    (68) multiplicative-expression -> multiplicative-expression . DIV unary-expression
    (69) multiplicative-expression -> multiplicative-expression . MOD unary-expression

    PLUS            reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    MINUS           reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    LSHIFT          reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    RSHIFT          reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    LT              reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    GT              reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    LE              reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    GE              reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    EQ              reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    NE              reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    BITAND          reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    BITXOR          reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    BITOR           reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    LOGAND          reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    CONDOP          reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    LOGOR           reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    DELIM           reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    CLOSE_BRACKET   reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    COMMA           reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    CLOSE_PAREN     reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    COLON           reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    BLOCK_END       reduce using rule 64 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    TIMES           shift and go to state 198
    DIV             shift and go to state 196
    MOD             shift and go to state 197


state 246

    (65) additive-expression -> additive-expression MINUS multiplicative-expression .
    (67) multiplicative-expression -> multiplicative-expression . TIMES unary-expression
    (68) multiplicative-expression -> multiplicative-expression . DIV unary-expression
    (69) multiplicative-expression -> multiplicative-expression . MOD unary-expression

    PLUS            reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    MINUS           reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    LSHIFT          reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    RSHIFT          reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    LT              reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    GT              reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    LE              reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    GE              reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    EQ              reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    NE              reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    BITAND          reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    BITXOR          reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    BITOR           reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    LOGAND          reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    CONDOP          reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    LOGOR           reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    DELIM           reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    CLOSE_BRACKET   reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    COMMA           reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    CLOSE_PAREN     reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    COLON           reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    BLOCK_END       reduce using rule 65 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    TIMES           shift and go to state 198
    DIV             shift and go to state 196
    MOD             shift and go to state 197


state 247

    (47) inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .
    (49) exclusive-or-expression -> exclusive-or-expression . BITXOR and-expression

    BITOR           reduce using rule 47 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    LOGAND          reduce using rule 47 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    CONDOP          reduce using rule 47 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    LOGOR           reduce using rule 47 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    DELIM           reduce using rule 47 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    CLOSE_BRACKET   reduce using rule 47 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    COMMA           reduce using rule 47 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    CLOSE_PAREN     reduce using rule 47 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    COLON           reduce using rule 47 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    BLOCK_END       reduce using rule 47 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    BITXOR          shift and go to state 171


state 248

    (53) equality-expression -> equality-expression EQ relational-expression .
    (56) relational-expression -> relational-expression . LT shift-expression
    (57) relational-expression -> relational-expression . GT shift-expression
    (58) relational-expression -> relational-expression . LE shift-expression
    (59) relational-expression -> relational-expression . GE shift-expression

    EQ              reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    NE              reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    BITAND          reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    BITXOR          reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    BITOR           reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    LOGAND          reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    CONDOP          reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    LOGOR           reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    COLON           reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    COMMA           reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    CLOSE_PAREN     reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    DELIM           reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    CLOSE_BRACKET   reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    BLOCK_END       reduce using rule 53 (equality-expression -> equality-expression EQ relational-expression .)
    LT              shift and go to state 174
    GT              shift and go to state 175
    LE              shift and go to state 172
    GE              shift and go to state 173


state 249

    (54) equality-expression -> equality-expression NE relational-expression .
    (56) relational-expression -> relational-expression . LT shift-expression
    (57) relational-expression -> relational-expression . GT shift-expression
    (58) relational-expression -> relational-expression . LE shift-expression
    (59) relational-expression -> relational-expression . GE shift-expression

    EQ              reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    NE              reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    BITAND          reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    BITXOR          reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    BITOR           reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    LOGAND          reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    CONDOP          reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    LOGOR           reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    COLON           reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    COMMA           reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    CLOSE_PAREN     reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    DELIM           reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    CLOSE_BRACKET   reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    BLOCK_END       reduce using rule 54 (equality-expression -> equality-expression NE relational-expression .)
    LT              shift and go to state 174
    GT              shift and go to state 175
    LE              shift and go to state 172
    GE              shift and go to state 173


state 250

    (45) conditional-and-expression -> conditional-and-expression LOGAND inclusive-or-expression .
    (47) inclusive-or-expression -> inclusive-or-expression . BITOR exclusive-or-expression

    LOGAND          reduce using rule 45 (conditional-and-expression -> conditional-and-expression LOGAND inclusive-or-expression .)
    CONDOP          reduce using rule 45 (conditional-and-expression -> conditional-and-expression LOGAND inclusive-or-expression .)
    LOGOR           reduce using rule 45 (conditional-and-expression -> conditional-and-expression LOGAND inclusive-or-expression .)
    CLOSE_PAREN     reduce using rule 45 (conditional-and-expression -> conditional-and-expression LOGAND inclusive-or-expression .)
    COMMA           reduce using rule 45 (conditional-and-expression -> conditional-and-expression LOGAND inclusive-or-expression .)
    CLOSE_BRACKET   reduce using rule 45 (conditional-and-expression -> conditional-and-expression LOGAND inclusive-or-expression .)
    BLOCK_END       reduce using rule 45 (conditional-and-expression -> conditional-and-expression LOGAND inclusive-or-expression .)
    DELIM           reduce using rule 45 (conditional-and-expression -> conditional-and-expression LOGAND inclusive-or-expression .)
    COLON           reduce using rule 45 (conditional-and-expression -> conditional-and-expression LOGAND inclusive-or-expression .)
    BITOR           shift and go to state 184


state 251

    (98) parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .

    TIMES           reduce using rule 98 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    DIV             reduce using rule 98 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    MOD             reduce using rule 98 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    PLUS            reduce using rule 98 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    MINUS           reduce using rule 98 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    LSHIFT          reduce using rule 98 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    RSHIFT          reduce using rule 98 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    LT              reduce using rule 98 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    GT              reduce using rule 98 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    LE              reduce using rule 98 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    GE              reduce using rule 98 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    EQ              reduce using rule 98 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    NE              reduce using rule 98 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    BITAND          reduce using rule 98 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    BITXOR          reduce using rule 98 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    BITOR           reduce using rule 98 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    LOGAND          reduce using rule 98 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    CONDOP          reduce using rule 98 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    LOGOR           reduce using rule 98 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    CLOSE_BRACKET   reduce using rule 98 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    COMMA           reduce using rule 98 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 98 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    DELIM           reduce using rule 98 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    COLON           reduce using rule 98 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    BLOCK_END       reduce using rule 98 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)


state 252

    (62) shift-expression -> shift-expression RSHIFT additive-expression .
    (64) additive-expression -> additive-expression . PLUS multiplicative-expression
    (65) additive-expression -> additive-expression . MINUS multiplicative-expression

    LSHIFT          reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    RSHIFT          reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    LT              reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    GT              reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    LE              reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    GE              reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    EQ              reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    NE              reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    BITAND          reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    BITXOR          reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    BITOR           reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    LOGAND          reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    CONDOP          reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    LOGOR           reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    CLOSE_BRACKET   reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    COMMA           reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    CLOSE_PAREN     reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    BLOCK_END       reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    DELIM           reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    COLON           reduce using rule 62 (shift-expression -> shift-expression RSHIFT additive-expression .)
    PLUS            shift and go to state 177
    MINUS           shift and go to state 178


state 253

    (61) shift-expression -> shift-expression LSHIFT additive-expression .
    (64) additive-expression -> additive-expression . PLUS multiplicative-expression
    (65) additive-expression -> additive-expression . MINUS multiplicative-expression

    LSHIFT          reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    RSHIFT          reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    LT              reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    GT              reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    LE              reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    GE              reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    EQ              reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    NE              reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    BITAND          reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    BITXOR          reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    BITOR           reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    LOGAND          reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    CONDOP          reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    LOGOR           reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    CLOSE_BRACKET   reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    COMMA           reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    CLOSE_PAREN     reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    BLOCK_END       reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    DELIM           reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    COLON           reduce using rule 61 (shift-expression -> shift-expression LSHIFT additive-expression .)
    PLUS            shift and go to state 177
    MINUS           shift and go to state 178


state 254

    (51) and-expression -> and-expression BITAND equality-expression .
    (53) equality-expression -> equality-expression . EQ relational-expression
    (54) equality-expression -> equality-expression . NE relational-expression

    BITAND          reduce using rule 51 (and-expression -> and-expression BITAND equality-expression .)
    BITXOR          reduce using rule 51 (and-expression -> and-expression BITAND equality-expression .)
    BITOR           reduce using rule 51 (and-expression -> and-expression BITAND equality-expression .)
    LOGAND          reduce using rule 51 (and-expression -> and-expression BITAND equality-expression .)
    CONDOP          reduce using rule 51 (and-expression -> and-expression BITAND equality-expression .)
    LOGOR           reduce using rule 51 (and-expression -> and-expression BITAND equality-expression .)
    COLON           reduce using rule 51 (and-expression -> and-expression BITAND equality-expression .)
    DELIM           reduce using rule 51 (and-expression -> and-expression BITAND equality-expression .)
    CLOSE_BRACKET   reduce using rule 51 (and-expression -> and-expression BITAND equality-expression .)
    COMMA           reduce using rule 51 (and-expression -> and-expression BITAND equality-expression .)
    CLOSE_PAREN     reduce using rule 51 (and-expression -> and-expression BITAND equality-expression .)
    BLOCK_END       reduce using rule 51 (and-expression -> and-expression BITAND equality-expression .)
    EQ              shift and go to state 185
    NE              shift and go to state 186


state 255

    (68) multiplicative-expression -> multiplicative-expression DIV unary-expression .

    TIMES           reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    DIV             reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    MOD             reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    PLUS            reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    MINUS           reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    LSHIFT          reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    RSHIFT          reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    LT              reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    GT              reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    LE              reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    GE              reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    EQ              reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    NE              reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    BITAND          reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    BITXOR          reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    BITOR           reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    LOGAND          reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    CONDOP          reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    LOGOR           reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    DELIM           reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    CLOSE_BRACKET   reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    COMMA           reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    CLOSE_PAREN     reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    COLON           reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    BLOCK_END       reduce using rule 68 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)


state 256

    (69) multiplicative-expression -> multiplicative-expression MOD unary-expression .

    TIMES           reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    DIV             reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    MOD             reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    PLUS            reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    MINUS           reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    LSHIFT          reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    RSHIFT          reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    LT              reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    GT              reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    LE              reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    GE              reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    EQ              reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    NE              reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    BITAND          reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    BITXOR          reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    BITOR           reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    LOGAND          reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    CONDOP          reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    LOGOR           reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    DELIM           reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    CLOSE_BRACKET   reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    COMMA           reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    CLOSE_PAREN     reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    COLON           reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    BLOCK_END       reduce using rule 69 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)


state 257

    (67) multiplicative-expression -> multiplicative-expression TIMES unary-expression .

    TIMES           reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    DIV             reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    MOD             reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    PLUS            reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    MINUS           reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    LSHIFT          reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    RSHIFT          reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    LT              reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    GT              reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    LE              reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    GE              reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    EQ              reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    NE              reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    BITAND          reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    BITXOR          reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    BITOR           reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    LOGAND          reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    CONDOP          reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    LOGOR           reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    DELIM           reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    CLOSE_BRACKET   reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    COMMA           reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    CLOSE_PAREN     reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    COLON           reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    BLOCK_END       reduce using rule 67 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)


state 258

    (43) conditional-or-expression -> conditional-or-expression LOGOR conditional-and-expression .
    (45) conditional-and-expression -> conditional-and-expression . LOGAND inclusive-or-expression

    CONDOP          reduce using rule 43 (conditional-or-expression -> conditional-or-expression LOGOR conditional-and-expression .)
    LOGOR           reduce using rule 43 (conditional-or-expression -> conditional-or-expression LOGOR conditional-and-expression .)
    COMMA           reduce using rule 43 (conditional-or-expression -> conditional-or-expression LOGOR conditional-and-expression .)
    CLOSE_PAREN     reduce using rule 43 (conditional-or-expression -> conditional-or-expression LOGOR conditional-and-expression .)
    CLOSE_BRACKET   reduce using rule 43 (conditional-or-expression -> conditional-or-expression LOGOR conditional-and-expression .)
    BLOCK_END       reduce using rule 43 (conditional-or-expression -> conditional-or-expression LOGOR conditional-and-expression .)
    COLON           reduce using rule 43 (conditional-or-expression -> conditional-or-expression LOGOR conditional-and-expression .)
    DELIM           reduce using rule 43 (conditional-or-expression -> conditional-or-expression LOGOR conditional-and-expression .)
    LOGAND          shift and go to state 188


state 259

    (41) conditional-expression -> conditional-or-expression CONDOP expression . COLON expression

    COLON           shift and go to state 285


state 260

    (222) statement-expression-list -> statement-expression-list COMMA . statement-expression
    (182) statement-expression -> . invocation-expression
    (183) statement-expression -> . object-creation-expression
    (184) statement-expression -> . assignment
    (185) statement-expression -> . post-increment-expression
    (186) statement-expression -> . post-decrement-expression
    (187) statement-expression -> . pre-increment-expression
    (188) statement-expression -> . pre-decrement-expression
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (119) assignment -> . prim-expression assignment-operator expression
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET

    IDENTIFIER      shift and go to state 287
    NEW             shift and go to state 37
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33

    pre-decrement-expression       shift and go to state 25
    assignment                     shift and go to state 62
    prim-expression                shift and go to state 58
    post-increment-expression      shift and go to state 4
    element-access                 shift and go to state 20
    post-decrement-expression      shift and go to state 46
    statement-expression           shift and go to state 286
    object-creation-expression     shift and go to state 65
    invocation-expression          shift and go to state 14
    pre-increment-expression       shift and go to state 66
    member-access                  shift and go to state 2

state 261

    (210) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM . for-condition-opt DELIM for-iterator-opt CLOSE_PAREN block
    (215) for-condition-opt -> . for-condition
    (216) for-condition-opt -> . empty
    (217) for-condition -> . expression
    (245) empty -> .
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (119) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) unary-expression -> . pre-increment-expression
    (77) unary-expression -> . pre-decrement-expression
    (78) primary-expression -> . array-creation-expression
    (79) primary-expression -> . primary-no-array-creation-expression
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (80) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (90) primary-no-array-creation-expression -> . literal
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (94) primary-no-array-creation-expression -> . element-access
    (95) primary-no-array-creation-expression -> . post-increment-expression
    (96) primary-no-array-creation-expression -> . post-decrement-expression
    (97) primary-no-array-creation-expression -> . object-creation-expression
    (241) literal -> . ICONST
    (242) literal -> . DCONST
    (243) literal -> . TRUE
    (244) literal -> . FALSE
    (98) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    DELIM           reduce using rule 245 (empty -> .)
    IDENTIFIER      shift and go to state 94
    PLUS            shift and go to state 93
    MINUS           shift and go to state 84
    BITNOT          shift and go to state 113
    BITCOMP         shift and go to state 88
    TIMES           shift and go to state 99
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    NEW             shift and go to state 82
    ICONST          shift and go to state 101
    DCONST          shift and go to state 114
    TRUE            shift and go to state 107
    FALSE           shift and go to state 105
    OPEN_PAREN      shift and go to state 96

    unary-expression               shift and go to state 103
    exclusive-or-expression        shift and go to state 78
    member-access                  shift and go to state 79
    relational-expression          shift and go to state 80
    for-condition                  shift and go to state 288
    primary-no-array-creation-expression shift and go to state 100
    inclusive-or-expression        shift and go to state 86
    prim-expression                shift and go to state 77
    element-access                 shift and go to state 89
    literal                        shift and go to state 98
    conditional-expression         shift and go to state 90
    assignment                     shift and go to state 97
    post-decrement-expression      shift and go to state 92
    empty                          shift and go to state 289
    array-creation-expression      shift and go to state 81
    conditional-and-expression     shift and go to state 91
    post-increment-expression      shift and go to state 85
    object-creation-expression     shift and go to state 102
    pre-increment-expression       shift and go to state 106
    equality-expression            shift and go to state 87
    shift-expression               shift and go to state 108
    and-expression                 shift and go to state 109
    pre-decrement-expression       shift and go to state 110
    for-condition-opt              shift and go to state 290
    conditional-or-expression      shift and go to state 117
    parenthesized-expression       shift and go to state 118
    additive-expression            shift and go to state 83
    multiplicative-expression      shift and go to state 111
    primary-expression             shift and go to state 115
    invocation-expression          shift and go to state 116
    expression                     shift and go to state 291

state 262

    (208) while-statement -> WHILE OPEN_PAREN expression CLOSE_PAREN . block
    (156) block -> . BLOCK_BEGIN statement-list-opt BLOCK_END

    BLOCK_BEGIN     shift and go to state 57

    block                          shift and go to state 292

state 263

    (116) object-creation-expression -> NEW type OPEN_PAREN argument-list-opt . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 293


state 264

    (193) switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN . switch-block
    (194) switch-block -> . BLOCK_BEGIN switch-sections-opt BLOCK_END

    BLOCK_BEGIN     shift and go to state 294

    switch-block                   shift and go to state 295

state 265

    (109) element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .

    TIMES           reduce using rule 109 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    DIV             reduce using rule 109 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    MOD             reduce using rule 109 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    PLUS            reduce using rule 109 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    MINUS           reduce using rule 109 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    LSHIFT          reduce using rule 109 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    RSHIFT          reduce using rule 109 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    LT              reduce using rule 109 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    GT              reduce using rule 109 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    LE              reduce using rule 109 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    GE              reduce using rule 109 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    EQ              reduce using rule 109 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    NE              reduce using rule 109 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    BITAND          reduce using rule 109 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    BITXOR          reduce using rule 109 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    BITOR           reduce using rule 109 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    LOGAND          reduce using rule 109 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    CONDOP          reduce using rule 109 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    LOGOR           reduce using rule 109 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    DELIM           reduce using rule 109 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 109 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    COMMA           reduce using rule 109 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    CLOSE_PAREN     reduce using rule 109 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    COLON           reduce using rule 109 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    BLOCK_END       reduce using rule 109 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    DOT             reduce using rule 109 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    INCRE           reduce using rule 109 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    DECRE           reduce using rule 109 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    ASSIGN          reduce using rule 109 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    PLUSEQUAL       reduce using rule 109 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    MINUSEQUAL      reduce using rule 109 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    TIMESEQUAL      reduce using rule 109 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    DIVEQUAL        reduce using rule 109 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    MODEQUAL        reduce using rule 109 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    BITANDEQUAL     reduce using rule 109 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    BITOREQUAL      reduce using rule 109 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    BITXOREQUAL     reduce using rule 109 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    LSHIFTEQUAL     reduce using rule 109 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)
    RSHIFTEQUAL     reduce using rule 109 (element-access -> IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET .)


state 266

    (100) invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .

    TIMES           reduce using rule 100 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    DIV             reduce using rule 100 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    MOD             reduce using rule 100 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    PLUS            reduce using rule 100 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    MINUS           reduce using rule 100 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LSHIFT          reduce using rule 100 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    RSHIFT          reduce using rule 100 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LT              reduce using rule 100 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    GT              reduce using rule 100 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LE              reduce using rule 100 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    GE              reduce using rule 100 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    EQ              reduce using rule 100 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    NE              reduce using rule 100 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITAND          reduce using rule 100 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITXOR          reduce using rule 100 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITOR           reduce using rule 100 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LOGAND          reduce using rule 100 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    CONDOP          reduce using rule 100 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LOGOR           reduce using rule 100 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 100 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    DELIM           reduce using rule 100 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    CLOSE_BRACKET   reduce using rule 100 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    COMMA           reduce using rule 100 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    COLON           reduce using rule 100 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BLOCK_END       reduce using rule 100 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)


state 267

    (136) variable-declarators -> variable-declarators COMMA variable-declarator .

    DELIM           reduce using rule 136 (variable-declarators -> variable-declarators COMMA variable-declarator .)
    COMMA           reduce using rule 136 (variable-declarators -> variable-declarators COMMA variable-declarator .)


state 268

    (85) array-initializer -> BLOCK_BEGIN . variable-initializer-list-opt BLOCK_END
    (86) variable-initializer-list-opt -> . expression-list
    (87) variable-initializer-list-opt -> . empty
    (83) expression-list -> . expression
    (84) expression-list -> . expression-list COMMA expression
    (245) empty -> .
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (119) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) unary-expression -> . pre-increment-expression
    (77) unary-expression -> . pre-decrement-expression
    (78) primary-expression -> . array-creation-expression
    (79) primary-expression -> . primary-no-array-creation-expression
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (80) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (90) primary-no-array-creation-expression -> . literal
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (94) primary-no-array-creation-expression -> . element-access
    (95) primary-no-array-creation-expression -> . post-increment-expression
    (96) primary-no-array-creation-expression -> . post-decrement-expression
    (97) primary-no-array-creation-expression -> . object-creation-expression
    (241) literal -> . ICONST
    (242) literal -> . DCONST
    (243) literal -> . TRUE
    (244) literal -> . FALSE
    (98) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    BLOCK_END       reduce using rule 245 (empty -> .)
    IDENTIFIER      shift and go to state 94
    PLUS            shift and go to state 93
    MINUS           shift and go to state 84
    BITNOT          shift and go to state 113
    BITCOMP         shift and go to state 88
    TIMES           shift and go to state 99
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    NEW             shift and go to state 82
    ICONST          shift and go to state 101
    DCONST          shift and go to state 114
    TRUE            shift and go to state 107
    FALSE           shift and go to state 105
    OPEN_PAREN      shift and go to state 96

    unary-expression               shift and go to state 103
    exclusive-or-expression        shift and go to state 78
    member-access                  shift and go to state 79
    relational-expression          shift and go to state 80
    additive-expression            shift and go to state 83
    primary-no-array-creation-expression shift and go to state 100
    inclusive-or-expression        shift and go to state 86
    expression-list                shift and go to state 298
    prim-expression                shift and go to state 77
    element-access                 shift and go to state 89
    literal                        shift and go to state 98
    conditional-expression         shift and go to state 90
    conditional-and-expression     shift and go to state 91
    post-decrement-expression      shift and go to state 92
    variable-initializer-list-opt  shift and go to state 297
    empty                          shift and go to state 296
    array-creation-expression      shift and go to state 81
    assignment                     shift and go to state 97
    post-increment-expression      shift and go to state 85
    object-creation-expression     shift and go to state 102
    pre-increment-expression       shift and go to state 106
    equality-expression            shift and go to state 87
    shift-expression               shift and go to state 108
    and-expression                 shift and go to state 109
    pre-decrement-expression       shift and go to state 110
    multiplicative-expression      shift and go to state 111
    expression                     shift and go to state 162
    primary-expression             shift and go to state 115
    invocation-expression          shift and go to state 116
    conditional-or-expression      shift and go to state 117
    parenthesized-expression       shift and go to state 118

state 269

    (89) variable-initializer -> array-initializer .

    COMMA           reduce using rule 89 (variable-initializer -> array-initializer .)
    DELIM           reduce using rule 89 (variable-initializer -> array-initializer .)


state 270

    (138) variable-declarator -> IDENTIFIER ASSIGN variable-initializer .

    DELIM           reduce using rule 138 (variable-declarator -> IDENTIFIER ASSIGN variable-initializer .)
    COMMA           reduce using rule 138 (variable-declarator -> IDENTIFIER ASSIGN variable-initializer .)


state 271

    (88) variable-initializer -> expression .

    COMMA           reduce using rule 88 (variable-initializer -> expression .)
    DELIM           reduce using rule 88 (variable-initializer -> expression .)


state 272

    (209) do-statement -> DO block WHILE OPEN_PAREN . expression CLOSE_PAREN DELIM
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (119) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) unary-expression -> . pre-increment-expression
    (77) unary-expression -> . pre-decrement-expression
    (78) primary-expression -> . array-creation-expression
    (79) primary-expression -> . primary-no-array-creation-expression
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (80) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (90) primary-no-array-creation-expression -> . literal
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (94) primary-no-array-creation-expression -> . element-access
    (95) primary-no-array-creation-expression -> . post-increment-expression
    (96) primary-no-array-creation-expression -> . post-decrement-expression
    (97) primary-no-array-creation-expression -> . object-creation-expression
    (241) literal -> . ICONST
    (242) literal -> . DCONST
    (243) literal -> . TRUE
    (244) literal -> . FALSE
    (98) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 94
    PLUS            shift and go to state 93
    MINUS           shift and go to state 84
    BITNOT          shift and go to state 113
    BITCOMP         shift and go to state 88
    TIMES           shift and go to state 99
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    NEW             shift and go to state 82
    ICONST          shift and go to state 101
    DCONST          shift and go to state 114
    TRUE            shift and go to state 107
    FALSE           shift and go to state 105
    OPEN_PAREN      shift and go to state 96

    unary-expression               shift and go to state 103
    exclusive-or-expression        shift and go to state 78
    member-access                  shift and go to state 79
    relational-expression          shift and go to state 80
    additive-expression            shift and go to state 83
    primary-no-array-creation-expression shift and go to state 100
    inclusive-or-expression        shift and go to state 86
    prim-expression                shift and go to state 77
    element-access                 shift and go to state 89
    literal                        shift and go to state 98
    conditional-expression         shift and go to state 90
    conditional-and-expression     shift and go to state 91
    post-decrement-expression      shift and go to state 92
    array-creation-expression      shift and go to state 81
    assignment                     shift and go to state 97
    post-increment-expression      shift and go to state 85
    object-creation-expression     shift and go to state 102
    pre-increment-expression       shift and go to state 106
    equality-expression            shift and go to state 87
    shift-expression               shift and go to state 108
    and-expression                 shift and go to state 109
    pre-decrement-expression       shift and go to state 110
    multiplicative-expression      shift and go to state 111
    conditional-or-expression      shift and go to state 117
    primary-expression             shift and go to state 115
    invocation-expression          shift and go to state 116
    expression                     shift and go to state 299
    parenthesized-expression       shift and go to state 118

state 273

    (36) constant-declarators -> constant-declarators COMMA . constant-declarator
    (37) constant-declarator -> . IDENTIFIER ASSIGN expression

    IDENTIFIER      shift and go to state 220

    constant-declarator            shift and go to state 300

state 274

    (37) constant-declarator -> IDENTIFIER ASSIGN . expression
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (119) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) unary-expression -> . pre-increment-expression
    (77) unary-expression -> . pre-decrement-expression
    (78) primary-expression -> . array-creation-expression
    (79) primary-expression -> . primary-no-array-creation-expression
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (80) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (90) primary-no-array-creation-expression -> . literal
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (94) primary-no-array-creation-expression -> . element-access
    (95) primary-no-array-creation-expression -> . post-increment-expression
    (96) primary-no-array-creation-expression -> . post-decrement-expression
    (97) primary-no-array-creation-expression -> . object-creation-expression
    (241) literal -> . ICONST
    (242) literal -> . DCONST
    (243) literal -> . TRUE
    (244) literal -> . FALSE
    (98) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 94
    PLUS            shift and go to state 93
    MINUS           shift and go to state 84
    BITNOT          shift and go to state 113
    BITCOMP         shift and go to state 88
    TIMES           shift and go to state 99
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    NEW             shift and go to state 82
    ICONST          shift and go to state 101
    DCONST          shift and go to state 114
    TRUE            shift and go to state 107
    FALSE           shift and go to state 105
    OPEN_PAREN      shift and go to state 96

    unary-expression               shift and go to state 103
    exclusive-or-expression        shift and go to state 78
    member-access                  shift and go to state 79
    relational-expression          shift and go to state 80
    additive-expression            shift and go to state 83
    primary-no-array-creation-expression shift and go to state 100
    inclusive-or-expression        shift and go to state 86
    prim-expression                shift and go to state 77
    element-access                 shift and go to state 89
    literal                        shift and go to state 98
    conditional-expression         shift and go to state 90
    conditional-and-expression     shift and go to state 91
    post-decrement-expression      shift and go to state 92
    array-creation-expression      shift and go to state 81
    assignment                     shift and go to state 97
    post-increment-expression      shift and go to state 85
    object-creation-expression     shift and go to state 102
    pre-increment-expression       shift and go to state 106
    equality-expression            shift and go to state 87
    shift-expression               shift and go to state 108
    and-expression                 shift and go to state 109
    pre-decrement-expression       shift and go to state 110
    multiplicative-expression      shift and go to state 111
    conditional-or-expression      shift and go to state 117
    primary-expression             shift and go to state 115
    invocation-expression          shift and go to state 116
    expression                     shift and go to state 301
    parenthesized-expression       shift and go to state 118

state 275

    (9) class-declaration -> CLASS IDENTIFIER class-base-opt class-body . semi-opt
    (3) semi-opt -> . DELIM
    (4) semi-opt -> . empty
    (245) empty -> .

    DELIM           shift and go to state 302
    CLASS           reduce using rule 245 (empty -> .)
    $end            reduce using rule 245 (empty -> .)

    semi-opt                       shift and go to state 303
    empty                          shift and go to state 304

state 276

    (14) class-body -> BLOCK_BEGIN . class-member-declarations-opt BLOCK_END
    (15) class-member-declarations-opt -> . class-member-declarations
    (16) class-member-declarations-opt -> . empty
    (17) class-member-declarations -> . class-member-declaration
    (18) class-member-declarations -> . class-member-declarations class-member-declaration
    (245) empty -> .
    (19) class-member-declaration -> . constant-declaration
    (20) class-member-declaration -> . field-declaration
    (21) class-member-declaration -> . method-declaration
    (22) class-member-declaration -> . constructor-declaration
    (23) class-member-declaration -> . destructor-declaration
    (24) constant-declaration -> . modifier CONST simple-type constant-declarators DELIM
    (25) constant-declaration -> . CONST simple-type constant-declarators DELIM
    (131) field-declaration -> . modifier type variable-declarators DELIM
    (132) field-declaration -> . type variable-declarators DELIM
    (139) method-declaration -> . method-header method-body
    (234) constructor-declaration -> . constructor-declarator constructor-body
    (238) destructor-declaration -> . BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body
    (133) modifier -> . PUBLIC
    (134) modifier -> . PRIVATE
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (140) method-header -> . modifier type member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (141) method-header -> . modifier VOID member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (142) method-header -> . type member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (143) method-header -> . VOID member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (235) constructor-declarator -> . IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE
    (13) class-type -> . IDENTIFIER
    (34) array-type -> . simple-type OPEN_BRACKET CLOSE_BRACKET

    BLOCK_END       reduce using rule 245 (empty -> .)
    CONST           shift and go to state 307
    BITCOMP         shift and go to state 309
    PUBLIC          shift and go to state 323
    PRIVATE         shift and go to state 308
    VOID            shift and go to state 306
    IDENTIFIER      shift and go to state 318
    BOOL            shift and go to state 51
    INT             shift and go to state 50
    UINT            shift and go to state 64
    CHAR            shift and go to state 34
    DOUBLE          shift and go to state 13

    method-header                  shift and go to state 305
    class-member-declaration       shift and go to state 321
    method-declaration             shift and go to state 310
    class-member-declarations-opt  shift and go to state 315
    type                           shift and go to state 313
    empty                          shift and go to state 314
    array-type                     shift and go to state 45
    field-declaration              shift and go to state 311
    constructor-declaration        shift and go to state 316
    class-member-declarations      shift and go to state 317
    constant-declaration           shift and go to state 312
    destructor-declaration         shift and go to state 319
    constructor-declarator         shift and go to state 320
    class-type                     shift and go to state 68
    simple-type                    shift and go to state 54
    modifier                       shift and go to state 322

state 277

    (12) class-base -> COLON class-type .

    BLOCK_BEGIN     reduce using rule 12 (class-base -> COLON class-type .)


state 278

    (171) write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN . print-list CLOSE_PAREN
    (172) print-list -> . expression
    (173) print-list -> . expression COMMA print-list
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (119) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) unary-expression -> . pre-increment-expression
    (77) unary-expression -> . pre-decrement-expression
    (78) primary-expression -> . array-creation-expression
    (79) primary-expression -> . primary-no-array-creation-expression
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (80) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (90) primary-no-array-creation-expression -> . literal
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (94) primary-no-array-creation-expression -> . element-access
    (95) primary-no-array-creation-expression -> . post-increment-expression
    (96) primary-no-array-creation-expression -> . post-decrement-expression
    (97) primary-no-array-creation-expression -> . object-creation-expression
    (241) literal -> . ICONST
    (242) literal -> . DCONST
    (243) literal -> . TRUE
    (244) literal -> . FALSE
    (98) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 94
    PLUS            shift and go to state 93
    MINUS           shift and go to state 84
    BITNOT          shift and go to state 113
    BITCOMP         shift and go to state 88
    TIMES           shift and go to state 99
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    NEW             shift and go to state 82
    ICONST          shift and go to state 101
    DCONST          shift and go to state 114
    TRUE            shift and go to state 107
    FALSE           shift and go to state 105
    OPEN_PAREN      shift and go to state 96

    unary-expression               shift and go to state 103
    exclusive-or-expression        shift and go to state 78
    member-access                  shift and go to state 79
    relational-expression          shift and go to state 80
    additive-expression            shift and go to state 83
    primary-no-array-creation-expression shift and go to state 100
    inclusive-or-expression        shift and go to state 86
    prim-expression                shift and go to state 77
    element-access                 shift and go to state 89
    literal                        shift and go to state 98
    conditional-expression         shift and go to state 90
    conditional-and-expression     shift and go to state 91
    post-decrement-expression      shift and go to state 92
    array-creation-expression      shift and go to state 81
    assignment                     shift and go to state 97
    post-increment-expression      shift and go to state 85
    object-creation-expression     shift and go to state 102
    and-expression                 shift and go to state 109
    pre-increment-expression       shift and go to state 106
    equality-expression            shift and go to state 87
    shift-expression               shift and go to state 108
    print-list                     shift and go to state 324
    pre-decrement-expression       shift and go to state 110
    multiplicative-expression      shift and go to state 111
    expression                     shift and go to state 325
    primary-expression             shift and go to state 115
    invocation-expression          shift and go to state 116
    conditional-or-expression      shift and go to state 117
    parenthesized-expression       shift and go to state 118

state 279

    (174) read-statement -> CONSOLE DOT READLINE OPEN_PAREN . IDENTIFIER CLOSE_PAREN

    IDENTIFIER      shift and go to state 326


state 280

    (191) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN . block
    (192) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN . block ELSE block
    (156) block -> . BLOCK_BEGIN statement-list-opt BLOCK_END

    BLOCK_BEGIN     shift and go to state 57

    block                          shift and go to state 327

state 281

    (84) expression-list -> expression-list COMMA expression .

    CLOSE_BRACKET   reduce using rule 84 (expression-list -> expression-list COMMA expression .)
    COMMA           reduce using rule 84 (expression-list -> expression-list COMMA expression .)
    BLOCK_END       reduce using rule 84 (expression-list -> expression-list COMMA expression .)


state 282

    (105) argument-list -> argument-list COMMA argument .

    COMMA           reduce using rule 105 (argument-list -> argument-list COMMA argument .)
    CLOSE_PAREN     reduce using rule 105 (argument-list -> argument-list COMMA argument .)


state 283

    (223) foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN . expression CLOSE_PAREN block
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (119) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) unary-expression -> . pre-increment-expression
    (77) unary-expression -> . pre-decrement-expression
    (78) primary-expression -> . array-creation-expression
    (79) primary-expression -> . primary-no-array-creation-expression
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (80) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (90) primary-no-array-creation-expression -> . literal
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (94) primary-no-array-creation-expression -> . element-access
    (95) primary-no-array-creation-expression -> . post-increment-expression
    (96) primary-no-array-creation-expression -> . post-decrement-expression
    (97) primary-no-array-creation-expression -> . object-creation-expression
    (241) literal -> . ICONST
    (242) literal -> . DCONST
    (243) literal -> . TRUE
    (244) literal -> . FALSE
    (98) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 94
    PLUS            shift and go to state 93
    MINUS           shift and go to state 84
    BITNOT          shift and go to state 113
    BITCOMP         shift and go to state 88
    TIMES           shift and go to state 99
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    NEW             shift and go to state 82
    ICONST          shift and go to state 101
    DCONST          shift and go to state 114
    TRUE            shift and go to state 107
    FALSE           shift and go to state 105
    OPEN_PAREN      shift and go to state 96

    unary-expression               shift and go to state 103
    exclusive-or-expression        shift and go to state 78
    member-access                  shift and go to state 79
    relational-expression          shift and go to state 80
    additive-expression            shift and go to state 83
    primary-no-array-creation-expression shift and go to state 100
    inclusive-or-expression        shift and go to state 86
    prim-expression                shift and go to state 77
    element-access                 shift and go to state 89
    literal                        shift and go to state 98
    conditional-expression         shift and go to state 90
    conditional-and-expression     shift and go to state 91
    post-decrement-expression      shift and go to state 92
    array-creation-expression      shift and go to state 81
    assignment                     shift and go to state 97
    post-increment-expression      shift and go to state 85
    object-creation-expression     shift and go to state 102
    pre-increment-expression       shift and go to state 106
    equality-expression            shift and go to state 87
    shift-expression               shift and go to state 108
    and-expression                 shift and go to state 109
    pre-decrement-expression       shift and go to state 110
    multiplicative-expression      shift and go to state 111
    expression                     shift and go to state 328
    primary-expression             shift and go to state 115
    invocation-expression          shift and go to state 116
    conditional-or-expression      shift and go to state 117
    parenthesized-expression       shift and go to state 118

state 284

    (80) array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list . CLOSE_BRACKET array-initializer-opt
    (84) expression-list -> expression-list . COMMA expression

    CLOSE_BRACKET   shift and go to state 329
    COMMA           shift and go to state 233


state 285

    (41) conditional-expression -> conditional-or-expression CONDOP expression COLON . expression
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (119) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) unary-expression -> . pre-increment-expression
    (77) unary-expression -> . pre-decrement-expression
    (78) primary-expression -> . array-creation-expression
    (79) primary-expression -> . primary-no-array-creation-expression
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (80) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (90) primary-no-array-creation-expression -> . literal
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (94) primary-no-array-creation-expression -> . element-access
    (95) primary-no-array-creation-expression -> . post-increment-expression
    (96) primary-no-array-creation-expression -> . post-decrement-expression
    (97) primary-no-array-creation-expression -> . object-creation-expression
    (241) literal -> . ICONST
    (242) literal -> . DCONST
    (243) literal -> . TRUE
    (244) literal -> . FALSE
    (98) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 94
    PLUS            shift and go to state 93
    MINUS           shift and go to state 84
    BITNOT          shift and go to state 113
    BITCOMP         shift and go to state 88
    TIMES           shift and go to state 99
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    NEW             shift and go to state 82
    ICONST          shift and go to state 101
    DCONST          shift and go to state 114
    TRUE            shift and go to state 107
    FALSE           shift and go to state 105
    OPEN_PAREN      shift and go to state 96

    unary-expression               shift and go to state 103
    exclusive-or-expression        shift and go to state 78
    member-access                  shift and go to state 79
    relational-expression          shift and go to state 80
    additive-expression            shift and go to state 83
    primary-no-array-creation-expression shift and go to state 100
    inclusive-or-expression        shift and go to state 86
    prim-expression                shift and go to state 77
    element-access                 shift and go to state 89
    literal                        shift and go to state 98
    conditional-expression         shift and go to state 90
    conditional-and-expression     shift and go to state 91
    post-decrement-expression      shift and go to state 92
    array-creation-expression      shift and go to state 81
    assignment                     shift and go to state 97
    post-increment-expression      shift and go to state 85
    object-creation-expression     shift and go to state 102
    pre-increment-expression       shift and go to state 106
    equality-expression            shift and go to state 87
    shift-expression               shift and go to state 108
    and-expression                 shift and go to state 109
    pre-decrement-expression       shift and go to state 110
    multiplicative-expression      shift and go to state 111
    expression                     shift and go to state 330
    primary-expression             shift and go to state 115
    invocation-expression          shift and go to state 116
    conditional-or-expression      shift and go to state 117
    parenthesized-expression       shift and go to state 118

state 286

    (222) statement-expression-list -> statement-expression-list COMMA statement-expression .

    COMMA           reduce using rule 222 (statement-expression-list -> statement-expression-list COMMA statement-expression .)
    DELIM           reduce using rule 222 (statement-expression-list -> statement-expression-list COMMA statement-expression .)
    CLOSE_PAREN     reduce using rule 222 (statement-expression-list -> statement-expression-list COMMA statement-expression .)


state 287

    (100) invocation-expression -> IDENTIFIER . OPEN_PAREN argument-list-opt CLOSE_PAREN
    (111) prim-expression -> IDENTIFIER .
    (109) element-access -> IDENTIFIER . OPEN_BRACKET expression-list CLOSE_BRACKET

    OPEN_PAREN      shift and go to state 130
    INCRE           reduce using rule 111 (prim-expression -> IDENTIFIER .)
    DECRE           reduce using rule 111 (prim-expression -> IDENTIFIER .)
    DOT             reduce using rule 111 (prim-expression -> IDENTIFIER .)
    ASSIGN          reduce using rule 111 (prim-expression -> IDENTIFIER .)
    PLUSEQUAL       reduce using rule 111 (prim-expression -> IDENTIFIER .)
    MINUSEQUAL      reduce using rule 111 (prim-expression -> IDENTIFIER .)
    TIMESEQUAL      reduce using rule 111 (prim-expression -> IDENTIFIER .)
    DIVEQUAL        reduce using rule 111 (prim-expression -> IDENTIFIER .)
    MODEQUAL        reduce using rule 111 (prim-expression -> IDENTIFIER .)
    BITANDEQUAL     reduce using rule 111 (prim-expression -> IDENTIFIER .)
    BITOREQUAL      reduce using rule 111 (prim-expression -> IDENTIFIER .)
    BITXOREQUAL     reduce using rule 111 (prim-expression -> IDENTIFIER .)
    LSHIFTEQUAL     reduce using rule 111 (prim-expression -> IDENTIFIER .)
    RSHIFTEQUAL     reduce using rule 111 (prim-expression -> IDENTIFIER .)
    OPEN_BRACKET    shift and go to state 129


state 288

    (215) for-condition-opt -> for-condition .

    DELIM           reduce using rule 215 (for-condition-opt -> for-condition .)


state 289

    (216) for-condition-opt -> empty .

    DELIM           reduce using rule 216 (for-condition-opt -> empty .)


state 290

    (210) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt . DELIM for-iterator-opt CLOSE_PAREN block

    DELIM           shift and go to state 331


state 291

    (217) for-condition -> expression .

    DELIM           reduce using rule 217 (for-condition -> expression .)


state 292

    (208) while-statement -> WHILE OPEN_PAREN expression CLOSE_PAREN block .

    IDENTIFIER      reduce using rule 208 (while-statement -> WHILE OPEN_PAREN expression CLOSE_PAREN block .)
    BLOCK_BEGIN     reduce using rule 208 (while-statement -> WHILE OPEN_PAREN expression CLOSE_PAREN block .)
    DELIM           reduce using rule 208 (while-statement -> WHILE OPEN_PAREN expression CLOSE_PAREN block .)
    CONSOLE         reduce using rule 208 (while-statement -> WHILE OPEN_PAREN expression CLOSE_PAREN block .)
    CONST           reduce using rule 208 (while-statement -> WHILE OPEN_PAREN expression CLOSE_PAREN block .)
    IF              reduce using rule 208 (while-statement -> WHILE OPEN_PAREN expression CLOSE_PAREN block .)
    SWITCH          reduce using rule 208 (while-statement -> WHILE OPEN_PAREN expression CLOSE_PAREN block .)
    WHILE           reduce using rule 208 (while-statement -> WHILE OPEN_PAREN expression CLOSE_PAREN block .)
    FOR             reduce using rule 208 (while-statement -> WHILE OPEN_PAREN expression CLOSE_PAREN block .)
    FOREACH         reduce using rule 208 (while-statement -> WHILE OPEN_PAREN expression CLOSE_PAREN block .)
    DO              reduce using rule 208 (while-statement -> WHILE OPEN_PAREN expression CLOSE_PAREN block .)
    BREAK           reduce using rule 208 (while-statement -> WHILE OPEN_PAREN expression CLOSE_PAREN block .)
    CONTINUE        reduce using rule 208 (while-statement -> WHILE OPEN_PAREN expression CLOSE_PAREN block .)
    GOTO            reduce using rule 208 (while-statement -> WHILE OPEN_PAREN expression CLOSE_PAREN block .)
    RETURN          reduce using rule 208 (while-statement -> WHILE OPEN_PAREN expression CLOSE_PAREN block .)
    NEW             reduce using rule 208 (while-statement -> WHILE OPEN_PAREN expression CLOSE_PAREN block .)
    INCRE           reduce using rule 208 (while-statement -> WHILE OPEN_PAREN expression CLOSE_PAREN block .)
    DECRE           reduce using rule 208 (while-statement -> WHILE OPEN_PAREN expression CLOSE_PAREN block .)
    BOOL            reduce using rule 208 (while-statement -> WHILE OPEN_PAREN expression CLOSE_PAREN block .)
    INT             reduce using rule 208 (while-statement -> WHILE OPEN_PAREN expression CLOSE_PAREN block .)
    UINT            reduce using rule 208 (while-statement -> WHILE OPEN_PAREN expression CLOSE_PAREN block .)
    CHAR            reduce using rule 208 (while-statement -> WHILE OPEN_PAREN expression CLOSE_PAREN block .)
    DOUBLE          reduce using rule 208 (while-statement -> WHILE OPEN_PAREN expression CLOSE_PAREN block .)
    BLOCK_END       reduce using rule 208 (while-statement -> WHILE OPEN_PAREN expression CLOSE_PAREN block .)
    CASE            reduce using rule 208 (while-statement -> WHILE OPEN_PAREN expression CLOSE_PAREN block .)
    DEFAULT         reduce using rule 208 (while-statement -> WHILE OPEN_PAREN expression CLOSE_PAREN block .)
    $end            reduce using rule 208 (while-statement -> WHILE OPEN_PAREN expression CLOSE_PAREN block .)


state 293

    (116) object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .

    TIMES           reduce using rule 116 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    DIV             reduce using rule 116 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    MOD             reduce using rule 116 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    PLUS            reduce using rule 116 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    MINUS           reduce using rule 116 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LSHIFT          reduce using rule 116 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    RSHIFT          reduce using rule 116 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LT              reduce using rule 116 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    GT              reduce using rule 116 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LE              reduce using rule 116 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    GE              reduce using rule 116 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    EQ              reduce using rule 116 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    NE              reduce using rule 116 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITAND          reduce using rule 116 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITXOR          reduce using rule 116 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITOR           reduce using rule 116 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LOGAND          reduce using rule 116 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    CONDOP          reduce using rule 116 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LOGOR           reduce using rule 116 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    DELIM           reduce using rule 116 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    CLOSE_BRACKET   reduce using rule 116 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    COMMA           reduce using rule 116 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 116 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    COLON           reduce using rule 116 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BLOCK_END       reduce using rule 116 (object-creation-expression -> NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN .)


state 294

    (194) switch-block -> BLOCK_BEGIN . switch-sections-opt BLOCK_END
    (195) switch-sections-opt -> . switch-sections
    (196) switch-sections-opt -> . empty
    (197) switch-sections -> . switch-section
    (198) switch-sections -> . switch-sections switch-section
    (245) empty -> .
    (199) switch-section -> . switch-labels statement-list
    (200) switch-labels -> . switch-label
    (201) switch-labels -> . switch-labels switch-label
    (202) switch-label -> . CASE expression COLON
    (203) switch-label -> . DEFAULT COLON

    BLOCK_END       reduce using rule 245 (empty -> .)
    CASE            shift and go to state 332
    DEFAULT         shift and go to state 333

    switch-sections-opt            shift and go to state 336
    switch-section                 shift and go to state 334
    switch-labels                  shift and go to state 335
    switch-sections                shift and go to state 337
    empty                          shift and go to state 338
    switch-label                   shift and go to state 339

state 295

    (193) switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .

    IDENTIFIER      reduce using rule 193 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    BLOCK_BEGIN     reduce using rule 193 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    DELIM           reduce using rule 193 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    CONSOLE         reduce using rule 193 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    CONST           reduce using rule 193 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    IF              reduce using rule 193 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    SWITCH          reduce using rule 193 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    WHILE           reduce using rule 193 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    FOR             reduce using rule 193 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    FOREACH         reduce using rule 193 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    DO              reduce using rule 193 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    BREAK           reduce using rule 193 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    CONTINUE        reduce using rule 193 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    GOTO            reduce using rule 193 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    RETURN          reduce using rule 193 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    NEW             reduce using rule 193 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    INCRE           reduce using rule 193 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    DECRE           reduce using rule 193 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    BOOL            reduce using rule 193 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    INT             reduce using rule 193 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    UINT            reduce using rule 193 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    CHAR            reduce using rule 193 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    DOUBLE          reduce using rule 193 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    BLOCK_END       reduce using rule 193 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    CASE            reduce using rule 193 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    DEFAULT         reduce using rule 193 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    $end            reduce using rule 193 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)


state 296

    (87) variable-initializer-list-opt -> empty .

    BLOCK_END       reduce using rule 87 (variable-initializer-list-opt -> empty .)


state 297

    (85) array-initializer -> BLOCK_BEGIN variable-initializer-list-opt . BLOCK_END

    BLOCK_END       shift and go to state 340


state 298

    (86) variable-initializer-list-opt -> expression-list .
    (84) expression-list -> expression-list . COMMA expression

    BLOCK_END       reduce using rule 86 (variable-initializer-list-opt -> expression-list .)
    COMMA           shift and go to state 233


state 299

    (209) do-statement -> DO block WHILE OPEN_PAREN expression . CLOSE_PAREN DELIM

    CLOSE_PAREN     shift and go to state 341


state 300

    (36) constant-declarators -> constant-declarators COMMA constant-declarator .

    DELIM           reduce using rule 36 (constant-declarators -> constant-declarators COMMA constant-declarator .)
    COMMA           reduce using rule 36 (constant-declarators -> constant-declarators COMMA constant-declarator .)


state 301

    (37) constant-declarator -> IDENTIFIER ASSIGN expression .

    COMMA           reduce using rule 37 (constant-declarator -> IDENTIFIER ASSIGN expression .)
    DELIM           reduce using rule 37 (constant-declarator -> IDENTIFIER ASSIGN expression .)


state 302

    (3) semi-opt -> DELIM .

    CLASS           reduce using rule 3 (semi-opt -> DELIM .)
    $end            reduce using rule 3 (semi-opt -> DELIM .)


state 303

    (9) class-declaration -> CLASS IDENTIFIER class-base-opt class-body semi-opt .

    CLASS           reduce using rule 9 (class-declaration -> CLASS IDENTIFIER class-base-opt class-body semi-opt .)
    $end            reduce using rule 9 (class-declaration -> CLASS IDENTIFIER class-base-opt class-body semi-opt .)


state 304

    (4) semi-opt -> empty .

    CLASS           reduce using rule 4 (semi-opt -> empty .)
    $end            reduce using rule 4 (semi-opt -> empty .)


state 305

    (139) method-declaration -> method-header . method-body
    (154) method-body -> . block
    (155) method-body -> . DELIM
    (156) block -> . BLOCK_BEGIN statement-list-opt BLOCK_END

    DELIM           shift and go to state 342
    BLOCK_BEGIN     shift and go to state 57

    method-body                    shift and go to state 343
    block                          shift and go to state 344

state 306

    (143) method-header -> VOID . member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (146) member-name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 346

    member-name                    shift and go to state 345

state 307

    (25) constant-declaration -> CONST . simple-type constant-declarators DELIM
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE

    BOOL            shift and go to state 51
    INT             shift and go to state 50
    UINT            shift and go to state 64
    CHAR            shift and go to state 34
    DOUBLE          shift and go to state 13

    simple-type                    shift and go to state 347

state 308

    (134) modifier -> PRIVATE .

    CONST           reduce using rule 134 (modifier -> PRIVATE .)
    VOID            reduce using rule 134 (modifier -> PRIVATE .)
    BOOL            reduce using rule 134 (modifier -> PRIVATE .)
    INT             reduce using rule 134 (modifier -> PRIVATE .)
    UINT            reduce using rule 134 (modifier -> PRIVATE .)
    CHAR            reduce using rule 134 (modifier -> PRIVATE .)
    DOUBLE          reduce using rule 134 (modifier -> PRIVATE .)
    IDENTIFIER      reduce using rule 134 (modifier -> PRIVATE .)


state 309

    (238) destructor-declaration -> BITCOMP . IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body

    IDENTIFIER      shift and go to state 348


state 310

    (21) class-member-declaration -> method-declaration .

    CONST           reduce using rule 21 (class-member-declaration -> method-declaration .)
    BITCOMP         reduce using rule 21 (class-member-declaration -> method-declaration .)
    PUBLIC          reduce using rule 21 (class-member-declaration -> method-declaration .)
    PRIVATE         reduce using rule 21 (class-member-declaration -> method-declaration .)
    VOID            reduce using rule 21 (class-member-declaration -> method-declaration .)
    IDENTIFIER      reduce using rule 21 (class-member-declaration -> method-declaration .)
    BOOL            reduce using rule 21 (class-member-declaration -> method-declaration .)
    INT             reduce using rule 21 (class-member-declaration -> method-declaration .)
    UINT            reduce using rule 21 (class-member-declaration -> method-declaration .)
    CHAR            reduce using rule 21 (class-member-declaration -> method-declaration .)
    DOUBLE          reduce using rule 21 (class-member-declaration -> method-declaration .)
    BLOCK_END       reduce using rule 21 (class-member-declaration -> method-declaration .)


state 311

    (20) class-member-declaration -> field-declaration .

    CONST           reduce using rule 20 (class-member-declaration -> field-declaration .)
    BITCOMP         reduce using rule 20 (class-member-declaration -> field-declaration .)
    PUBLIC          reduce using rule 20 (class-member-declaration -> field-declaration .)
    PRIVATE         reduce using rule 20 (class-member-declaration -> field-declaration .)
    VOID            reduce using rule 20 (class-member-declaration -> field-declaration .)
    IDENTIFIER      reduce using rule 20 (class-member-declaration -> field-declaration .)
    BOOL            reduce using rule 20 (class-member-declaration -> field-declaration .)
    INT             reduce using rule 20 (class-member-declaration -> field-declaration .)
    UINT            reduce using rule 20 (class-member-declaration -> field-declaration .)
    CHAR            reduce using rule 20 (class-member-declaration -> field-declaration .)
    DOUBLE          reduce using rule 20 (class-member-declaration -> field-declaration .)
    BLOCK_END       reduce using rule 20 (class-member-declaration -> field-declaration .)


state 312

    (19) class-member-declaration -> constant-declaration .

    CONST           reduce using rule 19 (class-member-declaration -> constant-declaration .)
    BITCOMP         reduce using rule 19 (class-member-declaration -> constant-declaration .)
    PUBLIC          reduce using rule 19 (class-member-declaration -> constant-declaration .)
    PRIVATE         reduce using rule 19 (class-member-declaration -> constant-declaration .)
    VOID            reduce using rule 19 (class-member-declaration -> constant-declaration .)
    IDENTIFIER      reduce using rule 19 (class-member-declaration -> constant-declaration .)
    BOOL            reduce using rule 19 (class-member-declaration -> constant-declaration .)
    INT             reduce using rule 19 (class-member-declaration -> constant-declaration .)
    UINT            reduce using rule 19 (class-member-declaration -> constant-declaration .)
    CHAR            reduce using rule 19 (class-member-declaration -> constant-declaration .)
    DOUBLE          reduce using rule 19 (class-member-declaration -> constant-declaration .)
    BLOCK_END       reduce using rule 19 (class-member-declaration -> constant-declaration .)


state 313

    (132) field-declaration -> type . variable-declarators DELIM
    (142) method-header -> type . member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (135) variable-declarators -> . variable-declarator
    (136) variable-declarators -> . variable-declarators COMMA variable-declarator
    (146) member-name -> . IDENTIFIER
    (137) variable-declarator -> . IDENTIFIER
    (138) variable-declarator -> . IDENTIFIER ASSIGN variable-initializer

    IDENTIFIER      shift and go to state 351

    variable-declarator            shift and go to state 132
    variable-declarators           shift and go to state 349
    member-name                    shift and go to state 350

state 314

    (16) class-member-declarations-opt -> empty .

    BLOCK_END       reduce using rule 16 (class-member-declarations-opt -> empty .)


state 315

    (14) class-body -> BLOCK_BEGIN class-member-declarations-opt . BLOCK_END

    BLOCK_END       shift and go to state 352


state 316

    (22) class-member-declaration -> constructor-declaration .

    CONST           reduce using rule 22 (class-member-declaration -> constructor-declaration .)
    BITCOMP         reduce using rule 22 (class-member-declaration -> constructor-declaration .)
    PUBLIC          reduce using rule 22 (class-member-declaration -> constructor-declaration .)
    PRIVATE         reduce using rule 22 (class-member-declaration -> constructor-declaration .)
    VOID            reduce using rule 22 (class-member-declaration -> constructor-declaration .)
    IDENTIFIER      reduce using rule 22 (class-member-declaration -> constructor-declaration .)
    BOOL            reduce using rule 22 (class-member-declaration -> constructor-declaration .)
    INT             reduce using rule 22 (class-member-declaration -> constructor-declaration .)
    UINT            reduce using rule 22 (class-member-declaration -> constructor-declaration .)
    CHAR            reduce using rule 22 (class-member-declaration -> constructor-declaration .)
    DOUBLE          reduce using rule 22 (class-member-declaration -> constructor-declaration .)
    BLOCK_END       reduce using rule 22 (class-member-declaration -> constructor-declaration .)


state 317

    (15) class-member-declarations-opt -> class-member-declarations .
    (18) class-member-declarations -> class-member-declarations . class-member-declaration
    (19) class-member-declaration -> . constant-declaration
    (20) class-member-declaration -> . field-declaration
    (21) class-member-declaration -> . method-declaration
    (22) class-member-declaration -> . constructor-declaration
    (23) class-member-declaration -> . destructor-declaration
    (24) constant-declaration -> . modifier CONST simple-type constant-declarators DELIM
    (25) constant-declaration -> . CONST simple-type constant-declarators DELIM
    (131) field-declaration -> . modifier type variable-declarators DELIM
    (132) field-declaration -> . type variable-declarators DELIM
    (139) method-declaration -> . method-header method-body
    (234) constructor-declaration -> . constructor-declarator constructor-body
    (238) destructor-declaration -> . BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body
    (133) modifier -> . PUBLIC
    (134) modifier -> . PRIVATE
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (140) method-header -> . modifier type member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (141) method-header -> . modifier VOID member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (142) method-header -> . type member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (143) method-header -> . VOID member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (235) constructor-declarator -> . IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE
    (13) class-type -> . IDENTIFIER
    (34) array-type -> . simple-type OPEN_BRACKET CLOSE_BRACKET

    BLOCK_END       reduce using rule 15 (class-member-declarations-opt -> class-member-declarations .)
    CONST           shift and go to state 307
    BITCOMP         shift and go to state 309
    PUBLIC          shift and go to state 323
    PRIVATE         shift and go to state 308
    VOID            shift and go to state 306
    IDENTIFIER      shift and go to state 318
    BOOL            shift and go to state 51
    INT             shift and go to state 50
    UINT            shift and go to state 64
    CHAR            shift and go to state 34
    DOUBLE          shift and go to state 13

    array-type                     shift and go to state 45
    modifier                       shift and go to state 322
    method-header                  shift and go to state 305
    constructor-declaration        shift and go to state 316
    type                           shift and go to state 313
    constructor-declarator         shift and go to state 320
    method-declaration             shift and go to state 310
    class-member-declaration       shift and go to state 353
    field-declaration              shift and go to state 311
    class-type                     shift and go to state 68
    simple-type                    shift and go to state 54
    constant-declaration           shift and go to state 312
    destructor-declaration         shift and go to state 319

state 318

    (235) constructor-declarator -> IDENTIFIER . OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (13) class-type -> IDENTIFIER .

    OPEN_PAREN      shift and go to state 354
    IDENTIFIER      reduce using rule 13 (class-type -> IDENTIFIER .)


state 319

    (23) class-member-declaration -> destructor-declaration .

    CONST           reduce using rule 23 (class-member-declaration -> destructor-declaration .)
    BITCOMP         reduce using rule 23 (class-member-declaration -> destructor-declaration .)
    PUBLIC          reduce using rule 23 (class-member-declaration -> destructor-declaration .)
    PRIVATE         reduce using rule 23 (class-member-declaration -> destructor-declaration .)
    VOID            reduce using rule 23 (class-member-declaration -> destructor-declaration .)
    IDENTIFIER      reduce using rule 23 (class-member-declaration -> destructor-declaration .)
    BOOL            reduce using rule 23 (class-member-declaration -> destructor-declaration .)
    INT             reduce using rule 23 (class-member-declaration -> destructor-declaration .)
    UINT            reduce using rule 23 (class-member-declaration -> destructor-declaration .)
    CHAR            reduce using rule 23 (class-member-declaration -> destructor-declaration .)
    DOUBLE          reduce using rule 23 (class-member-declaration -> destructor-declaration .)
    BLOCK_END       reduce using rule 23 (class-member-declaration -> destructor-declaration .)


state 320

    (234) constructor-declaration -> constructor-declarator . constructor-body
    (236) constructor-body -> . block
    (237) constructor-body -> . DELIM
    (156) block -> . BLOCK_BEGIN statement-list-opt BLOCK_END

    DELIM           shift and go to state 356
    BLOCK_BEGIN     shift and go to state 57

    constructor-body               shift and go to state 355
    block                          shift and go to state 357

state 321

    (17) class-member-declarations -> class-member-declaration .

    CONST           reduce using rule 17 (class-member-declarations -> class-member-declaration .)
    BITCOMP         reduce using rule 17 (class-member-declarations -> class-member-declaration .)
    PUBLIC          reduce using rule 17 (class-member-declarations -> class-member-declaration .)
    PRIVATE         reduce using rule 17 (class-member-declarations -> class-member-declaration .)
    VOID            reduce using rule 17 (class-member-declarations -> class-member-declaration .)
    IDENTIFIER      reduce using rule 17 (class-member-declarations -> class-member-declaration .)
    BOOL            reduce using rule 17 (class-member-declarations -> class-member-declaration .)
    INT             reduce using rule 17 (class-member-declarations -> class-member-declaration .)
    UINT            reduce using rule 17 (class-member-declarations -> class-member-declaration .)
    CHAR            reduce using rule 17 (class-member-declarations -> class-member-declaration .)
    DOUBLE          reduce using rule 17 (class-member-declarations -> class-member-declaration .)
    BLOCK_END       reduce using rule 17 (class-member-declarations -> class-member-declaration .)


state 322

    (24) constant-declaration -> modifier . CONST simple-type constant-declarators DELIM
    (131) field-declaration -> modifier . type variable-declarators DELIM
    (140) method-header -> modifier . type member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (141) method-header -> modifier . VOID member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE
    (13) class-type -> . IDENTIFIER
    (34) array-type -> . simple-type OPEN_BRACKET CLOSE_BRACKET

    CONST           shift and go to state 358
    VOID            shift and go to state 359
    BOOL            shift and go to state 51
    INT             shift and go to state 50
    UINT            shift and go to state 64
    CHAR            shift and go to state 34
    DOUBLE          shift and go to state 13
    IDENTIFIER      shift and go to state 125

    array-type                     shift and go to state 45
    simple-type                    shift and go to state 54
    class-type                     shift and go to state 68
    type                           shift and go to state 360

state 323

    (133) modifier -> PUBLIC .

    CONST           reduce using rule 133 (modifier -> PUBLIC .)
    VOID            reduce using rule 133 (modifier -> PUBLIC .)
    BOOL            reduce using rule 133 (modifier -> PUBLIC .)
    INT             reduce using rule 133 (modifier -> PUBLIC .)
    UINT            reduce using rule 133 (modifier -> PUBLIC .)
    CHAR            reduce using rule 133 (modifier -> PUBLIC .)
    DOUBLE          reduce using rule 133 (modifier -> PUBLIC .)
    IDENTIFIER      reduce using rule 133 (modifier -> PUBLIC .)


state 324

    (171) write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 361


state 325

    (172) print-list -> expression .
    (173) print-list -> expression . COMMA print-list

    CLOSE_PAREN     reduce using rule 172 (print-list -> expression .)
    COMMA           shift and go to state 362


state 326

    (174) read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 363


state 327

    (191) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block .
    (192) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block . ELSE block

    IDENTIFIER      reduce using rule 191 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block .)
    BLOCK_BEGIN     reduce using rule 191 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block .)
    DELIM           reduce using rule 191 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block .)
    CONSOLE         reduce using rule 191 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block .)
    CONST           reduce using rule 191 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block .)
    IF              reduce using rule 191 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block .)
    SWITCH          reduce using rule 191 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block .)
    WHILE           reduce using rule 191 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block .)
    FOR             reduce using rule 191 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block .)
    FOREACH         reduce using rule 191 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block .)
    DO              reduce using rule 191 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block .)
    BREAK           reduce using rule 191 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block .)
    CONTINUE        reduce using rule 191 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block .)
    GOTO            reduce using rule 191 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block .)
    RETURN          reduce using rule 191 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block .)
    NEW             reduce using rule 191 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block .)
    INCRE           reduce using rule 191 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block .)
    DECRE           reduce using rule 191 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block .)
    BOOL            reduce using rule 191 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block .)
    INT             reduce using rule 191 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block .)
    UINT            reduce using rule 191 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block .)
    CHAR            reduce using rule 191 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block .)
    DOUBLE          reduce using rule 191 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block .)
    CASE            reduce using rule 191 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block .)
    DEFAULT         reduce using rule 191 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block .)
    BLOCK_END       reduce using rule 191 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block .)
    $end            reduce using rule 191 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block .)
    ELSE            shift and go to state 364


state 328

    (223) foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression . CLOSE_PAREN block

    CLOSE_PAREN     shift and go to state 365


state 329

    (80) array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET . array-initializer-opt
    (81) array-initializer-opt -> . array-initializer
    (82) array-initializer-opt -> . empty
    (85) array-initializer -> . BLOCK_BEGIN variable-initializer-list-opt BLOCK_END
    (245) empty -> .

    BLOCK_BEGIN     shift and go to state 268
    TIMES           reduce using rule 245 (empty -> .)
    DIV             reduce using rule 245 (empty -> .)
    MOD             reduce using rule 245 (empty -> .)
    PLUS            reduce using rule 245 (empty -> .)
    MINUS           reduce using rule 245 (empty -> .)
    LSHIFT          reduce using rule 245 (empty -> .)
    RSHIFT          reduce using rule 245 (empty -> .)
    LT              reduce using rule 245 (empty -> .)
    GT              reduce using rule 245 (empty -> .)
    LE              reduce using rule 245 (empty -> .)
    GE              reduce using rule 245 (empty -> .)
    EQ              reduce using rule 245 (empty -> .)
    NE              reduce using rule 245 (empty -> .)
    BITAND          reduce using rule 245 (empty -> .)
    BITXOR          reduce using rule 245 (empty -> .)
    BITOR           reduce using rule 245 (empty -> .)
    LOGAND          reduce using rule 245 (empty -> .)
    CONDOP          reduce using rule 245 (empty -> .)
    LOGOR           reduce using rule 245 (empty -> .)
    DELIM           reduce using rule 245 (empty -> .)
    CLOSE_BRACKET   reduce using rule 245 (empty -> .)
    COMMA           reduce using rule 245 (empty -> .)
    CLOSE_PAREN     reduce using rule 245 (empty -> .)
    COLON           reduce using rule 245 (empty -> .)
    BLOCK_END       reduce using rule 245 (empty -> .)

    array-initializer              shift and go to state 366
    array-initializer-opt          shift and go to state 367
    empty                          shift and go to state 368

state 330

    (41) conditional-expression -> conditional-or-expression CONDOP expression COLON expression .

    COMMA           reduce using rule 41 (conditional-expression -> conditional-or-expression CONDOP expression COLON expression .)
    DELIM           reduce using rule 41 (conditional-expression -> conditional-or-expression CONDOP expression COLON expression .)
    BLOCK_END       reduce using rule 41 (conditional-expression -> conditional-or-expression CONDOP expression COLON expression .)
    CLOSE_PAREN     reduce using rule 41 (conditional-expression -> conditional-or-expression CONDOP expression COLON expression .)
    CLOSE_BRACKET   reduce using rule 41 (conditional-expression -> conditional-or-expression CONDOP expression COLON expression .)
    COLON           reduce using rule 41 (conditional-expression -> conditional-or-expression CONDOP expression COLON expression .)


state 331

    (210) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM . for-iterator-opt CLOSE_PAREN block
    (218) for-iterator-opt -> . for-iterator
    (219) for-iterator-opt -> . empty
    (220) for-iterator -> . statement-expression-list
    (245) empty -> .
    (221) statement-expression-list -> . statement-expression
    (222) statement-expression-list -> . statement-expression-list COMMA statement-expression
    (182) statement-expression -> . invocation-expression
    (183) statement-expression -> . object-creation-expression
    (184) statement-expression -> . assignment
    (185) statement-expression -> . post-increment-expression
    (186) statement-expression -> . post-decrement-expression
    (187) statement-expression -> . pre-increment-expression
    (188) statement-expression -> . pre-decrement-expression
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (119) assignment -> . prim-expression assignment-operator expression
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET

    CLOSE_PAREN     reduce using rule 245 (empty -> .)
    IDENTIFIER      shift and go to state 287
    NEW             shift and go to state 37
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33

    post-increment-expression      shift and go to state 4
    member-access                  shift and go to state 2
    for-iterator-opt               shift and go to state 369
    prim-expression                shift and go to state 58
    element-access                 shift and go to state 20
    statement-expression           shift and go to state 203
    post-decrement-expression      shift and go to state 46
    statement-expression-list      shift and go to state 370
    empty                          shift and go to state 371
    assignment                     shift and go to state 62
    for-iterator                   shift and go to state 372
    object-creation-expression     shift and go to state 65
    pre-increment-expression       shift and go to state 66
    pre-decrement-expression       shift and go to state 25
    invocation-expression          shift and go to state 14

state 332

    (202) switch-label -> CASE . expression COLON
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (119) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) unary-expression -> . pre-increment-expression
    (77) unary-expression -> . pre-decrement-expression
    (78) primary-expression -> . array-creation-expression
    (79) primary-expression -> . primary-no-array-creation-expression
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (80) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (90) primary-no-array-creation-expression -> . literal
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (94) primary-no-array-creation-expression -> . element-access
    (95) primary-no-array-creation-expression -> . post-increment-expression
    (96) primary-no-array-creation-expression -> . post-decrement-expression
    (97) primary-no-array-creation-expression -> . object-creation-expression
    (241) literal -> . ICONST
    (242) literal -> . DCONST
    (243) literal -> . TRUE
    (244) literal -> . FALSE
    (98) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 94
    PLUS            shift and go to state 93
    MINUS           shift and go to state 84
    BITNOT          shift and go to state 113
    BITCOMP         shift and go to state 88
    TIMES           shift and go to state 99
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    NEW             shift and go to state 82
    ICONST          shift and go to state 101
    DCONST          shift and go to state 114
    TRUE            shift and go to state 107
    FALSE           shift and go to state 105
    OPEN_PAREN      shift and go to state 96

    unary-expression               shift and go to state 103
    exclusive-or-expression        shift and go to state 78
    member-access                  shift and go to state 79
    relational-expression          shift and go to state 80
    additive-expression            shift and go to state 83
    primary-no-array-creation-expression shift and go to state 100
    inclusive-or-expression        shift and go to state 86
    prim-expression                shift and go to state 77
    element-access                 shift and go to state 89
    literal                        shift and go to state 98
    conditional-expression         shift and go to state 90
    conditional-and-expression     shift and go to state 91
    post-decrement-expression      shift and go to state 92
    array-creation-expression      shift and go to state 81
    assignment                     shift and go to state 97
    post-increment-expression      shift and go to state 85
    object-creation-expression     shift and go to state 102
    pre-increment-expression       shift and go to state 106
    equality-expression            shift and go to state 87
    shift-expression               shift and go to state 108
    and-expression                 shift and go to state 109
    pre-decrement-expression       shift and go to state 110
    multiplicative-expression      shift and go to state 111
    conditional-or-expression      shift and go to state 117
    primary-expression             shift and go to state 115
    invocation-expression          shift and go to state 116
    expression                     shift and go to state 373
    parenthesized-expression       shift and go to state 118

state 333

    (203) switch-label -> DEFAULT . COLON

    COLON           shift and go to state 374


state 334

    (197) switch-sections -> switch-section .

    CASE            reduce using rule 197 (switch-sections -> switch-section .)
    DEFAULT         reduce using rule 197 (switch-sections -> switch-section .)
    BLOCK_END       reduce using rule 197 (switch-sections -> switch-section .)


state 335

    (199) switch-section -> switch-labels . statement-list
    (201) switch-labels -> switch-labels . switch-label
    (159) statement-list -> . statement
    (160) statement-list -> . statement-list statement
    (202) switch-label -> . CASE expression COLON
    (203) switch-label -> . DEFAULT COLON
    (161) statement -> . labeled-statement
    (162) statement -> . declaration-statement
    (163) statement -> . block
    (164) statement -> . empty-statement
    (165) statement -> . expression-statement
    (166) statement -> . selection-statement
    (167) statement -> . iteration-statement
    (168) statement -> . jump-statement
    (169) statement -> . write-statement
    (170) statement -> . read-statement
    (175) labeled-statement -> . IDENTIFIER COLON statement
    (176) declaration-statement -> . local-variable-declaration DELIM
    (177) declaration-statement -> . local-constant-declaration DELIM
    (156) block -> . BLOCK_BEGIN statement-list-opt BLOCK_END
    (180) empty-statement -> . DELIM
    (181) expression-statement -> . statement-expression DELIM
    (189) selection-statement -> . if-statement
    (190) selection-statement -> . switch-statement
    (204) iteration-statement -> . while-statement
    (205) iteration-statement -> . for-statement
    (206) iteration-statement -> . foreach-statement
    (207) iteration-statement -> . do-statement
    (224) jump-statement -> . break-statement
    (225) jump-statement -> . continue-statement
    (226) jump-statement -> . goto-statement
    (227) jump-statement -> . return-statement
    (171) write-statement -> . CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN
    (174) read-statement -> . CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN
    (178) local-variable-declaration -> . type variable-declarators
    (179) local-constant-declaration -> . CONST type constant-declarators
    (182) statement-expression -> . invocation-expression
    (183) statement-expression -> . object-creation-expression
    (184) statement-expression -> . assignment
    (185) statement-expression -> . post-increment-expression
    (186) statement-expression -> . post-decrement-expression
    (187) statement-expression -> . pre-increment-expression
    (188) statement-expression -> . pre-decrement-expression
    (191) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN block
    (192) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN block ELSE block
    (193) switch-statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block
    (208) while-statement -> . WHILE OPEN_PAREN expression CLOSE_PAREN block
    (210) for-statement -> . FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN block
    (223) foreach-statement -> . FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN block
    (209) do-statement -> . DO block WHILE OPEN_PAREN expression CLOSE_PAREN DELIM
    (228) break-statement -> . BREAK DELIM
    (229) continue-statement -> . CONTINUE DELIM
    (230) goto-statement -> . GOTO IDENTIFIER DELIM
    (231) return-statement -> . RETURN expression-opt DELIM
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (119) assignment -> . prim-expression assignment-operator expression
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE
    (13) class-type -> . IDENTIFIER
    (34) array-type -> . simple-type OPEN_BRACKET CLOSE_BRACKET
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET

    CASE            shift and go to state 332
    DEFAULT         shift and go to state 333
    IDENTIFIER      shift and go to state 42
    BLOCK_BEGIN     shift and go to state 57
    DELIM           shift and go to state 31
    CONSOLE         shift and go to state 61
    CONST           shift and go to state 56
    IF              shift and go to state 67
    SWITCH          shift and go to state 40
    WHILE           shift and go to state 35
    FOR             shift and go to state 23
    FOREACH         shift and go to state 9
    DO              shift and go to state 55
    BREAK           shift and go to state 49
    CONTINUE        shift and go to state 29
    GOTO            shift and go to state 7
    RETURN          shift and go to state 15
    NEW             shift and go to state 37
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    BOOL            shift and go to state 51
    INT             shift and go to state 50
    UINT            shift and go to state 64
    CHAR            shift and go to state 34
    DOUBLE          shift and go to state 13

    return-statement               shift and go to state 17
    prim-expression                shift and go to state 58
    write-statement                shift and go to state 1
    member-access                  shift and go to state 2
    selection-statement            shift and go to state 32
    empty-statement                shift and go to state 36
    expression-statement           shift and go to state 3
    pre-decrement-expression       shift and go to state 25
    foreach-statement              shift and go to state 19
    break-statement                shift and go to state 38
    post-increment-expression      shift and go to state 4
    element-access                 shift and go to state 20
    statement-expression           shift and go to state 39
    local-constant-declaration     shift and go to state 21
    switch-label                   shift and go to state 375
    statement                      shift and go to state 41
    assignment                     shift and go to state 62
    for-statement                  shift and go to state 6
    type                           shift and go to state 43
    read-statement                 shift and go to state 60
    do-statement                   shift and go to state 22
    array-type                     shift and go to state 45
    continue-statement             shift and go to state 24
    invocation-expression          shift and go to state 14
    labeled-statement              shift and go to state 8
    declaration-statement          shift and go to state 47
    object-creation-expression     shift and go to state 65
    post-decrement-expression      shift and go to state 46
    switch-statement               shift and go to state 10
    pre-increment-expression       shift and go to state 66
    iteration-statement            shift and go to state 48
    jump-statement                 shift and go to state 11
    local-variable-declaration     shift and go to state 26
    goto-statement                 shift and go to state 27
    if-statement                   shift and go to state 28
    statement-list                 shift and go to state 376
    class-type                     shift and go to state 68
    while-statement                shift and go to state 53
    simple-type                    shift and go to state 54
    block                          shift and go to state 30

state 336

    (194) switch-block -> BLOCK_BEGIN switch-sections-opt . BLOCK_END

    BLOCK_END       shift and go to state 377


state 337

    (195) switch-sections-opt -> switch-sections .
    (198) switch-sections -> switch-sections . switch-section
    (199) switch-section -> . switch-labels statement-list
    (200) switch-labels -> . switch-label
    (201) switch-labels -> . switch-labels switch-label
    (202) switch-label -> . CASE expression COLON
    (203) switch-label -> . DEFAULT COLON

    BLOCK_END       reduce using rule 195 (switch-sections-opt -> switch-sections .)
    CASE            shift and go to state 332
    DEFAULT         shift and go to state 333

    switch-section                 shift and go to state 378
    switch-labels                  shift and go to state 335
    switch-label                   shift and go to state 339

state 338

    (196) switch-sections-opt -> empty .

    BLOCK_END       reduce using rule 196 (switch-sections-opt -> empty .)


state 339

    (200) switch-labels -> switch-label .

    CASE            reduce using rule 200 (switch-labels -> switch-label .)
    DEFAULT         reduce using rule 200 (switch-labels -> switch-label .)
    IDENTIFIER      reduce using rule 200 (switch-labels -> switch-label .)
    BLOCK_BEGIN     reduce using rule 200 (switch-labels -> switch-label .)
    DELIM           reduce using rule 200 (switch-labels -> switch-label .)
    CONSOLE         reduce using rule 200 (switch-labels -> switch-label .)
    CONST           reduce using rule 200 (switch-labels -> switch-label .)
    IF              reduce using rule 200 (switch-labels -> switch-label .)
    SWITCH          reduce using rule 200 (switch-labels -> switch-label .)
    WHILE           reduce using rule 200 (switch-labels -> switch-label .)
    FOR             reduce using rule 200 (switch-labels -> switch-label .)
    FOREACH         reduce using rule 200 (switch-labels -> switch-label .)
    DO              reduce using rule 200 (switch-labels -> switch-label .)
    BREAK           reduce using rule 200 (switch-labels -> switch-label .)
    CONTINUE        reduce using rule 200 (switch-labels -> switch-label .)
    GOTO            reduce using rule 200 (switch-labels -> switch-label .)
    RETURN          reduce using rule 200 (switch-labels -> switch-label .)
    NEW             reduce using rule 200 (switch-labels -> switch-label .)
    INCRE           reduce using rule 200 (switch-labels -> switch-label .)
    DECRE           reduce using rule 200 (switch-labels -> switch-label .)
    BOOL            reduce using rule 200 (switch-labels -> switch-label .)
    INT             reduce using rule 200 (switch-labels -> switch-label .)
    UINT            reduce using rule 200 (switch-labels -> switch-label .)
    CHAR            reduce using rule 200 (switch-labels -> switch-label .)
    DOUBLE          reduce using rule 200 (switch-labels -> switch-label .)


state 340

    (85) array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .

    COMMA           reduce using rule 85 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    DELIM           reduce using rule 85 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    TIMES           reduce using rule 85 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    DIV             reduce using rule 85 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    MOD             reduce using rule 85 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    PLUS            reduce using rule 85 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    MINUS           reduce using rule 85 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    LSHIFT          reduce using rule 85 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    RSHIFT          reduce using rule 85 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    LT              reduce using rule 85 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    GT              reduce using rule 85 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    LE              reduce using rule 85 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    GE              reduce using rule 85 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    EQ              reduce using rule 85 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    NE              reduce using rule 85 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    BITAND          reduce using rule 85 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    BITXOR          reduce using rule 85 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    BITOR           reduce using rule 85 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    LOGAND          reduce using rule 85 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    CONDOP          reduce using rule 85 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    LOGOR           reduce using rule 85 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    CLOSE_BRACKET   reduce using rule 85 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    CLOSE_PAREN     reduce using rule 85 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    COLON           reduce using rule 85 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    BLOCK_END       reduce using rule 85 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)


state 341

    (209) do-statement -> DO block WHILE OPEN_PAREN expression CLOSE_PAREN . DELIM

    DELIM           shift and go to state 379


state 342

    (155) method-body -> DELIM .

    CONST           reduce using rule 155 (method-body -> DELIM .)
    BITCOMP         reduce using rule 155 (method-body -> DELIM .)
    PUBLIC          reduce using rule 155 (method-body -> DELIM .)
    PRIVATE         reduce using rule 155 (method-body -> DELIM .)
    VOID            reduce using rule 155 (method-body -> DELIM .)
    IDENTIFIER      reduce using rule 155 (method-body -> DELIM .)
    BOOL            reduce using rule 155 (method-body -> DELIM .)
    INT             reduce using rule 155 (method-body -> DELIM .)
    UINT            reduce using rule 155 (method-body -> DELIM .)
    CHAR            reduce using rule 155 (method-body -> DELIM .)
    DOUBLE          reduce using rule 155 (method-body -> DELIM .)
    BLOCK_END       reduce using rule 155 (method-body -> DELIM .)


state 343

    (139) method-declaration -> method-header method-body .

    CONST           reduce using rule 139 (method-declaration -> method-header method-body .)
    BITCOMP         reduce using rule 139 (method-declaration -> method-header method-body .)
    PUBLIC          reduce using rule 139 (method-declaration -> method-header method-body .)
    PRIVATE         reduce using rule 139 (method-declaration -> method-header method-body .)
    VOID            reduce using rule 139 (method-declaration -> method-header method-body .)
    IDENTIFIER      reduce using rule 139 (method-declaration -> method-header method-body .)
    BOOL            reduce using rule 139 (method-declaration -> method-header method-body .)
    INT             reduce using rule 139 (method-declaration -> method-header method-body .)
    UINT            reduce using rule 139 (method-declaration -> method-header method-body .)
    CHAR            reduce using rule 139 (method-declaration -> method-header method-body .)
    DOUBLE          reduce using rule 139 (method-declaration -> method-header method-body .)
    BLOCK_END       reduce using rule 139 (method-declaration -> method-header method-body .)


state 344

    (154) method-body -> block .

    CONST           reduce using rule 154 (method-body -> block .)
    BITCOMP         reduce using rule 154 (method-body -> block .)
    PUBLIC          reduce using rule 154 (method-body -> block .)
    PRIVATE         reduce using rule 154 (method-body -> block .)
    VOID            reduce using rule 154 (method-body -> block .)
    IDENTIFIER      reduce using rule 154 (method-body -> block .)
    BOOL            reduce using rule 154 (method-body -> block .)
    INT             reduce using rule 154 (method-body -> block .)
    UINT            reduce using rule 154 (method-body -> block .)
    CHAR            reduce using rule 154 (method-body -> block .)
    DOUBLE          reduce using rule 154 (method-body -> block .)
    BLOCK_END       reduce using rule 154 (method-body -> block .)


state 345

    (143) method-header -> VOID member-name . OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN

    OPEN_PAREN      shift and go to state 380


state 346

    (146) member-name -> IDENTIFIER .

    OPEN_PAREN      reduce using rule 146 (member-name -> IDENTIFIER .)


state 347

    (25) constant-declaration -> CONST simple-type . constant-declarators DELIM
    (35) constant-declarators -> . constant-declarator
    (36) constant-declarators -> . constant-declarators COMMA constant-declarator
    (37) constant-declarator -> . IDENTIFIER ASSIGN expression

    IDENTIFIER      shift and go to state 220

    constant-declarators           shift and go to state 381
    constant-declarator            shift and go to state 221

state 348

    (238) destructor-declaration -> BITCOMP IDENTIFIER . OPEN_PAREN CLOSE_PAREN destructor-body

    OPEN_PAREN      shift and go to state 382


state 349

    (132) field-declaration -> type variable-declarators . DELIM
    (136) variable-declarators -> variable-declarators . COMMA variable-declarator

    DELIM           shift and go to state 383
    COMMA           shift and go to state 215


state 350

    (142) method-header -> type member-name . OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN

    OPEN_PAREN      shift and go to state 384


state 351

    (146) member-name -> IDENTIFIER .
    (137) variable-declarator -> IDENTIFIER .
    (138) variable-declarator -> IDENTIFIER . ASSIGN variable-initializer

    OPEN_PAREN      reduce using rule 146 (member-name -> IDENTIFIER .)
    DELIM           reduce using rule 137 (variable-declarator -> IDENTIFIER .)
    COMMA           reduce using rule 137 (variable-declarator -> IDENTIFIER .)
    ASSIGN          shift and go to state 216


state 352

    (14) class-body -> BLOCK_BEGIN class-member-declarations-opt BLOCK_END .

    DELIM           reduce using rule 14 (class-body -> BLOCK_BEGIN class-member-declarations-opt BLOCK_END .)
    CLASS           reduce using rule 14 (class-body -> BLOCK_BEGIN class-member-declarations-opt BLOCK_END .)
    $end            reduce using rule 14 (class-body -> BLOCK_BEGIN class-member-declarations-opt BLOCK_END .)


state 353

    (18) class-member-declarations -> class-member-declarations class-member-declaration .

    CONST           reduce using rule 18 (class-member-declarations -> class-member-declarations class-member-declaration .)
    BITCOMP         reduce using rule 18 (class-member-declarations -> class-member-declarations class-member-declaration .)
    PUBLIC          reduce using rule 18 (class-member-declarations -> class-member-declarations class-member-declaration .)
    PRIVATE         reduce using rule 18 (class-member-declarations -> class-member-declarations class-member-declaration .)
    VOID            reduce using rule 18 (class-member-declarations -> class-member-declarations class-member-declaration .)
    IDENTIFIER      reduce using rule 18 (class-member-declarations -> class-member-declarations class-member-declaration .)
    BOOL            reduce using rule 18 (class-member-declarations -> class-member-declarations class-member-declaration .)
    INT             reduce using rule 18 (class-member-declarations -> class-member-declarations class-member-declaration .)
    UINT            reduce using rule 18 (class-member-declarations -> class-member-declarations class-member-declaration .)
    CHAR            reduce using rule 18 (class-member-declarations -> class-member-declarations class-member-declaration .)
    DOUBLE          reduce using rule 18 (class-member-declarations -> class-member-declarations class-member-declaration .)
    BLOCK_END       reduce using rule 18 (class-member-declarations -> class-member-declarations class-member-declaration .)


state 354

    (235) constructor-declarator -> IDENTIFIER OPEN_PAREN . formal-parameter-list-opt CLOSE_PAREN
    (144) formal-parameter-list-opt -> . formal-parameter-list
    (145) formal-parameter-list-opt -> . empty
    (147) formal-parameter-list -> . fixed-parameters
    (245) empty -> .
    (148) fixed-parameters -> . fixed-parameter
    (149) fixed-parameters -> . fixed-parameters COMMA fixed-parameter
    (150) fixed-parameter -> . parameter-modifier-opt type IDENTIFIER
    (151) parameter-modifier-opt -> . parameter-modifier
    (152) parameter-modifier-opt -> . empty
    (153) parameter-modifier -> . OUT

    CLOSE_PAREN     reduce using rule 245 (empty -> .)
    BOOL            reduce using rule 245 (empty -> .)
    INT             reduce using rule 245 (empty -> .)
    UINT            reduce using rule 245 (empty -> .)
    CHAR            reduce using rule 245 (empty -> .)
    DOUBLE          reduce using rule 245 (empty -> .)
    IDENTIFIER      reduce using rule 245 (empty -> .)
    OUT             shift and go to state 388

    parameter-modifier             shift and go to state 385
    fixed-parameters               shift and go to state 387
    formal-parameter-list-opt      shift and go to state 389
    parameter-modifier-opt         shift and go to state 386
    formal-parameter-list          shift and go to state 392
    empty                          shift and go to state 391
    fixed-parameter                shift and go to state 390

state 355

    (234) constructor-declaration -> constructor-declarator constructor-body .

    CONST           reduce using rule 234 (constructor-declaration -> constructor-declarator constructor-body .)
    BITCOMP         reduce using rule 234 (constructor-declaration -> constructor-declarator constructor-body .)
    PUBLIC          reduce using rule 234 (constructor-declaration -> constructor-declarator constructor-body .)
    PRIVATE         reduce using rule 234 (constructor-declaration -> constructor-declarator constructor-body .)
    VOID            reduce using rule 234 (constructor-declaration -> constructor-declarator constructor-body .)
    IDENTIFIER      reduce using rule 234 (constructor-declaration -> constructor-declarator constructor-body .)
    BOOL            reduce using rule 234 (constructor-declaration -> constructor-declarator constructor-body .)
    INT             reduce using rule 234 (constructor-declaration -> constructor-declarator constructor-body .)
    UINT            reduce using rule 234 (constructor-declaration -> constructor-declarator constructor-body .)
    CHAR            reduce using rule 234 (constructor-declaration -> constructor-declarator constructor-body .)
    DOUBLE          reduce using rule 234 (constructor-declaration -> constructor-declarator constructor-body .)
    BLOCK_END       reduce using rule 234 (constructor-declaration -> constructor-declarator constructor-body .)


state 356

    (237) constructor-body -> DELIM .

    CONST           reduce using rule 237 (constructor-body -> DELIM .)
    BITCOMP         reduce using rule 237 (constructor-body -> DELIM .)
    PUBLIC          reduce using rule 237 (constructor-body -> DELIM .)
    PRIVATE         reduce using rule 237 (constructor-body -> DELIM .)
    VOID            reduce using rule 237 (constructor-body -> DELIM .)
    IDENTIFIER      reduce using rule 237 (constructor-body -> DELIM .)
    BOOL            reduce using rule 237 (constructor-body -> DELIM .)
    INT             reduce using rule 237 (constructor-body -> DELIM .)
    UINT            reduce using rule 237 (constructor-body -> DELIM .)
    CHAR            reduce using rule 237 (constructor-body -> DELIM .)
    DOUBLE          reduce using rule 237 (constructor-body -> DELIM .)
    BLOCK_END       reduce using rule 237 (constructor-body -> DELIM .)


state 357

    (236) constructor-body -> block .

    CONST           reduce using rule 236 (constructor-body -> block .)
    BITCOMP         reduce using rule 236 (constructor-body -> block .)
    PUBLIC          reduce using rule 236 (constructor-body -> block .)
    PRIVATE         reduce using rule 236 (constructor-body -> block .)
    VOID            reduce using rule 236 (constructor-body -> block .)
    IDENTIFIER      reduce using rule 236 (constructor-body -> block .)
    BOOL            reduce using rule 236 (constructor-body -> block .)
    INT             reduce using rule 236 (constructor-body -> block .)
    UINT            reduce using rule 236 (constructor-body -> block .)
    CHAR            reduce using rule 236 (constructor-body -> block .)
    DOUBLE          reduce using rule 236 (constructor-body -> block .)
    BLOCK_END       reduce using rule 236 (constructor-body -> block .)


state 358

    (24) constant-declaration -> modifier CONST . simple-type constant-declarators DELIM
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE

    BOOL            shift and go to state 51
    INT             shift and go to state 50
    UINT            shift and go to state 64
    CHAR            shift and go to state 34
    DOUBLE          shift and go to state 13

    simple-type                    shift and go to state 393

state 359

    (141) method-header -> modifier VOID . member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (146) member-name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 346

    member-name                    shift and go to state 394

state 360

    (131) field-declaration -> modifier type . variable-declarators DELIM
    (140) method-header -> modifier type . member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (135) variable-declarators -> . variable-declarator
    (136) variable-declarators -> . variable-declarators COMMA variable-declarator
    (146) member-name -> . IDENTIFIER
    (137) variable-declarator -> . IDENTIFIER
    (138) variable-declarator -> . IDENTIFIER ASSIGN variable-initializer

    IDENTIFIER      shift and go to state 351

    variable-declarator            shift and go to state 132
    variable-declarators           shift and go to state 395
    member-name                    shift and go to state 396

state 361

    (171) write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN .

    IDENTIFIER      reduce using rule 171 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN .)
    BLOCK_BEGIN     reduce using rule 171 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN .)
    DELIM           reduce using rule 171 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN .)
    CONSOLE         reduce using rule 171 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN .)
    CONST           reduce using rule 171 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN .)
    IF              reduce using rule 171 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN .)
    SWITCH          reduce using rule 171 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN .)
    WHILE           reduce using rule 171 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN .)
    FOR             reduce using rule 171 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN .)
    FOREACH         reduce using rule 171 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN .)
    DO              reduce using rule 171 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN .)
    BREAK           reduce using rule 171 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN .)
    CONTINUE        reduce using rule 171 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN .)
    GOTO            reduce using rule 171 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN .)
    RETURN          reduce using rule 171 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN .)
    NEW             reduce using rule 171 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN .)
    INCRE           reduce using rule 171 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN .)
    DECRE           reduce using rule 171 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN .)
    BOOL            reduce using rule 171 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN .)
    INT             reduce using rule 171 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN .)
    UINT            reduce using rule 171 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN .)
    CHAR            reduce using rule 171 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN .)
    DOUBLE          reduce using rule 171 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN .)
    $end            reduce using rule 171 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN .)
    BLOCK_END       reduce using rule 171 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN .)
    CASE            reduce using rule 171 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN .)
    DEFAULT         reduce using rule 171 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN .)


state 362

    (173) print-list -> expression COMMA . print-list
    (172) print-list -> . expression
    (173) print-list -> . expression COMMA print-list
    (38) expression -> . conditional-expression
    (39) expression -> . assignment
    (40) conditional-expression -> . conditional-or-expression
    (41) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (119) assignment -> . prim-expression assignment-operator expression
    (42) conditional-or-expression -> . conditional-and-expression
    (43) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access
    (44) conditional-and-expression -> . inclusive-or-expression
    (45) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET
    (46) inclusive-or-expression -> . exclusive-or-expression
    (47) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (48) exclusive-or-expression -> . and-expression
    (49) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (50) and-expression -> . equality-expression
    (51) and-expression -> . and-expression BITAND equality-expression
    (52) equality-expression -> . relational-expression
    (53) equality-expression -> . equality-expression EQ relational-expression
    (54) equality-expression -> . equality-expression NE relational-expression
    (55) relational-expression -> . shift-expression
    (56) relational-expression -> . relational-expression LT shift-expression
    (57) relational-expression -> . relational-expression GT shift-expression
    (58) relational-expression -> . relational-expression LE shift-expression
    (59) relational-expression -> . relational-expression GE shift-expression
    (60) shift-expression -> . additive-expression
    (61) shift-expression -> . shift-expression LSHIFT additive-expression
    (62) shift-expression -> . shift-expression RSHIFT additive-expression
    (63) additive-expression -> . multiplicative-expression
    (64) additive-expression -> . additive-expression PLUS multiplicative-expression
    (65) additive-expression -> . additive-expression MINUS multiplicative-expression
    (66) multiplicative-expression -> . unary-expression
    (67) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (68) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (69) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (70) unary-expression -> . primary-expression
    (71) unary-expression -> . PLUS unary-expression
    (72) unary-expression -> . MINUS unary-expression
    (73) unary-expression -> . BITNOT unary-expression
    (74) unary-expression -> . BITCOMP unary-expression
    (75) unary-expression -> . TIMES unary-expression
    (76) unary-expression -> . pre-increment-expression
    (77) unary-expression -> . pre-decrement-expression
    (78) primary-expression -> . array-creation-expression
    (79) primary-expression -> . primary-no-array-creation-expression
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (80) array-creation-expression -> . NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt
    (90) primary-no-array-creation-expression -> . literal
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (94) primary-no-array-creation-expression -> . element-access
    (95) primary-no-array-creation-expression -> . post-increment-expression
    (96) primary-no-array-creation-expression -> . post-decrement-expression
    (97) primary-no-array-creation-expression -> . object-creation-expression
    (241) literal -> . ICONST
    (242) literal -> . DCONST
    (243) literal -> . TRUE
    (244) literal -> . FALSE
    (98) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 94
    PLUS            shift and go to state 93
    MINUS           shift and go to state 84
    BITNOT          shift and go to state 113
    BITCOMP         shift and go to state 88
    TIMES           shift and go to state 99
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    NEW             shift and go to state 82
    ICONST          shift and go to state 101
    DCONST          shift and go to state 114
    TRUE            shift and go to state 107
    FALSE           shift and go to state 105
    OPEN_PAREN      shift and go to state 96

    unary-expression               shift and go to state 103
    exclusive-or-expression        shift and go to state 78
    member-access                  shift and go to state 79
    relational-expression          shift and go to state 80
    additive-expression            shift and go to state 83
    primary-no-array-creation-expression shift and go to state 100
    inclusive-or-expression        shift and go to state 86
    prim-expression                shift and go to state 77
    element-access                 shift and go to state 89
    literal                        shift and go to state 98
    conditional-expression         shift and go to state 90
    conditional-and-expression     shift and go to state 91
    post-decrement-expression      shift and go to state 92
    array-creation-expression      shift and go to state 81
    assignment                     shift and go to state 97
    post-increment-expression      shift and go to state 85
    object-creation-expression     shift and go to state 102
    and-expression                 shift and go to state 109
    pre-increment-expression       shift and go to state 106
    equality-expression            shift and go to state 87
    shift-expression               shift and go to state 108
    print-list                     shift and go to state 397
    pre-decrement-expression       shift and go to state 110
    multiplicative-expression      shift and go to state 111
    conditional-or-expression      shift and go to state 117
    primary-expression             shift and go to state 115
    invocation-expression          shift and go to state 116
    expression                     shift and go to state 325
    parenthesized-expression       shift and go to state 118

state 363

    (174) read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN .

    IDENTIFIER      reduce using rule 174 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN .)
    BLOCK_BEGIN     reduce using rule 174 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN .)
    DELIM           reduce using rule 174 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN .)
    CONSOLE         reduce using rule 174 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN .)
    CONST           reduce using rule 174 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN .)
    IF              reduce using rule 174 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN .)
    SWITCH          reduce using rule 174 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN .)
    WHILE           reduce using rule 174 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN .)
    FOR             reduce using rule 174 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN .)
    FOREACH         reduce using rule 174 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN .)
    DO              reduce using rule 174 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN .)
    BREAK           reduce using rule 174 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN .)
    CONTINUE        reduce using rule 174 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN .)
    GOTO            reduce using rule 174 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN .)
    RETURN          reduce using rule 174 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN .)
    NEW             reduce using rule 174 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN .)
    INCRE           reduce using rule 174 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN .)
    DECRE           reduce using rule 174 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN .)
    BOOL            reduce using rule 174 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN .)
    INT             reduce using rule 174 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN .)
    UINT            reduce using rule 174 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN .)
    CHAR            reduce using rule 174 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN .)
    DOUBLE          reduce using rule 174 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN .)
    CASE            reduce using rule 174 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN .)
    DEFAULT         reduce using rule 174 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN .)
    BLOCK_END       reduce using rule 174 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN .)
    $end            reduce using rule 174 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN .)


state 364

    (192) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block ELSE . block
    (156) block -> . BLOCK_BEGIN statement-list-opt BLOCK_END

    BLOCK_BEGIN     shift and go to state 57

    block                          shift and go to state 398

state 365

    (223) foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN . block
    (156) block -> . BLOCK_BEGIN statement-list-opt BLOCK_END

    BLOCK_BEGIN     shift and go to state 57

    block                          shift and go to state 399

state 366

    (81) array-initializer-opt -> array-initializer .

    TIMES           reduce using rule 81 (array-initializer-opt -> array-initializer .)
    DIV             reduce using rule 81 (array-initializer-opt -> array-initializer .)
    MOD             reduce using rule 81 (array-initializer-opt -> array-initializer .)
    PLUS            reduce using rule 81 (array-initializer-opt -> array-initializer .)
    MINUS           reduce using rule 81 (array-initializer-opt -> array-initializer .)
    LSHIFT          reduce using rule 81 (array-initializer-opt -> array-initializer .)
    RSHIFT          reduce using rule 81 (array-initializer-opt -> array-initializer .)
    LT              reduce using rule 81 (array-initializer-opt -> array-initializer .)
    GT              reduce using rule 81 (array-initializer-opt -> array-initializer .)
    LE              reduce using rule 81 (array-initializer-opt -> array-initializer .)
    GE              reduce using rule 81 (array-initializer-opt -> array-initializer .)
    EQ              reduce using rule 81 (array-initializer-opt -> array-initializer .)
    NE              reduce using rule 81 (array-initializer-opt -> array-initializer .)
    BITAND          reduce using rule 81 (array-initializer-opt -> array-initializer .)
    BITXOR          reduce using rule 81 (array-initializer-opt -> array-initializer .)
    BITOR           reduce using rule 81 (array-initializer-opt -> array-initializer .)
    LOGAND          reduce using rule 81 (array-initializer-opt -> array-initializer .)
    CONDOP          reduce using rule 81 (array-initializer-opt -> array-initializer .)
    LOGOR           reduce using rule 81 (array-initializer-opt -> array-initializer .)
    DELIM           reduce using rule 81 (array-initializer-opt -> array-initializer .)
    CLOSE_BRACKET   reduce using rule 81 (array-initializer-opt -> array-initializer .)
    COMMA           reduce using rule 81 (array-initializer-opt -> array-initializer .)
    CLOSE_PAREN     reduce using rule 81 (array-initializer-opt -> array-initializer .)
    COLON           reduce using rule 81 (array-initializer-opt -> array-initializer .)
    BLOCK_END       reduce using rule 81 (array-initializer-opt -> array-initializer .)


state 367

    (80) array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .

    TIMES           reduce using rule 80 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    DIV             reduce using rule 80 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    MOD             reduce using rule 80 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    PLUS            reduce using rule 80 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    MINUS           reduce using rule 80 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    LSHIFT          reduce using rule 80 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    RSHIFT          reduce using rule 80 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    LT              reduce using rule 80 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    GT              reduce using rule 80 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    LE              reduce using rule 80 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    GE              reduce using rule 80 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    EQ              reduce using rule 80 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    NE              reduce using rule 80 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    BITAND          reduce using rule 80 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    BITXOR          reduce using rule 80 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    BITOR           reduce using rule 80 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    LOGAND          reduce using rule 80 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    CONDOP          reduce using rule 80 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    LOGOR           reduce using rule 80 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    CLOSE_BRACKET   reduce using rule 80 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    COMMA           reduce using rule 80 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    BLOCK_END       reduce using rule 80 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    DELIM           reduce using rule 80 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    CLOSE_PAREN     reduce using rule 80 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)
    COLON           reduce using rule 80 (array-creation-expression -> NEW simple-type OPEN_BRACKET expression-list CLOSE_BRACKET array-initializer-opt .)


state 368

    (82) array-initializer-opt -> empty .

    TIMES           reduce using rule 82 (array-initializer-opt -> empty .)
    DIV             reduce using rule 82 (array-initializer-opt -> empty .)
    MOD             reduce using rule 82 (array-initializer-opt -> empty .)
    PLUS            reduce using rule 82 (array-initializer-opt -> empty .)
    MINUS           reduce using rule 82 (array-initializer-opt -> empty .)
    LSHIFT          reduce using rule 82 (array-initializer-opt -> empty .)
    RSHIFT          reduce using rule 82 (array-initializer-opt -> empty .)
    LT              reduce using rule 82 (array-initializer-opt -> empty .)
    GT              reduce using rule 82 (array-initializer-opt -> empty .)
    LE              reduce using rule 82 (array-initializer-opt -> empty .)
    GE              reduce using rule 82 (array-initializer-opt -> empty .)
    EQ              reduce using rule 82 (array-initializer-opt -> empty .)
    NE              reduce using rule 82 (array-initializer-opt -> empty .)
    BITAND          reduce using rule 82 (array-initializer-opt -> empty .)
    BITXOR          reduce using rule 82 (array-initializer-opt -> empty .)
    BITOR           reduce using rule 82 (array-initializer-opt -> empty .)
    LOGAND          reduce using rule 82 (array-initializer-opt -> empty .)
    CONDOP          reduce using rule 82 (array-initializer-opt -> empty .)
    LOGOR           reduce using rule 82 (array-initializer-opt -> empty .)
    DELIM           reduce using rule 82 (array-initializer-opt -> empty .)
    CLOSE_BRACKET   reduce using rule 82 (array-initializer-opt -> empty .)
    COMMA           reduce using rule 82 (array-initializer-opt -> empty .)
    CLOSE_PAREN     reduce using rule 82 (array-initializer-opt -> empty .)
    COLON           reduce using rule 82 (array-initializer-opt -> empty .)
    BLOCK_END       reduce using rule 82 (array-initializer-opt -> empty .)


state 369

    (210) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt . CLOSE_PAREN block

    CLOSE_PAREN     shift and go to state 400


state 370

    (220) for-iterator -> statement-expression-list .
    (222) statement-expression-list -> statement-expression-list . COMMA statement-expression

    CLOSE_PAREN     reduce using rule 220 (for-iterator -> statement-expression-list .)
    COMMA           shift and go to state 260


state 371

    (219) for-iterator-opt -> empty .

    CLOSE_PAREN     reduce using rule 219 (for-iterator-opt -> empty .)


state 372

    (218) for-iterator-opt -> for-iterator .

    CLOSE_PAREN     reduce using rule 218 (for-iterator-opt -> for-iterator .)


state 373

    (202) switch-label -> CASE expression . COLON

    COLON           shift and go to state 401


state 374

    (203) switch-label -> DEFAULT COLON .

    CASE            reduce using rule 203 (switch-label -> DEFAULT COLON .)
    DEFAULT         reduce using rule 203 (switch-label -> DEFAULT COLON .)
    IDENTIFIER      reduce using rule 203 (switch-label -> DEFAULT COLON .)
    BLOCK_BEGIN     reduce using rule 203 (switch-label -> DEFAULT COLON .)
    DELIM           reduce using rule 203 (switch-label -> DEFAULT COLON .)
    CONSOLE         reduce using rule 203 (switch-label -> DEFAULT COLON .)
    CONST           reduce using rule 203 (switch-label -> DEFAULT COLON .)
    IF              reduce using rule 203 (switch-label -> DEFAULT COLON .)
    SWITCH          reduce using rule 203 (switch-label -> DEFAULT COLON .)
    WHILE           reduce using rule 203 (switch-label -> DEFAULT COLON .)
    FOR             reduce using rule 203 (switch-label -> DEFAULT COLON .)
    FOREACH         reduce using rule 203 (switch-label -> DEFAULT COLON .)
    DO              reduce using rule 203 (switch-label -> DEFAULT COLON .)
    BREAK           reduce using rule 203 (switch-label -> DEFAULT COLON .)
    CONTINUE        reduce using rule 203 (switch-label -> DEFAULT COLON .)
    GOTO            reduce using rule 203 (switch-label -> DEFAULT COLON .)
    RETURN          reduce using rule 203 (switch-label -> DEFAULT COLON .)
    NEW             reduce using rule 203 (switch-label -> DEFAULT COLON .)
    INCRE           reduce using rule 203 (switch-label -> DEFAULT COLON .)
    DECRE           reduce using rule 203 (switch-label -> DEFAULT COLON .)
    BOOL            reduce using rule 203 (switch-label -> DEFAULT COLON .)
    INT             reduce using rule 203 (switch-label -> DEFAULT COLON .)
    UINT            reduce using rule 203 (switch-label -> DEFAULT COLON .)
    CHAR            reduce using rule 203 (switch-label -> DEFAULT COLON .)
    DOUBLE          reduce using rule 203 (switch-label -> DEFAULT COLON .)


state 375

    (201) switch-labels -> switch-labels switch-label .

    CASE            reduce using rule 201 (switch-labels -> switch-labels switch-label .)
    DEFAULT         reduce using rule 201 (switch-labels -> switch-labels switch-label .)
    IDENTIFIER      reduce using rule 201 (switch-labels -> switch-labels switch-label .)
    BLOCK_BEGIN     reduce using rule 201 (switch-labels -> switch-labels switch-label .)
    DELIM           reduce using rule 201 (switch-labels -> switch-labels switch-label .)
    CONSOLE         reduce using rule 201 (switch-labels -> switch-labels switch-label .)
    CONST           reduce using rule 201 (switch-labels -> switch-labels switch-label .)
    IF              reduce using rule 201 (switch-labels -> switch-labels switch-label .)
    SWITCH          reduce using rule 201 (switch-labels -> switch-labels switch-label .)
    WHILE           reduce using rule 201 (switch-labels -> switch-labels switch-label .)
    FOR             reduce using rule 201 (switch-labels -> switch-labels switch-label .)
    FOREACH         reduce using rule 201 (switch-labels -> switch-labels switch-label .)
    DO              reduce using rule 201 (switch-labels -> switch-labels switch-label .)
    BREAK           reduce using rule 201 (switch-labels -> switch-labels switch-label .)
    CONTINUE        reduce using rule 201 (switch-labels -> switch-labels switch-label .)
    GOTO            reduce using rule 201 (switch-labels -> switch-labels switch-label .)
    RETURN          reduce using rule 201 (switch-labels -> switch-labels switch-label .)
    NEW             reduce using rule 201 (switch-labels -> switch-labels switch-label .)
    INCRE           reduce using rule 201 (switch-labels -> switch-labels switch-label .)
    DECRE           reduce using rule 201 (switch-labels -> switch-labels switch-label .)
    BOOL            reduce using rule 201 (switch-labels -> switch-labels switch-label .)
    INT             reduce using rule 201 (switch-labels -> switch-labels switch-label .)
    UINT            reduce using rule 201 (switch-labels -> switch-labels switch-label .)
    CHAR            reduce using rule 201 (switch-labels -> switch-labels switch-label .)
    DOUBLE          reduce using rule 201 (switch-labels -> switch-labels switch-label .)


state 376

    (199) switch-section -> switch-labels statement-list .
    (160) statement-list -> statement-list . statement
    (161) statement -> . labeled-statement
    (162) statement -> . declaration-statement
    (163) statement -> . block
    (164) statement -> . empty-statement
    (165) statement -> . expression-statement
    (166) statement -> . selection-statement
    (167) statement -> . iteration-statement
    (168) statement -> . jump-statement
    (169) statement -> . write-statement
    (170) statement -> . read-statement
    (175) labeled-statement -> . IDENTIFIER COLON statement
    (176) declaration-statement -> . local-variable-declaration DELIM
    (177) declaration-statement -> . local-constant-declaration DELIM
    (156) block -> . BLOCK_BEGIN statement-list-opt BLOCK_END
    (180) empty-statement -> . DELIM
    (181) expression-statement -> . statement-expression DELIM
    (189) selection-statement -> . if-statement
    (190) selection-statement -> . switch-statement
    (204) iteration-statement -> . while-statement
    (205) iteration-statement -> . for-statement
    (206) iteration-statement -> . foreach-statement
    (207) iteration-statement -> . do-statement
    (224) jump-statement -> . break-statement
    (225) jump-statement -> . continue-statement
    (226) jump-statement -> . goto-statement
    (227) jump-statement -> . return-statement
    (171) write-statement -> . CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN
    (174) read-statement -> . CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN
    (178) local-variable-declaration -> . type variable-declarators
    (179) local-constant-declaration -> . CONST type constant-declarators
    (182) statement-expression -> . invocation-expression
    (183) statement-expression -> . object-creation-expression
    (184) statement-expression -> . assignment
    (185) statement-expression -> . post-increment-expression
    (186) statement-expression -> . post-decrement-expression
    (187) statement-expression -> . pre-increment-expression
    (188) statement-expression -> . pre-decrement-expression
    (191) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN block
    (192) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN block ELSE block
    (193) switch-statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block
    (208) while-statement -> . WHILE OPEN_PAREN expression CLOSE_PAREN block
    (210) for-statement -> . FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN block
    (223) foreach-statement -> . FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN block
    (209) do-statement -> . DO block WHILE OPEN_PAREN expression CLOSE_PAREN DELIM
    (228) break-statement -> . BREAK DELIM
    (229) continue-statement -> . CONTINUE DELIM
    (230) goto-statement -> . GOTO IDENTIFIER DELIM
    (231) return-statement -> . RETURN expression-opt DELIM
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (100) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (101) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (116) object-creation-expression -> . NEW type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (119) assignment -> . prim-expression assignment-operator expression
    (114) post-increment-expression -> . prim-expression INCRE
    (115) post-decrement-expression -> . prim-expression DECRE
    (117) pre-increment-expression -> . INCRE prim-expression
    (118) pre-decrement-expression -> . DECRE prim-expression
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE
    (13) class-type -> . IDENTIFIER
    (34) array-type -> . simple-type OPEN_BRACKET CLOSE_BRACKET
    (99) member-access -> . prim-expression DOT IDENTIFIER
    (111) prim-expression -> . IDENTIFIER
    (112) prim-expression -> . member-access
    (113) prim-expression -> . element-access
    (109) element-access -> . IDENTIFIER OPEN_BRACKET expression-list CLOSE_BRACKET
    (110) element-access -> . member-access OPEN_BRACKET expression-list CLOSE_BRACKET

    CASE            reduce using rule 199 (switch-section -> switch-labels statement-list .)
    DEFAULT         reduce using rule 199 (switch-section -> switch-labels statement-list .)
    BLOCK_END       reduce using rule 199 (switch-section -> switch-labels statement-list .)
    IDENTIFIER      shift and go to state 42
    BLOCK_BEGIN     shift and go to state 57
    DELIM           shift and go to state 31
    CONSOLE         shift and go to state 61
    CONST           shift and go to state 56
    IF              shift and go to state 67
    SWITCH          shift and go to state 40
    WHILE           shift and go to state 35
    FOR             shift and go to state 23
    FOREACH         shift and go to state 9
    DO              shift and go to state 55
    BREAK           shift and go to state 49
    CONTINUE        shift and go to state 29
    GOTO            shift and go to state 7
    RETURN          shift and go to state 15
    NEW             shift and go to state 37
    INCRE           shift and go to state 5
    DECRE           shift and go to state 33
    BOOL            shift and go to state 51
    INT             shift and go to state 50
    UINT            shift and go to state 64
    CHAR            shift and go to state 34
    DOUBLE          shift and go to state 13

    return-statement               shift and go to state 17
    prim-expression                shift and go to state 58
    write-statement                shift and go to state 1
    member-access                  shift and go to state 2
    selection-statement            shift and go to state 32
    empty-statement                shift and go to state 36
    expression-statement           shift and go to state 3
    pre-decrement-expression       shift and go to state 25
    foreach-statement              shift and go to state 19
    break-statement                shift and go to state 38
    post-increment-expression      shift and go to state 4
    element-access                 shift and go to state 20
    statement-expression           shift and go to state 39
    local-constant-declaration     shift and go to state 21
    statement                      shift and go to state 136
    assignment                     shift and go to state 62
    for-statement                  shift and go to state 6
    type                           shift and go to state 43
    read-statement                 shift and go to state 60
    do-statement                   shift and go to state 22
    array-type                     shift and go to state 45
    continue-statement             shift and go to state 24
    invocation-expression          shift and go to state 14
    labeled-statement              shift and go to state 8
    declaration-statement          shift and go to state 47
    object-creation-expression     shift and go to state 65
    post-decrement-expression      shift and go to state 46
    switch-statement               shift and go to state 10
    pre-increment-expression       shift and go to state 66
    jump-statement                 shift and go to state 11
    iteration-statement            shift and go to state 48
    local-variable-declaration     shift and go to state 26
    goto-statement                 shift and go to state 27
    if-statement                   shift and go to state 28
    class-type                     shift and go to state 68
    while-statement                shift and go to state 53
    simple-type                    shift and go to state 54
    block                          shift and go to state 30

state 377

    (194) switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .

    IDENTIFIER      reduce using rule 194 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    BLOCK_BEGIN     reduce using rule 194 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    DELIM           reduce using rule 194 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    CONSOLE         reduce using rule 194 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    CONST           reduce using rule 194 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    IF              reduce using rule 194 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    SWITCH          reduce using rule 194 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    WHILE           reduce using rule 194 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    FOR             reduce using rule 194 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    FOREACH         reduce using rule 194 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    DO              reduce using rule 194 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    BREAK           reduce using rule 194 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    CONTINUE        reduce using rule 194 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    GOTO            reduce using rule 194 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    RETURN          reduce using rule 194 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    NEW             reduce using rule 194 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    INCRE           reduce using rule 194 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    DECRE           reduce using rule 194 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    BOOL            reduce using rule 194 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    INT             reduce using rule 194 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    UINT            reduce using rule 194 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    CHAR            reduce using rule 194 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    DOUBLE          reduce using rule 194 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    $end            reduce using rule 194 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    BLOCK_END       reduce using rule 194 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    CASE            reduce using rule 194 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    DEFAULT         reduce using rule 194 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)


state 378

    (198) switch-sections -> switch-sections switch-section .

    CASE            reduce using rule 198 (switch-sections -> switch-sections switch-section .)
    DEFAULT         reduce using rule 198 (switch-sections -> switch-sections switch-section .)
    BLOCK_END       reduce using rule 198 (switch-sections -> switch-sections switch-section .)


state 379

    (209) do-statement -> DO block WHILE OPEN_PAREN expression CLOSE_PAREN DELIM .

    IDENTIFIER      reduce using rule 209 (do-statement -> DO block WHILE OPEN_PAREN expression CLOSE_PAREN DELIM .)
    BLOCK_BEGIN     reduce using rule 209 (do-statement -> DO block WHILE OPEN_PAREN expression CLOSE_PAREN DELIM .)
    DELIM           reduce using rule 209 (do-statement -> DO block WHILE OPEN_PAREN expression CLOSE_PAREN DELIM .)
    CONSOLE         reduce using rule 209 (do-statement -> DO block WHILE OPEN_PAREN expression CLOSE_PAREN DELIM .)
    CONST           reduce using rule 209 (do-statement -> DO block WHILE OPEN_PAREN expression CLOSE_PAREN DELIM .)
    IF              reduce using rule 209 (do-statement -> DO block WHILE OPEN_PAREN expression CLOSE_PAREN DELIM .)
    SWITCH          reduce using rule 209 (do-statement -> DO block WHILE OPEN_PAREN expression CLOSE_PAREN DELIM .)
    WHILE           reduce using rule 209 (do-statement -> DO block WHILE OPEN_PAREN expression CLOSE_PAREN DELIM .)
    FOR             reduce using rule 209 (do-statement -> DO block WHILE OPEN_PAREN expression CLOSE_PAREN DELIM .)
    FOREACH         reduce using rule 209 (do-statement -> DO block WHILE OPEN_PAREN expression CLOSE_PAREN DELIM .)
    DO              reduce using rule 209 (do-statement -> DO block WHILE OPEN_PAREN expression CLOSE_PAREN DELIM .)
    BREAK           reduce using rule 209 (do-statement -> DO block WHILE OPEN_PAREN expression CLOSE_PAREN DELIM .)
    CONTINUE        reduce using rule 209 (do-statement -> DO block WHILE OPEN_PAREN expression CLOSE_PAREN DELIM .)
    GOTO            reduce using rule 209 (do-statement -> DO block WHILE OPEN_PAREN expression CLOSE_PAREN DELIM .)
    RETURN          reduce using rule 209 (do-statement -> DO block WHILE OPEN_PAREN expression CLOSE_PAREN DELIM .)
    NEW             reduce using rule 209 (do-statement -> DO block WHILE OPEN_PAREN expression CLOSE_PAREN DELIM .)
    INCRE           reduce using rule 209 (do-statement -> DO block WHILE OPEN_PAREN expression CLOSE_PAREN DELIM .)
    DECRE           reduce using rule 209 (do-statement -> DO block WHILE OPEN_PAREN expression CLOSE_PAREN DELIM .)
    BOOL            reduce using rule 209 (do-statement -> DO block WHILE OPEN_PAREN expression CLOSE_PAREN DELIM .)
    INT             reduce using rule 209 (do-statement -> DO block WHILE OPEN_PAREN expression CLOSE_PAREN DELIM .)
    UINT            reduce using rule 209 (do-statement -> DO block WHILE OPEN_PAREN expression CLOSE_PAREN DELIM .)
    CHAR            reduce using rule 209 (do-statement -> DO block WHILE OPEN_PAREN expression CLOSE_PAREN DELIM .)
    DOUBLE          reduce using rule 209 (do-statement -> DO block WHILE OPEN_PAREN expression CLOSE_PAREN DELIM .)
    BLOCK_END       reduce using rule 209 (do-statement -> DO block WHILE OPEN_PAREN expression CLOSE_PAREN DELIM .)
    CASE            reduce using rule 209 (do-statement -> DO block WHILE OPEN_PAREN expression CLOSE_PAREN DELIM .)
    DEFAULT         reduce using rule 209 (do-statement -> DO block WHILE OPEN_PAREN expression CLOSE_PAREN DELIM .)
    $end            reduce using rule 209 (do-statement -> DO block WHILE OPEN_PAREN expression CLOSE_PAREN DELIM .)


state 380

    (143) method-header -> VOID member-name OPEN_PAREN . formal-parameter-list-opt CLOSE_PAREN
    (144) formal-parameter-list-opt -> . formal-parameter-list
    (145) formal-parameter-list-opt -> . empty
    (147) formal-parameter-list -> . fixed-parameters
    (245) empty -> .
    (148) fixed-parameters -> . fixed-parameter
    (149) fixed-parameters -> . fixed-parameters COMMA fixed-parameter
    (150) fixed-parameter -> . parameter-modifier-opt type IDENTIFIER
    (151) parameter-modifier-opt -> . parameter-modifier
    (152) parameter-modifier-opt -> . empty
    (153) parameter-modifier -> . OUT

    CLOSE_PAREN     reduce using rule 245 (empty -> .)
    BOOL            reduce using rule 245 (empty -> .)
    INT             reduce using rule 245 (empty -> .)
    UINT            reduce using rule 245 (empty -> .)
    CHAR            reduce using rule 245 (empty -> .)
    DOUBLE          reduce using rule 245 (empty -> .)
    IDENTIFIER      reduce using rule 245 (empty -> .)
    OUT             shift and go to state 388

    parameter-modifier             shift and go to state 385
    fixed-parameters               shift and go to state 387
    formal-parameter-list-opt      shift and go to state 402
    parameter-modifier-opt         shift and go to state 386
    formal-parameter-list          shift and go to state 392
    empty                          shift and go to state 391
    fixed-parameter                shift and go to state 390

state 381

    (25) constant-declaration -> CONST simple-type constant-declarators . DELIM
    (36) constant-declarators -> constant-declarators . COMMA constant-declarator

    DELIM           shift and go to state 403
    COMMA           shift and go to state 273


state 382

    (238) destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN . CLOSE_PAREN destructor-body

    CLOSE_PAREN     shift and go to state 404


state 383

    (132) field-declaration -> type variable-declarators DELIM .

    CONST           reduce using rule 132 (field-declaration -> type variable-declarators DELIM .)
    BITCOMP         reduce using rule 132 (field-declaration -> type variable-declarators DELIM .)
    PUBLIC          reduce using rule 132 (field-declaration -> type variable-declarators DELIM .)
    PRIVATE         reduce using rule 132 (field-declaration -> type variable-declarators DELIM .)
    VOID            reduce using rule 132 (field-declaration -> type variable-declarators DELIM .)
    IDENTIFIER      reduce using rule 132 (field-declaration -> type variable-declarators DELIM .)
    BOOL            reduce using rule 132 (field-declaration -> type variable-declarators DELIM .)
    INT             reduce using rule 132 (field-declaration -> type variable-declarators DELIM .)
    UINT            reduce using rule 132 (field-declaration -> type variable-declarators DELIM .)
    CHAR            reduce using rule 132 (field-declaration -> type variable-declarators DELIM .)
    DOUBLE          reduce using rule 132 (field-declaration -> type variable-declarators DELIM .)
    BLOCK_END       reduce using rule 132 (field-declaration -> type variable-declarators DELIM .)


state 384

    (142) method-header -> type member-name OPEN_PAREN . formal-parameter-list-opt CLOSE_PAREN
    (144) formal-parameter-list-opt -> . formal-parameter-list
    (145) formal-parameter-list-opt -> . empty
    (147) formal-parameter-list -> . fixed-parameters
    (245) empty -> .
    (148) fixed-parameters -> . fixed-parameter
    (149) fixed-parameters -> . fixed-parameters COMMA fixed-parameter
    (150) fixed-parameter -> . parameter-modifier-opt type IDENTIFIER
    (151) parameter-modifier-opt -> . parameter-modifier
    (152) parameter-modifier-opt -> . empty
    (153) parameter-modifier -> . OUT

    CLOSE_PAREN     reduce using rule 245 (empty -> .)
    BOOL            reduce using rule 245 (empty -> .)
    INT             reduce using rule 245 (empty -> .)
    UINT            reduce using rule 245 (empty -> .)
    CHAR            reduce using rule 245 (empty -> .)
    DOUBLE          reduce using rule 245 (empty -> .)
    IDENTIFIER      reduce using rule 245 (empty -> .)
    OUT             shift and go to state 388

    parameter-modifier             shift and go to state 385
    fixed-parameters               shift and go to state 387
    formal-parameter-list-opt      shift and go to state 405
    parameter-modifier-opt         shift and go to state 386
    fixed-parameter                shift and go to state 390
    empty                          shift and go to state 391
    formal-parameter-list          shift and go to state 392

state 385

    (151) parameter-modifier-opt -> parameter-modifier .

    BOOL            reduce using rule 151 (parameter-modifier-opt -> parameter-modifier .)
    INT             reduce using rule 151 (parameter-modifier-opt -> parameter-modifier .)
    UINT            reduce using rule 151 (parameter-modifier-opt -> parameter-modifier .)
    CHAR            reduce using rule 151 (parameter-modifier-opt -> parameter-modifier .)
    DOUBLE          reduce using rule 151 (parameter-modifier-opt -> parameter-modifier .)
    IDENTIFIER      reduce using rule 151 (parameter-modifier-opt -> parameter-modifier .)


state 386

    (150) fixed-parameter -> parameter-modifier-opt . type IDENTIFIER
    (26) type -> . simple-type
    (27) type -> . class-type
    (28) type -> . array-type
    (29) simple-type -> . BOOL
    (30) simple-type -> . INT
    (31) simple-type -> . UINT
    (32) simple-type -> . CHAR
    (33) simple-type -> . DOUBLE
    (13) class-type -> . IDENTIFIER
    (34) array-type -> . simple-type OPEN_BRACKET CLOSE_BRACKET

    BOOL            shift and go to state 51
    INT             shift and go to state 50
    UINT            shift and go to state 64
    CHAR            shift and go to state 34
    DOUBLE          shift and go to state 13
    IDENTIFIER      shift and go to state 125

    simple-type                    shift and go to state 54
    array-type                     shift and go to state 45
    class-type                     shift and go to state 68
    type                           shift and go to state 406

state 387

    (147) formal-parameter-list -> fixed-parameters .
    (149) fixed-parameters -> fixed-parameters . COMMA fixed-parameter

    CLOSE_PAREN     reduce using rule 147 (formal-parameter-list -> fixed-parameters .)
    COMMA           shift and go to state 407


state 388

    (153) parameter-modifier -> OUT .

    BOOL            reduce using rule 153 (parameter-modifier -> OUT .)
    INT             reduce using rule 153 (parameter-modifier -> OUT .)
    UINT            reduce using rule 153 (parameter-modifier -> OUT .)
    CHAR            reduce using rule 153 (parameter-modifier -> OUT .)
    DOUBLE          reduce using rule 153 (parameter-modifier -> OUT .)
    IDENTIFIER      reduce using rule 153 (parameter-modifier -> OUT .)


state 389

    (235) constructor-declarator -> IDENTIFIER OPEN_PAREN formal-parameter-list-opt . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 408


state 390

    (148) fixed-parameters -> fixed-parameter .

    COMMA           reduce using rule 148 (fixed-parameters -> fixed-parameter .)
    CLOSE_PAREN     reduce using rule 148 (fixed-parameters -> fixed-parameter .)


state 391

    (145) formal-parameter-list-opt -> empty .
    (152) parameter-modifier-opt -> empty .

    CLOSE_PAREN     reduce using rule 145 (formal-parameter-list-opt -> empty .)
    BOOL            reduce using rule 152 (parameter-modifier-opt -> empty .)
    INT             reduce using rule 152 (parameter-modifier-opt -> empty .)
    UINT            reduce using rule 152 (parameter-modifier-opt -> empty .)
    CHAR            reduce using rule 152 (parameter-modifier-opt -> empty .)
    DOUBLE          reduce using rule 152 (parameter-modifier-opt -> empty .)
    IDENTIFIER      reduce using rule 152 (parameter-modifier-opt -> empty .)


state 392

    (144) formal-parameter-list-opt -> formal-parameter-list .

    CLOSE_PAREN     reduce using rule 144 (formal-parameter-list-opt -> formal-parameter-list .)


state 393

    (24) constant-declaration -> modifier CONST simple-type . constant-declarators DELIM
    (35) constant-declarators -> . constant-declarator
    (36) constant-declarators -> . constant-declarators COMMA constant-declarator
    (37) constant-declarator -> . IDENTIFIER ASSIGN expression

    IDENTIFIER      shift and go to state 220

    constant-declarators           shift and go to state 409
    constant-declarator            shift and go to state 221

state 394

    (141) method-header -> modifier VOID member-name . OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN

    OPEN_PAREN      shift and go to state 410


state 395

    (131) field-declaration -> modifier type variable-declarators . DELIM
    (136) variable-declarators -> variable-declarators . COMMA variable-declarator

    DELIM           shift and go to state 411
    COMMA           shift and go to state 215


state 396

    (140) method-header -> modifier type member-name . OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN

    OPEN_PAREN      shift and go to state 412


state 397

    (173) print-list -> expression COMMA print-list .

    CLOSE_PAREN     reduce using rule 173 (print-list -> expression COMMA print-list .)


state 398

    (192) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block ELSE block .

    IDENTIFIER      reduce using rule 192 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block ELSE block .)
    BLOCK_BEGIN     reduce using rule 192 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block ELSE block .)
    DELIM           reduce using rule 192 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block ELSE block .)
    CONSOLE         reduce using rule 192 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block ELSE block .)
    CONST           reduce using rule 192 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block ELSE block .)
    IF              reduce using rule 192 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block ELSE block .)
    SWITCH          reduce using rule 192 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block ELSE block .)
    WHILE           reduce using rule 192 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block ELSE block .)
    FOR             reduce using rule 192 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block ELSE block .)
    FOREACH         reduce using rule 192 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block ELSE block .)
    DO              reduce using rule 192 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block ELSE block .)
    BREAK           reduce using rule 192 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block ELSE block .)
    CONTINUE        reduce using rule 192 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block ELSE block .)
    GOTO            reduce using rule 192 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block ELSE block .)
    RETURN          reduce using rule 192 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block ELSE block .)
    NEW             reduce using rule 192 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block ELSE block .)
    INCRE           reduce using rule 192 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block ELSE block .)
    DECRE           reduce using rule 192 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block ELSE block .)
    BOOL            reduce using rule 192 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block ELSE block .)
    INT             reduce using rule 192 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block ELSE block .)
    UINT            reduce using rule 192 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block ELSE block .)
    CHAR            reduce using rule 192 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block ELSE block .)
    DOUBLE          reduce using rule 192 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block ELSE block .)
    CASE            reduce using rule 192 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block ELSE block .)
    DEFAULT         reduce using rule 192 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block ELSE block .)
    BLOCK_END       reduce using rule 192 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block ELSE block .)
    $end            reduce using rule 192 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN block ELSE block .)


state 399

    (223) foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN block .

    IDENTIFIER      reduce using rule 223 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN block .)
    BLOCK_BEGIN     reduce using rule 223 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN block .)
    DELIM           reduce using rule 223 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN block .)
    CONSOLE         reduce using rule 223 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN block .)
    CONST           reduce using rule 223 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN block .)
    IF              reduce using rule 223 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN block .)
    SWITCH          reduce using rule 223 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN block .)
    WHILE           reduce using rule 223 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN block .)
    FOR             reduce using rule 223 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN block .)
    FOREACH         reduce using rule 223 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN block .)
    DO              reduce using rule 223 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN block .)
    BREAK           reduce using rule 223 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN block .)
    CONTINUE        reduce using rule 223 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN block .)
    GOTO            reduce using rule 223 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN block .)
    RETURN          reduce using rule 223 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN block .)
    NEW             reduce using rule 223 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN block .)
    INCRE           reduce using rule 223 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN block .)
    DECRE           reduce using rule 223 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN block .)
    BOOL            reduce using rule 223 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN block .)
    INT             reduce using rule 223 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN block .)
    UINT            reduce using rule 223 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN block .)
    CHAR            reduce using rule 223 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN block .)
    DOUBLE          reduce using rule 223 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN block .)
    $end            reduce using rule 223 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN block .)
    BLOCK_END       reduce using rule 223 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN block .)
    CASE            reduce using rule 223 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN block .)
    DEFAULT         reduce using rule 223 (foreach-statement -> FOREACH OPEN_PAREN type IDENTIFIER IN expression CLOSE_PAREN block .)


state 400

    (210) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN . block
    (156) block -> . BLOCK_BEGIN statement-list-opt BLOCK_END

    BLOCK_BEGIN     shift and go to state 57

    block                          shift and go to state 413

state 401

    (202) switch-label -> CASE expression COLON .

    CASE            reduce using rule 202 (switch-label -> CASE expression COLON .)
    DEFAULT         reduce using rule 202 (switch-label -> CASE expression COLON .)
    IDENTIFIER      reduce using rule 202 (switch-label -> CASE expression COLON .)
    BLOCK_BEGIN     reduce using rule 202 (switch-label -> CASE expression COLON .)
    DELIM           reduce using rule 202 (switch-label -> CASE expression COLON .)
    CONSOLE         reduce using rule 202 (switch-label -> CASE expression COLON .)
    CONST           reduce using rule 202 (switch-label -> CASE expression COLON .)
    IF              reduce using rule 202 (switch-label -> CASE expression COLON .)
    SWITCH          reduce using rule 202 (switch-label -> CASE expression COLON .)
    WHILE           reduce using rule 202 (switch-label -> CASE expression COLON .)
    FOR             reduce using rule 202 (switch-label -> CASE expression COLON .)
    FOREACH         reduce using rule 202 (switch-label -> CASE expression COLON .)
    DO              reduce using rule 202 (switch-label -> CASE expression COLON .)
    BREAK           reduce using rule 202 (switch-label -> CASE expression COLON .)
    CONTINUE        reduce using rule 202 (switch-label -> CASE expression COLON .)
    GOTO            reduce using rule 202 (switch-label -> CASE expression COLON .)
    RETURN          reduce using rule 202 (switch-label -> CASE expression COLON .)
    NEW             reduce using rule 202 (switch-label -> CASE expression COLON .)
    INCRE           reduce using rule 202 (switch-label -> CASE expression COLON .)
    DECRE           reduce using rule 202 (switch-label -> CASE expression COLON .)
    BOOL            reduce using rule 202 (switch-label -> CASE expression COLON .)
    INT             reduce using rule 202 (switch-label -> CASE expression COLON .)
    UINT            reduce using rule 202 (switch-label -> CASE expression COLON .)
    CHAR            reduce using rule 202 (switch-label -> CASE expression COLON .)
    DOUBLE          reduce using rule 202 (switch-label -> CASE expression COLON .)


state 402

    (143) method-header -> VOID member-name OPEN_PAREN formal-parameter-list-opt . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 414


state 403

    (25) constant-declaration -> CONST simple-type constant-declarators DELIM .

    CONST           reduce using rule 25 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    BITCOMP         reduce using rule 25 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    PUBLIC          reduce using rule 25 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    PRIVATE         reduce using rule 25 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    VOID            reduce using rule 25 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    IDENTIFIER      reduce using rule 25 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    BOOL            reduce using rule 25 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    INT             reduce using rule 25 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    UINT            reduce using rule 25 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    CHAR            reduce using rule 25 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    DOUBLE          reduce using rule 25 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    BLOCK_END       reduce using rule 25 (constant-declaration -> CONST simple-type constant-declarators DELIM .)


state 404

    (238) destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN . destructor-body
    (239) destructor-body -> . block
    (240) destructor-body -> . DELIM
    (156) block -> . BLOCK_BEGIN statement-list-opt BLOCK_END

    DELIM           shift and go to state 415
    BLOCK_BEGIN     shift and go to state 57

    destructor-body                shift and go to state 416
    block                          shift and go to state 417

state 405

    (142) method-header -> type member-name OPEN_PAREN formal-parameter-list-opt . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 418


state 406

    (150) fixed-parameter -> parameter-modifier-opt type . IDENTIFIER

    IDENTIFIER      shift and go to state 419


state 407

    (149) fixed-parameters -> fixed-parameters COMMA . fixed-parameter
    (150) fixed-parameter -> . parameter-modifier-opt type IDENTIFIER
    (151) parameter-modifier-opt -> . parameter-modifier
    (152) parameter-modifier-opt -> . empty
    (153) parameter-modifier -> . OUT
    (245) empty -> .

    OUT             shift and go to state 388
    BOOL            reduce using rule 245 (empty -> .)
    INT             reduce using rule 245 (empty -> .)
    UINT            reduce using rule 245 (empty -> .)
    CHAR            reduce using rule 245 (empty -> .)
    DOUBLE          reduce using rule 245 (empty -> .)
    IDENTIFIER      reduce using rule 245 (empty -> .)

    parameter-modifier             shift and go to state 385
    parameter-modifier-opt         shift and go to state 386
    empty                          shift and go to state 420
    fixed-parameter                shift and go to state 421

state 408

    (235) constructor-declarator -> IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .

    DELIM           reduce using rule 235 (constructor-declarator -> IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)
    BLOCK_BEGIN     reduce using rule 235 (constructor-declarator -> IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)


state 409

    (24) constant-declaration -> modifier CONST simple-type constant-declarators . DELIM
    (36) constant-declarators -> constant-declarators . COMMA constant-declarator

    DELIM           shift and go to state 422
    COMMA           shift and go to state 273


state 410

    (141) method-header -> modifier VOID member-name OPEN_PAREN . formal-parameter-list-opt CLOSE_PAREN
    (144) formal-parameter-list-opt -> . formal-parameter-list
    (145) formal-parameter-list-opt -> . empty
    (147) formal-parameter-list -> . fixed-parameters
    (245) empty -> .
    (148) fixed-parameters -> . fixed-parameter
    (149) fixed-parameters -> . fixed-parameters COMMA fixed-parameter
    (150) fixed-parameter -> . parameter-modifier-opt type IDENTIFIER
    (151) parameter-modifier-opt -> . parameter-modifier
    (152) parameter-modifier-opt -> . empty
    (153) parameter-modifier -> . OUT

    CLOSE_PAREN     reduce using rule 245 (empty -> .)
    BOOL            reduce using rule 245 (empty -> .)
    INT             reduce using rule 245 (empty -> .)
    UINT            reduce using rule 245 (empty -> .)
    CHAR            reduce using rule 245 (empty -> .)
    DOUBLE          reduce using rule 245 (empty -> .)
    IDENTIFIER      reduce using rule 245 (empty -> .)
    OUT             shift and go to state 388

    parameter-modifier             shift and go to state 385
    parameter-modifier-opt         shift and go to state 386
    fixed-parameters               shift and go to state 387
    formal-parameter-list-opt      shift and go to state 423
    fixed-parameter                shift and go to state 390
    empty                          shift and go to state 391
    formal-parameter-list          shift and go to state 392

state 411

    (131) field-declaration -> modifier type variable-declarators DELIM .

    CONST           reduce using rule 131 (field-declaration -> modifier type variable-declarators DELIM .)
    BITCOMP         reduce using rule 131 (field-declaration -> modifier type variable-declarators DELIM .)
    PUBLIC          reduce using rule 131 (field-declaration -> modifier type variable-declarators DELIM .)
    PRIVATE         reduce using rule 131 (field-declaration -> modifier type variable-declarators DELIM .)
    VOID            reduce using rule 131 (field-declaration -> modifier type variable-declarators DELIM .)
    IDENTIFIER      reduce using rule 131 (field-declaration -> modifier type variable-declarators DELIM .)
    BOOL            reduce using rule 131 (field-declaration -> modifier type variable-declarators DELIM .)
    INT             reduce using rule 131 (field-declaration -> modifier type variable-declarators DELIM .)
    UINT            reduce using rule 131 (field-declaration -> modifier type variable-declarators DELIM .)
    CHAR            reduce using rule 131 (field-declaration -> modifier type variable-declarators DELIM .)
    DOUBLE          reduce using rule 131 (field-declaration -> modifier type variable-declarators DELIM .)
    BLOCK_END       reduce using rule 131 (field-declaration -> modifier type variable-declarators DELIM .)


state 412

    (140) method-header -> modifier type member-name OPEN_PAREN . formal-parameter-list-opt CLOSE_PAREN
    (144) formal-parameter-list-opt -> . formal-parameter-list
    (145) formal-parameter-list-opt -> . empty
    (147) formal-parameter-list -> . fixed-parameters
    (245) empty -> .
    (148) fixed-parameters -> . fixed-parameter
    (149) fixed-parameters -> . fixed-parameters COMMA fixed-parameter
    (150) fixed-parameter -> . parameter-modifier-opt type IDENTIFIER
    (151) parameter-modifier-opt -> . parameter-modifier
    (152) parameter-modifier-opt -> . empty
    (153) parameter-modifier -> . OUT

    CLOSE_PAREN     reduce using rule 245 (empty -> .)
    BOOL            reduce using rule 245 (empty -> .)
    INT             reduce using rule 245 (empty -> .)
    UINT            reduce using rule 245 (empty -> .)
    CHAR            reduce using rule 245 (empty -> .)
    DOUBLE          reduce using rule 245 (empty -> .)
    IDENTIFIER      reduce using rule 245 (empty -> .)
    OUT             shift and go to state 388

    parameter-modifier             shift and go to state 385
    parameter-modifier-opt         shift and go to state 386
    fixed-parameters               shift and go to state 387
    formal-parameter-list-opt      shift and go to state 424
    fixed-parameter                shift and go to state 390
    empty                          shift and go to state 391
    formal-parameter-list          shift and go to state 392

state 413

    (210) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN block .

    IDENTIFIER      reduce using rule 210 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN block .)
    BLOCK_BEGIN     reduce using rule 210 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN block .)
    DELIM           reduce using rule 210 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN block .)
    CONSOLE         reduce using rule 210 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN block .)
    CONST           reduce using rule 210 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN block .)
    IF              reduce using rule 210 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN block .)
    SWITCH          reduce using rule 210 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN block .)
    WHILE           reduce using rule 210 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN block .)
    FOR             reduce using rule 210 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN block .)
    FOREACH         reduce using rule 210 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN block .)
    DO              reduce using rule 210 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN block .)
    BREAK           reduce using rule 210 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN block .)
    CONTINUE        reduce using rule 210 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN block .)
    GOTO            reduce using rule 210 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN block .)
    RETURN          reduce using rule 210 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN block .)
    NEW             reduce using rule 210 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN block .)
    INCRE           reduce using rule 210 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN block .)
    DECRE           reduce using rule 210 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN block .)
    BOOL            reduce using rule 210 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN block .)
    INT             reduce using rule 210 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN block .)
    UINT            reduce using rule 210 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN block .)
    CHAR            reduce using rule 210 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN block .)
    DOUBLE          reduce using rule 210 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN block .)
    BLOCK_END       reduce using rule 210 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN block .)
    CASE            reduce using rule 210 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN block .)
    DEFAULT         reduce using rule 210 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN block .)
    $end            reduce using rule 210 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM for-condition-opt DELIM for-iterator-opt CLOSE_PAREN block .)


state 414

    (143) method-header -> VOID member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .

    DELIM           reduce using rule 143 (method-header -> VOID member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)
    BLOCK_BEGIN     reduce using rule 143 (method-header -> VOID member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)


state 415

    (240) destructor-body -> DELIM .

    CONST           reduce using rule 240 (destructor-body -> DELIM .)
    BITCOMP         reduce using rule 240 (destructor-body -> DELIM .)
    PUBLIC          reduce using rule 240 (destructor-body -> DELIM .)
    PRIVATE         reduce using rule 240 (destructor-body -> DELIM .)
    VOID            reduce using rule 240 (destructor-body -> DELIM .)
    IDENTIFIER      reduce using rule 240 (destructor-body -> DELIM .)
    BOOL            reduce using rule 240 (destructor-body -> DELIM .)
    INT             reduce using rule 240 (destructor-body -> DELIM .)
    UINT            reduce using rule 240 (destructor-body -> DELIM .)
    CHAR            reduce using rule 240 (destructor-body -> DELIM .)
    DOUBLE          reduce using rule 240 (destructor-body -> DELIM .)
    BLOCK_END       reduce using rule 240 (destructor-body -> DELIM .)


state 416

    (238) destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .

    CONST           reduce using rule 238 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    BITCOMP         reduce using rule 238 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    PUBLIC          reduce using rule 238 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    PRIVATE         reduce using rule 238 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    VOID            reduce using rule 238 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    IDENTIFIER      reduce using rule 238 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    BOOL            reduce using rule 238 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    INT             reduce using rule 238 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    UINT            reduce using rule 238 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    CHAR            reduce using rule 238 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    DOUBLE          reduce using rule 238 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    BLOCK_END       reduce using rule 238 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)


state 417

    (239) destructor-body -> block .

    CONST           reduce using rule 239 (destructor-body -> block .)
    BITCOMP         reduce using rule 239 (destructor-body -> block .)
    PUBLIC          reduce using rule 239 (destructor-body -> block .)
    PRIVATE         reduce using rule 239 (destructor-body -> block .)
    VOID            reduce using rule 239 (destructor-body -> block .)
    IDENTIFIER      reduce using rule 239 (destructor-body -> block .)
    BOOL            reduce using rule 239 (destructor-body -> block .)
    INT             reduce using rule 239 (destructor-body -> block .)
    UINT            reduce using rule 239 (destructor-body -> block .)
    CHAR            reduce using rule 239 (destructor-body -> block .)
    DOUBLE          reduce using rule 239 (destructor-body -> block .)
    BLOCK_END       reduce using rule 239 (destructor-body -> block .)


state 418

    (142) method-header -> type member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .

    DELIM           reduce using rule 142 (method-header -> type member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)
    BLOCK_BEGIN     reduce using rule 142 (method-header -> type member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)


state 419

    (150) fixed-parameter -> parameter-modifier-opt type IDENTIFIER .

    COMMA           reduce using rule 150 (fixed-parameter -> parameter-modifier-opt type IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 150 (fixed-parameter -> parameter-modifier-opt type IDENTIFIER .)


state 420

    (152) parameter-modifier-opt -> empty .

    BOOL            reduce using rule 152 (parameter-modifier-opt -> empty .)
    INT             reduce using rule 152 (parameter-modifier-opt -> empty .)
    UINT            reduce using rule 152 (parameter-modifier-opt -> empty .)
    CHAR            reduce using rule 152 (parameter-modifier-opt -> empty .)
    DOUBLE          reduce using rule 152 (parameter-modifier-opt -> empty .)
    IDENTIFIER      reduce using rule 152 (parameter-modifier-opt -> empty .)


state 421

    (149) fixed-parameters -> fixed-parameters COMMA fixed-parameter .

    COMMA           reduce using rule 149 (fixed-parameters -> fixed-parameters COMMA fixed-parameter .)
    CLOSE_PAREN     reduce using rule 149 (fixed-parameters -> fixed-parameters COMMA fixed-parameter .)


state 422

    (24) constant-declaration -> modifier CONST simple-type constant-declarators DELIM .

    CONST           reduce using rule 24 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    BITCOMP         reduce using rule 24 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    PUBLIC          reduce using rule 24 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    PRIVATE         reduce using rule 24 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    VOID            reduce using rule 24 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    IDENTIFIER      reduce using rule 24 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    BOOL            reduce using rule 24 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    INT             reduce using rule 24 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    UINT            reduce using rule 24 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    CHAR            reduce using rule 24 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    DOUBLE          reduce using rule 24 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    BLOCK_END       reduce using rule 24 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)


state 423

    (141) method-header -> modifier VOID member-name OPEN_PAREN formal-parameter-list-opt . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 425


state 424

    (140) method-header -> modifier type member-name OPEN_PAREN formal-parameter-list-opt . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 426


state 425

    (141) method-header -> modifier VOID member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .

    DELIM           reduce using rule 141 (method-header -> modifier VOID member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)
    BLOCK_BEGIN     reduce using rule 141 (method-header -> modifier VOID member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)


state 426

    (140) method-header -> modifier type member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .

    DELIM           reduce using rule 140 (method-header -> modifier type member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)
    BLOCK_BEGIN     reduce using rule 140 (method-header -> modifier type member-name OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)

