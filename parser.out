Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    LICONST
    LONG
    INCRE
    BASE
    FOREACH
    THIS
    FCONST
    ULONG
    MCONST
    VSCONST
    DECRE
    SCONST
    UICONST
    CCONST
    IN
    FLOAT
    ULICONST

Grammar

Rule 0     S' -> compilation-unit
Rule 1     compilation-unit -> class-declarations-opt
Rule 2     compilation-unit -> statement-list
Rule 3     semi-opt -> DELIM
Rule 4     semi-opt -> empty
Rule 5     class-declarations-opt -> class-declarations
Rule 6     class-declarations-opt -> empty
Rule 7     class-declarations -> class-declaration
Rule 8     class-declarations -> class-declarations class-declaration
Rule 9     class-declaration -> class-header class-body semi-opt
Rule 10    class-header -> CLASS IDENTIFIER class-base-opt
Rule 11    class-base-opt -> class-base
Rule 12    class-base-opt -> empty
Rule 13    class-base -> COLON class-type
Rule 14    class-type -> IDENTIFIER
Rule 15    class-body -> BLOCK_BEGIN class-member-declarations-opt BLOCK_END
Rule 16    class-member-declarations-opt -> class-member-declarations
Rule 17    class-member-declarations-opt -> empty
Rule 18    class-member-declarations -> class-member-declaration
Rule 19    class-member-declarations -> class-member-declarations class-member-declaration
Rule 20    class-member-declaration -> constant-declaration
Rule 21    class-member-declaration -> field-declaration
Rule 22    class-member-declaration -> method-declaration
Rule 23    class-member-declaration -> constructor-declaration
Rule 24    class-member-declaration -> destructor-declaration
Rule 25    constant-declaration -> modifier CONST simple-type constant-declarators DELIM
Rule 26    constant-declaration -> CONST simple-type constant-declarators DELIM
Rule 27    type -> simple-type
Rule 28    type -> class-type
Rule 29    type -> array-type
Rule 30    simple-type -> BOOL
Rule 31    simple-type -> INT
Rule 32    simple-type -> UINT
Rule 33    simple-type -> CHAR
Rule 34    simple-type -> DOUBLE
Rule 35    array-type -> simple-type OPEN_BRACKET ICONST CLOSE_BRACKET
Rule 36    constant-declarators -> constant-declarator
Rule 37    constant-declarators -> constant-declarators COMMA constant-declarator
Rule 38    constant-declarator -> IDENTIFIER ASSIGN expression
Rule 39    expression -> conditional-expression
Rule 40    expression -> assignment
Rule 41    conditional-expression -> conditional-or-expression
Rule 42    conditional-expression -> conditional-or-expression CONDOP expression COLON expression
Rule 43    conditional-or-expression -> conditional-and-expression
Rule 44    conditional-or-expression -> conditional-or-expression LOGOR conditional-and-expression
Rule 45    conditional-and-expression -> inclusive-or-expression
Rule 46    conditional-and-expression -> conditional-and-expression LOGAND inclusive-or-expression
Rule 47    inclusive-or-expression -> exclusive-or-expression
Rule 48    inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression
Rule 49    exclusive-or-expression -> and-expression
Rule 50    exclusive-or-expression -> exclusive-or-expression BITXOR and-expression
Rule 51    and-expression -> equality-expression
Rule 52    and-expression -> and-expression BITAND equality-expression
Rule 53    equality-expression -> relational-expression
Rule 54    equality-expression -> equality-expression EQ relational-expression
Rule 55    equality-expression -> equality-expression NE relational-expression
Rule 56    relational-expression -> shift-expression
Rule 57    relational-expression -> relational-expression LT shift-expression
Rule 58    relational-expression -> relational-expression GT shift-expression
Rule 59    relational-expression -> relational-expression LE shift-expression
Rule 60    relational-expression -> relational-expression GE shift-expression
Rule 61    shift-expression -> additive-expression
Rule 62    shift-expression -> shift-expression LSHIFT additive-expression
Rule 63    shift-expression -> shift-expression RSHIFT additive-expression
Rule 64    additive-expression -> multiplicative-expression
Rule 65    additive-expression -> additive-expression PLUS multiplicative-expression
Rule 66    additive-expression -> additive-expression MINUS multiplicative-expression
Rule 67    multiplicative-expression -> unary-expression
Rule 68    multiplicative-expression -> multiplicative-expression TIMES unary-expression
Rule 69    multiplicative-expression -> multiplicative-expression DIV unary-expression
Rule 70    multiplicative-expression -> multiplicative-expression MOD unary-expression
Rule 71    unary-expression -> primary-expression
Rule 72    unary-expression -> PLUS unary-expression
Rule 73    unary-expression -> MINUS unary-expression
Rule 74    unary-expression -> BITNOT unary-expression
Rule 75    unary-expression -> BITCOMP unary-expression
Rule 76    primary-expression -> array-creation-expression
Rule 77    primary-expression -> primary-no-array-creation-expression
Rule 78    array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
Rule 79    array-initializer-opt -> array-initializer
Rule 80    array-initializer-opt -> empty
Rule 81    expression-list -> expression
Rule 82    expression-list -> expression-list COMMA expression
Rule 83    array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END
Rule 84    variable-initializer-list-opt -> expression-list
Rule 85    variable-initializer-list-opt -> empty
Rule 86    variable-initializer -> expression
Rule 87    variable-initializer -> array-initializer
Rule 88    primary-no-array-creation-expression -> literal
Rule 89    primary-no-array-creation-expression -> IDENTIFIER
Rule 90    primary-no-array-creation-expression -> element-access
Rule 91    primary-no-array-creation-expression -> parenthesized-expression
Rule 92    primary-no-array-creation-expression -> member-access
Rule 93    primary-no-array-creation-expression -> invocation-expression
Rule 94    parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN
Rule 95    member-access -> IDENTIFIER DOT IDENTIFIER
Rule 96    member-access -> member-access DOT IDENTIFIER
Rule 97    invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
Rule 98    invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
Rule 99    argument-list-opt -> expression-list
Rule 100   argument-list-opt -> empty
Rule 101   element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
Rule 102   element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET
Rule 103   assignment -> IDENTIFIER assignment-operator expression
Rule 104   assignment -> member-access assignment-operator expression
Rule 105   assignment -> element-access assignment-operator expression
Rule 106   assignment-operator -> ASSIGN
Rule 107   assignment-operator -> PLUSEQUAL
Rule 108   assignment-operator -> MINUSEQUAL
Rule 109   assignment-operator -> TIMESEQUAL
Rule 110   assignment-operator -> DIVEQUAL
Rule 111   assignment-operator -> MODEQUAL
Rule 112   assignment-operator -> BITANDEQUAL
Rule 113   assignment-operator -> BITOREQUAL
Rule 114   assignment-operator -> BITXOREQUAL
Rule 115   assignment-operator -> LSHIFTEQUAL
Rule 116   assignment-operator -> RSHIFTEQUAL
Rule 117   field-declaration -> type variable-declarators DELIM
Rule 118   modifier -> PUBLIC
Rule 119   modifier -> PRIVATE
Rule 120   variable-declarators -> variable-declarator
Rule 121   variable-declarators -> variable-declarators COMMA variable-declarator
Rule 122   variable-declarator -> IDENTIFIER
Rule 123   variable-declarator -> IDENTIFIER ASSIGN variable-initializer
Rule 124   method-declaration -> method-header method-body
Rule 125   method-header -> modifier type IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
Rule 126   method-header -> modifier VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
Rule 127   method-header -> type IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
Rule 128   method-header -> VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
Rule 129   formal-parameter-list-opt -> formal-parameter-list
Rule 130   formal-parameter-list-opt -> empty
Rule 131   formal-parameter-list -> fixed-parameters
Rule 132   fixed-parameters -> fixed-parameter
Rule 133   fixed-parameters -> fixed-parameters COMMA fixed-parameter
Rule 134   fixed-parameter -> type IDENTIFIER
Rule 135   method-body -> method-block
Rule 136   method-body -> DELIM
Rule 137   method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END
Rule 138   block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END
Rule 139   M_bstart -> empty
Rule 140   statement-list-opt -> statement-list
Rule 141   statement-list-opt -> empty
Rule 142   statement-list -> statement
Rule 143   statement-list -> statement-list statement
Rule 144   statement -> labeled-statement
Rule 145   statement -> declaration-statement
Rule 146   statement -> block
Rule 147   statement -> empty-statement
Rule 148   statement -> expression-statement
Rule 149   statement -> selection-statement
Rule 150   statement -> iteration-statement
Rule 151   statement -> jump-statement
Rule 152   statement -> write-statement
Rule 153   statement -> read-statement
Rule 154   statement -> method-declaration
Rule 155   write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM
Rule 156   print-list -> expression
Rule 157   print-list -> expression COMMA print-list
Rule 158   read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM
Rule 159   labeled-statement -> IDENTIFIER COLON statement
Rule 160   declaration-statement -> local-variable-declaration DELIM
Rule 161   declaration-statement -> local-constant-declaration DELIM
Rule 162   local-variable-declaration -> type variable-declarators
Rule 163   local-constant-declaration -> CONST type constant-declarators
Rule 164   empty-statement -> DELIM
Rule 165   expression-statement -> statement-expression DELIM
Rule 166   statement-expression -> invocation-expression
Rule 167   statement-expression -> assignment
Rule 168   selection-statement -> if-statement
Rule 169   selection-statement -> switch-statement
Rule 170   if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block
Rule 171   if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block
Rule 172   if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad
Rule 173   M_if -> empty
Rule 174   M_else -> empty
Rule 175   M_quad -> empty
Rule 176   switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block
Rule 177   switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END
Rule 178   switch-sections-opt -> switch-sections
Rule 179   switch-sections-opt -> empty
Rule 180   switch-sections -> switch-section
Rule 181   switch-sections -> switch-sections switch-section
Rule 182   switch-section -> switch-labels statement-list
Rule 183   switch-labels -> switch-label
Rule 184   switch-labels -> switch-labels switch-label
Rule 185   switch-label -> CASE expression COLON
Rule 186   switch-label -> DEFAULT COLON
Rule 187   iteration-statement -> while-statement M_quad
Rule 188   iteration-statement -> for-statement M_quad
Rule 189   iteration-statement -> do-statement M_quad
Rule 190   while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block
Rule 191   M_while -> empty
Rule 192   do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM
Rule 193   for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block
Rule 194   for-initializer-opt -> for-initializer
Rule 195   for-initializer-opt -> empty
Rule 196   for-initializer -> statement-expression-list
Rule 197   for-condition -> expression
Rule 198   for-iterator-opt -> for-iterator
Rule 199   for-iterator-opt -> empty
Rule 200   for-iterator -> statement-expression-list
Rule 201   statement-expression-list -> statement-expression
Rule 202   statement-expression-list -> statement-expression-list COMMA statement-expression
Rule 203   jump-statement -> break-statement
Rule 204   jump-statement -> continue-statement
Rule 205   jump-statement -> goto-statement
Rule 206   jump-statement -> return-statement
Rule 207   break-statement -> BREAK DELIM
Rule 208   continue-statement -> CONTINUE DELIM
Rule 209   goto-statement -> GOTO IDENTIFIER DELIM
Rule 210   return-statement -> RETURN expression-opt DELIM
Rule 211   expression-opt -> expression
Rule 212   expression-opt -> empty
Rule 213   constructor-declaration -> constructor-declarator constructor-body
Rule 214   constructor-declarator -> IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
Rule 215   constructor-body -> block
Rule 216   constructor-body -> DELIM
Rule 217   destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body
Rule 218   destructor-body -> block
Rule 219   destructor-body -> DELIM
Rule 220   literal -> ICONST
Rule 221   literal -> DCONST
Rule 222   literal -> TRUE
Rule 223   literal -> FALSE
Rule 224   empty -> <empty>

Terminals, with rules where they appear

ASSIGN               : 38 106 123
BASE                 : 
BITAND               : 52
BITANDEQUAL          : 112
BITCOMP              : 75 217
BITNOT               : 74
BITOR                : 48
BITOREQUAL           : 113
BITXOR               : 50
BITXOREQUAL          : 114
BLOCK_BEGIN          : 15 83 137 138 177
BLOCK_END            : 15 83 137 138 177
BOOL                 : 30
BREAK                : 207
CASE                 : 185
CCONST               : 
CHAR                 : 33
CLASS                : 10
CLOSE_BRACKET        : 35 78 101 102
CLOSE_PAREN          : 94 97 98 125 126 127 128 155 158 170 171 172 176 190 192 193 214 217
COLON                : 13 42 159 185 186
COMMA                : 37 82 121 133 157 202
CONDOP               : 42
CONSOLE              : 155 158
CONST                : 25 26 163
CONTINUE             : 208
DCONST               : 221
DECRE                : 
DEFAULT              : 186
DELIM                : 3 25 26 117 136 155 158 160 161 164 165 192 193 193 207 208 209 210 216 219
DIV                  : 69
DIVEQUAL             : 110
DO                   : 192
DOT                  : 95 96 155 158
DOUBLE               : 34
ELSE                 : 171 172
EQ                   : 54
FALSE                : 223
FCONST               : 
FLOAT                : 
FOR                  : 193
FOREACH              : 
GE                   : 60
GOTO                 : 209
GT                   : 58
ICONST               : 35 78 220
IDENTIFIER           : 10 14 38 89 95 95 96 97 101 103 122 123 125 126 127 128 134 158 159 209 214 217
IF                   : 170 171 172
IN                   : 
INCRE                : 
INT                  : 31
LE                   : 59
LICONST              : 
LOGAND               : 46
LOGOR                : 44
LONG                 : 
LSHIFT               : 62
LSHIFTEQUAL          : 115
LT                   : 57
MCONST               : 
MINUS                : 66 73
MINUSEQUAL           : 108
MOD                  : 70
MODEQUAL             : 111
NE                   : 55
NEW                  : 78
OPEN_BRACKET         : 35 78 101 102
OPEN_PAREN           : 94 97 98 125 126 127 128 155 158 170 171 172 176 190 192 193 214 217
PLUS                 : 65 72
PLUSEQUAL            : 107
PRIVATE              : 119
PUBLIC               : 118
READLINE             : 158
RETURN               : 210
RSHIFT               : 63
RSHIFTEQUAL          : 116
SCONST               : 
SWITCH               : 176
THIS                 : 
TIMES                : 68
TIMESEQUAL           : 109
TRUE                 : 222
UICONST              : 
UINT                 : 32
ULICONST             : 
ULONG                : 
VOID                 : 126 128
VSCONST              : 
WHILE                : 190 192
WRITELINE            : 155
error                : 

Nonterminals, with rules where they appear

M_bstart             : 138
M_else               : 171 172
M_if                 : 170 171 172
M_quad               : 172 187 188 189 190 192 192 193 193 193
M_while              : 190
additive-expression  : 61 62 63 65 66
and-expression       : 49 50 52
argument-list-opt    : 97 98
array-creation-expression : 76
array-initializer    : 79 87
array-initializer-opt : 78
array-type           : 29
assignment           : 40 167
assignment-operator  : 103 104 105
block                : 146 170 171 171 172 190 192 193 215 218
break-statement      : 203
class-base           : 11
class-base-opt       : 10
class-body           : 9
class-declaration    : 7 8
class-declarations   : 5 8
class-declarations-opt : 1
class-header         : 9
class-member-declaration : 18 19
class-member-declarations : 16 19
class-member-declarations-opt : 15
class-type           : 13 28
compilation-unit     : 0
conditional-and-expression : 43 44 46
conditional-expression : 39
conditional-or-expression : 41 42 44
constant-declaration : 20
constant-declarator  : 36 37
constant-declarators : 25 26 37 163
constructor-body     : 213
constructor-declaration : 23
constructor-declarator : 213
continue-statement   : 204
declaration-statement : 145
destructor-body      : 217
destructor-declaration : 24
do-statement         : 189
element-access       : 90 105
empty                : 4 6 12 17 80 85 100 130 139 141 173 174 175 179 191 195 199 212
empty-statement      : 147
equality-expression  : 51 52 54 55
exclusive-or-expression : 47 48 50
expression           : 38 42 42 81 82 86 94 101 102 103 104 105 156 157 170 171 172 176 185 190 192 197 211
expression-list      : 82 84 99
expression-opt       : 210
expression-statement : 148
field-declaration    : 21
fixed-parameter      : 132 133
fixed-parameters     : 131 133
for-condition        : 193
for-initializer      : 194
for-initializer-opt  : 193
for-iterator         : 198
for-iterator-opt     : 193
for-statement        : 188
formal-parameter-list : 129
formal-parameter-list-opt : 125 126 127 128 214
goto-statement       : 205
if-statement         : 168 172
inclusive-or-expression : 45 46 48
invocation-expression : 93 166
iteration-statement  : 150
jump-statement       : 151
labeled-statement    : 144
literal              : 88
local-constant-declaration : 161
local-variable-declaration : 160
member-access        : 92 96 98 102 104
method-block         : 135
method-body          : 124
method-declaration   : 22 154
method-header        : 124
modifier             : 25 125 126
multiplicative-expression : 64 65 66 68 69 70
parenthesized-expression : 91
primary-expression   : 71
primary-no-array-creation-expression : 77
print-list           : 155 157
read-statement       : 153
relational-expression : 53 54 55 57 58 59 60
return-statement     : 206
selection-statement  : 149
semi-opt             : 9
shift-expression     : 56 57 58 59 60 62 63
simple-type          : 25 26 27 35 78
statement            : 142 143 159
statement-expression : 165 201 202
statement-expression-list : 196 200 202
statement-list       : 2 140 143 182
statement-list-opt   : 137 138
switch-block         : 176
switch-label         : 183 184
switch-labels        : 182 184
switch-section       : 180 181
switch-sections      : 178 181
switch-sections-opt  : 177
switch-statement     : 169
type                 : 117 125 127 134 162 163
unary-expression     : 67 68 69 70 72 73 74 75
variable-declarator  : 120 121
variable-declarators : 117 121 162
variable-initializer : 123
variable-initializer-list-opt : 83
while-statement      : 187
write-statement      : 152

Parsing method: LALR

state 0

    (0) S' -> . compilation-unit
    (1) compilation-unit -> . class-declarations-opt
    (2) compilation-unit -> . statement-list
    (5) class-declarations-opt -> . class-declarations
    (6) class-declarations-opt -> . empty
    (142) statement-list -> . statement
    (143) statement-list -> . statement-list statement
    (7) class-declarations -> . class-declaration
    (8) class-declarations -> . class-declarations class-declaration
    (224) empty -> .
    (144) statement -> . labeled-statement
    (145) statement -> . declaration-statement
    (146) statement -> . block
    (147) statement -> . empty-statement
    (148) statement -> . expression-statement
    (149) statement -> . selection-statement
    (150) statement -> . iteration-statement
    (151) statement -> . jump-statement
    (152) statement -> . write-statement
    (153) statement -> . read-statement
    (154) statement -> . method-declaration
    (9) class-declaration -> . class-header class-body semi-opt
    (159) labeled-statement -> . IDENTIFIER COLON statement
    (160) declaration-statement -> . local-variable-declaration DELIM
    (161) declaration-statement -> . local-constant-declaration DELIM
    (138) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END
    (164) empty-statement -> . DELIM
    (165) expression-statement -> . statement-expression DELIM
    (168) selection-statement -> . if-statement
    (169) selection-statement -> . switch-statement
    (187) iteration-statement -> . while-statement M_quad
    (188) iteration-statement -> . for-statement M_quad
    (189) iteration-statement -> . do-statement M_quad
    (203) jump-statement -> . break-statement
    (204) jump-statement -> . continue-statement
    (205) jump-statement -> . goto-statement
    (206) jump-statement -> . return-statement
    (155) write-statement -> . CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM
    (158) read-statement -> . CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM
    (124) method-declaration -> . method-header method-body
    (10) class-header -> . CLASS IDENTIFIER class-base-opt
    (162) local-variable-declaration -> . type variable-declarators
    (163) local-constant-declaration -> . CONST type constant-declarators
    (166) statement-expression -> . invocation-expression
    (167) statement-expression -> . assignment
    (170) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block
    (171) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block
    (172) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad
    (176) switch-statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block
    (190) while-statement -> . WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block
    (193) for-statement -> . FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block
    (192) do-statement -> . DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM
    (207) break-statement -> . BREAK DELIM
    (208) continue-statement -> . CONTINUE DELIM
    (209) goto-statement -> . GOTO IDENTIFIER DELIM
    (210) return-statement -> . RETURN expression-opt DELIM
    (125) method-header -> . modifier type IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (126) method-header -> . modifier VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (127) method-header -> . type IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (128) method-header -> . VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (27) type -> . simple-type
    (28) type -> . class-type
    (29) type -> . array-type
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (103) assignment -> . IDENTIFIER assignment-operator expression
    (104) assignment -> . member-access assignment-operator expression
    (105) assignment -> . element-access assignment-operator expression
    (118) modifier -> . PUBLIC
    (119) modifier -> . PRIVATE
    (30) simple-type -> . BOOL
    (31) simple-type -> . INT
    (32) simple-type -> . UINT
    (33) simple-type -> . CHAR
    (34) simple-type -> . DOUBLE
    (14) class-type -> . IDENTIFIER
    (35) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    $end            reduce using rule 224 (empty -> .)
    IDENTIFIER      shift and go to state 40
    BLOCK_BEGIN     shift and go to state 54
    DELIM           shift and go to state 4
    CONSOLE         shift and go to state 58
    CLASS           shift and go to state 56
    CONST           shift and go to state 53
    IF              shift and go to state 63
    SWITCH          shift and go to state 26
    WHILE           shift and go to state 35
    FOR             shift and go to state 24
    DO              shift and go to state 52
    BREAK           shift and go to state 46
    CONTINUE        shift and go to state 31
    GOTO            shift and go to state 8
    RETURN          shift and go to state 16
    VOID            shift and go to state 7
    PUBLIC          shift and go to state 62
    PRIVATE         shift and go to state 55
    BOOL            shift and go to state 47
    INT             shift and go to state 28
    UINT            shift and go to state 61
    CHAR            shift and go to state 34
    DOUBLE          shift and go to state 12

    return-statement               shift and go to state 19
    method-header                  shift and go to state 17
    write-statement                shift and go to state 1
    member-access                  shift and go to state 2
    selection-statement            shift and go to state 33
    simple-type                    shift and go to state 18
    compilation-unit               shift and go to state 50
    expression-statement           shift and go to state 3
    class-declarations-opt         shift and go to state 20
    break-statement                shift and go to state 37
    element-access                 shift and go to state 21
    method-declaration             shift and go to state 38
    local-constant-declaration     shift and go to state 22
    statement                      shift and go to state 39
    assignment                     shift and go to state 59
    for-statement                  shift and go to state 6
    type                           shift and go to state 41
    read-statement                 shift and go to state 57
    do-statement                   shift and go to state 23
    array-type                     shift and go to state 43
    continue-statement             shift and go to state 25
    invocation-expression          shift and go to state 14
    class-declaration              shift and go to state 60
    labeled-statement              shift and go to state 9
    declaration-statement          shift and go to state 44
    switch-statement               shift and go to state 10
    statement-expression           shift and go to state 5
    jump-statement                 shift and go to state 11
    iteration-statement            shift and go to state 45
    local-variable-declaration     shift and go to state 27
    class-declarations             shift and go to state 13
    goto-statement                 shift and go to state 29
    if-statement                   shift and go to state 30
    empty                          shift and go to state 42
    class-header                   shift and go to state 15
    statement-list                 shift and go to state 48
    class-type                     shift and go to state 64
    while-statement                shift and go to state 49
    empty-statement                shift and go to state 36
    modifier                       shift and go to state 51
    block                          shift and go to state 32

state 1

    (152) statement -> write-statement .

    IDENTIFIER      reduce using rule 152 (statement -> write-statement .)
    BLOCK_BEGIN     reduce using rule 152 (statement -> write-statement .)
    DELIM           reduce using rule 152 (statement -> write-statement .)
    CONSOLE         reduce using rule 152 (statement -> write-statement .)
    CONST           reduce using rule 152 (statement -> write-statement .)
    IF              reduce using rule 152 (statement -> write-statement .)
    SWITCH          reduce using rule 152 (statement -> write-statement .)
    WHILE           reduce using rule 152 (statement -> write-statement .)
    FOR             reduce using rule 152 (statement -> write-statement .)
    DO              reduce using rule 152 (statement -> write-statement .)
    BREAK           reduce using rule 152 (statement -> write-statement .)
    CONTINUE        reduce using rule 152 (statement -> write-statement .)
    GOTO            reduce using rule 152 (statement -> write-statement .)
    RETURN          reduce using rule 152 (statement -> write-statement .)
    VOID            reduce using rule 152 (statement -> write-statement .)
    PUBLIC          reduce using rule 152 (statement -> write-statement .)
    PRIVATE         reduce using rule 152 (statement -> write-statement .)
    BOOL            reduce using rule 152 (statement -> write-statement .)
    INT             reduce using rule 152 (statement -> write-statement .)
    UINT            reduce using rule 152 (statement -> write-statement .)
    CHAR            reduce using rule 152 (statement -> write-statement .)
    DOUBLE          reduce using rule 152 (statement -> write-statement .)
    $end            reduce using rule 152 (statement -> write-statement .)
    BLOCK_END       reduce using rule 152 (statement -> write-statement .)
    CASE            reduce using rule 152 (statement -> write-statement .)
    DEFAULT         reduce using rule 152 (statement -> write-statement .)


state 2

    (98) invocation-expression -> member-access . OPEN_PAREN argument-list-opt CLOSE_PAREN
    (104) assignment -> member-access . assignment-operator expression
    (96) member-access -> member-access . DOT IDENTIFIER
    (102) element-access -> member-access . OPEN_BRACKET expression CLOSE_BRACKET
    (106) assignment-operator -> . ASSIGN
    (107) assignment-operator -> . PLUSEQUAL
    (108) assignment-operator -> . MINUSEQUAL
    (109) assignment-operator -> . TIMESEQUAL
    (110) assignment-operator -> . DIVEQUAL
    (111) assignment-operator -> . MODEQUAL
    (112) assignment-operator -> . BITANDEQUAL
    (113) assignment-operator -> . BITOREQUAL
    (114) assignment-operator -> . BITXOREQUAL
    (115) assignment-operator -> . LSHIFTEQUAL
    (116) assignment-operator -> . RSHIFTEQUAL

    OPEN_PAREN      shift and go to state 74
    DOT             shift and go to state 75
    OPEN_BRACKET    shift and go to state 70
    ASSIGN          shift and go to state 78
    PLUSEQUAL       shift and go to state 73
    MINUSEQUAL      shift and go to state 69
    TIMESEQUAL      shift and go to state 68
    DIVEQUAL        shift and go to state 65
    MODEQUAL        shift and go to state 79
    BITANDEQUAL     shift and go to state 76
    BITOREQUAL      shift and go to state 72
    BITXOREQUAL     shift and go to state 71
    LSHIFTEQUAL     shift and go to state 77
    RSHIFTEQUAL     shift and go to state 66

    assignment-operator            shift and go to state 67

state 3

    (148) statement -> expression-statement .

    IDENTIFIER      reduce using rule 148 (statement -> expression-statement .)
    BLOCK_BEGIN     reduce using rule 148 (statement -> expression-statement .)
    DELIM           reduce using rule 148 (statement -> expression-statement .)
    CONSOLE         reduce using rule 148 (statement -> expression-statement .)
    CONST           reduce using rule 148 (statement -> expression-statement .)
    IF              reduce using rule 148 (statement -> expression-statement .)
    SWITCH          reduce using rule 148 (statement -> expression-statement .)
    WHILE           reduce using rule 148 (statement -> expression-statement .)
    FOR             reduce using rule 148 (statement -> expression-statement .)
    DO              reduce using rule 148 (statement -> expression-statement .)
    BREAK           reduce using rule 148 (statement -> expression-statement .)
    CONTINUE        reduce using rule 148 (statement -> expression-statement .)
    GOTO            reduce using rule 148 (statement -> expression-statement .)
    RETURN          reduce using rule 148 (statement -> expression-statement .)
    VOID            reduce using rule 148 (statement -> expression-statement .)
    PUBLIC          reduce using rule 148 (statement -> expression-statement .)
    PRIVATE         reduce using rule 148 (statement -> expression-statement .)
    BOOL            reduce using rule 148 (statement -> expression-statement .)
    INT             reduce using rule 148 (statement -> expression-statement .)
    UINT            reduce using rule 148 (statement -> expression-statement .)
    CHAR            reduce using rule 148 (statement -> expression-statement .)
    DOUBLE          reduce using rule 148 (statement -> expression-statement .)
    $end            reduce using rule 148 (statement -> expression-statement .)
    BLOCK_END       reduce using rule 148 (statement -> expression-statement .)
    CASE            reduce using rule 148 (statement -> expression-statement .)
    DEFAULT         reduce using rule 148 (statement -> expression-statement .)


state 4

    (164) empty-statement -> DELIM .

    IDENTIFIER      reduce using rule 164 (empty-statement -> DELIM .)
    BLOCK_BEGIN     reduce using rule 164 (empty-statement -> DELIM .)
    DELIM           reduce using rule 164 (empty-statement -> DELIM .)
    CONSOLE         reduce using rule 164 (empty-statement -> DELIM .)
    CONST           reduce using rule 164 (empty-statement -> DELIM .)
    IF              reduce using rule 164 (empty-statement -> DELIM .)
    SWITCH          reduce using rule 164 (empty-statement -> DELIM .)
    WHILE           reduce using rule 164 (empty-statement -> DELIM .)
    FOR             reduce using rule 164 (empty-statement -> DELIM .)
    DO              reduce using rule 164 (empty-statement -> DELIM .)
    BREAK           reduce using rule 164 (empty-statement -> DELIM .)
    CONTINUE        reduce using rule 164 (empty-statement -> DELIM .)
    GOTO            reduce using rule 164 (empty-statement -> DELIM .)
    RETURN          reduce using rule 164 (empty-statement -> DELIM .)
    VOID            reduce using rule 164 (empty-statement -> DELIM .)
    PUBLIC          reduce using rule 164 (empty-statement -> DELIM .)
    PRIVATE         reduce using rule 164 (empty-statement -> DELIM .)
    BOOL            reduce using rule 164 (empty-statement -> DELIM .)
    INT             reduce using rule 164 (empty-statement -> DELIM .)
    UINT            reduce using rule 164 (empty-statement -> DELIM .)
    CHAR            reduce using rule 164 (empty-statement -> DELIM .)
    DOUBLE          reduce using rule 164 (empty-statement -> DELIM .)
    $end            reduce using rule 164 (empty-statement -> DELIM .)
    BLOCK_END       reduce using rule 164 (empty-statement -> DELIM .)
    CASE            reduce using rule 164 (empty-statement -> DELIM .)
    DEFAULT         reduce using rule 164 (empty-statement -> DELIM .)


state 5

    (165) expression-statement -> statement-expression . DELIM

    DELIM           shift and go to state 80


state 6

    (188) iteration-statement -> for-statement . M_quad
    (175) M_quad -> . empty
    (224) empty -> .

    IDENTIFIER      reduce using rule 224 (empty -> .)
    BLOCK_BEGIN     reduce using rule 224 (empty -> .)
    DELIM           reduce using rule 224 (empty -> .)
    CONSOLE         reduce using rule 224 (empty -> .)
    CONST           reduce using rule 224 (empty -> .)
    IF              reduce using rule 224 (empty -> .)
    SWITCH          reduce using rule 224 (empty -> .)
    WHILE           reduce using rule 224 (empty -> .)
    FOR             reduce using rule 224 (empty -> .)
    DO              reduce using rule 224 (empty -> .)
    BREAK           reduce using rule 224 (empty -> .)
    CONTINUE        reduce using rule 224 (empty -> .)
    GOTO            reduce using rule 224 (empty -> .)
    RETURN          reduce using rule 224 (empty -> .)
    VOID            reduce using rule 224 (empty -> .)
    PUBLIC          reduce using rule 224 (empty -> .)
    PRIVATE         reduce using rule 224 (empty -> .)
    BOOL            reduce using rule 224 (empty -> .)
    INT             reduce using rule 224 (empty -> .)
    UINT            reduce using rule 224 (empty -> .)
    CHAR            reduce using rule 224 (empty -> .)
    DOUBLE          reduce using rule 224 (empty -> .)
    $end            reduce using rule 224 (empty -> .)
    BLOCK_END       reduce using rule 224 (empty -> .)
    CASE            reduce using rule 224 (empty -> .)
    DEFAULT         reduce using rule 224 (empty -> .)

    M_quad                         shift and go to state 81
    empty                          shift and go to state 82

state 7

    (128) method-header -> VOID . IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 83


state 8

    (209) goto-statement -> GOTO . IDENTIFIER DELIM

    IDENTIFIER      shift and go to state 84


state 9

    (144) statement -> labeled-statement .

    IDENTIFIER      reduce using rule 144 (statement -> labeled-statement .)
    BLOCK_BEGIN     reduce using rule 144 (statement -> labeled-statement .)
    DELIM           reduce using rule 144 (statement -> labeled-statement .)
    CONSOLE         reduce using rule 144 (statement -> labeled-statement .)
    CONST           reduce using rule 144 (statement -> labeled-statement .)
    IF              reduce using rule 144 (statement -> labeled-statement .)
    SWITCH          reduce using rule 144 (statement -> labeled-statement .)
    WHILE           reduce using rule 144 (statement -> labeled-statement .)
    FOR             reduce using rule 144 (statement -> labeled-statement .)
    DO              reduce using rule 144 (statement -> labeled-statement .)
    BREAK           reduce using rule 144 (statement -> labeled-statement .)
    CONTINUE        reduce using rule 144 (statement -> labeled-statement .)
    GOTO            reduce using rule 144 (statement -> labeled-statement .)
    RETURN          reduce using rule 144 (statement -> labeled-statement .)
    VOID            reduce using rule 144 (statement -> labeled-statement .)
    PUBLIC          reduce using rule 144 (statement -> labeled-statement .)
    PRIVATE         reduce using rule 144 (statement -> labeled-statement .)
    BOOL            reduce using rule 144 (statement -> labeled-statement .)
    INT             reduce using rule 144 (statement -> labeled-statement .)
    UINT            reduce using rule 144 (statement -> labeled-statement .)
    CHAR            reduce using rule 144 (statement -> labeled-statement .)
    DOUBLE          reduce using rule 144 (statement -> labeled-statement .)
    $end            reduce using rule 144 (statement -> labeled-statement .)
    BLOCK_END       reduce using rule 144 (statement -> labeled-statement .)
    CASE            reduce using rule 144 (statement -> labeled-statement .)
    DEFAULT         reduce using rule 144 (statement -> labeled-statement .)


state 10

    (169) selection-statement -> switch-statement .

    IDENTIFIER      reduce using rule 169 (selection-statement -> switch-statement .)
    BLOCK_BEGIN     reduce using rule 169 (selection-statement -> switch-statement .)
    DELIM           reduce using rule 169 (selection-statement -> switch-statement .)
    CONSOLE         reduce using rule 169 (selection-statement -> switch-statement .)
    CONST           reduce using rule 169 (selection-statement -> switch-statement .)
    IF              reduce using rule 169 (selection-statement -> switch-statement .)
    SWITCH          reduce using rule 169 (selection-statement -> switch-statement .)
    WHILE           reduce using rule 169 (selection-statement -> switch-statement .)
    FOR             reduce using rule 169 (selection-statement -> switch-statement .)
    DO              reduce using rule 169 (selection-statement -> switch-statement .)
    BREAK           reduce using rule 169 (selection-statement -> switch-statement .)
    CONTINUE        reduce using rule 169 (selection-statement -> switch-statement .)
    GOTO            reduce using rule 169 (selection-statement -> switch-statement .)
    RETURN          reduce using rule 169 (selection-statement -> switch-statement .)
    VOID            reduce using rule 169 (selection-statement -> switch-statement .)
    PUBLIC          reduce using rule 169 (selection-statement -> switch-statement .)
    PRIVATE         reduce using rule 169 (selection-statement -> switch-statement .)
    BOOL            reduce using rule 169 (selection-statement -> switch-statement .)
    INT             reduce using rule 169 (selection-statement -> switch-statement .)
    UINT            reduce using rule 169 (selection-statement -> switch-statement .)
    CHAR            reduce using rule 169 (selection-statement -> switch-statement .)
    DOUBLE          reduce using rule 169 (selection-statement -> switch-statement .)
    CASE            reduce using rule 169 (selection-statement -> switch-statement .)
    DEFAULT         reduce using rule 169 (selection-statement -> switch-statement .)
    BLOCK_END       reduce using rule 169 (selection-statement -> switch-statement .)
    $end            reduce using rule 169 (selection-statement -> switch-statement .)


state 11

    (151) statement -> jump-statement .

    IDENTIFIER      reduce using rule 151 (statement -> jump-statement .)
    BLOCK_BEGIN     reduce using rule 151 (statement -> jump-statement .)
    DELIM           reduce using rule 151 (statement -> jump-statement .)
    CONSOLE         reduce using rule 151 (statement -> jump-statement .)
    CONST           reduce using rule 151 (statement -> jump-statement .)
    IF              reduce using rule 151 (statement -> jump-statement .)
    SWITCH          reduce using rule 151 (statement -> jump-statement .)
    WHILE           reduce using rule 151 (statement -> jump-statement .)
    FOR             reduce using rule 151 (statement -> jump-statement .)
    DO              reduce using rule 151 (statement -> jump-statement .)
    BREAK           reduce using rule 151 (statement -> jump-statement .)
    CONTINUE        reduce using rule 151 (statement -> jump-statement .)
    GOTO            reduce using rule 151 (statement -> jump-statement .)
    RETURN          reduce using rule 151 (statement -> jump-statement .)
    VOID            reduce using rule 151 (statement -> jump-statement .)
    PUBLIC          reduce using rule 151 (statement -> jump-statement .)
    PRIVATE         reduce using rule 151 (statement -> jump-statement .)
    BOOL            reduce using rule 151 (statement -> jump-statement .)
    INT             reduce using rule 151 (statement -> jump-statement .)
    UINT            reduce using rule 151 (statement -> jump-statement .)
    CHAR            reduce using rule 151 (statement -> jump-statement .)
    DOUBLE          reduce using rule 151 (statement -> jump-statement .)
    $end            reduce using rule 151 (statement -> jump-statement .)
    BLOCK_END       reduce using rule 151 (statement -> jump-statement .)
    CASE            reduce using rule 151 (statement -> jump-statement .)
    DEFAULT         reduce using rule 151 (statement -> jump-statement .)


state 12

    (34) simple-type -> DOUBLE .

    OPEN_BRACKET    reduce using rule 34 (simple-type -> DOUBLE .)
    IDENTIFIER      reduce using rule 34 (simple-type -> DOUBLE .)


state 13

    (5) class-declarations-opt -> class-declarations .
    (8) class-declarations -> class-declarations . class-declaration
    (9) class-declaration -> . class-header class-body semi-opt
    (10) class-header -> . CLASS IDENTIFIER class-base-opt

    $end            reduce using rule 5 (class-declarations-opt -> class-declarations .)
    CLASS           shift and go to state 56

    class-declaration              shift and go to state 85
    class-header                   shift and go to state 15

state 14

    (166) statement-expression -> invocation-expression .

    COMMA           reduce using rule 166 (statement-expression -> invocation-expression .)
    DELIM           reduce using rule 166 (statement-expression -> invocation-expression .)
    CLOSE_PAREN     reduce using rule 166 (statement-expression -> invocation-expression .)


state 15

    (9) class-declaration -> class-header . class-body semi-opt
    (15) class-body -> . BLOCK_BEGIN class-member-declarations-opt BLOCK_END

    BLOCK_BEGIN     shift and go to state 87

    class-body                     shift and go to state 86

state 16

    (210) return-statement -> RETURN . expression-opt DELIM
    (211) expression-opt -> . expression
    (212) expression-opt -> . empty
    (39) expression -> . conditional-expression
    (40) expression -> . assignment
    (224) empty -> .
    (41) conditional-expression -> . conditional-or-expression
    (42) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (103) assignment -> . IDENTIFIER assignment-operator expression
    (104) assignment -> . member-access assignment-operator expression
    (105) assignment -> . element-access assignment-operator expression
    (43) conditional-or-expression -> . conditional-and-expression
    (44) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (45) conditional-and-expression -> . inclusive-or-expression
    (46) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (47) inclusive-or-expression -> . exclusive-or-expression
    (48) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (49) exclusive-or-expression -> . and-expression
    (50) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (51) and-expression -> . equality-expression
    (52) and-expression -> . and-expression BITAND equality-expression
    (53) equality-expression -> . relational-expression
    (54) equality-expression -> . equality-expression EQ relational-expression
    (55) equality-expression -> . equality-expression NE relational-expression
    (56) relational-expression -> . shift-expression
    (57) relational-expression -> . relational-expression LT shift-expression
    (58) relational-expression -> . relational-expression GT shift-expression
    (59) relational-expression -> . relational-expression LE shift-expression
    (60) relational-expression -> . relational-expression GE shift-expression
    (61) shift-expression -> . additive-expression
    (62) shift-expression -> . shift-expression LSHIFT additive-expression
    (63) shift-expression -> . shift-expression RSHIFT additive-expression
    (64) additive-expression -> . multiplicative-expression
    (65) additive-expression -> . additive-expression PLUS multiplicative-expression
    (66) additive-expression -> . additive-expression MINUS multiplicative-expression
    (67) multiplicative-expression -> . unary-expression
    (68) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (69) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (70) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (71) unary-expression -> . primary-expression
    (72) unary-expression -> . PLUS unary-expression
    (73) unary-expression -> . MINUS unary-expression
    (74) unary-expression -> . BITNOT unary-expression
    (75) unary-expression -> . BITCOMP unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . element-access
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (220) literal -> . ICONST
    (221) literal -> . DCONST
    (222) literal -> . TRUE
    (223) literal -> . FALSE
    (94) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    DELIM           reduce using rule 224 (empty -> .)
    IDENTIFIER      shift and go to state 103
    PLUS            shift and go to state 102
    MINUS           shift and go to state 95
    BITNOT          shift and go to state 117
    BITCOMP         shift and go to state 97
    NEW             shift and go to state 93
    ICONST          shift and go to state 108
    DCONST          shift and go to state 118
    TRUE            shift and go to state 112
    FALSE           shift and go to state 110
    OPEN_PAREN      shift and go to state 99

    exclusive-or-expression        shift and go to state 89
    member-access                  shift and go to state 90
    relational-expression          shift and go to state 91
    additive-expression            shift and go to state 94
    primary-no-array-creation-expression shift and go to state 107
    inclusive-or-expression        shift and go to state 96
    unary-expression               shift and go to state 88
    element-access                 shift and go to state 98
    literal                        shift and go to state 106
    conditional-expression         shift and go to state 100
    conditional-and-expression     shift and go to state 101
    empty                          shift and go to state 104
    array-creation-expression      shift and go to state 92
    assignment                     shift and go to state 105
    expression-opt                 shift and go to state 109
    equality-expression            shift and go to state 111
    shift-expression               shift and go to state 113
    and-expression                 shift and go to state 114
    multiplicative-expression      shift and go to state 115
    conditional-or-expression      shift and go to state 121
    primary-expression             shift and go to state 119
    invocation-expression          shift and go to state 120
    expression                     shift and go to state 116
    parenthesized-expression       shift and go to state 122

state 17

    (124) method-declaration -> method-header . method-body
    (135) method-body -> . method-block
    (136) method-body -> . DELIM
    (137) method-block -> . BLOCK_BEGIN statement-list-opt BLOCK_END

    DELIM           shift and go to state 124
    BLOCK_BEGIN     shift and go to state 125

    method-body                    shift and go to state 126
    method-block                   shift and go to state 123

state 18

    (27) type -> simple-type .
    (35) array-type -> simple-type . OPEN_BRACKET ICONST CLOSE_BRACKET

    IDENTIFIER      reduce using rule 27 (type -> simple-type .)
    OPEN_BRACKET    shift and go to state 127


state 19

    (206) jump-statement -> return-statement .

    IDENTIFIER      reduce using rule 206 (jump-statement -> return-statement .)
    BLOCK_BEGIN     reduce using rule 206 (jump-statement -> return-statement .)
    DELIM           reduce using rule 206 (jump-statement -> return-statement .)
    CONSOLE         reduce using rule 206 (jump-statement -> return-statement .)
    CONST           reduce using rule 206 (jump-statement -> return-statement .)
    IF              reduce using rule 206 (jump-statement -> return-statement .)
    SWITCH          reduce using rule 206 (jump-statement -> return-statement .)
    WHILE           reduce using rule 206 (jump-statement -> return-statement .)
    FOR             reduce using rule 206 (jump-statement -> return-statement .)
    DO              reduce using rule 206 (jump-statement -> return-statement .)
    BREAK           reduce using rule 206 (jump-statement -> return-statement .)
    CONTINUE        reduce using rule 206 (jump-statement -> return-statement .)
    GOTO            reduce using rule 206 (jump-statement -> return-statement .)
    RETURN          reduce using rule 206 (jump-statement -> return-statement .)
    VOID            reduce using rule 206 (jump-statement -> return-statement .)
    PUBLIC          reduce using rule 206 (jump-statement -> return-statement .)
    PRIVATE         reduce using rule 206 (jump-statement -> return-statement .)
    BOOL            reduce using rule 206 (jump-statement -> return-statement .)
    INT             reduce using rule 206 (jump-statement -> return-statement .)
    UINT            reduce using rule 206 (jump-statement -> return-statement .)
    CHAR            reduce using rule 206 (jump-statement -> return-statement .)
    DOUBLE          reduce using rule 206 (jump-statement -> return-statement .)
    CASE            reduce using rule 206 (jump-statement -> return-statement .)
    DEFAULT         reduce using rule 206 (jump-statement -> return-statement .)
    BLOCK_END       reduce using rule 206 (jump-statement -> return-statement .)
    $end            reduce using rule 206 (jump-statement -> return-statement .)


state 20

    (1) compilation-unit -> class-declarations-opt .

    $end            reduce using rule 1 (compilation-unit -> class-declarations-opt .)


state 21

    (105) assignment -> element-access . assignment-operator expression
    (106) assignment-operator -> . ASSIGN
    (107) assignment-operator -> . PLUSEQUAL
    (108) assignment-operator -> . MINUSEQUAL
    (109) assignment-operator -> . TIMESEQUAL
    (110) assignment-operator -> . DIVEQUAL
    (111) assignment-operator -> . MODEQUAL
    (112) assignment-operator -> . BITANDEQUAL
    (113) assignment-operator -> . BITOREQUAL
    (114) assignment-operator -> . BITXOREQUAL
    (115) assignment-operator -> . LSHIFTEQUAL
    (116) assignment-operator -> . RSHIFTEQUAL

    ASSIGN          shift and go to state 78
    PLUSEQUAL       shift and go to state 73
    MINUSEQUAL      shift and go to state 69
    TIMESEQUAL      shift and go to state 68
    DIVEQUAL        shift and go to state 65
    MODEQUAL        shift and go to state 79
    BITANDEQUAL     shift and go to state 76
    BITOREQUAL      shift and go to state 72
    BITXOREQUAL     shift and go to state 71
    LSHIFTEQUAL     shift and go to state 77
    RSHIFTEQUAL     shift and go to state 66

    assignment-operator            shift and go to state 128

state 22

    (161) declaration-statement -> local-constant-declaration . DELIM

    DELIM           shift and go to state 129


state 23

    (189) iteration-statement -> do-statement . M_quad
    (175) M_quad -> . empty
    (224) empty -> .

    IDENTIFIER      reduce using rule 224 (empty -> .)
    BLOCK_BEGIN     reduce using rule 224 (empty -> .)
    DELIM           reduce using rule 224 (empty -> .)
    CONSOLE         reduce using rule 224 (empty -> .)
    CONST           reduce using rule 224 (empty -> .)
    IF              reduce using rule 224 (empty -> .)
    SWITCH          reduce using rule 224 (empty -> .)
    WHILE           reduce using rule 224 (empty -> .)
    FOR             reduce using rule 224 (empty -> .)
    DO              reduce using rule 224 (empty -> .)
    BREAK           reduce using rule 224 (empty -> .)
    CONTINUE        reduce using rule 224 (empty -> .)
    GOTO            reduce using rule 224 (empty -> .)
    RETURN          reduce using rule 224 (empty -> .)
    VOID            reduce using rule 224 (empty -> .)
    PUBLIC          reduce using rule 224 (empty -> .)
    PRIVATE         reduce using rule 224 (empty -> .)
    BOOL            reduce using rule 224 (empty -> .)
    INT             reduce using rule 224 (empty -> .)
    UINT            reduce using rule 224 (empty -> .)
    CHAR            reduce using rule 224 (empty -> .)
    DOUBLE          reduce using rule 224 (empty -> .)
    $end            reduce using rule 224 (empty -> .)
    BLOCK_END       reduce using rule 224 (empty -> .)
    CASE            reduce using rule 224 (empty -> .)
    DEFAULT         reduce using rule 224 (empty -> .)

    M_quad                         shift and go to state 130
    empty                          shift and go to state 82

state 24

    (193) for-statement -> FOR . OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block

    OPEN_PAREN      shift and go to state 131


state 25

    (204) jump-statement -> continue-statement .

    IDENTIFIER      reduce using rule 204 (jump-statement -> continue-statement .)
    BLOCK_BEGIN     reduce using rule 204 (jump-statement -> continue-statement .)
    DELIM           reduce using rule 204 (jump-statement -> continue-statement .)
    CONSOLE         reduce using rule 204 (jump-statement -> continue-statement .)
    CONST           reduce using rule 204 (jump-statement -> continue-statement .)
    IF              reduce using rule 204 (jump-statement -> continue-statement .)
    SWITCH          reduce using rule 204 (jump-statement -> continue-statement .)
    WHILE           reduce using rule 204 (jump-statement -> continue-statement .)
    FOR             reduce using rule 204 (jump-statement -> continue-statement .)
    DO              reduce using rule 204 (jump-statement -> continue-statement .)
    BREAK           reduce using rule 204 (jump-statement -> continue-statement .)
    CONTINUE        reduce using rule 204 (jump-statement -> continue-statement .)
    GOTO            reduce using rule 204 (jump-statement -> continue-statement .)
    RETURN          reduce using rule 204 (jump-statement -> continue-statement .)
    VOID            reduce using rule 204 (jump-statement -> continue-statement .)
    PUBLIC          reduce using rule 204 (jump-statement -> continue-statement .)
    PRIVATE         reduce using rule 204 (jump-statement -> continue-statement .)
    BOOL            reduce using rule 204 (jump-statement -> continue-statement .)
    INT             reduce using rule 204 (jump-statement -> continue-statement .)
    UINT            reduce using rule 204 (jump-statement -> continue-statement .)
    CHAR            reduce using rule 204 (jump-statement -> continue-statement .)
    DOUBLE          reduce using rule 204 (jump-statement -> continue-statement .)
    CASE            reduce using rule 204 (jump-statement -> continue-statement .)
    DEFAULT         reduce using rule 204 (jump-statement -> continue-statement .)
    BLOCK_END       reduce using rule 204 (jump-statement -> continue-statement .)
    $end            reduce using rule 204 (jump-statement -> continue-statement .)


state 26

    (176) switch-statement -> SWITCH . OPEN_PAREN expression CLOSE_PAREN switch-block

    OPEN_PAREN      shift and go to state 132


state 27

    (160) declaration-statement -> local-variable-declaration . DELIM

    DELIM           shift and go to state 133


state 28

    (31) simple-type -> INT .

    OPEN_BRACKET    reduce using rule 31 (simple-type -> INT .)
    IDENTIFIER      reduce using rule 31 (simple-type -> INT .)


state 29

    (205) jump-statement -> goto-statement .

    IDENTIFIER      reduce using rule 205 (jump-statement -> goto-statement .)
    BLOCK_BEGIN     reduce using rule 205 (jump-statement -> goto-statement .)
    DELIM           reduce using rule 205 (jump-statement -> goto-statement .)
    CONSOLE         reduce using rule 205 (jump-statement -> goto-statement .)
    CONST           reduce using rule 205 (jump-statement -> goto-statement .)
    IF              reduce using rule 205 (jump-statement -> goto-statement .)
    SWITCH          reduce using rule 205 (jump-statement -> goto-statement .)
    WHILE           reduce using rule 205 (jump-statement -> goto-statement .)
    FOR             reduce using rule 205 (jump-statement -> goto-statement .)
    DO              reduce using rule 205 (jump-statement -> goto-statement .)
    BREAK           reduce using rule 205 (jump-statement -> goto-statement .)
    CONTINUE        reduce using rule 205 (jump-statement -> goto-statement .)
    GOTO            reduce using rule 205 (jump-statement -> goto-statement .)
    RETURN          reduce using rule 205 (jump-statement -> goto-statement .)
    VOID            reduce using rule 205 (jump-statement -> goto-statement .)
    PUBLIC          reduce using rule 205 (jump-statement -> goto-statement .)
    PRIVATE         reduce using rule 205 (jump-statement -> goto-statement .)
    BOOL            reduce using rule 205 (jump-statement -> goto-statement .)
    INT             reduce using rule 205 (jump-statement -> goto-statement .)
    UINT            reduce using rule 205 (jump-statement -> goto-statement .)
    CHAR            reduce using rule 205 (jump-statement -> goto-statement .)
    DOUBLE          reduce using rule 205 (jump-statement -> goto-statement .)
    CASE            reduce using rule 205 (jump-statement -> goto-statement .)
    DEFAULT         reduce using rule 205 (jump-statement -> goto-statement .)
    BLOCK_END       reduce using rule 205 (jump-statement -> goto-statement .)
    $end            reduce using rule 205 (jump-statement -> goto-statement .)


state 30

    (168) selection-statement -> if-statement .

    IDENTIFIER      reduce using rule 168 (selection-statement -> if-statement .)
    BLOCK_BEGIN     reduce using rule 168 (selection-statement -> if-statement .)
    DELIM           reduce using rule 168 (selection-statement -> if-statement .)
    CONSOLE         reduce using rule 168 (selection-statement -> if-statement .)
    CONST           reduce using rule 168 (selection-statement -> if-statement .)
    IF              reduce using rule 168 (selection-statement -> if-statement .)
    SWITCH          reduce using rule 168 (selection-statement -> if-statement .)
    WHILE           reduce using rule 168 (selection-statement -> if-statement .)
    FOR             reduce using rule 168 (selection-statement -> if-statement .)
    DO              reduce using rule 168 (selection-statement -> if-statement .)
    BREAK           reduce using rule 168 (selection-statement -> if-statement .)
    CONTINUE        reduce using rule 168 (selection-statement -> if-statement .)
    GOTO            reduce using rule 168 (selection-statement -> if-statement .)
    RETURN          reduce using rule 168 (selection-statement -> if-statement .)
    VOID            reduce using rule 168 (selection-statement -> if-statement .)
    PUBLIC          reduce using rule 168 (selection-statement -> if-statement .)
    PRIVATE         reduce using rule 168 (selection-statement -> if-statement .)
    BOOL            reduce using rule 168 (selection-statement -> if-statement .)
    INT             reduce using rule 168 (selection-statement -> if-statement .)
    UINT            reduce using rule 168 (selection-statement -> if-statement .)
    CHAR            reduce using rule 168 (selection-statement -> if-statement .)
    DOUBLE          reduce using rule 168 (selection-statement -> if-statement .)
    CASE            reduce using rule 168 (selection-statement -> if-statement .)
    DEFAULT         reduce using rule 168 (selection-statement -> if-statement .)
    BLOCK_END       reduce using rule 168 (selection-statement -> if-statement .)
    $end            reduce using rule 168 (selection-statement -> if-statement .)


state 31

    (208) continue-statement -> CONTINUE . DELIM

    DELIM           shift and go to state 134


state 32

    (146) statement -> block .

    IDENTIFIER      reduce using rule 146 (statement -> block .)
    BLOCK_BEGIN     reduce using rule 146 (statement -> block .)
    DELIM           reduce using rule 146 (statement -> block .)
    CONSOLE         reduce using rule 146 (statement -> block .)
    CONST           reduce using rule 146 (statement -> block .)
    IF              reduce using rule 146 (statement -> block .)
    SWITCH          reduce using rule 146 (statement -> block .)
    WHILE           reduce using rule 146 (statement -> block .)
    FOR             reduce using rule 146 (statement -> block .)
    DO              reduce using rule 146 (statement -> block .)
    BREAK           reduce using rule 146 (statement -> block .)
    CONTINUE        reduce using rule 146 (statement -> block .)
    GOTO            reduce using rule 146 (statement -> block .)
    RETURN          reduce using rule 146 (statement -> block .)
    VOID            reduce using rule 146 (statement -> block .)
    PUBLIC          reduce using rule 146 (statement -> block .)
    PRIVATE         reduce using rule 146 (statement -> block .)
    BOOL            reduce using rule 146 (statement -> block .)
    INT             reduce using rule 146 (statement -> block .)
    UINT            reduce using rule 146 (statement -> block .)
    CHAR            reduce using rule 146 (statement -> block .)
    DOUBLE          reduce using rule 146 (statement -> block .)
    $end            reduce using rule 146 (statement -> block .)
    BLOCK_END       reduce using rule 146 (statement -> block .)
    CASE            reduce using rule 146 (statement -> block .)
    DEFAULT         reduce using rule 146 (statement -> block .)


state 33

    (149) statement -> selection-statement .

    IDENTIFIER      reduce using rule 149 (statement -> selection-statement .)
    BLOCK_BEGIN     reduce using rule 149 (statement -> selection-statement .)
    DELIM           reduce using rule 149 (statement -> selection-statement .)
    CONSOLE         reduce using rule 149 (statement -> selection-statement .)
    CONST           reduce using rule 149 (statement -> selection-statement .)
    IF              reduce using rule 149 (statement -> selection-statement .)
    SWITCH          reduce using rule 149 (statement -> selection-statement .)
    WHILE           reduce using rule 149 (statement -> selection-statement .)
    FOR             reduce using rule 149 (statement -> selection-statement .)
    DO              reduce using rule 149 (statement -> selection-statement .)
    BREAK           reduce using rule 149 (statement -> selection-statement .)
    CONTINUE        reduce using rule 149 (statement -> selection-statement .)
    GOTO            reduce using rule 149 (statement -> selection-statement .)
    RETURN          reduce using rule 149 (statement -> selection-statement .)
    VOID            reduce using rule 149 (statement -> selection-statement .)
    PUBLIC          reduce using rule 149 (statement -> selection-statement .)
    PRIVATE         reduce using rule 149 (statement -> selection-statement .)
    BOOL            reduce using rule 149 (statement -> selection-statement .)
    INT             reduce using rule 149 (statement -> selection-statement .)
    UINT            reduce using rule 149 (statement -> selection-statement .)
    CHAR            reduce using rule 149 (statement -> selection-statement .)
    DOUBLE          reduce using rule 149 (statement -> selection-statement .)
    $end            reduce using rule 149 (statement -> selection-statement .)
    BLOCK_END       reduce using rule 149 (statement -> selection-statement .)
    CASE            reduce using rule 149 (statement -> selection-statement .)
    DEFAULT         reduce using rule 149 (statement -> selection-statement .)


state 34

    (33) simple-type -> CHAR .

    OPEN_BRACKET    reduce using rule 33 (simple-type -> CHAR .)
    IDENTIFIER      reduce using rule 33 (simple-type -> CHAR .)


state 35

    (190) while-statement -> WHILE . M_quad OPEN_PAREN expression CLOSE_PAREN M_while block
    (175) M_quad -> . empty
    (224) empty -> .

    OPEN_PAREN      reduce using rule 224 (empty -> .)

    M_quad                         shift and go to state 135
    empty                          shift and go to state 82

state 36

    (147) statement -> empty-statement .

    IDENTIFIER      reduce using rule 147 (statement -> empty-statement .)
    BLOCK_BEGIN     reduce using rule 147 (statement -> empty-statement .)
    DELIM           reduce using rule 147 (statement -> empty-statement .)
    CONSOLE         reduce using rule 147 (statement -> empty-statement .)
    CONST           reduce using rule 147 (statement -> empty-statement .)
    IF              reduce using rule 147 (statement -> empty-statement .)
    SWITCH          reduce using rule 147 (statement -> empty-statement .)
    WHILE           reduce using rule 147 (statement -> empty-statement .)
    FOR             reduce using rule 147 (statement -> empty-statement .)
    DO              reduce using rule 147 (statement -> empty-statement .)
    BREAK           reduce using rule 147 (statement -> empty-statement .)
    CONTINUE        reduce using rule 147 (statement -> empty-statement .)
    GOTO            reduce using rule 147 (statement -> empty-statement .)
    RETURN          reduce using rule 147 (statement -> empty-statement .)
    VOID            reduce using rule 147 (statement -> empty-statement .)
    PUBLIC          reduce using rule 147 (statement -> empty-statement .)
    PRIVATE         reduce using rule 147 (statement -> empty-statement .)
    BOOL            reduce using rule 147 (statement -> empty-statement .)
    INT             reduce using rule 147 (statement -> empty-statement .)
    UINT            reduce using rule 147 (statement -> empty-statement .)
    CHAR            reduce using rule 147 (statement -> empty-statement .)
    DOUBLE          reduce using rule 147 (statement -> empty-statement .)
    $end            reduce using rule 147 (statement -> empty-statement .)
    BLOCK_END       reduce using rule 147 (statement -> empty-statement .)
    CASE            reduce using rule 147 (statement -> empty-statement .)
    DEFAULT         reduce using rule 147 (statement -> empty-statement .)


state 37

    (203) jump-statement -> break-statement .

    IDENTIFIER      reduce using rule 203 (jump-statement -> break-statement .)
    BLOCK_BEGIN     reduce using rule 203 (jump-statement -> break-statement .)
    DELIM           reduce using rule 203 (jump-statement -> break-statement .)
    CONSOLE         reduce using rule 203 (jump-statement -> break-statement .)
    CONST           reduce using rule 203 (jump-statement -> break-statement .)
    IF              reduce using rule 203 (jump-statement -> break-statement .)
    SWITCH          reduce using rule 203 (jump-statement -> break-statement .)
    WHILE           reduce using rule 203 (jump-statement -> break-statement .)
    FOR             reduce using rule 203 (jump-statement -> break-statement .)
    DO              reduce using rule 203 (jump-statement -> break-statement .)
    BREAK           reduce using rule 203 (jump-statement -> break-statement .)
    CONTINUE        reduce using rule 203 (jump-statement -> break-statement .)
    GOTO            reduce using rule 203 (jump-statement -> break-statement .)
    RETURN          reduce using rule 203 (jump-statement -> break-statement .)
    VOID            reduce using rule 203 (jump-statement -> break-statement .)
    PUBLIC          reduce using rule 203 (jump-statement -> break-statement .)
    PRIVATE         reduce using rule 203 (jump-statement -> break-statement .)
    BOOL            reduce using rule 203 (jump-statement -> break-statement .)
    INT             reduce using rule 203 (jump-statement -> break-statement .)
    UINT            reduce using rule 203 (jump-statement -> break-statement .)
    CHAR            reduce using rule 203 (jump-statement -> break-statement .)
    DOUBLE          reduce using rule 203 (jump-statement -> break-statement .)
    CASE            reduce using rule 203 (jump-statement -> break-statement .)
    DEFAULT         reduce using rule 203 (jump-statement -> break-statement .)
    BLOCK_END       reduce using rule 203 (jump-statement -> break-statement .)
    $end            reduce using rule 203 (jump-statement -> break-statement .)


state 38

    (154) statement -> method-declaration .

    IDENTIFIER      reduce using rule 154 (statement -> method-declaration .)
    BLOCK_BEGIN     reduce using rule 154 (statement -> method-declaration .)
    DELIM           reduce using rule 154 (statement -> method-declaration .)
    CONSOLE         reduce using rule 154 (statement -> method-declaration .)
    CONST           reduce using rule 154 (statement -> method-declaration .)
    IF              reduce using rule 154 (statement -> method-declaration .)
    SWITCH          reduce using rule 154 (statement -> method-declaration .)
    WHILE           reduce using rule 154 (statement -> method-declaration .)
    FOR             reduce using rule 154 (statement -> method-declaration .)
    DO              reduce using rule 154 (statement -> method-declaration .)
    BREAK           reduce using rule 154 (statement -> method-declaration .)
    CONTINUE        reduce using rule 154 (statement -> method-declaration .)
    GOTO            reduce using rule 154 (statement -> method-declaration .)
    RETURN          reduce using rule 154 (statement -> method-declaration .)
    VOID            reduce using rule 154 (statement -> method-declaration .)
    PUBLIC          reduce using rule 154 (statement -> method-declaration .)
    PRIVATE         reduce using rule 154 (statement -> method-declaration .)
    BOOL            reduce using rule 154 (statement -> method-declaration .)
    INT             reduce using rule 154 (statement -> method-declaration .)
    UINT            reduce using rule 154 (statement -> method-declaration .)
    CHAR            reduce using rule 154 (statement -> method-declaration .)
    DOUBLE          reduce using rule 154 (statement -> method-declaration .)
    $end            reduce using rule 154 (statement -> method-declaration .)
    BLOCK_END       reduce using rule 154 (statement -> method-declaration .)
    CASE            reduce using rule 154 (statement -> method-declaration .)
    DEFAULT         reduce using rule 154 (statement -> method-declaration .)


state 39

    (142) statement-list -> statement .

    IDENTIFIER      reduce using rule 142 (statement-list -> statement .)
    BLOCK_BEGIN     reduce using rule 142 (statement-list -> statement .)
    DELIM           reduce using rule 142 (statement-list -> statement .)
    CONSOLE         reduce using rule 142 (statement-list -> statement .)
    CONST           reduce using rule 142 (statement-list -> statement .)
    IF              reduce using rule 142 (statement-list -> statement .)
    SWITCH          reduce using rule 142 (statement-list -> statement .)
    WHILE           reduce using rule 142 (statement-list -> statement .)
    FOR             reduce using rule 142 (statement-list -> statement .)
    DO              reduce using rule 142 (statement-list -> statement .)
    BREAK           reduce using rule 142 (statement-list -> statement .)
    CONTINUE        reduce using rule 142 (statement-list -> statement .)
    GOTO            reduce using rule 142 (statement-list -> statement .)
    RETURN          reduce using rule 142 (statement-list -> statement .)
    VOID            reduce using rule 142 (statement-list -> statement .)
    PUBLIC          reduce using rule 142 (statement-list -> statement .)
    PRIVATE         reduce using rule 142 (statement-list -> statement .)
    BOOL            reduce using rule 142 (statement-list -> statement .)
    INT             reduce using rule 142 (statement-list -> statement .)
    UINT            reduce using rule 142 (statement-list -> statement .)
    CHAR            reduce using rule 142 (statement-list -> statement .)
    DOUBLE          reduce using rule 142 (statement-list -> statement .)
    CASE            reduce using rule 142 (statement-list -> statement .)
    DEFAULT         reduce using rule 142 (statement-list -> statement .)
    BLOCK_END       reduce using rule 142 (statement-list -> statement .)
    $end            reduce using rule 142 (statement-list -> statement .)


state 40

    (159) labeled-statement -> IDENTIFIER . COLON statement
    (97) invocation-expression -> IDENTIFIER . OPEN_PAREN argument-list-opt CLOSE_PAREN
    (103) assignment -> IDENTIFIER . assignment-operator expression
    (14) class-type -> IDENTIFIER .
    (95) member-access -> IDENTIFIER . DOT IDENTIFIER
    (101) element-access -> IDENTIFIER . OPEN_BRACKET expression CLOSE_BRACKET
    (106) assignment-operator -> . ASSIGN
    (107) assignment-operator -> . PLUSEQUAL
    (108) assignment-operator -> . MINUSEQUAL
    (109) assignment-operator -> . TIMESEQUAL
    (110) assignment-operator -> . DIVEQUAL
    (111) assignment-operator -> . MODEQUAL
    (112) assignment-operator -> . BITANDEQUAL
    (113) assignment-operator -> . BITOREQUAL
    (114) assignment-operator -> . BITXOREQUAL
    (115) assignment-operator -> . LSHIFTEQUAL
    (116) assignment-operator -> . RSHIFTEQUAL

    COLON           shift and go to state 139
    OPEN_PAREN      shift and go to state 138
    IDENTIFIER      reduce using rule 14 (class-type -> IDENTIFIER .)
    DOT             shift and go to state 136
    OPEN_BRACKET    shift and go to state 137
    ASSIGN          shift and go to state 78
    PLUSEQUAL       shift and go to state 73
    MINUSEQUAL      shift and go to state 69
    TIMESEQUAL      shift and go to state 68
    DIVEQUAL        shift and go to state 65
    MODEQUAL        shift and go to state 79
    BITANDEQUAL     shift and go to state 76
    BITOREQUAL      shift and go to state 72
    BITXOREQUAL     shift and go to state 71
    LSHIFTEQUAL     shift and go to state 77
    RSHIFTEQUAL     shift and go to state 66

    assignment-operator            shift and go to state 140

state 41

    (162) local-variable-declaration -> type . variable-declarators
    (127) method-header -> type . IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (120) variable-declarators -> . variable-declarator
    (121) variable-declarators -> . variable-declarators COMMA variable-declarator
    (122) variable-declarator -> . IDENTIFIER
    (123) variable-declarator -> . IDENTIFIER ASSIGN variable-initializer

    IDENTIFIER      shift and go to state 143

    variable-declarator            shift and go to state 141
    variable-declarators           shift and go to state 142

state 42

    (6) class-declarations-opt -> empty .

    $end            reduce using rule 6 (class-declarations-opt -> empty .)


state 43

    (29) type -> array-type .

    IDENTIFIER      reduce using rule 29 (type -> array-type .)


state 44

    (145) statement -> declaration-statement .

    IDENTIFIER      reduce using rule 145 (statement -> declaration-statement .)
    BLOCK_BEGIN     reduce using rule 145 (statement -> declaration-statement .)
    DELIM           reduce using rule 145 (statement -> declaration-statement .)
    CONSOLE         reduce using rule 145 (statement -> declaration-statement .)
    CONST           reduce using rule 145 (statement -> declaration-statement .)
    IF              reduce using rule 145 (statement -> declaration-statement .)
    SWITCH          reduce using rule 145 (statement -> declaration-statement .)
    WHILE           reduce using rule 145 (statement -> declaration-statement .)
    FOR             reduce using rule 145 (statement -> declaration-statement .)
    DO              reduce using rule 145 (statement -> declaration-statement .)
    BREAK           reduce using rule 145 (statement -> declaration-statement .)
    CONTINUE        reduce using rule 145 (statement -> declaration-statement .)
    GOTO            reduce using rule 145 (statement -> declaration-statement .)
    RETURN          reduce using rule 145 (statement -> declaration-statement .)
    VOID            reduce using rule 145 (statement -> declaration-statement .)
    PUBLIC          reduce using rule 145 (statement -> declaration-statement .)
    PRIVATE         reduce using rule 145 (statement -> declaration-statement .)
    BOOL            reduce using rule 145 (statement -> declaration-statement .)
    INT             reduce using rule 145 (statement -> declaration-statement .)
    UINT            reduce using rule 145 (statement -> declaration-statement .)
    CHAR            reduce using rule 145 (statement -> declaration-statement .)
    DOUBLE          reduce using rule 145 (statement -> declaration-statement .)
    $end            reduce using rule 145 (statement -> declaration-statement .)
    BLOCK_END       reduce using rule 145 (statement -> declaration-statement .)
    CASE            reduce using rule 145 (statement -> declaration-statement .)
    DEFAULT         reduce using rule 145 (statement -> declaration-statement .)


state 45

    (150) statement -> iteration-statement .

    IDENTIFIER      reduce using rule 150 (statement -> iteration-statement .)
    BLOCK_BEGIN     reduce using rule 150 (statement -> iteration-statement .)
    DELIM           reduce using rule 150 (statement -> iteration-statement .)
    CONSOLE         reduce using rule 150 (statement -> iteration-statement .)
    CONST           reduce using rule 150 (statement -> iteration-statement .)
    IF              reduce using rule 150 (statement -> iteration-statement .)
    SWITCH          reduce using rule 150 (statement -> iteration-statement .)
    WHILE           reduce using rule 150 (statement -> iteration-statement .)
    FOR             reduce using rule 150 (statement -> iteration-statement .)
    DO              reduce using rule 150 (statement -> iteration-statement .)
    BREAK           reduce using rule 150 (statement -> iteration-statement .)
    CONTINUE        reduce using rule 150 (statement -> iteration-statement .)
    GOTO            reduce using rule 150 (statement -> iteration-statement .)
    RETURN          reduce using rule 150 (statement -> iteration-statement .)
    VOID            reduce using rule 150 (statement -> iteration-statement .)
    PUBLIC          reduce using rule 150 (statement -> iteration-statement .)
    PRIVATE         reduce using rule 150 (statement -> iteration-statement .)
    BOOL            reduce using rule 150 (statement -> iteration-statement .)
    INT             reduce using rule 150 (statement -> iteration-statement .)
    UINT            reduce using rule 150 (statement -> iteration-statement .)
    CHAR            reduce using rule 150 (statement -> iteration-statement .)
    DOUBLE          reduce using rule 150 (statement -> iteration-statement .)
    $end            reduce using rule 150 (statement -> iteration-statement .)
    BLOCK_END       reduce using rule 150 (statement -> iteration-statement .)
    CASE            reduce using rule 150 (statement -> iteration-statement .)
    DEFAULT         reduce using rule 150 (statement -> iteration-statement .)


state 46

    (207) break-statement -> BREAK . DELIM

    DELIM           shift and go to state 144


state 47

    (30) simple-type -> BOOL .

    OPEN_BRACKET    reduce using rule 30 (simple-type -> BOOL .)
    IDENTIFIER      reduce using rule 30 (simple-type -> BOOL .)


state 48

    (2) compilation-unit -> statement-list .
    (143) statement-list -> statement-list . statement
    (144) statement -> . labeled-statement
    (145) statement -> . declaration-statement
    (146) statement -> . block
    (147) statement -> . empty-statement
    (148) statement -> . expression-statement
    (149) statement -> . selection-statement
    (150) statement -> . iteration-statement
    (151) statement -> . jump-statement
    (152) statement -> . write-statement
    (153) statement -> . read-statement
    (154) statement -> . method-declaration
    (159) labeled-statement -> . IDENTIFIER COLON statement
    (160) declaration-statement -> . local-variable-declaration DELIM
    (161) declaration-statement -> . local-constant-declaration DELIM
    (138) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END
    (164) empty-statement -> . DELIM
    (165) expression-statement -> . statement-expression DELIM
    (168) selection-statement -> . if-statement
    (169) selection-statement -> . switch-statement
    (187) iteration-statement -> . while-statement M_quad
    (188) iteration-statement -> . for-statement M_quad
    (189) iteration-statement -> . do-statement M_quad
    (203) jump-statement -> . break-statement
    (204) jump-statement -> . continue-statement
    (205) jump-statement -> . goto-statement
    (206) jump-statement -> . return-statement
    (155) write-statement -> . CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM
    (158) read-statement -> . CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM
    (124) method-declaration -> . method-header method-body
    (162) local-variable-declaration -> . type variable-declarators
    (163) local-constant-declaration -> . CONST type constant-declarators
    (166) statement-expression -> . invocation-expression
    (167) statement-expression -> . assignment
    (170) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block
    (171) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block
    (172) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad
    (176) switch-statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block
    (190) while-statement -> . WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block
    (193) for-statement -> . FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block
    (192) do-statement -> . DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM
    (207) break-statement -> . BREAK DELIM
    (208) continue-statement -> . CONTINUE DELIM
    (209) goto-statement -> . GOTO IDENTIFIER DELIM
    (210) return-statement -> . RETURN expression-opt DELIM
    (125) method-header -> . modifier type IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (126) method-header -> . modifier VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (127) method-header -> . type IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (128) method-header -> . VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (27) type -> . simple-type
    (28) type -> . class-type
    (29) type -> . array-type
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (103) assignment -> . IDENTIFIER assignment-operator expression
    (104) assignment -> . member-access assignment-operator expression
    (105) assignment -> . element-access assignment-operator expression
    (118) modifier -> . PUBLIC
    (119) modifier -> . PRIVATE
    (30) simple-type -> . BOOL
    (31) simple-type -> . INT
    (32) simple-type -> . UINT
    (33) simple-type -> . CHAR
    (34) simple-type -> . DOUBLE
    (14) class-type -> . IDENTIFIER
    (35) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    $end            reduce using rule 2 (compilation-unit -> statement-list .)
    IDENTIFIER      shift and go to state 40
    BLOCK_BEGIN     shift and go to state 54
    DELIM           shift and go to state 4
    CONSOLE         shift and go to state 58
    CONST           shift and go to state 53
    IF              shift and go to state 63
    SWITCH          shift and go to state 26
    WHILE           shift and go to state 35
    FOR             shift and go to state 24
    DO              shift and go to state 52
    BREAK           shift and go to state 46
    CONTINUE        shift and go to state 31
    GOTO            shift and go to state 8
    RETURN          shift and go to state 16
    VOID            shift and go to state 7
    PUBLIC          shift and go to state 62
    PRIVATE         shift and go to state 55
    BOOL            shift and go to state 47
    INT             shift and go to state 28
    UINT            shift and go to state 61
    CHAR            shift and go to state 34
    DOUBLE          shift and go to state 12

    return-statement               shift and go to state 19
    method-header                  shift and go to state 17
    write-statement                shift and go to state 1
    member-access                  shift and go to state 2
    selection-statement            shift and go to state 33
    empty-statement                shift and go to state 36
    expression-statement           shift and go to state 3
    break-statement                shift and go to state 37
    method-declaration             shift and go to state 38
    element-access                 shift and go to state 21
    statement-expression           shift and go to state 5
    local-constant-declaration     shift and go to state 22
    statement                      shift and go to state 145
    assignment                     shift and go to state 59
    for-statement                  shift and go to state 6
    type                           shift and go to state 41
    read-statement                 shift and go to state 57
    do-statement                   shift and go to state 23
    array-type                     shift and go to state 43
    continue-statement             shift and go to state 25
    invocation-expression          shift and go to state 14
    labeled-statement              shift and go to state 9
    declaration-statement          shift and go to state 44
    switch-statement               shift and go to state 10
    jump-statement                 shift and go to state 11
    iteration-statement            shift and go to state 45
    local-variable-declaration     shift and go to state 27
    goto-statement                 shift and go to state 29
    if-statement                   shift and go to state 30
    class-type                     shift and go to state 64
    while-statement                shift and go to state 49
    simple-type                    shift and go to state 18
    modifier                       shift and go to state 51
    block                          shift and go to state 32

state 49

    (187) iteration-statement -> while-statement . M_quad
    (175) M_quad -> . empty
    (224) empty -> .

    IDENTIFIER      reduce using rule 224 (empty -> .)
    BLOCK_BEGIN     reduce using rule 224 (empty -> .)
    DELIM           reduce using rule 224 (empty -> .)
    CONSOLE         reduce using rule 224 (empty -> .)
    CONST           reduce using rule 224 (empty -> .)
    IF              reduce using rule 224 (empty -> .)
    SWITCH          reduce using rule 224 (empty -> .)
    WHILE           reduce using rule 224 (empty -> .)
    FOR             reduce using rule 224 (empty -> .)
    DO              reduce using rule 224 (empty -> .)
    BREAK           reduce using rule 224 (empty -> .)
    CONTINUE        reduce using rule 224 (empty -> .)
    GOTO            reduce using rule 224 (empty -> .)
    RETURN          reduce using rule 224 (empty -> .)
    VOID            reduce using rule 224 (empty -> .)
    PUBLIC          reduce using rule 224 (empty -> .)
    PRIVATE         reduce using rule 224 (empty -> .)
    BOOL            reduce using rule 224 (empty -> .)
    INT             reduce using rule 224 (empty -> .)
    UINT            reduce using rule 224 (empty -> .)
    CHAR            reduce using rule 224 (empty -> .)
    DOUBLE          reduce using rule 224 (empty -> .)
    $end            reduce using rule 224 (empty -> .)
    BLOCK_END       reduce using rule 224 (empty -> .)
    CASE            reduce using rule 224 (empty -> .)
    DEFAULT         reduce using rule 224 (empty -> .)

    M_quad                         shift and go to state 146
    empty                          shift and go to state 82

state 50

    (0) S' -> compilation-unit .



state 51

    (125) method-header -> modifier . type IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (126) method-header -> modifier . VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (27) type -> . simple-type
    (28) type -> . class-type
    (29) type -> . array-type
    (30) simple-type -> . BOOL
    (31) simple-type -> . INT
    (32) simple-type -> . UINT
    (33) simple-type -> . CHAR
    (34) simple-type -> . DOUBLE
    (14) class-type -> . IDENTIFIER
    (35) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET

    VOID            shift and go to state 147
    BOOL            shift and go to state 47
    INT             shift and go to state 28
    UINT            shift and go to state 61
    CHAR            shift and go to state 34
    DOUBLE          shift and go to state 12
    IDENTIFIER      shift and go to state 148

    array-type                     shift and go to state 43
    simple-type                    shift and go to state 18
    class-type                     shift and go to state 64
    type                           shift and go to state 149

state 52

    (192) do-statement -> DO . M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM
    (175) M_quad -> . empty
    (224) empty -> .

    BLOCK_BEGIN     reduce using rule 224 (empty -> .)

    M_quad                         shift and go to state 150
    empty                          shift and go to state 82

state 53

    (163) local-constant-declaration -> CONST . type constant-declarators
    (27) type -> . simple-type
    (28) type -> . class-type
    (29) type -> . array-type
    (30) simple-type -> . BOOL
    (31) simple-type -> . INT
    (32) simple-type -> . UINT
    (33) simple-type -> . CHAR
    (34) simple-type -> . DOUBLE
    (14) class-type -> . IDENTIFIER
    (35) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET

    BOOL            shift and go to state 47
    INT             shift and go to state 28
    UINT            shift and go to state 61
    CHAR            shift and go to state 34
    DOUBLE          shift and go to state 12
    IDENTIFIER      shift and go to state 148

    simple-type                    shift and go to state 18
    array-type                     shift and go to state 43
    type                           shift and go to state 151
    class-type                     shift and go to state 64

state 54

    (138) block -> BLOCK_BEGIN . M_bstart statement-list-opt BLOCK_END
    (139) M_bstart -> . empty
    (224) empty -> .

    IDENTIFIER      reduce using rule 224 (empty -> .)
    BLOCK_BEGIN     reduce using rule 224 (empty -> .)
    DELIM           reduce using rule 224 (empty -> .)
    CONSOLE         reduce using rule 224 (empty -> .)
    CONST           reduce using rule 224 (empty -> .)
    IF              reduce using rule 224 (empty -> .)
    SWITCH          reduce using rule 224 (empty -> .)
    WHILE           reduce using rule 224 (empty -> .)
    FOR             reduce using rule 224 (empty -> .)
    DO              reduce using rule 224 (empty -> .)
    BREAK           reduce using rule 224 (empty -> .)
    CONTINUE        reduce using rule 224 (empty -> .)
    GOTO            reduce using rule 224 (empty -> .)
    RETURN          reduce using rule 224 (empty -> .)
    VOID            reduce using rule 224 (empty -> .)
    PUBLIC          reduce using rule 224 (empty -> .)
    PRIVATE         reduce using rule 224 (empty -> .)
    BOOL            reduce using rule 224 (empty -> .)
    INT             reduce using rule 224 (empty -> .)
    UINT            reduce using rule 224 (empty -> .)
    CHAR            reduce using rule 224 (empty -> .)
    DOUBLE          reduce using rule 224 (empty -> .)
    BLOCK_END       reduce using rule 224 (empty -> .)

    M_bstart                       shift and go to state 152
    empty                          shift and go to state 153

state 55

    (119) modifier -> PRIVATE .

    VOID            reduce using rule 119 (modifier -> PRIVATE .)
    BOOL            reduce using rule 119 (modifier -> PRIVATE .)
    INT             reduce using rule 119 (modifier -> PRIVATE .)
    UINT            reduce using rule 119 (modifier -> PRIVATE .)
    CHAR            reduce using rule 119 (modifier -> PRIVATE .)
    DOUBLE          reduce using rule 119 (modifier -> PRIVATE .)
    IDENTIFIER      reduce using rule 119 (modifier -> PRIVATE .)
    CONST           reduce using rule 119 (modifier -> PRIVATE .)


state 56

    (10) class-header -> CLASS . IDENTIFIER class-base-opt

    IDENTIFIER      shift and go to state 154


state 57

    (153) statement -> read-statement .

    IDENTIFIER      reduce using rule 153 (statement -> read-statement .)
    BLOCK_BEGIN     reduce using rule 153 (statement -> read-statement .)
    DELIM           reduce using rule 153 (statement -> read-statement .)
    CONSOLE         reduce using rule 153 (statement -> read-statement .)
    CONST           reduce using rule 153 (statement -> read-statement .)
    IF              reduce using rule 153 (statement -> read-statement .)
    SWITCH          reduce using rule 153 (statement -> read-statement .)
    WHILE           reduce using rule 153 (statement -> read-statement .)
    FOR             reduce using rule 153 (statement -> read-statement .)
    DO              reduce using rule 153 (statement -> read-statement .)
    BREAK           reduce using rule 153 (statement -> read-statement .)
    CONTINUE        reduce using rule 153 (statement -> read-statement .)
    GOTO            reduce using rule 153 (statement -> read-statement .)
    RETURN          reduce using rule 153 (statement -> read-statement .)
    VOID            reduce using rule 153 (statement -> read-statement .)
    PUBLIC          reduce using rule 153 (statement -> read-statement .)
    PRIVATE         reduce using rule 153 (statement -> read-statement .)
    BOOL            reduce using rule 153 (statement -> read-statement .)
    INT             reduce using rule 153 (statement -> read-statement .)
    UINT            reduce using rule 153 (statement -> read-statement .)
    CHAR            reduce using rule 153 (statement -> read-statement .)
    DOUBLE          reduce using rule 153 (statement -> read-statement .)
    $end            reduce using rule 153 (statement -> read-statement .)
    BLOCK_END       reduce using rule 153 (statement -> read-statement .)
    CASE            reduce using rule 153 (statement -> read-statement .)
    DEFAULT         reduce using rule 153 (statement -> read-statement .)


state 58

    (155) write-statement -> CONSOLE . DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM
    (158) read-statement -> CONSOLE . DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM

    DOT             shift and go to state 155


state 59

    (167) statement-expression -> assignment .

    COMMA           reduce using rule 167 (statement-expression -> assignment .)
    DELIM           reduce using rule 167 (statement-expression -> assignment .)
    CLOSE_PAREN     reduce using rule 167 (statement-expression -> assignment .)


state 60

    (7) class-declarations -> class-declaration .

    CLASS           reduce using rule 7 (class-declarations -> class-declaration .)
    $end            reduce using rule 7 (class-declarations -> class-declaration .)


state 61

    (32) simple-type -> UINT .

    OPEN_BRACKET    reduce using rule 32 (simple-type -> UINT .)
    IDENTIFIER      reduce using rule 32 (simple-type -> UINT .)


state 62

    (118) modifier -> PUBLIC .

    VOID            reduce using rule 118 (modifier -> PUBLIC .)
    BOOL            reduce using rule 118 (modifier -> PUBLIC .)
    INT             reduce using rule 118 (modifier -> PUBLIC .)
    UINT            reduce using rule 118 (modifier -> PUBLIC .)
    CHAR            reduce using rule 118 (modifier -> PUBLIC .)
    DOUBLE          reduce using rule 118 (modifier -> PUBLIC .)
    IDENTIFIER      reduce using rule 118 (modifier -> PUBLIC .)
    CONST           reduce using rule 118 (modifier -> PUBLIC .)


state 63

    (170) if-statement -> IF . OPEN_PAREN expression CLOSE_PAREN M_if block
    (171) if-statement -> IF . OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block
    (172) if-statement -> IF . OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad

    OPEN_PAREN      shift and go to state 156


state 64

    (28) type -> class-type .

    IDENTIFIER      reduce using rule 28 (type -> class-type .)


state 65

    (110) assignment-operator -> DIVEQUAL .

    IDENTIFIER      reduce using rule 110 (assignment-operator -> DIVEQUAL .)
    PLUS            reduce using rule 110 (assignment-operator -> DIVEQUAL .)
    MINUS           reduce using rule 110 (assignment-operator -> DIVEQUAL .)
    BITNOT          reduce using rule 110 (assignment-operator -> DIVEQUAL .)
    BITCOMP         reduce using rule 110 (assignment-operator -> DIVEQUAL .)
    NEW             reduce using rule 110 (assignment-operator -> DIVEQUAL .)
    ICONST          reduce using rule 110 (assignment-operator -> DIVEQUAL .)
    DCONST          reduce using rule 110 (assignment-operator -> DIVEQUAL .)
    TRUE            reduce using rule 110 (assignment-operator -> DIVEQUAL .)
    FALSE           reduce using rule 110 (assignment-operator -> DIVEQUAL .)
    OPEN_PAREN      reduce using rule 110 (assignment-operator -> DIVEQUAL .)


state 66

    (116) assignment-operator -> RSHIFTEQUAL .

    IDENTIFIER      reduce using rule 116 (assignment-operator -> RSHIFTEQUAL .)
    PLUS            reduce using rule 116 (assignment-operator -> RSHIFTEQUAL .)
    MINUS           reduce using rule 116 (assignment-operator -> RSHIFTEQUAL .)
    BITNOT          reduce using rule 116 (assignment-operator -> RSHIFTEQUAL .)
    BITCOMP         reduce using rule 116 (assignment-operator -> RSHIFTEQUAL .)
    NEW             reduce using rule 116 (assignment-operator -> RSHIFTEQUAL .)
    ICONST          reduce using rule 116 (assignment-operator -> RSHIFTEQUAL .)
    DCONST          reduce using rule 116 (assignment-operator -> RSHIFTEQUAL .)
    TRUE            reduce using rule 116 (assignment-operator -> RSHIFTEQUAL .)
    FALSE           reduce using rule 116 (assignment-operator -> RSHIFTEQUAL .)
    OPEN_PAREN      reduce using rule 116 (assignment-operator -> RSHIFTEQUAL .)


state 67

    (104) assignment -> member-access assignment-operator . expression
    (39) expression -> . conditional-expression
    (40) expression -> . assignment
    (41) conditional-expression -> . conditional-or-expression
    (42) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (103) assignment -> . IDENTIFIER assignment-operator expression
    (104) assignment -> . member-access assignment-operator expression
    (105) assignment -> . element-access assignment-operator expression
    (43) conditional-or-expression -> . conditional-and-expression
    (44) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (45) conditional-and-expression -> . inclusive-or-expression
    (46) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (47) inclusive-or-expression -> . exclusive-or-expression
    (48) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (49) exclusive-or-expression -> . and-expression
    (50) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (51) and-expression -> . equality-expression
    (52) and-expression -> . and-expression BITAND equality-expression
    (53) equality-expression -> . relational-expression
    (54) equality-expression -> . equality-expression EQ relational-expression
    (55) equality-expression -> . equality-expression NE relational-expression
    (56) relational-expression -> . shift-expression
    (57) relational-expression -> . relational-expression LT shift-expression
    (58) relational-expression -> . relational-expression GT shift-expression
    (59) relational-expression -> . relational-expression LE shift-expression
    (60) relational-expression -> . relational-expression GE shift-expression
    (61) shift-expression -> . additive-expression
    (62) shift-expression -> . shift-expression LSHIFT additive-expression
    (63) shift-expression -> . shift-expression RSHIFT additive-expression
    (64) additive-expression -> . multiplicative-expression
    (65) additive-expression -> . additive-expression PLUS multiplicative-expression
    (66) additive-expression -> . additive-expression MINUS multiplicative-expression
    (67) multiplicative-expression -> . unary-expression
    (68) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (69) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (70) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (71) unary-expression -> . primary-expression
    (72) unary-expression -> . PLUS unary-expression
    (73) unary-expression -> . MINUS unary-expression
    (74) unary-expression -> . BITNOT unary-expression
    (75) unary-expression -> . BITCOMP unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . element-access
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (220) literal -> . ICONST
    (221) literal -> . DCONST
    (222) literal -> . TRUE
    (223) literal -> . FALSE
    (94) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 103
    PLUS            shift and go to state 102
    MINUS           shift and go to state 95
    BITNOT          shift and go to state 117
    BITCOMP         shift and go to state 97
    NEW             shift and go to state 93
    ICONST          shift and go to state 108
    DCONST          shift and go to state 118
    TRUE            shift and go to state 112
    FALSE           shift and go to state 110
    OPEN_PAREN      shift and go to state 99

    exclusive-or-expression        shift and go to state 89
    member-access                  shift and go to state 90
    relational-expression          shift and go to state 91
    additive-expression            shift and go to state 94
    primary-no-array-creation-expression shift and go to state 107
    inclusive-or-expression        shift and go to state 96
    unary-expression               shift and go to state 88
    element-access                 shift and go to state 98
    literal                        shift and go to state 106
    conditional-expression         shift and go to state 100
    conditional-and-expression     shift and go to state 101
    array-creation-expression      shift and go to state 92
    assignment                     shift and go to state 105
    equality-expression            shift and go to state 111
    shift-expression               shift and go to state 113
    and-expression                 shift and go to state 114
    multiplicative-expression      shift and go to state 115
    conditional-or-expression      shift and go to state 121
    primary-expression             shift and go to state 119
    invocation-expression          shift and go to state 120
    expression                     shift and go to state 157
    parenthesized-expression       shift and go to state 122

state 68

    (109) assignment-operator -> TIMESEQUAL .

    IDENTIFIER      reduce using rule 109 (assignment-operator -> TIMESEQUAL .)
    PLUS            reduce using rule 109 (assignment-operator -> TIMESEQUAL .)
    MINUS           reduce using rule 109 (assignment-operator -> TIMESEQUAL .)
    BITNOT          reduce using rule 109 (assignment-operator -> TIMESEQUAL .)
    BITCOMP         reduce using rule 109 (assignment-operator -> TIMESEQUAL .)
    NEW             reduce using rule 109 (assignment-operator -> TIMESEQUAL .)
    ICONST          reduce using rule 109 (assignment-operator -> TIMESEQUAL .)
    DCONST          reduce using rule 109 (assignment-operator -> TIMESEQUAL .)
    TRUE            reduce using rule 109 (assignment-operator -> TIMESEQUAL .)
    FALSE           reduce using rule 109 (assignment-operator -> TIMESEQUAL .)
    OPEN_PAREN      reduce using rule 109 (assignment-operator -> TIMESEQUAL .)


state 69

    (108) assignment-operator -> MINUSEQUAL .

    IDENTIFIER      reduce using rule 108 (assignment-operator -> MINUSEQUAL .)
    PLUS            reduce using rule 108 (assignment-operator -> MINUSEQUAL .)
    MINUS           reduce using rule 108 (assignment-operator -> MINUSEQUAL .)
    BITNOT          reduce using rule 108 (assignment-operator -> MINUSEQUAL .)
    BITCOMP         reduce using rule 108 (assignment-operator -> MINUSEQUAL .)
    NEW             reduce using rule 108 (assignment-operator -> MINUSEQUAL .)
    ICONST          reduce using rule 108 (assignment-operator -> MINUSEQUAL .)
    DCONST          reduce using rule 108 (assignment-operator -> MINUSEQUAL .)
    TRUE            reduce using rule 108 (assignment-operator -> MINUSEQUAL .)
    FALSE           reduce using rule 108 (assignment-operator -> MINUSEQUAL .)
    OPEN_PAREN      reduce using rule 108 (assignment-operator -> MINUSEQUAL .)


state 70

    (102) element-access -> member-access OPEN_BRACKET . expression CLOSE_BRACKET
    (39) expression -> . conditional-expression
    (40) expression -> . assignment
    (41) conditional-expression -> . conditional-or-expression
    (42) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (103) assignment -> . IDENTIFIER assignment-operator expression
    (104) assignment -> . member-access assignment-operator expression
    (105) assignment -> . element-access assignment-operator expression
    (43) conditional-or-expression -> . conditional-and-expression
    (44) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (45) conditional-and-expression -> . inclusive-or-expression
    (46) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (47) inclusive-or-expression -> . exclusive-or-expression
    (48) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (49) exclusive-or-expression -> . and-expression
    (50) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (51) and-expression -> . equality-expression
    (52) and-expression -> . and-expression BITAND equality-expression
    (53) equality-expression -> . relational-expression
    (54) equality-expression -> . equality-expression EQ relational-expression
    (55) equality-expression -> . equality-expression NE relational-expression
    (56) relational-expression -> . shift-expression
    (57) relational-expression -> . relational-expression LT shift-expression
    (58) relational-expression -> . relational-expression GT shift-expression
    (59) relational-expression -> . relational-expression LE shift-expression
    (60) relational-expression -> . relational-expression GE shift-expression
    (61) shift-expression -> . additive-expression
    (62) shift-expression -> . shift-expression LSHIFT additive-expression
    (63) shift-expression -> . shift-expression RSHIFT additive-expression
    (64) additive-expression -> . multiplicative-expression
    (65) additive-expression -> . additive-expression PLUS multiplicative-expression
    (66) additive-expression -> . additive-expression MINUS multiplicative-expression
    (67) multiplicative-expression -> . unary-expression
    (68) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (69) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (70) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (71) unary-expression -> . primary-expression
    (72) unary-expression -> . PLUS unary-expression
    (73) unary-expression -> . MINUS unary-expression
    (74) unary-expression -> . BITNOT unary-expression
    (75) unary-expression -> . BITCOMP unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . element-access
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (220) literal -> . ICONST
    (221) literal -> . DCONST
    (222) literal -> . TRUE
    (223) literal -> . FALSE
    (94) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 103
    PLUS            shift and go to state 102
    MINUS           shift and go to state 95
    BITNOT          shift and go to state 117
    BITCOMP         shift and go to state 97
    NEW             shift and go to state 93
    ICONST          shift and go to state 108
    DCONST          shift and go to state 118
    TRUE            shift and go to state 112
    FALSE           shift and go to state 110
    OPEN_PAREN      shift and go to state 99

    exclusive-or-expression        shift and go to state 89
    member-access                  shift and go to state 90
    relational-expression          shift and go to state 91
    additive-expression            shift and go to state 94
    primary-no-array-creation-expression shift and go to state 107
    inclusive-or-expression        shift and go to state 96
    unary-expression               shift and go to state 88
    element-access                 shift and go to state 98
    literal                        shift and go to state 106
    conditional-expression         shift and go to state 100
    conditional-and-expression     shift and go to state 101
    array-creation-expression      shift and go to state 92
    assignment                     shift and go to state 105
    equality-expression            shift and go to state 111
    shift-expression               shift and go to state 113
    and-expression                 shift and go to state 114
    multiplicative-expression      shift and go to state 115
    expression                     shift and go to state 158
    primary-expression             shift and go to state 119
    invocation-expression          shift and go to state 120
    conditional-or-expression      shift and go to state 121
    parenthesized-expression       shift and go to state 122

state 71

    (114) assignment-operator -> BITXOREQUAL .

    IDENTIFIER      reduce using rule 114 (assignment-operator -> BITXOREQUAL .)
    PLUS            reduce using rule 114 (assignment-operator -> BITXOREQUAL .)
    MINUS           reduce using rule 114 (assignment-operator -> BITXOREQUAL .)
    BITNOT          reduce using rule 114 (assignment-operator -> BITXOREQUAL .)
    BITCOMP         reduce using rule 114 (assignment-operator -> BITXOREQUAL .)
    NEW             reduce using rule 114 (assignment-operator -> BITXOREQUAL .)
    ICONST          reduce using rule 114 (assignment-operator -> BITXOREQUAL .)
    DCONST          reduce using rule 114 (assignment-operator -> BITXOREQUAL .)
    TRUE            reduce using rule 114 (assignment-operator -> BITXOREQUAL .)
    FALSE           reduce using rule 114 (assignment-operator -> BITXOREQUAL .)
    OPEN_PAREN      reduce using rule 114 (assignment-operator -> BITXOREQUAL .)


state 72

    (113) assignment-operator -> BITOREQUAL .

    IDENTIFIER      reduce using rule 113 (assignment-operator -> BITOREQUAL .)
    PLUS            reduce using rule 113 (assignment-operator -> BITOREQUAL .)
    MINUS           reduce using rule 113 (assignment-operator -> BITOREQUAL .)
    BITNOT          reduce using rule 113 (assignment-operator -> BITOREQUAL .)
    BITCOMP         reduce using rule 113 (assignment-operator -> BITOREQUAL .)
    NEW             reduce using rule 113 (assignment-operator -> BITOREQUAL .)
    ICONST          reduce using rule 113 (assignment-operator -> BITOREQUAL .)
    DCONST          reduce using rule 113 (assignment-operator -> BITOREQUAL .)
    TRUE            reduce using rule 113 (assignment-operator -> BITOREQUAL .)
    FALSE           reduce using rule 113 (assignment-operator -> BITOREQUAL .)
    OPEN_PAREN      reduce using rule 113 (assignment-operator -> BITOREQUAL .)


state 73

    (107) assignment-operator -> PLUSEQUAL .

    IDENTIFIER      reduce using rule 107 (assignment-operator -> PLUSEQUAL .)
    PLUS            reduce using rule 107 (assignment-operator -> PLUSEQUAL .)
    MINUS           reduce using rule 107 (assignment-operator -> PLUSEQUAL .)
    BITNOT          reduce using rule 107 (assignment-operator -> PLUSEQUAL .)
    BITCOMP         reduce using rule 107 (assignment-operator -> PLUSEQUAL .)
    NEW             reduce using rule 107 (assignment-operator -> PLUSEQUAL .)
    ICONST          reduce using rule 107 (assignment-operator -> PLUSEQUAL .)
    DCONST          reduce using rule 107 (assignment-operator -> PLUSEQUAL .)
    TRUE            reduce using rule 107 (assignment-operator -> PLUSEQUAL .)
    FALSE           reduce using rule 107 (assignment-operator -> PLUSEQUAL .)
    OPEN_PAREN      reduce using rule 107 (assignment-operator -> PLUSEQUAL .)


state 74

    (98) invocation-expression -> member-access OPEN_PAREN . argument-list-opt CLOSE_PAREN
    (99) argument-list-opt -> . expression-list
    (100) argument-list-opt -> . empty
    (81) expression-list -> . expression
    (82) expression-list -> . expression-list COMMA expression
    (224) empty -> .
    (39) expression -> . conditional-expression
    (40) expression -> . assignment
    (41) conditional-expression -> . conditional-or-expression
    (42) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (103) assignment -> . IDENTIFIER assignment-operator expression
    (104) assignment -> . member-access assignment-operator expression
    (105) assignment -> . element-access assignment-operator expression
    (43) conditional-or-expression -> . conditional-and-expression
    (44) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (45) conditional-and-expression -> . inclusive-or-expression
    (46) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (47) inclusive-or-expression -> . exclusive-or-expression
    (48) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (49) exclusive-or-expression -> . and-expression
    (50) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (51) and-expression -> . equality-expression
    (52) and-expression -> . and-expression BITAND equality-expression
    (53) equality-expression -> . relational-expression
    (54) equality-expression -> . equality-expression EQ relational-expression
    (55) equality-expression -> . equality-expression NE relational-expression
    (56) relational-expression -> . shift-expression
    (57) relational-expression -> . relational-expression LT shift-expression
    (58) relational-expression -> . relational-expression GT shift-expression
    (59) relational-expression -> . relational-expression LE shift-expression
    (60) relational-expression -> . relational-expression GE shift-expression
    (61) shift-expression -> . additive-expression
    (62) shift-expression -> . shift-expression LSHIFT additive-expression
    (63) shift-expression -> . shift-expression RSHIFT additive-expression
    (64) additive-expression -> . multiplicative-expression
    (65) additive-expression -> . additive-expression PLUS multiplicative-expression
    (66) additive-expression -> . additive-expression MINUS multiplicative-expression
    (67) multiplicative-expression -> . unary-expression
    (68) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (69) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (70) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (71) unary-expression -> . primary-expression
    (72) unary-expression -> . PLUS unary-expression
    (73) unary-expression -> . MINUS unary-expression
    (74) unary-expression -> . BITNOT unary-expression
    (75) unary-expression -> . BITCOMP unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . element-access
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (220) literal -> . ICONST
    (221) literal -> . DCONST
    (222) literal -> . TRUE
    (223) literal -> . FALSE
    (94) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    CLOSE_PAREN     reduce using rule 224 (empty -> .)
    IDENTIFIER      shift and go to state 103
    PLUS            shift and go to state 102
    MINUS           shift and go to state 95
    BITNOT          shift and go to state 117
    BITCOMP         shift and go to state 97
    NEW             shift and go to state 93
    ICONST          shift and go to state 108
    DCONST          shift and go to state 118
    TRUE            shift and go to state 112
    FALSE           shift and go to state 110
    OPEN_PAREN      shift and go to state 99

    argument-list-opt              shift and go to state 159
    exclusive-or-expression        shift and go to state 89
    member-access                  shift and go to state 90
    relational-expression          shift and go to state 91
    additive-expression            shift and go to state 94
    primary-no-array-creation-expression shift and go to state 107
    inclusive-or-expression        shift and go to state 96
    expression-list                shift and go to state 161
    unary-expression               shift and go to state 88
    element-access                 shift and go to state 98
    literal                        shift and go to state 106
    conditional-expression         shift and go to state 100
    assignment                     shift and go to state 105
    empty                          shift and go to state 160
    array-creation-expression      shift and go to state 92
    conditional-and-expression     shift and go to state 101
    equality-expression            shift and go to state 111
    shift-expression               shift and go to state 113
    and-expression                 shift and go to state 114
    multiplicative-expression      shift and go to state 115
    conditional-or-expression      shift and go to state 121
    primary-expression             shift and go to state 119
    invocation-expression          shift and go to state 120
    expression                     shift and go to state 162
    parenthesized-expression       shift and go to state 122

state 75

    (96) member-access -> member-access DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 163


state 76

    (112) assignment-operator -> BITANDEQUAL .

    IDENTIFIER      reduce using rule 112 (assignment-operator -> BITANDEQUAL .)
    PLUS            reduce using rule 112 (assignment-operator -> BITANDEQUAL .)
    MINUS           reduce using rule 112 (assignment-operator -> BITANDEQUAL .)
    BITNOT          reduce using rule 112 (assignment-operator -> BITANDEQUAL .)
    BITCOMP         reduce using rule 112 (assignment-operator -> BITANDEQUAL .)
    NEW             reduce using rule 112 (assignment-operator -> BITANDEQUAL .)
    ICONST          reduce using rule 112 (assignment-operator -> BITANDEQUAL .)
    DCONST          reduce using rule 112 (assignment-operator -> BITANDEQUAL .)
    TRUE            reduce using rule 112 (assignment-operator -> BITANDEQUAL .)
    FALSE           reduce using rule 112 (assignment-operator -> BITANDEQUAL .)
    OPEN_PAREN      reduce using rule 112 (assignment-operator -> BITANDEQUAL .)


state 77

    (115) assignment-operator -> LSHIFTEQUAL .

    IDENTIFIER      reduce using rule 115 (assignment-operator -> LSHIFTEQUAL .)
    PLUS            reduce using rule 115 (assignment-operator -> LSHIFTEQUAL .)
    MINUS           reduce using rule 115 (assignment-operator -> LSHIFTEQUAL .)
    BITNOT          reduce using rule 115 (assignment-operator -> LSHIFTEQUAL .)
    BITCOMP         reduce using rule 115 (assignment-operator -> LSHIFTEQUAL .)
    NEW             reduce using rule 115 (assignment-operator -> LSHIFTEQUAL .)
    ICONST          reduce using rule 115 (assignment-operator -> LSHIFTEQUAL .)
    DCONST          reduce using rule 115 (assignment-operator -> LSHIFTEQUAL .)
    TRUE            reduce using rule 115 (assignment-operator -> LSHIFTEQUAL .)
    FALSE           reduce using rule 115 (assignment-operator -> LSHIFTEQUAL .)
    OPEN_PAREN      reduce using rule 115 (assignment-operator -> LSHIFTEQUAL .)


state 78

    (106) assignment-operator -> ASSIGN .

    IDENTIFIER      reduce using rule 106 (assignment-operator -> ASSIGN .)
    PLUS            reduce using rule 106 (assignment-operator -> ASSIGN .)
    MINUS           reduce using rule 106 (assignment-operator -> ASSIGN .)
    BITNOT          reduce using rule 106 (assignment-operator -> ASSIGN .)
    BITCOMP         reduce using rule 106 (assignment-operator -> ASSIGN .)
    NEW             reduce using rule 106 (assignment-operator -> ASSIGN .)
    ICONST          reduce using rule 106 (assignment-operator -> ASSIGN .)
    DCONST          reduce using rule 106 (assignment-operator -> ASSIGN .)
    TRUE            reduce using rule 106 (assignment-operator -> ASSIGN .)
    FALSE           reduce using rule 106 (assignment-operator -> ASSIGN .)
    OPEN_PAREN      reduce using rule 106 (assignment-operator -> ASSIGN .)


state 79

    (111) assignment-operator -> MODEQUAL .

    IDENTIFIER      reduce using rule 111 (assignment-operator -> MODEQUAL .)
    PLUS            reduce using rule 111 (assignment-operator -> MODEQUAL .)
    MINUS           reduce using rule 111 (assignment-operator -> MODEQUAL .)
    BITNOT          reduce using rule 111 (assignment-operator -> MODEQUAL .)
    BITCOMP         reduce using rule 111 (assignment-operator -> MODEQUAL .)
    NEW             reduce using rule 111 (assignment-operator -> MODEQUAL .)
    ICONST          reduce using rule 111 (assignment-operator -> MODEQUAL .)
    DCONST          reduce using rule 111 (assignment-operator -> MODEQUAL .)
    TRUE            reduce using rule 111 (assignment-operator -> MODEQUAL .)
    FALSE           reduce using rule 111 (assignment-operator -> MODEQUAL .)
    OPEN_PAREN      reduce using rule 111 (assignment-operator -> MODEQUAL .)


state 80

    (165) expression-statement -> statement-expression DELIM .

    IDENTIFIER      reduce using rule 165 (expression-statement -> statement-expression DELIM .)
    BLOCK_BEGIN     reduce using rule 165 (expression-statement -> statement-expression DELIM .)
    DELIM           reduce using rule 165 (expression-statement -> statement-expression DELIM .)
    CONSOLE         reduce using rule 165 (expression-statement -> statement-expression DELIM .)
    CONST           reduce using rule 165 (expression-statement -> statement-expression DELIM .)
    IF              reduce using rule 165 (expression-statement -> statement-expression DELIM .)
    SWITCH          reduce using rule 165 (expression-statement -> statement-expression DELIM .)
    WHILE           reduce using rule 165 (expression-statement -> statement-expression DELIM .)
    FOR             reduce using rule 165 (expression-statement -> statement-expression DELIM .)
    DO              reduce using rule 165 (expression-statement -> statement-expression DELIM .)
    BREAK           reduce using rule 165 (expression-statement -> statement-expression DELIM .)
    CONTINUE        reduce using rule 165 (expression-statement -> statement-expression DELIM .)
    GOTO            reduce using rule 165 (expression-statement -> statement-expression DELIM .)
    RETURN          reduce using rule 165 (expression-statement -> statement-expression DELIM .)
    VOID            reduce using rule 165 (expression-statement -> statement-expression DELIM .)
    PUBLIC          reduce using rule 165 (expression-statement -> statement-expression DELIM .)
    PRIVATE         reduce using rule 165 (expression-statement -> statement-expression DELIM .)
    BOOL            reduce using rule 165 (expression-statement -> statement-expression DELIM .)
    INT             reduce using rule 165 (expression-statement -> statement-expression DELIM .)
    UINT            reduce using rule 165 (expression-statement -> statement-expression DELIM .)
    CHAR            reduce using rule 165 (expression-statement -> statement-expression DELIM .)
    DOUBLE          reduce using rule 165 (expression-statement -> statement-expression DELIM .)
    CASE            reduce using rule 165 (expression-statement -> statement-expression DELIM .)
    DEFAULT         reduce using rule 165 (expression-statement -> statement-expression DELIM .)
    BLOCK_END       reduce using rule 165 (expression-statement -> statement-expression DELIM .)
    $end            reduce using rule 165 (expression-statement -> statement-expression DELIM .)


state 81

    (188) iteration-statement -> for-statement M_quad .

    IDENTIFIER      reduce using rule 188 (iteration-statement -> for-statement M_quad .)
    BLOCK_BEGIN     reduce using rule 188 (iteration-statement -> for-statement M_quad .)
    DELIM           reduce using rule 188 (iteration-statement -> for-statement M_quad .)
    CONSOLE         reduce using rule 188 (iteration-statement -> for-statement M_quad .)
    CONST           reduce using rule 188 (iteration-statement -> for-statement M_quad .)
    IF              reduce using rule 188 (iteration-statement -> for-statement M_quad .)
    SWITCH          reduce using rule 188 (iteration-statement -> for-statement M_quad .)
    WHILE           reduce using rule 188 (iteration-statement -> for-statement M_quad .)
    FOR             reduce using rule 188 (iteration-statement -> for-statement M_quad .)
    DO              reduce using rule 188 (iteration-statement -> for-statement M_quad .)
    BREAK           reduce using rule 188 (iteration-statement -> for-statement M_quad .)
    CONTINUE        reduce using rule 188 (iteration-statement -> for-statement M_quad .)
    GOTO            reduce using rule 188 (iteration-statement -> for-statement M_quad .)
    RETURN          reduce using rule 188 (iteration-statement -> for-statement M_quad .)
    VOID            reduce using rule 188 (iteration-statement -> for-statement M_quad .)
    PUBLIC          reduce using rule 188 (iteration-statement -> for-statement M_quad .)
    PRIVATE         reduce using rule 188 (iteration-statement -> for-statement M_quad .)
    BOOL            reduce using rule 188 (iteration-statement -> for-statement M_quad .)
    INT             reduce using rule 188 (iteration-statement -> for-statement M_quad .)
    UINT            reduce using rule 188 (iteration-statement -> for-statement M_quad .)
    CHAR            reduce using rule 188 (iteration-statement -> for-statement M_quad .)
    DOUBLE          reduce using rule 188 (iteration-statement -> for-statement M_quad .)
    BLOCK_END       reduce using rule 188 (iteration-statement -> for-statement M_quad .)
    $end            reduce using rule 188 (iteration-statement -> for-statement M_quad .)
    CASE            reduce using rule 188 (iteration-statement -> for-statement M_quad .)
    DEFAULT         reduce using rule 188 (iteration-statement -> for-statement M_quad .)


state 82

    (175) M_quad -> empty .

    IDENTIFIER      reduce using rule 175 (M_quad -> empty .)
    BLOCK_BEGIN     reduce using rule 175 (M_quad -> empty .)
    DELIM           reduce using rule 175 (M_quad -> empty .)
    CONSOLE         reduce using rule 175 (M_quad -> empty .)
    CONST           reduce using rule 175 (M_quad -> empty .)
    IF              reduce using rule 175 (M_quad -> empty .)
    SWITCH          reduce using rule 175 (M_quad -> empty .)
    WHILE           reduce using rule 175 (M_quad -> empty .)
    FOR             reduce using rule 175 (M_quad -> empty .)
    DO              reduce using rule 175 (M_quad -> empty .)
    BREAK           reduce using rule 175 (M_quad -> empty .)
    CONTINUE        reduce using rule 175 (M_quad -> empty .)
    GOTO            reduce using rule 175 (M_quad -> empty .)
    RETURN          reduce using rule 175 (M_quad -> empty .)
    VOID            reduce using rule 175 (M_quad -> empty .)
    PUBLIC          reduce using rule 175 (M_quad -> empty .)
    PRIVATE         reduce using rule 175 (M_quad -> empty .)
    BOOL            reduce using rule 175 (M_quad -> empty .)
    INT             reduce using rule 175 (M_quad -> empty .)
    UINT            reduce using rule 175 (M_quad -> empty .)
    CHAR            reduce using rule 175 (M_quad -> empty .)
    DOUBLE          reduce using rule 175 (M_quad -> empty .)
    $end            reduce using rule 175 (M_quad -> empty .)
    BLOCK_END       reduce using rule 175 (M_quad -> empty .)
    CASE            reduce using rule 175 (M_quad -> empty .)
    DEFAULT         reduce using rule 175 (M_quad -> empty .)
    OPEN_PAREN      reduce using rule 175 (M_quad -> empty .)
    PLUS            reduce using rule 175 (M_quad -> empty .)
    MINUS           reduce using rule 175 (M_quad -> empty .)
    BITNOT          reduce using rule 175 (M_quad -> empty .)
    BITCOMP         reduce using rule 175 (M_quad -> empty .)
    NEW             reduce using rule 175 (M_quad -> empty .)
    ICONST          reduce using rule 175 (M_quad -> empty .)
    DCONST          reduce using rule 175 (M_quad -> empty .)
    TRUE            reduce using rule 175 (M_quad -> empty .)
    FALSE           reduce using rule 175 (M_quad -> empty .)
    CLOSE_PAREN     reduce using rule 175 (M_quad -> empty .)


state 83

    (128) method-header -> VOID IDENTIFIER . OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN

    OPEN_PAREN      shift and go to state 164


state 84

    (209) goto-statement -> GOTO IDENTIFIER . DELIM

    DELIM           shift and go to state 165


state 85

    (8) class-declarations -> class-declarations class-declaration .

    CLASS           reduce using rule 8 (class-declarations -> class-declarations class-declaration .)
    $end            reduce using rule 8 (class-declarations -> class-declarations class-declaration .)


state 86

    (9) class-declaration -> class-header class-body . semi-opt
    (3) semi-opt -> . DELIM
    (4) semi-opt -> . empty
    (224) empty -> .

    DELIM           shift and go to state 167
    CLASS           reduce using rule 224 (empty -> .)
    $end            reduce using rule 224 (empty -> .)

    semi-opt                       shift and go to state 166
    empty                          shift and go to state 168

state 87

    (15) class-body -> BLOCK_BEGIN . class-member-declarations-opt BLOCK_END
    (16) class-member-declarations-opt -> . class-member-declarations
    (17) class-member-declarations-opt -> . empty
    (18) class-member-declarations -> . class-member-declaration
    (19) class-member-declarations -> . class-member-declarations class-member-declaration
    (224) empty -> .
    (20) class-member-declaration -> . constant-declaration
    (21) class-member-declaration -> . field-declaration
    (22) class-member-declaration -> . method-declaration
    (23) class-member-declaration -> . constructor-declaration
    (24) class-member-declaration -> . destructor-declaration
    (25) constant-declaration -> . modifier CONST simple-type constant-declarators DELIM
    (26) constant-declaration -> . CONST simple-type constant-declarators DELIM
    (117) field-declaration -> . type variable-declarators DELIM
    (124) method-declaration -> . method-header method-body
    (213) constructor-declaration -> . constructor-declarator constructor-body
    (217) destructor-declaration -> . BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body
    (118) modifier -> . PUBLIC
    (119) modifier -> . PRIVATE
    (27) type -> . simple-type
    (28) type -> . class-type
    (29) type -> . array-type
    (125) method-header -> . modifier type IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (126) method-header -> . modifier VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (127) method-header -> . type IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (128) method-header -> . VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (214) constructor-declarator -> . IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (30) simple-type -> . BOOL
    (31) simple-type -> . INT
    (32) simple-type -> . UINT
    (33) simple-type -> . CHAR
    (34) simple-type -> . DOUBLE
    (14) class-type -> . IDENTIFIER
    (35) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET

    BLOCK_END       reduce using rule 224 (empty -> .)
    CONST           shift and go to state 169
    BITCOMP         shift and go to state 170
    PUBLIC          shift and go to state 62
    PRIVATE         shift and go to state 55
    VOID            shift and go to state 7
    IDENTIFIER      shift and go to state 179
    BOOL            shift and go to state 47
    INT             shift and go to state 28
    UINT            shift and go to state 61
    CHAR            shift and go to state 34
    DOUBLE          shift and go to state 12

    method-header                  shift and go to state 17
    class-member-declaration       shift and go to state 182
    method-declaration             shift and go to state 171
    class-member-declarations-opt  shift and go to state 176
    type                           shift and go to state 174
    empty                          shift and go to state 175
    array-type                     shift and go to state 43
    field-declaration              shift and go to state 172
    constructor-declaration        shift and go to state 177
    class-member-declarations      shift and go to state 178
    constant-declaration           shift and go to state 173
    destructor-declaration         shift and go to state 180
    constructor-declarator         shift and go to state 181
    class-type                     shift and go to state 64
    simple-type                    shift and go to state 18
    modifier                       shift and go to state 183

state 88

    (67) multiplicative-expression -> unary-expression .

    TIMES           reduce using rule 67 (multiplicative-expression -> unary-expression .)
    DIV             reduce using rule 67 (multiplicative-expression -> unary-expression .)
    MOD             reduce using rule 67 (multiplicative-expression -> unary-expression .)
    PLUS            reduce using rule 67 (multiplicative-expression -> unary-expression .)
    MINUS           reduce using rule 67 (multiplicative-expression -> unary-expression .)
    LSHIFT          reduce using rule 67 (multiplicative-expression -> unary-expression .)
    RSHIFT          reduce using rule 67 (multiplicative-expression -> unary-expression .)
    LT              reduce using rule 67 (multiplicative-expression -> unary-expression .)
    GT              reduce using rule 67 (multiplicative-expression -> unary-expression .)
    LE              reduce using rule 67 (multiplicative-expression -> unary-expression .)
    GE              reduce using rule 67 (multiplicative-expression -> unary-expression .)
    EQ              reduce using rule 67 (multiplicative-expression -> unary-expression .)
    NE              reduce using rule 67 (multiplicative-expression -> unary-expression .)
    BITAND          reduce using rule 67 (multiplicative-expression -> unary-expression .)
    BITXOR          reduce using rule 67 (multiplicative-expression -> unary-expression .)
    BITOR           reduce using rule 67 (multiplicative-expression -> unary-expression .)
    LOGAND          reduce using rule 67 (multiplicative-expression -> unary-expression .)
    CONDOP          reduce using rule 67 (multiplicative-expression -> unary-expression .)
    LOGOR           reduce using rule 67 (multiplicative-expression -> unary-expression .)
    COMMA           reduce using rule 67 (multiplicative-expression -> unary-expression .)
    BLOCK_END       reduce using rule 67 (multiplicative-expression -> unary-expression .)
    DELIM           reduce using rule 67 (multiplicative-expression -> unary-expression .)
    CLOSE_BRACKET   reduce using rule 67 (multiplicative-expression -> unary-expression .)
    CLOSE_PAREN     reduce using rule 67 (multiplicative-expression -> unary-expression .)
    COLON           reduce using rule 67 (multiplicative-expression -> unary-expression .)


state 89

    (47) inclusive-or-expression -> exclusive-or-expression .
    (50) exclusive-or-expression -> exclusive-or-expression . BITXOR and-expression

    BITOR           reduce using rule 47 (inclusive-or-expression -> exclusive-or-expression .)
    LOGAND          reduce using rule 47 (inclusive-or-expression -> exclusive-or-expression .)
    CONDOP          reduce using rule 47 (inclusive-or-expression -> exclusive-or-expression .)
    LOGOR           reduce using rule 47 (inclusive-or-expression -> exclusive-or-expression .)
    DELIM           reduce using rule 47 (inclusive-or-expression -> exclusive-or-expression .)
    CLOSE_BRACKET   reduce using rule 47 (inclusive-or-expression -> exclusive-or-expression .)
    COMMA           reduce using rule 47 (inclusive-or-expression -> exclusive-or-expression .)
    CLOSE_PAREN     reduce using rule 47 (inclusive-or-expression -> exclusive-or-expression .)
    COLON           reduce using rule 47 (inclusive-or-expression -> exclusive-or-expression .)
    BLOCK_END       reduce using rule 47 (inclusive-or-expression -> exclusive-or-expression .)
    BITXOR          shift and go to state 184


state 90

    (104) assignment -> member-access . assignment-operator expression
    (96) member-access -> member-access . DOT IDENTIFIER
    (102) element-access -> member-access . OPEN_BRACKET expression CLOSE_BRACKET
    (92) primary-no-array-creation-expression -> member-access .
    (98) invocation-expression -> member-access . OPEN_PAREN argument-list-opt CLOSE_PAREN
    (106) assignment-operator -> . ASSIGN
    (107) assignment-operator -> . PLUSEQUAL
    (108) assignment-operator -> . MINUSEQUAL
    (109) assignment-operator -> . TIMESEQUAL
    (110) assignment-operator -> . DIVEQUAL
    (111) assignment-operator -> . MODEQUAL
    (112) assignment-operator -> . BITANDEQUAL
    (113) assignment-operator -> . BITOREQUAL
    (114) assignment-operator -> . BITXOREQUAL
    (115) assignment-operator -> . LSHIFTEQUAL
    (116) assignment-operator -> . RSHIFTEQUAL

    DOT             shift and go to state 75
    OPEN_BRACKET    shift and go to state 70
    TIMES           reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    DIV             reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    MOD             reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    PLUS            reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    MINUS           reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    LSHIFT          reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    RSHIFT          reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    LT              reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    GT              reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    LE              reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    GE              reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    EQ              reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    NE              reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    BITAND          reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    BITXOR          reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    BITOR           reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    LOGAND          reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    CONDOP          reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    LOGOR           reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    COMMA           reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    DELIM           reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    COLON           reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    CLOSE_PAREN     reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    CLOSE_BRACKET   reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    BLOCK_END       reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    OPEN_PAREN      shift and go to state 74
    ASSIGN          shift and go to state 78
    PLUSEQUAL       shift and go to state 73
    MINUSEQUAL      shift and go to state 69
    TIMESEQUAL      shift and go to state 68
    DIVEQUAL        shift and go to state 65
    MODEQUAL        shift and go to state 79
    BITANDEQUAL     shift and go to state 76
    BITOREQUAL      shift and go to state 72
    BITXOREQUAL     shift and go to state 71
    LSHIFTEQUAL     shift and go to state 77
    RSHIFTEQUAL     shift and go to state 66

    assignment-operator            shift and go to state 67

state 91

    (53) equality-expression -> relational-expression .
    (57) relational-expression -> relational-expression . LT shift-expression
    (58) relational-expression -> relational-expression . GT shift-expression
    (59) relational-expression -> relational-expression . LE shift-expression
    (60) relational-expression -> relational-expression . GE shift-expression

    EQ              reduce using rule 53 (equality-expression -> relational-expression .)
    NE              reduce using rule 53 (equality-expression -> relational-expression .)
    BITAND          reduce using rule 53 (equality-expression -> relational-expression .)
    BITXOR          reduce using rule 53 (equality-expression -> relational-expression .)
    BITOR           reduce using rule 53 (equality-expression -> relational-expression .)
    LOGAND          reduce using rule 53 (equality-expression -> relational-expression .)
    CONDOP          reduce using rule 53 (equality-expression -> relational-expression .)
    LOGOR           reduce using rule 53 (equality-expression -> relational-expression .)
    COMMA           reduce using rule 53 (equality-expression -> relational-expression .)
    CLOSE_PAREN     reduce using rule 53 (equality-expression -> relational-expression .)
    DELIM           reduce using rule 53 (equality-expression -> relational-expression .)
    CLOSE_BRACKET   reduce using rule 53 (equality-expression -> relational-expression .)
    COLON           reduce using rule 53 (equality-expression -> relational-expression .)
    BLOCK_END       reduce using rule 53 (equality-expression -> relational-expression .)
    LT              shift and go to state 187
    GT              shift and go to state 188
    LE              shift and go to state 185
    GE              shift and go to state 186


state 92

    (76) primary-expression -> array-creation-expression .

    TIMES           reduce using rule 76 (primary-expression -> array-creation-expression .)
    DIV             reduce using rule 76 (primary-expression -> array-creation-expression .)
    MOD             reduce using rule 76 (primary-expression -> array-creation-expression .)
    PLUS            reduce using rule 76 (primary-expression -> array-creation-expression .)
    MINUS           reduce using rule 76 (primary-expression -> array-creation-expression .)
    LSHIFT          reduce using rule 76 (primary-expression -> array-creation-expression .)
    RSHIFT          reduce using rule 76 (primary-expression -> array-creation-expression .)
    LT              reduce using rule 76 (primary-expression -> array-creation-expression .)
    GT              reduce using rule 76 (primary-expression -> array-creation-expression .)
    LE              reduce using rule 76 (primary-expression -> array-creation-expression .)
    GE              reduce using rule 76 (primary-expression -> array-creation-expression .)
    EQ              reduce using rule 76 (primary-expression -> array-creation-expression .)
    NE              reduce using rule 76 (primary-expression -> array-creation-expression .)
    BITAND          reduce using rule 76 (primary-expression -> array-creation-expression .)
    BITXOR          reduce using rule 76 (primary-expression -> array-creation-expression .)
    BITOR           reduce using rule 76 (primary-expression -> array-creation-expression .)
    LOGAND          reduce using rule 76 (primary-expression -> array-creation-expression .)
    CONDOP          reduce using rule 76 (primary-expression -> array-creation-expression .)
    LOGOR           reduce using rule 76 (primary-expression -> array-creation-expression .)
    DELIM           reduce using rule 76 (primary-expression -> array-creation-expression .)
    CLOSE_BRACKET   reduce using rule 76 (primary-expression -> array-creation-expression .)
    COMMA           reduce using rule 76 (primary-expression -> array-creation-expression .)
    CLOSE_PAREN     reduce using rule 76 (primary-expression -> array-creation-expression .)
    COLON           reduce using rule 76 (primary-expression -> array-creation-expression .)
    BLOCK_END       reduce using rule 76 (primary-expression -> array-creation-expression .)


state 93

    (78) array-creation-expression -> NEW . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (30) simple-type -> . BOOL
    (31) simple-type -> . INT
    (32) simple-type -> . UINT
    (33) simple-type -> . CHAR
    (34) simple-type -> . DOUBLE

    BOOL            shift and go to state 47
    INT             shift and go to state 28
    UINT            shift and go to state 61
    CHAR            shift and go to state 34
    DOUBLE          shift and go to state 12

    simple-type                    shift and go to state 189

state 94

    (61) shift-expression -> additive-expression .
    (65) additive-expression -> additive-expression . PLUS multiplicative-expression
    (66) additive-expression -> additive-expression . MINUS multiplicative-expression

    LSHIFT          reduce using rule 61 (shift-expression -> additive-expression .)
    RSHIFT          reduce using rule 61 (shift-expression -> additive-expression .)
    LT              reduce using rule 61 (shift-expression -> additive-expression .)
    GT              reduce using rule 61 (shift-expression -> additive-expression .)
    LE              reduce using rule 61 (shift-expression -> additive-expression .)
    GE              reduce using rule 61 (shift-expression -> additive-expression .)
    EQ              reduce using rule 61 (shift-expression -> additive-expression .)
    NE              reduce using rule 61 (shift-expression -> additive-expression .)
    BITAND          reduce using rule 61 (shift-expression -> additive-expression .)
    BITXOR          reduce using rule 61 (shift-expression -> additive-expression .)
    BITOR           reduce using rule 61 (shift-expression -> additive-expression .)
    LOGAND          reduce using rule 61 (shift-expression -> additive-expression .)
    CONDOP          reduce using rule 61 (shift-expression -> additive-expression .)
    LOGOR           reduce using rule 61 (shift-expression -> additive-expression .)
    DELIM           reduce using rule 61 (shift-expression -> additive-expression .)
    CLOSE_BRACKET   reduce using rule 61 (shift-expression -> additive-expression .)
    COMMA           reduce using rule 61 (shift-expression -> additive-expression .)
    CLOSE_PAREN     reduce using rule 61 (shift-expression -> additive-expression .)
    COLON           reduce using rule 61 (shift-expression -> additive-expression .)
    BLOCK_END       reduce using rule 61 (shift-expression -> additive-expression .)
    PLUS            shift and go to state 190
    MINUS           shift and go to state 191


state 95

    (73) unary-expression -> MINUS . unary-expression
    (71) unary-expression -> . primary-expression
    (72) unary-expression -> . PLUS unary-expression
    (73) unary-expression -> . MINUS unary-expression
    (74) unary-expression -> . BITNOT unary-expression
    (75) unary-expression -> . BITCOMP unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . element-access
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (220) literal -> . ICONST
    (221) literal -> . DCONST
    (222) literal -> . TRUE
    (223) literal -> . FALSE
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (94) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 102
    MINUS           shift and go to state 95
    BITNOT          shift and go to state 117
    BITCOMP         shift and go to state 97
    NEW             shift and go to state 93
    IDENTIFIER      shift and go to state 195
    ICONST          shift and go to state 108
    DCONST          shift and go to state 118
    TRUE            shift and go to state 112
    FALSE           shift and go to state 110
    OPEN_PAREN      shift and go to state 99

    primary-no-array-creation-expression shift and go to state 107
    member-access                  shift and go to state 192
    unary-expression               shift and go to state 193
    element-access                 shift and go to state 194
    literal                        shift and go to state 106
    array-creation-expression      shift and go to state 92
    primary-expression             shift and go to state 119
    invocation-expression          shift and go to state 120
    parenthesized-expression       shift and go to state 122

state 96

    (45) conditional-and-expression -> inclusive-or-expression .
    (48) inclusive-or-expression -> inclusive-or-expression . BITOR exclusive-or-expression

    LOGAND          reduce using rule 45 (conditional-and-expression -> inclusive-or-expression .)
    CONDOP          reduce using rule 45 (conditional-and-expression -> inclusive-or-expression .)
    LOGOR           reduce using rule 45 (conditional-and-expression -> inclusive-or-expression .)
    CLOSE_PAREN     reduce using rule 45 (conditional-and-expression -> inclusive-or-expression .)
    DELIM           reduce using rule 45 (conditional-and-expression -> inclusive-or-expression .)
    CLOSE_BRACKET   reduce using rule 45 (conditional-and-expression -> inclusive-or-expression .)
    COMMA           reduce using rule 45 (conditional-and-expression -> inclusive-or-expression .)
    COLON           reduce using rule 45 (conditional-and-expression -> inclusive-or-expression .)
    BLOCK_END       reduce using rule 45 (conditional-and-expression -> inclusive-or-expression .)
    BITOR           shift and go to state 196


state 97

    (75) unary-expression -> BITCOMP . unary-expression
    (71) unary-expression -> . primary-expression
    (72) unary-expression -> . PLUS unary-expression
    (73) unary-expression -> . MINUS unary-expression
    (74) unary-expression -> . BITNOT unary-expression
    (75) unary-expression -> . BITCOMP unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . element-access
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (220) literal -> . ICONST
    (221) literal -> . DCONST
    (222) literal -> . TRUE
    (223) literal -> . FALSE
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (94) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 102
    MINUS           shift and go to state 95
    BITNOT          shift and go to state 117
    BITCOMP         shift and go to state 97
    NEW             shift and go to state 93
    IDENTIFIER      shift and go to state 195
    ICONST          shift and go to state 108
    DCONST          shift and go to state 118
    TRUE            shift and go to state 112
    FALSE           shift and go to state 110
    OPEN_PAREN      shift and go to state 99

    primary-no-array-creation-expression shift and go to state 107
    member-access                  shift and go to state 192
    unary-expression               shift and go to state 197
    element-access                 shift and go to state 194
    literal                        shift and go to state 106
    array-creation-expression      shift and go to state 92
    primary-expression             shift and go to state 119
    invocation-expression          shift and go to state 120
    parenthesized-expression       shift and go to state 122

state 98

    (105) assignment -> element-access . assignment-operator expression
    (90) primary-no-array-creation-expression -> element-access .
    (106) assignment-operator -> . ASSIGN
    (107) assignment-operator -> . PLUSEQUAL
    (108) assignment-operator -> . MINUSEQUAL
    (109) assignment-operator -> . TIMESEQUAL
    (110) assignment-operator -> . DIVEQUAL
    (111) assignment-operator -> . MODEQUAL
    (112) assignment-operator -> . BITANDEQUAL
    (113) assignment-operator -> . BITOREQUAL
    (114) assignment-operator -> . BITXOREQUAL
    (115) assignment-operator -> . LSHIFTEQUAL
    (116) assignment-operator -> . RSHIFTEQUAL

    TIMES           reduce using rule 90 (primary-no-array-creation-expression -> element-access .)
    DIV             reduce using rule 90 (primary-no-array-creation-expression -> element-access .)
    MOD             reduce using rule 90 (primary-no-array-creation-expression -> element-access .)
    PLUS            reduce using rule 90 (primary-no-array-creation-expression -> element-access .)
    MINUS           reduce using rule 90 (primary-no-array-creation-expression -> element-access .)
    LSHIFT          reduce using rule 90 (primary-no-array-creation-expression -> element-access .)
    RSHIFT          reduce using rule 90 (primary-no-array-creation-expression -> element-access .)
    LT              reduce using rule 90 (primary-no-array-creation-expression -> element-access .)
    GT              reduce using rule 90 (primary-no-array-creation-expression -> element-access .)
    LE              reduce using rule 90 (primary-no-array-creation-expression -> element-access .)
    GE              reduce using rule 90 (primary-no-array-creation-expression -> element-access .)
    EQ              reduce using rule 90 (primary-no-array-creation-expression -> element-access .)
    NE              reduce using rule 90 (primary-no-array-creation-expression -> element-access .)
    BITAND          reduce using rule 90 (primary-no-array-creation-expression -> element-access .)
    BITXOR          reduce using rule 90 (primary-no-array-creation-expression -> element-access .)
    BITOR           reduce using rule 90 (primary-no-array-creation-expression -> element-access .)
    LOGAND          reduce using rule 90 (primary-no-array-creation-expression -> element-access .)
    CONDOP          reduce using rule 90 (primary-no-array-creation-expression -> element-access .)
    LOGOR           reduce using rule 90 (primary-no-array-creation-expression -> element-access .)
    COMMA           reduce using rule 90 (primary-no-array-creation-expression -> element-access .)
    DELIM           reduce using rule 90 (primary-no-array-creation-expression -> element-access .)
    COLON           reduce using rule 90 (primary-no-array-creation-expression -> element-access .)
    CLOSE_PAREN     reduce using rule 90 (primary-no-array-creation-expression -> element-access .)
    CLOSE_BRACKET   reduce using rule 90 (primary-no-array-creation-expression -> element-access .)
    BLOCK_END       reduce using rule 90 (primary-no-array-creation-expression -> element-access .)
    ASSIGN          shift and go to state 78
    PLUSEQUAL       shift and go to state 73
    MINUSEQUAL      shift and go to state 69
    TIMESEQUAL      shift and go to state 68
    DIVEQUAL        shift and go to state 65
    MODEQUAL        shift and go to state 79
    BITANDEQUAL     shift and go to state 76
    BITOREQUAL      shift and go to state 72
    BITXOREQUAL     shift and go to state 71
    LSHIFTEQUAL     shift and go to state 77
    RSHIFTEQUAL     shift and go to state 66

    assignment-operator            shift and go to state 128

state 99

    (94) parenthesized-expression -> OPEN_PAREN . expression CLOSE_PAREN
    (39) expression -> . conditional-expression
    (40) expression -> . assignment
    (41) conditional-expression -> . conditional-or-expression
    (42) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (103) assignment -> . IDENTIFIER assignment-operator expression
    (104) assignment -> . member-access assignment-operator expression
    (105) assignment -> . element-access assignment-operator expression
    (43) conditional-or-expression -> . conditional-and-expression
    (44) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (45) conditional-and-expression -> . inclusive-or-expression
    (46) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (47) inclusive-or-expression -> . exclusive-or-expression
    (48) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (49) exclusive-or-expression -> . and-expression
    (50) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (51) and-expression -> . equality-expression
    (52) and-expression -> . and-expression BITAND equality-expression
    (53) equality-expression -> . relational-expression
    (54) equality-expression -> . equality-expression EQ relational-expression
    (55) equality-expression -> . equality-expression NE relational-expression
    (56) relational-expression -> . shift-expression
    (57) relational-expression -> . relational-expression LT shift-expression
    (58) relational-expression -> . relational-expression GT shift-expression
    (59) relational-expression -> . relational-expression LE shift-expression
    (60) relational-expression -> . relational-expression GE shift-expression
    (61) shift-expression -> . additive-expression
    (62) shift-expression -> . shift-expression LSHIFT additive-expression
    (63) shift-expression -> . shift-expression RSHIFT additive-expression
    (64) additive-expression -> . multiplicative-expression
    (65) additive-expression -> . additive-expression PLUS multiplicative-expression
    (66) additive-expression -> . additive-expression MINUS multiplicative-expression
    (67) multiplicative-expression -> . unary-expression
    (68) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (69) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (70) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (71) unary-expression -> . primary-expression
    (72) unary-expression -> . PLUS unary-expression
    (73) unary-expression -> . MINUS unary-expression
    (74) unary-expression -> . BITNOT unary-expression
    (75) unary-expression -> . BITCOMP unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . element-access
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (220) literal -> . ICONST
    (221) literal -> . DCONST
    (222) literal -> . TRUE
    (223) literal -> . FALSE
    (94) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 103
    PLUS            shift and go to state 102
    MINUS           shift and go to state 95
    BITNOT          shift and go to state 117
    BITCOMP         shift and go to state 97
    NEW             shift and go to state 93
    ICONST          shift and go to state 108
    DCONST          shift and go to state 118
    TRUE            shift and go to state 112
    FALSE           shift and go to state 110
    OPEN_PAREN      shift and go to state 99

    exclusive-or-expression        shift and go to state 89
    member-access                  shift and go to state 90
    relational-expression          shift and go to state 91
    additive-expression            shift and go to state 94
    primary-no-array-creation-expression shift and go to state 107
    inclusive-or-expression        shift and go to state 96
    unary-expression               shift and go to state 88
    element-access                 shift and go to state 98
    literal                        shift and go to state 106
    conditional-expression         shift and go to state 100
    conditional-and-expression     shift and go to state 101
    array-creation-expression      shift and go to state 92
    assignment                     shift and go to state 105
    equality-expression            shift and go to state 111
    shift-expression               shift and go to state 113
    and-expression                 shift and go to state 114
    multiplicative-expression      shift and go to state 115
    conditional-or-expression      shift and go to state 121
    primary-expression             shift and go to state 119
    invocation-expression          shift and go to state 120
    expression                     shift and go to state 198
    parenthesized-expression       shift and go to state 122

state 100

    (39) expression -> conditional-expression .

    CLOSE_BRACKET   reduce using rule 39 (expression -> conditional-expression .)
    CLOSE_PAREN     reduce using rule 39 (expression -> conditional-expression .)
    DELIM           reduce using rule 39 (expression -> conditional-expression .)
    COMMA           reduce using rule 39 (expression -> conditional-expression .)
    COLON           reduce using rule 39 (expression -> conditional-expression .)
    BLOCK_END       reduce using rule 39 (expression -> conditional-expression .)


state 101

    (43) conditional-or-expression -> conditional-and-expression .
    (46) conditional-and-expression -> conditional-and-expression . LOGAND inclusive-or-expression

    CONDOP          reduce using rule 43 (conditional-or-expression -> conditional-and-expression .)
    LOGOR           reduce using rule 43 (conditional-or-expression -> conditional-and-expression .)
    COMMA           reduce using rule 43 (conditional-or-expression -> conditional-and-expression .)
    DELIM           reduce using rule 43 (conditional-or-expression -> conditional-and-expression .)
    CLOSE_PAREN     reduce using rule 43 (conditional-or-expression -> conditional-and-expression .)
    COLON           reduce using rule 43 (conditional-or-expression -> conditional-and-expression .)
    CLOSE_BRACKET   reduce using rule 43 (conditional-or-expression -> conditional-and-expression .)
    BLOCK_END       reduce using rule 43 (conditional-or-expression -> conditional-and-expression .)
    LOGAND          shift and go to state 199


state 102

    (72) unary-expression -> PLUS . unary-expression
    (71) unary-expression -> . primary-expression
    (72) unary-expression -> . PLUS unary-expression
    (73) unary-expression -> . MINUS unary-expression
    (74) unary-expression -> . BITNOT unary-expression
    (75) unary-expression -> . BITCOMP unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . element-access
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (220) literal -> . ICONST
    (221) literal -> . DCONST
    (222) literal -> . TRUE
    (223) literal -> . FALSE
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (94) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 102
    MINUS           shift and go to state 95
    BITNOT          shift and go to state 117
    BITCOMP         shift and go to state 97
    NEW             shift and go to state 93
    IDENTIFIER      shift and go to state 195
    ICONST          shift and go to state 108
    DCONST          shift and go to state 118
    TRUE            shift and go to state 112
    FALSE           shift and go to state 110
    OPEN_PAREN      shift and go to state 99

    primary-no-array-creation-expression shift and go to state 107
    member-access                  shift and go to state 192
    unary-expression               shift and go to state 200
    element-access                 shift and go to state 194
    literal                        shift and go to state 106
    array-creation-expression      shift and go to state 92
    primary-expression             shift and go to state 119
    invocation-expression          shift and go to state 120
    parenthesized-expression       shift and go to state 122

state 103

    (103) assignment -> IDENTIFIER . assignment-operator expression
    (95) member-access -> IDENTIFIER . DOT IDENTIFIER
    (101) element-access -> IDENTIFIER . OPEN_BRACKET expression CLOSE_BRACKET
    (89) primary-no-array-creation-expression -> IDENTIFIER .
    (97) invocation-expression -> IDENTIFIER . OPEN_PAREN argument-list-opt CLOSE_PAREN
    (106) assignment-operator -> . ASSIGN
    (107) assignment-operator -> . PLUSEQUAL
    (108) assignment-operator -> . MINUSEQUAL
    (109) assignment-operator -> . TIMESEQUAL
    (110) assignment-operator -> . DIVEQUAL
    (111) assignment-operator -> . MODEQUAL
    (112) assignment-operator -> . BITANDEQUAL
    (113) assignment-operator -> . BITOREQUAL
    (114) assignment-operator -> . BITXOREQUAL
    (115) assignment-operator -> . LSHIFTEQUAL
    (116) assignment-operator -> . RSHIFTEQUAL

    DOT             shift and go to state 136
    OPEN_BRACKET    shift and go to state 137
    TIMES           reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    DIV             reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    MOD             reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    PLUS            reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    MINUS           reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    LSHIFT          reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    RSHIFT          reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    LT              reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    GT              reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    LE              reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    GE              reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    EQ              reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    NE              reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    BITAND          reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    BITXOR          reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    BITOR           reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    LOGAND          reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    CONDOP          reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    LOGOR           reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    COMMA           reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    DELIM           reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    COLON           reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    BLOCK_END       reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    OPEN_PAREN      shift and go to state 138
    ASSIGN          shift and go to state 78
    PLUSEQUAL       shift and go to state 73
    MINUSEQUAL      shift and go to state 69
    TIMESEQUAL      shift and go to state 68
    DIVEQUAL        shift and go to state 65
    MODEQUAL        shift and go to state 79
    BITANDEQUAL     shift and go to state 76
    BITOREQUAL      shift and go to state 72
    BITXOREQUAL     shift and go to state 71
    LSHIFTEQUAL     shift and go to state 77
    RSHIFTEQUAL     shift and go to state 66

    assignment-operator            shift and go to state 140

state 104

    (212) expression-opt -> empty .

    DELIM           reduce using rule 212 (expression-opt -> empty .)


state 105

    (40) expression -> assignment .

    CLOSE_BRACKET   reduce using rule 40 (expression -> assignment .)
    CLOSE_PAREN     reduce using rule 40 (expression -> assignment .)
    DELIM           reduce using rule 40 (expression -> assignment .)
    COMMA           reduce using rule 40 (expression -> assignment .)
    COLON           reduce using rule 40 (expression -> assignment .)
    BLOCK_END       reduce using rule 40 (expression -> assignment .)


state 106

    (88) primary-no-array-creation-expression -> literal .

    TIMES           reduce using rule 88 (primary-no-array-creation-expression -> literal .)
    DIV             reduce using rule 88 (primary-no-array-creation-expression -> literal .)
    MOD             reduce using rule 88 (primary-no-array-creation-expression -> literal .)
    PLUS            reduce using rule 88 (primary-no-array-creation-expression -> literal .)
    MINUS           reduce using rule 88 (primary-no-array-creation-expression -> literal .)
    LSHIFT          reduce using rule 88 (primary-no-array-creation-expression -> literal .)
    RSHIFT          reduce using rule 88 (primary-no-array-creation-expression -> literal .)
    LT              reduce using rule 88 (primary-no-array-creation-expression -> literal .)
    GT              reduce using rule 88 (primary-no-array-creation-expression -> literal .)
    LE              reduce using rule 88 (primary-no-array-creation-expression -> literal .)
    GE              reduce using rule 88 (primary-no-array-creation-expression -> literal .)
    EQ              reduce using rule 88 (primary-no-array-creation-expression -> literal .)
    NE              reduce using rule 88 (primary-no-array-creation-expression -> literal .)
    BITAND          reduce using rule 88 (primary-no-array-creation-expression -> literal .)
    BITXOR          reduce using rule 88 (primary-no-array-creation-expression -> literal .)
    BITOR           reduce using rule 88 (primary-no-array-creation-expression -> literal .)
    LOGAND          reduce using rule 88 (primary-no-array-creation-expression -> literal .)
    CONDOP          reduce using rule 88 (primary-no-array-creation-expression -> literal .)
    LOGOR           reduce using rule 88 (primary-no-array-creation-expression -> literal .)
    DELIM           reduce using rule 88 (primary-no-array-creation-expression -> literal .)
    CLOSE_BRACKET   reduce using rule 88 (primary-no-array-creation-expression -> literal .)
    COMMA           reduce using rule 88 (primary-no-array-creation-expression -> literal .)
    CLOSE_PAREN     reduce using rule 88 (primary-no-array-creation-expression -> literal .)
    COLON           reduce using rule 88 (primary-no-array-creation-expression -> literal .)
    BLOCK_END       reduce using rule 88 (primary-no-array-creation-expression -> literal .)


state 107

    (77) primary-expression -> primary-no-array-creation-expression .

    TIMES           reduce using rule 77 (primary-expression -> primary-no-array-creation-expression .)
    DIV             reduce using rule 77 (primary-expression -> primary-no-array-creation-expression .)
    MOD             reduce using rule 77 (primary-expression -> primary-no-array-creation-expression .)
    PLUS            reduce using rule 77 (primary-expression -> primary-no-array-creation-expression .)
    MINUS           reduce using rule 77 (primary-expression -> primary-no-array-creation-expression .)
    LSHIFT          reduce using rule 77 (primary-expression -> primary-no-array-creation-expression .)
    RSHIFT          reduce using rule 77 (primary-expression -> primary-no-array-creation-expression .)
    LT              reduce using rule 77 (primary-expression -> primary-no-array-creation-expression .)
    GT              reduce using rule 77 (primary-expression -> primary-no-array-creation-expression .)
    LE              reduce using rule 77 (primary-expression -> primary-no-array-creation-expression .)
    GE              reduce using rule 77 (primary-expression -> primary-no-array-creation-expression .)
    EQ              reduce using rule 77 (primary-expression -> primary-no-array-creation-expression .)
    NE              reduce using rule 77 (primary-expression -> primary-no-array-creation-expression .)
    BITAND          reduce using rule 77 (primary-expression -> primary-no-array-creation-expression .)
    BITXOR          reduce using rule 77 (primary-expression -> primary-no-array-creation-expression .)
    BITOR           reduce using rule 77 (primary-expression -> primary-no-array-creation-expression .)
    LOGAND          reduce using rule 77 (primary-expression -> primary-no-array-creation-expression .)
    CONDOP          reduce using rule 77 (primary-expression -> primary-no-array-creation-expression .)
    LOGOR           reduce using rule 77 (primary-expression -> primary-no-array-creation-expression .)
    DELIM           reduce using rule 77 (primary-expression -> primary-no-array-creation-expression .)
    CLOSE_BRACKET   reduce using rule 77 (primary-expression -> primary-no-array-creation-expression .)
    COMMA           reduce using rule 77 (primary-expression -> primary-no-array-creation-expression .)
    CLOSE_PAREN     reduce using rule 77 (primary-expression -> primary-no-array-creation-expression .)
    COLON           reduce using rule 77 (primary-expression -> primary-no-array-creation-expression .)
    BLOCK_END       reduce using rule 77 (primary-expression -> primary-no-array-creation-expression .)


state 108

    (220) literal -> ICONST .

    TIMES           reduce using rule 220 (literal -> ICONST .)
    DIV             reduce using rule 220 (literal -> ICONST .)
    MOD             reduce using rule 220 (literal -> ICONST .)
    PLUS            reduce using rule 220 (literal -> ICONST .)
    MINUS           reduce using rule 220 (literal -> ICONST .)
    LSHIFT          reduce using rule 220 (literal -> ICONST .)
    RSHIFT          reduce using rule 220 (literal -> ICONST .)
    LT              reduce using rule 220 (literal -> ICONST .)
    GT              reduce using rule 220 (literal -> ICONST .)
    LE              reduce using rule 220 (literal -> ICONST .)
    GE              reduce using rule 220 (literal -> ICONST .)
    EQ              reduce using rule 220 (literal -> ICONST .)
    NE              reduce using rule 220 (literal -> ICONST .)
    BITAND          reduce using rule 220 (literal -> ICONST .)
    BITXOR          reduce using rule 220 (literal -> ICONST .)
    BITOR           reduce using rule 220 (literal -> ICONST .)
    LOGAND          reduce using rule 220 (literal -> ICONST .)
    CONDOP          reduce using rule 220 (literal -> ICONST .)
    LOGOR           reduce using rule 220 (literal -> ICONST .)
    COLON           reduce using rule 220 (literal -> ICONST .)
    DELIM           reduce using rule 220 (literal -> ICONST .)
    CLOSE_BRACKET   reduce using rule 220 (literal -> ICONST .)
    COMMA           reduce using rule 220 (literal -> ICONST .)
    CLOSE_PAREN     reduce using rule 220 (literal -> ICONST .)
    BLOCK_END       reduce using rule 220 (literal -> ICONST .)


state 109

    (210) return-statement -> RETURN expression-opt . DELIM

    DELIM           shift and go to state 201


state 110

    (223) literal -> FALSE .

    TIMES           reduce using rule 223 (literal -> FALSE .)
    DIV             reduce using rule 223 (literal -> FALSE .)
    MOD             reduce using rule 223 (literal -> FALSE .)
    PLUS            reduce using rule 223 (literal -> FALSE .)
    MINUS           reduce using rule 223 (literal -> FALSE .)
    LSHIFT          reduce using rule 223 (literal -> FALSE .)
    RSHIFT          reduce using rule 223 (literal -> FALSE .)
    LT              reduce using rule 223 (literal -> FALSE .)
    GT              reduce using rule 223 (literal -> FALSE .)
    LE              reduce using rule 223 (literal -> FALSE .)
    GE              reduce using rule 223 (literal -> FALSE .)
    EQ              reduce using rule 223 (literal -> FALSE .)
    NE              reduce using rule 223 (literal -> FALSE .)
    BITAND          reduce using rule 223 (literal -> FALSE .)
    BITXOR          reduce using rule 223 (literal -> FALSE .)
    BITOR           reduce using rule 223 (literal -> FALSE .)
    LOGAND          reduce using rule 223 (literal -> FALSE .)
    CONDOP          reduce using rule 223 (literal -> FALSE .)
    LOGOR           reduce using rule 223 (literal -> FALSE .)
    COLON           reduce using rule 223 (literal -> FALSE .)
    DELIM           reduce using rule 223 (literal -> FALSE .)
    CLOSE_BRACKET   reduce using rule 223 (literal -> FALSE .)
    COMMA           reduce using rule 223 (literal -> FALSE .)
    CLOSE_PAREN     reduce using rule 223 (literal -> FALSE .)
    BLOCK_END       reduce using rule 223 (literal -> FALSE .)


state 111

    (51) and-expression -> equality-expression .
    (54) equality-expression -> equality-expression . EQ relational-expression
    (55) equality-expression -> equality-expression . NE relational-expression

    BITAND          reduce using rule 51 (and-expression -> equality-expression .)
    BITXOR          reduce using rule 51 (and-expression -> equality-expression .)
    BITOR           reduce using rule 51 (and-expression -> equality-expression .)
    LOGAND          reduce using rule 51 (and-expression -> equality-expression .)
    CONDOP          reduce using rule 51 (and-expression -> equality-expression .)
    LOGOR           reduce using rule 51 (and-expression -> equality-expression .)
    COMMA           reduce using rule 51 (and-expression -> equality-expression .)
    CLOSE_PAREN     reduce using rule 51 (and-expression -> equality-expression .)
    BLOCK_END       reduce using rule 51 (and-expression -> equality-expression .)
    DELIM           reduce using rule 51 (and-expression -> equality-expression .)
    CLOSE_BRACKET   reduce using rule 51 (and-expression -> equality-expression .)
    COLON           reduce using rule 51 (and-expression -> equality-expression .)
    EQ              shift and go to state 202
    NE              shift and go to state 203


state 112

    (222) literal -> TRUE .

    TIMES           reduce using rule 222 (literal -> TRUE .)
    DIV             reduce using rule 222 (literal -> TRUE .)
    MOD             reduce using rule 222 (literal -> TRUE .)
    PLUS            reduce using rule 222 (literal -> TRUE .)
    MINUS           reduce using rule 222 (literal -> TRUE .)
    LSHIFT          reduce using rule 222 (literal -> TRUE .)
    RSHIFT          reduce using rule 222 (literal -> TRUE .)
    LT              reduce using rule 222 (literal -> TRUE .)
    GT              reduce using rule 222 (literal -> TRUE .)
    LE              reduce using rule 222 (literal -> TRUE .)
    GE              reduce using rule 222 (literal -> TRUE .)
    EQ              reduce using rule 222 (literal -> TRUE .)
    NE              reduce using rule 222 (literal -> TRUE .)
    BITAND          reduce using rule 222 (literal -> TRUE .)
    BITXOR          reduce using rule 222 (literal -> TRUE .)
    BITOR           reduce using rule 222 (literal -> TRUE .)
    LOGAND          reduce using rule 222 (literal -> TRUE .)
    CONDOP          reduce using rule 222 (literal -> TRUE .)
    LOGOR           reduce using rule 222 (literal -> TRUE .)
    COLON           reduce using rule 222 (literal -> TRUE .)
    DELIM           reduce using rule 222 (literal -> TRUE .)
    CLOSE_BRACKET   reduce using rule 222 (literal -> TRUE .)
    COMMA           reduce using rule 222 (literal -> TRUE .)
    CLOSE_PAREN     reduce using rule 222 (literal -> TRUE .)
    BLOCK_END       reduce using rule 222 (literal -> TRUE .)


state 113

    (56) relational-expression -> shift-expression .
    (62) shift-expression -> shift-expression . LSHIFT additive-expression
    (63) shift-expression -> shift-expression . RSHIFT additive-expression

    LT              reduce using rule 56 (relational-expression -> shift-expression .)
    GT              reduce using rule 56 (relational-expression -> shift-expression .)
    LE              reduce using rule 56 (relational-expression -> shift-expression .)
    GE              reduce using rule 56 (relational-expression -> shift-expression .)
    EQ              reduce using rule 56 (relational-expression -> shift-expression .)
    NE              reduce using rule 56 (relational-expression -> shift-expression .)
    BITAND          reduce using rule 56 (relational-expression -> shift-expression .)
    BITXOR          reduce using rule 56 (relational-expression -> shift-expression .)
    BITOR           reduce using rule 56 (relational-expression -> shift-expression .)
    LOGAND          reduce using rule 56 (relational-expression -> shift-expression .)
    CONDOP          reduce using rule 56 (relational-expression -> shift-expression .)
    LOGOR           reduce using rule 56 (relational-expression -> shift-expression .)
    DELIM           reduce using rule 56 (relational-expression -> shift-expression .)
    CLOSE_BRACKET   reduce using rule 56 (relational-expression -> shift-expression .)
    COMMA           reduce using rule 56 (relational-expression -> shift-expression .)
    CLOSE_PAREN     reduce using rule 56 (relational-expression -> shift-expression .)
    COLON           reduce using rule 56 (relational-expression -> shift-expression .)
    BLOCK_END       reduce using rule 56 (relational-expression -> shift-expression .)
    LSHIFT          shift and go to state 205
    RSHIFT          shift and go to state 204


state 114

    (49) exclusive-or-expression -> and-expression .
    (52) and-expression -> and-expression . BITAND equality-expression

    BITXOR          reduce using rule 49 (exclusive-or-expression -> and-expression .)
    BITOR           reduce using rule 49 (exclusive-or-expression -> and-expression .)
    LOGAND          reduce using rule 49 (exclusive-or-expression -> and-expression .)
    CONDOP          reduce using rule 49 (exclusive-or-expression -> and-expression .)
    LOGOR           reduce using rule 49 (exclusive-or-expression -> and-expression .)
    CLOSE_PAREN     reduce using rule 49 (exclusive-or-expression -> and-expression .)
    COMMA           reduce using rule 49 (exclusive-or-expression -> and-expression .)
    DELIM           reduce using rule 49 (exclusive-or-expression -> and-expression .)
    CLOSE_BRACKET   reduce using rule 49 (exclusive-or-expression -> and-expression .)
    COLON           reduce using rule 49 (exclusive-or-expression -> and-expression .)
    BLOCK_END       reduce using rule 49 (exclusive-or-expression -> and-expression .)
    BITAND          shift and go to state 206


state 115

    (64) additive-expression -> multiplicative-expression .
    (68) multiplicative-expression -> multiplicative-expression . TIMES unary-expression
    (69) multiplicative-expression -> multiplicative-expression . DIV unary-expression
    (70) multiplicative-expression -> multiplicative-expression . MOD unary-expression

    PLUS            reduce using rule 64 (additive-expression -> multiplicative-expression .)
    MINUS           reduce using rule 64 (additive-expression -> multiplicative-expression .)
    LSHIFT          reduce using rule 64 (additive-expression -> multiplicative-expression .)
    RSHIFT          reduce using rule 64 (additive-expression -> multiplicative-expression .)
    LT              reduce using rule 64 (additive-expression -> multiplicative-expression .)
    GT              reduce using rule 64 (additive-expression -> multiplicative-expression .)
    LE              reduce using rule 64 (additive-expression -> multiplicative-expression .)
    GE              reduce using rule 64 (additive-expression -> multiplicative-expression .)
    EQ              reduce using rule 64 (additive-expression -> multiplicative-expression .)
    NE              reduce using rule 64 (additive-expression -> multiplicative-expression .)
    BITAND          reduce using rule 64 (additive-expression -> multiplicative-expression .)
    BITXOR          reduce using rule 64 (additive-expression -> multiplicative-expression .)
    BITOR           reduce using rule 64 (additive-expression -> multiplicative-expression .)
    LOGAND          reduce using rule 64 (additive-expression -> multiplicative-expression .)
    CONDOP          reduce using rule 64 (additive-expression -> multiplicative-expression .)
    LOGOR           reduce using rule 64 (additive-expression -> multiplicative-expression .)
    DELIM           reduce using rule 64 (additive-expression -> multiplicative-expression .)
    CLOSE_BRACKET   reduce using rule 64 (additive-expression -> multiplicative-expression .)
    COMMA           reduce using rule 64 (additive-expression -> multiplicative-expression .)
    CLOSE_PAREN     reduce using rule 64 (additive-expression -> multiplicative-expression .)
    COLON           reduce using rule 64 (additive-expression -> multiplicative-expression .)
    BLOCK_END       reduce using rule 64 (additive-expression -> multiplicative-expression .)
    TIMES           shift and go to state 209
    DIV             shift and go to state 207
    MOD             shift and go to state 208


state 116

    (211) expression-opt -> expression .

    DELIM           reduce using rule 211 (expression-opt -> expression .)


state 117

    (74) unary-expression -> BITNOT . unary-expression
    (71) unary-expression -> . primary-expression
    (72) unary-expression -> . PLUS unary-expression
    (73) unary-expression -> . MINUS unary-expression
    (74) unary-expression -> . BITNOT unary-expression
    (75) unary-expression -> . BITCOMP unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . element-access
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (220) literal -> . ICONST
    (221) literal -> . DCONST
    (222) literal -> . TRUE
    (223) literal -> . FALSE
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (94) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 102
    MINUS           shift and go to state 95
    BITNOT          shift and go to state 117
    BITCOMP         shift and go to state 97
    NEW             shift and go to state 93
    IDENTIFIER      shift and go to state 195
    ICONST          shift and go to state 108
    DCONST          shift and go to state 118
    TRUE            shift and go to state 112
    FALSE           shift and go to state 110
    OPEN_PAREN      shift and go to state 99

    primary-no-array-creation-expression shift and go to state 107
    member-access                  shift and go to state 192
    unary-expression               shift and go to state 210
    element-access                 shift and go to state 194
    literal                        shift and go to state 106
    array-creation-expression      shift and go to state 92
    primary-expression             shift and go to state 119
    invocation-expression          shift and go to state 120
    parenthesized-expression       shift and go to state 122

state 118

    (221) literal -> DCONST .

    TIMES           reduce using rule 221 (literal -> DCONST .)
    DIV             reduce using rule 221 (literal -> DCONST .)
    MOD             reduce using rule 221 (literal -> DCONST .)
    PLUS            reduce using rule 221 (literal -> DCONST .)
    MINUS           reduce using rule 221 (literal -> DCONST .)
    LSHIFT          reduce using rule 221 (literal -> DCONST .)
    RSHIFT          reduce using rule 221 (literal -> DCONST .)
    LT              reduce using rule 221 (literal -> DCONST .)
    GT              reduce using rule 221 (literal -> DCONST .)
    LE              reduce using rule 221 (literal -> DCONST .)
    GE              reduce using rule 221 (literal -> DCONST .)
    EQ              reduce using rule 221 (literal -> DCONST .)
    NE              reduce using rule 221 (literal -> DCONST .)
    BITAND          reduce using rule 221 (literal -> DCONST .)
    BITXOR          reduce using rule 221 (literal -> DCONST .)
    BITOR           reduce using rule 221 (literal -> DCONST .)
    LOGAND          reduce using rule 221 (literal -> DCONST .)
    CONDOP          reduce using rule 221 (literal -> DCONST .)
    LOGOR           reduce using rule 221 (literal -> DCONST .)
    COLON           reduce using rule 221 (literal -> DCONST .)
    DELIM           reduce using rule 221 (literal -> DCONST .)
    CLOSE_BRACKET   reduce using rule 221 (literal -> DCONST .)
    COMMA           reduce using rule 221 (literal -> DCONST .)
    CLOSE_PAREN     reduce using rule 221 (literal -> DCONST .)
    BLOCK_END       reduce using rule 221 (literal -> DCONST .)


state 119

    (71) unary-expression -> primary-expression .

    TIMES           reduce using rule 71 (unary-expression -> primary-expression .)
    DIV             reduce using rule 71 (unary-expression -> primary-expression .)
    MOD             reduce using rule 71 (unary-expression -> primary-expression .)
    PLUS            reduce using rule 71 (unary-expression -> primary-expression .)
    MINUS           reduce using rule 71 (unary-expression -> primary-expression .)
    LSHIFT          reduce using rule 71 (unary-expression -> primary-expression .)
    RSHIFT          reduce using rule 71 (unary-expression -> primary-expression .)
    LT              reduce using rule 71 (unary-expression -> primary-expression .)
    GT              reduce using rule 71 (unary-expression -> primary-expression .)
    LE              reduce using rule 71 (unary-expression -> primary-expression .)
    GE              reduce using rule 71 (unary-expression -> primary-expression .)
    EQ              reduce using rule 71 (unary-expression -> primary-expression .)
    NE              reduce using rule 71 (unary-expression -> primary-expression .)
    BITAND          reduce using rule 71 (unary-expression -> primary-expression .)
    BITXOR          reduce using rule 71 (unary-expression -> primary-expression .)
    BITOR           reduce using rule 71 (unary-expression -> primary-expression .)
    LOGAND          reduce using rule 71 (unary-expression -> primary-expression .)
    CONDOP          reduce using rule 71 (unary-expression -> primary-expression .)
    LOGOR           reduce using rule 71 (unary-expression -> primary-expression .)
    DELIM           reduce using rule 71 (unary-expression -> primary-expression .)
    CLOSE_BRACKET   reduce using rule 71 (unary-expression -> primary-expression .)
    COMMA           reduce using rule 71 (unary-expression -> primary-expression .)
    CLOSE_PAREN     reduce using rule 71 (unary-expression -> primary-expression .)
    COLON           reduce using rule 71 (unary-expression -> primary-expression .)
    BLOCK_END       reduce using rule 71 (unary-expression -> primary-expression .)


state 120

    (93) primary-no-array-creation-expression -> invocation-expression .

    TIMES           reduce using rule 93 (primary-no-array-creation-expression -> invocation-expression .)
    DIV             reduce using rule 93 (primary-no-array-creation-expression -> invocation-expression .)
    MOD             reduce using rule 93 (primary-no-array-creation-expression -> invocation-expression .)
    PLUS            reduce using rule 93 (primary-no-array-creation-expression -> invocation-expression .)
    MINUS           reduce using rule 93 (primary-no-array-creation-expression -> invocation-expression .)
    LSHIFT          reduce using rule 93 (primary-no-array-creation-expression -> invocation-expression .)
    RSHIFT          reduce using rule 93 (primary-no-array-creation-expression -> invocation-expression .)
    LT              reduce using rule 93 (primary-no-array-creation-expression -> invocation-expression .)
    GT              reduce using rule 93 (primary-no-array-creation-expression -> invocation-expression .)
    LE              reduce using rule 93 (primary-no-array-creation-expression -> invocation-expression .)
    GE              reduce using rule 93 (primary-no-array-creation-expression -> invocation-expression .)
    EQ              reduce using rule 93 (primary-no-array-creation-expression -> invocation-expression .)
    NE              reduce using rule 93 (primary-no-array-creation-expression -> invocation-expression .)
    BITAND          reduce using rule 93 (primary-no-array-creation-expression -> invocation-expression .)
    BITXOR          reduce using rule 93 (primary-no-array-creation-expression -> invocation-expression .)
    BITOR           reduce using rule 93 (primary-no-array-creation-expression -> invocation-expression .)
    LOGAND          reduce using rule 93 (primary-no-array-creation-expression -> invocation-expression .)
    CONDOP          reduce using rule 93 (primary-no-array-creation-expression -> invocation-expression .)
    LOGOR           reduce using rule 93 (primary-no-array-creation-expression -> invocation-expression .)
    DELIM           reduce using rule 93 (primary-no-array-creation-expression -> invocation-expression .)
    CLOSE_BRACKET   reduce using rule 93 (primary-no-array-creation-expression -> invocation-expression .)
    COMMA           reduce using rule 93 (primary-no-array-creation-expression -> invocation-expression .)
    CLOSE_PAREN     reduce using rule 93 (primary-no-array-creation-expression -> invocation-expression .)
    COLON           reduce using rule 93 (primary-no-array-creation-expression -> invocation-expression .)
    BLOCK_END       reduce using rule 93 (primary-no-array-creation-expression -> invocation-expression .)


state 121

    (41) conditional-expression -> conditional-or-expression .
    (42) conditional-expression -> conditional-or-expression . CONDOP expression COLON expression
    (44) conditional-or-expression -> conditional-or-expression . LOGOR conditional-and-expression

    CLOSE_PAREN     reduce using rule 41 (conditional-expression -> conditional-or-expression .)
    COMMA           reduce using rule 41 (conditional-expression -> conditional-or-expression .)
    DELIM           reduce using rule 41 (conditional-expression -> conditional-or-expression .)
    BLOCK_END       reduce using rule 41 (conditional-expression -> conditional-or-expression .)
    CLOSE_BRACKET   reduce using rule 41 (conditional-expression -> conditional-or-expression .)
    COLON           reduce using rule 41 (conditional-expression -> conditional-or-expression .)
    CONDOP          shift and go to state 212
    LOGOR           shift and go to state 211


state 122

    (91) primary-no-array-creation-expression -> parenthesized-expression .

    TIMES           reduce using rule 91 (primary-no-array-creation-expression -> parenthesized-expression .)
    DIV             reduce using rule 91 (primary-no-array-creation-expression -> parenthesized-expression .)
    MOD             reduce using rule 91 (primary-no-array-creation-expression -> parenthesized-expression .)
    PLUS            reduce using rule 91 (primary-no-array-creation-expression -> parenthesized-expression .)
    MINUS           reduce using rule 91 (primary-no-array-creation-expression -> parenthesized-expression .)
    LSHIFT          reduce using rule 91 (primary-no-array-creation-expression -> parenthesized-expression .)
    RSHIFT          reduce using rule 91 (primary-no-array-creation-expression -> parenthesized-expression .)
    LT              reduce using rule 91 (primary-no-array-creation-expression -> parenthesized-expression .)
    GT              reduce using rule 91 (primary-no-array-creation-expression -> parenthesized-expression .)
    LE              reduce using rule 91 (primary-no-array-creation-expression -> parenthesized-expression .)
    GE              reduce using rule 91 (primary-no-array-creation-expression -> parenthesized-expression .)
    EQ              reduce using rule 91 (primary-no-array-creation-expression -> parenthesized-expression .)
    NE              reduce using rule 91 (primary-no-array-creation-expression -> parenthesized-expression .)
    BITAND          reduce using rule 91 (primary-no-array-creation-expression -> parenthesized-expression .)
    BITXOR          reduce using rule 91 (primary-no-array-creation-expression -> parenthesized-expression .)
    BITOR           reduce using rule 91 (primary-no-array-creation-expression -> parenthesized-expression .)
    LOGAND          reduce using rule 91 (primary-no-array-creation-expression -> parenthesized-expression .)
    CONDOP          reduce using rule 91 (primary-no-array-creation-expression -> parenthesized-expression .)
    LOGOR           reduce using rule 91 (primary-no-array-creation-expression -> parenthesized-expression .)
    DELIM           reduce using rule 91 (primary-no-array-creation-expression -> parenthesized-expression .)
    CLOSE_BRACKET   reduce using rule 91 (primary-no-array-creation-expression -> parenthesized-expression .)
    COMMA           reduce using rule 91 (primary-no-array-creation-expression -> parenthesized-expression .)
    CLOSE_PAREN     reduce using rule 91 (primary-no-array-creation-expression -> parenthesized-expression .)
    COLON           reduce using rule 91 (primary-no-array-creation-expression -> parenthesized-expression .)
    BLOCK_END       reduce using rule 91 (primary-no-array-creation-expression -> parenthesized-expression .)


state 123

    (135) method-body -> method-block .

    IDENTIFIER      reduce using rule 135 (method-body -> method-block .)
    BLOCK_BEGIN     reduce using rule 135 (method-body -> method-block .)
    DELIM           reduce using rule 135 (method-body -> method-block .)
    CONSOLE         reduce using rule 135 (method-body -> method-block .)
    CONST           reduce using rule 135 (method-body -> method-block .)
    IF              reduce using rule 135 (method-body -> method-block .)
    SWITCH          reduce using rule 135 (method-body -> method-block .)
    WHILE           reduce using rule 135 (method-body -> method-block .)
    FOR             reduce using rule 135 (method-body -> method-block .)
    DO              reduce using rule 135 (method-body -> method-block .)
    BREAK           reduce using rule 135 (method-body -> method-block .)
    CONTINUE        reduce using rule 135 (method-body -> method-block .)
    GOTO            reduce using rule 135 (method-body -> method-block .)
    RETURN          reduce using rule 135 (method-body -> method-block .)
    VOID            reduce using rule 135 (method-body -> method-block .)
    PUBLIC          reduce using rule 135 (method-body -> method-block .)
    PRIVATE         reduce using rule 135 (method-body -> method-block .)
    BOOL            reduce using rule 135 (method-body -> method-block .)
    INT             reduce using rule 135 (method-body -> method-block .)
    UINT            reduce using rule 135 (method-body -> method-block .)
    CHAR            reduce using rule 135 (method-body -> method-block .)
    DOUBLE          reduce using rule 135 (method-body -> method-block .)
    $end            reduce using rule 135 (method-body -> method-block .)
    BITCOMP         reduce using rule 135 (method-body -> method-block .)
    BLOCK_END       reduce using rule 135 (method-body -> method-block .)
    CASE            reduce using rule 135 (method-body -> method-block .)
    DEFAULT         reduce using rule 135 (method-body -> method-block .)


state 124

    (136) method-body -> DELIM .

    IDENTIFIER      reduce using rule 136 (method-body -> DELIM .)
    BLOCK_BEGIN     reduce using rule 136 (method-body -> DELIM .)
    DELIM           reduce using rule 136 (method-body -> DELIM .)
    CONSOLE         reduce using rule 136 (method-body -> DELIM .)
    CONST           reduce using rule 136 (method-body -> DELIM .)
    IF              reduce using rule 136 (method-body -> DELIM .)
    SWITCH          reduce using rule 136 (method-body -> DELIM .)
    WHILE           reduce using rule 136 (method-body -> DELIM .)
    FOR             reduce using rule 136 (method-body -> DELIM .)
    DO              reduce using rule 136 (method-body -> DELIM .)
    BREAK           reduce using rule 136 (method-body -> DELIM .)
    CONTINUE        reduce using rule 136 (method-body -> DELIM .)
    GOTO            reduce using rule 136 (method-body -> DELIM .)
    RETURN          reduce using rule 136 (method-body -> DELIM .)
    VOID            reduce using rule 136 (method-body -> DELIM .)
    PUBLIC          reduce using rule 136 (method-body -> DELIM .)
    PRIVATE         reduce using rule 136 (method-body -> DELIM .)
    BOOL            reduce using rule 136 (method-body -> DELIM .)
    INT             reduce using rule 136 (method-body -> DELIM .)
    UINT            reduce using rule 136 (method-body -> DELIM .)
    CHAR            reduce using rule 136 (method-body -> DELIM .)
    DOUBLE          reduce using rule 136 (method-body -> DELIM .)
    $end            reduce using rule 136 (method-body -> DELIM .)
    BITCOMP         reduce using rule 136 (method-body -> DELIM .)
    BLOCK_END       reduce using rule 136 (method-body -> DELIM .)
    CASE            reduce using rule 136 (method-body -> DELIM .)
    DEFAULT         reduce using rule 136 (method-body -> DELIM .)


state 125

    (137) method-block -> BLOCK_BEGIN . statement-list-opt BLOCK_END
    (140) statement-list-opt -> . statement-list
    (141) statement-list-opt -> . empty
    (142) statement-list -> . statement
    (143) statement-list -> . statement-list statement
    (224) empty -> .
    (144) statement -> . labeled-statement
    (145) statement -> . declaration-statement
    (146) statement -> . block
    (147) statement -> . empty-statement
    (148) statement -> . expression-statement
    (149) statement -> . selection-statement
    (150) statement -> . iteration-statement
    (151) statement -> . jump-statement
    (152) statement -> . write-statement
    (153) statement -> . read-statement
    (154) statement -> . method-declaration
    (159) labeled-statement -> . IDENTIFIER COLON statement
    (160) declaration-statement -> . local-variable-declaration DELIM
    (161) declaration-statement -> . local-constant-declaration DELIM
    (138) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END
    (164) empty-statement -> . DELIM
    (165) expression-statement -> . statement-expression DELIM
    (168) selection-statement -> . if-statement
    (169) selection-statement -> . switch-statement
    (187) iteration-statement -> . while-statement M_quad
    (188) iteration-statement -> . for-statement M_quad
    (189) iteration-statement -> . do-statement M_quad
    (203) jump-statement -> . break-statement
    (204) jump-statement -> . continue-statement
    (205) jump-statement -> . goto-statement
    (206) jump-statement -> . return-statement
    (155) write-statement -> . CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM
    (158) read-statement -> . CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM
    (124) method-declaration -> . method-header method-body
    (162) local-variable-declaration -> . type variable-declarators
    (163) local-constant-declaration -> . CONST type constant-declarators
    (166) statement-expression -> . invocation-expression
    (167) statement-expression -> . assignment
    (170) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block
    (171) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block
    (172) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad
    (176) switch-statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block
    (190) while-statement -> . WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block
    (193) for-statement -> . FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block
    (192) do-statement -> . DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM
    (207) break-statement -> . BREAK DELIM
    (208) continue-statement -> . CONTINUE DELIM
    (209) goto-statement -> . GOTO IDENTIFIER DELIM
    (210) return-statement -> . RETURN expression-opt DELIM
    (125) method-header -> . modifier type IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (126) method-header -> . modifier VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (127) method-header -> . type IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (128) method-header -> . VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (27) type -> . simple-type
    (28) type -> . class-type
    (29) type -> . array-type
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (103) assignment -> . IDENTIFIER assignment-operator expression
    (104) assignment -> . member-access assignment-operator expression
    (105) assignment -> . element-access assignment-operator expression
    (118) modifier -> . PUBLIC
    (119) modifier -> . PRIVATE
    (30) simple-type -> . BOOL
    (31) simple-type -> . INT
    (32) simple-type -> . UINT
    (33) simple-type -> . CHAR
    (34) simple-type -> . DOUBLE
    (14) class-type -> . IDENTIFIER
    (35) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    BLOCK_END       reduce using rule 224 (empty -> .)
    IDENTIFIER      shift and go to state 40
    BLOCK_BEGIN     shift and go to state 54
    DELIM           shift and go to state 4
    CONSOLE         shift and go to state 58
    CONST           shift and go to state 53
    IF              shift and go to state 63
    SWITCH          shift and go to state 26
    WHILE           shift and go to state 35
    FOR             shift and go to state 24
    DO              shift and go to state 52
    BREAK           shift and go to state 46
    CONTINUE        shift and go to state 31
    GOTO            shift and go to state 8
    RETURN          shift and go to state 16
    VOID            shift and go to state 7
    PUBLIC          shift and go to state 62
    PRIVATE         shift and go to state 55
    BOOL            shift and go to state 47
    INT             shift and go to state 28
    UINT            shift and go to state 61
    CHAR            shift and go to state 34
    DOUBLE          shift and go to state 12

    return-statement               shift and go to state 19
    method-header                  shift and go to state 17
    write-statement                shift and go to state 1
    member-access                  shift and go to state 2
    selection-statement            shift and go to state 33
    empty-statement                shift and go to state 36
    statement-list-opt             shift and go to state 215
    method-declaration             shift and go to state 38
    expression-statement           shift and go to state 3
    break-statement                shift and go to state 37
    element-access                 shift and go to state 21
    statement-expression           shift and go to state 5
    local-constant-declaration     shift and go to state 22
    statement                      shift and go to state 39
    assignment                     shift and go to state 59
    for-statement                  shift and go to state 6
    type                           shift and go to state 41
    read-statement                 shift and go to state 57
    do-statement                   shift and go to state 23
    array-type                     shift and go to state 43
    continue-statement             shift and go to state 25
    invocation-expression          shift and go to state 14
    labeled-statement              shift and go to state 9
    declaration-statement          shift and go to state 44
    switch-statement               shift and go to state 10
    iteration-statement            shift and go to state 45
    jump-statement                 shift and go to state 11
    local-variable-declaration     shift and go to state 27
    goto-statement                 shift and go to state 29
    if-statement                   shift and go to state 30
    empty                          shift and go to state 213
    statement-list                 shift and go to state 214
    class-type                     shift and go to state 64
    while-statement                shift and go to state 49
    simple-type                    shift and go to state 18
    modifier                       shift and go to state 51
    block                          shift and go to state 32

state 126

    (124) method-declaration -> method-header method-body .

    IDENTIFIER      reduce using rule 124 (method-declaration -> method-header method-body .)
    BLOCK_BEGIN     reduce using rule 124 (method-declaration -> method-header method-body .)
    DELIM           reduce using rule 124 (method-declaration -> method-header method-body .)
    CONSOLE         reduce using rule 124 (method-declaration -> method-header method-body .)
    CONST           reduce using rule 124 (method-declaration -> method-header method-body .)
    IF              reduce using rule 124 (method-declaration -> method-header method-body .)
    SWITCH          reduce using rule 124 (method-declaration -> method-header method-body .)
    WHILE           reduce using rule 124 (method-declaration -> method-header method-body .)
    FOR             reduce using rule 124 (method-declaration -> method-header method-body .)
    DO              reduce using rule 124 (method-declaration -> method-header method-body .)
    BREAK           reduce using rule 124 (method-declaration -> method-header method-body .)
    CONTINUE        reduce using rule 124 (method-declaration -> method-header method-body .)
    GOTO            reduce using rule 124 (method-declaration -> method-header method-body .)
    RETURN          reduce using rule 124 (method-declaration -> method-header method-body .)
    VOID            reduce using rule 124 (method-declaration -> method-header method-body .)
    PUBLIC          reduce using rule 124 (method-declaration -> method-header method-body .)
    PRIVATE         reduce using rule 124 (method-declaration -> method-header method-body .)
    BOOL            reduce using rule 124 (method-declaration -> method-header method-body .)
    INT             reduce using rule 124 (method-declaration -> method-header method-body .)
    UINT            reduce using rule 124 (method-declaration -> method-header method-body .)
    CHAR            reduce using rule 124 (method-declaration -> method-header method-body .)
    DOUBLE          reduce using rule 124 (method-declaration -> method-header method-body .)
    CASE            reduce using rule 124 (method-declaration -> method-header method-body .)
    DEFAULT         reduce using rule 124 (method-declaration -> method-header method-body .)
    BLOCK_END       reduce using rule 124 (method-declaration -> method-header method-body .)
    $end            reduce using rule 124 (method-declaration -> method-header method-body .)
    BITCOMP         reduce using rule 124 (method-declaration -> method-header method-body .)


state 127

    (35) array-type -> simple-type OPEN_BRACKET . ICONST CLOSE_BRACKET

    ICONST          shift and go to state 216


state 128

    (105) assignment -> element-access assignment-operator . expression
    (39) expression -> . conditional-expression
    (40) expression -> . assignment
    (41) conditional-expression -> . conditional-or-expression
    (42) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (103) assignment -> . IDENTIFIER assignment-operator expression
    (104) assignment -> . member-access assignment-operator expression
    (105) assignment -> . element-access assignment-operator expression
    (43) conditional-or-expression -> . conditional-and-expression
    (44) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (45) conditional-and-expression -> . inclusive-or-expression
    (46) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (47) inclusive-or-expression -> . exclusive-or-expression
    (48) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (49) exclusive-or-expression -> . and-expression
    (50) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (51) and-expression -> . equality-expression
    (52) and-expression -> . and-expression BITAND equality-expression
    (53) equality-expression -> . relational-expression
    (54) equality-expression -> . equality-expression EQ relational-expression
    (55) equality-expression -> . equality-expression NE relational-expression
    (56) relational-expression -> . shift-expression
    (57) relational-expression -> . relational-expression LT shift-expression
    (58) relational-expression -> . relational-expression GT shift-expression
    (59) relational-expression -> . relational-expression LE shift-expression
    (60) relational-expression -> . relational-expression GE shift-expression
    (61) shift-expression -> . additive-expression
    (62) shift-expression -> . shift-expression LSHIFT additive-expression
    (63) shift-expression -> . shift-expression RSHIFT additive-expression
    (64) additive-expression -> . multiplicative-expression
    (65) additive-expression -> . additive-expression PLUS multiplicative-expression
    (66) additive-expression -> . additive-expression MINUS multiplicative-expression
    (67) multiplicative-expression -> . unary-expression
    (68) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (69) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (70) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (71) unary-expression -> . primary-expression
    (72) unary-expression -> . PLUS unary-expression
    (73) unary-expression -> . MINUS unary-expression
    (74) unary-expression -> . BITNOT unary-expression
    (75) unary-expression -> . BITCOMP unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . element-access
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (220) literal -> . ICONST
    (221) literal -> . DCONST
    (222) literal -> . TRUE
    (223) literal -> . FALSE
    (94) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 103
    PLUS            shift and go to state 102
    MINUS           shift and go to state 95
    BITNOT          shift and go to state 117
    BITCOMP         shift and go to state 97
    NEW             shift and go to state 93
    ICONST          shift and go to state 108
    DCONST          shift and go to state 118
    TRUE            shift and go to state 112
    FALSE           shift and go to state 110
    OPEN_PAREN      shift and go to state 99

    exclusive-or-expression        shift and go to state 89
    member-access                  shift and go to state 90
    relational-expression          shift and go to state 91
    additive-expression            shift and go to state 94
    primary-no-array-creation-expression shift and go to state 107
    inclusive-or-expression        shift and go to state 96
    unary-expression               shift and go to state 88
    element-access                 shift and go to state 98
    literal                        shift and go to state 106
    conditional-expression         shift and go to state 100
    conditional-and-expression     shift and go to state 101
    array-creation-expression      shift and go to state 92
    assignment                     shift and go to state 105
    equality-expression            shift and go to state 111
    shift-expression               shift and go to state 113
    and-expression                 shift and go to state 114
    multiplicative-expression      shift and go to state 115
    conditional-or-expression      shift and go to state 121
    primary-expression             shift and go to state 119
    invocation-expression          shift and go to state 120
    expression                     shift and go to state 217
    parenthesized-expression       shift and go to state 122

state 129

    (161) declaration-statement -> local-constant-declaration DELIM .

    IDENTIFIER      reduce using rule 161 (declaration-statement -> local-constant-declaration DELIM .)
    BLOCK_BEGIN     reduce using rule 161 (declaration-statement -> local-constant-declaration DELIM .)
    DELIM           reduce using rule 161 (declaration-statement -> local-constant-declaration DELIM .)
    CONSOLE         reduce using rule 161 (declaration-statement -> local-constant-declaration DELIM .)
    CONST           reduce using rule 161 (declaration-statement -> local-constant-declaration DELIM .)
    IF              reduce using rule 161 (declaration-statement -> local-constant-declaration DELIM .)
    SWITCH          reduce using rule 161 (declaration-statement -> local-constant-declaration DELIM .)
    WHILE           reduce using rule 161 (declaration-statement -> local-constant-declaration DELIM .)
    FOR             reduce using rule 161 (declaration-statement -> local-constant-declaration DELIM .)
    DO              reduce using rule 161 (declaration-statement -> local-constant-declaration DELIM .)
    BREAK           reduce using rule 161 (declaration-statement -> local-constant-declaration DELIM .)
    CONTINUE        reduce using rule 161 (declaration-statement -> local-constant-declaration DELIM .)
    GOTO            reduce using rule 161 (declaration-statement -> local-constant-declaration DELIM .)
    RETURN          reduce using rule 161 (declaration-statement -> local-constant-declaration DELIM .)
    VOID            reduce using rule 161 (declaration-statement -> local-constant-declaration DELIM .)
    PUBLIC          reduce using rule 161 (declaration-statement -> local-constant-declaration DELIM .)
    PRIVATE         reduce using rule 161 (declaration-statement -> local-constant-declaration DELIM .)
    BOOL            reduce using rule 161 (declaration-statement -> local-constant-declaration DELIM .)
    INT             reduce using rule 161 (declaration-statement -> local-constant-declaration DELIM .)
    UINT            reduce using rule 161 (declaration-statement -> local-constant-declaration DELIM .)
    CHAR            reduce using rule 161 (declaration-statement -> local-constant-declaration DELIM .)
    DOUBLE          reduce using rule 161 (declaration-statement -> local-constant-declaration DELIM .)
    BLOCK_END       reduce using rule 161 (declaration-statement -> local-constant-declaration DELIM .)
    CASE            reduce using rule 161 (declaration-statement -> local-constant-declaration DELIM .)
    DEFAULT         reduce using rule 161 (declaration-statement -> local-constant-declaration DELIM .)
    $end            reduce using rule 161 (declaration-statement -> local-constant-declaration DELIM .)


state 130

    (189) iteration-statement -> do-statement M_quad .

    IDENTIFIER      reduce using rule 189 (iteration-statement -> do-statement M_quad .)
    BLOCK_BEGIN     reduce using rule 189 (iteration-statement -> do-statement M_quad .)
    DELIM           reduce using rule 189 (iteration-statement -> do-statement M_quad .)
    CONSOLE         reduce using rule 189 (iteration-statement -> do-statement M_quad .)
    CONST           reduce using rule 189 (iteration-statement -> do-statement M_quad .)
    IF              reduce using rule 189 (iteration-statement -> do-statement M_quad .)
    SWITCH          reduce using rule 189 (iteration-statement -> do-statement M_quad .)
    WHILE           reduce using rule 189 (iteration-statement -> do-statement M_quad .)
    FOR             reduce using rule 189 (iteration-statement -> do-statement M_quad .)
    DO              reduce using rule 189 (iteration-statement -> do-statement M_quad .)
    BREAK           reduce using rule 189 (iteration-statement -> do-statement M_quad .)
    CONTINUE        reduce using rule 189 (iteration-statement -> do-statement M_quad .)
    GOTO            reduce using rule 189 (iteration-statement -> do-statement M_quad .)
    RETURN          reduce using rule 189 (iteration-statement -> do-statement M_quad .)
    VOID            reduce using rule 189 (iteration-statement -> do-statement M_quad .)
    PUBLIC          reduce using rule 189 (iteration-statement -> do-statement M_quad .)
    PRIVATE         reduce using rule 189 (iteration-statement -> do-statement M_quad .)
    BOOL            reduce using rule 189 (iteration-statement -> do-statement M_quad .)
    INT             reduce using rule 189 (iteration-statement -> do-statement M_quad .)
    UINT            reduce using rule 189 (iteration-statement -> do-statement M_quad .)
    CHAR            reduce using rule 189 (iteration-statement -> do-statement M_quad .)
    DOUBLE          reduce using rule 189 (iteration-statement -> do-statement M_quad .)
    BLOCK_END       reduce using rule 189 (iteration-statement -> do-statement M_quad .)
    $end            reduce using rule 189 (iteration-statement -> do-statement M_quad .)
    CASE            reduce using rule 189 (iteration-statement -> do-statement M_quad .)
    DEFAULT         reduce using rule 189 (iteration-statement -> do-statement M_quad .)


state 131

    (193) for-statement -> FOR OPEN_PAREN . for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block
    (194) for-initializer-opt -> . for-initializer
    (195) for-initializer-opt -> . empty
    (196) for-initializer -> . statement-expression-list
    (224) empty -> .
    (201) statement-expression-list -> . statement-expression
    (202) statement-expression-list -> . statement-expression-list COMMA statement-expression
    (166) statement-expression -> . invocation-expression
    (167) statement-expression -> . assignment
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (103) assignment -> . IDENTIFIER assignment-operator expression
    (104) assignment -> . member-access assignment-operator expression
    (105) assignment -> . element-access assignment-operator expression
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    DELIM           reduce using rule 224 (empty -> .)
    IDENTIFIER      shift and go to state 221

    for-initializer                shift and go to state 218
    assignment                     shift and go to state 59
    member-access                  shift and go to state 2
    element-access                 shift and go to state 21
    statement-expression           shift and go to state 219
    empty                          shift and go to state 222
    invocation-expression          shift and go to state 14
    statement-expression-list      shift and go to state 220
    for-initializer-opt            shift and go to state 223

state 132

    (176) switch-statement -> SWITCH OPEN_PAREN . expression CLOSE_PAREN switch-block
    (39) expression -> . conditional-expression
    (40) expression -> . assignment
    (41) conditional-expression -> . conditional-or-expression
    (42) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (103) assignment -> . IDENTIFIER assignment-operator expression
    (104) assignment -> . member-access assignment-operator expression
    (105) assignment -> . element-access assignment-operator expression
    (43) conditional-or-expression -> . conditional-and-expression
    (44) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (45) conditional-and-expression -> . inclusive-or-expression
    (46) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (47) inclusive-or-expression -> . exclusive-or-expression
    (48) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (49) exclusive-or-expression -> . and-expression
    (50) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (51) and-expression -> . equality-expression
    (52) and-expression -> . and-expression BITAND equality-expression
    (53) equality-expression -> . relational-expression
    (54) equality-expression -> . equality-expression EQ relational-expression
    (55) equality-expression -> . equality-expression NE relational-expression
    (56) relational-expression -> . shift-expression
    (57) relational-expression -> . relational-expression LT shift-expression
    (58) relational-expression -> . relational-expression GT shift-expression
    (59) relational-expression -> . relational-expression LE shift-expression
    (60) relational-expression -> . relational-expression GE shift-expression
    (61) shift-expression -> . additive-expression
    (62) shift-expression -> . shift-expression LSHIFT additive-expression
    (63) shift-expression -> . shift-expression RSHIFT additive-expression
    (64) additive-expression -> . multiplicative-expression
    (65) additive-expression -> . additive-expression PLUS multiplicative-expression
    (66) additive-expression -> . additive-expression MINUS multiplicative-expression
    (67) multiplicative-expression -> . unary-expression
    (68) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (69) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (70) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (71) unary-expression -> . primary-expression
    (72) unary-expression -> . PLUS unary-expression
    (73) unary-expression -> . MINUS unary-expression
    (74) unary-expression -> . BITNOT unary-expression
    (75) unary-expression -> . BITCOMP unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . element-access
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (220) literal -> . ICONST
    (221) literal -> . DCONST
    (222) literal -> . TRUE
    (223) literal -> . FALSE
    (94) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 103
    PLUS            shift and go to state 102
    MINUS           shift and go to state 95
    BITNOT          shift and go to state 117
    BITCOMP         shift and go to state 97
    NEW             shift and go to state 93
    ICONST          shift and go to state 108
    DCONST          shift and go to state 118
    TRUE            shift and go to state 112
    FALSE           shift and go to state 110
    OPEN_PAREN      shift and go to state 99

    exclusive-or-expression        shift and go to state 89
    member-access                  shift and go to state 90
    relational-expression          shift and go to state 91
    additive-expression            shift and go to state 94
    primary-no-array-creation-expression shift and go to state 107
    inclusive-or-expression        shift and go to state 96
    unary-expression               shift and go to state 88
    element-access                 shift and go to state 98
    literal                        shift and go to state 106
    conditional-expression         shift and go to state 100
    conditional-and-expression     shift and go to state 101
    array-creation-expression      shift and go to state 92
    assignment                     shift and go to state 105
    equality-expression            shift and go to state 111
    shift-expression               shift and go to state 113
    and-expression                 shift and go to state 114
    multiplicative-expression      shift and go to state 115
    conditional-or-expression      shift and go to state 121
    primary-expression             shift and go to state 119
    invocation-expression          shift and go to state 120
    expression                     shift and go to state 224
    parenthesized-expression       shift and go to state 122

state 133

    (160) declaration-statement -> local-variable-declaration DELIM .

    IDENTIFIER      reduce using rule 160 (declaration-statement -> local-variable-declaration DELIM .)
    BLOCK_BEGIN     reduce using rule 160 (declaration-statement -> local-variable-declaration DELIM .)
    DELIM           reduce using rule 160 (declaration-statement -> local-variable-declaration DELIM .)
    CONSOLE         reduce using rule 160 (declaration-statement -> local-variable-declaration DELIM .)
    CONST           reduce using rule 160 (declaration-statement -> local-variable-declaration DELIM .)
    IF              reduce using rule 160 (declaration-statement -> local-variable-declaration DELIM .)
    SWITCH          reduce using rule 160 (declaration-statement -> local-variable-declaration DELIM .)
    WHILE           reduce using rule 160 (declaration-statement -> local-variable-declaration DELIM .)
    FOR             reduce using rule 160 (declaration-statement -> local-variable-declaration DELIM .)
    DO              reduce using rule 160 (declaration-statement -> local-variable-declaration DELIM .)
    BREAK           reduce using rule 160 (declaration-statement -> local-variable-declaration DELIM .)
    CONTINUE        reduce using rule 160 (declaration-statement -> local-variable-declaration DELIM .)
    GOTO            reduce using rule 160 (declaration-statement -> local-variable-declaration DELIM .)
    RETURN          reduce using rule 160 (declaration-statement -> local-variable-declaration DELIM .)
    VOID            reduce using rule 160 (declaration-statement -> local-variable-declaration DELIM .)
    PUBLIC          reduce using rule 160 (declaration-statement -> local-variable-declaration DELIM .)
    PRIVATE         reduce using rule 160 (declaration-statement -> local-variable-declaration DELIM .)
    BOOL            reduce using rule 160 (declaration-statement -> local-variable-declaration DELIM .)
    INT             reduce using rule 160 (declaration-statement -> local-variable-declaration DELIM .)
    UINT            reduce using rule 160 (declaration-statement -> local-variable-declaration DELIM .)
    CHAR            reduce using rule 160 (declaration-statement -> local-variable-declaration DELIM .)
    DOUBLE          reduce using rule 160 (declaration-statement -> local-variable-declaration DELIM .)
    BLOCK_END       reduce using rule 160 (declaration-statement -> local-variable-declaration DELIM .)
    CASE            reduce using rule 160 (declaration-statement -> local-variable-declaration DELIM .)
    DEFAULT         reduce using rule 160 (declaration-statement -> local-variable-declaration DELIM .)
    $end            reduce using rule 160 (declaration-statement -> local-variable-declaration DELIM .)


state 134

    (208) continue-statement -> CONTINUE DELIM .

    IDENTIFIER      reduce using rule 208 (continue-statement -> CONTINUE DELIM .)
    BLOCK_BEGIN     reduce using rule 208 (continue-statement -> CONTINUE DELIM .)
    DELIM           reduce using rule 208 (continue-statement -> CONTINUE DELIM .)
    CONSOLE         reduce using rule 208 (continue-statement -> CONTINUE DELIM .)
    CONST           reduce using rule 208 (continue-statement -> CONTINUE DELIM .)
    IF              reduce using rule 208 (continue-statement -> CONTINUE DELIM .)
    SWITCH          reduce using rule 208 (continue-statement -> CONTINUE DELIM .)
    WHILE           reduce using rule 208 (continue-statement -> CONTINUE DELIM .)
    FOR             reduce using rule 208 (continue-statement -> CONTINUE DELIM .)
    DO              reduce using rule 208 (continue-statement -> CONTINUE DELIM .)
    BREAK           reduce using rule 208 (continue-statement -> CONTINUE DELIM .)
    CONTINUE        reduce using rule 208 (continue-statement -> CONTINUE DELIM .)
    GOTO            reduce using rule 208 (continue-statement -> CONTINUE DELIM .)
    RETURN          reduce using rule 208 (continue-statement -> CONTINUE DELIM .)
    VOID            reduce using rule 208 (continue-statement -> CONTINUE DELIM .)
    PUBLIC          reduce using rule 208 (continue-statement -> CONTINUE DELIM .)
    PRIVATE         reduce using rule 208 (continue-statement -> CONTINUE DELIM .)
    BOOL            reduce using rule 208 (continue-statement -> CONTINUE DELIM .)
    INT             reduce using rule 208 (continue-statement -> CONTINUE DELIM .)
    UINT            reduce using rule 208 (continue-statement -> CONTINUE DELIM .)
    CHAR            reduce using rule 208 (continue-statement -> CONTINUE DELIM .)
    DOUBLE          reduce using rule 208 (continue-statement -> CONTINUE DELIM .)
    $end            reduce using rule 208 (continue-statement -> CONTINUE DELIM .)
    CASE            reduce using rule 208 (continue-statement -> CONTINUE DELIM .)
    DEFAULT         reduce using rule 208 (continue-statement -> CONTINUE DELIM .)
    BLOCK_END       reduce using rule 208 (continue-statement -> CONTINUE DELIM .)


state 135

    (190) while-statement -> WHILE M_quad . OPEN_PAREN expression CLOSE_PAREN M_while block

    OPEN_PAREN      shift and go to state 225


state 136

    (95) member-access -> IDENTIFIER DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 226


state 137

    (101) element-access -> IDENTIFIER OPEN_BRACKET . expression CLOSE_BRACKET
    (39) expression -> . conditional-expression
    (40) expression -> . assignment
    (41) conditional-expression -> . conditional-or-expression
    (42) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (103) assignment -> . IDENTIFIER assignment-operator expression
    (104) assignment -> . member-access assignment-operator expression
    (105) assignment -> . element-access assignment-operator expression
    (43) conditional-or-expression -> . conditional-and-expression
    (44) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (45) conditional-and-expression -> . inclusive-or-expression
    (46) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (47) inclusive-or-expression -> . exclusive-or-expression
    (48) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (49) exclusive-or-expression -> . and-expression
    (50) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (51) and-expression -> . equality-expression
    (52) and-expression -> . and-expression BITAND equality-expression
    (53) equality-expression -> . relational-expression
    (54) equality-expression -> . equality-expression EQ relational-expression
    (55) equality-expression -> . equality-expression NE relational-expression
    (56) relational-expression -> . shift-expression
    (57) relational-expression -> . relational-expression LT shift-expression
    (58) relational-expression -> . relational-expression GT shift-expression
    (59) relational-expression -> . relational-expression LE shift-expression
    (60) relational-expression -> . relational-expression GE shift-expression
    (61) shift-expression -> . additive-expression
    (62) shift-expression -> . shift-expression LSHIFT additive-expression
    (63) shift-expression -> . shift-expression RSHIFT additive-expression
    (64) additive-expression -> . multiplicative-expression
    (65) additive-expression -> . additive-expression PLUS multiplicative-expression
    (66) additive-expression -> . additive-expression MINUS multiplicative-expression
    (67) multiplicative-expression -> . unary-expression
    (68) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (69) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (70) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (71) unary-expression -> . primary-expression
    (72) unary-expression -> . PLUS unary-expression
    (73) unary-expression -> . MINUS unary-expression
    (74) unary-expression -> . BITNOT unary-expression
    (75) unary-expression -> . BITCOMP unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . element-access
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (220) literal -> . ICONST
    (221) literal -> . DCONST
    (222) literal -> . TRUE
    (223) literal -> . FALSE
    (94) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 103
    PLUS            shift and go to state 102
    MINUS           shift and go to state 95
    BITNOT          shift and go to state 117
    BITCOMP         shift and go to state 97
    NEW             shift and go to state 93
    ICONST          shift and go to state 108
    DCONST          shift and go to state 118
    TRUE            shift and go to state 112
    FALSE           shift and go to state 110
    OPEN_PAREN      shift and go to state 99

    exclusive-or-expression        shift and go to state 89
    member-access                  shift and go to state 90
    relational-expression          shift and go to state 91
    additive-expression            shift and go to state 94
    primary-no-array-creation-expression shift and go to state 107
    inclusive-or-expression        shift and go to state 96
    unary-expression               shift and go to state 88
    element-access                 shift and go to state 98
    literal                        shift and go to state 106
    conditional-expression         shift and go to state 100
    conditional-and-expression     shift and go to state 101
    array-creation-expression      shift and go to state 92
    assignment                     shift and go to state 105
    equality-expression            shift and go to state 111
    shift-expression               shift and go to state 113
    and-expression                 shift and go to state 114
    multiplicative-expression      shift and go to state 115
    conditional-or-expression      shift and go to state 121
    primary-expression             shift and go to state 119
    invocation-expression          shift and go to state 120
    expression                     shift and go to state 227
    parenthesized-expression       shift and go to state 122

state 138

    (97) invocation-expression -> IDENTIFIER OPEN_PAREN . argument-list-opt CLOSE_PAREN
    (99) argument-list-opt -> . expression-list
    (100) argument-list-opt -> . empty
    (81) expression-list -> . expression
    (82) expression-list -> . expression-list COMMA expression
    (224) empty -> .
    (39) expression -> . conditional-expression
    (40) expression -> . assignment
    (41) conditional-expression -> . conditional-or-expression
    (42) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (103) assignment -> . IDENTIFIER assignment-operator expression
    (104) assignment -> . member-access assignment-operator expression
    (105) assignment -> . element-access assignment-operator expression
    (43) conditional-or-expression -> . conditional-and-expression
    (44) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (45) conditional-and-expression -> . inclusive-or-expression
    (46) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (47) inclusive-or-expression -> . exclusive-or-expression
    (48) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (49) exclusive-or-expression -> . and-expression
    (50) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (51) and-expression -> . equality-expression
    (52) and-expression -> . and-expression BITAND equality-expression
    (53) equality-expression -> . relational-expression
    (54) equality-expression -> . equality-expression EQ relational-expression
    (55) equality-expression -> . equality-expression NE relational-expression
    (56) relational-expression -> . shift-expression
    (57) relational-expression -> . relational-expression LT shift-expression
    (58) relational-expression -> . relational-expression GT shift-expression
    (59) relational-expression -> . relational-expression LE shift-expression
    (60) relational-expression -> . relational-expression GE shift-expression
    (61) shift-expression -> . additive-expression
    (62) shift-expression -> . shift-expression LSHIFT additive-expression
    (63) shift-expression -> . shift-expression RSHIFT additive-expression
    (64) additive-expression -> . multiplicative-expression
    (65) additive-expression -> . additive-expression PLUS multiplicative-expression
    (66) additive-expression -> . additive-expression MINUS multiplicative-expression
    (67) multiplicative-expression -> . unary-expression
    (68) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (69) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (70) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (71) unary-expression -> . primary-expression
    (72) unary-expression -> . PLUS unary-expression
    (73) unary-expression -> . MINUS unary-expression
    (74) unary-expression -> . BITNOT unary-expression
    (75) unary-expression -> . BITCOMP unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . element-access
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (220) literal -> . ICONST
    (221) literal -> . DCONST
    (222) literal -> . TRUE
    (223) literal -> . FALSE
    (94) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    CLOSE_PAREN     reduce using rule 224 (empty -> .)
    IDENTIFIER      shift and go to state 103
    PLUS            shift and go to state 102
    MINUS           shift and go to state 95
    BITNOT          shift and go to state 117
    BITCOMP         shift and go to state 97
    NEW             shift and go to state 93
    ICONST          shift and go to state 108
    DCONST          shift and go to state 118
    TRUE            shift and go to state 112
    FALSE           shift and go to state 110
    OPEN_PAREN      shift and go to state 99

    argument-list-opt              shift and go to state 228
    exclusive-or-expression        shift and go to state 89
    member-access                  shift and go to state 90
    relational-expression          shift and go to state 91
    additive-expression            shift and go to state 94
    primary-no-array-creation-expression shift and go to state 107
    inclusive-or-expression        shift and go to state 96
    equality-expression            shift and go to state 111
    unary-expression               shift and go to state 88
    element-access                 shift and go to state 98
    literal                        shift and go to state 106
    conditional-expression         shift and go to state 100
    conditional-and-expression     shift and go to state 101
    empty                          shift and go to state 160
    array-creation-expression      shift and go to state 92
    assignment                     shift and go to state 105
    expression-list                shift and go to state 161
    shift-expression               shift and go to state 113
    and-expression                 shift and go to state 114
    multiplicative-expression      shift and go to state 115
    expression                     shift and go to state 162
    primary-expression             shift and go to state 119
    invocation-expression          shift and go to state 120
    conditional-or-expression      shift and go to state 121
    parenthesized-expression       shift and go to state 122

state 139

    (159) labeled-statement -> IDENTIFIER COLON . statement
    (144) statement -> . labeled-statement
    (145) statement -> . declaration-statement
    (146) statement -> . block
    (147) statement -> . empty-statement
    (148) statement -> . expression-statement
    (149) statement -> . selection-statement
    (150) statement -> . iteration-statement
    (151) statement -> . jump-statement
    (152) statement -> . write-statement
    (153) statement -> . read-statement
    (154) statement -> . method-declaration
    (159) labeled-statement -> . IDENTIFIER COLON statement
    (160) declaration-statement -> . local-variable-declaration DELIM
    (161) declaration-statement -> . local-constant-declaration DELIM
    (138) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END
    (164) empty-statement -> . DELIM
    (165) expression-statement -> . statement-expression DELIM
    (168) selection-statement -> . if-statement
    (169) selection-statement -> . switch-statement
    (187) iteration-statement -> . while-statement M_quad
    (188) iteration-statement -> . for-statement M_quad
    (189) iteration-statement -> . do-statement M_quad
    (203) jump-statement -> . break-statement
    (204) jump-statement -> . continue-statement
    (205) jump-statement -> . goto-statement
    (206) jump-statement -> . return-statement
    (155) write-statement -> . CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM
    (158) read-statement -> . CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM
    (124) method-declaration -> . method-header method-body
    (162) local-variable-declaration -> . type variable-declarators
    (163) local-constant-declaration -> . CONST type constant-declarators
    (166) statement-expression -> . invocation-expression
    (167) statement-expression -> . assignment
    (170) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block
    (171) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block
    (172) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad
    (176) switch-statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block
    (190) while-statement -> . WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block
    (193) for-statement -> . FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block
    (192) do-statement -> . DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM
    (207) break-statement -> . BREAK DELIM
    (208) continue-statement -> . CONTINUE DELIM
    (209) goto-statement -> . GOTO IDENTIFIER DELIM
    (210) return-statement -> . RETURN expression-opt DELIM
    (125) method-header -> . modifier type IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (126) method-header -> . modifier VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (127) method-header -> . type IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (128) method-header -> . VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (27) type -> . simple-type
    (28) type -> . class-type
    (29) type -> . array-type
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (103) assignment -> . IDENTIFIER assignment-operator expression
    (104) assignment -> . member-access assignment-operator expression
    (105) assignment -> . element-access assignment-operator expression
    (118) modifier -> . PUBLIC
    (119) modifier -> . PRIVATE
    (30) simple-type -> . BOOL
    (31) simple-type -> . INT
    (32) simple-type -> . UINT
    (33) simple-type -> . CHAR
    (34) simple-type -> . DOUBLE
    (14) class-type -> . IDENTIFIER
    (35) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    IDENTIFIER      shift and go to state 40
    BLOCK_BEGIN     shift and go to state 54
    DELIM           shift and go to state 4
    CONSOLE         shift and go to state 58
    CONST           shift and go to state 53
    IF              shift and go to state 63
    SWITCH          shift and go to state 26
    WHILE           shift and go to state 35
    FOR             shift and go to state 24
    DO              shift and go to state 52
    BREAK           shift and go to state 46
    CONTINUE        shift and go to state 31
    GOTO            shift and go to state 8
    RETURN          shift and go to state 16
    VOID            shift and go to state 7
    PUBLIC          shift and go to state 62
    PRIVATE         shift and go to state 55
    BOOL            shift and go to state 47
    INT             shift and go to state 28
    UINT            shift and go to state 61
    CHAR            shift and go to state 34
    DOUBLE          shift and go to state 12

    return-statement               shift and go to state 19
    method-header                  shift and go to state 17
    write-statement                shift and go to state 1
    member-access                  shift and go to state 2
    selection-statement            shift and go to state 33
    empty-statement                shift and go to state 36
    expression-statement           shift and go to state 3
    break-statement                shift and go to state 37
    method-declaration             shift and go to state 38
    element-access                 shift and go to state 21
    statement-expression           shift and go to state 5
    local-constant-declaration     shift and go to state 22
    statement                      shift and go to state 229
    assignment                     shift and go to state 59
    for-statement                  shift and go to state 6
    type                           shift and go to state 41
    read-statement                 shift and go to state 57
    do-statement                   shift and go to state 23
    array-type                     shift and go to state 43
    continue-statement             shift and go to state 25
    invocation-expression          shift and go to state 14
    labeled-statement              shift and go to state 9
    declaration-statement          shift and go to state 44
    switch-statement               shift and go to state 10
    iteration-statement            shift and go to state 45
    jump-statement                 shift and go to state 11
    local-variable-declaration     shift and go to state 27
    goto-statement                 shift and go to state 29
    if-statement                   shift and go to state 30
    class-type                     shift and go to state 64
    while-statement                shift and go to state 49
    simple-type                    shift and go to state 18
    modifier                       shift and go to state 51
    block                          shift and go to state 32

state 140

    (103) assignment -> IDENTIFIER assignment-operator . expression
    (39) expression -> . conditional-expression
    (40) expression -> . assignment
    (41) conditional-expression -> . conditional-or-expression
    (42) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (103) assignment -> . IDENTIFIER assignment-operator expression
    (104) assignment -> . member-access assignment-operator expression
    (105) assignment -> . element-access assignment-operator expression
    (43) conditional-or-expression -> . conditional-and-expression
    (44) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (45) conditional-and-expression -> . inclusive-or-expression
    (46) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (47) inclusive-or-expression -> . exclusive-or-expression
    (48) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (49) exclusive-or-expression -> . and-expression
    (50) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (51) and-expression -> . equality-expression
    (52) and-expression -> . and-expression BITAND equality-expression
    (53) equality-expression -> . relational-expression
    (54) equality-expression -> . equality-expression EQ relational-expression
    (55) equality-expression -> . equality-expression NE relational-expression
    (56) relational-expression -> . shift-expression
    (57) relational-expression -> . relational-expression LT shift-expression
    (58) relational-expression -> . relational-expression GT shift-expression
    (59) relational-expression -> . relational-expression LE shift-expression
    (60) relational-expression -> . relational-expression GE shift-expression
    (61) shift-expression -> . additive-expression
    (62) shift-expression -> . shift-expression LSHIFT additive-expression
    (63) shift-expression -> . shift-expression RSHIFT additive-expression
    (64) additive-expression -> . multiplicative-expression
    (65) additive-expression -> . additive-expression PLUS multiplicative-expression
    (66) additive-expression -> . additive-expression MINUS multiplicative-expression
    (67) multiplicative-expression -> . unary-expression
    (68) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (69) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (70) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (71) unary-expression -> . primary-expression
    (72) unary-expression -> . PLUS unary-expression
    (73) unary-expression -> . MINUS unary-expression
    (74) unary-expression -> . BITNOT unary-expression
    (75) unary-expression -> . BITCOMP unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . element-access
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (220) literal -> . ICONST
    (221) literal -> . DCONST
    (222) literal -> . TRUE
    (223) literal -> . FALSE
    (94) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 103
    PLUS            shift and go to state 102
    MINUS           shift and go to state 95
    BITNOT          shift and go to state 117
    BITCOMP         shift and go to state 97
    NEW             shift and go to state 93
    ICONST          shift and go to state 108
    DCONST          shift and go to state 118
    TRUE            shift and go to state 112
    FALSE           shift and go to state 110
    OPEN_PAREN      shift and go to state 99

    exclusive-or-expression        shift and go to state 89
    member-access                  shift and go to state 90
    relational-expression          shift and go to state 91
    additive-expression            shift and go to state 94
    primary-no-array-creation-expression shift and go to state 107
    inclusive-or-expression        shift and go to state 96
    unary-expression               shift and go to state 88
    element-access                 shift and go to state 98
    literal                        shift and go to state 106
    conditional-expression         shift and go to state 100
    conditional-and-expression     shift and go to state 101
    array-creation-expression      shift and go to state 92
    assignment                     shift and go to state 105
    equality-expression            shift and go to state 111
    shift-expression               shift and go to state 113
    and-expression                 shift and go to state 114
    multiplicative-expression      shift and go to state 115
    conditional-or-expression      shift and go to state 121
    primary-expression             shift and go to state 119
    invocation-expression          shift and go to state 120
    expression                     shift and go to state 230
    parenthesized-expression       shift and go to state 122

state 141

    (120) variable-declarators -> variable-declarator .

    DELIM           reduce using rule 120 (variable-declarators -> variable-declarator .)
    COMMA           reduce using rule 120 (variable-declarators -> variable-declarator .)


state 142

    (162) local-variable-declaration -> type variable-declarators .
    (121) variable-declarators -> variable-declarators . COMMA variable-declarator

    DELIM           reduce using rule 162 (local-variable-declaration -> type variable-declarators .)
    COMMA           shift and go to state 231


state 143

    (127) method-header -> type IDENTIFIER . OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (122) variable-declarator -> IDENTIFIER .
    (123) variable-declarator -> IDENTIFIER . ASSIGN variable-initializer

    OPEN_PAREN      shift and go to state 232
    COMMA           reduce using rule 122 (variable-declarator -> IDENTIFIER .)
    DELIM           reduce using rule 122 (variable-declarator -> IDENTIFIER .)
    ASSIGN          shift and go to state 233


state 144

    (207) break-statement -> BREAK DELIM .

    IDENTIFIER      reduce using rule 207 (break-statement -> BREAK DELIM .)
    BLOCK_BEGIN     reduce using rule 207 (break-statement -> BREAK DELIM .)
    DELIM           reduce using rule 207 (break-statement -> BREAK DELIM .)
    CONSOLE         reduce using rule 207 (break-statement -> BREAK DELIM .)
    CONST           reduce using rule 207 (break-statement -> BREAK DELIM .)
    IF              reduce using rule 207 (break-statement -> BREAK DELIM .)
    SWITCH          reduce using rule 207 (break-statement -> BREAK DELIM .)
    WHILE           reduce using rule 207 (break-statement -> BREAK DELIM .)
    FOR             reduce using rule 207 (break-statement -> BREAK DELIM .)
    DO              reduce using rule 207 (break-statement -> BREAK DELIM .)
    BREAK           reduce using rule 207 (break-statement -> BREAK DELIM .)
    CONTINUE        reduce using rule 207 (break-statement -> BREAK DELIM .)
    GOTO            reduce using rule 207 (break-statement -> BREAK DELIM .)
    RETURN          reduce using rule 207 (break-statement -> BREAK DELIM .)
    VOID            reduce using rule 207 (break-statement -> BREAK DELIM .)
    PUBLIC          reduce using rule 207 (break-statement -> BREAK DELIM .)
    PRIVATE         reduce using rule 207 (break-statement -> BREAK DELIM .)
    BOOL            reduce using rule 207 (break-statement -> BREAK DELIM .)
    INT             reduce using rule 207 (break-statement -> BREAK DELIM .)
    UINT            reduce using rule 207 (break-statement -> BREAK DELIM .)
    CHAR            reduce using rule 207 (break-statement -> BREAK DELIM .)
    DOUBLE          reduce using rule 207 (break-statement -> BREAK DELIM .)
    $end            reduce using rule 207 (break-statement -> BREAK DELIM .)
    BLOCK_END       reduce using rule 207 (break-statement -> BREAK DELIM .)
    CASE            reduce using rule 207 (break-statement -> BREAK DELIM .)
    DEFAULT         reduce using rule 207 (break-statement -> BREAK DELIM .)


state 145

    (143) statement-list -> statement-list statement .

    IDENTIFIER      reduce using rule 143 (statement-list -> statement-list statement .)
    BLOCK_BEGIN     reduce using rule 143 (statement-list -> statement-list statement .)
    DELIM           reduce using rule 143 (statement-list -> statement-list statement .)
    CONSOLE         reduce using rule 143 (statement-list -> statement-list statement .)
    CONST           reduce using rule 143 (statement-list -> statement-list statement .)
    IF              reduce using rule 143 (statement-list -> statement-list statement .)
    SWITCH          reduce using rule 143 (statement-list -> statement-list statement .)
    WHILE           reduce using rule 143 (statement-list -> statement-list statement .)
    FOR             reduce using rule 143 (statement-list -> statement-list statement .)
    DO              reduce using rule 143 (statement-list -> statement-list statement .)
    BREAK           reduce using rule 143 (statement-list -> statement-list statement .)
    CONTINUE        reduce using rule 143 (statement-list -> statement-list statement .)
    GOTO            reduce using rule 143 (statement-list -> statement-list statement .)
    RETURN          reduce using rule 143 (statement-list -> statement-list statement .)
    VOID            reduce using rule 143 (statement-list -> statement-list statement .)
    PUBLIC          reduce using rule 143 (statement-list -> statement-list statement .)
    PRIVATE         reduce using rule 143 (statement-list -> statement-list statement .)
    BOOL            reduce using rule 143 (statement-list -> statement-list statement .)
    INT             reduce using rule 143 (statement-list -> statement-list statement .)
    UINT            reduce using rule 143 (statement-list -> statement-list statement .)
    CHAR            reduce using rule 143 (statement-list -> statement-list statement .)
    DOUBLE          reduce using rule 143 (statement-list -> statement-list statement .)
    CASE            reduce using rule 143 (statement-list -> statement-list statement .)
    DEFAULT         reduce using rule 143 (statement-list -> statement-list statement .)
    BLOCK_END       reduce using rule 143 (statement-list -> statement-list statement .)
    $end            reduce using rule 143 (statement-list -> statement-list statement .)


state 146

    (187) iteration-statement -> while-statement M_quad .

    IDENTIFIER      reduce using rule 187 (iteration-statement -> while-statement M_quad .)
    BLOCK_BEGIN     reduce using rule 187 (iteration-statement -> while-statement M_quad .)
    DELIM           reduce using rule 187 (iteration-statement -> while-statement M_quad .)
    CONSOLE         reduce using rule 187 (iteration-statement -> while-statement M_quad .)
    CONST           reduce using rule 187 (iteration-statement -> while-statement M_quad .)
    IF              reduce using rule 187 (iteration-statement -> while-statement M_quad .)
    SWITCH          reduce using rule 187 (iteration-statement -> while-statement M_quad .)
    WHILE           reduce using rule 187 (iteration-statement -> while-statement M_quad .)
    FOR             reduce using rule 187 (iteration-statement -> while-statement M_quad .)
    DO              reduce using rule 187 (iteration-statement -> while-statement M_quad .)
    BREAK           reduce using rule 187 (iteration-statement -> while-statement M_quad .)
    CONTINUE        reduce using rule 187 (iteration-statement -> while-statement M_quad .)
    GOTO            reduce using rule 187 (iteration-statement -> while-statement M_quad .)
    RETURN          reduce using rule 187 (iteration-statement -> while-statement M_quad .)
    VOID            reduce using rule 187 (iteration-statement -> while-statement M_quad .)
    PUBLIC          reduce using rule 187 (iteration-statement -> while-statement M_quad .)
    PRIVATE         reduce using rule 187 (iteration-statement -> while-statement M_quad .)
    BOOL            reduce using rule 187 (iteration-statement -> while-statement M_quad .)
    INT             reduce using rule 187 (iteration-statement -> while-statement M_quad .)
    UINT            reduce using rule 187 (iteration-statement -> while-statement M_quad .)
    CHAR            reduce using rule 187 (iteration-statement -> while-statement M_quad .)
    DOUBLE          reduce using rule 187 (iteration-statement -> while-statement M_quad .)
    BLOCK_END       reduce using rule 187 (iteration-statement -> while-statement M_quad .)
    $end            reduce using rule 187 (iteration-statement -> while-statement M_quad .)
    CASE            reduce using rule 187 (iteration-statement -> while-statement M_quad .)
    DEFAULT         reduce using rule 187 (iteration-statement -> while-statement M_quad .)


state 147

    (126) method-header -> modifier VOID . IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 234


state 148

    (14) class-type -> IDENTIFIER .

    BLOCK_BEGIN     reduce using rule 14 (class-type -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 14 (class-type -> IDENTIFIER .)


state 149

    (125) method-header -> modifier type . IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 235


state 150

    (192) do-statement -> DO M_quad . block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM
    (138) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END

    BLOCK_BEGIN     shift and go to state 54

    block                          shift and go to state 236

state 151

    (163) local-constant-declaration -> CONST type . constant-declarators
    (36) constant-declarators -> . constant-declarator
    (37) constant-declarators -> . constant-declarators COMMA constant-declarator
    (38) constant-declarator -> . IDENTIFIER ASSIGN expression

    IDENTIFIER      shift and go to state 238

    constant-declarators           shift and go to state 237
    constant-declarator            shift and go to state 239

state 152

    (138) block -> BLOCK_BEGIN M_bstart . statement-list-opt BLOCK_END
    (140) statement-list-opt -> . statement-list
    (141) statement-list-opt -> . empty
    (142) statement-list -> . statement
    (143) statement-list -> . statement-list statement
    (224) empty -> .
    (144) statement -> . labeled-statement
    (145) statement -> . declaration-statement
    (146) statement -> . block
    (147) statement -> . empty-statement
    (148) statement -> . expression-statement
    (149) statement -> . selection-statement
    (150) statement -> . iteration-statement
    (151) statement -> . jump-statement
    (152) statement -> . write-statement
    (153) statement -> . read-statement
    (154) statement -> . method-declaration
    (159) labeled-statement -> . IDENTIFIER COLON statement
    (160) declaration-statement -> . local-variable-declaration DELIM
    (161) declaration-statement -> . local-constant-declaration DELIM
    (138) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END
    (164) empty-statement -> . DELIM
    (165) expression-statement -> . statement-expression DELIM
    (168) selection-statement -> . if-statement
    (169) selection-statement -> . switch-statement
    (187) iteration-statement -> . while-statement M_quad
    (188) iteration-statement -> . for-statement M_quad
    (189) iteration-statement -> . do-statement M_quad
    (203) jump-statement -> . break-statement
    (204) jump-statement -> . continue-statement
    (205) jump-statement -> . goto-statement
    (206) jump-statement -> . return-statement
    (155) write-statement -> . CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM
    (158) read-statement -> . CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM
    (124) method-declaration -> . method-header method-body
    (162) local-variable-declaration -> . type variable-declarators
    (163) local-constant-declaration -> . CONST type constant-declarators
    (166) statement-expression -> . invocation-expression
    (167) statement-expression -> . assignment
    (170) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block
    (171) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block
    (172) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad
    (176) switch-statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block
    (190) while-statement -> . WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block
    (193) for-statement -> . FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block
    (192) do-statement -> . DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM
    (207) break-statement -> . BREAK DELIM
    (208) continue-statement -> . CONTINUE DELIM
    (209) goto-statement -> . GOTO IDENTIFIER DELIM
    (210) return-statement -> . RETURN expression-opt DELIM
    (125) method-header -> . modifier type IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (126) method-header -> . modifier VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (127) method-header -> . type IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (128) method-header -> . VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (27) type -> . simple-type
    (28) type -> . class-type
    (29) type -> . array-type
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (103) assignment -> . IDENTIFIER assignment-operator expression
    (104) assignment -> . member-access assignment-operator expression
    (105) assignment -> . element-access assignment-operator expression
    (118) modifier -> . PUBLIC
    (119) modifier -> . PRIVATE
    (30) simple-type -> . BOOL
    (31) simple-type -> . INT
    (32) simple-type -> . UINT
    (33) simple-type -> . CHAR
    (34) simple-type -> . DOUBLE
    (14) class-type -> . IDENTIFIER
    (35) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    BLOCK_END       reduce using rule 224 (empty -> .)
    IDENTIFIER      shift and go to state 40
    BLOCK_BEGIN     shift and go to state 54
    DELIM           shift and go to state 4
    CONSOLE         shift and go to state 58
    CONST           shift and go to state 53
    IF              shift and go to state 63
    SWITCH          shift and go to state 26
    WHILE           shift and go to state 35
    FOR             shift and go to state 24
    DO              shift and go to state 52
    BREAK           shift and go to state 46
    CONTINUE        shift and go to state 31
    GOTO            shift and go to state 8
    RETURN          shift and go to state 16
    VOID            shift and go to state 7
    PUBLIC          shift and go to state 62
    PRIVATE         shift and go to state 55
    BOOL            shift and go to state 47
    INT             shift and go to state 28
    UINT            shift and go to state 61
    CHAR            shift and go to state 34
    DOUBLE          shift and go to state 12

    return-statement               shift and go to state 19
    method-header                  shift and go to state 17
    write-statement                shift and go to state 1
    member-access                  shift and go to state 2
    selection-statement            shift and go to state 33
    empty-statement                shift and go to state 36
    statement-list-opt             shift and go to state 240
    expression-statement           shift and go to state 3
    break-statement                shift and go to state 37
    statement-expression           shift and go to state 5
    element-access                 shift and go to state 21
    method-declaration             shift and go to state 38
    local-constant-declaration     shift and go to state 22
    statement                      shift and go to state 39
    assignment                     shift and go to state 59
    for-statement                  shift and go to state 6
    type                           shift and go to state 41
    read-statement                 shift and go to state 57
    do-statement                   shift and go to state 23
    array-type                     shift and go to state 43
    continue-statement             shift and go to state 25
    invocation-expression          shift and go to state 14
    labeled-statement              shift and go to state 9
    declaration-statement          shift and go to state 44
    switch-statement               shift and go to state 10
    iteration-statement            shift and go to state 45
    jump-statement                 shift and go to state 11
    local-variable-declaration     shift and go to state 27
    goto-statement                 shift and go to state 29
    if-statement                   shift and go to state 30
    empty                          shift and go to state 213
    statement-list                 shift and go to state 214
    class-type                     shift and go to state 64
    while-statement                shift and go to state 49
    simple-type                    shift and go to state 18
    modifier                       shift and go to state 51
    block                          shift and go to state 32

state 153

    (139) M_bstart -> empty .

    IDENTIFIER      reduce using rule 139 (M_bstart -> empty .)
    BLOCK_BEGIN     reduce using rule 139 (M_bstart -> empty .)
    DELIM           reduce using rule 139 (M_bstart -> empty .)
    CONSOLE         reduce using rule 139 (M_bstart -> empty .)
    CONST           reduce using rule 139 (M_bstart -> empty .)
    IF              reduce using rule 139 (M_bstart -> empty .)
    SWITCH          reduce using rule 139 (M_bstart -> empty .)
    WHILE           reduce using rule 139 (M_bstart -> empty .)
    FOR             reduce using rule 139 (M_bstart -> empty .)
    DO              reduce using rule 139 (M_bstart -> empty .)
    BREAK           reduce using rule 139 (M_bstart -> empty .)
    CONTINUE        reduce using rule 139 (M_bstart -> empty .)
    GOTO            reduce using rule 139 (M_bstart -> empty .)
    RETURN          reduce using rule 139 (M_bstart -> empty .)
    VOID            reduce using rule 139 (M_bstart -> empty .)
    PUBLIC          reduce using rule 139 (M_bstart -> empty .)
    PRIVATE         reduce using rule 139 (M_bstart -> empty .)
    BOOL            reduce using rule 139 (M_bstart -> empty .)
    INT             reduce using rule 139 (M_bstart -> empty .)
    UINT            reduce using rule 139 (M_bstart -> empty .)
    CHAR            reduce using rule 139 (M_bstart -> empty .)
    DOUBLE          reduce using rule 139 (M_bstart -> empty .)
    BLOCK_END       reduce using rule 139 (M_bstart -> empty .)


state 154

    (10) class-header -> CLASS IDENTIFIER . class-base-opt
    (11) class-base-opt -> . class-base
    (12) class-base-opt -> . empty
    (13) class-base -> . COLON class-type
    (224) empty -> .

    COLON           shift and go to state 243
    BLOCK_BEGIN     reduce using rule 224 (empty -> .)

    class-base-opt                 shift and go to state 241
    class-base                     shift and go to state 242
    empty                          shift and go to state 244

state 155

    (155) write-statement -> CONSOLE DOT . WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM
    (158) read-statement -> CONSOLE DOT . READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM

    WRITELINE       shift and go to state 245
    READLINE        shift and go to state 246


state 156

    (170) if-statement -> IF OPEN_PAREN . expression CLOSE_PAREN M_if block
    (171) if-statement -> IF OPEN_PAREN . expression CLOSE_PAREN M_if block ELSE M_else block
    (172) if-statement -> IF OPEN_PAREN . expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad
    (39) expression -> . conditional-expression
    (40) expression -> . assignment
    (41) conditional-expression -> . conditional-or-expression
    (42) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (103) assignment -> . IDENTIFIER assignment-operator expression
    (104) assignment -> . member-access assignment-operator expression
    (105) assignment -> . element-access assignment-operator expression
    (43) conditional-or-expression -> . conditional-and-expression
    (44) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (45) conditional-and-expression -> . inclusive-or-expression
    (46) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (47) inclusive-or-expression -> . exclusive-or-expression
    (48) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (49) exclusive-or-expression -> . and-expression
    (50) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (51) and-expression -> . equality-expression
    (52) and-expression -> . and-expression BITAND equality-expression
    (53) equality-expression -> . relational-expression
    (54) equality-expression -> . equality-expression EQ relational-expression
    (55) equality-expression -> . equality-expression NE relational-expression
    (56) relational-expression -> . shift-expression
    (57) relational-expression -> . relational-expression LT shift-expression
    (58) relational-expression -> . relational-expression GT shift-expression
    (59) relational-expression -> . relational-expression LE shift-expression
    (60) relational-expression -> . relational-expression GE shift-expression
    (61) shift-expression -> . additive-expression
    (62) shift-expression -> . shift-expression LSHIFT additive-expression
    (63) shift-expression -> . shift-expression RSHIFT additive-expression
    (64) additive-expression -> . multiplicative-expression
    (65) additive-expression -> . additive-expression PLUS multiplicative-expression
    (66) additive-expression -> . additive-expression MINUS multiplicative-expression
    (67) multiplicative-expression -> . unary-expression
    (68) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (69) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (70) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (71) unary-expression -> . primary-expression
    (72) unary-expression -> . PLUS unary-expression
    (73) unary-expression -> . MINUS unary-expression
    (74) unary-expression -> . BITNOT unary-expression
    (75) unary-expression -> . BITCOMP unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . element-access
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (220) literal -> . ICONST
    (221) literal -> . DCONST
    (222) literal -> . TRUE
    (223) literal -> . FALSE
    (94) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 103
    PLUS            shift and go to state 102
    MINUS           shift and go to state 95
    BITNOT          shift and go to state 117
    BITCOMP         shift and go to state 97
    NEW             shift and go to state 93
    ICONST          shift and go to state 108
    DCONST          shift and go to state 118
    TRUE            shift and go to state 112
    FALSE           shift and go to state 110
    OPEN_PAREN      shift and go to state 99

    exclusive-or-expression        shift and go to state 89
    member-access                  shift and go to state 90
    relational-expression          shift and go to state 91
    additive-expression            shift and go to state 94
    primary-no-array-creation-expression shift and go to state 107
    inclusive-or-expression        shift and go to state 96
    unary-expression               shift and go to state 88
    element-access                 shift and go to state 98
    literal                        shift and go to state 106
    conditional-expression         shift and go to state 100
    conditional-and-expression     shift and go to state 101
    array-creation-expression      shift and go to state 92
    assignment                     shift and go to state 105
    equality-expression            shift and go to state 111
    shift-expression               shift and go to state 113
    and-expression                 shift and go to state 114
    multiplicative-expression      shift and go to state 115
    expression                     shift and go to state 247
    primary-expression             shift and go to state 119
    invocation-expression          shift and go to state 120
    conditional-or-expression      shift and go to state 121
    parenthesized-expression       shift and go to state 122

state 157

    (104) assignment -> member-access assignment-operator expression .

    DELIM           reduce using rule 104 (assignment -> member-access assignment-operator expression .)
    CLOSE_BRACKET   reduce using rule 104 (assignment -> member-access assignment-operator expression .)
    COMMA           reduce using rule 104 (assignment -> member-access assignment-operator expression .)
    CLOSE_PAREN     reduce using rule 104 (assignment -> member-access assignment-operator expression .)
    COLON           reduce using rule 104 (assignment -> member-access assignment-operator expression .)
    BLOCK_END       reduce using rule 104 (assignment -> member-access assignment-operator expression .)


state 158

    (102) element-access -> member-access OPEN_BRACKET expression . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 248


state 159

    (98) invocation-expression -> member-access OPEN_PAREN argument-list-opt . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 249


state 160

    (100) argument-list-opt -> empty .

    CLOSE_PAREN     reduce using rule 100 (argument-list-opt -> empty .)


state 161

    (99) argument-list-opt -> expression-list .
    (82) expression-list -> expression-list . COMMA expression

    CLOSE_PAREN     reduce using rule 99 (argument-list-opt -> expression-list .)
    COMMA           shift and go to state 250


state 162

    (81) expression-list -> expression .

    COMMA           reduce using rule 81 (expression-list -> expression .)
    CLOSE_PAREN     reduce using rule 81 (expression-list -> expression .)
    BLOCK_END       reduce using rule 81 (expression-list -> expression .)


state 163

    (96) member-access -> member-access DOT IDENTIFIER .

    OPEN_BRACKET    reduce using rule 96 (member-access -> member-access DOT IDENTIFIER .)
    DOT             reduce using rule 96 (member-access -> member-access DOT IDENTIFIER .)
    OPEN_PAREN      reduce using rule 96 (member-access -> member-access DOT IDENTIFIER .)
    TIMES           reduce using rule 96 (member-access -> member-access DOT IDENTIFIER .)
    DIV             reduce using rule 96 (member-access -> member-access DOT IDENTIFIER .)
    MOD             reduce using rule 96 (member-access -> member-access DOT IDENTIFIER .)
    PLUS            reduce using rule 96 (member-access -> member-access DOT IDENTIFIER .)
    MINUS           reduce using rule 96 (member-access -> member-access DOT IDENTIFIER .)
    LSHIFT          reduce using rule 96 (member-access -> member-access DOT IDENTIFIER .)
    RSHIFT          reduce using rule 96 (member-access -> member-access DOT IDENTIFIER .)
    LT              reduce using rule 96 (member-access -> member-access DOT IDENTIFIER .)
    GT              reduce using rule 96 (member-access -> member-access DOT IDENTIFIER .)
    LE              reduce using rule 96 (member-access -> member-access DOT IDENTIFIER .)
    GE              reduce using rule 96 (member-access -> member-access DOT IDENTIFIER .)
    EQ              reduce using rule 96 (member-access -> member-access DOT IDENTIFIER .)
    NE              reduce using rule 96 (member-access -> member-access DOT IDENTIFIER .)
    BITAND          reduce using rule 96 (member-access -> member-access DOT IDENTIFIER .)
    BITXOR          reduce using rule 96 (member-access -> member-access DOT IDENTIFIER .)
    BITOR           reduce using rule 96 (member-access -> member-access DOT IDENTIFIER .)
    LOGAND          reduce using rule 96 (member-access -> member-access DOT IDENTIFIER .)
    CONDOP          reduce using rule 96 (member-access -> member-access DOT IDENTIFIER .)
    LOGOR           reduce using rule 96 (member-access -> member-access DOT IDENTIFIER .)
    DELIM           reduce using rule 96 (member-access -> member-access DOT IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 96 (member-access -> member-access DOT IDENTIFIER .)
    COMMA           reduce using rule 96 (member-access -> member-access DOT IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 96 (member-access -> member-access DOT IDENTIFIER .)
    COLON           reduce using rule 96 (member-access -> member-access DOT IDENTIFIER .)
    BLOCK_END       reduce using rule 96 (member-access -> member-access DOT IDENTIFIER .)
    ASSIGN          reduce using rule 96 (member-access -> member-access DOT IDENTIFIER .)
    PLUSEQUAL       reduce using rule 96 (member-access -> member-access DOT IDENTIFIER .)
    MINUSEQUAL      reduce using rule 96 (member-access -> member-access DOT IDENTIFIER .)
    TIMESEQUAL      reduce using rule 96 (member-access -> member-access DOT IDENTIFIER .)
    DIVEQUAL        reduce using rule 96 (member-access -> member-access DOT IDENTIFIER .)
    MODEQUAL        reduce using rule 96 (member-access -> member-access DOT IDENTIFIER .)
    BITANDEQUAL     reduce using rule 96 (member-access -> member-access DOT IDENTIFIER .)
    BITOREQUAL      reduce using rule 96 (member-access -> member-access DOT IDENTIFIER .)
    BITXOREQUAL     reduce using rule 96 (member-access -> member-access DOT IDENTIFIER .)
    LSHIFTEQUAL     reduce using rule 96 (member-access -> member-access DOT IDENTIFIER .)
    RSHIFTEQUAL     reduce using rule 96 (member-access -> member-access DOT IDENTIFIER .)


state 164

    (128) method-header -> VOID IDENTIFIER OPEN_PAREN . formal-parameter-list-opt CLOSE_PAREN
    (129) formal-parameter-list-opt -> . formal-parameter-list
    (130) formal-parameter-list-opt -> . empty
    (131) formal-parameter-list -> . fixed-parameters
    (224) empty -> .
    (132) fixed-parameters -> . fixed-parameter
    (133) fixed-parameters -> . fixed-parameters COMMA fixed-parameter
    (134) fixed-parameter -> . type IDENTIFIER
    (27) type -> . simple-type
    (28) type -> . class-type
    (29) type -> . array-type
    (30) simple-type -> . BOOL
    (31) simple-type -> . INT
    (32) simple-type -> . UINT
    (33) simple-type -> . CHAR
    (34) simple-type -> . DOUBLE
    (14) class-type -> . IDENTIFIER
    (35) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET

    CLOSE_PAREN     reduce using rule 224 (empty -> .)
    BOOL            shift and go to state 47
    INT             shift and go to state 28
    UINT            shift and go to state 61
    CHAR            shift and go to state 34
    DOUBLE          shift and go to state 12
    IDENTIFIER      shift and go to state 148

    array-type                     shift and go to state 43
    fixed-parameters               shift and go to state 255
    simple-type                    shift and go to state 18
    formal-parameter-list-opt      shift and go to state 251
    class-type                     shift and go to state 64
    formal-parameter-list          shift and go to state 252
    type                           shift and go to state 253
    empty                          shift and go to state 254
    fixed-parameter                shift and go to state 256

state 165

    (209) goto-statement -> GOTO IDENTIFIER DELIM .

    IDENTIFIER      reduce using rule 209 (goto-statement -> GOTO IDENTIFIER DELIM .)
    BLOCK_BEGIN     reduce using rule 209 (goto-statement -> GOTO IDENTIFIER DELIM .)
    DELIM           reduce using rule 209 (goto-statement -> GOTO IDENTIFIER DELIM .)
    CONSOLE         reduce using rule 209 (goto-statement -> GOTO IDENTIFIER DELIM .)
    CONST           reduce using rule 209 (goto-statement -> GOTO IDENTIFIER DELIM .)
    IF              reduce using rule 209 (goto-statement -> GOTO IDENTIFIER DELIM .)
    SWITCH          reduce using rule 209 (goto-statement -> GOTO IDENTIFIER DELIM .)
    WHILE           reduce using rule 209 (goto-statement -> GOTO IDENTIFIER DELIM .)
    FOR             reduce using rule 209 (goto-statement -> GOTO IDENTIFIER DELIM .)
    DO              reduce using rule 209 (goto-statement -> GOTO IDENTIFIER DELIM .)
    BREAK           reduce using rule 209 (goto-statement -> GOTO IDENTIFIER DELIM .)
    CONTINUE        reduce using rule 209 (goto-statement -> GOTO IDENTIFIER DELIM .)
    GOTO            reduce using rule 209 (goto-statement -> GOTO IDENTIFIER DELIM .)
    RETURN          reduce using rule 209 (goto-statement -> GOTO IDENTIFIER DELIM .)
    VOID            reduce using rule 209 (goto-statement -> GOTO IDENTIFIER DELIM .)
    PUBLIC          reduce using rule 209 (goto-statement -> GOTO IDENTIFIER DELIM .)
    PRIVATE         reduce using rule 209 (goto-statement -> GOTO IDENTIFIER DELIM .)
    BOOL            reduce using rule 209 (goto-statement -> GOTO IDENTIFIER DELIM .)
    INT             reduce using rule 209 (goto-statement -> GOTO IDENTIFIER DELIM .)
    UINT            reduce using rule 209 (goto-statement -> GOTO IDENTIFIER DELIM .)
    CHAR            reduce using rule 209 (goto-statement -> GOTO IDENTIFIER DELIM .)
    DOUBLE          reduce using rule 209 (goto-statement -> GOTO IDENTIFIER DELIM .)
    $end            reduce using rule 209 (goto-statement -> GOTO IDENTIFIER DELIM .)
    CASE            reduce using rule 209 (goto-statement -> GOTO IDENTIFIER DELIM .)
    DEFAULT         reduce using rule 209 (goto-statement -> GOTO IDENTIFIER DELIM .)
    BLOCK_END       reduce using rule 209 (goto-statement -> GOTO IDENTIFIER DELIM .)


state 166

    (9) class-declaration -> class-header class-body semi-opt .

    CLASS           reduce using rule 9 (class-declaration -> class-header class-body semi-opt .)
    $end            reduce using rule 9 (class-declaration -> class-header class-body semi-opt .)


state 167

    (3) semi-opt -> DELIM .

    CLASS           reduce using rule 3 (semi-opt -> DELIM .)
    $end            reduce using rule 3 (semi-opt -> DELIM .)


state 168

    (4) semi-opt -> empty .

    CLASS           reduce using rule 4 (semi-opt -> empty .)
    $end            reduce using rule 4 (semi-opt -> empty .)


state 169

    (26) constant-declaration -> CONST . simple-type constant-declarators DELIM
    (30) simple-type -> . BOOL
    (31) simple-type -> . INT
    (32) simple-type -> . UINT
    (33) simple-type -> . CHAR
    (34) simple-type -> . DOUBLE

    BOOL            shift and go to state 47
    INT             shift and go to state 28
    UINT            shift and go to state 61
    CHAR            shift and go to state 34
    DOUBLE          shift and go to state 12

    simple-type                    shift and go to state 257

state 170

    (217) destructor-declaration -> BITCOMP . IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body

    IDENTIFIER      shift and go to state 258


state 171

    (22) class-member-declaration -> method-declaration .

    CONST           reduce using rule 22 (class-member-declaration -> method-declaration .)
    BITCOMP         reduce using rule 22 (class-member-declaration -> method-declaration .)
    PUBLIC          reduce using rule 22 (class-member-declaration -> method-declaration .)
    PRIVATE         reduce using rule 22 (class-member-declaration -> method-declaration .)
    VOID            reduce using rule 22 (class-member-declaration -> method-declaration .)
    IDENTIFIER      reduce using rule 22 (class-member-declaration -> method-declaration .)
    BOOL            reduce using rule 22 (class-member-declaration -> method-declaration .)
    INT             reduce using rule 22 (class-member-declaration -> method-declaration .)
    UINT            reduce using rule 22 (class-member-declaration -> method-declaration .)
    CHAR            reduce using rule 22 (class-member-declaration -> method-declaration .)
    DOUBLE          reduce using rule 22 (class-member-declaration -> method-declaration .)
    BLOCK_END       reduce using rule 22 (class-member-declaration -> method-declaration .)


state 172

    (21) class-member-declaration -> field-declaration .

    CONST           reduce using rule 21 (class-member-declaration -> field-declaration .)
    BITCOMP         reduce using rule 21 (class-member-declaration -> field-declaration .)
    PUBLIC          reduce using rule 21 (class-member-declaration -> field-declaration .)
    PRIVATE         reduce using rule 21 (class-member-declaration -> field-declaration .)
    VOID            reduce using rule 21 (class-member-declaration -> field-declaration .)
    IDENTIFIER      reduce using rule 21 (class-member-declaration -> field-declaration .)
    BOOL            reduce using rule 21 (class-member-declaration -> field-declaration .)
    INT             reduce using rule 21 (class-member-declaration -> field-declaration .)
    UINT            reduce using rule 21 (class-member-declaration -> field-declaration .)
    CHAR            reduce using rule 21 (class-member-declaration -> field-declaration .)
    DOUBLE          reduce using rule 21 (class-member-declaration -> field-declaration .)
    BLOCK_END       reduce using rule 21 (class-member-declaration -> field-declaration .)


state 173

    (20) class-member-declaration -> constant-declaration .

    CONST           reduce using rule 20 (class-member-declaration -> constant-declaration .)
    BITCOMP         reduce using rule 20 (class-member-declaration -> constant-declaration .)
    PUBLIC          reduce using rule 20 (class-member-declaration -> constant-declaration .)
    PRIVATE         reduce using rule 20 (class-member-declaration -> constant-declaration .)
    VOID            reduce using rule 20 (class-member-declaration -> constant-declaration .)
    IDENTIFIER      reduce using rule 20 (class-member-declaration -> constant-declaration .)
    BOOL            reduce using rule 20 (class-member-declaration -> constant-declaration .)
    INT             reduce using rule 20 (class-member-declaration -> constant-declaration .)
    UINT            reduce using rule 20 (class-member-declaration -> constant-declaration .)
    CHAR            reduce using rule 20 (class-member-declaration -> constant-declaration .)
    DOUBLE          reduce using rule 20 (class-member-declaration -> constant-declaration .)
    BLOCK_END       reduce using rule 20 (class-member-declaration -> constant-declaration .)


state 174

    (117) field-declaration -> type . variable-declarators DELIM
    (127) method-header -> type . IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (120) variable-declarators -> . variable-declarator
    (121) variable-declarators -> . variable-declarators COMMA variable-declarator
    (122) variable-declarator -> . IDENTIFIER
    (123) variable-declarator -> . IDENTIFIER ASSIGN variable-initializer

    IDENTIFIER      shift and go to state 143

    variable-declarator            shift and go to state 141
    variable-declarators           shift and go to state 259

state 175

    (17) class-member-declarations-opt -> empty .

    BLOCK_END       reduce using rule 17 (class-member-declarations-opt -> empty .)


state 176

    (15) class-body -> BLOCK_BEGIN class-member-declarations-opt . BLOCK_END

    BLOCK_END       shift and go to state 260


state 177

    (23) class-member-declaration -> constructor-declaration .

    CONST           reduce using rule 23 (class-member-declaration -> constructor-declaration .)
    BITCOMP         reduce using rule 23 (class-member-declaration -> constructor-declaration .)
    PUBLIC          reduce using rule 23 (class-member-declaration -> constructor-declaration .)
    PRIVATE         reduce using rule 23 (class-member-declaration -> constructor-declaration .)
    VOID            reduce using rule 23 (class-member-declaration -> constructor-declaration .)
    IDENTIFIER      reduce using rule 23 (class-member-declaration -> constructor-declaration .)
    BOOL            reduce using rule 23 (class-member-declaration -> constructor-declaration .)
    INT             reduce using rule 23 (class-member-declaration -> constructor-declaration .)
    UINT            reduce using rule 23 (class-member-declaration -> constructor-declaration .)
    CHAR            reduce using rule 23 (class-member-declaration -> constructor-declaration .)
    DOUBLE          reduce using rule 23 (class-member-declaration -> constructor-declaration .)
    BLOCK_END       reduce using rule 23 (class-member-declaration -> constructor-declaration .)


state 178

    (16) class-member-declarations-opt -> class-member-declarations .
    (19) class-member-declarations -> class-member-declarations . class-member-declaration
    (20) class-member-declaration -> . constant-declaration
    (21) class-member-declaration -> . field-declaration
    (22) class-member-declaration -> . method-declaration
    (23) class-member-declaration -> . constructor-declaration
    (24) class-member-declaration -> . destructor-declaration
    (25) constant-declaration -> . modifier CONST simple-type constant-declarators DELIM
    (26) constant-declaration -> . CONST simple-type constant-declarators DELIM
    (117) field-declaration -> . type variable-declarators DELIM
    (124) method-declaration -> . method-header method-body
    (213) constructor-declaration -> . constructor-declarator constructor-body
    (217) destructor-declaration -> . BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body
    (118) modifier -> . PUBLIC
    (119) modifier -> . PRIVATE
    (27) type -> . simple-type
    (28) type -> . class-type
    (29) type -> . array-type
    (125) method-header -> . modifier type IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (126) method-header -> . modifier VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (127) method-header -> . type IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (128) method-header -> . VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (214) constructor-declarator -> . IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (30) simple-type -> . BOOL
    (31) simple-type -> . INT
    (32) simple-type -> . UINT
    (33) simple-type -> . CHAR
    (34) simple-type -> . DOUBLE
    (14) class-type -> . IDENTIFIER
    (35) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET

    BLOCK_END       reduce using rule 16 (class-member-declarations-opt -> class-member-declarations .)
    CONST           shift and go to state 169
    BITCOMP         shift and go to state 170
    PUBLIC          shift and go to state 62
    PRIVATE         shift and go to state 55
    VOID            shift and go to state 7
    IDENTIFIER      shift and go to state 179
    BOOL            shift and go to state 47
    INT             shift and go to state 28
    UINT            shift and go to state 61
    CHAR            shift and go to state 34
    DOUBLE          shift and go to state 12

    array-type                     shift and go to state 43
    modifier                       shift and go to state 183
    method-header                  shift and go to state 17
    constructor-declaration        shift and go to state 177
    type                           shift and go to state 174
    constructor-declarator         shift and go to state 181
    method-declaration             shift and go to state 171
    class-member-declaration       shift and go to state 261
    field-declaration              shift and go to state 172
    class-type                     shift and go to state 64
    simple-type                    shift and go to state 18
    constant-declaration           shift and go to state 173
    destructor-declaration         shift and go to state 180

state 179

    (214) constructor-declarator -> IDENTIFIER . OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (14) class-type -> IDENTIFIER .

    OPEN_PAREN      shift and go to state 262
    IDENTIFIER      reduce using rule 14 (class-type -> IDENTIFIER .)


state 180

    (24) class-member-declaration -> destructor-declaration .

    CONST           reduce using rule 24 (class-member-declaration -> destructor-declaration .)
    BITCOMP         reduce using rule 24 (class-member-declaration -> destructor-declaration .)
    PUBLIC          reduce using rule 24 (class-member-declaration -> destructor-declaration .)
    PRIVATE         reduce using rule 24 (class-member-declaration -> destructor-declaration .)
    VOID            reduce using rule 24 (class-member-declaration -> destructor-declaration .)
    IDENTIFIER      reduce using rule 24 (class-member-declaration -> destructor-declaration .)
    BOOL            reduce using rule 24 (class-member-declaration -> destructor-declaration .)
    INT             reduce using rule 24 (class-member-declaration -> destructor-declaration .)
    UINT            reduce using rule 24 (class-member-declaration -> destructor-declaration .)
    CHAR            reduce using rule 24 (class-member-declaration -> destructor-declaration .)
    DOUBLE          reduce using rule 24 (class-member-declaration -> destructor-declaration .)
    BLOCK_END       reduce using rule 24 (class-member-declaration -> destructor-declaration .)


state 181

    (213) constructor-declaration -> constructor-declarator . constructor-body
    (215) constructor-body -> . block
    (216) constructor-body -> . DELIM
    (138) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END

    DELIM           shift and go to state 264
    BLOCK_BEGIN     shift and go to state 54

    constructor-body               shift and go to state 263
    block                          shift and go to state 265

state 182

    (18) class-member-declarations -> class-member-declaration .

    CONST           reduce using rule 18 (class-member-declarations -> class-member-declaration .)
    BITCOMP         reduce using rule 18 (class-member-declarations -> class-member-declaration .)
    PUBLIC          reduce using rule 18 (class-member-declarations -> class-member-declaration .)
    PRIVATE         reduce using rule 18 (class-member-declarations -> class-member-declaration .)
    VOID            reduce using rule 18 (class-member-declarations -> class-member-declaration .)
    IDENTIFIER      reduce using rule 18 (class-member-declarations -> class-member-declaration .)
    BOOL            reduce using rule 18 (class-member-declarations -> class-member-declaration .)
    INT             reduce using rule 18 (class-member-declarations -> class-member-declaration .)
    UINT            reduce using rule 18 (class-member-declarations -> class-member-declaration .)
    CHAR            reduce using rule 18 (class-member-declarations -> class-member-declaration .)
    DOUBLE          reduce using rule 18 (class-member-declarations -> class-member-declaration .)
    BLOCK_END       reduce using rule 18 (class-member-declarations -> class-member-declaration .)


state 183

    (25) constant-declaration -> modifier . CONST simple-type constant-declarators DELIM
    (125) method-header -> modifier . type IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (126) method-header -> modifier . VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (27) type -> . simple-type
    (28) type -> . class-type
    (29) type -> . array-type
    (30) simple-type -> . BOOL
    (31) simple-type -> . INT
    (32) simple-type -> . UINT
    (33) simple-type -> . CHAR
    (34) simple-type -> . DOUBLE
    (14) class-type -> . IDENTIFIER
    (35) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET

    CONST           shift and go to state 266
    VOID            shift and go to state 147
    BOOL            shift and go to state 47
    INT             shift and go to state 28
    UINT            shift and go to state 61
    CHAR            shift and go to state 34
    DOUBLE          shift and go to state 12
    IDENTIFIER      shift and go to state 148

    array-type                     shift and go to state 43
    simple-type                    shift and go to state 18
    class-type                     shift and go to state 64
    type                           shift and go to state 149

state 184

    (50) exclusive-or-expression -> exclusive-or-expression BITXOR . and-expression
    (51) and-expression -> . equality-expression
    (52) and-expression -> . and-expression BITAND equality-expression
    (53) equality-expression -> . relational-expression
    (54) equality-expression -> . equality-expression EQ relational-expression
    (55) equality-expression -> . equality-expression NE relational-expression
    (56) relational-expression -> . shift-expression
    (57) relational-expression -> . relational-expression LT shift-expression
    (58) relational-expression -> . relational-expression GT shift-expression
    (59) relational-expression -> . relational-expression LE shift-expression
    (60) relational-expression -> . relational-expression GE shift-expression
    (61) shift-expression -> . additive-expression
    (62) shift-expression -> . shift-expression LSHIFT additive-expression
    (63) shift-expression -> . shift-expression RSHIFT additive-expression
    (64) additive-expression -> . multiplicative-expression
    (65) additive-expression -> . additive-expression PLUS multiplicative-expression
    (66) additive-expression -> . additive-expression MINUS multiplicative-expression
    (67) multiplicative-expression -> . unary-expression
    (68) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (69) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (70) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (71) unary-expression -> . primary-expression
    (72) unary-expression -> . PLUS unary-expression
    (73) unary-expression -> . MINUS unary-expression
    (74) unary-expression -> . BITNOT unary-expression
    (75) unary-expression -> . BITCOMP unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . element-access
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (220) literal -> . ICONST
    (221) literal -> . DCONST
    (222) literal -> . TRUE
    (223) literal -> . FALSE
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (94) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 102
    MINUS           shift and go to state 95
    BITNOT          shift and go to state 117
    BITCOMP         shift and go to state 97
    NEW             shift and go to state 93
    IDENTIFIER      shift and go to state 195
    ICONST          shift and go to state 108
    DCONST          shift and go to state 118
    TRUE            shift and go to state 112
    FALSE           shift and go to state 110
    OPEN_PAREN      shift and go to state 99

    array-creation-expression      shift and go to state 92
    and-expression                 shift and go to state 267
    multiplicative-expression      shift and go to state 115
    equality-expression            shift and go to state 111
    unary-expression               shift and go to state 88
    relational-expression          shift and go to state 91
    element-access                 shift and go to state 194
    literal                        shift and go to state 106
    primary-no-array-creation-expression shift and go to state 107
    primary-expression             shift and go to state 119
    invocation-expression          shift and go to state 120
    additive-expression            shift and go to state 94
    parenthesized-expression       shift and go to state 122
    member-access                  shift and go to state 192
    shift-expression               shift and go to state 113

state 185

    (59) relational-expression -> relational-expression LE . shift-expression
    (61) shift-expression -> . additive-expression
    (62) shift-expression -> . shift-expression LSHIFT additive-expression
    (63) shift-expression -> . shift-expression RSHIFT additive-expression
    (64) additive-expression -> . multiplicative-expression
    (65) additive-expression -> . additive-expression PLUS multiplicative-expression
    (66) additive-expression -> . additive-expression MINUS multiplicative-expression
    (67) multiplicative-expression -> . unary-expression
    (68) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (69) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (70) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (71) unary-expression -> . primary-expression
    (72) unary-expression -> . PLUS unary-expression
    (73) unary-expression -> . MINUS unary-expression
    (74) unary-expression -> . BITNOT unary-expression
    (75) unary-expression -> . BITCOMP unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . element-access
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (220) literal -> . ICONST
    (221) literal -> . DCONST
    (222) literal -> . TRUE
    (223) literal -> . FALSE
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (94) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 102
    MINUS           shift and go to state 95
    BITNOT          shift and go to state 117
    BITCOMP         shift and go to state 97
    NEW             shift and go to state 93
    IDENTIFIER      shift and go to state 195
    ICONST          shift and go to state 108
    DCONST          shift and go to state 118
    TRUE            shift and go to state 112
    FALSE           shift and go to state 110
    OPEN_PAREN      shift and go to state 99

    array-creation-expression      shift and go to state 92
    multiplicative-expression      shift and go to state 115
    member-access                  shift and go to state 192
    unary-expression               shift and go to state 88
    element-access                 shift and go to state 194
    literal                        shift and go to state 106
    primary-no-array-creation-expression shift and go to state 107
    primary-expression             shift and go to state 119
    invocation-expression          shift and go to state 120
    additive-expression            shift and go to state 94
    parenthesized-expression       shift and go to state 122
    shift-expression               shift and go to state 268

state 186

    (60) relational-expression -> relational-expression GE . shift-expression
    (61) shift-expression -> . additive-expression
    (62) shift-expression -> . shift-expression LSHIFT additive-expression
    (63) shift-expression -> . shift-expression RSHIFT additive-expression
    (64) additive-expression -> . multiplicative-expression
    (65) additive-expression -> . additive-expression PLUS multiplicative-expression
    (66) additive-expression -> . additive-expression MINUS multiplicative-expression
    (67) multiplicative-expression -> . unary-expression
    (68) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (69) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (70) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (71) unary-expression -> . primary-expression
    (72) unary-expression -> . PLUS unary-expression
    (73) unary-expression -> . MINUS unary-expression
    (74) unary-expression -> . BITNOT unary-expression
    (75) unary-expression -> . BITCOMP unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . element-access
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (220) literal -> . ICONST
    (221) literal -> . DCONST
    (222) literal -> . TRUE
    (223) literal -> . FALSE
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (94) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 102
    MINUS           shift and go to state 95
    BITNOT          shift and go to state 117
    BITCOMP         shift and go to state 97
    NEW             shift and go to state 93
    IDENTIFIER      shift and go to state 195
    ICONST          shift and go to state 108
    DCONST          shift and go to state 118
    TRUE            shift and go to state 112
    FALSE           shift and go to state 110
    OPEN_PAREN      shift and go to state 99

    array-creation-expression      shift and go to state 92
    multiplicative-expression      shift and go to state 115
    member-access                  shift and go to state 192
    unary-expression               shift and go to state 88
    element-access                 shift and go to state 194
    literal                        shift and go to state 106
    primary-no-array-creation-expression shift and go to state 107
    primary-expression             shift and go to state 119
    invocation-expression          shift and go to state 120
    additive-expression            shift and go to state 94
    parenthesized-expression       shift and go to state 122
    shift-expression               shift and go to state 269

state 187

    (57) relational-expression -> relational-expression LT . shift-expression
    (61) shift-expression -> . additive-expression
    (62) shift-expression -> . shift-expression LSHIFT additive-expression
    (63) shift-expression -> . shift-expression RSHIFT additive-expression
    (64) additive-expression -> . multiplicative-expression
    (65) additive-expression -> . additive-expression PLUS multiplicative-expression
    (66) additive-expression -> . additive-expression MINUS multiplicative-expression
    (67) multiplicative-expression -> . unary-expression
    (68) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (69) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (70) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (71) unary-expression -> . primary-expression
    (72) unary-expression -> . PLUS unary-expression
    (73) unary-expression -> . MINUS unary-expression
    (74) unary-expression -> . BITNOT unary-expression
    (75) unary-expression -> . BITCOMP unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . element-access
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (220) literal -> . ICONST
    (221) literal -> . DCONST
    (222) literal -> . TRUE
    (223) literal -> . FALSE
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (94) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 102
    MINUS           shift and go to state 95
    BITNOT          shift and go to state 117
    BITCOMP         shift and go to state 97
    NEW             shift and go to state 93
    IDENTIFIER      shift and go to state 195
    ICONST          shift and go to state 108
    DCONST          shift and go to state 118
    TRUE            shift and go to state 112
    FALSE           shift and go to state 110
    OPEN_PAREN      shift and go to state 99

    array-creation-expression      shift and go to state 92
    multiplicative-expression      shift and go to state 115
    member-access                  shift and go to state 192
    unary-expression               shift and go to state 88
    element-access                 shift and go to state 194
    literal                        shift and go to state 106
    primary-no-array-creation-expression shift and go to state 107
    primary-expression             shift and go to state 119
    invocation-expression          shift and go to state 120
    additive-expression            shift and go to state 94
    parenthesized-expression       shift and go to state 122
    shift-expression               shift and go to state 270

state 188

    (58) relational-expression -> relational-expression GT . shift-expression
    (61) shift-expression -> . additive-expression
    (62) shift-expression -> . shift-expression LSHIFT additive-expression
    (63) shift-expression -> . shift-expression RSHIFT additive-expression
    (64) additive-expression -> . multiplicative-expression
    (65) additive-expression -> . additive-expression PLUS multiplicative-expression
    (66) additive-expression -> . additive-expression MINUS multiplicative-expression
    (67) multiplicative-expression -> . unary-expression
    (68) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (69) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (70) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (71) unary-expression -> . primary-expression
    (72) unary-expression -> . PLUS unary-expression
    (73) unary-expression -> . MINUS unary-expression
    (74) unary-expression -> . BITNOT unary-expression
    (75) unary-expression -> . BITCOMP unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . element-access
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (220) literal -> . ICONST
    (221) literal -> . DCONST
    (222) literal -> . TRUE
    (223) literal -> . FALSE
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (94) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 102
    MINUS           shift and go to state 95
    BITNOT          shift and go to state 117
    BITCOMP         shift and go to state 97
    NEW             shift and go to state 93
    IDENTIFIER      shift and go to state 195
    ICONST          shift and go to state 108
    DCONST          shift and go to state 118
    TRUE            shift and go to state 112
    FALSE           shift and go to state 110
    OPEN_PAREN      shift and go to state 99

    array-creation-expression      shift and go to state 92
    multiplicative-expression      shift and go to state 115
    member-access                  shift and go to state 192
    unary-expression               shift and go to state 88
    element-access                 shift and go to state 194
    literal                        shift and go to state 106
    primary-no-array-creation-expression shift and go to state 107
    primary-expression             shift and go to state 119
    invocation-expression          shift and go to state 120
    additive-expression            shift and go to state 94
    parenthesized-expression       shift and go to state 122
    shift-expression               shift and go to state 271

state 189

    (78) array-creation-expression -> NEW simple-type . OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt

    OPEN_BRACKET    shift and go to state 272


state 190

    (65) additive-expression -> additive-expression PLUS . multiplicative-expression
    (67) multiplicative-expression -> . unary-expression
    (68) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (69) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (70) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (71) unary-expression -> . primary-expression
    (72) unary-expression -> . PLUS unary-expression
    (73) unary-expression -> . MINUS unary-expression
    (74) unary-expression -> . BITNOT unary-expression
    (75) unary-expression -> . BITCOMP unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . element-access
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (220) literal -> . ICONST
    (221) literal -> . DCONST
    (222) literal -> . TRUE
    (223) literal -> . FALSE
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (94) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 102
    MINUS           shift and go to state 95
    BITNOT          shift and go to state 117
    BITCOMP         shift and go to state 97
    NEW             shift and go to state 93
    IDENTIFIER      shift and go to state 195
    ICONST          shift and go to state 108
    DCONST          shift and go to state 118
    TRUE            shift and go to state 112
    FALSE           shift and go to state 110
    OPEN_PAREN      shift and go to state 99

    array-creation-expression      shift and go to state 92
    multiplicative-expression      shift and go to state 273
    member-access                  shift and go to state 192
    unary-expression               shift and go to state 88
    element-access                 shift and go to state 194
    literal                        shift and go to state 106
    primary-no-array-creation-expression shift and go to state 107
    primary-expression             shift and go to state 119
    invocation-expression          shift and go to state 120
    parenthesized-expression       shift and go to state 122

state 191

    (66) additive-expression -> additive-expression MINUS . multiplicative-expression
    (67) multiplicative-expression -> . unary-expression
    (68) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (69) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (70) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (71) unary-expression -> . primary-expression
    (72) unary-expression -> . PLUS unary-expression
    (73) unary-expression -> . MINUS unary-expression
    (74) unary-expression -> . BITNOT unary-expression
    (75) unary-expression -> . BITCOMP unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . element-access
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (220) literal -> . ICONST
    (221) literal -> . DCONST
    (222) literal -> . TRUE
    (223) literal -> . FALSE
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (94) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 102
    MINUS           shift and go to state 95
    BITNOT          shift and go to state 117
    BITCOMP         shift and go to state 97
    NEW             shift and go to state 93
    IDENTIFIER      shift and go to state 195
    ICONST          shift and go to state 108
    DCONST          shift and go to state 118
    TRUE            shift and go to state 112
    FALSE           shift and go to state 110
    OPEN_PAREN      shift and go to state 99

    array-creation-expression      shift and go to state 92
    multiplicative-expression      shift and go to state 274
    member-access                  shift and go to state 192
    unary-expression               shift and go to state 88
    element-access                 shift and go to state 194
    literal                        shift and go to state 106
    primary-no-array-creation-expression shift and go to state 107
    primary-expression             shift and go to state 119
    invocation-expression          shift and go to state 120
    parenthesized-expression       shift and go to state 122

state 192

    (92) primary-no-array-creation-expression -> member-access .
    (102) element-access -> member-access . OPEN_BRACKET expression CLOSE_BRACKET
    (96) member-access -> member-access . DOT IDENTIFIER
    (98) invocation-expression -> member-access . OPEN_PAREN argument-list-opt CLOSE_PAREN

    TIMES           reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    DIV             reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    MOD             reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    PLUS            reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    MINUS           reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    LSHIFT          reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    RSHIFT          reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    LT              reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    GT              reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    LE              reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    GE              reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    EQ              reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    NE              reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    BITAND          reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    BITXOR          reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    BITOR           reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    LOGAND          reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    CONDOP          reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    LOGOR           reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    DELIM           reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    CLOSE_BRACKET   reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    COMMA           reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    CLOSE_PAREN     reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    COLON           reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    BLOCK_END       reduce using rule 92 (primary-no-array-creation-expression -> member-access .)
    OPEN_BRACKET    shift and go to state 70
    DOT             shift and go to state 75
    OPEN_PAREN      shift and go to state 74


state 193

    (73) unary-expression -> MINUS unary-expression .

    TIMES           reduce using rule 73 (unary-expression -> MINUS unary-expression .)
    DIV             reduce using rule 73 (unary-expression -> MINUS unary-expression .)
    MOD             reduce using rule 73 (unary-expression -> MINUS unary-expression .)
    PLUS            reduce using rule 73 (unary-expression -> MINUS unary-expression .)
    MINUS           reduce using rule 73 (unary-expression -> MINUS unary-expression .)
    LSHIFT          reduce using rule 73 (unary-expression -> MINUS unary-expression .)
    RSHIFT          reduce using rule 73 (unary-expression -> MINUS unary-expression .)
    LT              reduce using rule 73 (unary-expression -> MINUS unary-expression .)
    GT              reduce using rule 73 (unary-expression -> MINUS unary-expression .)
    LE              reduce using rule 73 (unary-expression -> MINUS unary-expression .)
    GE              reduce using rule 73 (unary-expression -> MINUS unary-expression .)
    EQ              reduce using rule 73 (unary-expression -> MINUS unary-expression .)
    NE              reduce using rule 73 (unary-expression -> MINUS unary-expression .)
    BITAND          reduce using rule 73 (unary-expression -> MINUS unary-expression .)
    BITXOR          reduce using rule 73 (unary-expression -> MINUS unary-expression .)
    BITOR           reduce using rule 73 (unary-expression -> MINUS unary-expression .)
    LOGAND          reduce using rule 73 (unary-expression -> MINUS unary-expression .)
    CONDOP          reduce using rule 73 (unary-expression -> MINUS unary-expression .)
    LOGOR           reduce using rule 73 (unary-expression -> MINUS unary-expression .)
    DELIM           reduce using rule 73 (unary-expression -> MINUS unary-expression .)
    CLOSE_BRACKET   reduce using rule 73 (unary-expression -> MINUS unary-expression .)
    COMMA           reduce using rule 73 (unary-expression -> MINUS unary-expression .)
    CLOSE_PAREN     reduce using rule 73 (unary-expression -> MINUS unary-expression .)
    COLON           reduce using rule 73 (unary-expression -> MINUS unary-expression .)
    BLOCK_END       reduce using rule 73 (unary-expression -> MINUS unary-expression .)


state 194

    (90) primary-no-array-creation-expression -> element-access .

    TIMES           reduce using rule 90 (primary-no-array-creation-expression -> element-access .)
    DIV             reduce using rule 90 (primary-no-array-creation-expression -> element-access .)
    MOD             reduce using rule 90 (primary-no-array-creation-expression -> element-access .)
    PLUS            reduce using rule 90 (primary-no-array-creation-expression -> element-access .)
    MINUS           reduce using rule 90 (primary-no-array-creation-expression -> element-access .)
    LSHIFT          reduce using rule 90 (primary-no-array-creation-expression -> element-access .)
    RSHIFT          reduce using rule 90 (primary-no-array-creation-expression -> element-access .)
    LT              reduce using rule 90 (primary-no-array-creation-expression -> element-access .)
    GT              reduce using rule 90 (primary-no-array-creation-expression -> element-access .)
    LE              reduce using rule 90 (primary-no-array-creation-expression -> element-access .)
    GE              reduce using rule 90 (primary-no-array-creation-expression -> element-access .)
    EQ              reduce using rule 90 (primary-no-array-creation-expression -> element-access .)
    NE              reduce using rule 90 (primary-no-array-creation-expression -> element-access .)
    BITAND          reduce using rule 90 (primary-no-array-creation-expression -> element-access .)
    BITXOR          reduce using rule 90 (primary-no-array-creation-expression -> element-access .)
    BITOR           reduce using rule 90 (primary-no-array-creation-expression -> element-access .)
    LOGAND          reduce using rule 90 (primary-no-array-creation-expression -> element-access .)
    CONDOP          reduce using rule 90 (primary-no-array-creation-expression -> element-access .)
    LOGOR           reduce using rule 90 (primary-no-array-creation-expression -> element-access .)
    DELIM           reduce using rule 90 (primary-no-array-creation-expression -> element-access .)
    CLOSE_BRACKET   reduce using rule 90 (primary-no-array-creation-expression -> element-access .)
    COMMA           reduce using rule 90 (primary-no-array-creation-expression -> element-access .)
    CLOSE_PAREN     reduce using rule 90 (primary-no-array-creation-expression -> element-access .)
    COLON           reduce using rule 90 (primary-no-array-creation-expression -> element-access .)
    BLOCK_END       reduce using rule 90 (primary-no-array-creation-expression -> element-access .)


state 195

    (89) primary-no-array-creation-expression -> IDENTIFIER .
    (101) element-access -> IDENTIFIER . OPEN_BRACKET expression CLOSE_BRACKET
    (95) member-access -> IDENTIFIER . DOT IDENTIFIER
    (97) invocation-expression -> IDENTIFIER . OPEN_PAREN argument-list-opt CLOSE_PAREN

    TIMES           reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    DIV             reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    MOD             reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    PLUS            reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    MINUS           reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    LSHIFT          reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    RSHIFT          reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    LT              reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    GT              reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    LE              reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    GE              reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    EQ              reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    NE              reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    BITAND          reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    BITXOR          reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    BITOR           reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    LOGAND          reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    CONDOP          reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    LOGOR           reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    DELIM           reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    COMMA           reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    COLON           reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    BLOCK_END       reduce using rule 89 (primary-no-array-creation-expression -> IDENTIFIER .)
    OPEN_BRACKET    shift and go to state 137
    DOT             shift and go to state 136
    OPEN_PAREN      shift and go to state 138


state 196

    (48) inclusive-or-expression -> inclusive-or-expression BITOR . exclusive-or-expression
    (49) exclusive-or-expression -> . and-expression
    (50) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (51) and-expression -> . equality-expression
    (52) and-expression -> . and-expression BITAND equality-expression
    (53) equality-expression -> . relational-expression
    (54) equality-expression -> . equality-expression EQ relational-expression
    (55) equality-expression -> . equality-expression NE relational-expression
    (56) relational-expression -> . shift-expression
    (57) relational-expression -> . relational-expression LT shift-expression
    (58) relational-expression -> . relational-expression GT shift-expression
    (59) relational-expression -> . relational-expression LE shift-expression
    (60) relational-expression -> . relational-expression GE shift-expression
    (61) shift-expression -> . additive-expression
    (62) shift-expression -> . shift-expression LSHIFT additive-expression
    (63) shift-expression -> . shift-expression RSHIFT additive-expression
    (64) additive-expression -> . multiplicative-expression
    (65) additive-expression -> . additive-expression PLUS multiplicative-expression
    (66) additive-expression -> . additive-expression MINUS multiplicative-expression
    (67) multiplicative-expression -> . unary-expression
    (68) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (69) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (70) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (71) unary-expression -> . primary-expression
    (72) unary-expression -> . PLUS unary-expression
    (73) unary-expression -> . MINUS unary-expression
    (74) unary-expression -> . BITNOT unary-expression
    (75) unary-expression -> . BITCOMP unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . element-access
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (220) literal -> . ICONST
    (221) literal -> . DCONST
    (222) literal -> . TRUE
    (223) literal -> . FALSE
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (94) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 102
    MINUS           shift and go to state 95
    BITNOT          shift and go to state 117
    BITCOMP         shift and go to state 97
    NEW             shift and go to state 93
    IDENTIFIER      shift and go to state 195
    ICONST          shift and go to state 108
    DCONST          shift and go to state 118
    TRUE            shift and go to state 112
    FALSE           shift and go to state 110
    OPEN_PAREN      shift and go to state 99

    array-creation-expression      shift and go to state 92
    and-expression                 shift and go to state 114
    element-access                 shift and go to state 194
    additive-expression            shift and go to state 94
    exclusive-or-expression        shift and go to state 275
    unary-expression               shift and go to state 88
    relational-expression          shift and go to state 91
    multiplicative-expression      shift and go to state 115
    literal                        shift and go to state 106
    primary-no-array-creation-expression shift and go to state 107
    primary-expression             shift and go to state 119
    invocation-expression          shift and go to state 120
    equality-expression            shift and go to state 111
    parenthesized-expression       shift and go to state 122
    member-access                  shift and go to state 192
    shift-expression               shift and go to state 113

state 197

    (75) unary-expression -> BITCOMP unary-expression .

    TIMES           reduce using rule 75 (unary-expression -> BITCOMP unary-expression .)
    DIV             reduce using rule 75 (unary-expression -> BITCOMP unary-expression .)
    MOD             reduce using rule 75 (unary-expression -> BITCOMP unary-expression .)
    PLUS            reduce using rule 75 (unary-expression -> BITCOMP unary-expression .)
    MINUS           reduce using rule 75 (unary-expression -> BITCOMP unary-expression .)
    LSHIFT          reduce using rule 75 (unary-expression -> BITCOMP unary-expression .)
    RSHIFT          reduce using rule 75 (unary-expression -> BITCOMP unary-expression .)
    LT              reduce using rule 75 (unary-expression -> BITCOMP unary-expression .)
    GT              reduce using rule 75 (unary-expression -> BITCOMP unary-expression .)
    LE              reduce using rule 75 (unary-expression -> BITCOMP unary-expression .)
    GE              reduce using rule 75 (unary-expression -> BITCOMP unary-expression .)
    EQ              reduce using rule 75 (unary-expression -> BITCOMP unary-expression .)
    NE              reduce using rule 75 (unary-expression -> BITCOMP unary-expression .)
    BITAND          reduce using rule 75 (unary-expression -> BITCOMP unary-expression .)
    BITXOR          reduce using rule 75 (unary-expression -> BITCOMP unary-expression .)
    BITOR           reduce using rule 75 (unary-expression -> BITCOMP unary-expression .)
    LOGAND          reduce using rule 75 (unary-expression -> BITCOMP unary-expression .)
    CONDOP          reduce using rule 75 (unary-expression -> BITCOMP unary-expression .)
    LOGOR           reduce using rule 75 (unary-expression -> BITCOMP unary-expression .)
    DELIM           reduce using rule 75 (unary-expression -> BITCOMP unary-expression .)
    CLOSE_BRACKET   reduce using rule 75 (unary-expression -> BITCOMP unary-expression .)
    COMMA           reduce using rule 75 (unary-expression -> BITCOMP unary-expression .)
    CLOSE_PAREN     reduce using rule 75 (unary-expression -> BITCOMP unary-expression .)
    COLON           reduce using rule 75 (unary-expression -> BITCOMP unary-expression .)
    BLOCK_END       reduce using rule 75 (unary-expression -> BITCOMP unary-expression .)


state 198

    (94) parenthesized-expression -> OPEN_PAREN expression . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 276


state 199

    (46) conditional-and-expression -> conditional-and-expression LOGAND . inclusive-or-expression
    (47) inclusive-or-expression -> . exclusive-or-expression
    (48) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (49) exclusive-or-expression -> . and-expression
    (50) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (51) and-expression -> . equality-expression
    (52) and-expression -> . and-expression BITAND equality-expression
    (53) equality-expression -> . relational-expression
    (54) equality-expression -> . equality-expression EQ relational-expression
    (55) equality-expression -> . equality-expression NE relational-expression
    (56) relational-expression -> . shift-expression
    (57) relational-expression -> . relational-expression LT shift-expression
    (58) relational-expression -> . relational-expression GT shift-expression
    (59) relational-expression -> . relational-expression LE shift-expression
    (60) relational-expression -> . relational-expression GE shift-expression
    (61) shift-expression -> . additive-expression
    (62) shift-expression -> . shift-expression LSHIFT additive-expression
    (63) shift-expression -> . shift-expression RSHIFT additive-expression
    (64) additive-expression -> . multiplicative-expression
    (65) additive-expression -> . additive-expression PLUS multiplicative-expression
    (66) additive-expression -> . additive-expression MINUS multiplicative-expression
    (67) multiplicative-expression -> . unary-expression
    (68) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (69) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (70) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (71) unary-expression -> . primary-expression
    (72) unary-expression -> . PLUS unary-expression
    (73) unary-expression -> . MINUS unary-expression
    (74) unary-expression -> . BITNOT unary-expression
    (75) unary-expression -> . BITCOMP unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . element-access
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (220) literal -> . ICONST
    (221) literal -> . DCONST
    (222) literal -> . TRUE
    (223) literal -> . FALSE
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (94) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 102
    MINUS           shift and go to state 95
    BITNOT          shift and go to state 117
    BITCOMP         shift and go to state 97
    NEW             shift and go to state 93
    IDENTIFIER      shift and go to state 195
    ICONST          shift and go to state 108
    DCONST          shift and go to state 118
    TRUE            shift and go to state 112
    FALSE           shift and go to state 110
    OPEN_PAREN      shift and go to state 99

    exclusive-or-expression        shift and go to state 89
    member-access                  shift and go to state 192
    relational-expression          shift and go to state 91
    additive-expression            shift and go to state 94
    primary-no-array-creation-expression shift and go to state 107
    inclusive-or-expression        shift and go to state 277
    unary-expression               shift and go to state 88
    element-access                 shift and go to state 194
    literal                        shift and go to state 106
    array-creation-expression      shift and go to state 92
    equality-expression            shift and go to state 111
    shift-expression               shift and go to state 113
    and-expression                 shift and go to state 114
    multiplicative-expression      shift and go to state 115
    primary-expression             shift and go to state 119
    invocation-expression          shift and go to state 120
    parenthesized-expression       shift and go to state 122

state 200

    (72) unary-expression -> PLUS unary-expression .

    TIMES           reduce using rule 72 (unary-expression -> PLUS unary-expression .)
    DIV             reduce using rule 72 (unary-expression -> PLUS unary-expression .)
    MOD             reduce using rule 72 (unary-expression -> PLUS unary-expression .)
    PLUS            reduce using rule 72 (unary-expression -> PLUS unary-expression .)
    MINUS           reduce using rule 72 (unary-expression -> PLUS unary-expression .)
    LSHIFT          reduce using rule 72 (unary-expression -> PLUS unary-expression .)
    RSHIFT          reduce using rule 72 (unary-expression -> PLUS unary-expression .)
    LT              reduce using rule 72 (unary-expression -> PLUS unary-expression .)
    GT              reduce using rule 72 (unary-expression -> PLUS unary-expression .)
    LE              reduce using rule 72 (unary-expression -> PLUS unary-expression .)
    GE              reduce using rule 72 (unary-expression -> PLUS unary-expression .)
    EQ              reduce using rule 72 (unary-expression -> PLUS unary-expression .)
    NE              reduce using rule 72 (unary-expression -> PLUS unary-expression .)
    BITAND          reduce using rule 72 (unary-expression -> PLUS unary-expression .)
    BITXOR          reduce using rule 72 (unary-expression -> PLUS unary-expression .)
    BITOR           reduce using rule 72 (unary-expression -> PLUS unary-expression .)
    LOGAND          reduce using rule 72 (unary-expression -> PLUS unary-expression .)
    CONDOP          reduce using rule 72 (unary-expression -> PLUS unary-expression .)
    LOGOR           reduce using rule 72 (unary-expression -> PLUS unary-expression .)
    DELIM           reduce using rule 72 (unary-expression -> PLUS unary-expression .)
    CLOSE_BRACKET   reduce using rule 72 (unary-expression -> PLUS unary-expression .)
    COMMA           reduce using rule 72 (unary-expression -> PLUS unary-expression .)
    CLOSE_PAREN     reduce using rule 72 (unary-expression -> PLUS unary-expression .)
    COLON           reduce using rule 72 (unary-expression -> PLUS unary-expression .)
    BLOCK_END       reduce using rule 72 (unary-expression -> PLUS unary-expression .)


state 201

    (210) return-statement -> RETURN expression-opt DELIM .

    IDENTIFIER      reduce using rule 210 (return-statement -> RETURN expression-opt DELIM .)
    BLOCK_BEGIN     reduce using rule 210 (return-statement -> RETURN expression-opt DELIM .)
    DELIM           reduce using rule 210 (return-statement -> RETURN expression-opt DELIM .)
    CONSOLE         reduce using rule 210 (return-statement -> RETURN expression-opt DELIM .)
    CONST           reduce using rule 210 (return-statement -> RETURN expression-opt DELIM .)
    IF              reduce using rule 210 (return-statement -> RETURN expression-opt DELIM .)
    SWITCH          reduce using rule 210 (return-statement -> RETURN expression-opt DELIM .)
    WHILE           reduce using rule 210 (return-statement -> RETURN expression-opt DELIM .)
    FOR             reduce using rule 210 (return-statement -> RETURN expression-opt DELIM .)
    DO              reduce using rule 210 (return-statement -> RETURN expression-opt DELIM .)
    BREAK           reduce using rule 210 (return-statement -> RETURN expression-opt DELIM .)
    CONTINUE        reduce using rule 210 (return-statement -> RETURN expression-opt DELIM .)
    GOTO            reduce using rule 210 (return-statement -> RETURN expression-opt DELIM .)
    RETURN          reduce using rule 210 (return-statement -> RETURN expression-opt DELIM .)
    VOID            reduce using rule 210 (return-statement -> RETURN expression-opt DELIM .)
    PUBLIC          reduce using rule 210 (return-statement -> RETURN expression-opt DELIM .)
    PRIVATE         reduce using rule 210 (return-statement -> RETURN expression-opt DELIM .)
    BOOL            reduce using rule 210 (return-statement -> RETURN expression-opt DELIM .)
    INT             reduce using rule 210 (return-statement -> RETURN expression-opt DELIM .)
    UINT            reduce using rule 210 (return-statement -> RETURN expression-opt DELIM .)
    CHAR            reduce using rule 210 (return-statement -> RETURN expression-opt DELIM .)
    DOUBLE          reduce using rule 210 (return-statement -> RETURN expression-opt DELIM .)
    $end            reduce using rule 210 (return-statement -> RETURN expression-opt DELIM .)
    BLOCK_END       reduce using rule 210 (return-statement -> RETURN expression-opt DELIM .)
    CASE            reduce using rule 210 (return-statement -> RETURN expression-opt DELIM .)
    DEFAULT         reduce using rule 210 (return-statement -> RETURN expression-opt DELIM .)


state 202

    (54) equality-expression -> equality-expression EQ . relational-expression
    (56) relational-expression -> . shift-expression
    (57) relational-expression -> . relational-expression LT shift-expression
    (58) relational-expression -> . relational-expression GT shift-expression
    (59) relational-expression -> . relational-expression LE shift-expression
    (60) relational-expression -> . relational-expression GE shift-expression
    (61) shift-expression -> . additive-expression
    (62) shift-expression -> . shift-expression LSHIFT additive-expression
    (63) shift-expression -> . shift-expression RSHIFT additive-expression
    (64) additive-expression -> . multiplicative-expression
    (65) additive-expression -> . additive-expression PLUS multiplicative-expression
    (66) additive-expression -> . additive-expression MINUS multiplicative-expression
    (67) multiplicative-expression -> . unary-expression
    (68) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (69) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (70) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (71) unary-expression -> . primary-expression
    (72) unary-expression -> . PLUS unary-expression
    (73) unary-expression -> . MINUS unary-expression
    (74) unary-expression -> . BITNOT unary-expression
    (75) unary-expression -> . BITCOMP unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . element-access
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (220) literal -> . ICONST
    (221) literal -> . DCONST
    (222) literal -> . TRUE
    (223) literal -> . FALSE
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (94) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 102
    MINUS           shift and go to state 95
    BITNOT          shift and go to state 117
    BITCOMP         shift and go to state 97
    NEW             shift and go to state 93
    IDENTIFIER      shift and go to state 195
    ICONST          shift and go to state 108
    DCONST          shift and go to state 118
    TRUE            shift and go to state 112
    FALSE           shift and go to state 110
    OPEN_PAREN      shift and go to state 99

    array-creation-expression      shift and go to state 92
    multiplicative-expression      shift and go to state 115
    unary-expression               shift and go to state 88
    relational-expression          shift and go to state 278
    element-access                 shift and go to state 194
    literal                        shift and go to state 106
    primary-no-array-creation-expression shift and go to state 107
    primary-expression             shift and go to state 119
    invocation-expression          shift and go to state 120
    additive-expression            shift and go to state 94
    parenthesized-expression       shift and go to state 122
    member-access                  shift and go to state 192
    shift-expression               shift and go to state 113

state 203

    (55) equality-expression -> equality-expression NE . relational-expression
    (56) relational-expression -> . shift-expression
    (57) relational-expression -> . relational-expression LT shift-expression
    (58) relational-expression -> . relational-expression GT shift-expression
    (59) relational-expression -> . relational-expression LE shift-expression
    (60) relational-expression -> . relational-expression GE shift-expression
    (61) shift-expression -> . additive-expression
    (62) shift-expression -> . shift-expression LSHIFT additive-expression
    (63) shift-expression -> . shift-expression RSHIFT additive-expression
    (64) additive-expression -> . multiplicative-expression
    (65) additive-expression -> . additive-expression PLUS multiplicative-expression
    (66) additive-expression -> . additive-expression MINUS multiplicative-expression
    (67) multiplicative-expression -> . unary-expression
    (68) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (69) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (70) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (71) unary-expression -> . primary-expression
    (72) unary-expression -> . PLUS unary-expression
    (73) unary-expression -> . MINUS unary-expression
    (74) unary-expression -> . BITNOT unary-expression
    (75) unary-expression -> . BITCOMP unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . element-access
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (220) literal -> . ICONST
    (221) literal -> . DCONST
    (222) literal -> . TRUE
    (223) literal -> . FALSE
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (94) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 102
    MINUS           shift and go to state 95
    BITNOT          shift and go to state 117
    BITCOMP         shift and go to state 97
    NEW             shift and go to state 93
    IDENTIFIER      shift and go to state 195
    ICONST          shift and go to state 108
    DCONST          shift and go to state 118
    TRUE            shift and go to state 112
    FALSE           shift and go to state 110
    OPEN_PAREN      shift and go to state 99

    array-creation-expression      shift and go to state 92
    multiplicative-expression      shift and go to state 115
    unary-expression               shift and go to state 88
    relational-expression          shift and go to state 279
    element-access                 shift and go to state 194
    literal                        shift and go to state 106
    primary-no-array-creation-expression shift and go to state 107
    primary-expression             shift and go to state 119
    invocation-expression          shift and go to state 120
    additive-expression            shift and go to state 94
    parenthesized-expression       shift and go to state 122
    member-access                  shift and go to state 192
    shift-expression               shift and go to state 113

state 204

    (63) shift-expression -> shift-expression RSHIFT . additive-expression
    (64) additive-expression -> . multiplicative-expression
    (65) additive-expression -> . additive-expression PLUS multiplicative-expression
    (66) additive-expression -> . additive-expression MINUS multiplicative-expression
    (67) multiplicative-expression -> . unary-expression
    (68) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (69) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (70) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (71) unary-expression -> . primary-expression
    (72) unary-expression -> . PLUS unary-expression
    (73) unary-expression -> . MINUS unary-expression
    (74) unary-expression -> . BITNOT unary-expression
    (75) unary-expression -> . BITCOMP unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . element-access
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (220) literal -> . ICONST
    (221) literal -> . DCONST
    (222) literal -> . TRUE
    (223) literal -> . FALSE
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (94) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 102
    MINUS           shift and go to state 95
    BITNOT          shift and go to state 117
    BITCOMP         shift and go to state 97
    NEW             shift and go to state 93
    IDENTIFIER      shift and go to state 195
    ICONST          shift and go to state 108
    DCONST          shift and go to state 118
    TRUE            shift and go to state 112
    FALSE           shift and go to state 110
    OPEN_PAREN      shift and go to state 99

    array-creation-expression      shift and go to state 92
    multiplicative-expression      shift and go to state 115
    member-access                  shift and go to state 192
    unary-expression               shift and go to state 88
    element-access                 shift and go to state 194
    literal                        shift and go to state 106
    primary-no-array-creation-expression shift and go to state 107
    primary-expression             shift and go to state 119
    invocation-expression          shift and go to state 120
    additive-expression            shift and go to state 280
    parenthesized-expression       shift and go to state 122

state 205

    (62) shift-expression -> shift-expression LSHIFT . additive-expression
    (64) additive-expression -> . multiplicative-expression
    (65) additive-expression -> . additive-expression PLUS multiplicative-expression
    (66) additive-expression -> . additive-expression MINUS multiplicative-expression
    (67) multiplicative-expression -> . unary-expression
    (68) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (69) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (70) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (71) unary-expression -> . primary-expression
    (72) unary-expression -> . PLUS unary-expression
    (73) unary-expression -> . MINUS unary-expression
    (74) unary-expression -> . BITNOT unary-expression
    (75) unary-expression -> . BITCOMP unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . element-access
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (220) literal -> . ICONST
    (221) literal -> . DCONST
    (222) literal -> . TRUE
    (223) literal -> . FALSE
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (94) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 102
    MINUS           shift and go to state 95
    BITNOT          shift and go to state 117
    BITCOMP         shift and go to state 97
    NEW             shift and go to state 93
    IDENTIFIER      shift and go to state 195
    ICONST          shift and go to state 108
    DCONST          shift and go to state 118
    TRUE            shift and go to state 112
    FALSE           shift and go to state 110
    OPEN_PAREN      shift and go to state 99

    array-creation-expression      shift and go to state 92
    multiplicative-expression      shift and go to state 115
    member-access                  shift and go to state 192
    unary-expression               shift and go to state 88
    element-access                 shift and go to state 194
    literal                        shift and go to state 106
    primary-no-array-creation-expression shift and go to state 107
    primary-expression             shift and go to state 119
    invocation-expression          shift and go to state 120
    additive-expression            shift and go to state 281
    parenthesized-expression       shift and go to state 122

state 206

    (52) and-expression -> and-expression BITAND . equality-expression
    (53) equality-expression -> . relational-expression
    (54) equality-expression -> . equality-expression EQ relational-expression
    (55) equality-expression -> . equality-expression NE relational-expression
    (56) relational-expression -> . shift-expression
    (57) relational-expression -> . relational-expression LT shift-expression
    (58) relational-expression -> . relational-expression GT shift-expression
    (59) relational-expression -> . relational-expression LE shift-expression
    (60) relational-expression -> . relational-expression GE shift-expression
    (61) shift-expression -> . additive-expression
    (62) shift-expression -> . shift-expression LSHIFT additive-expression
    (63) shift-expression -> . shift-expression RSHIFT additive-expression
    (64) additive-expression -> . multiplicative-expression
    (65) additive-expression -> . additive-expression PLUS multiplicative-expression
    (66) additive-expression -> . additive-expression MINUS multiplicative-expression
    (67) multiplicative-expression -> . unary-expression
    (68) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (69) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (70) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (71) unary-expression -> . primary-expression
    (72) unary-expression -> . PLUS unary-expression
    (73) unary-expression -> . MINUS unary-expression
    (74) unary-expression -> . BITNOT unary-expression
    (75) unary-expression -> . BITCOMP unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . element-access
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (220) literal -> . ICONST
    (221) literal -> . DCONST
    (222) literal -> . TRUE
    (223) literal -> . FALSE
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (94) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 102
    MINUS           shift and go to state 95
    BITNOT          shift and go to state 117
    BITCOMP         shift and go to state 97
    NEW             shift and go to state 93
    IDENTIFIER      shift and go to state 195
    ICONST          shift and go to state 108
    DCONST          shift and go to state 118
    TRUE            shift and go to state 112
    FALSE           shift and go to state 110
    OPEN_PAREN      shift and go to state 99

    array-creation-expression      shift and go to state 92
    multiplicative-expression      shift and go to state 115
    additive-expression            shift and go to state 94
    unary-expression               shift and go to state 88
    relational-expression          shift and go to state 91
    element-access                 shift and go to state 194
    literal                        shift and go to state 106
    primary-no-array-creation-expression shift and go to state 107
    primary-expression             shift and go to state 119
    invocation-expression          shift and go to state 120
    equality-expression            shift and go to state 282
    parenthesized-expression       shift and go to state 122
    member-access                  shift and go to state 192
    shift-expression               shift and go to state 113

state 207

    (69) multiplicative-expression -> multiplicative-expression DIV . unary-expression
    (71) unary-expression -> . primary-expression
    (72) unary-expression -> . PLUS unary-expression
    (73) unary-expression -> . MINUS unary-expression
    (74) unary-expression -> . BITNOT unary-expression
    (75) unary-expression -> . BITCOMP unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . element-access
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (220) literal -> . ICONST
    (221) literal -> . DCONST
    (222) literal -> . TRUE
    (223) literal -> . FALSE
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (94) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 102
    MINUS           shift and go to state 95
    BITNOT          shift and go to state 117
    BITCOMP         shift and go to state 97
    NEW             shift and go to state 93
    IDENTIFIER      shift and go to state 195
    ICONST          shift and go to state 108
    DCONST          shift and go to state 118
    TRUE            shift and go to state 112
    FALSE           shift and go to state 110
    OPEN_PAREN      shift and go to state 99

    primary-no-array-creation-expression shift and go to state 107
    member-access                  shift and go to state 192
    unary-expression               shift and go to state 283
    element-access                 shift and go to state 194
    literal                        shift and go to state 106
    array-creation-expression      shift and go to state 92
    primary-expression             shift and go to state 119
    invocation-expression          shift and go to state 120
    parenthesized-expression       shift and go to state 122

state 208

    (70) multiplicative-expression -> multiplicative-expression MOD . unary-expression
    (71) unary-expression -> . primary-expression
    (72) unary-expression -> . PLUS unary-expression
    (73) unary-expression -> . MINUS unary-expression
    (74) unary-expression -> . BITNOT unary-expression
    (75) unary-expression -> . BITCOMP unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . element-access
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (220) literal -> . ICONST
    (221) literal -> . DCONST
    (222) literal -> . TRUE
    (223) literal -> . FALSE
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (94) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 102
    MINUS           shift and go to state 95
    BITNOT          shift and go to state 117
    BITCOMP         shift and go to state 97
    NEW             shift and go to state 93
    IDENTIFIER      shift and go to state 195
    ICONST          shift and go to state 108
    DCONST          shift and go to state 118
    TRUE            shift and go to state 112
    FALSE           shift and go to state 110
    OPEN_PAREN      shift and go to state 99

    primary-no-array-creation-expression shift and go to state 107
    member-access                  shift and go to state 192
    unary-expression               shift and go to state 284
    element-access                 shift and go to state 194
    literal                        shift and go to state 106
    array-creation-expression      shift and go to state 92
    primary-expression             shift and go to state 119
    invocation-expression          shift and go to state 120
    parenthesized-expression       shift and go to state 122

state 209

    (68) multiplicative-expression -> multiplicative-expression TIMES . unary-expression
    (71) unary-expression -> . primary-expression
    (72) unary-expression -> . PLUS unary-expression
    (73) unary-expression -> . MINUS unary-expression
    (74) unary-expression -> . BITNOT unary-expression
    (75) unary-expression -> . BITCOMP unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . element-access
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (220) literal -> . ICONST
    (221) literal -> . DCONST
    (222) literal -> . TRUE
    (223) literal -> . FALSE
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (94) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 102
    MINUS           shift and go to state 95
    BITNOT          shift and go to state 117
    BITCOMP         shift and go to state 97
    NEW             shift and go to state 93
    IDENTIFIER      shift and go to state 195
    ICONST          shift and go to state 108
    DCONST          shift and go to state 118
    TRUE            shift and go to state 112
    FALSE           shift and go to state 110
    OPEN_PAREN      shift and go to state 99

    primary-no-array-creation-expression shift and go to state 107
    member-access                  shift and go to state 192
    unary-expression               shift and go to state 285
    element-access                 shift and go to state 194
    literal                        shift and go to state 106
    array-creation-expression      shift and go to state 92
    primary-expression             shift and go to state 119
    invocation-expression          shift and go to state 120
    parenthesized-expression       shift and go to state 122

state 210

    (74) unary-expression -> BITNOT unary-expression .

    TIMES           reduce using rule 74 (unary-expression -> BITNOT unary-expression .)
    DIV             reduce using rule 74 (unary-expression -> BITNOT unary-expression .)
    MOD             reduce using rule 74 (unary-expression -> BITNOT unary-expression .)
    PLUS            reduce using rule 74 (unary-expression -> BITNOT unary-expression .)
    MINUS           reduce using rule 74 (unary-expression -> BITNOT unary-expression .)
    LSHIFT          reduce using rule 74 (unary-expression -> BITNOT unary-expression .)
    RSHIFT          reduce using rule 74 (unary-expression -> BITNOT unary-expression .)
    LT              reduce using rule 74 (unary-expression -> BITNOT unary-expression .)
    GT              reduce using rule 74 (unary-expression -> BITNOT unary-expression .)
    LE              reduce using rule 74 (unary-expression -> BITNOT unary-expression .)
    GE              reduce using rule 74 (unary-expression -> BITNOT unary-expression .)
    EQ              reduce using rule 74 (unary-expression -> BITNOT unary-expression .)
    NE              reduce using rule 74 (unary-expression -> BITNOT unary-expression .)
    BITAND          reduce using rule 74 (unary-expression -> BITNOT unary-expression .)
    BITXOR          reduce using rule 74 (unary-expression -> BITNOT unary-expression .)
    BITOR           reduce using rule 74 (unary-expression -> BITNOT unary-expression .)
    LOGAND          reduce using rule 74 (unary-expression -> BITNOT unary-expression .)
    CONDOP          reduce using rule 74 (unary-expression -> BITNOT unary-expression .)
    LOGOR           reduce using rule 74 (unary-expression -> BITNOT unary-expression .)
    DELIM           reduce using rule 74 (unary-expression -> BITNOT unary-expression .)
    CLOSE_BRACKET   reduce using rule 74 (unary-expression -> BITNOT unary-expression .)
    COMMA           reduce using rule 74 (unary-expression -> BITNOT unary-expression .)
    CLOSE_PAREN     reduce using rule 74 (unary-expression -> BITNOT unary-expression .)
    COLON           reduce using rule 74 (unary-expression -> BITNOT unary-expression .)
    BLOCK_END       reduce using rule 74 (unary-expression -> BITNOT unary-expression .)


state 211

    (44) conditional-or-expression -> conditional-or-expression LOGOR . conditional-and-expression
    (45) conditional-and-expression -> . inclusive-or-expression
    (46) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (47) inclusive-or-expression -> . exclusive-or-expression
    (48) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (49) exclusive-or-expression -> . and-expression
    (50) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (51) and-expression -> . equality-expression
    (52) and-expression -> . and-expression BITAND equality-expression
    (53) equality-expression -> . relational-expression
    (54) equality-expression -> . equality-expression EQ relational-expression
    (55) equality-expression -> . equality-expression NE relational-expression
    (56) relational-expression -> . shift-expression
    (57) relational-expression -> . relational-expression LT shift-expression
    (58) relational-expression -> . relational-expression GT shift-expression
    (59) relational-expression -> . relational-expression LE shift-expression
    (60) relational-expression -> . relational-expression GE shift-expression
    (61) shift-expression -> . additive-expression
    (62) shift-expression -> . shift-expression LSHIFT additive-expression
    (63) shift-expression -> . shift-expression RSHIFT additive-expression
    (64) additive-expression -> . multiplicative-expression
    (65) additive-expression -> . additive-expression PLUS multiplicative-expression
    (66) additive-expression -> . additive-expression MINUS multiplicative-expression
    (67) multiplicative-expression -> . unary-expression
    (68) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (69) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (70) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (71) unary-expression -> . primary-expression
    (72) unary-expression -> . PLUS unary-expression
    (73) unary-expression -> . MINUS unary-expression
    (74) unary-expression -> . BITNOT unary-expression
    (75) unary-expression -> . BITCOMP unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . element-access
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (220) literal -> . ICONST
    (221) literal -> . DCONST
    (222) literal -> . TRUE
    (223) literal -> . FALSE
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (94) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 102
    MINUS           shift and go to state 95
    BITNOT          shift and go to state 117
    BITCOMP         shift and go to state 97
    NEW             shift and go to state 93
    IDENTIFIER      shift and go to state 195
    ICONST          shift and go to state 108
    DCONST          shift and go to state 118
    TRUE            shift and go to state 112
    FALSE           shift and go to state 110
    OPEN_PAREN      shift and go to state 99

    exclusive-or-expression        shift and go to state 89
    member-access                  shift and go to state 192
    relational-expression          shift and go to state 91
    additive-expression            shift and go to state 94
    primary-no-array-creation-expression shift and go to state 107
    inclusive-or-expression        shift and go to state 96
    unary-expression               shift and go to state 88
    element-access                 shift and go to state 194
    literal                        shift and go to state 106
    array-creation-expression      shift and go to state 92
    conditional-and-expression     shift and go to state 286
    equality-expression            shift and go to state 111
    shift-expression               shift and go to state 113
    and-expression                 shift and go to state 114
    multiplicative-expression      shift and go to state 115
    primary-expression             shift and go to state 119
    invocation-expression          shift and go to state 120
    parenthesized-expression       shift and go to state 122

state 212

    (42) conditional-expression -> conditional-or-expression CONDOP . expression COLON expression
    (39) expression -> . conditional-expression
    (40) expression -> . assignment
    (41) conditional-expression -> . conditional-or-expression
    (42) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (103) assignment -> . IDENTIFIER assignment-operator expression
    (104) assignment -> . member-access assignment-operator expression
    (105) assignment -> . element-access assignment-operator expression
    (43) conditional-or-expression -> . conditional-and-expression
    (44) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (45) conditional-and-expression -> . inclusive-or-expression
    (46) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (47) inclusive-or-expression -> . exclusive-or-expression
    (48) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (49) exclusive-or-expression -> . and-expression
    (50) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (51) and-expression -> . equality-expression
    (52) and-expression -> . and-expression BITAND equality-expression
    (53) equality-expression -> . relational-expression
    (54) equality-expression -> . equality-expression EQ relational-expression
    (55) equality-expression -> . equality-expression NE relational-expression
    (56) relational-expression -> . shift-expression
    (57) relational-expression -> . relational-expression LT shift-expression
    (58) relational-expression -> . relational-expression GT shift-expression
    (59) relational-expression -> . relational-expression LE shift-expression
    (60) relational-expression -> . relational-expression GE shift-expression
    (61) shift-expression -> . additive-expression
    (62) shift-expression -> . shift-expression LSHIFT additive-expression
    (63) shift-expression -> . shift-expression RSHIFT additive-expression
    (64) additive-expression -> . multiplicative-expression
    (65) additive-expression -> . additive-expression PLUS multiplicative-expression
    (66) additive-expression -> . additive-expression MINUS multiplicative-expression
    (67) multiplicative-expression -> . unary-expression
    (68) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (69) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (70) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (71) unary-expression -> . primary-expression
    (72) unary-expression -> . PLUS unary-expression
    (73) unary-expression -> . MINUS unary-expression
    (74) unary-expression -> . BITNOT unary-expression
    (75) unary-expression -> . BITCOMP unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . element-access
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (220) literal -> . ICONST
    (221) literal -> . DCONST
    (222) literal -> . TRUE
    (223) literal -> . FALSE
    (94) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 103
    PLUS            shift and go to state 102
    MINUS           shift and go to state 95
    BITNOT          shift and go to state 117
    BITCOMP         shift and go to state 97
    NEW             shift and go to state 93
    ICONST          shift and go to state 108
    DCONST          shift and go to state 118
    TRUE            shift and go to state 112
    FALSE           shift and go to state 110
    OPEN_PAREN      shift and go to state 99

    exclusive-or-expression        shift and go to state 89
    member-access                  shift and go to state 90
    relational-expression          shift and go to state 91
    additive-expression            shift and go to state 94
    primary-no-array-creation-expression shift and go to state 107
    inclusive-or-expression        shift and go to state 96
    unary-expression               shift and go to state 88
    element-access                 shift and go to state 98
    literal                        shift and go to state 106
    conditional-expression         shift and go to state 100
    conditional-and-expression     shift and go to state 101
    array-creation-expression      shift and go to state 92
    assignment                     shift and go to state 105
    equality-expression            shift and go to state 111
    shift-expression               shift and go to state 113
    and-expression                 shift and go to state 114
    multiplicative-expression      shift and go to state 115
    expression                     shift and go to state 287
    primary-expression             shift and go to state 119
    invocation-expression          shift and go to state 120
    conditional-or-expression      shift and go to state 121
    parenthesized-expression       shift and go to state 122

state 213

    (141) statement-list-opt -> empty .

    BLOCK_END       reduce using rule 141 (statement-list-opt -> empty .)


state 214

    (140) statement-list-opt -> statement-list .
    (143) statement-list -> statement-list . statement
    (144) statement -> . labeled-statement
    (145) statement -> . declaration-statement
    (146) statement -> . block
    (147) statement -> . empty-statement
    (148) statement -> . expression-statement
    (149) statement -> . selection-statement
    (150) statement -> . iteration-statement
    (151) statement -> . jump-statement
    (152) statement -> . write-statement
    (153) statement -> . read-statement
    (154) statement -> . method-declaration
    (159) labeled-statement -> . IDENTIFIER COLON statement
    (160) declaration-statement -> . local-variable-declaration DELIM
    (161) declaration-statement -> . local-constant-declaration DELIM
    (138) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END
    (164) empty-statement -> . DELIM
    (165) expression-statement -> . statement-expression DELIM
    (168) selection-statement -> . if-statement
    (169) selection-statement -> . switch-statement
    (187) iteration-statement -> . while-statement M_quad
    (188) iteration-statement -> . for-statement M_quad
    (189) iteration-statement -> . do-statement M_quad
    (203) jump-statement -> . break-statement
    (204) jump-statement -> . continue-statement
    (205) jump-statement -> . goto-statement
    (206) jump-statement -> . return-statement
    (155) write-statement -> . CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM
    (158) read-statement -> . CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM
    (124) method-declaration -> . method-header method-body
    (162) local-variable-declaration -> . type variable-declarators
    (163) local-constant-declaration -> . CONST type constant-declarators
    (166) statement-expression -> . invocation-expression
    (167) statement-expression -> . assignment
    (170) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block
    (171) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block
    (172) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad
    (176) switch-statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block
    (190) while-statement -> . WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block
    (193) for-statement -> . FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block
    (192) do-statement -> . DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM
    (207) break-statement -> . BREAK DELIM
    (208) continue-statement -> . CONTINUE DELIM
    (209) goto-statement -> . GOTO IDENTIFIER DELIM
    (210) return-statement -> . RETURN expression-opt DELIM
    (125) method-header -> . modifier type IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (126) method-header -> . modifier VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (127) method-header -> . type IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (128) method-header -> . VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (27) type -> . simple-type
    (28) type -> . class-type
    (29) type -> . array-type
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (103) assignment -> . IDENTIFIER assignment-operator expression
    (104) assignment -> . member-access assignment-operator expression
    (105) assignment -> . element-access assignment-operator expression
    (118) modifier -> . PUBLIC
    (119) modifier -> . PRIVATE
    (30) simple-type -> . BOOL
    (31) simple-type -> . INT
    (32) simple-type -> . UINT
    (33) simple-type -> . CHAR
    (34) simple-type -> . DOUBLE
    (14) class-type -> . IDENTIFIER
    (35) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    BLOCK_END       reduce using rule 140 (statement-list-opt -> statement-list .)
    IDENTIFIER      shift and go to state 40
    BLOCK_BEGIN     shift and go to state 54
    DELIM           shift and go to state 4
    CONSOLE         shift and go to state 58
    CONST           shift and go to state 53
    IF              shift and go to state 63
    SWITCH          shift and go to state 26
    WHILE           shift and go to state 35
    FOR             shift and go to state 24
    DO              shift and go to state 52
    BREAK           shift and go to state 46
    CONTINUE        shift and go to state 31
    GOTO            shift and go to state 8
    RETURN          shift and go to state 16
    VOID            shift and go to state 7
    PUBLIC          shift and go to state 62
    PRIVATE         shift and go to state 55
    BOOL            shift and go to state 47
    INT             shift and go to state 28
    UINT            shift and go to state 61
    CHAR            shift and go to state 34
    DOUBLE          shift and go to state 12

    return-statement               shift and go to state 19
    method-header                  shift and go to state 17
    write-statement                shift and go to state 1
    member-access                  shift and go to state 2
    selection-statement            shift and go to state 33
    empty-statement                shift and go to state 36
    expression-statement           shift and go to state 3
    break-statement                shift and go to state 37
    method-declaration             shift and go to state 38
    element-access                 shift and go to state 21
    statement-expression           shift and go to state 5
    local-constant-declaration     shift and go to state 22
    statement                      shift and go to state 145
    assignment                     shift and go to state 59
    for-statement                  shift and go to state 6
    type                           shift and go to state 41
    read-statement                 shift and go to state 57
    do-statement                   shift and go to state 23
    array-type                     shift and go to state 43
    continue-statement             shift and go to state 25
    invocation-expression          shift and go to state 14
    labeled-statement              shift and go to state 9
    declaration-statement          shift and go to state 44
    switch-statement               shift and go to state 10
    jump-statement                 shift and go to state 11
    iteration-statement            shift and go to state 45
    local-variable-declaration     shift and go to state 27
    goto-statement                 shift and go to state 29
    if-statement                   shift and go to state 30
    class-type                     shift and go to state 64
    while-statement                shift and go to state 49
    simple-type                    shift and go to state 18
    modifier                       shift and go to state 51
    block                          shift and go to state 32

state 215

    (137) method-block -> BLOCK_BEGIN statement-list-opt . BLOCK_END

    BLOCK_END       shift and go to state 288


state 216

    (35) array-type -> simple-type OPEN_BRACKET ICONST . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 289


state 217

    (105) assignment -> element-access assignment-operator expression .

    DELIM           reduce using rule 105 (assignment -> element-access assignment-operator expression .)
    CLOSE_BRACKET   reduce using rule 105 (assignment -> element-access assignment-operator expression .)
    COMMA           reduce using rule 105 (assignment -> element-access assignment-operator expression .)
    CLOSE_PAREN     reduce using rule 105 (assignment -> element-access assignment-operator expression .)
    COLON           reduce using rule 105 (assignment -> element-access assignment-operator expression .)
    BLOCK_END       reduce using rule 105 (assignment -> element-access assignment-operator expression .)


state 218

    (194) for-initializer-opt -> for-initializer .

    DELIM           reduce using rule 194 (for-initializer-opt -> for-initializer .)


state 219

    (201) statement-expression-list -> statement-expression .

    COMMA           reduce using rule 201 (statement-expression-list -> statement-expression .)
    CLOSE_PAREN     reduce using rule 201 (statement-expression-list -> statement-expression .)
    DELIM           reduce using rule 201 (statement-expression-list -> statement-expression .)


state 220

    (196) for-initializer -> statement-expression-list .
    (202) statement-expression-list -> statement-expression-list . COMMA statement-expression

    DELIM           reduce using rule 196 (for-initializer -> statement-expression-list .)
    COMMA           shift and go to state 290


state 221

    (97) invocation-expression -> IDENTIFIER . OPEN_PAREN argument-list-opt CLOSE_PAREN
    (103) assignment -> IDENTIFIER . assignment-operator expression
    (95) member-access -> IDENTIFIER . DOT IDENTIFIER
    (101) element-access -> IDENTIFIER . OPEN_BRACKET expression CLOSE_BRACKET
    (106) assignment-operator -> . ASSIGN
    (107) assignment-operator -> . PLUSEQUAL
    (108) assignment-operator -> . MINUSEQUAL
    (109) assignment-operator -> . TIMESEQUAL
    (110) assignment-operator -> . DIVEQUAL
    (111) assignment-operator -> . MODEQUAL
    (112) assignment-operator -> . BITANDEQUAL
    (113) assignment-operator -> . BITOREQUAL
    (114) assignment-operator -> . BITXOREQUAL
    (115) assignment-operator -> . LSHIFTEQUAL
    (116) assignment-operator -> . RSHIFTEQUAL

    OPEN_PAREN      shift and go to state 138
    DOT             shift and go to state 136
    OPEN_BRACKET    shift and go to state 137
    ASSIGN          shift and go to state 78
    PLUSEQUAL       shift and go to state 73
    MINUSEQUAL      shift and go to state 69
    TIMESEQUAL      shift and go to state 68
    DIVEQUAL        shift and go to state 65
    MODEQUAL        shift and go to state 79
    BITANDEQUAL     shift and go to state 76
    BITOREQUAL      shift and go to state 72
    BITXOREQUAL     shift and go to state 71
    LSHIFTEQUAL     shift and go to state 77
    RSHIFTEQUAL     shift and go to state 66

    assignment-operator            shift and go to state 140

state 222

    (195) for-initializer-opt -> empty .

    DELIM           reduce using rule 195 (for-initializer-opt -> empty .)


state 223

    (193) for-statement -> FOR OPEN_PAREN for-initializer-opt . DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block

    DELIM           shift and go to state 291


state 224

    (176) switch-statement -> SWITCH OPEN_PAREN expression . CLOSE_PAREN switch-block

    CLOSE_PAREN     shift and go to state 292


state 225

    (190) while-statement -> WHILE M_quad OPEN_PAREN . expression CLOSE_PAREN M_while block
    (39) expression -> . conditional-expression
    (40) expression -> . assignment
    (41) conditional-expression -> . conditional-or-expression
    (42) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (103) assignment -> . IDENTIFIER assignment-operator expression
    (104) assignment -> . member-access assignment-operator expression
    (105) assignment -> . element-access assignment-operator expression
    (43) conditional-or-expression -> . conditional-and-expression
    (44) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (45) conditional-and-expression -> . inclusive-or-expression
    (46) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (47) inclusive-or-expression -> . exclusive-or-expression
    (48) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (49) exclusive-or-expression -> . and-expression
    (50) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (51) and-expression -> . equality-expression
    (52) and-expression -> . and-expression BITAND equality-expression
    (53) equality-expression -> . relational-expression
    (54) equality-expression -> . equality-expression EQ relational-expression
    (55) equality-expression -> . equality-expression NE relational-expression
    (56) relational-expression -> . shift-expression
    (57) relational-expression -> . relational-expression LT shift-expression
    (58) relational-expression -> . relational-expression GT shift-expression
    (59) relational-expression -> . relational-expression LE shift-expression
    (60) relational-expression -> . relational-expression GE shift-expression
    (61) shift-expression -> . additive-expression
    (62) shift-expression -> . shift-expression LSHIFT additive-expression
    (63) shift-expression -> . shift-expression RSHIFT additive-expression
    (64) additive-expression -> . multiplicative-expression
    (65) additive-expression -> . additive-expression PLUS multiplicative-expression
    (66) additive-expression -> . additive-expression MINUS multiplicative-expression
    (67) multiplicative-expression -> . unary-expression
    (68) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (69) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (70) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (71) unary-expression -> . primary-expression
    (72) unary-expression -> . PLUS unary-expression
    (73) unary-expression -> . MINUS unary-expression
    (74) unary-expression -> . BITNOT unary-expression
    (75) unary-expression -> . BITCOMP unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . element-access
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (220) literal -> . ICONST
    (221) literal -> . DCONST
    (222) literal -> . TRUE
    (223) literal -> . FALSE
    (94) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 103
    PLUS            shift and go to state 102
    MINUS           shift and go to state 95
    BITNOT          shift and go to state 117
    BITCOMP         shift and go to state 97
    NEW             shift and go to state 93
    ICONST          shift and go to state 108
    DCONST          shift and go to state 118
    TRUE            shift and go to state 112
    FALSE           shift and go to state 110
    OPEN_PAREN      shift and go to state 99

    exclusive-or-expression        shift and go to state 89
    member-access                  shift and go to state 90
    relational-expression          shift and go to state 91
    additive-expression            shift and go to state 94
    primary-no-array-creation-expression shift and go to state 107
    inclusive-or-expression        shift and go to state 96
    unary-expression               shift and go to state 88
    element-access                 shift and go to state 98
    literal                        shift and go to state 106
    conditional-expression         shift and go to state 100
    conditional-and-expression     shift and go to state 101
    array-creation-expression      shift and go to state 92
    assignment                     shift and go to state 105
    equality-expression            shift and go to state 111
    shift-expression               shift and go to state 113
    and-expression                 shift and go to state 114
    multiplicative-expression      shift and go to state 115
    expression                     shift and go to state 293
    primary-expression             shift and go to state 119
    invocation-expression          shift and go to state 120
    conditional-or-expression      shift and go to state 121
    parenthesized-expression       shift and go to state 122

state 226

    (95) member-access -> IDENTIFIER DOT IDENTIFIER .

    OPEN_BRACKET    reduce using rule 95 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    DOT             reduce using rule 95 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    OPEN_PAREN      reduce using rule 95 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    TIMES           reduce using rule 95 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    DIV             reduce using rule 95 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    MOD             reduce using rule 95 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    PLUS            reduce using rule 95 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    MINUS           reduce using rule 95 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    LSHIFT          reduce using rule 95 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    RSHIFT          reduce using rule 95 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    LT              reduce using rule 95 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    GT              reduce using rule 95 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    LE              reduce using rule 95 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    GE              reduce using rule 95 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    EQ              reduce using rule 95 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    NE              reduce using rule 95 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    BITAND          reduce using rule 95 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    BITXOR          reduce using rule 95 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    BITOR           reduce using rule 95 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    LOGAND          reduce using rule 95 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    CONDOP          reduce using rule 95 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    LOGOR           reduce using rule 95 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    DELIM           reduce using rule 95 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 95 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    COMMA           reduce using rule 95 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 95 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    COLON           reduce using rule 95 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    BLOCK_END       reduce using rule 95 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    ASSIGN          reduce using rule 95 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    PLUSEQUAL       reduce using rule 95 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    MINUSEQUAL      reduce using rule 95 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    TIMESEQUAL      reduce using rule 95 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    DIVEQUAL        reduce using rule 95 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    MODEQUAL        reduce using rule 95 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    BITANDEQUAL     reduce using rule 95 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    BITOREQUAL      reduce using rule 95 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    BITXOREQUAL     reduce using rule 95 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    LSHIFTEQUAL     reduce using rule 95 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    RSHIFTEQUAL     reduce using rule 95 (member-access -> IDENTIFIER DOT IDENTIFIER .)


state 227

    (101) element-access -> IDENTIFIER OPEN_BRACKET expression . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 294


state 228

    (97) invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 295


state 229

    (159) labeled-statement -> IDENTIFIER COLON statement .

    IDENTIFIER      reduce using rule 159 (labeled-statement -> IDENTIFIER COLON statement .)
    BLOCK_BEGIN     reduce using rule 159 (labeled-statement -> IDENTIFIER COLON statement .)
    DELIM           reduce using rule 159 (labeled-statement -> IDENTIFIER COLON statement .)
    CONSOLE         reduce using rule 159 (labeled-statement -> IDENTIFIER COLON statement .)
    CONST           reduce using rule 159 (labeled-statement -> IDENTIFIER COLON statement .)
    IF              reduce using rule 159 (labeled-statement -> IDENTIFIER COLON statement .)
    SWITCH          reduce using rule 159 (labeled-statement -> IDENTIFIER COLON statement .)
    WHILE           reduce using rule 159 (labeled-statement -> IDENTIFIER COLON statement .)
    FOR             reduce using rule 159 (labeled-statement -> IDENTIFIER COLON statement .)
    DO              reduce using rule 159 (labeled-statement -> IDENTIFIER COLON statement .)
    BREAK           reduce using rule 159 (labeled-statement -> IDENTIFIER COLON statement .)
    CONTINUE        reduce using rule 159 (labeled-statement -> IDENTIFIER COLON statement .)
    GOTO            reduce using rule 159 (labeled-statement -> IDENTIFIER COLON statement .)
    RETURN          reduce using rule 159 (labeled-statement -> IDENTIFIER COLON statement .)
    VOID            reduce using rule 159 (labeled-statement -> IDENTIFIER COLON statement .)
    PUBLIC          reduce using rule 159 (labeled-statement -> IDENTIFIER COLON statement .)
    PRIVATE         reduce using rule 159 (labeled-statement -> IDENTIFIER COLON statement .)
    BOOL            reduce using rule 159 (labeled-statement -> IDENTIFIER COLON statement .)
    INT             reduce using rule 159 (labeled-statement -> IDENTIFIER COLON statement .)
    UINT            reduce using rule 159 (labeled-statement -> IDENTIFIER COLON statement .)
    CHAR            reduce using rule 159 (labeled-statement -> IDENTIFIER COLON statement .)
    DOUBLE          reduce using rule 159 (labeled-statement -> IDENTIFIER COLON statement .)
    $end            reduce using rule 159 (labeled-statement -> IDENTIFIER COLON statement .)
    BLOCK_END       reduce using rule 159 (labeled-statement -> IDENTIFIER COLON statement .)
    CASE            reduce using rule 159 (labeled-statement -> IDENTIFIER COLON statement .)
    DEFAULT         reduce using rule 159 (labeled-statement -> IDENTIFIER COLON statement .)


state 230

    (103) assignment -> IDENTIFIER assignment-operator expression .

    DELIM           reduce using rule 103 (assignment -> IDENTIFIER assignment-operator expression .)
    CLOSE_BRACKET   reduce using rule 103 (assignment -> IDENTIFIER assignment-operator expression .)
    COMMA           reduce using rule 103 (assignment -> IDENTIFIER assignment-operator expression .)
    CLOSE_PAREN     reduce using rule 103 (assignment -> IDENTIFIER assignment-operator expression .)
    COLON           reduce using rule 103 (assignment -> IDENTIFIER assignment-operator expression .)
    BLOCK_END       reduce using rule 103 (assignment -> IDENTIFIER assignment-operator expression .)


state 231

    (121) variable-declarators -> variable-declarators COMMA . variable-declarator
    (122) variable-declarator -> . IDENTIFIER
    (123) variable-declarator -> . IDENTIFIER ASSIGN variable-initializer

    IDENTIFIER      shift and go to state 297

    variable-declarator            shift and go to state 296

state 232

    (127) method-header -> type IDENTIFIER OPEN_PAREN . formal-parameter-list-opt CLOSE_PAREN
    (129) formal-parameter-list-opt -> . formal-parameter-list
    (130) formal-parameter-list-opt -> . empty
    (131) formal-parameter-list -> . fixed-parameters
    (224) empty -> .
    (132) fixed-parameters -> . fixed-parameter
    (133) fixed-parameters -> . fixed-parameters COMMA fixed-parameter
    (134) fixed-parameter -> . type IDENTIFIER
    (27) type -> . simple-type
    (28) type -> . class-type
    (29) type -> . array-type
    (30) simple-type -> . BOOL
    (31) simple-type -> . INT
    (32) simple-type -> . UINT
    (33) simple-type -> . CHAR
    (34) simple-type -> . DOUBLE
    (14) class-type -> . IDENTIFIER
    (35) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET

    CLOSE_PAREN     reduce using rule 224 (empty -> .)
    BOOL            shift and go to state 47
    INT             shift and go to state 28
    UINT            shift and go to state 61
    CHAR            shift and go to state 34
    DOUBLE          shift and go to state 12
    IDENTIFIER      shift and go to state 148

    array-type                     shift and go to state 43
    fixed-parameters               shift and go to state 255
    simple-type                    shift and go to state 18
    formal-parameter-list-opt      shift and go to state 298
    class-type                     shift and go to state 64
    formal-parameter-list          shift and go to state 252
    type                           shift and go to state 253
    empty                          shift and go to state 254
    fixed-parameter                shift and go to state 256

state 233

    (123) variable-declarator -> IDENTIFIER ASSIGN . variable-initializer
    (86) variable-initializer -> . expression
    (87) variable-initializer -> . array-initializer
    (39) expression -> . conditional-expression
    (40) expression -> . assignment
    (83) array-initializer -> . BLOCK_BEGIN variable-initializer-list-opt BLOCK_END
    (41) conditional-expression -> . conditional-or-expression
    (42) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (103) assignment -> . IDENTIFIER assignment-operator expression
    (104) assignment -> . member-access assignment-operator expression
    (105) assignment -> . element-access assignment-operator expression
    (43) conditional-or-expression -> . conditional-and-expression
    (44) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (45) conditional-and-expression -> . inclusive-or-expression
    (46) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (47) inclusive-or-expression -> . exclusive-or-expression
    (48) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (49) exclusive-or-expression -> . and-expression
    (50) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (51) and-expression -> . equality-expression
    (52) and-expression -> . and-expression BITAND equality-expression
    (53) equality-expression -> . relational-expression
    (54) equality-expression -> . equality-expression EQ relational-expression
    (55) equality-expression -> . equality-expression NE relational-expression
    (56) relational-expression -> . shift-expression
    (57) relational-expression -> . relational-expression LT shift-expression
    (58) relational-expression -> . relational-expression GT shift-expression
    (59) relational-expression -> . relational-expression LE shift-expression
    (60) relational-expression -> . relational-expression GE shift-expression
    (61) shift-expression -> . additive-expression
    (62) shift-expression -> . shift-expression LSHIFT additive-expression
    (63) shift-expression -> . shift-expression RSHIFT additive-expression
    (64) additive-expression -> . multiplicative-expression
    (65) additive-expression -> . additive-expression PLUS multiplicative-expression
    (66) additive-expression -> . additive-expression MINUS multiplicative-expression
    (67) multiplicative-expression -> . unary-expression
    (68) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (69) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (70) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (71) unary-expression -> . primary-expression
    (72) unary-expression -> . PLUS unary-expression
    (73) unary-expression -> . MINUS unary-expression
    (74) unary-expression -> . BITNOT unary-expression
    (75) unary-expression -> . BITCOMP unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . element-access
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (220) literal -> . ICONST
    (221) literal -> . DCONST
    (222) literal -> . TRUE
    (223) literal -> . FALSE
    (94) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    BLOCK_BEGIN     shift and go to state 299
    IDENTIFIER      shift and go to state 103
    PLUS            shift and go to state 102
    MINUS           shift and go to state 95
    BITNOT          shift and go to state 117
    BITCOMP         shift and go to state 97
    NEW             shift and go to state 93
    ICONST          shift and go to state 108
    DCONST          shift and go to state 118
    TRUE            shift and go to state 112
    FALSE           shift and go to state 110
    OPEN_PAREN      shift and go to state 99

    exclusive-or-expression        shift and go to state 89
    member-access                  shift and go to state 90
    relational-expression          shift and go to state 91
    additive-expression            shift and go to state 94
    primary-no-array-creation-expression shift and go to state 107
    array-initializer              shift and go to state 300
    inclusive-or-expression        shift and go to state 96
    unary-expression               shift and go to state 88
    element-access                 shift and go to state 98
    literal                        shift and go to state 106
    conditional-expression         shift and go to state 100
    conditional-and-expression     shift and go to state 101
    array-creation-expression      shift and go to state 92
    assignment                     shift and go to state 105
    variable-initializer           shift and go to state 301
    equality-expression            shift and go to state 111
    shift-expression               shift and go to state 113
    and-expression                 shift and go to state 114
    multiplicative-expression      shift and go to state 115
    expression                     shift and go to state 302
    primary-expression             shift and go to state 119
    invocation-expression          shift and go to state 120
    conditional-or-expression      shift and go to state 121
    parenthesized-expression       shift and go to state 122

state 234

    (126) method-header -> modifier VOID IDENTIFIER . OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN

    OPEN_PAREN      shift and go to state 303


state 235

    (125) method-header -> modifier type IDENTIFIER . OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN

    OPEN_PAREN      shift and go to state 304


state 236

    (192) do-statement -> DO M_quad block . WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM

    WHILE           shift and go to state 305


state 237

    (163) local-constant-declaration -> CONST type constant-declarators .
    (37) constant-declarators -> constant-declarators . COMMA constant-declarator

    DELIM           reduce using rule 163 (local-constant-declaration -> CONST type constant-declarators .)
    COMMA           shift and go to state 306


state 238

    (38) constant-declarator -> IDENTIFIER . ASSIGN expression

    ASSIGN          shift and go to state 307


state 239

    (36) constant-declarators -> constant-declarator .

    DELIM           reduce using rule 36 (constant-declarators -> constant-declarator .)
    COMMA           reduce using rule 36 (constant-declarators -> constant-declarator .)


state 240

    (138) block -> BLOCK_BEGIN M_bstart statement-list-opt . BLOCK_END

    BLOCK_END       shift and go to state 308


state 241

    (10) class-header -> CLASS IDENTIFIER class-base-opt .

    BLOCK_BEGIN     reduce using rule 10 (class-header -> CLASS IDENTIFIER class-base-opt .)


state 242

    (11) class-base-opt -> class-base .

    BLOCK_BEGIN     reduce using rule 11 (class-base-opt -> class-base .)


state 243

    (13) class-base -> COLON . class-type
    (14) class-type -> . IDENTIFIER

    IDENTIFIER      shift and go to state 148

    class-type                     shift and go to state 309

state 244

    (12) class-base-opt -> empty .

    BLOCK_BEGIN     reduce using rule 12 (class-base-opt -> empty .)


state 245

    (155) write-statement -> CONSOLE DOT WRITELINE . OPEN_PAREN print-list CLOSE_PAREN DELIM

    OPEN_PAREN      shift and go to state 310


state 246

    (158) read-statement -> CONSOLE DOT READLINE . OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM

    OPEN_PAREN      shift and go to state 311


state 247

    (170) if-statement -> IF OPEN_PAREN expression . CLOSE_PAREN M_if block
    (171) if-statement -> IF OPEN_PAREN expression . CLOSE_PAREN M_if block ELSE M_else block
    (172) if-statement -> IF OPEN_PAREN expression . CLOSE_PAREN M_if block ELSE M_else if-statement M_quad

    CLOSE_PAREN     shift and go to state 312


state 248

    (102) element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .

    ASSIGN          reduce using rule 102 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    PLUSEQUAL       reduce using rule 102 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    MINUSEQUAL      reduce using rule 102 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    TIMESEQUAL      reduce using rule 102 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    DIVEQUAL        reduce using rule 102 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    MODEQUAL        reduce using rule 102 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    BITANDEQUAL     reduce using rule 102 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    BITOREQUAL      reduce using rule 102 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    BITXOREQUAL     reduce using rule 102 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    LSHIFTEQUAL     reduce using rule 102 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    RSHIFTEQUAL     reduce using rule 102 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    TIMES           reduce using rule 102 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    DIV             reduce using rule 102 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    MOD             reduce using rule 102 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    PLUS            reduce using rule 102 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    MINUS           reduce using rule 102 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    LSHIFT          reduce using rule 102 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    RSHIFT          reduce using rule 102 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    LT              reduce using rule 102 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    GT              reduce using rule 102 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    LE              reduce using rule 102 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    GE              reduce using rule 102 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    EQ              reduce using rule 102 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    NE              reduce using rule 102 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    BITAND          reduce using rule 102 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    BITXOR          reduce using rule 102 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    BITOR           reduce using rule 102 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    LOGAND          reduce using rule 102 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    CONDOP          reduce using rule 102 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    LOGOR           reduce using rule 102 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 102 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    DELIM           reduce using rule 102 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    COMMA           reduce using rule 102 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    CLOSE_PAREN     reduce using rule 102 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    COLON           reduce using rule 102 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    BLOCK_END       reduce using rule 102 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)


state 249

    (98) invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .

    TIMES           reduce using rule 98 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    DIV             reduce using rule 98 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    MOD             reduce using rule 98 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    PLUS            reduce using rule 98 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    MINUS           reduce using rule 98 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LSHIFT          reduce using rule 98 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    RSHIFT          reduce using rule 98 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LT              reduce using rule 98 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    GT              reduce using rule 98 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LE              reduce using rule 98 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    GE              reduce using rule 98 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    EQ              reduce using rule 98 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    NE              reduce using rule 98 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITAND          reduce using rule 98 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITXOR          reduce using rule 98 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITOR           reduce using rule 98 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LOGAND          reduce using rule 98 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    CONDOP          reduce using rule 98 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LOGOR           reduce using rule 98 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    DELIM           reduce using rule 98 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    CLOSE_BRACKET   reduce using rule 98 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    COMMA           reduce using rule 98 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 98 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    COLON           reduce using rule 98 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BLOCK_END       reduce using rule 98 (invocation-expression -> member-access OPEN_PAREN argument-list-opt CLOSE_PAREN .)


state 250

    (82) expression-list -> expression-list COMMA . expression
    (39) expression -> . conditional-expression
    (40) expression -> . assignment
    (41) conditional-expression -> . conditional-or-expression
    (42) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (103) assignment -> . IDENTIFIER assignment-operator expression
    (104) assignment -> . member-access assignment-operator expression
    (105) assignment -> . element-access assignment-operator expression
    (43) conditional-or-expression -> . conditional-and-expression
    (44) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (45) conditional-and-expression -> . inclusive-or-expression
    (46) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (47) inclusive-or-expression -> . exclusive-or-expression
    (48) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (49) exclusive-or-expression -> . and-expression
    (50) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (51) and-expression -> . equality-expression
    (52) and-expression -> . and-expression BITAND equality-expression
    (53) equality-expression -> . relational-expression
    (54) equality-expression -> . equality-expression EQ relational-expression
    (55) equality-expression -> . equality-expression NE relational-expression
    (56) relational-expression -> . shift-expression
    (57) relational-expression -> . relational-expression LT shift-expression
    (58) relational-expression -> . relational-expression GT shift-expression
    (59) relational-expression -> . relational-expression LE shift-expression
    (60) relational-expression -> . relational-expression GE shift-expression
    (61) shift-expression -> . additive-expression
    (62) shift-expression -> . shift-expression LSHIFT additive-expression
    (63) shift-expression -> . shift-expression RSHIFT additive-expression
    (64) additive-expression -> . multiplicative-expression
    (65) additive-expression -> . additive-expression PLUS multiplicative-expression
    (66) additive-expression -> . additive-expression MINUS multiplicative-expression
    (67) multiplicative-expression -> . unary-expression
    (68) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (69) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (70) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (71) unary-expression -> . primary-expression
    (72) unary-expression -> . PLUS unary-expression
    (73) unary-expression -> . MINUS unary-expression
    (74) unary-expression -> . BITNOT unary-expression
    (75) unary-expression -> . BITCOMP unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . element-access
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (220) literal -> . ICONST
    (221) literal -> . DCONST
    (222) literal -> . TRUE
    (223) literal -> . FALSE
    (94) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 103
    PLUS            shift and go to state 102
    MINUS           shift and go to state 95
    BITNOT          shift and go to state 117
    BITCOMP         shift and go to state 97
    NEW             shift and go to state 93
    ICONST          shift and go to state 108
    DCONST          shift and go to state 118
    TRUE            shift and go to state 112
    FALSE           shift and go to state 110
    OPEN_PAREN      shift and go to state 99

    exclusive-or-expression        shift and go to state 89
    member-access                  shift and go to state 90
    relational-expression          shift and go to state 91
    additive-expression            shift and go to state 94
    primary-no-array-creation-expression shift and go to state 107
    inclusive-or-expression        shift and go to state 96
    equality-expression            shift and go to state 111
    unary-expression               shift and go to state 88
    element-access                 shift and go to state 98
    literal                        shift and go to state 106
    conditional-expression         shift and go to state 100
    conditional-and-expression     shift and go to state 101
    array-creation-expression      shift and go to state 92
    assignment                     shift and go to state 105
    shift-expression               shift and go to state 113
    and-expression                 shift and go to state 114
    multiplicative-expression      shift and go to state 115
    expression                     shift and go to state 313
    primary-expression             shift and go to state 119
    invocation-expression          shift and go to state 120
    conditional-or-expression      shift and go to state 121
    parenthesized-expression       shift and go to state 122

state 251

    (128) method-header -> VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 314


state 252

    (129) formal-parameter-list-opt -> formal-parameter-list .

    CLOSE_PAREN     reduce using rule 129 (formal-parameter-list-opt -> formal-parameter-list .)


state 253

    (134) fixed-parameter -> type . IDENTIFIER

    IDENTIFIER      shift and go to state 315


state 254

    (130) formal-parameter-list-opt -> empty .

    CLOSE_PAREN     reduce using rule 130 (formal-parameter-list-opt -> empty .)


state 255

    (131) formal-parameter-list -> fixed-parameters .
    (133) fixed-parameters -> fixed-parameters . COMMA fixed-parameter

    CLOSE_PAREN     reduce using rule 131 (formal-parameter-list -> fixed-parameters .)
    COMMA           shift and go to state 316


state 256

    (132) fixed-parameters -> fixed-parameter .

    COMMA           reduce using rule 132 (fixed-parameters -> fixed-parameter .)
    CLOSE_PAREN     reduce using rule 132 (fixed-parameters -> fixed-parameter .)


state 257

    (26) constant-declaration -> CONST simple-type . constant-declarators DELIM
    (36) constant-declarators -> . constant-declarator
    (37) constant-declarators -> . constant-declarators COMMA constant-declarator
    (38) constant-declarator -> . IDENTIFIER ASSIGN expression

    IDENTIFIER      shift and go to state 238

    constant-declarators           shift and go to state 317
    constant-declarator            shift and go to state 239

state 258

    (217) destructor-declaration -> BITCOMP IDENTIFIER . OPEN_PAREN CLOSE_PAREN destructor-body

    OPEN_PAREN      shift and go to state 318


state 259

    (117) field-declaration -> type variable-declarators . DELIM
    (121) variable-declarators -> variable-declarators . COMMA variable-declarator

    DELIM           shift and go to state 319
    COMMA           shift and go to state 231


state 260

    (15) class-body -> BLOCK_BEGIN class-member-declarations-opt BLOCK_END .

    DELIM           reduce using rule 15 (class-body -> BLOCK_BEGIN class-member-declarations-opt BLOCK_END .)
    CLASS           reduce using rule 15 (class-body -> BLOCK_BEGIN class-member-declarations-opt BLOCK_END .)
    $end            reduce using rule 15 (class-body -> BLOCK_BEGIN class-member-declarations-opt BLOCK_END .)


state 261

    (19) class-member-declarations -> class-member-declarations class-member-declaration .

    CONST           reduce using rule 19 (class-member-declarations -> class-member-declarations class-member-declaration .)
    BITCOMP         reduce using rule 19 (class-member-declarations -> class-member-declarations class-member-declaration .)
    PUBLIC          reduce using rule 19 (class-member-declarations -> class-member-declarations class-member-declaration .)
    PRIVATE         reduce using rule 19 (class-member-declarations -> class-member-declarations class-member-declaration .)
    VOID            reduce using rule 19 (class-member-declarations -> class-member-declarations class-member-declaration .)
    IDENTIFIER      reduce using rule 19 (class-member-declarations -> class-member-declarations class-member-declaration .)
    BOOL            reduce using rule 19 (class-member-declarations -> class-member-declarations class-member-declaration .)
    INT             reduce using rule 19 (class-member-declarations -> class-member-declarations class-member-declaration .)
    UINT            reduce using rule 19 (class-member-declarations -> class-member-declarations class-member-declaration .)
    CHAR            reduce using rule 19 (class-member-declarations -> class-member-declarations class-member-declaration .)
    DOUBLE          reduce using rule 19 (class-member-declarations -> class-member-declarations class-member-declaration .)
    BLOCK_END       reduce using rule 19 (class-member-declarations -> class-member-declarations class-member-declaration .)


state 262

    (214) constructor-declarator -> IDENTIFIER OPEN_PAREN . formal-parameter-list-opt CLOSE_PAREN
    (129) formal-parameter-list-opt -> . formal-parameter-list
    (130) formal-parameter-list-opt -> . empty
    (131) formal-parameter-list -> . fixed-parameters
    (224) empty -> .
    (132) fixed-parameters -> . fixed-parameter
    (133) fixed-parameters -> . fixed-parameters COMMA fixed-parameter
    (134) fixed-parameter -> . type IDENTIFIER
    (27) type -> . simple-type
    (28) type -> . class-type
    (29) type -> . array-type
    (30) simple-type -> . BOOL
    (31) simple-type -> . INT
    (32) simple-type -> . UINT
    (33) simple-type -> . CHAR
    (34) simple-type -> . DOUBLE
    (14) class-type -> . IDENTIFIER
    (35) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET

    CLOSE_PAREN     reduce using rule 224 (empty -> .)
    BOOL            shift and go to state 47
    INT             shift and go to state 28
    UINT            shift and go to state 61
    CHAR            shift and go to state 34
    DOUBLE          shift and go to state 12
    IDENTIFIER      shift and go to state 148

    array-type                     shift and go to state 43
    fixed-parameters               shift and go to state 255
    simple-type                    shift and go to state 18
    formal-parameter-list-opt      shift and go to state 320
    class-type                     shift and go to state 64
    formal-parameter-list          shift and go to state 252
    type                           shift and go to state 253
    empty                          shift and go to state 254
    fixed-parameter                shift and go to state 256

state 263

    (213) constructor-declaration -> constructor-declarator constructor-body .

    CONST           reduce using rule 213 (constructor-declaration -> constructor-declarator constructor-body .)
    BITCOMP         reduce using rule 213 (constructor-declaration -> constructor-declarator constructor-body .)
    PUBLIC          reduce using rule 213 (constructor-declaration -> constructor-declarator constructor-body .)
    PRIVATE         reduce using rule 213 (constructor-declaration -> constructor-declarator constructor-body .)
    VOID            reduce using rule 213 (constructor-declaration -> constructor-declarator constructor-body .)
    IDENTIFIER      reduce using rule 213 (constructor-declaration -> constructor-declarator constructor-body .)
    BOOL            reduce using rule 213 (constructor-declaration -> constructor-declarator constructor-body .)
    INT             reduce using rule 213 (constructor-declaration -> constructor-declarator constructor-body .)
    UINT            reduce using rule 213 (constructor-declaration -> constructor-declarator constructor-body .)
    CHAR            reduce using rule 213 (constructor-declaration -> constructor-declarator constructor-body .)
    DOUBLE          reduce using rule 213 (constructor-declaration -> constructor-declarator constructor-body .)
    BLOCK_END       reduce using rule 213 (constructor-declaration -> constructor-declarator constructor-body .)


state 264

    (216) constructor-body -> DELIM .

    CONST           reduce using rule 216 (constructor-body -> DELIM .)
    BITCOMP         reduce using rule 216 (constructor-body -> DELIM .)
    PUBLIC          reduce using rule 216 (constructor-body -> DELIM .)
    PRIVATE         reduce using rule 216 (constructor-body -> DELIM .)
    VOID            reduce using rule 216 (constructor-body -> DELIM .)
    IDENTIFIER      reduce using rule 216 (constructor-body -> DELIM .)
    BOOL            reduce using rule 216 (constructor-body -> DELIM .)
    INT             reduce using rule 216 (constructor-body -> DELIM .)
    UINT            reduce using rule 216 (constructor-body -> DELIM .)
    CHAR            reduce using rule 216 (constructor-body -> DELIM .)
    DOUBLE          reduce using rule 216 (constructor-body -> DELIM .)
    BLOCK_END       reduce using rule 216 (constructor-body -> DELIM .)


state 265

    (215) constructor-body -> block .

    CONST           reduce using rule 215 (constructor-body -> block .)
    BITCOMP         reduce using rule 215 (constructor-body -> block .)
    PUBLIC          reduce using rule 215 (constructor-body -> block .)
    PRIVATE         reduce using rule 215 (constructor-body -> block .)
    VOID            reduce using rule 215 (constructor-body -> block .)
    IDENTIFIER      reduce using rule 215 (constructor-body -> block .)
    BOOL            reduce using rule 215 (constructor-body -> block .)
    INT             reduce using rule 215 (constructor-body -> block .)
    UINT            reduce using rule 215 (constructor-body -> block .)
    CHAR            reduce using rule 215 (constructor-body -> block .)
    DOUBLE          reduce using rule 215 (constructor-body -> block .)
    BLOCK_END       reduce using rule 215 (constructor-body -> block .)


state 266

    (25) constant-declaration -> modifier CONST . simple-type constant-declarators DELIM
    (30) simple-type -> . BOOL
    (31) simple-type -> . INT
    (32) simple-type -> . UINT
    (33) simple-type -> . CHAR
    (34) simple-type -> . DOUBLE

    BOOL            shift and go to state 47
    INT             shift and go to state 28
    UINT            shift and go to state 61
    CHAR            shift and go to state 34
    DOUBLE          shift and go to state 12

    simple-type                    shift and go to state 321

state 267

    (50) exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .
    (52) and-expression -> and-expression . BITAND equality-expression

    BITXOR          reduce using rule 50 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    BITOR           reduce using rule 50 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    LOGAND          reduce using rule 50 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    CONDOP          reduce using rule 50 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    LOGOR           reduce using rule 50 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    CLOSE_PAREN     reduce using rule 50 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    COMMA           reduce using rule 50 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    DELIM           reduce using rule 50 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    CLOSE_BRACKET   reduce using rule 50 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    COLON           reduce using rule 50 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    BLOCK_END       reduce using rule 50 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    BITAND          shift and go to state 206


state 268

    (59) relational-expression -> relational-expression LE shift-expression .
    (62) shift-expression -> shift-expression . LSHIFT additive-expression
    (63) shift-expression -> shift-expression . RSHIFT additive-expression

    LT              reduce using rule 59 (relational-expression -> relational-expression LE shift-expression .)
    GT              reduce using rule 59 (relational-expression -> relational-expression LE shift-expression .)
    LE              reduce using rule 59 (relational-expression -> relational-expression LE shift-expression .)
    GE              reduce using rule 59 (relational-expression -> relational-expression LE shift-expression .)
    EQ              reduce using rule 59 (relational-expression -> relational-expression LE shift-expression .)
    NE              reduce using rule 59 (relational-expression -> relational-expression LE shift-expression .)
    BITAND          reduce using rule 59 (relational-expression -> relational-expression LE shift-expression .)
    BITXOR          reduce using rule 59 (relational-expression -> relational-expression LE shift-expression .)
    BITOR           reduce using rule 59 (relational-expression -> relational-expression LE shift-expression .)
    LOGAND          reduce using rule 59 (relational-expression -> relational-expression LE shift-expression .)
    CONDOP          reduce using rule 59 (relational-expression -> relational-expression LE shift-expression .)
    LOGOR           reduce using rule 59 (relational-expression -> relational-expression LE shift-expression .)
    DELIM           reduce using rule 59 (relational-expression -> relational-expression LE shift-expression .)
    CLOSE_BRACKET   reduce using rule 59 (relational-expression -> relational-expression LE shift-expression .)
    COMMA           reduce using rule 59 (relational-expression -> relational-expression LE shift-expression .)
    CLOSE_PAREN     reduce using rule 59 (relational-expression -> relational-expression LE shift-expression .)
    COLON           reduce using rule 59 (relational-expression -> relational-expression LE shift-expression .)
    BLOCK_END       reduce using rule 59 (relational-expression -> relational-expression LE shift-expression .)
    LSHIFT          shift and go to state 205
    RSHIFT          shift and go to state 204


state 269

    (60) relational-expression -> relational-expression GE shift-expression .
    (62) shift-expression -> shift-expression . LSHIFT additive-expression
    (63) shift-expression -> shift-expression . RSHIFT additive-expression

    LT              reduce using rule 60 (relational-expression -> relational-expression GE shift-expression .)
    GT              reduce using rule 60 (relational-expression -> relational-expression GE shift-expression .)
    LE              reduce using rule 60 (relational-expression -> relational-expression GE shift-expression .)
    GE              reduce using rule 60 (relational-expression -> relational-expression GE shift-expression .)
    EQ              reduce using rule 60 (relational-expression -> relational-expression GE shift-expression .)
    NE              reduce using rule 60 (relational-expression -> relational-expression GE shift-expression .)
    BITAND          reduce using rule 60 (relational-expression -> relational-expression GE shift-expression .)
    BITXOR          reduce using rule 60 (relational-expression -> relational-expression GE shift-expression .)
    BITOR           reduce using rule 60 (relational-expression -> relational-expression GE shift-expression .)
    LOGAND          reduce using rule 60 (relational-expression -> relational-expression GE shift-expression .)
    CONDOP          reduce using rule 60 (relational-expression -> relational-expression GE shift-expression .)
    LOGOR           reduce using rule 60 (relational-expression -> relational-expression GE shift-expression .)
    DELIM           reduce using rule 60 (relational-expression -> relational-expression GE shift-expression .)
    CLOSE_BRACKET   reduce using rule 60 (relational-expression -> relational-expression GE shift-expression .)
    COMMA           reduce using rule 60 (relational-expression -> relational-expression GE shift-expression .)
    CLOSE_PAREN     reduce using rule 60 (relational-expression -> relational-expression GE shift-expression .)
    COLON           reduce using rule 60 (relational-expression -> relational-expression GE shift-expression .)
    BLOCK_END       reduce using rule 60 (relational-expression -> relational-expression GE shift-expression .)
    LSHIFT          shift and go to state 205
    RSHIFT          shift and go to state 204


state 270

    (57) relational-expression -> relational-expression LT shift-expression .
    (62) shift-expression -> shift-expression . LSHIFT additive-expression
    (63) shift-expression -> shift-expression . RSHIFT additive-expression

    LT              reduce using rule 57 (relational-expression -> relational-expression LT shift-expression .)
    GT              reduce using rule 57 (relational-expression -> relational-expression LT shift-expression .)
    LE              reduce using rule 57 (relational-expression -> relational-expression LT shift-expression .)
    GE              reduce using rule 57 (relational-expression -> relational-expression LT shift-expression .)
    EQ              reduce using rule 57 (relational-expression -> relational-expression LT shift-expression .)
    NE              reduce using rule 57 (relational-expression -> relational-expression LT shift-expression .)
    BITAND          reduce using rule 57 (relational-expression -> relational-expression LT shift-expression .)
    BITXOR          reduce using rule 57 (relational-expression -> relational-expression LT shift-expression .)
    BITOR           reduce using rule 57 (relational-expression -> relational-expression LT shift-expression .)
    LOGAND          reduce using rule 57 (relational-expression -> relational-expression LT shift-expression .)
    CONDOP          reduce using rule 57 (relational-expression -> relational-expression LT shift-expression .)
    LOGOR           reduce using rule 57 (relational-expression -> relational-expression LT shift-expression .)
    DELIM           reduce using rule 57 (relational-expression -> relational-expression LT shift-expression .)
    CLOSE_BRACKET   reduce using rule 57 (relational-expression -> relational-expression LT shift-expression .)
    COMMA           reduce using rule 57 (relational-expression -> relational-expression LT shift-expression .)
    CLOSE_PAREN     reduce using rule 57 (relational-expression -> relational-expression LT shift-expression .)
    COLON           reduce using rule 57 (relational-expression -> relational-expression LT shift-expression .)
    BLOCK_END       reduce using rule 57 (relational-expression -> relational-expression LT shift-expression .)
    LSHIFT          shift and go to state 205
    RSHIFT          shift and go to state 204


state 271

    (58) relational-expression -> relational-expression GT shift-expression .
    (62) shift-expression -> shift-expression . LSHIFT additive-expression
    (63) shift-expression -> shift-expression . RSHIFT additive-expression

    LT              reduce using rule 58 (relational-expression -> relational-expression GT shift-expression .)
    GT              reduce using rule 58 (relational-expression -> relational-expression GT shift-expression .)
    LE              reduce using rule 58 (relational-expression -> relational-expression GT shift-expression .)
    GE              reduce using rule 58 (relational-expression -> relational-expression GT shift-expression .)
    EQ              reduce using rule 58 (relational-expression -> relational-expression GT shift-expression .)
    NE              reduce using rule 58 (relational-expression -> relational-expression GT shift-expression .)
    BITAND          reduce using rule 58 (relational-expression -> relational-expression GT shift-expression .)
    BITXOR          reduce using rule 58 (relational-expression -> relational-expression GT shift-expression .)
    BITOR           reduce using rule 58 (relational-expression -> relational-expression GT shift-expression .)
    LOGAND          reduce using rule 58 (relational-expression -> relational-expression GT shift-expression .)
    CONDOP          reduce using rule 58 (relational-expression -> relational-expression GT shift-expression .)
    LOGOR           reduce using rule 58 (relational-expression -> relational-expression GT shift-expression .)
    DELIM           reduce using rule 58 (relational-expression -> relational-expression GT shift-expression .)
    CLOSE_BRACKET   reduce using rule 58 (relational-expression -> relational-expression GT shift-expression .)
    COMMA           reduce using rule 58 (relational-expression -> relational-expression GT shift-expression .)
    CLOSE_PAREN     reduce using rule 58 (relational-expression -> relational-expression GT shift-expression .)
    COLON           reduce using rule 58 (relational-expression -> relational-expression GT shift-expression .)
    BLOCK_END       reduce using rule 58 (relational-expression -> relational-expression GT shift-expression .)
    LSHIFT          shift and go to state 205
    RSHIFT          shift and go to state 204


state 272

    (78) array-creation-expression -> NEW simple-type OPEN_BRACKET . ICONST CLOSE_BRACKET array-initializer-opt

    ICONST          shift and go to state 322


state 273

    (65) additive-expression -> additive-expression PLUS multiplicative-expression .
    (68) multiplicative-expression -> multiplicative-expression . TIMES unary-expression
    (69) multiplicative-expression -> multiplicative-expression . DIV unary-expression
    (70) multiplicative-expression -> multiplicative-expression . MOD unary-expression

    PLUS            reduce using rule 65 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    MINUS           reduce using rule 65 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    LSHIFT          reduce using rule 65 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    RSHIFT          reduce using rule 65 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    LT              reduce using rule 65 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    GT              reduce using rule 65 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    LE              reduce using rule 65 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    GE              reduce using rule 65 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    EQ              reduce using rule 65 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    NE              reduce using rule 65 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    BITAND          reduce using rule 65 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    BITXOR          reduce using rule 65 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    BITOR           reduce using rule 65 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    LOGAND          reduce using rule 65 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    CONDOP          reduce using rule 65 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    LOGOR           reduce using rule 65 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    DELIM           reduce using rule 65 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    CLOSE_BRACKET   reduce using rule 65 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    COMMA           reduce using rule 65 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    CLOSE_PAREN     reduce using rule 65 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    COLON           reduce using rule 65 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    BLOCK_END       reduce using rule 65 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    TIMES           shift and go to state 209
    DIV             shift and go to state 207
    MOD             shift and go to state 208


state 274

    (66) additive-expression -> additive-expression MINUS multiplicative-expression .
    (68) multiplicative-expression -> multiplicative-expression . TIMES unary-expression
    (69) multiplicative-expression -> multiplicative-expression . DIV unary-expression
    (70) multiplicative-expression -> multiplicative-expression . MOD unary-expression

    PLUS            reduce using rule 66 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    MINUS           reduce using rule 66 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    LSHIFT          reduce using rule 66 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    RSHIFT          reduce using rule 66 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    LT              reduce using rule 66 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    GT              reduce using rule 66 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    LE              reduce using rule 66 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    GE              reduce using rule 66 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    EQ              reduce using rule 66 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    NE              reduce using rule 66 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    BITAND          reduce using rule 66 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    BITXOR          reduce using rule 66 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    BITOR           reduce using rule 66 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    LOGAND          reduce using rule 66 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    CONDOP          reduce using rule 66 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    LOGOR           reduce using rule 66 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    DELIM           reduce using rule 66 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    CLOSE_BRACKET   reduce using rule 66 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    COMMA           reduce using rule 66 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    CLOSE_PAREN     reduce using rule 66 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    COLON           reduce using rule 66 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    BLOCK_END       reduce using rule 66 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    TIMES           shift and go to state 209
    DIV             shift and go to state 207
    MOD             shift and go to state 208


state 275

    (48) inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .
    (50) exclusive-or-expression -> exclusive-or-expression . BITXOR and-expression

    BITOR           reduce using rule 48 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    LOGAND          reduce using rule 48 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    CONDOP          reduce using rule 48 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    LOGOR           reduce using rule 48 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    DELIM           reduce using rule 48 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    CLOSE_BRACKET   reduce using rule 48 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    COMMA           reduce using rule 48 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    CLOSE_PAREN     reduce using rule 48 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    COLON           reduce using rule 48 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    BLOCK_END       reduce using rule 48 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    BITXOR          shift and go to state 184


state 276

    (94) parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .

    TIMES           reduce using rule 94 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    DIV             reduce using rule 94 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    MOD             reduce using rule 94 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    PLUS            reduce using rule 94 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    MINUS           reduce using rule 94 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    LSHIFT          reduce using rule 94 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    RSHIFT          reduce using rule 94 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    LT              reduce using rule 94 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    GT              reduce using rule 94 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    LE              reduce using rule 94 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    GE              reduce using rule 94 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    EQ              reduce using rule 94 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    NE              reduce using rule 94 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    BITAND          reduce using rule 94 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    BITXOR          reduce using rule 94 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    BITOR           reduce using rule 94 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    LOGAND          reduce using rule 94 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    CONDOP          reduce using rule 94 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    LOGOR           reduce using rule 94 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 94 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    DELIM           reduce using rule 94 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    CLOSE_BRACKET   reduce using rule 94 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    COMMA           reduce using rule 94 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    COLON           reduce using rule 94 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    BLOCK_END       reduce using rule 94 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)


state 277

    (46) conditional-and-expression -> conditional-and-expression LOGAND inclusive-or-expression .
    (48) inclusive-or-expression -> inclusive-or-expression . BITOR exclusive-or-expression

    LOGAND          reduce using rule 46 (conditional-and-expression -> conditional-and-expression LOGAND inclusive-or-expression .)
    CONDOP          reduce using rule 46 (conditional-and-expression -> conditional-and-expression LOGAND inclusive-or-expression .)
    LOGOR           reduce using rule 46 (conditional-and-expression -> conditional-and-expression LOGAND inclusive-or-expression .)
    CLOSE_PAREN     reduce using rule 46 (conditional-and-expression -> conditional-and-expression LOGAND inclusive-or-expression .)
    DELIM           reduce using rule 46 (conditional-and-expression -> conditional-and-expression LOGAND inclusive-or-expression .)
    CLOSE_BRACKET   reduce using rule 46 (conditional-and-expression -> conditional-and-expression LOGAND inclusive-or-expression .)
    COMMA           reduce using rule 46 (conditional-and-expression -> conditional-and-expression LOGAND inclusive-or-expression .)
    COLON           reduce using rule 46 (conditional-and-expression -> conditional-and-expression LOGAND inclusive-or-expression .)
    BLOCK_END       reduce using rule 46 (conditional-and-expression -> conditional-and-expression LOGAND inclusive-or-expression .)
    BITOR           shift and go to state 196


state 278

    (54) equality-expression -> equality-expression EQ relational-expression .
    (57) relational-expression -> relational-expression . LT shift-expression
    (58) relational-expression -> relational-expression . GT shift-expression
    (59) relational-expression -> relational-expression . LE shift-expression
    (60) relational-expression -> relational-expression . GE shift-expression

    EQ              reduce using rule 54 (equality-expression -> equality-expression EQ relational-expression .)
    NE              reduce using rule 54 (equality-expression -> equality-expression EQ relational-expression .)
    BITAND          reduce using rule 54 (equality-expression -> equality-expression EQ relational-expression .)
    BITXOR          reduce using rule 54 (equality-expression -> equality-expression EQ relational-expression .)
    BITOR           reduce using rule 54 (equality-expression -> equality-expression EQ relational-expression .)
    LOGAND          reduce using rule 54 (equality-expression -> equality-expression EQ relational-expression .)
    CONDOP          reduce using rule 54 (equality-expression -> equality-expression EQ relational-expression .)
    LOGOR           reduce using rule 54 (equality-expression -> equality-expression EQ relational-expression .)
    COMMA           reduce using rule 54 (equality-expression -> equality-expression EQ relational-expression .)
    CLOSE_PAREN     reduce using rule 54 (equality-expression -> equality-expression EQ relational-expression .)
    DELIM           reduce using rule 54 (equality-expression -> equality-expression EQ relational-expression .)
    CLOSE_BRACKET   reduce using rule 54 (equality-expression -> equality-expression EQ relational-expression .)
    COLON           reduce using rule 54 (equality-expression -> equality-expression EQ relational-expression .)
    BLOCK_END       reduce using rule 54 (equality-expression -> equality-expression EQ relational-expression .)
    LT              shift and go to state 187
    GT              shift and go to state 188
    LE              shift and go to state 185
    GE              shift and go to state 186


state 279

    (55) equality-expression -> equality-expression NE relational-expression .
    (57) relational-expression -> relational-expression . LT shift-expression
    (58) relational-expression -> relational-expression . GT shift-expression
    (59) relational-expression -> relational-expression . LE shift-expression
    (60) relational-expression -> relational-expression . GE shift-expression

    EQ              reduce using rule 55 (equality-expression -> equality-expression NE relational-expression .)
    NE              reduce using rule 55 (equality-expression -> equality-expression NE relational-expression .)
    BITAND          reduce using rule 55 (equality-expression -> equality-expression NE relational-expression .)
    BITXOR          reduce using rule 55 (equality-expression -> equality-expression NE relational-expression .)
    BITOR           reduce using rule 55 (equality-expression -> equality-expression NE relational-expression .)
    LOGAND          reduce using rule 55 (equality-expression -> equality-expression NE relational-expression .)
    CONDOP          reduce using rule 55 (equality-expression -> equality-expression NE relational-expression .)
    LOGOR           reduce using rule 55 (equality-expression -> equality-expression NE relational-expression .)
    COMMA           reduce using rule 55 (equality-expression -> equality-expression NE relational-expression .)
    CLOSE_PAREN     reduce using rule 55 (equality-expression -> equality-expression NE relational-expression .)
    DELIM           reduce using rule 55 (equality-expression -> equality-expression NE relational-expression .)
    CLOSE_BRACKET   reduce using rule 55 (equality-expression -> equality-expression NE relational-expression .)
    COLON           reduce using rule 55 (equality-expression -> equality-expression NE relational-expression .)
    BLOCK_END       reduce using rule 55 (equality-expression -> equality-expression NE relational-expression .)
    LT              shift and go to state 187
    GT              shift and go to state 188
    LE              shift and go to state 185
    GE              shift and go to state 186


state 280

    (63) shift-expression -> shift-expression RSHIFT additive-expression .
    (65) additive-expression -> additive-expression . PLUS multiplicative-expression
    (66) additive-expression -> additive-expression . MINUS multiplicative-expression

    LSHIFT          reduce using rule 63 (shift-expression -> shift-expression RSHIFT additive-expression .)
    RSHIFT          reduce using rule 63 (shift-expression -> shift-expression RSHIFT additive-expression .)
    LT              reduce using rule 63 (shift-expression -> shift-expression RSHIFT additive-expression .)
    GT              reduce using rule 63 (shift-expression -> shift-expression RSHIFT additive-expression .)
    LE              reduce using rule 63 (shift-expression -> shift-expression RSHIFT additive-expression .)
    GE              reduce using rule 63 (shift-expression -> shift-expression RSHIFT additive-expression .)
    EQ              reduce using rule 63 (shift-expression -> shift-expression RSHIFT additive-expression .)
    NE              reduce using rule 63 (shift-expression -> shift-expression RSHIFT additive-expression .)
    BITAND          reduce using rule 63 (shift-expression -> shift-expression RSHIFT additive-expression .)
    BITXOR          reduce using rule 63 (shift-expression -> shift-expression RSHIFT additive-expression .)
    BITOR           reduce using rule 63 (shift-expression -> shift-expression RSHIFT additive-expression .)
    LOGAND          reduce using rule 63 (shift-expression -> shift-expression RSHIFT additive-expression .)
    CONDOP          reduce using rule 63 (shift-expression -> shift-expression RSHIFT additive-expression .)
    LOGOR           reduce using rule 63 (shift-expression -> shift-expression RSHIFT additive-expression .)
    DELIM           reduce using rule 63 (shift-expression -> shift-expression RSHIFT additive-expression .)
    CLOSE_BRACKET   reduce using rule 63 (shift-expression -> shift-expression RSHIFT additive-expression .)
    COMMA           reduce using rule 63 (shift-expression -> shift-expression RSHIFT additive-expression .)
    CLOSE_PAREN     reduce using rule 63 (shift-expression -> shift-expression RSHIFT additive-expression .)
    COLON           reduce using rule 63 (shift-expression -> shift-expression RSHIFT additive-expression .)
    BLOCK_END       reduce using rule 63 (shift-expression -> shift-expression RSHIFT additive-expression .)
    PLUS            shift and go to state 190
    MINUS           shift and go to state 191


state 281

    (62) shift-expression -> shift-expression LSHIFT additive-expression .
    (65) additive-expression -> additive-expression . PLUS multiplicative-expression
    (66) additive-expression -> additive-expression . MINUS multiplicative-expression

    LSHIFT          reduce using rule 62 (shift-expression -> shift-expression LSHIFT additive-expression .)
    RSHIFT          reduce using rule 62 (shift-expression -> shift-expression LSHIFT additive-expression .)
    LT              reduce using rule 62 (shift-expression -> shift-expression LSHIFT additive-expression .)
    GT              reduce using rule 62 (shift-expression -> shift-expression LSHIFT additive-expression .)
    LE              reduce using rule 62 (shift-expression -> shift-expression LSHIFT additive-expression .)
    GE              reduce using rule 62 (shift-expression -> shift-expression LSHIFT additive-expression .)
    EQ              reduce using rule 62 (shift-expression -> shift-expression LSHIFT additive-expression .)
    NE              reduce using rule 62 (shift-expression -> shift-expression LSHIFT additive-expression .)
    BITAND          reduce using rule 62 (shift-expression -> shift-expression LSHIFT additive-expression .)
    BITXOR          reduce using rule 62 (shift-expression -> shift-expression LSHIFT additive-expression .)
    BITOR           reduce using rule 62 (shift-expression -> shift-expression LSHIFT additive-expression .)
    LOGAND          reduce using rule 62 (shift-expression -> shift-expression LSHIFT additive-expression .)
    CONDOP          reduce using rule 62 (shift-expression -> shift-expression LSHIFT additive-expression .)
    LOGOR           reduce using rule 62 (shift-expression -> shift-expression LSHIFT additive-expression .)
    DELIM           reduce using rule 62 (shift-expression -> shift-expression LSHIFT additive-expression .)
    CLOSE_BRACKET   reduce using rule 62 (shift-expression -> shift-expression LSHIFT additive-expression .)
    COMMA           reduce using rule 62 (shift-expression -> shift-expression LSHIFT additive-expression .)
    CLOSE_PAREN     reduce using rule 62 (shift-expression -> shift-expression LSHIFT additive-expression .)
    COLON           reduce using rule 62 (shift-expression -> shift-expression LSHIFT additive-expression .)
    BLOCK_END       reduce using rule 62 (shift-expression -> shift-expression LSHIFT additive-expression .)
    PLUS            shift and go to state 190
    MINUS           shift and go to state 191


state 282

    (52) and-expression -> and-expression BITAND equality-expression .
    (54) equality-expression -> equality-expression . EQ relational-expression
    (55) equality-expression -> equality-expression . NE relational-expression

    BITAND          reduce using rule 52 (and-expression -> and-expression BITAND equality-expression .)
    BITXOR          reduce using rule 52 (and-expression -> and-expression BITAND equality-expression .)
    BITOR           reduce using rule 52 (and-expression -> and-expression BITAND equality-expression .)
    LOGAND          reduce using rule 52 (and-expression -> and-expression BITAND equality-expression .)
    CONDOP          reduce using rule 52 (and-expression -> and-expression BITAND equality-expression .)
    LOGOR           reduce using rule 52 (and-expression -> and-expression BITAND equality-expression .)
    COMMA           reduce using rule 52 (and-expression -> and-expression BITAND equality-expression .)
    CLOSE_PAREN     reduce using rule 52 (and-expression -> and-expression BITAND equality-expression .)
    BLOCK_END       reduce using rule 52 (and-expression -> and-expression BITAND equality-expression .)
    DELIM           reduce using rule 52 (and-expression -> and-expression BITAND equality-expression .)
    CLOSE_BRACKET   reduce using rule 52 (and-expression -> and-expression BITAND equality-expression .)
    COLON           reduce using rule 52 (and-expression -> and-expression BITAND equality-expression .)
    EQ              shift and go to state 202
    NE              shift and go to state 203


state 283

    (69) multiplicative-expression -> multiplicative-expression DIV unary-expression .

    TIMES           reduce using rule 69 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    DIV             reduce using rule 69 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    MOD             reduce using rule 69 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    PLUS            reduce using rule 69 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    MINUS           reduce using rule 69 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    LSHIFT          reduce using rule 69 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    RSHIFT          reduce using rule 69 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    LT              reduce using rule 69 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    GT              reduce using rule 69 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    LE              reduce using rule 69 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    GE              reduce using rule 69 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    EQ              reduce using rule 69 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    NE              reduce using rule 69 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    BITAND          reduce using rule 69 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    BITXOR          reduce using rule 69 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    BITOR           reduce using rule 69 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    LOGAND          reduce using rule 69 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    CONDOP          reduce using rule 69 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    LOGOR           reduce using rule 69 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    COMMA           reduce using rule 69 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    BLOCK_END       reduce using rule 69 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    DELIM           reduce using rule 69 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    CLOSE_BRACKET   reduce using rule 69 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    CLOSE_PAREN     reduce using rule 69 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    COLON           reduce using rule 69 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)


state 284

    (70) multiplicative-expression -> multiplicative-expression MOD unary-expression .

    TIMES           reduce using rule 70 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    DIV             reduce using rule 70 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    MOD             reduce using rule 70 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    PLUS            reduce using rule 70 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    MINUS           reduce using rule 70 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    LSHIFT          reduce using rule 70 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    RSHIFT          reduce using rule 70 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    LT              reduce using rule 70 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    GT              reduce using rule 70 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    LE              reduce using rule 70 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    GE              reduce using rule 70 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    EQ              reduce using rule 70 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    NE              reduce using rule 70 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    BITAND          reduce using rule 70 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    BITXOR          reduce using rule 70 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    BITOR           reduce using rule 70 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    LOGAND          reduce using rule 70 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    CONDOP          reduce using rule 70 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    LOGOR           reduce using rule 70 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    COMMA           reduce using rule 70 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    BLOCK_END       reduce using rule 70 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    DELIM           reduce using rule 70 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    CLOSE_BRACKET   reduce using rule 70 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    CLOSE_PAREN     reduce using rule 70 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    COLON           reduce using rule 70 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)


state 285

    (68) multiplicative-expression -> multiplicative-expression TIMES unary-expression .

    TIMES           reduce using rule 68 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    DIV             reduce using rule 68 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    MOD             reduce using rule 68 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    PLUS            reduce using rule 68 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    MINUS           reduce using rule 68 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    LSHIFT          reduce using rule 68 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    RSHIFT          reduce using rule 68 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    LT              reduce using rule 68 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    GT              reduce using rule 68 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    LE              reduce using rule 68 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    GE              reduce using rule 68 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    EQ              reduce using rule 68 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    NE              reduce using rule 68 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    BITAND          reduce using rule 68 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    BITXOR          reduce using rule 68 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    BITOR           reduce using rule 68 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    LOGAND          reduce using rule 68 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    CONDOP          reduce using rule 68 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    LOGOR           reduce using rule 68 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    COMMA           reduce using rule 68 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    BLOCK_END       reduce using rule 68 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    DELIM           reduce using rule 68 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    CLOSE_BRACKET   reduce using rule 68 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    CLOSE_PAREN     reduce using rule 68 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    COLON           reduce using rule 68 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)


state 286

    (44) conditional-or-expression -> conditional-or-expression LOGOR conditional-and-expression .
    (46) conditional-and-expression -> conditional-and-expression . LOGAND inclusive-or-expression

    CONDOP          reduce using rule 44 (conditional-or-expression -> conditional-or-expression LOGOR conditional-and-expression .)
    LOGOR           reduce using rule 44 (conditional-or-expression -> conditional-or-expression LOGOR conditional-and-expression .)
    COMMA           reduce using rule 44 (conditional-or-expression -> conditional-or-expression LOGOR conditional-and-expression .)
    DELIM           reduce using rule 44 (conditional-or-expression -> conditional-or-expression LOGOR conditional-and-expression .)
    CLOSE_PAREN     reduce using rule 44 (conditional-or-expression -> conditional-or-expression LOGOR conditional-and-expression .)
    COLON           reduce using rule 44 (conditional-or-expression -> conditional-or-expression LOGOR conditional-and-expression .)
    CLOSE_BRACKET   reduce using rule 44 (conditional-or-expression -> conditional-or-expression LOGOR conditional-and-expression .)
    BLOCK_END       reduce using rule 44 (conditional-or-expression -> conditional-or-expression LOGOR conditional-and-expression .)
    LOGAND          shift and go to state 199


state 287

    (42) conditional-expression -> conditional-or-expression CONDOP expression . COLON expression

    COLON           shift and go to state 323


state 288

    (137) method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .

    IDENTIFIER      reduce using rule 137 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    BLOCK_BEGIN     reduce using rule 137 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    DELIM           reduce using rule 137 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    CONSOLE         reduce using rule 137 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    CONST           reduce using rule 137 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    IF              reduce using rule 137 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    SWITCH          reduce using rule 137 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    WHILE           reduce using rule 137 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    FOR             reduce using rule 137 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    DO              reduce using rule 137 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    BREAK           reduce using rule 137 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    CONTINUE        reduce using rule 137 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    GOTO            reduce using rule 137 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    RETURN          reduce using rule 137 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    VOID            reduce using rule 137 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    PUBLIC          reduce using rule 137 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    PRIVATE         reduce using rule 137 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    BOOL            reduce using rule 137 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    INT             reduce using rule 137 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    UINT            reduce using rule 137 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    CHAR            reduce using rule 137 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    DOUBLE          reduce using rule 137 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    $end            reduce using rule 137 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    BITCOMP         reduce using rule 137 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    BLOCK_END       reduce using rule 137 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    CASE            reduce using rule 137 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    DEFAULT         reduce using rule 137 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)


state 289

    (35) array-type -> simple-type OPEN_BRACKET ICONST CLOSE_BRACKET .

    IDENTIFIER      reduce using rule 35 (array-type -> simple-type OPEN_BRACKET ICONST CLOSE_BRACKET .)


state 290

    (202) statement-expression-list -> statement-expression-list COMMA . statement-expression
    (166) statement-expression -> . invocation-expression
    (167) statement-expression -> . assignment
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (103) assignment -> . IDENTIFIER assignment-operator expression
    (104) assignment -> . member-access assignment-operator expression
    (105) assignment -> . element-access assignment-operator expression
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    IDENTIFIER      shift and go to state 221

    assignment                     shift and go to state 59
    member-access                  shift and go to state 2
    element-access                 shift and go to state 21
    statement-expression           shift and go to state 324
    invocation-expression          shift and go to state 14

state 291

    (193) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM . M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block
    (175) M_quad -> . empty
    (224) empty -> .

    IDENTIFIER      reduce using rule 224 (empty -> .)
    PLUS            reduce using rule 224 (empty -> .)
    MINUS           reduce using rule 224 (empty -> .)
    BITNOT          reduce using rule 224 (empty -> .)
    BITCOMP         reduce using rule 224 (empty -> .)
    NEW             reduce using rule 224 (empty -> .)
    ICONST          reduce using rule 224 (empty -> .)
    DCONST          reduce using rule 224 (empty -> .)
    TRUE            reduce using rule 224 (empty -> .)
    FALSE           reduce using rule 224 (empty -> .)
    OPEN_PAREN      reduce using rule 224 (empty -> .)

    M_quad                         shift and go to state 325
    empty                          shift and go to state 82

state 292

    (176) switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN . switch-block
    (177) switch-block -> . BLOCK_BEGIN switch-sections-opt BLOCK_END

    BLOCK_BEGIN     shift and go to state 326

    switch-block                   shift and go to state 327

state 293

    (190) while-statement -> WHILE M_quad OPEN_PAREN expression . CLOSE_PAREN M_while block

    CLOSE_PAREN     shift and go to state 328


state 294

    (101) element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .

    ASSIGN          reduce using rule 101 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    PLUSEQUAL       reduce using rule 101 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    MINUSEQUAL      reduce using rule 101 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    TIMESEQUAL      reduce using rule 101 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    DIVEQUAL        reduce using rule 101 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    MODEQUAL        reduce using rule 101 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    BITANDEQUAL     reduce using rule 101 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    BITOREQUAL      reduce using rule 101 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    BITXOREQUAL     reduce using rule 101 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    LSHIFTEQUAL     reduce using rule 101 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    RSHIFTEQUAL     reduce using rule 101 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    TIMES           reduce using rule 101 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    DIV             reduce using rule 101 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    MOD             reduce using rule 101 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    PLUS            reduce using rule 101 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    MINUS           reduce using rule 101 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    LSHIFT          reduce using rule 101 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    RSHIFT          reduce using rule 101 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    LT              reduce using rule 101 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    GT              reduce using rule 101 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    LE              reduce using rule 101 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    GE              reduce using rule 101 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    EQ              reduce using rule 101 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    NE              reduce using rule 101 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    BITAND          reduce using rule 101 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    BITXOR          reduce using rule 101 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    BITOR           reduce using rule 101 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    LOGAND          reduce using rule 101 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    CONDOP          reduce using rule 101 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    LOGOR           reduce using rule 101 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 101 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    DELIM           reduce using rule 101 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    COMMA           reduce using rule 101 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    CLOSE_PAREN     reduce using rule 101 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    COLON           reduce using rule 101 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    BLOCK_END       reduce using rule 101 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)


state 295

    (97) invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .

    TIMES           reduce using rule 97 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    DIV             reduce using rule 97 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    MOD             reduce using rule 97 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    PLUS            reduce using rule 97 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    MINUS           reduce using rule 97 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LSHIFT          reduce using rule 97 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    RSHIFT          reduce using rule 97 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LT              reduce using rule 97 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    GT              reduce using rule 97 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LE              reduce using rule 97 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    GE              reduce using rule 97 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    EQ              reduce using rule 97 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    NE              reduce using rule 97 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITAND          reduce using rule 97 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITXOR          reduce using rule 97 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITOR           reduce using rule 97 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LOGAND          reduce using rule 97 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    CONDOP          reduce using rule 97 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LOGOR           reduce using rule 97 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    DELIM           reduce using rule 97 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    CLOSE_BRACKET   reduce using rule 97 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    COMMA           reduce using rule 97 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 97 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    COLON           reduce using rule 97 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BLOCK_END       reduce using rule 97 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)


state 296

    (121) variable-declarators -> variable-declarators COMMA variable-declarator .

    DELIM           reduce using rule 121 (variable-declarators -> variable-declarators COMMA variable-declarator .)
    COMMA           reduce using rule 121 (variable-declarators -> variable-declarators COMMA variable-declarator .)


state 297

    (122) variable-declarator -> IDENTIFIER .
    (123) variable-declarator -> IDENTIFIER . ASSIGN variable-initializer

    COMMA           reduce using rule 122 (variable-declarator -> IDENTIFIER .)
    DELIM           reduce using rule 122 (variable-declarator -> IDENTIFIER .)
    ASSIGN          shift and go to state 233


state 298

    (127) method-header -> type IDENTIFIER OPEN_PAREN formal-parameter-list-opt . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 329


state 299

    (83) array-initializer -> BLOCK_BEGIN . variable-initializer-list-opt BLOCK_END
    (84) variable-initializer-list-opt -> . expression-list
    (85) variable-initializer-list-opt -> . empty
    (81) expression-list -> . expression
    (82) expression-list -> . expression-list COMMA expression
    (224) empty -> .
    (39) expression -> . conditional-expression
    (40) expression -> . assignment
    (41) conditional-expression -> . conditional-or-expression
    (42) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (103) assignment -> . IDENTIFIER assignment-operator expression
    (104) assignment -> . member-access assignment-operator expression
    (105) assignment -> . element-access assignment-operator expression
    (43) conditional-or-expression -> . conditional-and-expression
    (44) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (45) conditional-and-expression -> . inclusive-or-expression
    (46) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (47) inclusive-or-expression -> . exclusive-or-expression
    (48) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (49) exclusive-or-expression -> . and-expression
    (50) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (51) and-expression -> . equality-expression
    (52) and-expression -> . and-expression BITAND equality-expression
    (53) equality-expression -> . relational-expression
    (54) equality-expression -> . equality-expression EQ relational-expression
    (55) equality-expression -> . equality-expression NE relational-expression
    (56) relational-expression -> . shift-expression
    (57) relational-expression -> . relational-expression LT shift-expression
    (58) relational-expression -> . relational-expression GT shift-expression
    (59) relational-expression -> . relational-expression LE shift-expression
    (60) relational-expression -> . relational-expression GE shift-expression
    (61) shift-expression -> . additive-expression
    (62) shift-expression -> . shift-expression LSHIFT additive-expression
    (63) shift-expression -> . shift-expression RSHIFT additive-expression
    (64) additive-expression -> . multiplicative-expression
    (65) additive-expression -> . additive-expression PLUS multiplicative-expression
    (66) additive-expression -> . additive-expression MINUS multiplicative-expression
    (67) multiplicative-expression -> . unary-expression
    (68) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (69) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (70) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (71) unary-expression -> . primary-expression
    (72) unary-expression -> . PLUS unary-expression
    (73) unary-expression -> . MINUS unary-expression
    (74) unary-expression -> . BITNOT unary-expression
    (75) unary-expression -> . BITCOMP unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . element-access
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (220) literal -> . ICONST
    (221) literal -> . DCONST
    (222) literal -> . TRUE
    (223) literal -> . FALSE
    (94) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    BLOCK_END       reduce using rule 224 (empty -> .)
    IDENTIFIER      shift and go to state 103
    PLUS            shift and go to state 102
    MINUS           shift and go to state 95
    BITNOT          shift and go to state 117
    BITCOMP         shift and go to state 97
    NEW             shift and go to state 93
    ICONST          shift and go to state 108
    DCONST          shift and go to state 118
    TRUE            shift and go to state 112
    FALSE           shift and go to state 110
    OPEN_PAREN      shift and go to state 99

    exclusive-or-expression        shift and go to state 89
    member-access                  shift and go to state 90
    relational-expression          shift and go to state 91
    additive-expression            shift and go to state 94
    primary-no-array-creation-expression shift and go to state 107
    inclusive-or-expression        shift and go to state 96
    expression-list                shift and go to state 332
    unary-expression               shift and go to state 88
    element-access                 shift and go to state 98
    literal                        shift and go to state 106
    conditional-expression         shift and go to state 100
    conditional-and-expression     shift and go to state 101
    variable-initializer-list-opt  shift and go to state 331
    empty                          shift and go to state 330
    array-creation-expression      shift and go to state 92
    assignment                     shift and go to state 105
    equality-expression            shift and go to state 111
    shift-expression               shift and go to state 113
    and-expression                 shift and go to state 114
    multiplicative-expression      shift and go to state 115
    expression                     shift and go to state 162
    primary-expression             shift and go to state 119
    invocation-expression          shift and go to state 120
    conditional-or-expression      shift and go to state 121
    parenthesized-expression       shift and go to state 122

state 300

    (87) variable-initializer -> array-initializer .

    COMMA           reduce using rule 87 (variable-initializer -> array-initializer .)
    DELIM           reduce using rule 87 (variable-initializer -> array-initializer .)


state 301

    (123) variable-declarator -> IDENTIFIER ASSIGN variable-initializer .

    COMMA           reduce using rule 123 (variable-declarator -> IDENTIFIER ASSIGN variable-initializer .)
    DELIM           reduce using rule 123 (variable-declarator -> IDENTIFIER ASSIGN variable-initializer .)


state 302

    (86) variable-initializer -> expression .

    COMMA           reduce using rule 86 (variable-initializer -> expression .)
    DELIM           reduce using rule 86 (variable-initializer -> expression .)


state 303

    (126) method-header -> modifier VOID IDENTIFIER OPEN_PAREN . formal-parameter-list-opt CLOSE_PAREN
    (129) formal-parameter-list-opt -> . formal-parameter-list
    (130) formal-parameter-list-opt -> . empty
    (131) formal-parameter-list -> . fixed-parameters
    (224) empty -> .
    (132) fixed-parameters -> . fixed-parameter
    (133) fixed-parameters -> . fixed-parameters COMMA fixed-parameter
    (134) fixed-parameter -> . type IDENTIFIER
    (27) type -> . simple-type
    (28) type -> . class-type
    (29) type -> . array-type
    (30) simple-type -> . BOOL
    (31) simple-type -> . INT
    (32) simple-type -> . UINT
    (33) simple-type -> . CHAR
    (34) simple-type -> . DOUBLE
    (14) class-type -> . IDENTIFIER
    (35) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET

    CLOSE_PAREN     reduce using rule 224 (empty -> .)
    BOOL            shift and go to state 47
    INT             shift and go to state 28
    UINT            shift and go to state 61
    CHAR            shift and go to state 34
    DOUBLE          shift and go to state 12
    IDENTIFIER      shift and go to state 148

    array-type                     shift and go to state 43
    formal-parameter-list          shift and go to state 252
    fixed-parameters               shift and go to state 255
    simple-type                    shift and go to state 18
    formal-parameter-list-opt      shift and go to state 333
    class-type                     shift and go to state 64
    type                           shift and go to state 253
    empty                          shift and go to state 254
    fixed-parameter                shift and go to state 256

state 304

    (125) method-header -> modifier type IDENTIFIER OPEN_PAREN . formal-parameter-list-opt CLOSE_PAREN
    (129) formal-parameter-list-opt -> . formal-parameter-list
    (130) formal-parameter-list-opt -> . empty
    (131) formal-parameter-list -> . fixed-parameters
    (224) empty -> .
    (132) fixed-parameters -> . fixed-parameter
    (133) fixed-parameters -> . fixed-parameters COMMA fixed-parameter
    (134) fixed-parameter -> . type IDENTIFIER
    (27) type -> . simple-type
    (28) type -> . class-type
    (29) type -> . array-type
    (30) simple-type -> . BOOL
    (31) simple-type -> . INT
    (32) simple-type -> . UINT
    (33) simple-type -> . CHAR
    (34) simple-type -> . DOUBLE
    (14) class-type -> . IDENTIFIER
    (35) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET

    CLOSE_PAREN     reduce using rule 224 (empty -> .)
    BOOL            shift and go to state 47
    INT             shift and go to state 28
    UINT            shift and go to state 61
    CHAR            shift and go to state 34
    DOUBLE          shift and go to state 12
    IDENTIFIER      shift and go to state 148

    array-type                     shift and go to state 43
    class-type                     shift and go to state 64
    fixed-parameters               shift and go to state 255
    simple-type                    shift and go to state 18
    formal-parameter-list-opt      shift and go to state 334
    fixed-parameter                shift and go to state 256
    type                           shift and go to state 253
    empty                          shift and go to state 254
    formal-parameter-list          shift and go to state 252

state 305

    (192) do-statement -> DO M_quad block WHILE . OPEN_PAREN M_quad expression CLOSE_PAREN DELIM

    OPEN_PAREN      shift and go to state 335


state 306

    (37) constant-declarators -> constant-declarators COMMA . constant-declarator
    (38) constant-declarator -> . IDENTIFIER ASSIGN expression

    IDENTIFIER      shift and go to state 238

    constant-declarator            shift and go to state 336

state 307

    (38) constant-declarator -> IDENTIFIER ASSIGN . expression
    (39) expression -> . conditional-expression
    (40) expression -> . assignment
    (41) conditional-expression -> . conditional-or-expression
    (42) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (103) assignment -> . IDENTIFIER assignment-operator expression
    (104) assignment -> . member-access assignment-operator expression
    (105) assignment -> . element-access assignment-operator expression
    (43) conditional-or-expression -> . conditional-and-expression
    (44) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (45) conditional-and-expression -> . inclusive-or-expression
    (46) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (47) inclusive-or-expression -> . exclusive-or-expression
    (48) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (49) exclusive-or-expression -> . and-expression
    (50) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (51) and-expression -> . equality-expression
    (52) and-expression -> . and-expression BITAND equality-expression
    (53) equality-expression -> . relational-expression
    (54) equality-expression -> . equality-expression EQ relational-expression
    (55) equality-expression -> . equality-expression NE relational-expression
    (56) relational-expression -> . shift-expression
    (57) relational-expression -> . relational-expression LT shift-expression
    (58) relational-expression -> . relational-expression GT shift-expression
    (59) relational-expression -> . relational-expression LE shift-expression
    (60) relational-expression -> . relational-expression GE shift-expression
    (61) shift-expression -> . additive-expression
    (62) shift-expression -> . shift-expression LSHIFT additive-expression
    (63) shift-expression -> . shift-expression RSHIFT additive-expression
    (64) additive-expression -> . multiplicative-expression
    (65) additive-expression -> . additive-expression PLUS multiplicative-expression
    (66) additive-expression -> . additive-expression MINUS multiplicative-expression
    (67) multiplicative-expression -> . unary-expression
    (68) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (69) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (70) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (71) unary-expression -> . primary-expression
    (72) unary-expression -> . PLUS unary-expression
    (73) unary-expression -> . MINUS unary-expression
    (74) unary-expression -> . BITNOT unary-expression
    (75) unary-expression -> . BITCOMP unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . element-access
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (220) literal -> . ICONST
    (221) literal -> . DCONST
    (222) literal -> . TRUE
    (223) literal -> . FALSE
    (94) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 103
    PLUS            shift and go to state 102
    MINUS           shift and go to state 95
    BITNOT          shift and go to state 117
    BITCOMP         shift and go to state 97
    NEW             shift and go to state 93
    ICONST          shift and go to state 108
    DCONST          shift and go to state 118
    TRUE            shift and go to state 112
    FALSE           shift and go to state 110
    OPEN_PAREN      shift and go to state 99

    exclusive-or-expression        shift and go to state 89
    member-access                  shift and go to state 90
    relational-expression          shift and go to state 91
    additive-expression            shift and go to state 94
    primary-no-array-creation-expression shift and go to state 107
    inclusive-or-expression        shift and go to state 96
    unary-expression               shift and go to state 88
    element-access                 shift and go to state 98
    literal                        shift and go to state 106
    conditional-expression         shift and go to state 100
    conditional-and-expression     shift and go to state 101
    array-creation-expression      shift and go to state 92
    assignment                     shift and go to state 105
    equality-expression            shift and go to state 111
    shift-expression               shift and go to state 113
    and-expression                 shift and go to state 114
    multiplicative-expression      shift and go to state 115
    conditional-or-expression      shift and go to state 121
    primary-expression             shift and go to state 119
    invocation-expression          shift and go to state 120
    expression                     shift and go to state 337
    parenthesized-expression       shift and go to state 122

state 308

    (138) block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .

    IDENTIFIER      reduce using rule 138 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    BLOCK_BEGIN     reduce using rule 138 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    DELIM           reduce using rule 138 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    CONSOLE         reduce using rule 138 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    CONST           reduce using rule 138 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    IF              reduce using rule 138 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    SWITCH          reduce using rule 138 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    WHILE           reduce using rule 138 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    FOR             reduce using rule 138 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    DO              reduce using rule 138 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    BREAK           reduce using rule 138 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    CONTINUE        reduce using rule 138 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    GOTO            reduce using rule 138 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    RETURN          reduce using rule 138 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    VOID            reduce using rule 138 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    PUBLIC          reduce using rule 138 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    PRIVATE         reduce using rule 138 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    BOOL            reduce using rule 138 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    INT             reduce using rule 138 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    UINT            reduce using rule 138 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    CHAR            reduce using rule 138 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    DOUBLE          reduce using rule 138 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    $end            reduce using rule 138 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    BLOCK_END       reduce using rule 138 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    CASE            reduce using rule 138 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    DEFAULT         reduce using rule 138 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    BITCOMP         reduce using rule 138 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    ELSE            reduce using rule 138 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)


state 309

    (13) class-base -> COLON class-type .

    BLOCK_BEGIN     reduce using rule 13 (class-base -> COLON class-type .)


state 310

    (155) write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN . print-list CLOSE_PAREN DELIM
    (156) print-list -> . expression
    (157) print-list -> . expression COMMA print-list
    (39) expression -> . conditional-expression
    (40) expression -> . assignment
    (41) conditional-expression -> . conditional-or-expression
    (42) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (103) assignment -> . IDENTIFIER assignment-operator expression
    (104) assignment -> . member-access assignment-operator expression
    (105) assignment -> . element-access assignment-operator expression
    (43) conditional-or-expression -> . conditional-and-expression
    (44) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (45) conditional-and-expression -> . inclusive-or-expression
    (46) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (47) inclusive-or-expression -> . exclusive-or-expression
    (48) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (49) exclusive-or-expression -> . and-expression
    (50) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (51) and-expression -> . equality-expression
    (52) and-expression -> . and-expression BITAND equality-expression
    (53) equality-expression -> . relational-expression
    (54) equality-expression -> . equality-expression EQ relational-expression
    (55) equality-expression -> . equality-expression NE relational-expression
    (56) relational-expression -> . shift-expression
    (57) relational-expression -> . relational-expression LT shift-expression
    (58) relational-expression -> . relational-expression GT shift-expression
    (59) relational-expression -> . relational-expression LE shift-expression
    (60) relational-expression -> . relational-expression GE shift-expression
    (61) shift-expression -> . additive-expression
    (62) shift-expression -> . shift-expression LSHIFT additive-expression
    (63) shift-expression -> . shift-expression RSHIFT additive-expression
    (64) additive-expression -> . multiplicative-expression
    (65) additive-expression -> . additive-expression PLUS multiplicative-expression
    (66) additive-expression -> . additive-expression MINUS multiplicative-expression
    (67) multiplicative-expression -> . unary-expression
    (68) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (69) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (70) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (71) unary-expression -> . primary-expression
    (72) unary-expression -> . PLUS unary-expression
    (73) unary-expression -> . MINUS unary-expression
    (74) unary-expression -> . BITNOT unary-expression
    (75) unary-expression -> . BITCOMP unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . element-access
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (220) literal -> . ICONST
    (221) literal -> . DCONST
    (222) literal -> . TRUE
    (223) literal -> . FALSE
    (94) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 103
    PLUS            shift and go to state 102
    MINUS           shift and go to state 95
    BITNOT          shift and go to state 117
    BITCOMP         shift and go to state 97
    NEW             shift and go to state 93
    ICONST          shift and go to state 108
    DCONST          shift and go to state 118
    TRUE            shift and go to state 112
    FALSE           shift and go to state 110
    OPEN_PAREN      shift and go to state 99

    exclusive-or-expression        shift and go to state 89
    member-access                  shift and go to state 90
    relational-expression          shift and go to state 91
    additive-expression            shift and go to state 94
    primary-no-array-creation-expression shift and go to state 107
    inclusive-or-expression        shift and go to state 96
    unary-expression               shift and go to state 88
    element-access                 shift and go to state 98
    literal                        shift and go to state 106
    conditional-expression         shift and go to state 100
    conditional-and-expression     shift and go to state 101
    array-creation-expression      shift and go to state 92
    assignment                     shift and go to state 105
    and-expression                 shift and go to state 114
    equality-expression            shift and go to state 111
    shift-expression               shift and go to state 113
    print-list                     shift and go to state 338
    multiplicative-expression      shift and go to state 115
    expression                     shift and go to state 339
    primary-expression             shift and go to state 119
    invocation-expression          shift and go to state 120
    conditional-or-expression      shift and go to state 121
    parenthesized-expression       shift and go to state 122

state 311

    (158) read-statement -> CONSOLE DOT READLINE OPEN_PAREN . IDENTIFIER CLOSE_PAREN DELIM

    IDENTIFIER      shift and go to state 340


state 312

    (170) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN . M_if block
    (171) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN . M_if block ELSE M_else block
    (172) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN . M_if block ELSE M_else if-statement M_quad
    (173) M_if -> . empty
    (224) empty -> .

    BLOCK_BEGIN     reduce using rule 224 (empty -> .)

    M_if                           shift and go to state 341
    empty                          shift and go to state 342

state 313

    (82) expression-list -> expression-list COMMA expression .

    COMMA           reduce using rule 82 (expression-list -> expression-list COMMA expression .)
    CLOSE_PAREN     reduce using rule 82 (expression-list -> expression-list COMMA expression .)
    BLOCK_END       reduce using rule 82 (expression-list -> expression-list COMMA expression .)


state 314

    (128) method-header -> VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .

    DELIM           reduce using rule 128 (method-header -> VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)
    BLOCK_BEGIN     reduce using rule 128 (method-header -> VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)


state 315

    (134) fixed-parameter -> type IDENTIFIER .

    COMMA           reduce using rule 134 (fixed-parameter -> type IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 134 (fixed-parameter -> type IDENTIFIER .)


state 316

    (133) fixed-parameters -> fixed-parameters COMMA . fixed-parameter
    (134) fixed-parameter -> . type IDENTIFIER
    (27) type -> . simple-type
    (28) type -> . class-type
    (29) type -> . array-type
    (30) simple-type -> . BOOL
    (31) simple-type -> . INT
    (32) simple-type -> . UINT
    (33) simple-type -> . CHAR
    (34) simple-type -> . DOUBLE
    (14) class-type -> . IDENTIFIER
    (35) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET

    BOOL            shift and go to state 47
    INT             shift and go to state 28
    UINT            shift and go to state 61
    CHAR            shift and go to state 34
    DOUBLE          shift and go to state 12
    IDENTIFIER      shift and go to state 148

    array-type                     shift and go to state 43
    simple-type                    shift and go to state 18
    class-type                     shift and go to state 64
    type                           shift and go to state 253
    fixed-parameter                shift and go to state 343

state 317

    (26) constant-declaration -> CONST simple-type constant-declarators . DELIM
    (37) constant-declarators -> constant-declarators . COMMA constant-declarator

    DELIM           shift and go to state 344
    COMMA           shift and go to state 306


state 318

    (217) destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN . CLOSE_PAREN destructor-body

    CLOSE_PAREN     shift and go to state 345


state 319

    (117) field-declaration -> type variable-declarators DELIM .

    CONST           reduce using rule 117 (field-declaration -> type variable-declarators DELIM .)
    BITCOMP         reduce using rule 117 (field-declaration -> type variable-declarators DELIM .)
    PUBLIC          reduce using rule 117 (field-declaration -> type variable-declarators DELIM .)
    PRIVATE         reduce using rule 117 (field-declaration -> type variable-declarators DELIM .)
    VOID            reduce using rule 117 (field-declaration -> type variable-declarators DELIM .)
    IDENTIFIER      reduce using rule 117 (field-declaration -> type variable-declarators DELIM .)
    BOOL            reduce using rule 117 (field-declaration -> type variable-declarators DELIM .)
    INT             reduce using rule 117 (field-declaration -> type variable-declarators DELIM .)
    UINT            reduce using rule 117 (field-declaration -> type variable-declarators DELIM .)
    CHAR            reduce using rule 117 (field-declaration -> type variable-declarators DELIM .)
    DOUBLE          reduce using rule 117 (field-declaration -> type variable-declarators DELIM .)
    BLOCK_END       reduce using rule 117 (field-declaration -> type variable-declarators DELIM .)


state 320

    (214) constructor-declarator -> IDENTIFIER OPEN_PAREN formal-parameter-list-opt . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 346


state 321

    (25) constant-declaration -> modifier CONST simple-type . constant-declarators DELIM
    (36) constant-declarators -> . constant-declarator
    (37) constant-declarators -> . constant-declarators COMMA constant-declarator
    (38) constant-declarator -> . IDENTIFIER ASSIGN expression

    IDENTIFIER      shift and go to state 238

    constant-declarators           shift and go to state 347
    constant-declarator            shift and go to state 239

state 322

    (78) array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST . CLOSE_BRACKET array-initializer-opt

    CLOSE_BRACKET   shift and go to state 348


state 323

    (42) conditional-expression -> conditional-or-expression CONDOP expression COLON . expression
    (39) expression -> . conditional-expression
    (40) expression -> . assignment
    (41) conditional-expression -> . conditional-or-expression
    (42) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (103) assignment -> . IDENTIFIER assignment-operator expression
    (104) assignment -> . member-access assignment-operator expression
    (105) assignment -> . element-access assignment-operator expression
    (43) conditional-or-expression -> . conditional-and-expression
    (44) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (45) conditional-and-expression -> . inclusive-or-expression
    (46) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (47) inclusive-or-expression -> . exclusive-or-expression
    (48) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (49) exclusive-or-expression -> . and-expression
    (50) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (51) and-expression -> . equality-expression
    (52) and-expression -> . and-expression BITAND equality-expression
    (53) equality-expression -> . relational-expression
    (54) equality-expression -> . equality-expression EQ relational-expression
    (55) equality-expression -> . equality-expression NE relational-expression
    (56) relational-expression -> . shift-expression
    (57) relational-expression -> . relational-expression LT shift-expression
    (58) relational-expression -> . relational-expression GT shift-expression
    (59) relational-expression -> . relational-expression LE shift-expression
    (60) relational-expression -> . relational-expression GE shift-expression
    (61) shift-expression -> . additive-expression
    (62) shift-expression -> . shift-expression LSHIFT additive-expression
    (63) shift-expression -> . shift-expression RSHIFT additive-expression
    (64) additive-expression -> . multiplicative-expression
    (65) additive-expression -> . additive-expression PLUS multiplicative-expression
    (66) additive-expression -> . additive-expression MINUS multiplicative-expression
    (67) multiplicative-expression -> . unary-expression
    (68) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (69) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (70) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (71) unary-expression -> . primary-expression
    (72) unary-expression -> . PLUS unary-expression
    (73) unary-expression -> . MINUS unary-expression
    (74) unary-expression -> . BITNOT unary-expression
    (75) unary-expression -> . BITCOMP unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . element-access
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (220) literal -> . ICONST
    (221) literal -> . DCONST
    (222) literal -> . TRUE
    (223) literal -> . FALSE
    (94) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 103
    PLUS            shift and go to state 102
    MINUS           shift and go to state 95
    BITNOT          shift and go to state 117
    BITCOMP         shift and go to state 97
    NEW             shift and go to state 93
    ICONST          shift and go to state 108
    DCONST          shift and go to state 118
    TRUE            shift and go to state 112
    FALSE           shift and go to state 110
    OPEN_PAREN      shift and go to state 99

    exclusive-or-expression        shift and go to state 89
    member-access                  shift and go to state 90
    relational-expression          shift and go to state 91
    additive-expression            shift and go to state 94
    primary-no-array-creation-expression shift and go to state 107
    inclusive-or-expression        shift and go to state 96
    unary-expression               shift and go to state 88
    element-access                 shift and go to state 98
    literal                        shift and go to state 106
    conditional-expression         shift and go to state 100
    conditional-and-expression     shift and go to state 101
    array-creation-expression      shift and go to state 92
    assignment                     shift and go to state 105
    equality-expression            shift and go to state 111
    shift-expression               shift and go to state 113
    and-expression                 shift and go to state 114
    multiplicative-expression      shift and go to state 115
    expression                     shift and go to state 349
    primary-expression             shift and go to state 119
    invocation-expression          shift and go to state 120
    conditional-or-expression      shift and go to state 121
    parenthesized-expression       shift and go to state 122

state 324

    (202) statement-expression-list -> statement-expression-list COMMA statement-expression .

    COMMA           reduce using rule 202 (statement-expression-list -> statement-expression-list COMMA statement-expression .)
    CLOSE_PAREN     reduce using rule 202 (statement-expression-list -> statement-expression-list COMMA statement-expression .)
    DELIM           reduce using rule 202 (statement-expression-list -> statement-expression-list COMMA statement-expression .)


state 325

    (193) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad . for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block
    (197) for-condition -> . expression
    (39) expression -> . conditional-expression
    (40) expression -> . assignment
    (41) conditional-expression -> . conditional-or-expression
    (42) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (103) assignment -> . IDENTIFIER assignment-operator expression
    (104) assignment -> . member-access assignment-operator expression
    (105) assignment -> . element-access assignment-operator expression
    (43) conditional-or-expression -> . conditional-and-expression
    (44) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (45) conditional-and-expression -> . inclusive-or-expression
    (46) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (47) inclusive-or-expression -> . exclusive-or-expression
    (48) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (49) exclusive-or-expression -> . and-expression
    (50) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (51) and-expression -> . equality-expression
    (52) and-expression -> . and-expression BITAND equality-expression
    (53) equality-expression -> . relational-expression
    (54) equality-expression -> . equality-expression EQ relational-expression
    (55) equality-expression -> . equality-expression NE relational-expression
    (56) relational-expression -> . shift-expression
    (57) relational-expression -> . relational-expression LT shift-expression
    (58) relational-expression -> . relational-expression GT shift-expression
    (59) relational-expression -> . relational-expression LE shift-expression
    (60) relational-expression -> . relational-expression GE shift-expression
    (61) shift-expression -> . additive-expression
    (62) shift-expression -> . shift-expression LSHIFT additive-expression
    (63) shift-expression -> . shift-expression RSHIFT additive-expression
    (64) additive-expression -> . multiplicative-expression
    (65) additive-expression -> . additive-expression PLUS multiplicative-expression
    (66) additive-expression -> . additive-expression MINUS multiplicative-expression
    (67) multiplicative-expression -> . unary-expression
    (68) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (69) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (70) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (71) unary-expression -> . primary-expression
    (72) unary-expression -> . PLUS unary-expression
    (73) unary-expression -> . MINUS unary-expression
    (74) unary-expression -> . BITNOT unary-expression
    (75) unary-expression -> . BITCOMP unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . element-access
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (220) literal -> . ICONST
    (221) literal -> . DCONST
    (222) literal -> . TRUE
    (223) literal -> . FALSE
    (94) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 103
    PLUS            shift and go to state 102
    MINUS           shift and go to state 95
    BITNOT          shift and go to state 117
    BITCOMP         shift and go to state 97
    NEW             shift and go to state 93
    ICONST          shift and go to state 108
    DCONST          shift and go to state 118
    TRUE            shift and go to state 112
    FALSE           shift and go to state 110
    OPEN_PAREN      shift and go to state 99

    exclusive-or-expression        shift and go to state 89
    member-access                  shift and go to state 90
    relational-expression          shift and go to state 91
    additive-expression            shift and go to state 94
    primary-no-array-creation-expression shift and go to state 107
    for-condition                  shift and go to state 350
    unary-expression               shift and go to state 88
    element-access                 shift and go to state 98
    literal                        shift and go to state 106
    conditional-expression         shift and go to state 100
    assignment                     shift and go to state 105
    array-creation-expression      shift and go to state 92
    conditional-and-expression     shift and go to state 101
    equality-expression            shift and go to state 111
    shift-expression               shift and go to state 113
    and-expression                 shift and go to state 114
    multiplicative-expression      shift and go to state 115
    expression                     shift and go to state 351
    parenthesized-expression       shift and go to state 122
    inclusive-or-expression        shift and go to state 96
    primary-expression             shift and go to state 119
    invocation-expression          shift and go to state 120
    conditional-or-expression      shift and go to state 121

state 326

    (177) switch-block -> BLOCK_BEGIN . switch-sections-opt BLOCK_END
    (178) switch-sections-opt -> . switch-sections
    (179) switch-sections-opt -> . empty
    (180) switch-sections -> . switch-section
    (181) switch-sections -> . switch-sections switch-section
    (224) empty -> .
    (182) switch-section -> . switch-labels statement-list
    (183) switch-labels -> . switch-label
    (184) switch-labels -> . switch-labels switch-label
    (185) switch-label -> . CASE expression COLON
    (186) switch-label -> . DEFAULT COLON

    BLOCK_END       reduce using rule 224 (empty -> .)
    CASE            shift and go to state 352
    DEFAULT         shift and go to state 353

    switch-sections-opt            shift and go to state 356
    switch-section                 shift and go to state 354
    switch-labels                  shift and go to state 355
    switch-sections                shift and go to state 357
    empty                          shift and go to state 358
    switch-label                   shift and go to state 359

state 327

    (176) switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .

    IDENTIFIER      reduce using rule 176 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    BLOCK_BEGIN     reduce using rule 176 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    DELIM           reduce using rule 176 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    CONSOLE         reduce using rule 176 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    CONST           reduce using rule 176 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    IF              reduce using rule 176 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    SWITCH          reduce using rule 176 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    WHILE           reduce using rule 176 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    FOR             reduce using rule 176 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    DO              reduce using rule 176 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    BREAK           reduce using rule 176 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    CONTINUE        reduce using rule 176 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    GOTO            reduce using rule 176 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    RETURN          reduce using rule 176 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    VOID            reduce using rule 176 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    PUBLIC          reduce using rule 176 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    PRIVATE         reduce using rule 176 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    BOOL            reduce using rule 176 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    INT             reduce using rule 176 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    UINT            reduce using rule 176 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    CHAR            reduce using rule 176 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    DOUBLE          reduce using rule 176 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    BLOCK_END       reduce using rule 176 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    $end            reduce using rule 176 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    CASE            reduce using rule 176 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)
    DEFAULT         reduce using rule 176 (switch-statement -> SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block .)


state 328

    (190) while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN . M_while block
    (191) M_while -> . empty
    (224) empty -> .

    BLOCK_BEGIN     reduce using rule 224 (empty -> .)

    M_while                        shift and go to state 360
    empty                          shift and go to state 361

state 329

    (127) method-header -> type IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .

    DELIM           reduce using rule 127 (method-header -> type IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)
    BLOCK_BEGIN     reduce using rule 127 (method-header -> type IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)


state 330

    (85) variable-initializer-list-opt -> empty .

    BLOCK_END       reduce using rule 85 (variable-initializer-list-opt -> empty .)


state 331

    (83) array-initializer -> BLOCK_BEGIN variable-initializer-list-opt . BLOCK_END

    BLOCK_END       shift and go to state 362


state 332

    (84) variable-initializer-list-opt -> expression-list .
    (82) expression-list -> expression-list . COMMA expression

    BLOCK_END       reduce using rule 84 (variable-initializer-list-opt -> expression-list .)
    COMMA           shift and go to state 250


state 333

    (126) method-header -> modifier VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 363


state 334

    (125) method-header -> modifier type IDENTIFIER OPEN_PAREN formal-parameter-list-opt . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 364


state 335

    (192) do-statement -> DO M_quad block WHILE OPEN_PAREN . M_quad expression CLOSE_PAREN DELIM
    (175) M_quad -> . empty
    (224) empty -> .

    IDENTIFIER      reduce using rule 224 (empty -> .)
    PLUS            reduce using rule 224 (empty -> .)
    MINUS           reduce using rule 224 (empty -> .)
    BITNOT          reduce using rule 224 (empty -> .)
    BITCOMP         reduce using rule 224 (empty -> .)
    NEW             reduce using rule 224 (empty -> .)
    ICONST          reduce using rule 224 (empty -> .)
    DCONST          reduce using rule 224 (empty -> .)
    TRUE            reduce using rule 224 (empty -> .)
    FALSE           reduce using rule 224 (empty -> .)
    OPEN_PAREN      reduce using rule 224 (empty -> .)

    M_quad                         shift and go to state 365
    empty                          shift and go to state 82

state 336

    (37) constant-declarators -> constant-declarators COMMA constant-declarator .

    DELIM           reduce using rule 37 (constant-declarators -> constant-declarators COMMA constant-declarator .)
    COMMA           reduce using rule 37 (constant-declarators -> constant-declarators COMMA constant-declarator .)


state 337

    (38) constant-declarator -> IDENTIFIER ASSIGN expression .

    DELIM           reduce using rule 38 (constant-declarator -> IDENTIFIER ASSIGN expression .)
    COMMA           reduce using rule 38 (constant-declarator -> IDENTIFIER ASSIGN expression .)


state 338

    (155) write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list . CLOSE_PAREN DELIM

    CLOSE_PAREN     shift and go to state 366


state 339

    (156) print-list -> expression .
    (157) print-list -> expression . COMMA print-list

    CLOSE_PAREN     reduce using rule 156 (print-list -> expression .)
    COMMA           shift and go to state 367


state 340

    (158) read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER . CLOSE_PAREN DELIM

    CLOSE_PAREN     shift and go to state 368


state 341

    (170) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if . block
    (171) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if . block ELSE M_else block
    (172) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if . block ELSE M_else if-statement M_quad
    (138) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END

    BLOCK_BEGIN     shift and go to state 54

    block                          shift and go to state 369

state 342

    (173) M_if -> empty .

    BLOCK_BEGIN     reduce using rule 173 (M_if -> empty .)


state 343

    (133) fixed-parameters -> fixed-parameters COMMA fixed-parameter .

    COMMA           reduce using rule 133 (fixed-parameters -> fixed-parameters COMMA fixed-parameter .)
    CLOSE_PAREN     reduce using rule 133 (fixed-parameters -> fixed-parameters COMMA fixed-parameter .)


state 344

    (26) constant-declaration -> CONST simple-type constant-declarators DELIM .

    CONST           reduce using rule 26 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    BITCOMP         reduce using rule 26 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    PUBLIC          reduce using rule 26 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    PRIVATE         reduce using rule 26 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    VOID            reduce using rule 26 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    IDENTIFIER      reduce using rule 26 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    BOOL            reduce using rule 26 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    INT             reduce using rule 26 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    UINT            reduce using rule 26 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    CHAR            reduce using rule 26 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    DOUBLE          reduce using rule 26 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    BLOCK_END       reduce using rule 26 (constant-declaration -> CONST simple-type constant-declarators DELIM .)


state 345

    (217) destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN . destructor-body
    (218) destructor-body -> . block
    (219) destructor-body -> . DELIM
    (138) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END

    DELIM           shift and go to state 370
    BLOCK_BEGIN     shift and go to state 54

    destructor-body                shift and go to state 371
    block                          shift and go to state 372

state 346

    (214) constructor-declarator -> IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .

    DELIM           reduce using rule 214 (constructor-declarator -> IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)
    BLOCK_BEGIN     reduce using rule 214 (constructor-declarator -> IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)


state 347

    (25) constant-declaration -> modifier CONST simple-type constant-declarators . DELIM
    (37) constant-declarators -> constant-declarators . COMMA constant-declarator

    DELIM           shift and go to state 373
    COMMA           shift and go to state 306


state 348

    (78) array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET . array-initializer-opt
    (79) array-initializer-opt -> . array-initializer
    (80) array-initializer-opt -> . empty
    (83) array-initializer -> . BLOCK_BEGIN variable-initializer-list-opt BLOCK_END
    (224) empty -> .

    BLOCK_BEGIN     shift and go to state 299
    TIMES           reduce using rule 224 (empty -> .)
    DIV             reduce using rule 224 (empty -> .)
    MOD             reduce using rule 224 (empty -> .)
    PLUS            reduce using rule 224 (empty -> .)
    MINUS           reduce using rule 224 (empty -> .)
    LSHIFT          reduce using rule 224 (empty -> .)
    RSHIFT          reduce using rule 224 (empty -> .)
    LT              reduce using rule 224 (empty -> .)
    GT              reduce using rule 224 (empty -> .)
    LE              reduce using rule 224 (empty -> .)
    GE              reduce using rule 224 (empty -> .)
    EQ              reduce using rule 224 (empty -> .)
    NE              reduce using rule 224 (empty -> .)
    BITAND          reduce using rule 224 (empty -> .)
    BITXOR          reduce using rule 224 (empty -> .)
    BITOR           reduce using rule 224 (empty -> .)
    LOGAND          reduce using rule 224 (empty -> .)
    CONDOP          reduce using rule 224 (empty -> .)
    LOGOR           reduce using rule 224 (empty -> .)
    DELIM           reduce using rule 224 (empty -> .)
    CLOSE_BRACKET   reduce using rule 224 (empty -> .)
    COMMA           reduce using rule 224 (empty -> .)
    CLOSE_PAREN     reduce using rule 224 (empty -> .)
    COLON           reduce using rule 224 (empty -> .)
    BLOCK_END       reduce using rule 224 (empty -> .)

    array-initializer-opt          shift and go to state 375
    empty                          shift and go to state 376
    array-initializer              shift and go to state 374

state 349

    (42) conditional-expression -> conditional-or-expression CONDOP expression COLON expression .

    CLOSE_PAREN     reduce using rule 42 (conditional-expression -> conditional-or-expression CONDOP expression COLON expression .)
    COMMA           reduce using rule 42 (conditional-expression -> conditional-or-expression CONDOP expression COLON expression .)
    DELIM           reduce using rule 42 (conditional-expression -> conditional-or-expression CONDOP expression COLON expression .)
    BLOCK_END       reduce using rule 42 (conditional-expression -> conditional-or-expression CONDOP expression COLON expression .)
    CLOSE_BRACKET   reduce using rule 42 (conditional-expression -> conditional-or-expression CONDOP expression COLON expression .)
    COLON           reduce using rule 42 (conditional-expression -> conditional-or-expression CONDOP expression COLON expression .)


state 350

    (193) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition . DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block

    DELIM           shift and go to state 377


state 351

    (197) for-condition -> expression .

    DELIM           reduce using rule 197 (for-condition -> expression .)


state 352

    (185) switch-label -> CASE . expression COLON
    (39) expression -> . conditional-expression
    (40) expression -> . assignment
    (41) conditional-expression -> . conditional-or-expression
    (42) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (103) assignment -> . IDENTIFIER assignment-operator expression
    (104) assignment -> . member-access assignment-operator expression
    (105) assignment -> . element-access assignment-operator expression
    (43) conditional-or-expression -> . conditional-and-expression
    (44) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (45) conditional-and-expression -> . inclusive-or-expression
    (46) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (47) inclusive-or-expression -> . exclusive-or-expression
    (48) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (49) exclusive-or-expression -> . and-expression
    (50) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (51) and-expression -> . equality-expression
    (52) and-expression -> . and-expression BITAND equality-expression
    (53) equality-expression -> . relational-expression
    (54) equality-expression -> . equality-expression EQ relational-expression
    (55) equality-expression -> . equality-expression NE relational-expression
    (56) relational-expression -> . shift-expression
    (57) relational-expression -> . relational-expression LT shift-expression
    (58) relational-expression -> . relational-expression GT shift-expression
    (59) relational-expression -> . relational-expression LE shift-expression
    (60) relational-expression -> . relational-expression GE shift-expression
    (61) shift-expression -> . additive-expression
    (62) shift-expression -> . shift-expression LSHIFT additive-expression
    (63) shift-expression -> . shift-expression RSHIFT additive-expression
    (64) additive-expression -> . multiplicative-expression
    (65) additive-expression -> . additive-expression PLUS multiplicative-expression
    (66) additive-expression -> . additive-expression MINUS multiplicative-expression
    (67) multiplicative-expression -> . unary-expression
    (68) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (69) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (70) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (71) unary-expression -> . primary-expression
    (72) unary-expression -> . PLUS unary-expression
    (73) unary-expression -> . MINUS unary-expression
    (74) unary-expression -> . BITNOT unary-expression
    (75) unary-expression -> . BITCOMP unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . element-access
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (220) literal -> . ICONST
    (221) literal -> . DCONST
    (222) literal -> . TRUE
    (223) literal -> . FALSE
    (94) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 103
    PLUS            shift and go to state 102
    MINUS           shift and go to state 95
    BITNOT          shift and go to state 117
    BITCOMP         shift and go to state 97
    NEW             shift and go to state 93
    ICONST          shift and go to state 108
    DCONST          shift and go to state 118
    TRUE            shift and go to state 112
    FALSE           shift and go to state 110
    OPEN_PAREN      shift and go to state 99

    exclusive-or-expression        shift and go to state 89
    member-access                  shift and go to state 90
    relational-expression          shift and go to state 91
    additive-expression            shift and go to state 94
    primary-no-array-creation-expression shift and go to state 107
    inclusive-or-expression        shift and go to state 96
    unary-expression               shift and go to state 88
    element-access                 shift and go to state 98
    literal                        shift and go to state 106
    conditional-expression         shift and go to state 100
    conditional-and-expression     shift and go to state 101
    array-creation-expression      shift and go to state 92
    assignment                     shift and go to state 105
    equality-expression            shift and go to state 111
    shift-expression               shift and go to state 113
    and-expression                 shift and go to state 114
    multiplicative-expression      shift and go to state 115
    conditional-or-expression      shift and go to state 121
    primary-expression             shift and go to state 119
    invocation-expression          shift and go to state 120
    expression                     shift and go to state 378
    parenthesized-expression       shift and go to state 122

state 353

    (186) switch-label -> DEFAULT . COLON

    COLON           shift and go to state 379


state 354

    (180) switch-sections -> switch-section .

    CASE            reduce using rule 180 (switch-sections -> switch-section .)
    DEFAULT         reduce using rule 180 (switch-sections -> switch-section .)
    BLOCK_END       reduce using rule 180 (switch-sections -> switch-section .)


state 355

    (182) switch-section -> switch-labels . statement-list
    (184) switch-labels -> switch-labels . switch-label
    (142) statement-list -> . statement
    (143) statement-list -> . statement-list statement
    (185) switch-label -> . CASE expression COLON
    (186) switch-label -> . DEFAULT COLON
    (144) statement -> . labeled-statement
    (145) statement -> . declaration-statement
    (146) statement -> . block
    (147) statement -> . empty-statement
    (148) statement -> . expression-statement
    (149) statement -> . selection-statement
    (150) statement -> . iteration-statement
    (151) statement -> . jump-statement
    (152) statement -> . write-statement
    (153) statement -> . read-statement
    (154) statement -> . method-declaration
    (159) labeled-statement -> . IDENTIFIER COLON statement
    (160) declaration-statement -> . local-variable-declaration DELIM
    (161) declaration-statement -> . local-constant-declaration DELIM
    (138) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END
    (164) empty-statement -> . DELIM
    (165) expression-statement -> . statement-expression DELIM
    (168) selection-statement -> . if-statement
    (169) selection-statement -> . switch-statement
    (187) iteration-statement -> . while-statement M_quad
    (188) iteration-statement -> . for-statement M_quad
    (189) iteration-statement -> . do-statement M_quad
    (203) jump-statement -> . break-statement
    (204) jump-statement -> . continue-statement
    (205) jump-statement -> . goto-statement
    (206) jump-statement -> . return-statement
    (155) write-statement -> . CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM
    (158) read-statement -> . CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM
    (124) method-declaration -> . method-header method-body
    (162) local-variable-declaration -> . type variable-declarators
    (163) local-constant-declaration -> . CONST type constant-declarators
    (166) statement-expression -> . invocation-expression
    (167) statement-expression -> . assignment
    (170) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block
    (171) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block
    (172) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad
    (176) switch-statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block
    (190) while-statement -> . WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block
    (193) for-statement -> . FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block
    (192) do-statement -> . DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM
    (207) break-statement -> . BREAK DELIM
    (208) continue-statement -> . CONTINUE DELIM
    (209) goto-statement -> . GOTO IDENTIFIER DELIM
    (210) return-statement -> . RETURN expression-opt DELIM
    (125) method-header -> . modifier type IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (126) method-header -> . modifier VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (127) method-header -> . type IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (128) method-header -> . VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (27) type -> . simple-type
    (28) type -> . class-type
    (29) type -> . array-type
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (103) assignment -> . IDENTIFIER assignment-operator expression
    (104) assignment -> . member-access assignment-operator expression
    (105) assignment -> . element-access assignment-operator expression
    (118) modifier -> . PUBLIC
    (119) modifier -> . PRIVATE
    (30) simple-type -> . BOOL
    (31) simple-type -> . INT
    (32) simple-type -> . UINT
    (33) simple-type -> . CHAR
    (34) simple-type -> . DOUBLE
    (14) class-type -> . IDENTIFIER
    (35) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    CASE            shift and go to state 352
    DEFAULT         shift and go to state 353
    IDENTIFIER      shift and go to state 40
    BLOCK_BEGIN     shift and go to state 54
    DELIM           shift and go to state 4
    CONSOLE         shift and go to state 58
    CONST           shift and go to state 53
    IF              shift and go to state 63
    SWITCH          shift and go to state 26
    WHILE           shift and go to state 35
    FOR             shift and go to state 24
    DO              shift and go to state 52
    BREAK           shift and go to state 46
    CONTINUE        shift and go to state 31
    GOTO            shift and go to state 8
    RETURN          shift and go to state 16
    VOID            shift and go to state 7
    PUBLIC          shift and go to state 62
    PRIVATE         shift and go to state 55
    BOOL            shift and go to state 47
    INT             shift and go to state 28
    UINT            shift and go to state 61
    CHAR            shift and go to state 34
    DOUBLE          shift and go to state 12

    return-statement               shift and go to state 19
    method-header                  shift and go to state 17
    write-statement                shift and go to state 1
    member-access                  shift and go to state 2
    selection-statement            shift and go to state 33
    empty-statement                shift and go to state 36
    method-declaration             shift and go to state 38
    expression-statement           shift and go to state 3
    break-statement                shift and go to state 37
    element-access                 shift and go to state 21
    statement-expression           shift and go to state 5
    local-constant-declaration     shift and go to state 22
    switch-label                   shift and go to state 380
    statement                      shift and go to state 39
    assignment                     shift and go to state 59
    for-statement                  shift and go to state 6
    type                           shift and go to state 41
    read-statement                 shift and go to state 57
    do-statement                   shift and go to state 23
    array-type                     shift and go to state 43
    continue-statement             shift and go to state 25
    invocation-expression          shift and go to state 14
    labeled-statement              shift and go to state 9
    declaration-statement          shift and go to state 44
    switch-statement               shift and go to state 10
    iteration-statement            shift and go to state 45
    jump-statement                 shift and go to state 11
    local-variable-declaration     shift and go to state 27
    goto-statement                 shift and go to state 29
    if-statement                   shift and go to state 30
    statement-list                 shift and go to state 381
    class-type                     shift and go to state 64
    while-statement                shift and go to state 49
    simple-type                    shift and go to state 18
    modifier                       shift and go to state 51
    block                          shift and go to state 32

state 356

    (177) switch-block -> BLOCK_BEGIN switch-sections-opt . BLOCK_END

    BLOCK_END       shift and go to state 382


state 357

    (178) switch-sections-opt -> switch-sections .
    (181) switch-sections -> switch-sections . switch-section
    (182) switch-section -> . switch-labels statement-list
    (183) switch-labels -> . switch-label
    (184) switch-labels -> . switch-labels switch-label
    (185) switch-label -> . CASE expression COLON
    (186) switch-label -> . DEFAULT COLON

    BLOCK_END       reduce using rule 178 (switch-sections-opt -> switch-sections .)
    CASE            shift and go to state 352
    DEFAULT         shift and go to state 353

    switch-section                 shift and go to state 383
    switch-labels                  shift and go to state 355
    switch-label                   shift and go to state 359

state 358

    (179) switch-sections-opt -> empty .

    BLOCK_END       reduce using rule 179 (switch-sections-opt -> empty .)


state 359

    (183) switch-labels -> switch-label .

    CASE            reduce using rule 183 (switch-labels -> switch-label .)
    DEFAULT         reduce using rule 183 (switch-labels -> switch-label .)
    IDENTIFIER      reduce using rule 183 (switch-labels -> switch-label .)
    BLOCK_BEGIN     reduce using rule 183 (switch-labels -> switch-label .)
    DELIM           reduce using rule 183 (switch-labels -> switch-label .)
    CONSOLE         reduce using rule 183 (switch-labels -> switch-label .)
    CONST           reduce using rule 183 (switch-labels -> switch-label .)
    IF              reduce using rule 183 (switch-labels -> switch-label .)
    SWITCH          reduce using rule 183 (switch-labels -> switch-label .)
    WHILE           reduce using rule 183 (switch-labels -> switch-label .)
    FOR             reduce using rule 183 (switch-labels -> switch-label .)
    DO              reduce using rule 183 (switch-labels -> switch-label .)
    BREAK           reduce using rule 183 (switch-labels -> switch-label .)
    CONTINUE        reduce using rule 183 (switch-labels -> switch-label .)
    GOTO            reduce using rule 183 (switch-labels -> switch-label .)
    RETURN          reduce using rule 183 (switch-labels -> switch-label .)
    VOID            reduce using rule 183 (switch-labels -> switch-label .)
    PUBLIC          reduce using rule 183 (switch-labels -> switch-label .)
    PRIVATE         reduce using rule 183 (switch-labels -> switch-label .)
    BOOL            reduce using rule 183 (switch-labels -> switch-label .)
    INT             reduce using rule 183 (switch-labels -> switch-label .)
    UINT            reduce using rule 183 (switch-labels -> switch-label .)
    CHAR            reduce using rule 183 (switch-labels -> switch-label .)
    DOUBLE          reduce using rule 183 (switch-labels -> switch-label .)


state 360

    (190) while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while . block
    (138) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END

    BLOCK_BEGIN     shift and go to state 54

    block                          shift and go to state 384

state 361

    (191) M_while -> empty .

    BLOCK_BEGIN     reduce using rule 191 (M_while -> empty .)


state 362

    (83) array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .

    COMMA           reduce using rule 83 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    DELIM           reduce using rule 83 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    TIMES           reduce using rule 83 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    DIV             reduce using rule 83 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    MOD             reduce using rule 83 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    PLUS            reduce using rule 83 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    MINUS           reduce using rule 83 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    LSHIFT          reduce using rule 83 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    RSHIFT          reduce using rule 83 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    LT              reduce using rule 83 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    GT              reduce using rule 83 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    LE              reduce using rule 83 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    GE              reduce using rule 83 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    EQ              reduce using rule 83 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    NE              reduce using rule 83 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    BITAND          reduce using rule 83 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    BITXOR          reduce using rule 83 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    BITOR           reduce using rule 83 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    LOGAND          reduce using rule 83 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    CONDOP          reduce using rule 83 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    LOGOR           reduce using rule 83 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    CLOSE_BRACKET   reduce using rule 83 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    CLOSE_PAREN     reduce using rule 83 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    COLON           reduce using rule 83 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    BLOCK_END       reduce using rule 83 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)


state 363

    (126) method-header -> modifier VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .

    DELIM           reduce using rule 126 (method-header -> modifier VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)
    BLOCK_BEGIN     reduce using rule 126 (method-header -> modifier VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)


state 364

    (125) method-header -> modifier type IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .

    DELIM           reduce using rule 125 (method-header -> modifier type IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)
    BLOCK_BEGIN     reduce using rule 125 (method-header -> modifier type IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)


state 365

    (192) do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad . expression CLOSE_PAREN DELIM
    (39) expression -> . conditional-expression
    (40) expression -> . assignment
    (41) conditional-expression -> . conditional-or-expression
    (42) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (103) assignment -> . IDENTIFIER assignment-operator expression
    (104) assignment -> . member-access assignment-operator expression
    (105) assignment -> . element-access assignment-operator expression
    (43) conditional-or-expression -> . conditional-and-expression
    (44) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (45) conditional-and-expression -> . inclusive-or-expression
    (46) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (47) inclusive-or-expression -> . exclusive-or-expression
    (48) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (49) exclusive-or-expression -> . and-expression
    (50) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (51) and-expression -> . equality-expression
    (52) and-expression -> . and-expression BITAND equality-expression
    (53) equality-expression -> . relational-expression
    (54) equality-expression -> . equality-expression EQ relational-expression
    (55) equality-expression -> . equality-expression NE relational-expression
    (56) relational-expression -> . shift-expression
    (57) relational-expression -> . relational-expression LT shift-expression
    (58) relational-expression -> . relational-expression GT shift-expression
    (59) relational-expression -> . relational-expression LE shift-expression
    (60) relational-expression -> . relational-expression GE shift-expression
    (61) shift-expression -> . additive-expression
    (62) shift-expression -> . shift-expression LSHIFT additive-expression
    (63) shift-expression -> . shift-expression RSHIFT additive-expression
    (64) additive-expression -> . multiplicative-expression
    (65) additive-expression -> . additive-expression PLUS multiplicative-expression
    (66) additive-expression -> . additive-expression MINUS multiplicative-expression
    (67) multiplicative-expression -> . unary-expression
    (68) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (69) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (70) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (71) unary-expression -> . primary-expression
    (72) unary-expression -> . PLUS unary-expression
    (73) unary-expression -> . MINUS unary-expression
    (74) unary-expression -> . BITNOT unary-expression
    (75) unary-expression -> . BITCOMP unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . element-access
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (220) literal -> . ICONST
    (221) literal -> . DCONST
    (222) literal -> . TRUE
    (223) literal -> . FALSE
    (94) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 103
    PLUS            shift and go to state 102
    MINUS           shift and go to state 95
    BITNOT          shift and go to state 117
    BITCOMP         shift and go to state 97
    NEW             shift and go to state 93
    ICONST          shift and go to state 108
    DCONST          shift and go to state 118
    TRUE            shift and go to state 112
    FALSE           shift and go to state 110
    OPEN_PAREN      shift and go to state 99

    exclusive-or-expression        shift and go to state 89
    member-access                  shift and go to state 90
    relational-expression          shift and go to state 91
    additive-expression            shift and go to state 94
    primary-no-array-creation-expression shift and go to state 107
    inclusive-or-expression        shift and go to state 96
    unary-expression               shift and go to state 88
    element-access                 shift and go to state 98
    literal                        shift and go to state 106
    conditional-expression         shift and go to state 100
    conditional-and-expression     shift and go to state 101
    array-creation-expression      shift and go to state 92
    assignment                     shift and go to state 105
    equality-expression            shift and go to state 111
    shift-expression               shift and go to state 113
    and-expression                 shift and go to state 114
    multiplicative-expression      shift and go to state 115
    conditional-or-expression      shift and go to state 121
    primary-expression             shift and go to state 119
    invocation-expression          shift and go to state 120
    expression                     shift and go to state 385
    parenthesized-expression       shift and go to state 122

state 366

    (155) write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN . DELIM

    DELIM           shift and go to state 386


state 367

    (157) print-list -> expression COMMA . print-list
    (156) print-list -> . expression
    (157) print-list -> . expression COMMA print-list
    (39) expression -> . conditional-expression
    (40) expression -> . assignment
    (41) conditional-expression -> . conditional-or-expression
    (42) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (103) assignment -> . IDENTIFIER assignment-operator expression
    (104) assignment -> . member-access assignment-operator expression
    (105) assignment -> . element-access assignment-operator expression
    (43) conditional-or-expression -> . conditional-and-expression
    (44) conditional-or-expression -> . conditional-or-expression LOGOR conditional-and-expression
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (45) conditional-and-expression -> . inclusive-or-expression
    (46) conditional-and-expression -> . conditional-and-expression LOGAND inclusive-or-expression
    (47) inclusive-or-expression -> . exclusive-or-expression
    (48) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (49) exclusive-or-expression -> . and-expression
    (50) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (51) and-expression -> . equality-expression
    (52) and-expression -> . and-expression BITAND equality-expression
    (53) equality-expression -> . relational-expression
    (54) equality-expression -> . equality-expression EQ relational-expression
    (55) equality-expression -> . equality-expression NE relational-expression
    (56) relational-expression -> . shift-expression
    (57) relational-expression -> . relational-expression LT shift-expression
    (58) relational-expression -> . relational-expression GT shift-expression
    (59) relational-expression -> . relational-expression LE shift-expression
    (60) relational-expression -> . relational-expression GE shift-expression
    (61) shift-expression -> . additive-expression
    (62) shift-expression -> . shift-expression LSHIFT additive-expression
    (63) shift-expression -> . shift-expression RSHIFT additive-expression
    (64) additive-expression -> . multiplicative-expression
    (65) additive-expression -> . additive-expression PLUS multiplicative-expression
    (66) additive-expression -> . additive-expression MINUS multiplicative-expression
    (67) multiplicative-expression -> . unary-expression
    (68) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (69) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (70) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (71) unary-expression -> . primary-expression
    (72) unary-expression -> . PLUS unary-expression
    (73) unary-expression -> . MINUS unary-expression
    (74) unary-expression -> . BITNOT unary-expression
    (75) unary-expression -> . BITCOMP unary-expression
    (76) primary-expression -> . array-creation-expression
    (77) primary-expression -> . primary-no-array-creation-expression
    (78) array-creation-expression -> . NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt
    (88) primary-no-array-creation-expression -> . literal
    (89) primary-no-array-creation-expression -> . IDENTIFIER
    (90) primary-no-array-creation-expression -> . element-access
    (91) primary-no-array-creation-expression -> . parenthesized-expression
    (92) primary-no-array-creation-expression -> . member-access
    (93) primary-no-array-creation-expression -> . invocation-expression
    (220) literal -> . ICONST
    (221) literal -> . DCONST
    (222) literal -> . TRUE
    (223) literal -> . FALSE
    (94) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 103
    PLUS            shift and go to state 102
    MINUS           shift and go to state 95
    BITNOT          shift and go to state 117
    BITCOMP         shift and go to state 97
    NEW             shift and go to state 93
    ICONST          shift and go to state 108
    DCONST          shift and go to state 118
    TRUE            shift and go to state 112
    FALSE           shift and go to state 110
    OPEN_PAREN      shift and go to state 99

    exclusive-or-expression        shift and go to state 89
    member-access                  shift and go to state 90
    relational-expression          shift and go to state 91
    additive-expression            shift and go to state 94
    primary-no-array-creation-expression shift and go to state 107
    inclusive-or-expression        shift and go to state 96
    unary-expression               shift and go to state 88
    element-access                 shift and go to state 98
    literal                        shift and go to state 106
    conditional-expression         shift and go to state 100
    conditional-and-expression     shift and go to state 101
    array-creation-expression      shift and go to state 92
    assignment                     shift and go to state 105
    and-expression                 shift and go to state 114
    equality-expression            shift and go to state 111
    shift-expression               shift and go to state 113
    print-list                     shift and go to state 387
    multiplicative-expression      shift and go to state 115
    conditional-or-expression      shift and go to state 121
    primary-expression             shift and go to state 119
    invocation-expression          shift and go to state 120
    expression                     shift and go to state 339
    parenthesized-expression       shift and go to state 122

state 368

    (158) read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN . DELIM

    DELIM           shift and go to state 388


state 369

    (170) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .
    (171) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block . ELSE M_else block
    (172) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block . ELSE M_else if-statement M_quad

    IDENTIFIER      reduce using rule 170 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    BLOCK_BEGIN     reduce using rule 170 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    DELIM           reduce using rule 170 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    CONSOLE         reduce using rule 170 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    CONST           reduce using rule 170 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    IF              reduce using rule 170 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    SWITCH          reduce using rule 170 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    WHILE           reduce using rule 170 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    FOR             reduce using rule 170 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    DO              reduce using rule 170 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    BREAK           reduce using rule 170 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    CONTINUE        reduce using rule 170 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    GOTO            reduce using rule 170 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    RETURN          reduce using rule 170 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    VOID            reduce using rule 170 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    PUBLIC          reduce using rule 170 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    PRIVATE         reduce using rule 170 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    BOOL            reduce using rule 170 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    INT             reduce using rule 170 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    UINT            reduce using rule 170 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    CHAR            reduce using rule 170 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    DOUBLE          reduce using rule 170 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    $end            reduce using rule 170 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    BLOCK_END       reduce using rule 170 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    CASE            reduce using rule 170 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    DEFAULT         reduce using rule 170 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    ELSE            shift and go to state 389


state 370

    (219) destructor-body -> DELIM .

    CONST           reduce using rule 219 (destructor-body -> DELIM .)
    BITCOMP         reduce using rule 219 (destructor-body -> DELIM .)
    PUBLIC          reduce using rule 219 (destructor-body -> DELIM .)
    PRIVATE         reduce using rule 219 (destructor-body -> DELIM .)
    VOID            reduce using rule 219 (destructor-body -> DELIM .)
    IDENTIFIER      reduce using rule 219 (destructor-body -> DELIM .)
    BOOL            reduce using rule 219 (destructor-body -> DELIM .)
    INT             reduce using rule 219 (destructor-body -> DELIM .)
    UINT            reduce using rule 219 (destructor-body -> DELIM .)
    CHAR            reduce using rule 219 (destructor-body -> DELIM .)
    DOUBLE          reduce using rule 219 (destructor-body -> DELIM .)
    BLOCK_END       reduce using rule 219 (destructor-body -> DELIM .)


state 371

    (217) destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .

    CONST           reduce using rule 217 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    BITCOMP         reduce using rule 217 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    PUBLIC          reduce using rule 217 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    PRIVATE         reduce using rule 217 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    VOID            reduce using rule 217 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    IDENTIFIER      reduce using rule 217 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    BOOL            reduce using rule 217 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    INT             reduce using rule 217 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    UINT            reduce using rule 217 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    CHAR            reduce using rule 217 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    DOUBLE          reduce using rule 217 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)
    BLOCK_END       reduce using rule 217 (destructor-declaration -> BITCOMP IDENTIFIER OPEN_PAREN CLOSE_PAREN destructor-body .)


state 372

    (218) destructor-body -> block .

    CONST           reduce using rule 218 (destructor-body -> block .)
    BITCOMP         reduce using rule 218 (destructor-body -> block .)
    PUBLIC          reduce using rule 218 (destructor-body -> block .)
    PRIVATE         reduce using rule 218 (destructor-body -> block .)
    VOID            reduce using rule 218 (destructor-body -> block .)
    IDENTIFIER      reduce using rule 218 (destructor-body -> block .)
    BOOL            reduce using rule 218 (destructor-body -> block .)
    INT             reduce using rule 218 (destructor-body -> block .)
    UINT            reduce using rule 218 (destructor-body -> block .)
    CHAR            reduce using rule 218 (destructor-body -> block .)
    DOUBLE          reduce using rule 218 (destructor-body -> block .)
    BLOCK_END       reduce using rule 218 (destructor-body -> block .)


state 373

    (25) constant-declaration -> modifier CONST simple-type constant-declarators DELIM .

    CONST           reduce using rule 25 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    BITCOMP         reduce using rule 25 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    PUBLIC          reduce using rule 25 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    PRIVATE         reduce using rule 25 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    VOID            reduce using rule 25 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    IDENTIFIER      reduce using rule 25 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    BOOL            reduce using rule 25 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    INT             reduce using rule 25 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    UINT            reduce using rule 25 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    CHAR            reduce using rule 25 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    DOUBLE          reduce using rule 25 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    BLOCK_END       reduce using rule 25 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)


state 374

    (79) array-initializer-opt -> array-initializer .

    TIMES           reduce using rule 79 (array-initializer-opt -> array-initializer .)
    DIV             reduce using rule 79 (array-initializer-opt -> array-initializer .)
    MOD             reduce using rule 79 (array-initializer-opt -> array-initializer .)
    PLUS            reduce using rule 79 (array-initializer-opt -> array-initializer .)
    MINUS           reduce using rule 79 (array-initializer-opt -> array-initializer .)
    LSHIFT          reduce using rule 79 (array-initializer-opt -> array-initializer .)
    RSHIFT          reduce using rule 79 (array-initializer-opt -> array-initializer .)
    LT              reduce using rule 79 (array-initializer-opt -> array-initializer .)
    GT              reduce using rule 79 (array-initializer-opt -> array-initializer .)
    LE              reduce using rule 79 (array-initializer-opt -> array-initializer .)
    GE              reduce using rule 79 (array-initializer-opt -> array-initializer .)
    EQ              reduce using rule 79 (array-initializer-opt -> array-initializer .)
    NE              reduce using rule 79 (array-initializer-opt -> array-initializer .)
    BITAND          reduce using rule 79 (array-initializer-opt -> array-initializer .)
    BITXOR          reduce using rule 79 (array-initializer-opt -> array-initializer .)
    BITOR           reduce using rule 79 (array-initializer-opt -> array-initializer .)
    LOGAND          reduce using rule 79 (array-initializer-opt -> array-initializer .)
    CONDOP          reduce using rule 79 (array-initializer-opt -> array-initializer .)
    LOGOR           reduce using rule 79 (array-initializer-opt -> array-initializer .)
    DELIM           reduce using rule 79 (array-initializer-opt -> array-initializer .)
    CLOSE_BRACKET   reduce using rule 79 (array-initializer-opt -> array-initializer .)
    COMMA           reduce using rule 79 (array-initializer-opt -> array-initializer .)
    CLOSE_PAREN     reduce using rule 79 (array-initializer-opt -> array-initializer .)
    COLON           reduce using rule 79 (array-initializer-opt -> array-initializer .)
    BLOCK_END       reduce using rule 79 (array-initializer-opt -> array-initializer .)


state 375

    (78) array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .

    TIMES           reduce using rule 78 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    DIV             reduce using rule 78 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    MOD             reduce using rule 78 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    PLUS            reduce using rule 78 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    MINUS           reduce using rule 78 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    LSHIFT          reduce using rule 78 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    RSHIFT          reduce using rule 78 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    LT              reduce using rule 78 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    GT              reduce using rule 78 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    LE              reduce using rule 78 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    GE              reduce using rule 78 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    EQ              reduce using rule 78 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    NE              reduce using rule 78 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    BITAND          reduce using rule 78 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    BITXOR          reduce using rule 78 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    BITOR           reduce using rule 78 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    LOGAND          reduce using rule 78 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    CONDOP          reduce using rule 78 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    LOGOR           reduce using rule 78 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    DELIM           reduce using rule 78 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    CLOSE_BRACKET   reduce using rule 78 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    COMMA           reduce using rule 78 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    CLOSE_PAREN     reduce using rule 78 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    COLON           reduce using rule 78 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)
    BLOCK_END       reduce using rule 78 (array-creation-expression -> NEW simple-type OPEN_BRACKET ICONST CLOSE_BRACKET array-initializer-opt .)


state 376

    (80) array-initializer-opt -> empty .

    TIMES           reduce using rule 80 (array-initializer-opt -> empty .)
    DIV             reduce using rule 80 (array-initializer-opt -> empty .)
    MOD             reduce using rule 80 (array-initializer-opt -> empty .)
    PLUS            reduce using rule 80 (array-initializer-opt -> empty .)
    MINUS           reduce using rule 80 (array-initializer-opt -> empty .)
    LSHIFT          reduce using rule 80 (array-initializer-opt -> empty .)
    RSHIFT          reduce using rule 80 (array-initializer-opt -> empty .)
    LT              reduce using rule 80 (array-initializer-opt -> empty .)
    GT              reduce using rule 80 (array-initializer-opt -> empty .)
    LE              reduce using rule 80 (array-initializer-opt -> empty .)
    GE              reduce using rule 80 (array-initializer-opt -> empty .)
    EQ              reduce using rule 80 (array-initializer-opt -> empty .)
    NE              reduce using rule 80 (array-initializer-opt -> empty .)
    BITAND          reduce using rule 80 (array-initializer-opt -> empty .)
    BITXOR          reduce using rule 80 (array-initializer-opt -> empty .)
    BITOR           reduce using rule 80 (array-initializer-opt -> empty .)
    LOGAND          reduce using rule 80 (array-initializer-opt -> empty .)
    CONDOP          reduce using rule 80 (array-initializer-opt -> empty .)
    LOGOR           reduce using rule 80 (array-initializer-opt -> empty .)
    DELIM           reduce using rule 80 (array-initializer-opt -> empty .)
    CLOSE_BRACKET   reduce using rule 80 (array-initializer-opt -> empty .)
    COMMA           reduce using rule 80 (array-initializer-opt -> empty .)
    CLOSE_PAREN     reduce using rule 80 (array-initializer-opt -> empty .)
    COLON           reduce using rule 80 (array-initializer-opt -> empty .)
    BLOCK_END       reduce using rule 80 (array-initializer-opt -> empty .)


state 377

    (193) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM . M_quad for-iterator-opt CLOSE_PAREN M_quad block
    (175) M_quad -> . empty
    (224) empty -> .

    IDENTIFIER      reduce using rule 224 (empty -> .)
    CLOSE_PAREN     reduce using rule 224 (empty -> .)

    M_quad                         shift and go to state 390
    empty                          shift and go to state 82

state 378

    (185) switch-label -> CASE expression . COLON

    COLON           shift and go to state 391


state 379

    (186) switch-label -> DEFAULT COLON .

    CASE            reduce using rule 186 (switch-label -> DEFAULT COLON .)
    DEFAULT         reduce using rule 186 (switch-label -> DEFAULT COLON .)
    IDENTIFIER      reduce using rule 186 (switch-label -> DEFAULT COLON .)
    BLOCK_BEGIN     reduce using rule 186 (switch-label -> DEFAULT COLON .)
    DELIM           reduce using rule 186 (switch-label -> DEFAULT COLON .)
    CONSOLE         reduce using rule 186 (switch-label -> DEFAULT COLON .)
    CONST           reduce using rule 186 (switch-label -> DEFAULT COLON .)
    IF              reduce using rule 186 (switch-label -> DEFAULT COLON .)
    SWITCH          reduce using rule 186 (switch-label -> DEFAULT COLON .)
    WHILE           reduce using rule 186 (switch-label -> DEFAULT COLON .)
    FOR             reduce using rule 186 (switch-label -> DEFAULT COLON .)
    DO              reduce using rule 186 (switch-label -> DEFAULT COLON .)
    BREAK           reduce using rule 186 (switch-label -> DEFAULT COLON .)
    CONTINUE        reduce using rule 186 (switch-label -> DEFAULT COLON .)
    GOTO            reduce using rule 186 (switch-label -> DEFAULT COLON .)
    RETURN          reduce using rule 186 (switch-label -> DEFAULT COLON .)
    VOID            reduce using rule 186 (switch-label -> DEFAULT COLON .)
    PUBLIC          reduce using rule 186 (switch-label -> DEFAULT COLON .)
    PRIVATE         reduce using rule 186 (switch-label -> DEFAULT COLON .)
    BOOL            reduce using rule 186 (switch-label -> DEFAULT COLON .)
    INT             reduce using rule 186 (switch-label -> DEFAULT COLON .)
    UINT            reduce using rule 186 (switch-label -> DEFAULT COLON .)
    CHAR            reduce using rule 186 (switch-label -> DEFAULT COLON .)
    DOUBLE          reduce using rule 186 (switch-label -> DEFAULT COLON .)


state 380

    (184) switch-labels -> switch-labels switch-label .

    CASE            reduce using rule 184 (switch-labels -> switch-labels switch-label .)
    DEFAULT         reduce using rule 184 (switch-labels -> switch-labels switch-label .)
    IDENTIFIER      reduce using rule 184 (switch-labels -> switch-labels switch-label .)
    BLOCK_BEGIN     reduce using rule 184 (switch-labels -> switch-labels switch-label .)
    DELIM           reduce using rule 184 (switch-labels -> switch-labels switch-label .)
    CONSOLE         reduce using rule 184 (switch-labels -> switch-labels switch-label .)
    CONST           reduce using rule 184 (switch-labels -> switch-labels switch-label .)
    IF              reduce using rule 184 (switch-labels -> switch-labels switch-label .)
    SWITCH          reduce using rule 184 (switch-labels -> switch-labels switch-label .)
    WHILE           reduce using rule 184 (switch-labels -> switch-labels switch-label .)
    FOR             reduce using rule 184 (switch-labels -> switch-labels switch-label .)
    DO              reduce using rule 184 (switch-labels -> switch-labels switch-label .)
    BREAK           reduce using rule 184 (switch-labels -> switch-labels switch-label .)
    CONTINUE        reduce using rule 184 (switch-labels -> switch-labels switch-label .)
    GOTO            reduce using rule 184 (switch-labels -> switch-labels switch-label .)
    RETURN          reduce using rule 184 (switch-labels -> switch-labels switch-label .)
    VOID            reduce using rule 184 (switch-labels -> switch-labels switch-label .)
    PUBLIC          reduce using rule 184 (switch-labels -> switch-labels switch-label .)
    PRIVATE         reduce using rule 184 (switch-labels -> switch-labels switch-label .)
    BOOL            reduce using rule 184 (switch-labels -> switch-labels switch-label .)
    INT             reduce using rule 184 (switch-labels -> switch-labels switch-label .)
    UINT            reduce using rule 184 (switch-labels -> switch-labels switch-label .)
    CHAR            reduce using rule 184 (switch-labels -> switch-labels switch-label .)
    DOUBLE          reduce using rule 184 (switch-labels -> switch-labels switch-label .)


state 381

    (182) switch-section -> switch-labels statement-list .
    (143) statement-list -> statement-list . statement
    (144) statement -> . labeled-statement
    (145) statement -> . declaration-statement
    (146) statement -> . block
    (147) statement -> . empty-statement
    (148) statement -> . expression-statement
    (149) statement -> . selection-statement
    (150) statement -> . iteration-statement
    (151) statement -> . jump-statement
    (152) statement -> . write-statement
    (153) statement -> . read-statement
    (154) statement -> . method-declaration
    (159) labeled-statement -> . IDENTIFIER COLON statement
    (160) declaration-statement -> . local-variable-declaration DELIM
    (161) declaration-statement -> . local-constant-declaration DELIM
    (138) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END
    (164) empty-statement -> . DELIM
    (165) expression-statement -> . statement-expression DELIM
    (168) selection-statement -> . if-statement
    (169) selection-statement -> . switch-statement
    (187) iteration-statement -> . while-statement M_quad
    (188) iteration-statement -> . for-statement M_quad
    (189) iteration-statement -> . do-statement M_quad
    (203) jump-statement -> . break-statement
    (204) jump-statement -> . continue-statement
    (205) jump-statement -> . goto-statement
    (206) jump-statement -> . return-statement
    (155) write-statement -> . CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM
    (158) read-statement -> . CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM
    (124) method-declaration -> . method-header method-body
    (162) local-variable-declaration -> . type variable-declarators
    (163) local-constant-declaration -> . CONST type constant-declarators
    (166) statement-expression -> . invocation-expression
    (167) statement-expression -> . assignment
    (170) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block
    (171) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block
    (172) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad
    (176) switch-statement -> . SWITCH OPEN_PAREN expression CLOSE_PAREN switch-block
    (190) while-statement -> . WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block
    (193) for-statement -> . FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block
    (192) do-statement -> . DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM
    (207) break-statement -> . BREAK DELIM
    (208) continue-statement -> . CONTINUE DELIM
    (209) goto-statement -> . GOTO IDENTIFIER DELIM
    (210) return-statement -> . RETURN expression-opt DELIM
    (125) method-header -> . modifier type IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (126) method-header -> . modifier VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (127) method-header -> . type IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (128) method-header -> . VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (27) type -> . simple-type
    (28) type -> . class-type
    (29) type -> . array-type
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (103) assignment -> . IDENTIFIER assignment-operator expression
    (104) assignment -> . member-access assignment-operator expression
    (105) assignment -> . element-access assignment-operator expression
    (118) modifier -> . PUBLIC
    (119) modifier -> . PRIVATE
    (30) simple-type -> . BOOL
    (31) simple-type -> . INT
    (32) simple-type -> . UINT
    (33) simple-type -> . CHAR
    (34) simple-type -> . DOUBLE
    (14) class-type -> . IDENTIFIER
    (35) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    CASE            reduce using rule 182 (switch-section -> switch-labels statement-list .)
    DEFAULT         reduce using rule 182 (switch-section -> switch-labels statement-list .)
    BLOCK_END       reduce using rule 182 (switch-section -> switch-labels statement-list .)
    IDENTIFIER      shift and go to state 40
    BLOCK_BEGIN     shift and go to state 54
    DELIM           shift and go to state 4
    CONSOLE         shift and go to state 58
    CONST           shift and go to state 53
    IF              shift and go to state 63
    SWITCH          shift and go to state 26
    WHILE           shift and go to state 35
    FOR             shift and go to state 24
    DO              shift and go to state 52
    BREAK           shift and go to state 46
    CONTINUE        shift and go to state 31
    GOTO            shift and go to state 8
    RETURN          shift and go to state 16
    VOID            shift and go to state 7
    PUBLIC          shift and go to state 62
    PRIVATE         shift and go to state 55
    BOOL            shift and go to state 47
    INT             shift and go to state 28
    UINT            shift and go to state 61
    CHAR            shift and go to state 34
    DOUBLE          shift and go to state 12

    return-statement               shift and go to state 19
    method-header                  shift and go to state 17
    write-statement                shift and go to state 1
    member-access                  shift and go to state 2
    selection-statement            shift and go to state 33
    empty-statement                shift and go to state 36
    expression-statement           shift and go to state 3
    break-statement                shift and go to state 37
    method-declaration             shift and go to state 38
    element-access                 shift and go to state 21
    statement-expression           shift and go to state 5
    local-constant-declaration     shift and go to state 22
    statement                      shift and go to state 145
    assignment                     shift and go to state 59
    for-statement                  shift and go to state 6
    type                           shift and go to state 41
    read-statement                 shift and go to state 57
    do-statement                   shift and go to state 23
    array-type                     shift and go to state 43
    continue-statement             shift and go to state 25
    invocation-expression          shift and go to state 14
    labeled-statement              shift and go to state 9
    declaration-statement          shift and go to state 44
    switch-statement               shift and go to state 10
    jump-statement                 shift and go to state 11
    iteration-statement            shift and go to state 45
    local-variable-declaration     shift and go to state 27
    goto-statement                 shift and go to state 29
    if-statement                   shift and go to state 30
    class-type                     shift and go to state 64
    while-statement                shift and go to state 49
    simple-type                    shift and go to state 18
    modifier                       shift and go to state 51
    block                          shift and go to state 32

state 382

    (177) switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .

    IDENTIFIER      reduce using rule 177 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    BLOCK_BEGIN     reduce using rule 177 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    DELIM           reduce using rule 177 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    CONSOLE         reduce using rule 177 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    CONST           reduce using rule 177 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    IF              reduce using rule 177 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    SWITCH          reduce using rule 177 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    WHILE           reduce using rule 177 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    FOR             reduce using rule 177 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    DO              reduce using rule 177 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    BREAK           reduce using rule 177 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    CONTINUE        reduce using rule 177 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    GOTO            reduce using rule 177 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    RETURN          reduce using rule 177 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    VOID            reduce using rule 177 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    PUBLIC          reduce using rule 177 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    PRIVATE         reduce using rule 177 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    BOOL            reduce using rule 177 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    INT             reduce using rule 177 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    UINT            reduce using rule 177 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    CHAR            reduce using rule 177 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    DOUBLE          reduce using rule 177 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    $end            reduce using rule 177 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    BLOCK_END       reduce using rule 177 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    CASE            reduce using rule 177 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)
    DEFAULT         reduce using rule 177 (switch-block -> BLOCK_BEGIN switch-sections-opt BLOCK_END .)


state 383

    (181) switch-sections -> switch-sections switch-section .

    CASE            reduce using rule 181 (switch-sections -> switch-sections switch-section .)
    DEFAULT         reduce using rule 181 (switch-sections -> switch-sections switch-section .)
    BLOCK_END       reduce using rule 181 (switch-sections -> switch-sections switch-section .)


state 384

    (190) while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .

    IDENTIFIER      reduce using rule 190 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    BLOCK_BEGIN     reduce using rule 190 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    DELIM           reduce using rule 190 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    CONSOLE         reduce using rule 190 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    CONST           reduce using rule 190 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    IF              reduce using rule 190 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    SWITCH          reduce using rule 190 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    WHILE           reduce using rule 190 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    FOR             reduce using rule 190 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    DO              reduce using rule 190 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    BREAK           reduce using rule 190 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    CONTINUE        reduce using rule 190 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    GOTO            reduce using rule 190 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    RETURN          reduce using rule 190 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    VOID            reduce using rule 190 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    PUBLIC          reduce using rule 190 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    PRIVATE         reduce using rule 190 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    BOOL            reduce using rule 190 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    INT             reduce using rule 190 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    UINT            reduce using rule 190 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    CHAR            reduce using rule 190 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    DOUBLE          reduce using rule 190 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    BLOCK_END       reduce using rule 190 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    $end            reduce using rule 190 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    CASE            reduce using rule 190 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    DEFAULT         reduce using rule 190 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)


state 385

    (192) do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression . CLOSE_PAREN DELIM

    CLOSE_PAREN     shift and go to state 392


state 386

    (155) write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .

    IDENTIFIER      reduce using rule 155 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    BLOCK_BEGIN     reduce using rule 155 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    DELIM           reduce using rule 155 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    CONSOLE         reduce using rule 155 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    CONST           reduce using rule 155 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    IF              reduce using rule 155 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    SWITCH          reduce using rule 155 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    WHILE           reduce using rule 155 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    FOR             reduce using rule 155 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    DO              reduce using rule 155 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    BREAK           reduce using rule 155 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    CONTINUE        reduce using rule 155 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    GOTO            reduce using rule 155 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    RETURN          reduce using rule 155 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    VOID            reduce using rule 155 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    PUBLIC          reduce using rule 155 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    PRIVATE         reduce using rule 155 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    BOOL            reduce using rule 155 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    INT             reduce using rule 155 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    UINT            reduce using rule 155 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    CHAR            reduce using rule 155 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    DOUBLE          reduce using rule 155 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    $end            reduce using rule 155 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    BLOCK_END       reduce using rule 155 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    CASE            reduce using rule 155 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    DEFAULT         reduce using rule 155 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)


state 387

    (157) print-list -> expression COMMA print-list .

    CLOSE_PAREN     reduce using rule 157 (print-list -> expression COMMA print-list .)


state 388

    (158) read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .

    IDENTIFIER      reduce using rule 158 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    BLOCK_BEGIN     reduce using rule 158 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    DELIM           reduce using rule 158 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    CONSOLE         reduce using rule 158 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    CONST           reduce using rule 158 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    IF              reduce using rule 158 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    SWITCH          reduce using rule 158 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    WHILE           reduce using rule 158 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    FOR             reduce using rule 158 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    DO              reduce using rule 158 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    BREAK           reduce using rule 158 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    CONTINUE        reduce using rule 158 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    GOTO            reduce using rule 158 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    RETURN          reduce using rule 158 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    VOID            reduce using rule 158 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    PUBLIC          reduce using rule 158 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    PRIVATE         reduce using rule 158 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    BOOL            reduce using rule 158 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    INT             reduce using rule 158 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    UINT            reduce using rule 158 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    CHAR            reduce using rule 158 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    DOUBLE          reduce using rule 158 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    $end            reduce using rule 158 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    BLOCK_END       reduce using rule 158 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    CASE            reduce using rule 158 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    DEFAULT         reduce using rule 158 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)


state 389

    (171) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE . M_else block
    (172) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE . M_else if-statement M_quad
    (174) M_else -> . empty
    (224) empty -> .

    BLOCK_BEGIN     reduce using rule 224 (empty -> .)
    IF              reduce using rule 224 (empty -> .)

    empty                          shift and go to state 394
    M_else                         shift and go to state 393

state 390

    (193) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad . for-iterator-opt CLOSE_PAREN M_quad block
    (198) for-iterator-opt -> . for-iterator
    (199) for-iterator-opt -> . empty
    (200) for-iterator -> . statement-expression-list
    (224) empty -> .
    (201) statement-expression-list -> . statement-expression
    (202) statement-expression-list -> . statement-expression-list COMMA statement-expression
    (166) statement-expression -> . invocation-expression
    (167) statement-expression -> . assignment
    (97) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (98) invocation-expression -> . member-access OPEN_PAREN argument-list-opt CLOSE_PAREN
    (103) assignment -> . IDENTIFIER assignment-operator expression
    (104) assignment -> . member-access assignment-operator expression
    (105) assignment -> . element-access assignment-operator expression
    (95) member-access -> . IDENTIFIER DOT IDENTIFIER
    (96) member-access -> . member-access DOT IDENTIFIER
    (101) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (102) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    CLOSE_PAREN     reduce using rule 224 (empty -> .)
    IDENTIFIER      shift and go to state 221

    for-iterator-opt               shift and go to state 395
    assignment                     shift and go to state 59
    member-access                  shift and go to state 2
    element-access                 shift and go to state 21
    invocation-expression          shift and go to state 14
    statement-expression           shift and go to state 219
    empty                          shift and go to state 398
    for-iterator                   shift and go to state 396
    statement-expression-list      shift and go to state 397

state 391

    (185) switch-label -> CASE expression COLON .

    CASE            reduce using rule 185 (switch-label -> CASE expression COLON .)
    DEFAULT         reduce using rule 185 (switch-label -> CASE expression COLON .)
    IDENTIFIER      reduce using rule 185 (switch-label -> CASE expression COLON .)
    BLOCK_BEGIN     reduce using rule 185 (switch-label -> CASE expression COLON .)
    DELIM           reduce using rule 185 (switch-label -> CASE expression COLON .)
    CONSOLE         reduce using rule 185 (switch-label -> CASE expression COLON .)
    CONST           reduce using rule 185 (switch-label -> CASE expression COLON .)
    IF              reduce using rule 185 (switch-label -> CASE expression COLON .)
    SWITCH          reduce using rule 185 (switch-label -> CASE expression COLON .)
    WHILE           reduce using rule 185 (switch-label -> CASE expression COLON .)
    FOR             reduce using rule 185 (switch-label -> CASE expression COLON .)
    DO              reduce using rule 185 (switch-label -> CASE expression COLON .)
    BREAK           reduce using rule 185 (switch-label -> CASE expression COLON .)
    CONTINUE        reduce using rule 185 (switch-label -> CASE expression COLON .)
    GOTO            reduce using rule 185 (switch-label -> CASE expression COLON .)
    RETURN          reduce using rule 185 (switch-label -> CASE expression COLON .)
    VOID            reduce using rule 185 (switch-label -> CASE expression COLON .)
    PUBLIC          reduce using rule 185 (switch-label -> CASE expression COLON .)
    PRIVATE         reduce using rule 185 (switch-label -> CASE expression COLON .)
    BOOL            reduce using rule 185 (switch-label -> CASE expression COLON .)
    INT             reduce using rule 185 (switch-label -> CASE expression COLON .)
    UINT            reduce using rule 185 (switch-label -> CASE expression COLON .)
    CHAR            reduce using rule 185 (switch-label -> CASE expression COLON .)
    DOUBLE          reduce using rule 185 (switch-label -> CASE expression COLON .)


state 392

    (192) do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN . DELIM

    DELIM           shift and go to state 399


state 393

    (171) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else . block
    (172) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else . if-statement M_quad
    (138) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END
    (170) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block
    (171) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block
    (172) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad

    BLOCK_BEGIN     shift and go to state 54
    IF              shift and go to state 63

    if-statement                   shift and go to state 400
    block                          shift and go to state 401

state 394

    (174) M_else -> empty .

    BLOCK_BEGIN     reduce using rule 174 (M_else -> empty .)
    IF              reduce using rule 174 (M_else -> empty .)


state 395

    (193) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt . CLOSE_PAREN M_quad block

    CLOSE_PAREN     shift and go to state 402


state 396

    (198) for-iterator-opt -> for-iterator .

    CLOSE_PAREN     reduce using rule 198 (for-iterator-opt -> for-iterator .)


state 397

    (200) for-iterator -> statement-expression-list .
    (202) statement-expression-list -> statement-expression-list . COMMA statement-expression

    CLOSE_PAREN     reduce using rule 200 (for-iterator -> statement-expression-list .)
    COMMA           shift and go to state 290


state 398

    (199) for-iterator-opt -> empty .

    CLOSE_PAREN     reduce using rule 199 (for-iterator-opt -> empty .)


state 399

    (192) do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .

    IDENTIFIER      reduce using rule 192 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    BLOCK_BEGIN     reduce using rule 192 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    DELIM           reduce using rule 192 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    CONSOLE         reduce using rule 192 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    CONST           reduce using rule 192 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    IF              reduce using rule 192 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    SWITCH          reduce using rule 192 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    WHILE           reduce using rule 192 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    FOR             reduce using rule 192 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    DO              reduce using rule 192 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    BREAK           reduce using rule 192 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    CONTINUE        reduce using rule 192 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    GOTO            reduce using rule 192 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    RETURN          reduce using rule 192 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    VOID            reduce using rule 192 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    PUBLIC          reduce using rule 192 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    PRIVATE         reduce using rule 192 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    BOOL            reduce using rule 192 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    INT             reduce using rule 192 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    UINT            reduce using rule 192 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    CHAR            reduce using rule 192 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    DOUBLE          reduce using rule 192 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    CASE            reduce using rule 192 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    DEFAULT         reduce using rule 192 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    BLOCK_END       reduce using rule 192 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    $end            reduce using rule 192 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)


state 400

    (172) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement . M_quad
    (175) M_quad -> . empty
    (224) empty -> .

    IDENTIFIER      reduce using rule 224 (empty -> .)
    BLOCK_BEGIN     reduce using rule 224 (empty -> .)
    DELIM           reduce using rule 224 (empty -> .)
    CONSOLE         reduce using rule 224 (empty -> .)
    CONST           reduce using rule 224 (empty -> .)
    IF              reduce using rule 224 (empty -> .)
    SWITCH          reduce using rule 224 (empty -> .)
    WHILE           reduce using rule 224 (empty -> .)
    FOR             reduce using rule 224 (empty -> .)
    DO              reduce using rule 224 (empty -> .)
    BREAK           reduce using rule 224 (empty -> .)
    CONTINUE        reduce using rule 224 (empty -> .)
    GOTO            reduce using rule 224 (empty -> .)
    RETURN          reduce using rule 224 (empty -> .)
    VOID            reduce using rule 224 (empty -> .)
    PUBLIC          reduce using rule 224 (empty -> .)
    PRIVATE         reduce using rule 224 (empty -> .)
    BOOL            reduce using rule 224 (empty -> .)
    INT             reduce using rule 224 (empty -> .)
    UINT            reduce using rule 224 (empty -> .)
    CHAR            reduce using rule 224 (empty -> .)
    DOUBLE          reduce using rule 224 (empty -> .)
    $end            reduce using rule 224 (empty -> .)
    BLOCK_END       reduce using rule 224 (empty -> .)
    CASE            reduce using rule 224 (empty -> .)
    DEFAULT         reduce using rule 224 (empty -> .)

    empty                          shift and go to state 82
    M_quad                         shift and go to state 403

state 401

    (171) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .

    IDENTIFIER      reduce using rule 171 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    BLOCK_BEGIN     reduce using rule 171 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    DELIM           reduce using rule 171 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    CONSOLE         reduce using rule 171 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    CONST           reduce using rule 171 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    IF              reduce using rule 171 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    SWITCH          reduce using rule 171 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    WHILE           reduce using rule 171 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    FOR             reduce using rule 171 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    DO              reduce using rule 171 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    BREAK           reduce using rule 171 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    CONTINUE        reduce using rule 171 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    GOTO            reduce using rule 171 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    RETURN          reduce using rule 171 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    VOID            reduce using rule 171 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    PUBLIC          reduce using rule 171 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    PRIVATE         reduce using rule 171 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    BOOL            reduce using rule 171 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    INT             reduce using rule 171 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    UINT            reduce using rule 171 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    CHAR            reduce using rule 171 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    DOUBLE          reduce using rule 171 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    $end            reduce using rule 171 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    BLOCK_END       reduce using rule 171 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    CASE            reduce using rule 171 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    DEFAULT         reduce using rule 171 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)


state 402

    (193) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN . M_quad block
    (175) M_quad -> . empty
    (224) empty -> .

    BLOCK_BEGIN     reduce using rule 224 (empty -> .)

    M_quad                         shift and go to state 404
    empty                          shift and go to state 82

state 403

    (172) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .

    IDENTIFIER      reduce using rule 172 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    BLOCK_BEGIN     reduce using rule 172 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    DELIM           reduce using rule 172 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    CONSOLE         reduce using rule 172 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    CONST           reduce using rule 172 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    IF              reduce using rule 172 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    SWITCH          reduce using rule 172 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    WHILE           reduce using rule 172 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    FOR             reduce using rule 172 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    DO              reduce using rule 172 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    BREAK           reduce using rule 172 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    CONTINUE        reduce using rule 172 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    GOTO            reduce using rule 172 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    RETURN          reduce using rule 172 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    VOID            reduce using rule 172 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    PUBLIC          reduce using rule 172 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    PRIVATE         reduce using rule 172 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    BOOL            reduce using rule 172 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    INT             reduce using rule 172 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    UINT            reduce using rule 172 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    CHAR            reduce using rule 172 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    DOUBLE          reduce using rule 172 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    $end            reduce using rule 172 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    BLOCK_END       reduce using rule 172 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    CASE            reduce using rule 172 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    DEFAULT         reduce using rule 172 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)


state 404

    (193) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad . block
    (138) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END

    BLOCK_BEGIN     shift and go to state 54

    block                          shift and go to state 405

state 405

    (193) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .

    IDENTIFIER      reduce using rule 193 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    BLOCK_BEGIN     reduce using rule 193 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    DELIM           reduce using rule 193 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    CONSOLE         reduce using rule 193 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    CONST           reduce using rule 193 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    IF              reduce using rule 193 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    SWITCH          reduce using rule 193 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    WHILE           reduce using rule 193 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    FOR             reduce using rule 193 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    DO              reduce using rule 193 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    BREAK           reduce using rule 193 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    CONTINUE        reduce using rule 193 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    GOTO            reduce using rule 193 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    RETURN          reduce using rule 193 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    VOID            reduce using rule 193 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    PUBLIC          reduce using rule 193 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    PRIVATE         reduce using rule 193 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    BOOL            reduce using rule 193 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    INT             reduce using rule 193 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    UINT            reduce using rule 193 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    CHAR            reduce using rule 193 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    DOUBLE          reduce using rule 193 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    BLOCK_END       reduce using rule 193 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    CASE            reduce using rule 193 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    DEFAULT         reduce using rule 193 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    $end            reduce using rule 193 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)

